! function() {
	"use strict";
	let canvas_fit_width = 100,
		canvas_fit_height = 100,
		canvas_width = 100,
		canvas_height = 100;
	class UIRoot extends Laya.Script {
		constructor() {
			super(...arguments), this.standardShort = 576, this.standardLong = 1024, this.uiMinRate = .5, this.maxRate = .75, this.canvasMinRate = .46, this.layerNode = []
		}
		static get canvasWidth() {
			return canvas_width
		}
		static get canvasHeight() {
			return canvas_height
		}
		static get canvasFitWidth() {
			return canvas_fit_width
		}
		static get canvasFitHeight() {
			return canvas_fit_height
		}
		static get fitTop() {
			return canvas_fit_height < canvas_height ? (canvas_height - canvas_fit_height) / 2 : 0
		}
		static get fitLeft() {
			return canvas_fit_width < canvas_width ? (canvas_width - canvas_fit_width) / 2 : 0
		}
		onAwake() {
			this.fixScreenResolution(), UIRoot.instance = this
		}
		onDestroy() {
			UIRoot.instance = null, super.onDestroy && super.onDestroy()
		}
		fixScreenResolution() {
			let t = new Laya.Vector2(Laya.Browser.width, Laya.Browser.height);
			console.log("frame size:", t.x, t.y);
			let e = !1;
			e = !0;
			let a, i, s, n, o, r, l = this.standardShort / this.standardLong;
			if ((a = e ? t.x / t.y : t.y / t.x) < l) {
				if (a < this.uiMinRate) {
					n = this.standardLong * (l / this.uiMinRate), r = Math.floor(this.standardLong * (l / a));
					let t = Math.floor(this.standardLong * (l / this.canvasMinRate));
					r = Math.min(r, t), i = Laya.Stage.SCALE_SHOWALL, console.log(`长边超出：重置长边 ${n}`)
				} else r = n = this.standardLong * (l / a), i = e ? Laya.Stage.SCALE_FIXED_WIDTH : Laya.Stage.SCALE_FIXED_HEIGHT, console.log(`短边适配:${n}`);
				n = Math.floor(n), o = s = this.standardShort
			} else a > l ? (a > this.maxRate ? (s = this.standardShort * (this.maxRate / l), o = Math.floor(this.standardShort * (a / l)), i = Laya.Stage.SCALE_SHOWALL, console.log(`短边超出：重置短边 ${s}`)) : (o = s = this.standardShort * (a / l), i = e ? Laya.Stage.SCALE_FIXED_HEIGHT : Laya.Stage.SCALE_FIXED_WIDTH, console.log(`长边适配:${s}`)), s = Math.floor(s), r = n = this.standardLong) : (console.log("默认适配"), o = s = this.standardShort, r = n = this.standardLong, i = e ? Laya.Stage.SCALE_FIXED_WIDTH : Laya.Stage.SCALE_FIXED_HEIGHT);
			e ? (canvas_fit_width = s, canvas_fit_height = n, canvas_width = o, canvas_height = r) : (canvas_fit_width = n, canvas_fit_height = s, canvas_width = r, canvas_height = o), console.log("cur fit size:", canvas_fit_width, canvas_fit_height), console.log("cur full size:", canvas_width, canvas_height), Laya.stage.width = canvas_width, Laya.stage.height = canvas_height, Laya.stage.scaleMode = Laya.Stage.SCALE_SHOWALL, Laya.stage.screenMode = Laya.Stage.SCREEN_NONE, Laya.stage.alignH = Laya.Stage.ALIGN_CENTER, Laya.stage.alignV = Laya.Stage.ALIGN_MIDDLE, this.owner.size(canvas_width, canvas_height), this.resizeLayerNode()
		}
		resizeLayerNode() {
			for (let t = this.layerNode.length - 1; t >= 0; t--) this.layerNode[t].size(canvas_width, canvas_height)
		}
		createLayerNode(t) {
			for (let e = this.layerNode.length; e < t; e++) {
				let t = new Laya.Sprite;
				t.name = "Layer" + e, t.size(canvas_width, canvas_height), t.mouseThrough = !0, this.owner.addChild(t), this.layerNode.push(t)
			}
		}
		getLayerNode(t) {
			let e = this.layerNode[t];
			return e || console.error(`can not find layer node :${t}`), e
		}
	}
	let _gameStartTime = 0,
		_lastUpdateTime = 0,
		_curTime = 0,
		_time = 0,
		_deltaTime = 0,
		_timeFromGameStart = 0,
		_timeOffset = 0;
	class Timer {
		constructor(t, e, a, i) {
			this._repeatCount = -1, this._span = 1, this._callback = null, this._count = 0, this._bRunning = !1, this._span = t, this._repeatCount = e, this._callback = a, this._calller = i
		}
		static get now() {
			return Date.now() / 1e3
		}
		static get time() {
			return _time + _timeOffset
		}
		static get deltaTime() {
			return _deltaTime
		}
		static get timeFromGameStart() {
			return _timeFromGameStart
		}
		static waitTime(t) {
			return new Promise(function(e, a) {
				Timer.callLater(t, function() {
					e()
				})
			})
		}
		static setTimeOffset(t) {
			_timeOffset = t
		}
		static initTime() {
			_gameStartTime = this.now, this.updateTime()
		}
		static updateTime() {
			_curTime = this.now, _time = _curTime, _timeFromGameStart = _curTime - _gameStartTime, _deltaTime = _curTime - _lastUpdateTime, _lastUpdateTime = _curTime
		}
		static callLater(t, e, a) {
			let i = new Timer(t, 1, e, a);
			return i.start(), i
		}
		static callLaterFrame(t, e, a) {
			let i = new Timer(t, 1, e, a);
			return i.startFrame(), i
		}
		static callLoop(t, e, a) {
			let i = new Timer(t, -1, e, a);
			return i.start(), i
		}
		static callLoopFrame(t, e, a) {
			let i = new Timer(t, -1, e, a);
			return i.startFrame(), i
		}
		_onSpan() {
			if (this._calller && this._calller.destroyed) this.stop();
			else {
				if (this._count++, this._callback) try {
					this._callback.call(this._calller, this)
				} catch (t) {
					Logger.catchError("Timer._onSpan:", t)
				}
				this._repeatCount >= 0 && this._count >= this._repeatCount && this.stop()
			}
		}
		isRunning() {
			return this._bRunning
		}
		get isDone() {
			return this._repeatCount >= 0 && this._count >= this._repeatCount
		}
		get count() {
			return this._count
		}
		get span() {
			return this._span
		}
		start() {
			return this.stop(), this._callback ? (this._count = 0, Laya.timer.loop(1e3 * this.span, this, this._onSpan), this._bRunning = !0, this) : (Logger.warn("警告] Timer.start callback未设置！"), this)
		}
		startFrame() {
			return this.stop(), this._callback ? (this._count = 0, Laya.timer.frameLoop(this.span, this, this._onSpan), this._bRunning = !0, this) : (Logger.warn("警告] Timer.start callback未设置！"), this)
		}
		resetCount() {
			this._count = 0
		}
		stop() {
			return this._bRunning && (Laya.timer.clear(this, this._onSpan), this._bRunning = !1), this
		}
	}
	const _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
		lookup = new Uint8Array(256);
	for (let t = 0; t < _keyStr.length; t++) lookup[_keyStr.charCodeAt(t)] = t;
	class Base64 {
		static get nativeBase64() {
			return !1
		}
		static decode(t) {
			if (t = t.replace(/[^A-Za-z0-9\+\/\=]/g, ""), this.nativeBase64) return window.atob(t);
			for (var e, a, i, s, n, o, r = [], l = 0; l < t.length;) e = _keyStr.indexOf(t.charAt(l++)) << 2 | (s = _keyStr.indexOf(t.charAt(l++))) >> 4, a = (15 & s) << 4 | (n = _keyStr.indexOf(t.charAt(l++))) >> 2, i = (3 & n) << 6 | (o = _keyStr.indexOf(t.charAt(l++))), r.push(String.fromCharCode(e)), 64 !== n && r.push(String.fromCharCode(a)), 64 !== o && r.push(String.fromCharCode(i));
			return r = r.join(""), this._utf8_decode(r)
		}
		static encode(t) {
			if (t = this._utf8_encode(t), !this.nativeBase64) {
				for (var e, a, i, s, n, o, r, l = [], c = 0; c < t.length;) s = (e = t.charCodeAt(c++)) >> 2, n = (3 & e) << 4 | (a = t.charCodeAt(c++)) >> 4, o = (15 & a) << 2 | (i = t.charCodeAt(c++)) >> 6, r = 63 & i, isNaN(a) ? o = r = 64 : isNaN(i) && (r = 64), l.push(_keyStr.charAt(s)), l.push(_keyStr.charAt(n)), l.push(_keyStr.charAt(o)), l.push(_keyStr.charAt(r));
				return l = l.join("")
			}
			window.btoa(t)
		}
		static encodeArrayBuffer(t) {
			var e, a = new Uint8Array(t),
				i = a.length,
				s = "";
			for (e = 0; e < i; e += 3) s += _keyStr[a[e] >> 2], s += _keyStr[(3 & a[e]) << 4 | a[e + 1] >> 4], s += _keyStr[(15 & a[e + 1]) << 2 | a[e + 2] >> 6], s += _keyStr[63 & a[e + 2]];
			return i % 3 == 2 ? s = s.substring(0, s.length - 1) + "=" : i % 3 == 1 && (s = s.substring(0, s.length - 2) + "=="), s
		}
		static decodeArrayBuffer(t) {
			var e, a, i, s, n, o = .75 * t.length,
				r = t.length,
				l = 0;
			"=" === t[t.length - 1] && (o--, "=" === t[t.length - 2] && o--);
			var c = new ArrayBuffer(o),
				h = new Uint8Array(c);
			for (e = 0; e < r; e += 4) a = lookup[t.charCodeAt(e)], i = lookup[t.charCodeAt(e + 1)], s = lookup[t.charCodeAt(e + 2)], n = lookup[t.charCodeAt(e + 3)], h[l++] = a << 2 | i >> 4, h[l++] = (15 & i) << 4 | s >> 2, h[l++] = (3 & s) << 6 | 63 & n;
			return c
		}
		static decodeToUnit32Array(t, e) {
			e = e || 1;
			var a, i, s, n = Base64.decode(t),
				o = new Uint32Array(n.length / e);
			for (a = 0, s = n.length / e; a < s; a++)
				for (o[a] = 0, i = e - 1; i >= 0; --i) o[a] += n.charCodeAt(a * e + i) << (i << 3);
			return o
		}
		static removePaddingChars(t) {
			return 64 == _keyStr.indexOf(t.charAt(t.length - 1)) ? t.substring(0, t.length - 1) : t
		}
		static decodeToUnit8Array(t, e) {
			t = this.removePaddingChars(t), t = this.removePaddingChars(t);
			var a = Math.floor(t.length / 4 * 3);
			let i;
			var s, n, o, r, l, c, h = 0,
				d = 0;
			for (i = e ? new Uint8Array(e) : new Uint8Array(a), t = t.replace(/[^A-Za-z0-9\+\/\=]/g, ""), h = 0; h < a; h += 3) s = _keyStr.indexOf(t.charAt(d++)) << 2 | (r = _keyStr.indexOf(t.charAt(d++))) >> 4, n = (15 & r) << 4 | (l = _keyStr.indexOf(t.charAt(d++))) >> 2, o = (3 & l) << 6 | (c = _keyStr.indexOf(t.charAt(d++))), i[h] = s, 64 != l && (i[h + 1] = n), 64 != c && (i[h + 2] = o);
			return i
		}
		static decodeToArrayBuffer(t) {
			var e = Math.floor(t.length / 4 * 3),
				a = new ArrayBuffer(e);
			return this.decodeToUnit8Array(t, a), a
		}
		static _utf8_encode(t) {
			t = t.replace(/\r\n/g, "\n");
			for (var e = "", a = 0; a < t.length; a++) {
				var i = t.charCodeAt(a);
				i < 128 ? e += String.fromCharCode(i) : i > 127 && i < 2048 ? (e += String.fromCharCode(i >> 6 | 192), e += String.fromCharCode(63 & i | 128)) : (e += String.fromCharCode(i >> 12 | 224), e += String.fromCharCode(i >> 6 & 63 | 128), e += String.fromCharCode(63 & i | 128))
			}
			return e
		}
		static _utf8_decode(t) {
			for (var e = "", a = 0, i = 0, s = 0, n = 0; a < t.length;)(i = t.charCodeAt(a)) < 128 ? (e += String.fromCharCode(i), a++) : i > 191 && i < 224 ? (s = t.charCodeAt(a + 1), e += String.fromCharCode((31 & i) << 6 | 63 & s), a += 2) : (s = t.charCodeAt(a + 1), n = t.charCodeAt(a + 2), e += String.fromCharCode((15 & i) << 12 | (63 & s) << 6 | 63 & n), a += 3);
			return e
		}
	}
	let systemConsole = console;
	var ULLog$1;
	! function(t) {
		class e {
			static info(...e) {
				t.console.allowConsole && systemConsole.info(...e)
			}
			static log(...e) {
				t.console.allowConsole && systemConsole.log(...e)
			}
			static warn(...e) {
				t.console.allowConsole && systemConsole.warn(...e)
			}
			static error(...e) {
				t.console.allowConsole && systemConsole.error(...e)
			}
		}
		e.allowConsole = !0, t.console = e
	}(ULLog$1 || (ULLog$1 = {})), window.ULLog = ULLog$1;
	class ULEventListener {
		constructor(t, e, a, i) {
			this.type = t, this.priority = e, this.callback = a, this.bDispatchOnce = i, this.bNeedRemove = !1
		}
		isDispatchOnce() {
			return !!this.bDispatchOnce
		}
		isNeedRemove() {
			return !!this.bNeedRemove
		}
		markNeedRemove() {
			this.bNeedRemove = !0
		}
		triggerCallback(t) {
			if (this.callback instanceof Function) {
				try {
					this.callback(t)
				} catch (t) {
					return ULLog.console.error("ULEventListener.triggerCallback has exception!", t), !1
				}
				return !0
			}
			return !1
		}
	}
	class ULEvent {
		constructor(t, e) {
			this.bPropagationStoped = !1, this.type = t, this.data = e, this.bPropagationStoped = !1, this.returnValue = null
		}
		stopImmediatePropagation() {
			this.bPropagationStoped = !0
		}
		setReturnValue(t, e) {
			null != t && (this.returnValue = t, e || this.stopImmediatePropagation())
		}
		getReturnValue() {
			return this.returnValue
		}
		isPropagationStoped() {
			return !!this.bPropagationStoped
		}
	}
	class ULConst {}
	ULConst.CMD_GET_BASE_CHANNEL_INFO = "/c/getBaseChannelInfo", ULConst.CMD_SET_VERSION = "/c/setVersion", ULConst.CMD_OPEN_MORE_GAME = "/c/openMoreGame", ULConst.CMD_OPEN_UL_MORE_GAME = "/c/openUlMoreGame", ULConst.CMD_OPEN_PAY = "/c/openPay", ULConst.CMD_OPEN_JF = "/c/openJf", ULConst.CMD_OPEN_SHARE = "/c/openShare", ULConst.CMD_CALL_PHONE = "/c/callPhone", ULConst.CMD_UL_WEB_VIEW = "/c/ulWebView", ULConst.CMD_EXIT_GAME = "/c/exitGame", ULConst.CMD_MEGADATA_SERVER = "/c/megadataServer", ULConst.CMD_POST_MEGADATA = "/c/postMegadata", ULConst.CMD_USE_CDKEY = "/c/useCdkey", ULConst.CMD_OPEN_ADV = "/c/openAdv", ULConst.CMD_CLICK_NATIVE_ADV = "/c/clickNativeAdv", ULConst.CMD_CLOSE_ADV = "/c/closeAdv", ULConst.CMD_CLOSE_NATIVE_ADV = "/c/closeNativeAdv", ULConst.CMD_USER_LOGIN = "/c/userLogin", ULConst.CMD_USER_LOGIN_REPORT = "/c/userLoginReport", ULConst.CMD_USER_IS_LOGIN = "/c/userIsLogin", ULConst.CMD_LOGIN_OUT = "/c/loginOut", ULConst.CMD_SAVE_RANK_DATA = "/c/saveRankData", ULConst.CMD_GET_RANK_DATA = "/c/getRankData", ULConst.CMD_RECORDER_GAME_VIDEO = "/c/recorderGameVideo", ULConst.CMD_SHARE_GAME_VIDEO = "/c/shareGameVideo", ULConst.CMD_OPEN_JUMP = "/c/openJump", ULConst.CMD_JUMP_OTHER_GAME = "/c/jumpOtherGame", ULConst.CMD_OPEN_RECOMMENDATION = "/c/openRecommendation", ULConst.CMD_CLOSE_RECOMMENDATION = "/c/closeRecommendation", ULConst.CMD_SAVE_USER_DATA = "/c/saveUserData", ULConst.CMD_GET_USER_DATA = "/c/getUserData", ULConst.CMD_ADD_GAME_TO_MY_FAVORITE = "/c/addGameToMyFavorite", ULConst.CMD_GET_USER_INFO_MSG = "/c/getUserInfoMsg", ULConst.CMD_OPEN_USERINFO_ACCREDIT_BUTTON = "/c/openUserInfoAccreditButton", ULConst.CMD_CLOSE_USERINFO_ACCREDIT_BUTTON = "/c/closeUserInfoAccreditButton", ULConst.CMD_INSTALL_SHORTCUT = "/c/installShortcut", ULConst.CMD_SET_CLIPBOARD_DATA = "/c/setClipboardData", ULConst.CMD_GET_CLIPBOARD_DATA = "/c/getClipboardData", ULConst.CMD_SET_ULSDKDEMO_DEBUG_MODE = "/c/setUlsdkdemoDebugMode", ULConst.CMD_MPSDK_AD_HANDLER = "/c/mpsdkAdHandler", ULConst.CMD_CREATE_GAME_ICON = "/c/createGameIcon", ULConst.CMD_GAME_ICON_HANDLER = "/c/gameIconHandler", ULConst.CMD_OPEN_CHANNEL_MORE_GAME_BOX = "/c/openChannelMoreGameBox", ULConst.CMD_OPEN_BLOCK_AD = "/c/openBlockAd", ULConst.CMD_CLOSE_BLOCK_AD = "/c/closeBlockAd", ULConst.CMD_GET_SHORTCUT_STATE = "/c/getShortcutState", ULConst.CMD_ADD_SUBSCRIBE = "/c/addSubscribe", ULConst.CMD_ADD_COLOR_SIGN = "/c/addColorSign", ULConst.CMD_OPEN_GRID_AD = "/c/openGridAd", ULConst.CMD_CLOSE_GRID_AD = "/c/closeGridAd", ULConst.CMD_JUMP_TO_VIDEO_VIEW = "/c/jumpToVideoView", ULConst.CMD_FOLLOW_OFFICIAL_ACCOUNT = "/c/followOfficialAccount", ULConst.CMD_GET_FOLLOW_OFFICIAL_ACCOUNT_STATE = "/c/getFollowOfficialAccountState", ULConst.CMD_CONTENT_SECURITY_CHECK = "/c/contentSecurityCheck", ULConst.CMD_JUMP_LEISURE_SUBJECT = "/c/jumpLeisureSubject", ULConst.CMD_PHONE_VIBRATE = "/c/phoneVibrate", ULConst.CMD_OPEN_URL = "/c/openUrl", ULConst.CMD_SHOW_CHANNEL_MASK = "/c/showChannelMask", ULConst.CMD_CLOSE_CHANNEL_MASK = "/c/closeChannelMask", ULConst.CMD_OPEN_ADVANCED_SETTING = "/c/openAdvancedSetting", ULConst.CMD_RANKLIST_GET_USER_NUM = "/c/getUserNumInRank", ULConst.CMD_RANKLIST_GET_USER_INFO_BY_ID = "/c/getUserInfoByIdInRank", ULConst.CMD_RANKLIST_GET_USER_INFO_BY_LIST = "/c/getUserInfoListByRankId", ULConst.CMD_RANKLIST_REPORT_USER_INFO = "/c/reportUserInfoInRank", ULConst.CMD_RANKLIST_MODIFY_SCORE_BY_ARRAY = "/c/modifyScoreByArray", ULConst.CMD_CHANNEL_INFO_RESULT = "/c/channelInfoResult", ULConst.CMD_GET_BASE_CHANNEL_INFO_RESULT = "/c/getBaseChannelInfoResult", ULConst.CMD_PAY_RESULT = "/c/payResult", ULConst.CMD_PRE_PAY_RESULT = "/c/prePayResult", ULConst.CMD_SHARE_RESULT = "/c/shareResult", ULConst.CMD_LIFE_CYCLE_RESULT = "/c/lifeCycle", ULConst.CMD_PAUSE_SOUND_RESULT = "/c/pauseSound", ULConst.CMD_RESUME_SOUND_RESULT = "/c/resumeSound", ULConst.CMD_COP_INFO_RESULT = "/c/copInfoResult", ULConst.CMD_MEGADATA_SERVER_RESULT = "/c/megadataServer", ULConst.CMD_POST_MEGADATA_RESULT = "/c/postMegadataResult", ULConst.CMD_USE_CDKEY_RESULT = "/c/useCdkey", ULConst.CMD_OPEN_ADV_RESULT = "/c/openAdvResult", ULConst.CMD_OPEN_NATIVE_ADV_RESULT = "/c/openNativeAdvResult", ULConst.CMD_CLICK_NATIVE_ADV_RESULT = "/c/clickNativeAdvResult", ULConst.CMD_CLICK_ADV_RESULT = "/c/clickAdvResult", ULConst.CMD_CLOSE_ADV_RESULT = "/c/closeAdvResult", ULConst.CMD_CLOSE_NATIVE_ADV_RESULT = "/c/closeNativeAdvResult", ULConst.CMD_USER_LOGIN_RESULT = "/c/userLoginResult", ULConst.CMD_USER_IS_LOGIN_RESULT = "/c/userIsLoginResult", ULConst.CMD_USER_LOGIN_REPORT_RESULT = "/c/userLoginReportResult", ULConst.CMD_LOGIN_OUT_RESULT = "/c/loginOutResult", ULConst.CMD_ADV_VALID_COUNT_RESULT = "/c/advValidCountResult", ULConst.CMD_SAVE_RANK_DATA_RESULT = "/c/saveRankDataResult", ULConst.CMD_GET_RANK_DATA_RESULT = "/c/getRankDataResult", ULConst.CMD_RECORDER_GAME_VIDEO_RESULT = "/c/recorderGameVideoResult", ULConst.CMD_SHARE_GAME_VIDEO_RESULT = "/c/shareGameVideoResult", ULConst.CMD_OPEN_JUMP_RESULT = "/c/openJumpResult", ULConst.CMD_JUMP_OTHER_GAME_RESULT = "/c/jumpOtherGameResult", ULConst.CMD_JUMP_OTHER_GAME_REWARD_RESULT = "/c/jumpOtherGameRewardResult", ULConst.CMD_EXTRA_BONUS_RESULT = "/c/extraBonus", ULConst.CMD_OPEN_RECOMMENDATION_RESULT = "/c/openRecommendationResult", ULConst.CMD_CLOSE_RECOMMENDATION_RESULT = "/c/closeRecommendationResult", ULConst.CMD_SAVE_USER_DATA_RESULT = "/c/saveUserDataResult", ULConst.CMD_GET_USER_DATA_RESULT = "/c/getUserDataResult", ULConst.CMD_ADD_GAME_TO_MY_FAVORITE_RESULT = "/c/addGameToMyFavoriteResult", ULConst.CMD_GET_USER_INFO_MSG_RESULT = "/c/getUserInfoMsgResult", ULConst.CMD_OPEN_USERINFO_ACCREDIT_BUTTON_RESULT = "/c/openUserInfoAccreditButtonResult", ULConst.CMD_CLOSE_USERINFO_ACCREDIT_BUTTON_RESULT = "/c/closeUserInfoAccreditButtonResult", ULConst.CMD_APP_SHARE_RESULT = "/c/appShareResult", ULConst.CMD_INSTALL_SHORTCUT_RESULT = "/c/installShortcutResult", ULConst.CMD_SET_CLIPBOARD_DATA_RESULT = "/c/setClipboardDataResult", ULConst.CMD_GET_CLIPBOARD_DATA_RESULT = "/c/getClipboardDataResult", ULConst.CMD_MPSDK_AD_HANDLER_RESULT = "/c/mpsdkAdHandlerResult", ULConst.CMD_CREATE_GAME_ICON_RESULT = "/c/createGameIconResult", ULConst.CMD_GAME_ICON_HANDLER_RESULT = "/c/gameIconHandlerResult", ULConst.CMD_OPEN_CHANNEL_MORE_GAME_BOX_RESULT = "/c/openChannelMoreGameBoxResult", ULConst.CMD_OPEN_BLOCK_AD_RESULT = "/c/openBlockAdResult", ULConst.CMD_CLOSE_BLOCK_AD_RESULT = "/c/closeBlockAdResult", ULConst.CMD_GET_SHORTCUT_STATE_RESULT = "/c/getShortcutStateResult", ULConst.CMD_ADD_SUBSCRIBE_RESULT = "/c/addSubscribeResult", ULConst.CMD_ADD_COLOR_SIGN_RESULT = "/c/addColorSignResult", ULConst.CMD_OPEN_GRID_AD_RESULT = "/c/openGridAdResult", ULConst.CMD_CLOSE_GRID_AD_RESULT = "/c/closeGridAdResult", ULConst.CMD_JUMP_TO_VIDEO_VIEW_RESULT = "/c/jumpToVideoViewResult", ULConst.CMD_FOLLOW_OFFICIAL_ACCOUNT_RESULT = "/c/followOfficialAccountResult", ULConst.CMD_GET_FOLLOW_OFFICIAL_ACCOUNT_STATE_RESULT = "/c/getFollowOfficialAccountStateResult", ULConst.CMD_CONTENT_SECURITY_CHECK_RESULT = "/c/contentSecurityCheckResult", ULConst.CMD_JUMP_LEISURE_SUBJECT_RESULT = "/c/jumpLeisureSubjectResult", ULConst.CMD_PHONE_VIBRATE_RESULT = "/c/phoneVibrateResult", ULConst.CMD_JUMP_NEW_USER_GUIDE = "/c/jumpNewGuide", ULConst.CMD_OPEN_URL_RESULT = "/c/openUrlResult", ULConst.CMD_CLEAN_UP_GAME_ARCHIVE = "/c/cleanUpGameArchive", ULConst.CMD_SHOW_POINT_DEBUG_INFO = "/c/showPointDebugInfo", ULConst.CMD_MOYANG_QQ_NET_EARNED_QUERY = "/c/qqNetEarnedQuery", ULConst.CMD_MOYANG_QQ_NET_EARNED_RECHARGE = "/c/qqNetEarnedRecharge", ULConst.CMD_MOYANG_QQ_NET_EARNED_CASH = "/c/qqNetEarnedCash", ULConst.CMD_MOYANG_QQ_NET_EARNED_QUERY_RESULT = "/c/qqNetEarnedQueryResult", ULConst.CMD_MOYANG_QQ_NET_EARNED_RECHARGE_RESULT = "/c/qqNetEarnedRechargeResult", ULConst.CMD_MOYANG_QQ_NET_EARNED_CASH_RESULT = "/c/qqNetEarnedCashResult", ULConst.CMD_RANKLIST_GET_USER_NUM_RESULT = "/c/getUserNumInRankResult", ULConst.CMD_RANKLIST_GET_USER_INFO_BY_ID_RESULT = "/c/getUserInfoByIdInRankResult", ULConst.CMD_RANKLIST_GET_USER_INFO_BY_LIST_RESULT = "/c/getUserInfoListByRankIdResult", ULConst.CMD_RANKLIST_REPORT_USER_INFO_RESULT = "/c/reportUserInfoInRankResult", ULConst.CMD_RANKLIST_MODIFY_SCORE_BY_ARRAY_RESULT = "/c/modifyScoreByArrayResult", ULConst.CMD_SDK_ON_COP_CHANGED = "/sdk/onCopChanged", ULConst.CMD_SDK_PREPARE_SHOW_VIDEO_ADV = "/sdk/prepareShowVideoAdv", ULConst.CMD_SDK_PREPARE_SHOW_INTER_ADV = "/sdk/prepareShowInterAdv", ULConst.CMD_SDK_PREPARE_SHOW_BANNER_ADV = "/sdk/prepareShowBannerAdv", ULConst.CMD_SDK_PREPARE_SHOW_EMBEDDED_ADV = "/sdk/prepareShowEmbeddedAdv", ULConst.CMD_SDK_PREPARE_SHOW_URL_ADV = "/sdk/prepareShowUrlAdv", ULConst.CMD_SDK_PREPARE_SHOW_PASTER_ADV = "/sdk/prepareShowPasterAdv", ULConst.CMD_SDK_SHOW_VIDEO_ADV = "/sdk/showVideoAdv", ULConst.CMD_SDK_SHOW_INTER_ADV = "/sdk/showInterAdv", ULConst.CMD_SDK_SHOW_BANNER_ADV = "/sdk/showBannerAdv", ULConst.CMD_SDK_SHOW_EMBEDDED_ADV = "/sdk/showEmbeddedAdv", ULConst.CMD_SDK_SHOW_URL_ADV = "/sdk/showUrlAdv", ULConst.CMD_SDK_SHOW_PASTER_ADV = "/sdk/showPasterAdv", ULConst.CMD_SDK_CLOSE_VIDEO_ADV = "/sdk/closeVideoAdv", ULConst.CMD_SDK_CLOSE_INTER_ADV = "/sdk/closeInterAdv", ULConst.CMD_SDK_CLOSE_BANNER_ADV = "/sdk/closeBannerAdv", ULConst.CMD_SDK_CLOSE_EMBEDDED_ADV = "/sdk/closeEmbeddedAdv", ULConst.CMD_SDK_CLOSE_URL_ADV = "/sdk/closeUrlAdv", ULConst.CMD_SDK_CLOSE_Paster_ADV = "/sdk/closePasterAdv", ULConst.CMD_SDK_CLOSE_NATIVE_ADV = "/sdk/closeNativeAdv", ULConst.CMD_SDK_CLICK_NATIVE_ADV = "/sdk/clickNativeAdv", ULConst.CMD_SDK_GET_STORAGE = "/sdk/getStorge", ULConst.CMD_SDK_SET_STORAGE = "/sdk/setStorge", ULConst.CMD_SDK_GET_CLIPBOARD_DATA = "/sdk/getClipboardData", ULConst.CMD_SDK_SET_CLIPBOARD_DATA = "/sdk/setClipboardData", ULConst.CMD_SDK_IS_SUPPORT_CLIPBOARD = "/sdk/isSupportClipboard", ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG = "/sdk/collectionModuleCheckerConfig", ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_MORE_GAME_AB_TEST_CONFIG = "/sdk/collectionModuleCheckerMoreGameAbTestConfig", ULConst.CMD_SDK_TOUCH_SCREEN_END = "/sdk/touchScreenEnd", ULConst.CMD_SDK_ON_GAME_START = "/sdk/onGameStart", ULConst.CMD_SDK_ON_GAME_PAUSE = "/sdk/onGamePause", ULConst.CMD_SDK_ON_GAME_RESUME = "/sdk/onGameResume", ULConst.CMD_SDK_ON_SHARE_SHOW = "/sdk/onShareShow", ULConst.CMD_SDK_ON_SAHRE_APP_MESSAGE = "/sdk/onShareAppMessage", ULConst.CMD_SDK_ON_REPORT_ULSDK_EVENT = "/sdk/ulsdkMegadataUpload", ULConst.CMD_SDK_OPEN_SHARE_DURING_ADV = "/sdk/openShareDuringAdv", ULConst.CMD_SDK_CHANNEL_MEGADATA_POST = "/sdk/channelMegadataPost", ULConst.CMD_SDK_SET_UP_WEBVIEW_JAVASCRIPT_BRIDGE = "/sdk/setUpWebViewJavascriptBridge", ULConst.CMD_SDK_EXPRESS_NATIVE_ADV_STATUS_CHANGE = "/sdk/expressNativeAdvStatusChange", ULConst.CMD_MOYANG_QQ_REWARD_VIDEO_PLAY = "/sdk/moyangQQRewardVideoPlay", ULConst.CMD_MOYANG_QQ_REWARD_VIDEO_CLOSE = "/sdk/moyangQQRewardVideoClose", ULConst.CMD_FACEBOOK_INIT_COMPLETE = "/sdk/facebookInitComplete", ULConst.CMD_SDK_INIT_USER_LOGIN = "/sdk/initUserLogin", ULConst.CMD_SDK_QM_LOGIN_REPORT = "/qmsdk/loginReport", ULConst.CMD_SDK_QM_REPORT_EVENT = "/qmsdk/reportEvent", ULConst.CMD_SDK_QM_REPORT_GOLD = "/qmsdk/reportGold", ULConst.CMD_SDK_QM_SET_ACCOUNT_INFO = "/qmsdk/setAccountInfo", ULConst.CMD_SDK_QM_GET_OPEN_LEVEL = "/qmsdk/getOpenLevel", ULConst.CMD_SDK_QM_GET_RECOMMEND_INFO = "/qmsdk/getRecommendInfo", ULConst.CMD_SDK_QM_GET_SUGGEST_LIST = "/qmsdk/getSuggestList", ULConst.CMD_SDK_QM_GET_EXCITATION_LIST = "/qmsdk/getExcitationList", ULConst.CMD_SDK_QM_MPSDK_AD_CLICK = "/qmsdk/mpsdkAdClick", ULConst.CMD_SDK_QM_MPSDK_CLICK_SYNC = "/qmsdk/mpsdkClickSync", ULConst.CMD_SDK_QM_GET_USER_DATA_VERSION = "/qmsdk/getUserDataVersion", ULConst.CMD_SDK_QM_IS_STRONG_FISSION = "/qmsdk/isStrongFission", ULConst.CMD_SDK_QM_REPORT_VIDEO_TIME_EVENT = "/qmsdk/reportVideoTimeEvent", ULConst.CMD_SDK_OPPOQG_MARK_MANUAL_CLOSE_BANNER_COUNT = "/sdk/oppoqg/markManualCloseBannerCount", ULConst.CMD_SDK_OPPOQG_GET_MANUAL_CLOSE_BANNER_COUNT = "/sdk/oppoqg/getManualCloseBannerCount", ULConst.CMD_SDK_OPPOQG_HAS_BANNER_SHOWING = "/sdk/oppoqg/hasBannerShowing", ULConst.PRIORITY_DISABLE = -2, ULConst.PRIORITY_NONE = -1, ULConst.CONSOLE_OUTPUT_LEVEL_WARN = 1, ULConst.CONSOLE_OUTPUT_LEVEL_ERROR = 1, ULConst.CONSOLE_OUTPUT_LEVEL_LOG = 2, ULConst.CONSOLE_OUTPUT_LEVEL_INNER_DEBUG = 3, ULConst.B_INNER_DEBUG = !1, ULConst.COP_RETRY_TIME_SEC = 30, ULConst.STATIS_TYPE_BASE_INFO = "1", ULConst.STATIS_TYPE_PAY_INFO = "2", ULConst.STATIS_TYPE_ADV_INFO = "3", ULConst.STATIS_TYPE_COP_REQUEST = "4", ULConst.STATIS_TYPE_USER_EVENT = "5", ULConst.STATIS_TYPE_ONLINE_TIME = "6", ULConst.STATIS_TYPE_POINT_EVENT = "7", ULConst.STATIS_TYPE_COIN_CHANGE_EVENT = "5", ULConst.STATIS_TYPE_COMMON_EVENT = "7", ULConst.STATIS_TYPE_LEVEL_START_EVENT = "8", ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT = "9", ULConst.STATIS_TYPE_ITEM_BUY = "10", ULConst.STATIS_TYPE_BUY_ACTION = "11", ULConst.STATIS_TYPE_VIDEO_POINT_EVENT = "12", ULConst.DEFAULT_REFERANCE_BANNER_HEIGHT = 200, ULConst.STATIS_USER_EVENT_GAME_LEVEL_START = "gameLevelStart", ULConst.STATIS_USER_EVENT_GAME_LEVEL_COMPLETE = "gameLevelComplete", ULConst.STATIS_USER_EVENT_GAME_COIN_ADD = "gameCoinAdd", ULConst.STATIS_USER_EVENT_GAME_COIN_LOST = "gameCoinLost", ULConst.STATIS_USER_EVENT_BUY_ACTION = "buyAction", ULConst.STATIS_USER_EVENT_ITEM_BUY = "itemBuy", ULConst.STATIS_USER_EVENT_COMMON_EVENT = "commonEvent", ULConst.STATIS_USER_EVENT_COMMON_EVENT_MULTI_FIELD = "commonEventMultiField", ULConst.STATIS_USER_EVENT_POINT_EVENT = "pointEvent", ULConst.STATIS_USER_ACTION_EVENT_LEVEL_START = "levelStart", ULConst.STATIS_USER_ACTION_EVENT_LEVEL_COMPLETE = "levelComplete", ULConst.STATIS_USER_ACTION_EVENT_COIN_CHANGE = "coinChange", ULConst.STATIS_USER_ACTION_EVENT_ITEM_BUY = "itemBuy", ULConst.STATIS_USER_ACTION_EVENT_BUY_ACTION = "buyAction", ULConst.STATIS_USER_ACTION_EVENT_COMMON_EVENT = "commonEvent", ULConst.STATIS_USER_ACTION_EVENT_VIDEO_POINT_EVENT = "videoPointEvent", ULConst.STATIS_UPLOAD_SPAN = 60, ULConst.STATIS_UPLOAD_SINGLE_REQUEST_MAX_COUNT = 100, ULConst.ADV_FAIL_TIP_NOAD = "暂时无法播放广告，请稍后再试", ULConst.ADV_FAIL_TIP_BUSY = "广告准备中，请稍后再试", ULConst.ENGLISH_ADV_FAIL_TIP_NOAD = "Ad display failed, please retry later.", ULConst.ENGLISH_ADV_FAIL_TIP_BUSY = "Ad in preparation, please retry later.", ULConst.ADV_ERR_CODE_CONSECUTIVE_FAIL = -100, ULConst.ADV_ERR_CODE_CDING = -101, ULConst.ADV_ERR_CODE_NATIVE_ID_ERROR = -102, ULConst.ADV_ERR_CODE_NATIVE_DATA_ERROR = -102, ULConst.ADV_ERR_CODE_CAN_NOT_PLAY = -103, ULConst.ADV_ERR_CODE_NOT_INITED = -104, ULConst.ADV_ERR_CODE_UNKNOWN = -105, ULConst.ADV_ERR_CODE_SHARE_NO_CALLBACK = -106, ULConst.ADV_ERR_CODE_SHARE_FAIL = -107, ULConst.ADV_ERR_CODE_ADOBJ_NULL = -108, ULConst.ADV_ERR_CODE_ADV_TYPE_CD = -109, ULConst.ADV_ERR_CODE_ADV_TYPE_DAILY_LIMIT = -110, ULConst.ADV_PRELOAD_STATE_READY = 1, ULConst.ADV_PRELOAD_STATE_LOADING = 2, ULConst.ADV_PRELOAD_STATE_NOAD = 3, ULConst.ADV_RESULT_CODE_SUCCESS = 1, ULConst.ADV_RESULT_CODE_FAILED = 0, ULConst.ADV_RESULT_CODE_OBSOLETE = 2, ULConst.ADV_MUST_DEFAULT_WEIGHT = 100, ULConst.ADV_RANDOM_DEFAULT_WEIGHT = 1, ULConst.ADV_DISABLE_DEFAULT_WEIGHT = 0, ULConst.ADV_RESULT_MSG_FAILED = "哎呀,广告走丢啦", ULConst.ADV_RESULT_MSG_SUCCESS = "show adv success", ULConst.ADV_NATIVE_RESULT_MSG_SUCCESS = "load native data success", ULConst.ADV_NATIVE_RESULT_MSG_FAIL = "load native data fail", ULConst.ADV_VIDEO_PLAY_FAIL_MSG = "广告提前关闭,无法获得奖励", ULConst.ADV_RESULT_MSG_CLICK = "click adv", ULConst.ADV_RESULT_MSG_CLOSE = "close adv", ULConst.ADV_NATIVE_OBSOLETE_MSG = "广告数据作废", ULConst.EXP_ADV_TYPE_CONST = "atype", ULConst.EXP_ADV_TEMPLATE_CONST = "tid", ULConst.EXP_ADV_POINT_CONST = ".", ULConst.UL_EVENT_ONREQUEST = "onRequest", ULConst.CMD_GET_ADV_STATE_RESULT = "/c/getAdvStateResult", ULConst.CMD_CLOSE_ALL_ADV_BY_TYPE_RESULT = "/c/closeAllAdvByTypeResult", ULConst.CMD_JUMP_NEW_GUIDE = "/c/jumpNewGuide", ULConst.CMD_GET_ADV_STATE = "/c/getAdvState", ULConst.CMD_CLOSE_ALL_ADV_BY_TYPE = "/c/closeAllAdvByType", ULConst.CMD_REWARD_ADV_RESULT = "/c/rewardAdvResult", ULConst.UL_ADV_DEFAULT_TIMEOUT_TIME = 3e4, ULConst.DEFAULT_TITLE = "广告", ULConst.DEFAULT_DESC = "哇!这个实在太棒啦!", ULConst.DEFAULT_TARGET_TITLE = "查看广告", ULConst.MIN_NATIVE_RESPONSE_CACHE_TIMEOUT = 0, ULConst.MAX_NATIVE_RESPONSE_CACHE_TIMEOUT = 3e4, ULConst.DEFAULT_NATIVE_RESPONSE_CACHE_TIMEOUT = 15e3, ULConst.ADV_LOAD_TYPE_PRELOAD = 1, ULConst.ADV_LOAD_TYPE_UNPRELOAD = 0;
	class ULEventDispatcher {
		constructor() {
			this.allListeners = {}
		}
		static getInstance() {
			return this._instance || (this._instance = new ULEventDispatcher), this._instance
		}
		addListener(t, e, a) {
			return this._addListener(t, e, a, !1)
		}
		once(t, e, a) {
			return this._addListener(t, e, a, !0)
		}
		_addListener(t, e, a, i) {
			if (e < ULConst.PRIORITY_NONE) return void this.removeListenerByCallback(t, a);
			let s = this.allListeners[t];
			s || (s = [], this.allListeners[t] = s);
			let n = -1;
			for (let i = 0; i < s.length; i++) {
				let o = s[i];
				if (o.callback == a) return ULLog.console.warn("ULEventDispatcher._addListener callback already exists:", t), !1; - 1 == n && o.priority < e && (n = i)
			}
			let o = new ULEventListener(t, e, a, i);
			return -1 != n ? s.splice(n, 0, o) : s.push(o), !0
		}
		removeListenerByCallback(t, e) {
			let a = this.allListeners[t];
			if (a)
				for (let t = a.length - 1; t >= 0; t--) {
					a[t].callback == e && a.splice(t, 1)
				}
		}
		removeListenersByType(t) {
			delete this.allListeners[t]
		}
		dispatch(t, e) {
			let a = null;
			return a = t instanceof ULEvent ? t : new ULEvent(t, e), ULConst.B_INNER_DEBUG && ULLog.console.log("ULEventDispatcher.dispatch", a.type, a.data), this._inner_dispatch(a).bCalled
		}
		dispatchWithReturn(t, e) {
			let a = null;
			return a = t instanceof ULEvent ? t : new ULEvent(t, e), ULConst.B_INNER_DEBUG && ULLog.console.log("ULEventDispatcher.dispatchWithReturn", a.type, a.data), this._inner_dispatch(a).returnValue
		}
		_inner_dispatch(t) {
			let e = !1,
				a = this.allListeners[t.type];
			if (!a) return ULConst.B_INNER_DEBUG && ULLog.console.log("  listeners not found"), {
				bCalled: !1,
				returnValue: null
			};
			for (let i = 0; i < a.length; i++) {
				const s = a[i];
				if (!s.isNeedRemove() && (s.isDispatchOnce() && s.markNeedRemove(), s.triggerCallback(t) && (e = !0), t.isPropagationStoped())) break
			}
			for (let t = a.length - 1; t >= 0; t--) {
				a[t].isNeedRemove() && a.splice(t, 1)
			}
			return {
				bCalled: e,
				returnValue: t.getReturnValue()
			}
		}
	}
	ULEventDispatcher._instance = null;
	var cConfig = JSON.parse('{\n    "b_sdk_oppoqg_debug": false,\n    "b_sdk_vivo_debug": false,\n    "creatorVersion": "",\n    "i_channel_info_timeout": 3000,\n    "i_game_start_ready_timeout": 10000,\n    "i_net_timeout": 5000,\n    "i_sdk_adv_banner_cd": 0,\n    "i_sdk_adv_banner_timeout": 30000,\n    "i_sdk_adv_embedded_timeout": 30000,\n    "i_sdk_adv_inter_cd": 0,\n    "i_sdk_adv_inter_timeout": 30000,\n    "i_sdk_adv_native_clicked_report_mode": 0,\n    "i_sdk_adv_native_life_time": 15000,\n    "i_sdk_adv_native_request_cd": 10000,\n    "i_sdk_adv_oppoqg_native_exposure_cd": 0,\n    "i_sdk_adv_paster_timeout": 30000,\n    "i_sdk_adv_type_banner_cd": 0,\n    "i_sdk_adv_type_banner_daily_limit": 0,\n    "i_sdk_adv_type_embedded_cd": 0,\n    "i_sdk_adv_type_embedded_daily_limit": 0,\n    "i_sdk_adv_type_interstitial_cd": 0,\n    "i_sdk_adv_type_interstitial_daily_limit": 0,\n    "i_sdk_adv_type_paster_cd": 0,\n    "i_sdk_adv_type_paster_daily_limit": 0,\n    "i_sdk_adv_type_url_cd": 0,\n    "i_sdk_adv_type_url_daily_limit": 0,\n    "i_sdk_adv_type_video_cd": 0,\n    "i_sdk_adv_type_video_daily_limit": 0,\n    "i_sdk_adv_url_timeout": 30000,\n    "i_sdk_adv_video_timeout": 30000,\n    "i_sdk_age_level_info_mode": 0,\n    "i_sdk_baidu_ad_failed_share_reward_success_count_limit": 3,\n    "i_sdk_baidu_add_game_to_my_favorite_mode": 0,\n    "i_sdk_baidu_auto_upload": 1,\n    "i_sdk_baidu_banner_timeout": 30000,\n    "i_sdk_baidu_debug_mode": 0,\n    "i_sdk_baidu_jump_game_reward_time": 20000,\n    "i_sdk_baidu_qrcode_preview": 1,\n    "i_sdk_bilibili_ad_failed_share_reward_success_count_limit": 5,\n    "i_sdk_bilibili_debug_mode": 0,\n    "i_sdk_channel_user_id_mode": 0,\n    "i_sdk_compress_res_mode": 1,\n    "i_sdk_content_security_check_support": 1,\n    "i_sdk_debug_mode": 0,\n    "i_sdk_facebook_megadata_mode": 0,\n    "i_sdk_find_mini_game_mode": 1,\n    "i_sdk_hago_banner_id": 0,\n    "i_sdk_hago_user": 1,\n    "i_sdk_hago_video_id": 10438,\n    "i_sdk_headline_ad_failed_share_reward_success_count_limit": 3,\n    "i_sdk_headline_auto_upload": 1,\n    "i_sdk_headline_cuttemplate_default_interval": 2000,\n    "i_sdk_headline_favorite_mode": 1,\n    "i_sdk_headline_follow_support": 1,\n    "i_sdk_headline_getUserInfo_force": 1,\n    "i_sdk_headline_installShortcut_support": 1,\n    "i_sdk_headline_qrcode_preview": 1,\n    "i_sdk_headline_record_delay_time": 500,\n    "i_sdk_headline_record_support": 1,\n    "i_sdk_headline_subscribe_use_temleteIds_mode": 0,\n    "i_sdk_installShortcut_mode": 1,\n    "i_sdk_jump_game_resource_mode": 1,\n    "i_sdk_jump_single_random_length": 5,\n    "i_sdk_jumplist_mode": 1,\n    "i_sdk_kk_appId": 0,\n    "i_sdk_kuaishou_follow_support": 1,\n    "i_sdk_kuaishou_record_delay_time": 500,\n    "i_sdk_kuaishou_record_support": 1,\n    "i_sdk_lianxin_is_landscape": 0,\n    "i_sdk_megadata_encrypt": 1,\n    "i_sdk_megadata_mode": 0,\n    "i_sdk_megadata_upload_span": 5000,\n    "i_sdk_moreWonderful_mode": 0,\n    "i_sdk_moregame_mode": 1,\n    "i_sdk_oppoqg_ad_ecd": 0,\n    "i_sdk_oppoqg_banner_mode": 0,\n    "i_sdk_oppoqg_jump_game_reward_time": 20000,\n    "i_sdk_oppoqg_not_show_banner_after_user_close_count_limit": 5,\n    "i_sdk_pay_mode": 0,\n    "i_sdk_phone_vibrate": 0,\n    "i_sdk_qq_ad_failed_share_reward_confirm_success_cycle": 72000,\n    "i_sdk_qq_ad_failed_share_reward_fail_count": 2,\n    "i_sdk_qq_ad_failed_share_reward_success_count_limit": 3,\n    "i_sdk_qq_ad_failed_share_reward_success_radios": 70,\n    "i_sdk_qq_ad_failed_share_reward_success_time_interval": 5000,\n    "i_sdk_qq_appbox_cd": 30000,\n    "i_sdk_qq_appbox_suc_ratios": 0,\n    "i_sdk_qq_auto_upload": 1,\n    "i_sdk_qq_block_cd": 30000,\n    "i_sdk_qq_qrcode_preview": 1,\n    "i_sdk_refresh_request_num": 18,\n    "i_sdk_sdk_rank_mode": 0,\n    "i_sdk_share_mode": 0,\n    "i_sdk_support_open_url": 0,\n    "i_sdk_support_record_share": 1,\n    "i_sdk_trim_adv_err_switch": 1,\n    "i_sdk_weixin_ad_failed_share_reward_confirm_success_cycle": 72000,\n    "i_sdk_weixin_ad_failed_share_reward_fail_count": 2,\n    "i_sdk_weixin_ad_failed_share_reward_success_count_limit": 3,\n    "i_sdk_weixin_ad_failed_share_reward_success_radios": 70,\n    "i_sdk_weixin_ad_failed_share_reward_success_time_interval": 5000,\n    "i_sdk_weixin_auto_upload": 1,\n    "i_sdk_weixin_banner_autoRefresh_mode": 0,\n    "i_sdk_weixin_banner_intervals": 30,\n    "i_sdk_weixin_currency_ratio": 10,\n    "i_sdk_weixin_env": 0,\n    "i_sdk_weixin_jump_game_reward_time": 0,\n    "i_sdk_weixin_jump_game_reward_type": 0,\n    "i_sdk_weixin_qrcode_preview": 1,\n    "i_sdk_weixin_replace_grid_with_custom": 1,\n    "i_sdk_weixin_subscribe_use_temleteIds_mode": 0,\n    "layaVersion": "",\n    "s_game_name": "叶罗丽彩妆公主",\n    "s_prj_name": "prj.game83",\n    "s_sdk_4399minigame_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/game83/4399minigame/v1",\n    "s_sdk_adv_info": {\n        "1": {\n            "group": [\n                "1"\n            ],\n            "type": "interstitial"\n        },\n        "2": {\n            "group": [\n                "2"\n            ],\n            "type": "banner"\n        },\n        "3": {\n            "group": [\n                "3"\n            ],\n            "type": "embedded"\n        },\n        "4": {\n            "group": [\n                "4"\n            ],\n            "type": "video"\n        },\n        "5": {\n            "group": [\n                "5"\n            ],\n            "type": "url"\n        }\n    },\n    "s_sdk_adv_show_banner_list": "ULAdvFaceBook",\n    "s_sdk_adv_show_embedded_list": "0",\n    "s_sdk_adv_show_inter_list": "ULAdvFaceBook",\n    "s_sdk_adv_show_paster_list": "0",\n    "s_sdk_adv_show_url_list": "0",\n    "s_sdk_adv_show_video_list": "ULAdvFaceBook",\n    "s_sdk_age_level_info": "",\n    "s_sdk_baidu_adv_app_sid": "d644b8c5",\n    "s_sdk_baidu_app_id": "22543335",\n    "s_sdk_baidu_banner_id": "0",\n    "s_sdk_baidu_change_log": "",\n    "s_sdk_baidu_deal_id": "0",\n    "s_sdk_baidu_min_swan_version": "1.0.8",\n    "s_sdk_baidu_pay_app_key": "BQf3kGzeftWjILQ90n2BsmFkBAkOP9Dw",\n    "s_sdk_baidu_pay_private_key": "-----BEGIN RSA PRIVATE KEY-----MIICXgIBAAKBgQC46Giy1S4Zuys/c3QO6VZVWAOo1tussbIpqI0M7edU9OC732leFej2DmG3O9XRh9NlYjoAq4hyt7DxiZ6MyN8IdStZn4b0/e/CZKQA5WaCI5h71hUTwCJTzHZHvO+woDWaE2mOSsBfjAdwTsHUr32eCPzju/1zatys02W7ai4v+wIDAQABAoGAGjbAmRHF3ln9kJpCitajqae3pRkIvZvXgTZnAL09fXrV3WyX2IHMrA1v5vUxo+nYm1foly26Q2EtUaDL/HOBwshbwEtR5TR0g+kZBpA+S4wt/ujZPlALmZiGuQjjqwWFo9OfeskXer7vA5UWYemDMvy7XQ2TWoLNOzI+LaVvEPECQQDpEgY7XmrKeq8qkUFPsDjcEa7SZ2eEEOps0NKmewGvAaiavm7+8yCdS/ZPS7ZD6590TanFWy3gJtugw/vPa2tpAkEAyxlj8u+EYKchPBYehuRjm4W5SlJNAGrABqrJjM50jQ4aRVr1LbS6R0S77kTaZLTV/w8eYk1LS9cTCaY+JB+HwwJBAIXrlmscmG4ZynbCGe4JCtLg0jwRsHhBJAI8hx2jxlbhtBieXbbeypm3YSM1FNi4FdpFGczN1HFcwowAsLsBNSkCQQC9YgywQKYI1m+ILvwCPr+fCt/PrNS+mcw7q0/Lq8xEp6zZlUpgd1DoGfC/6pZXJ8UQVFG5ymd27bOD4O+7EWevAkEAzYHfclV/kP3V1aCR0KoXBHA4WIHKa+JaVuFMIDZqd/SsfsoKDn+Stsajl/e8LAwt9XXctYWNvGsVfCSfZ5Y3tw==-----END RSA PRIVATE KEY-----",\n    "s_sdk_baidu_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game83/baidu/v1",\n    "s_sdk_baidu_version_name": "1.0.3.2",\n    "s_sdk_baidu_video_id": "7211330",\n    "s_sdk_bilibili_appid": "biligamea493e76da338b070",\n    "s_sdk_bilibili_banner_id": "0",\n    "s_sdk_bilibili_find_me_url": "https://gamesres.ultralisk.cn/h5_games_res/common/find_me/bilibili/83.png",\n    "s_sdk_bilibili_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game83/bilibili/v1",\n    "s_sdk_bilibili_sub_context": "",\n    "s_sdk_bilibili_version_name": "1.0.0",\n    "s_sdk_bilibili_video_id": "0",\n    "s_sdk_cdk_app_id": "89",\n    "s_sdk_cdk_url": "https://cdkey.ultralisk.cn/commoncdk/usecdk",\n    "s_sdk_cop_addr": "https://copv7.ultralisk.cn/h5/getdata/",\n    "s_sdk_cop_game_id": "0",\n    "s_sdk_daren_base_gameres_url": "https://gamesres.ultralisk.cn/h5_games_daren/",\n    "s_sdk_daren_git_addr": "ulsdk/h5_games_daren",\n    "s_sdk_daren_git_branch": "master",\n    "s_sdk_facebook_appId": "1244301175986593",\n    "s_sdk_facebook_interId": "4864743603539728_5324943400853077",\n    "s_sdk_facebook_videoId": "4864743603539728_5324944030853014",\n    "s_sdk_funheadline_app_id": "a42MTLvTV98S",\n    "s_sdk_funheadline_app_key": "",\n    "s_sdk_funheadline_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/game83/funheadline/v0",\n    "s_sdk_hago_country_code": "ID",\n    "s_sdk_hago_env": "ProDuct",\n    "s_sdk_hago_game_id": "yeluolicaizhuanggongzhu",\n    "s_sdk_hago_language": "id",\n    "s_sdk_headline_app_secret": "d2818aa59bba3a0996a69ed0830d0582c9af8610",\n    "s_sdk_headline_appid": "ttce78b8c5514341ba",\n    "s_sdk_headline_banner_adunit": "3d04jlumgp4gc2407n",\n    "s_sdk_headline_change_log": "",\n    "s_sdk_headline_douyin_find_me_url": "https://gamesres.ultralisk.cn/h5_games_res/common/find_me/douyin_icon/83.png",\n    "s_sdk_headline_get_token_url": "https://sdkserver.ultralisk.cn/ttgettoken",\n    "s_sdk_headline_get_video_info_url": "https://gate.snssdk.com/developer/api/get_video_info",\n    "s_sdk_headline_inter_adunit": "kick5e9e36k2jlmh6l",\n    "s_sdk_headline_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game83/headline/v1",\n    "s_sdk_headline_share_video_tag": "yllczgz",\n    "s_sdk_headline_sub_context": "0",\n    "s_sdk_headline_subscribe_url": "https://subscrible.ultralisk.cn/hdsubscrible/posthdsubscribleusermsg",\n    "s_sdk_headline_top_video_by_like_url": "https://gate.snssdk.com/developer/api/get_top_video_ids_by_like",\n    "s_sdk_headline_top_video_by_time_url": "https://gate.snssdk.com/developer/api/get_top_video_ids_by_time",\n    "s_sdk_headline_toutiao_find_me_url": "https://gamesres.ultralisk.cn/h5_games_res/common/find_me/toutiao_icon/83.png",\n    "s_sdk_headline_version_name": "1.4.97",\n    "s_sdk_headline_video_adunit": "37hkbr7ndfnmdnc60k",\n    "s_sdk_huawei_appid": "103588147",\n    "s_sdk_huawei_banner_adunit": "0",\n    "s_sdk_huawei_inter_adunit": "0",\n    "s_sdk_huawei_login_tip": "",\n    "s_sdk_huawei_merchant_id": "890086200300024295",\n    "s_sdk_huawei_merchant_name": "成都双晨科技有限公司",\n    "s_sdk_huawei_native_ids": {\n        "1": "z041rqm62e",\n        "2": "z041rqm62e",\n        "3": "z041rqm62e"\n    },\n    "s_sdk_huawei_package_name": "com.ultralisk.game83.huawei",\n    "s_sdk_huawei_private_key": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCE1fMb9mLSx6KryXENvnzA2ksE57vARotUJYOAG+eTA1hbigFBWZ04F85wQYq7lz44xHPTs1VS/xatN7SnBHUMufFM0GMmQNMDDz9yxE2PEAG7xL8/YEe/PC22tPvJbIMrlACIQg6eos+OIXA47qUcURp9NNPDxAB65hAKqGUD3UG4fFhSczV8j4zy5EAQ9nl2GDIJ8eOxiCsYQeIMGnSA3xdoOLypN5y0BMOP2p7lysZw6jRnOfLUialkj2/t6d1S9aJA7LL5svilIMH9Ty1DnKYDH0vGGmzwgtODvwDkLk8besryKL0oVjkybNjpBVogzP8+LzWK+RoTAOY2M7ArAgMBAAECggEAXzNatYqijr/G5OlNHfWMQUbxhwVxuL6WMmtkUFcvY1x9YbWJasWH+OCO8kL247TkQhkBjhKzrvTk0qXe0ehO3x0QQ+YBeTPyRvoRlfX8Q/DL3T+HdStSoErH1G7nGRes9nlu3DjDc4vpxspOPG9EZAP4QQ2wS1hYo7voeUrwgpBtnxsCG7//2P29Ov8m/KTBMKqmtapSfpwJ8J1ZU7h871ex5oScH4DSt0rn5RL6m34cpGILHx4r3OWKK2LBd1Xv71eepO2Qox7AFH30as1lr2ykt6E0xQnidjKrLMV5eqYdlub9gM2frRMXUianfilJ7Mw+vGmBv2VTbj7ykBC2UQKBgQDgIylzOz8gtyf8eBrWAFTs79h0lduWBMBWL9MLQ+MgxUgcTKBmOui2alB79sezNK9hZswvy0tj7696hCzkVFYX2Hdt1eJlwQV0Rt8d9Mq0igob4Bwknv6OLf6ucg++Z0L1nP6SeGejtWn4j8Dc5So8g6vYm6Eq1WMBkZi8mX3gqQKBgQCXuCBsSKS6EMfKP/mOzUKQzl6dUlUlTHgUEEuvKEOen0sVK6NmAIgr1DemVN5FgabhdAPN5EHS+Bhv8DlmqXq0GeBI62gxUo9FjQxFWaXR58YRIuX1WeGaRQUa0eaDuSHUnPdXz6Qcjqqry2RUdbMewgW4uVjcgyGrrJafccEKswKBgC5XVsSaZUzwUXYjpvjEDMsIM+q26TW1OccYEDxuBtHJuEURmsBIQcElbgqTVWq54+Dxjhn7oFTDQ7bDCT0UKtC3UsoExNBg/i2yUYMyD48QU1K8HVV9AgiHffa3YoXtd6ysjv3dox/37DcWEbwaLYdhefBJDSN8BwJWBgxId/wxAoGACM3Te9UfUfjFTzQ1LBc3JKYFEYYEkNyGH0vuyGRCwEKoHbthiPrA7CItdIZ6O3hRkcWkrt7u/uoMqPo8qnttNmRGApU+f5Y14ChWLPQNzkdv0/C9fWZQ1B3rNOo3QS+OCgNtyveuo0WYG836rXgDA+boZBbFVE57trWWK/xy4kcCgYAtyPNyafy1APHafjPW7leHnNfo4BuCHjL0Cd89f3IQpaxZCcDNEthV5DHPbXxdaz0o677caT4fU004Leu73sGki2USEWUFHR2yrkLfOcu6qVJJrPbAaPlF1jVL6faVdk6Xhjre/QCBSwxqm4vpSRjuum6TOYZKH7e2Doodb22zXw==",\n    "s_sdk_huawei_public_key": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAhNXzG/Zi0seiq8lxDb58wNpLBOe7wEaLVCWDgBvnkwNYW4oBQVmdOBfOcEGKu5c+OMRz07NVUv8WrTe0pwR1DLnxTNBjJkDTAw8/csRNjxABu8S/P2BHvzwttrT7yWyDK5QAiEIOnqLPjiFwOO6lHFEafTTTw8QAeuYQCqhlA91BuHxYUnM1fI+M8uRAEPZ5dhgyCfHjsYgrGEHiDBp0gN8XaDi8qTectATDj9qe5crGcOo0Zzny1ImpZI9v7endUvWiQOyy+bL4pSDB/U8tQ5ymAx9Lxhps8ILTg78A5C5PG3rK8ii9KFY5MmzY6QVaIMz/Pi81ivkaEwDmNjOwKwIDAQAB",\n    "s_sdk_huawei_tiny_package_server": "https://gamesres.ultralisk.cn/h5_games_res/game83/huawei/v1",\n    "s_sdk_huawei_version_code": "9",\n    "s_sdk_huawei_version_name": "1.0.8",\n    "s_sdk_huawei_video_adunit": "c6t1zf23p7",\n    "s_sdk_jump_game_statis_game_indexes": "",\n    "s_sdk_kk_ad_pos_id": "0",\n    "s_sdk_kuaishou_appid": "0",\n    "s_sdk_kuaishou_inter_adunit": "0",\n    "s_sdk_kuaishou_version_name": "1.1.80",\n    "s_sdk_kuaishou_video_adunit": "0",\n    "s_sdk_lan_debug_address": "",\n    "s_sdk_lianshang_bannerId": "0",\n    "s_sdk_lianshang_tiny_package_server": "https://gamesres.ultralisk.cn/h5_games_res/game83/lianshang/v1",\n    "s_sdk_lianshang_videoId": "0",\n    "s_sdk_lianxin_appid": "lx33c7ae8755364481",\n    "s_sdk_lianxin_bannerId": "33",\n    "s_sdk_lianxin_cdn_server": "https://gamesres.ultralisk.cn/h5_games_res/game83/lianxin/v1/",\n    "s_sdk_lianxin_clientkey": "c3b98fbc26244392886bb44eb29265e3",\n    "s_sdk_lianxin_interId": "66",\n    "s_sdk_lianxin_serverkey": "480324fefe6411ebbb66525400c34b90",\n    "s_sdk_lianxin_share_icon_url": "",\n    "s_sdk_lianxin_videoId": "67",\n    "s_sdk_megadata_close_table_type_ids": "",\n    "s_sdk_megadata_game_id": "36",\n    "s_sdk_megadata_point_event_open_category_ids": "0;1;2;3;4;5;6;7;8;9;10",\n    "s_sdk_megadata_server_jump_game_type_id": "jumpabtest",\n    "s_sdk_megadata_server_type_id": "8",\n    "s_sdk_megadata_test_url": "https://megadatav7.ultralisk.cn/batchtestmodedataupload",\n    "s_sdk_megadata_url": "https://megadatav7.ultralisk.cn/batchdataupload",\n    "s_sdk_meizu_gameres_url": "",\n    "s_sdk_meizuqg_banner_id": "2Uo9A57A",\n    "s_sdk_meizuqg_inter_id": "WVIlM8uF",\n    "s_sdk_meizuqg_package_name": "0",\n    "s_sdk_meizuqg_tiny_package_server": "https://gamesres.ultralisk.cn/h5_games_res/game83/meizu/v1/",\n    "s_sdk_meizuqg_version_code": "11",\n    "s_sdk_meizuqg_version_name": "1.2.15",\n    "s_sdk_meizuqg_video_id": "LFwQU2S6",\n    "s_sdk_mgc_bannerId": null,\n    "s_sdk_mgc_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/game83/mgc/v1",\n    "s_sdk_mgc_interId": null,\n    "s_sdk_mgc_videoId": null,\n    "s_sdk_oppoqg_app_key": "EG4qLy9K63w4sgwkw8Gsgsg0c",\n    "s_sdk_oppoqg_appid": "30336313",\n    "s_sdk_oppoqg_appsecret": "3DE51214714042cd4891dc8F7d4BA4D8",\n    "s_sdk_oppoqg_banner_box_id": "0",\n    "s_sdk_oppoqg_banner_id": "218137",\n    "s_sdk_oppoqg_inter_box_id": "306889",\n    "s_sdk_oppoqg_interstitial_id": "0",\n    "s_sdk_oppoqg_native_ids": {\n        "1": "218133",\n        "2": "218133",\n        "3": "218133"\n    },\n    "s_sdk_oppoqg_package_name": "com.ultralisk.game83.nearme.gamecenter",\n    "s_sdk_oppoqg_pre_order_url": "https://jits.open.oppomobile.com/jitsopen/api/pay/v1.0/preOrder",\n    "s_sdk_oppoqg_private_key": "-----BEGIN RSA PRIVATE KEY-----MIICXgIBAAKBgQC46Giy1S4Zuys/c3QO6VZVWAOo1tussbIpqI0M7edU9OC732leFej2DmG3O9XRh9NlYjoAq4hyt7DxiZ6MyN8IdStZn4b0/e/CZKQA5WaCI5h71hUTwCJTzHZHvO+woDWaE2mOSsBfjAdwTsHUr32eCPzju/1zatys02W7ai4v+wIDAQABAoGAGjbAmRHF3ln9kJpCitajqae3pRkIvZvXgTZnAL09fXrV3WyX2IHMrA1v5vUxo+nYm1foly26Q2EtUaDL/HOBwshbwEtR5TR0g+kZBpA+S4wt/ujZPlALmZiGuQjjqwWFo9OfeskXer7vA5UWYemDMvy7XQ2TWoLNOzI+LaVvEPECQQDpEgY7XmrKeq8qkUFPsDjcEa7SZ2eEEOps0NKmewGvAaiavm7+8yCdS/ZPS7ZD6590TanFWy3gJtugw/vPa2tpAkEAyxlj8u+EYKchPBYehuRjm4W5SlJNAGrABqrJjM50jQ4aRVr1LbS6R0S77kTaZLTV/w8eYk1LS9cTCaY+JB+HwwJBAIXrlmscmG4ZynbCGe4JCtLg0jwRsHhBJAI8hx2jxlbhtBieXbbeypm3YSM1FNi4FdpFGczN1HFcwowAsLsBNSkCQQC9YgywQKYI1m+ILvwCPr+fCt/PrNS+mcw7q0/Lq8xEp6zZlUpgd1DoGfC/6pZXJ8UQVFG5ymd27bOD4O+7EWevAkEAzYHfclV/kP3V1aCR0KoXBHA4WIHKa+JaVuFMIDZqd/SsfsoKDn+Stsajl/e8LAwt9XXctYWNvGsVfCSfZ5Y3tw==-----END RSA PRIVATE KEY-----",\n    "s_sdk_oppoqg_tiny_package_server": "https://gamesres.ultralisk.cn/h5_games_res/game83/oppoqg/v1",\n    "s_sdk_oppoqg_version_code": "83",\n    "s_sdk_oppoqg_version_name": "83",\n    "s_sdk_oppoqg_video_id": "218132",\n    "s_sdk_qq_app_id": "1111130815",\n    "s_sdk_qq_appbox_id": "381dc833045b8cc96d84dc5dd939ee84",\n    "s_sdk_qq_banner_id": "98fafdad77ea74465457cfb745190b33",\n    "s_sdk_qq_block_id": "0",\n    "s_sdk_qq_change_log": "",\n    "s_sdk_qq_inter_id": "e3764b45a63aebc2d97e857d022b1d1d",\n    "s_sdk_qq_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game83/qq/v1",\n    "s_sdk_qq_sub_context": "",\n    "s_sdk_qq_version_name": "1.3.6",\n    "s_sdk_qq_video_id": "d156a2e0e75686c0443aed3b3dcf3a99",\n    "s_sdk_refresh_resource_type": "dir",\n    "s_sdk_sdkdemo_gameres_url": "",\n    "s_sdk_uc_banner_id": null,\n    "s_sdk_uc_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/game83/uc/v1",\n    "s_sdk_uc_video_id": null,\n    "s_sdk_user_data_get_url": "https://h5gameserver.ultralisk.cn/getuserdata",\n    "s_sdk_user_data_save_url": "https://h5gameserver.ultralisk.cn/savealluserdata",\n    "s_sdk_version": "b054cd6d9",\n    "s_sdk_vivo_app_id": "100009223",\n    "s_sdk_vivo_app_secret": "20160310164821346227",\n    "s_sdk_vivo_banner_box_id": "74091777787d4a989a1194073848e241",\n    "s_sdk_vivo_banner_id": "3557afc7509c4c5185bf4d78dbe05649",\n    "s_sdk_vivo_custom_adv_minSize": "720*630",\n    "s_sdk_vivo_custom_id": "e125468473d54c2d9d5d7ff2250af4e0",\n    "s_sdk_vivo_inter_box_id": "9762391d0f604c0e869f55c3cbe98c0a",\n    "s_sdk_vivo_interstitial_id": "0a79cdce792d499aab23fb576d4d7f30",\n    "s_sdk_vivo_native_ids": {\n        "1": "54604d8167bc4de4ba597b287e0e66e4",\n        "2": "54604d8167bc4de4ba597b287e0e66e4",\n        "3": "54604d8167bc4de4ba597b287e0e66e4"\n    },\n    "s_sdk_vivo_package_name": "com.ultralisk.game83.vivominigame",\n    "s_sdk_vivo_qg_url": "https://pay.vivo.com.cn/vivopay/order/request",\n    "s_sdk_vivo_tiny_package_server": "https://gamesres.ultralisk.cn/h5_games_res/game83/vivo/v1",\n    "s_sdk_vivo_version_code": "127",\n    "s_sdk_vivo_version_name": "1.5.76",\n    "s_sdk_vivo_video_id": "a8bd1238ab284cda8fd5fe284d3c57d0",\n    "s_sdk_webreview_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/md5test/PkueF9XQmvOKNIj83/",\n    "s_sdk_webreview_test_gameres_url": "0",\n    "s_sdk_weixin_appid": "wxc22ab8a3dd9ba848",\n    "s_sdk_weixin_appsecret": "0",\n    "s_sdk_weixin_banner_adunit_ids": {\n        "2": "adunit-6619e68d282b94fc"\n    },\n    "s_sdk_weixin_change_log": "",\n    "s_sdk_weixin_find_me_url": "https://gamesres.ultralisk.cn/h5_games_res/common/find_me/weixin_icon/83.png",\n    "s_sdk_weixin_grid_adunit_id": "0",\n    "s_sdk_weixin_interstitial_ids": {\n        "1": "adunit-6954b1dfad2826c3"\n    },\n    "s_sdk_weixin_login_url": "https://sdkserver.ultralisk.cn/wxuserlogin",\n    "s_sdk_weixin_mch_id": "0",\n    "s_sdk_weixin_offer_id": "0",\n    "s_sdk_weixin_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game83/weixin/v1",\n    "s_sdk_weixin_sub_context": "0",\n    "s_sdk_weixin_subscribe_url": "https://subscrible.ultralisk.cn/wxsubscrible/postwxsubscribleusermsg",\n    "s_sdk_weixin_version_name": "1.3.1",\n    "s_sdk_weixin_video_adunit_ids": {\n        "4": "adunit-203851f7645cf777"\n    },\n    "srcRootPath": "src/script/",\n    "t_customer_service_info": [\n        "kefu@ultralisk.cn"\n    ],\n    "t_sdk_baidu_jump_games": [\n        {\n            "id": "agkY5p00cFcUknIs9LW9xW9Q6LZMlDLN",\n            "index": "86",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/86.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/86.png"\n            ]\n        },\n        {\n            "id": "gVPpWFaCDbKoC2VKawlPsMCjWMuoYObk",\n            "index": "70",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/70.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/70.png"\n            ]\n        },\n        {\n            "id": "lCrh6dpPbTAFPMjMfhEvU0Ex9kn6KGG9",\n            "index": "55v2",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/55v2.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/55v2.png"\n            ]\n        },\n        {\n            "id": "rHLWLgOdeaaWCgVea07awxLcGOVEWIOf",\n            "index": "56",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/56.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/56.png"\n            ]\n        },\n        {\n            "id": "jFG1LSc5YxBcFbhHikNYqYOqax4mBS8E",\n            "index": "82",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/82.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/82.png"\n            ]\n        },\n        {\n            "id": "EkVaIkAWsaHWWD0Rks1uvEHrYv1OClFq",\n            "index": "80",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/80.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/80.png"\n            ]\n        },\n        {\n            "id": "vhAHSZ2oCteEEtf8C6HiQeUZgWTj5F1M",\n            "index": "75",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/75.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/75.png"\n            ]\n        },\n        {\n            "id": "cA5GKqcGBGEgXmSXpNjxjOqDt0IB9boY",\n            "index": "74",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/74.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/74.png"\n            ]\n        },\n        {\n            "id": "WMIhnYCNyOcWP4TISwlEbZ04RtYwviL1",\n            "index": "79",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/79.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/79.png"\n            ]\n        },\n        {\n            "id": "9YTDrCKInzLR01Mh2qLyp5GT5gkPUlCz",\n            "index": "69",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/69.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/69.png"\n            ]\n        },\n        {\n            "id": "xV0P9UXGP2APaDTi7CXHFuIiKYmtkPMg",\n            "index": "78",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/78.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/78.png"\n            ]\n        },\n        {\n            "id": "2w4vuOxXbFGA1GqVYBI41kG1Atd3FVbw",\n            "index": "76",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/76.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/76.png"\n            ]\n        },\n        {\n            "id": "3B10fP8fRsHpjlOprdW89c2y8U313ps9",\n            "index": "73",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/73.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/73.png"\n            ]\n        },\n        {\n            "id": "AF9HIGa1PMVmyLMXbVYqYgNwFmYPtrRy",\n            "index": "85",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/85.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/85.png"\n            ]\n        },\n        {\n            "id": "G3Co4nKxv2rvToCBdKuaBLcmRaFqPSe8",\n            "index": "55",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/55.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/55.png"\n            ]\n        }\n    ],\n    "t_sdk_baidu_pay_code": {\n        \n    },\n    "t_sdk_baidu_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share1.jpg",\n            "title": "给叶罗丽仙子化妆，她居然会眨眼配合！"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share2.jpg",\n            "title": "什么？叶罗丽也需要做脸部护理？"\n        }\n    ],\n    "t_sdk_bilibili_jump_games": [\n        \n    ],\n    "t_sdk_bilibili_navigate_to_mini_game_app_id_list": [\n        \n    ],\n    "t_sdk_bilibili_pay_code": {\n        \n    },\n    "t_sdk_bilibili_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share1.jpg",\n            "title": "给叶罗丽仙子化妆，她居然会眨眼配合！"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share2.jpg",\n            "title": "什么？叶罗丽也需要做脸部护理？"\n        }\n    ],\n    "t_sdk_common_event_ids": {\n        "add_subscrible": "102",\n        "click_more_game_icon_list": "106",\n        "click_more_game_icon_reward": "105",\n        "click_more_game_icon_single": "104",\n        "click_share": "101",\n        "click_subscrible": "103",\n        "open_cdk": "107",\n        "open_share": "100"\n    },\n    "t_sdk_common_modify_tag_afterBuild": [\n        \n    ],\n    "t_sdk_common_modify_tag_beforeBuild": [\n        \n    ],\n    "t_sdk_compress_json_includes": [\n        "**/version*.json"\n    ],\n    "t_sdk_compress_json_includes_rem": "",\n    "t_sdk_compress_res_config": [\n        {\n            "cmds": "",\n            "rep": "ui/common/mask.*"\n        },\n        {\n            "cmds": "truepng /o max /cq c=1024 d=75 | optipng -strip all -o7 | zopflipng -y --lossy_8bit --lossy_transparent",\n            "minFileSize": 2048,\n            "rep": "nofilematch_just_for_example"\n        },\n        {\n            "cmds": "jpeg-recompress --strip -t 1.0 --min 80 | guetzil --quality 85",\n            "minFileSize": 2048,\n            "rep": ".*//.jpg"\n        },\n        {\n            "cmds": "autopng --quality 60-100 | optipng -strip all -o7 | zopflipng -y --lossy_8bit --lossy_transparent",\n            "minFileSize": 2048,\n            "rep": ".*//.png"\n        }\n    ],\n    "t_sdk_cop_default_cop": {\n        "ad_inst_cd": 60,\n        "ad_interstitial_ratiosn        "ad_video_cds": "0;0;0;10;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0",\n        "ad_video_counts": "0;10;0;10;2;2;12;0;0;2;3;0;0;0;5;0;10;5;3;20;6;1;5;5;10;2;5;5;2;10;2;10;10;10;12;12;12;12;12;1212;12;12;1212;12;12;12;1212;12",\n        "ad_video_ratios": "100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;30;100;100;100;100;100;100;100;100;100;100;100",\n        "alert_hud_prompt_cds": "3000;3000;3000;3000;3000;3000;3000;3000;3000;3000;3000;3000;3000",\n        "alert_hud_prompt_orders": "2;1;3;4",\n        "alert_hud_prompt_ratios": "100;100;100;100;100;100;100;100;100;100;100;100;100",\n        "b_inst_in_guide": 1,\n        "b_inst_or_banner": 0,\n        "cat_delta_time": 60,\n        "cat_ratios": 0,\n        "native_insert_mode": 2,\n        "share_mode": "0;0;0;0;0;0;0;0;0;0;0;0;0;0",\n        "some_function": "0;0;0;0;0",\n        "o_sdk_adv_show_list": {\n            "templates": {\n                "banner": {\n                    "moduleName": "ULAdvFacebookBanner",\n                    "rewardType": "show",\n                    "loadTypes": "0",\n                    "exp": "",\n                    "rcd": "",\n                    "args": [\n                        "4864743603539728_5324942390853178"\n                    ],\n                    "argWeights": [\n                        "100"\n                    ]\n                },\n                "video": {\n                    "moduleName": "ULAdvFaceBookVideo",\n                    "rewardType": "show",\n                    "loadTypes": "0",\n                    "exp": "",\n                    "rcd": "",\n                    "args": [\n                        "4864743603539728_5324944030853014"\n                    ],\n                    "argWeights": [\n                        "100"\n                    ]\n                },\n                "inter": {\n                    "moduleName": "ULAdvFaceBookInter",\n                    "rewardType": "show",\n                    "loadTypes": "0",\n                    "exp": "",\n                    "rcd": "",\n                    "args": [\n                        "4864743603539728_5324943400853077"\n                    ],\n                    "argWeights": [\n                        "100"\n                    ]\n                }\n            },\n            "advSlots": {\n                "1": {\n                    "rcd": "",\n                    "subAids": [\n                        \n                    ],\n                    "schemes": [\n                        {\n                            "exp": "",\n                            "rcd": "",\n                            "tids": [\n                                "inter"\n                            ],\n                            "tidWeights": [\n                                "100"\n                            ],\n                            "weight": "100"\n                        }\n                    ]\n                },\n                "2": {\n                    "rcd": "",\n                    "subAids": [\n                        \n                    ],\n                    "schemes": [\n                        {\n                            "exp": "",\n                            "rcd": "",\n                            "tids": [\n                                "banner"\n                            ],\n                            "tidWeights": [\n                                "100"\n                            ],\n                            "weight": "100"\n                        }\n                    ]\n                },\n                "4": {\n                    "rcd": "",\n                    "subAids": [\n                        \n                    ],\n                    "schemes": [\n                        {\n                            "exp": "",\n                            "rcd": "",\n                            "tids": [\n                                "video"\n                            ],\n                            "tidWeights": [\n                                "100"\n                            ],\n                            "weight": "100"\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    "t_sdk_cop_simulate_city_data": {\n        "0": "未知城市",\n        "1001": "海南藏族自治州",\n        "1002": "西宁",\n        "1003": "海东",\n        "1004": "黄南藏族自治州",\n        "1005": "海西蒙古族藏族自治州",\n        "1006": "海北藏族自治州",\n        "1007": "果洛藏族自治州",\n        "1008": "玉树藏族自治州",\n        "101": "北京",\n        "1101": "临夏回族自治州",\n        "1102": "甘南藏族自治州",\n        "1103": "白银",\n        "1104": "陇南",\n        "1105": "定西",\n        "1106": "平凉",\n        "1107": "金昌",\n        "1108": "酒泉",\n        "1109": "张掖",\n        "1110": "庆阳",\n        "1111": "兰州",\n        "1112": "武威",\n        "1113": "嘉峪关",\n        "1114": "天水",\n        "1201": "银川",\n        "1202": "固原",\n        "1203": "吴忠",\n        "1204": "中卫",\n        "1205": "石嘴山",\n        "1301": "商洛",\n        "1302": "安康",\n        "1303": "榆林",\n        "1304": "铜川",\n        "1305": "咸阳",\n        "1306": "西安",\n        "1307": "渭南",\n        "1308": "汉中",\n        "1309": "宝鸡",\n        "1310": "延安",\n        "1401": "长春",\n        "1402": "白城",\n        "1403": "松原",\n        "1404": "白山",\n        "1405": "吉林",\n        "1406": "延边朝鲜族自治州",\n        "1407": "四平",\n        "1408": "辽源",\n        "1409": "通化",\n        "1501": "铜陵",\n        "1502": "亳州",\n        "1503": "黄山",\n        "1504": "池州",\n        "1505": "合肥",\n        "1506": "淮北",\n        "1507": "滁州",\n        "1508": "宿州",\n        "1509": "淮南",\n        "1510": "蚌埠",\n        "1511": "六安",\n        "1512": "阜阳",\n        "1513": "芜湖",\n        "1514": "宣城",\n        "1515": "安庆",\n        "1516": "马鞍山",\n        "1601": "恩施土家族苗族自治州",\n        "1602": "仙桃",\n        "1603": "武汉",\n        "1604": "孝感",\n        "1605": "咸宁",\n        "1606": "十堰",\n        "1607": "天门",\n        "1608": "黄冈",\n        "1609": "宜昌",\n        "1610": "襄阳",\n        "1611": "黄石",\n        "1612": "荆门",\n        "1613": "随州",\n        "1614": "荆州",\n        "1615": "鄂州",\n        "1616": "神农架林区",\n        "1617": "潜江",\n        "1701": "株洲",\n        "1702": "邵阳",\n        "1703": "岳阳",\n        "1704": "张家界",\n        "1705": "怀化",\n        "1706": "衡阳",\n        "1707": "长沙",\n        "1708": "常德",\n        "1709": "郴州",\n        "1710": "永州",\n        "1711": "湘西土家族苗族自治州",\n        "1712": "湘潭",\n        "1713": "益阳",\n        "1714": "娄底",\n        "1801": "安顺",\n        "1802": "黔南布依族苗族自治州",\n        "1803": "铜仁",\n        "1804": "六盘水",\n        "1805": "贵阳",\n        "1806": "黔东南苗族侗族自治州",\n        "1807": "毕节",\n        "1808": "遵义",\n        "1809": "黔西南布依族苗族自治州",\n        "1901": "太原",\n        "1902": "长治",\n        "1903": "运城",\n        "1904": "晋中",\n        "1905": "忻州",\n        "1906": "朔州",\n        "1907": "晋城",\n        "1908": "阳泉",\n        "1909": "大同",\n        "1910": "临汾",\n        "1911": "吕梁",\n        "2001": "来宾",\n        "2002": "柳州",\n        "2003": "崇左",\n        "2004": "百色",\n        "2005": "河池",\n        "2006": "防城港",\n        "2007": "贺州",\n        "2008": "贵港",\n        "2009": "北海",\n        "201": "上海",\n        "2010": "南宁",\n        "2011": "桂林",\n        "2012": "玉林",\n        "2013": "钦州",\n        "2014": "梧州",\n        "2101": "凉山彝族自治州",\n        "2102": "攀枝花",\n        "2103": "乐山",\n        "2104": "遂宁",\n        "2105": "资阳",\n        "2106": "绵阳",\n        "2107": "自贡",\n        "2108": "德阳",\n        "2109": "雅安",\n        "2110": "达州",\n        "2111": "广元",\n        "2112": "广安",\n        "2113": "阿坝藏族羌族自治州",\n        "2114": "甘孜藏族自治州",\n        "2115": "成都",\n        "2116": "南充",\n        "2117": "泸州",\n        "2118": "内江",\n        "2119": "宜宾",\n        "2120": "巴中",\n        "2121": "眉山",\n        "2201": "郑州",\n        "2202": "三门峡",\n        "2203": "洛阳",\n        "2204": "开封",\n        "2205": "信阳",\n        "2206": "焦作",\n        "2207": "许昌",\n        "2208": "濮阳",\n        "2209": "济源",\n        "2210": "鹤壁",\n        "2211": "安阳",\n        "2212": "驻马店",\n        "2213": "新乡",\n        "2214": "南阳",\n        "2215": "漯河",\n        "2216": "平顶山",\n        "2217": "商丘",\n        "2218": "周口",\n        "2301": "石家庄",\n        "2302": "保定",\n        "2303": "沧州",\n        "2304": "衡水",\n        "2305": "唐山",\n        "2306": "邯郸",\n        "2307": "廊坊",\n        "2308": "秦皇岛",\n        "2309": "邢台",\n        "2310": "张家口",\n        "2311": "承德",\n        "2401": "福州",\n        "2402": "厦门",\n        "2403": "宁德",\n        "2404": "莆田",\n        "2405": "龙岩",\n        "2406": "三明",\n        "2407": "南平",\n        "2408": "泉州",\n        "2409": "漳州",\n        "2501": "南昌",\n        "2502": "上饶",\n        "2503": "赣州",\n        "2504": "新余",\n        "2505": "鹰潭",\n        "2506": "抚州",\n        "2507": "萍乡",\n        "2508": "宜春",\n        "2509": "景德镇",\n        "2510": "吉安",\n        "2511": "九江",\n        "2601": "珠海",\n        "2602": "东莞",\n        "2603": "江门",\n        "2604": "阳江",\n        "2605": "惠州",\n        "2606": "汕尾",\n        "2607": "梅州",\n        "2608": "清远",\n        "2609": "湛江",\n        "2610": "揭阳",\n        "2611": "广州",\n        "2612": "云浮",\n        "2613": "潮州",\n        "2614": "汕头",\n        "2615": "韶关",\n        "2616": "深圳",\n        "2617": "佛山",\n        "2618": "中山",\n        "2619": "肇庆",\n        "2620": "茂名",\n        "2621": "河源",\n        "2701": "呼和浩特",\n        "2702": "锡林郭勒盟",\n        "2703": "乌兰察布",\n        "2704": "通辽",\n        "2705": "包头",\n        "2706": "阿拉善盟",\n        "2707": "巴彦淖尔",\n        "2708": "兴安盟",\n        "2709": "鄂尔多斯",\n        "2710": "乌海",\n        "2711": "呼伦贝尔",\n        "2712": "赤峰",\n        "2801": "鹤岗",\n        "2802": "鸡西",\n        "2803": "哈尔滨",\n        "2804": "黑河",\n        "2805": "七台河",\n        "2806": "伊春",\n        "2807": "大兴安岭地区",\n        "2808": "牡丹江",\n        "2809": "绥化",\n        "2810": "齐齐哈尔",\n        "2811": "双鸭山",\n        "2812": "大庆",\n        "2813": "佳木斯",\n        "2901": "葫芦岛",\n        "2902": "营口",\n        "2903": "丹东",\n        "2904": "沈阳",\n        "2905": "抚顺",\n        "2906": "辽阳",\n        "2907": "大连",\n        "2908": "鞍山",\n        "2909": "盘锦",\n        "2910": "阜新",\n        "2911": "本溪",\n        "2912": "锦州",\n        "2913": "铁岭",\n        "2914": "朝阳",\n        "3001": "淄博",\n        "3002": "临沂",\n        "3003": "威海",\n        "3004": "莱芜",\n        "3005": "日照",\n        "3006": "济南",\n        "3007": "泰安",\n        "3008": "烟台",\n        "3009": "聊城",\n        "301": "天津",\n        "3010": "东营",\n        "3011": "菏泽",\n        "3012": "滨州",\n        "3013": "潍坊",\n        "3014": "德州",\n        "3015": "青岛",\n        "3016": "济宁",\n        "3017": "枣庄",\n        "3101": "南京",\n        "3102": "常州",\n        "3103": "苏州",\n        "3104": "无锡",\n        "3105": "盐城",\n        "3106": "镇江",\n        "3107": "连云港",\n        "3108": "宿迁",\n        "3109": "南通",\n        "3110": "徐州",\n        "3111": "淮安",\n        "3112": "扬州",\n        "3113": "泰州",\n        "401": "重庆",\n        "501": "宁波",\n        "502": "金华",\n        "503": "嘉兴",\n        "504": "绍兴",\n        "505": "湖州",\n        "506": "衢州",\n        "507": "舟山",\n        "508": "杭州",\n        "509": "温州",\n        "510": "丽水",\n        "511": "台州",\n        "601": "儋州",\n        "602": "定安县",\n        "603": "东方",\n        "604": "五指山",\n        "605": "屯昌县",\n        "606": "琼海",\n        "607": "澄迈县",\n        "608": "琼中黎族苗族自治县",\n        "609": "三亚",\n        "610": "白沙黎族自治县",\n        "611": "文昌",\n        "612": "陵水黎族自治县",\n        "613": "昌江黎族自治县",\n        "614": "保亭黎族苗族自治县",\n        "615": "临高县",\n        "616": "海口",\n        "617": "万宁",\n        "618": "乐东黎族自治县",\n        "701": "迪庆藏族自治州",\n        "702": "西双版纳傣族自治州",\n        "703": "临沧",\n        "704": "保山",\n        "705": "玉溪",\n        "706": "德宏傣族景颇族自治州",\n        "707": "红河哈尼族彝族自治州",\n        "708": "大理白族自治州",\n        "709": "丽江",\n        "710": "怒江傈僳族自治州",\n        "711": "普洱",\n        "712": "楚雄彝族自治州",\n        "713": "文山壮族苗族自治州",\n        "714": "昆明",\n        "715": "曲靖",\n        "716": "昭通",\n        "801": "拉萨",\n        "802": "昌都",\n        "803": "山南",\n        "804": "阿里地区",\n        "805": "林芝",\n        "806": "日喀则",\n        "807": "那曲地区",\n        "901": "喀什地区",\n        "902": "阿克苏地区",\n        "903": "和田地区",\n        "904": "哈密",\n        "905": "石河子",\n        "906": "吐鲁番",\n        "907": "博尔塔拉蒙古自治州",\n        "908": "巴音郭楞蒙古自治州",\n        "909": "昌吉回族自治州",\n        "910": "塔城地区",\n        "911": "克孜勒苏柯尔克孜自治州",\n        "912": "阿勒泰地区",\n        "913": "乌鲁木齐",\n        "914": "克拉玛依",\n        "915": "伊犁哈萨克自治州"\n    },\n    "t_sdk_hago_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share1.jpg",\n            "title": "Play with me in Hago! https://go.onelink.me/7pHf/7dc6e868"\n        }\n    ],\n    "t_sdk_headline_jump_games": [\n        {\n            "id": "tt0ed0786d91eb92cc",\n            "index": "86",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/86.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/86.png"\n            ]\n        },\n        {\n            "id": "ttd62da0904916d98f",\n            "index": "100",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/100.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/100.png"\n            ]\n        },\n        {\n            "id": "tt36244099a91f3984",\n            "index": "110",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/110.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/110.png"\n            ]\n        },\n        {\n            "id": "tt347f42c2ab55ec48",\n            "index": "70",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/70.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/70.png"\n            ]\n        },\n        {\n            "id": "tt3321459cac1b2a8e",\n            "index": "55v2",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/55v2.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/55v2.png"\n            ]\n        },\n        {\n            "id": "tt9e56e8eb017c109e",\n            "index": "56",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/56.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/56.png"\n            ]\n        },\n        {\n            "id": "tt4e2a3897d110084b",\n            "index": "82",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/82.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/82.png"\n            ]\n        },\n        {\n            "id": "tt286b5ed6b74165b2",\n            "index": "80",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/80.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/80.png"\n            ]\n        },\n        {\n            "id": "ttbeffc84221d594a2",\n            "index": "75",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/75.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/75.png"\n            ]\n        },\n        {\n            "id": "tt2c515aecb37b1973",\n            "index": "74",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/74.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/74.png"\n            ]\n        }\n    ],\n    "t_sdk_headline_jump_games_video_type": [\n        \n    ],\n    "t_sdk_headline_pay_code": {\n        \n    },\n    "t_sdk_headline_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share1.jpg",\n            "templateId": "c2ghg3h259959029os",\n            "title": "点击立即体验，神奇叶罗丽化妆术"\n        }\n    ],\n    "t_sdk_headline_share_recorder_video_desc": [\n        [\n            "叶罗丽彩妆公主",\n            "抖音小游戏",\n            "教教我怎么才能缔结火契约啊",\n            "叶罗丽彩妆公主小游戏"\n        ],\n        [\n            "叶罗丽彩妆公主",\n            "抖音小游戏",\n            "这里面的化妆品可真好看！"\n        ],\n        [\n            "叶罗丽彩妆公主",\n            "抖音小游戏",\n            "我还是第一次给叶罗丽涂面膜呢，真好玩~"\n        ]\n    ],\n    "t_sdk_headline_share_video_cuttemplateid": {\n        \n    },\n    "t_sdk_headline_subscribe_templete_ids": {\n        "1": "MSG1122885947d983961bd9a8fcc2ea78818fbd5f113724"\n    },\n    "t_sdk_headline_tt_navigate_to_mini_game_app_id_list": [\n        "tt0ed0786d91eb92cc",\n        "ttd62da0904916d98f",\n        "tt36244099a91f3984",\n        "tt347f42c2ab55ec48",\n        "tt3321459cac1b2a8e",\n        "tt9e56e8eb017c109e",\n        "tt4e2a3897d110084b",\n        "tt286b5ed6b74165b2",\n        "ttbeffc84221d594a2",\n        "tt2c515aecb37b1973"\n    ],\n    "t_sdk_huawei_adv_tag_2_native_index": {\n        \n    },\n    "t_sdk_huawei_native_index_2_native_id": {\n        \n    },\n    "t_sdk_huawei_pay_code": {\n        \n    },\n    "t_sdk_oppoqg_adv_tag_2_native_index": {\n        \n    },\n    "t_sdk_oppoqg_jump_games": [\n        {\n            "id": "com.ultralisk.game70.nearme.gamecenter",\n            "index": "70",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/70.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/70.png"\n            ]\n        },\n        {\n            "id": "com.ultralisk.game86.nearme.gamecenter",\n            "index": "86",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/86.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/86.png"\n            ]\n        },\n        {\n            "id": "cn.ultralisk.game56.kyx.nearme.gamecenter",\n            "index": "56",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/56.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/56.png"\n            ]\n        },\n        {\n            "id": "com.ultralisk.game75.nearme.gamecenter",\n            "index": "75",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/75.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/75.png"\n            ]\n        },\n        {\n            "id": "com.ultralisk.game74.nearme.gamecenter",\n            "index": "74",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/74.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/74.png"\n            ]\n        }\n    ],\n    "t_sdk_oppoqg_native_index_2_native_id": {\n        \n    },\n    "t_sdk_oppoqg_pay_code": {\n        \n    },\n    "t_sdk_oppoqg_show_banner_box_adv_tags": [\n        \n    ],\n    "t_sdk_oppoqg_show_inter_box_adv_tags": [\n        \n    ],\n    "t_sdk_privacyPolicy_dataArray": [\n        {\n            "name": "隐私政策",\n            "url": "https://gamesres.ultralisk.cn/notice/policy/oppoleishoupolicy.json"\n        }\n    ],\n    "t_sdk_qq_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share1.jpg",\n            "title": "给叶罗丽仙子化妆，她居然会眨眼配合！"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share2.jpg",\n            "title": "什么？叶罗丽也需要做脸部护理？"\n        }\n    ],\n    "t_sdk_record_duration_limit_object": {\n        "*": {\n            "max": 300,\n            "min": 3\n        },\n        "2": {\n            "max": 300,\n            "min": 15\n        }\n    },\n    "t_sdk_refresh_channels": [\n        "huawei",\n        "baishan"\n    ],\n    "t_sdk_trim_adv_err_object": {\n        "*": "广告播放失败了，重新试试看吧！",\n        "baidu": {\n            "code||errCode": {\n                "3010003": "您的网络好像不够流畅，请更换到良好的网络环境再播放广告。",\n                "3010005||3010006": "正在为您播放广告，请稍等一会儿，不要重复点击。"\n            }\n        },\n        "headline||weixin||qq": {\n            "code||errCode": {\n                "1004": "暂时没有适合您观看的广告，请稍等一会儿再试吧！"\n            }\n        },\n        "oppoqg": {\n            "(this.errCode==1001 || this.errCode == 1004)u0026u0026errMsg": {\n                "/10001/||/10100/||/10101/||/10403/": "您的网络好像不够流畅，请更换到良好的网络环境再播放广告。",\n                "/10405/": "您的操作系统版本太低，不能播放广告。",\n                "/10406/": "需要连接到 Wifi 网络",\n                "/11002/": "这个广告只能在OPPO手机上播放，请确认您的机型。",\n                "/11003/": "暂时无法播放广告，请稍等一会儿再试吧1！"\n            }\n        },\n        "vivo": {\n            "code||errCode": {\n                "-100||101||500": "您的网络好像不够流畅，请更换到良好的网络环境再播放广告。",\n                "-3||108||30005": "暂时无法播放广告，请稍等一会儿再试吧！",\n                "30007": "暂时无法播放广告，请稍等一会儿再试吧！",\n                "30010": "广告播放失败了，可能是是由于您经常关闭广告造成的，稍等一会儿再试吧。"\n            }\n        }\n    },\n    "t_sdk_uc_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share1.jpg",\n            "title": "给叶罗丽仙子化妆，她居然会眨眼配合！"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share2.jpg",\n            "title": "什么？叶罗丽也需要做脸部护理？"\n        }\n    ],\n    "t_sdk_vivo_pay_code": {\n        \n    },\n    "t_sdk_vivo_share_list": [\n        ""\n    ],\n    "t_sdk_vivo_show_banner_box_adv_tags": [\n        \n    ],\n    "t_sdk_webreview_cdk_goodsid": [\n        {\n            "count": 100,\n            "goodsid": 2\n        }\n    ],\n    "t_sdk_weixin_grid_adunits": {\n        "list": "",\n        "list_roll": "",\n        "single": "",\n        "table": ""\n    },\n    "t_sdk_weixin_jump_games": [\n        {\n            "id": "wxa44fb0b2873dbca0",\n            "index": "70",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/70.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/70.png"\n            ]\n        },\n        {\n            "id": "wxe22e720e831505df",\n            "index": "110",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/110.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/110.png"\n            ]\n        },\n        {\n            "id": "wxe6ff4d6d0f759a9e",\n            "index": "100",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/100.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/100.png"\n            ]\n        },\n        {\n            "id": "wxc5fc8e29029ee33c",\n            "index": "119",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/119.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/119.png"\n            ]\n        },\n        {\n            "id": "wx2ec0b7f791ec8c25",\n            "index": "86",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/86.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/86.png"\n            ]\n        },\n        {\n            "id": "wx9f0c9ca340c89e11",\n            "index": "124",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/124.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/124.png"\n            ]\n        },\n        {\n            "id": "wx7b9b74c53dd576ac",\n            "index": "74",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/74.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/74.png"\n            ]\n        },\n        {\n            "id": "wxe5dd5fc469d54326",\n            "index": "120",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/120.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/120.png"\n            ]\n        },\n        {\n            "id": "wx358550c490c758f1",\n            "index": "75",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/75.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/75.png"\n            ]\n        },\n        {\n            "id": "wx674c94b5a44a75de",\n            "index": "56",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/56.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/56.png"\n            ]\n        }\n    ],\n    "t_sdk_weixin_navigate_to_mini_game_app_id_list": [\n        \n    ],\n    "t_sdk_weixin_pay_code": {\n        \n    },\n    "t_sdk_weixin_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share1.jpg",\n            "title": "给叶罗丽仙子化妆，她居然会眨眼配合！"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share2.jpg",\n            "title": "什么？叶罗丽也需要做脸部护理？"\n        }\n    ],\n    "t_sdk_weixin_subscribe_templete_ids": {\n        \n    },\n    "targetCreatorBranch": "",\n    "targetCreatorExePath": "",\n    "targetCreatorGitAddr": "",\n    "targetProjectBranch": "v1_i18n_h5_release",\n    "targetProjectGitAddr": "ude2/prj.game83",\n    "tempCreatorProjectPaths": [\n        [\n            ".laya/",\n            ".laya/"\n        ],\n        [\n            "bin/",\n            "bin/",\n            [\n                "**/vconsole.*"\n            ]\n        ],\n        [\n            "declare/",\n            "declare/"\n        ],\n        [\n            "laya/",\n            "laya/"\n        ],\n        [\n            "libs/",\n            "libs/"\n        ],\n        [\n            "node_modules/",\n            "node_modules/"\n        ],\n        [\n            "src/",\n            "src/"\n        ],\n        [\n            "package-lock.json",\n            ""\n        ],\n        [\n            "prj.game83.laya",\n            ""\n        ],\n        [\n            "tsconfig.json",\n            ""\n        ]\n    ],\n    "tempProjectName": "laya_proj",\n    "autoUploadPack": false,\n    "B_OBFUSCATOR_CCONFIG": false,\n    "B_SHOW_LICENCE_INFO_ON_LOADING": false,\n    "build_laya_web_module_config": {\n        "embedWebDebugger": false,\n        "title": "叶罗丽彩妆公主"\n    },\n    "s_sdk_facebook_bannerId": "4864743603539728_5324942390853178",\n    "i_sdk_licence_info_mode": 1,\n    "s_sdk_cop_channel_id": "169",\n    "s_sdk_cop_version": "5805",\n    "s_sdk_licence_info": "",\n    "t_sdk_increment_fields": [\n        \n    ],\n    "_target_project_branch": "v1_i18n_h5_release",\n    "_target_project_log": "2021-06-17 12:12:10 +0800-gengxiaoxiao-cf7c9687af",\n    "_target_last_commit_time": 1623903130,\n    "prjVersion": "cf7c9687af",\n    "rootPath": "D:/ulwork/ulsdk/",\n    "rootSdkPath": "D:/ulwork/ulsdk/prj.sdk.html5/",\n    "gitRepoPath": "D:/ulwork/ulsdk/h5_games_res/",\n    "taskDate": "2022_02_22",\n    "taskTick": "2022_02_22_10_22_38",\n    "taskTickShort": "0222_102238",\n    "taskName": "weiyou",\n    "configName": "task_game83_yllczgz_v1",\n    "targetPath": "D:/ulwork/ulsdk/h5_out/83_weiyou_0222_102238/",\n    "resCachePath": "D:/ulwork/ulsdk/h5_res_cache/prj.game83/",\n    "packagePath": "D:/ulwork/ulsdk/prj.games.html5.channels.packages/prj.game83/prj.game83_v1_i18n_h5_release_weiyou_0222_102238/",\n    "buildDisabled": false,\n    "creatorExePath": "",\n    "taskJsonPath": "D:/ulwork/ulsdk/prj.games.html5.channels.tasks/task_game83_yllczgz_v1/task.json",\n    "tempProjPath": "D:/ulwork/ulsdk/h5_out/83_weiyou_0222_102238/laya_proj/",\n    "moduleList": "common,build_laya_web,weiyou",\n    "envCheckResult": [\n        \n    ],\n    "i_sdk_start_game_by_touch": 1,\n    "t_sdk_adv_banner_tags_style_setting": {\n        \n    },\n    "i_sdk_banner_autoRefresh_mode": 0,\n    "i_sdk_banner_refresh_intervals": 30,\n    "i_sdk_native_autoRefresh_intervals": 30,\n    "t_sdk_show_native_banner_autoRefresh_tags": [\n        \n    ],\n    "t_sdk_show_native_banner_autoRefresh_tags_style_setting": {\n        \n    }\n}');
	class ULTimer {
		constructor(t, e, a) {
			this._repeatCount = -1, this._span = 1, this._callback = null, this._intervalId = null, this._count = 0, this._beginTime = -1, this._usedTime = 0, this._span = t, this._repeatCount = e, this._callback = a
		}
		static callLater(t, e) {
			new ULTimer(t, 1, e).start()
		}
		static callLoop(t, e) {
			new ULTimer(t, -1, e).start()
		}
		_onSpan() {
			if (this._count++, this._usedTime = ULTools.time() - this._beginTime, this._callback) try {
				this._callback(this)
			} catch (t) {
				ULLog.console.warn("警告] ULTimer._onSpan callback has error", t)
			}
			this._repeatCount >= 0 && this._count >= this._repeatCount && this.stop()
		}
		isRunning() {
			return null != this._intervalId
		}
		get count() {
			return this._count
		}
		get span() {
			return this._span
		}
		get usedTime() {
			return this._usedTime
		}
		start() {
			return this.stop(), this._callback ? (this._beginTime = ULTools.time(), this._count = 0, this._intervalId = setInterval(this._onSpan.bind(this), 1e3 * this.span), this) : (ULLog.console.warn("警告] ULTimer.start callback未设置！"), this)
		}
		stop() {
			return null != this._intervalId && (clearInterval(this._intervalId), this._intervalId = null), this
		}
	}
	class ULStorageManager {
		constructor() {
			this.cacheStorage = {}
		}
		static getInstance() {
			return this._instance || (this._instance = new ULStorageManager), this._instance
		}
		getStorage(t) {
			let e = ULEventDispatcher.getInstance().dispatchWithReturn(ULConst.CMD_SDK_GET_STORAGE, {
				key: t
			});
			return ULConst.B_INNER_DEBUG && ULLog.console.log(ULTools.format("ULStorageManager.getStorage(%s) => [%s]", t, e)), null == e ? e = this.cacheStorage[t] : this.cacheStorage[t] = e, e
		}
		setStorage(t, e) {
			ULConst.B_INNER_DEBUG && ULLog.console.log(ULTools.format("ULStorageManager.setStorage(%s, %s)", t, e)), this.cacheStorage[t] = e, ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SET_STORAGE, {
				key: t,
				data: e
			}) || ULLog.console.warn("ULStorageManager.setStorage 未找到实现！")
		}
	}
	ULStorageManager._instance = null;
	class ULWebSocket {
		constructor(t) {
			if (this.socketingWS = null, this.isOpening = !1, this.socketMsgCache = [], this._isAutoClearCache = !1, "WebSocket" in window) {
				var e = new WebSocket(t);
				this.socketingWS = e;
				let a = this;
				e.onopen = function(t) {
					a.isOpening = !0, a.onopen(t)
				}, e.onmessage = function(t) {
					a.onmessage(t)
				}, e.onclose = function(t) {
					a.isOpening = !1, a.socketingWS = null, a.socketMsgCache = [], a.onclose(t)
				}, e.onerror = function(t) {
					a.isOpening = !1, a.socketingWS = null, a.socketMsgCache = [], a.onerror(t)
				}
			}
		}
		set isAutoClearCache(t) {
			t != this._isAutoClearCache && (this._isAutoClearCache = t, this._isAutoClearCache ? this.intervalId = setInterval(() => {
				this.clearCache()
			}, 30) : clearInterval(this.intervalId))
		}
		close(t, e) {
			this.isOpening && this.socketingWS && (this.socketingWS.close(), this.isOpening = !1, this.socketingWS = null)
		}
		send(t) {
			if (!this.socketingWS) return;
			let e = null;
			try {
				e = JSON.stringify(t)
			} catch (t) {
				e = JSON.stringify({
					type: 3,
					data: t
				})
			} finally {
				!this.isOpening || this._isAutoClearCache ? (this.socketMsgCache.push(e), this.isAutoClearCache = !0) : this.socketingWS.send(e)
			}
		}
		clearCache() {
			if (this.socketingWS && this.socketMsgCache.length) {
				if (this.isOpening) {
					let t = this.socketMsgCache.shift();
					this.socketingWS.send(t)
				}
			} else this.isAutoClearCache = !1
		}
	}
	class ULTools {
		static time() {
			return (new Date).getTime() / 1e3
		}
		static timeInDay() {
			let t = this.time(),
				e = new Date(1e3 * t);
			return e.setHours(0), e.setMinutes(0), e.setSeconds(0), e.setMilliseconds(0), t - e.getTime() / 1e3
		}
		static isOneDay(t, e) {
			var a = new Date(1e3 * t),
				i = new Date(1e3 * e);
			return a.getFullYear() == i.getFullYear() && a.getMonth() == i.getMonth() && a.getDate() == i.getDate()
		}
		static isOneMonth(t, e) {
			var a = new Date(1e3 * t),
				i = new Date(1e3 * e);
			return a.getFullYear() == i.getFullYear() && a.getMonth() == i.getMonth()
		}
		static getObjSize(t) {
			if (!t) return 0;
			if (Array.isArray(t)) return t.length;
			let e = 0;
			return this.forEachMap(t, (t, a) => {
				e++
			}), e
		}
		static random(t, e) {
			return null == t && null == e ? Math.random() : null == e ? Math.floor(Math.random() * t + 1) : Math.floor(Math.random() * (e - t + 1) + t)
		}
		static scaleInRange(t, e, a, i, s) {
			return e < a ? (t < e && (t = e), t > a && (t = a)) : (t < a && (t = a), t > e && (t = e)), (t - e) / (a - e) * (s - i) + i
		}
		static clampf(t, e, a) {
			return t < e ? e : t > a ? a : t
		}
		static calcWheelTarget(t, e) {
			let a = 0;
			for (let i = 0; i < t.length; i++) {
				const s = t[i];
				let n = parseInt(s[e]);
				if (isNaN(n)) return ULLog.console.warn(this.format("Tools.calcWheelTarget weight field not found! key=[%s]", e)), null;
				a += n
			}
			let i = this.random(a);
			for (let a = 0; a < t.length; a++) {
				const s = t[a];
				let n = parseInt(s[e]);
				if (i <= n) return s;
				i -= n
			}
			return null
		}
		static sortArrayByField(t, e) {
			e = "string" == typeof e ? [e] : e;
			let a = [];
			for (let t in e) {
				let i = e[t];
				if (i && "" != i)
					if ("-" === i.substring(0, 1)) {
						let t = i.substring(1, i.length);
						t && "" != t && a.push([t, !0])
					} else a.push([i, !1])
			}
			let i = [];
			for (let e = 0; e < t.length; e++) {
				const a = t[e];
				i.push(a)
			}
			return i.sort((t, e) => {
				let i = 0;
				for (let s in a) {
					let n = a[s],
						o = n[0],
						r = n[1],
						l = t[o],
						c = e[o];
					if (null != l && 0 != (i = r ? c - l : l - c)) return i
				}
				return i
			}), i
		}
		static bubbleSort(t, e) {
			for (var a = t.length, i = 0; i < a; i++)
				for (var s = 0; s < a - 1 - i; s++) {
					if (e(t[s], t[s + 1]) > 0) {
						var n = t[s + 1];
						t[s + 1] = t[s], t[s] = n
					}
				}
			return t
		}
		static forEachMap(t, e) {
			if (!t) return;
			let a = Object.keys(t);
			for (let i = 0; i < a.length; i++) {
				let s = a[i],
					n = t[s];
				if (null != n && e(s, n)) break
			}
		}
		static formatTime(t, e) {
			let a = Math.floor(t / 3600),
				i = Math.floor(t / 60) % 60,
				s = Math.ceil(t) % 60;
			return e.match("%h") && (e = e.replace("%h", a.toString())), e.match("%H") && (e = e.replace("%H", this.format("%02d", a))), e.match("%m") && (e = e.replace("%m", i.toString())), e.match("%M") && (e = e.replace("%M", this.format("%02d", i))), e.match("%s") && (e = e.replace("%s", s.toString())), e.match("%S") && (e = e.replace("%S", this.format("%02d", s))), e
		}
		static formatDate(t, e) {
			let a = {
					"M+": t.getMonth() + 1,
					"d+": t.getDate(),
					"H+": t.getHours(),
					"m+": t.getMinutes(),
					"s+": t.getSeconds(),
					"q+": Math.floor((t.getMonth() + 3) / 3),
					"S+": t.getMilliseconds()
				},
				i = e;
			for (var s in /(y+)/.test(i) && (i = i.replace(RegExp.$1, (t.getFullYear() + "").substr(4 - RegExp.$1.length))), a) new RegExp("(" + s + ")").test(i) && (i = i.replace(RegExp.$1, 1 == RegExp.$1.length ? a[s] : ("00" + a[s]).substr(("" + a[s]).length)));
			return i
		}
		static generateUUID() {
			let t = (new Date).getTime();
			return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, e => {
				var a = (t + 16 * Math.random()) % 16 | 0;
				return t = Math.floor(t / 16), ("x" == e ? a : 3 & a | 8).toString(16)
			})
		}
		static compressUuid(t) {
			let e = "0123456789abcdef".split(""),
				a = {};
			for (let t = 0; t < e.length; t++) a[e[t]] = t;
			let i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),
				s = {};
			for (let t = 0; t < i.length; t++) s[i[t]] = t;
			let n = (t = t.replace(/-/g, "")).split(""),
				o = [];
			o.push(n[0]), o.push(n[1]);
			for (let t = 2; t < n.length; t += 3) {
				let e = a[n[t]],
					s = a[n[t + 1]],
					r = a[n[t + 2]];
				o.push(i[e << 2 | s >> 2]), o.push(i[(3 & s) << 4 | r])
			}
			return o.join("")
		}
		static decompressUuid(t) {
			let e = t.split("");
			if (e.length < 22) return t;
			let a = "0123456789abcdef".split(""),
				i = {};
			for (let t = 0; t < a.length; t++) i[a[t]] = t;
			let s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),
				n = {};
			for (let t = 0; t < s.length; t++) n[s[t]] = t;
			let o = [];
			o.push(e[0]), o.push(e[1]);
			for (let t = 2; t < e.length; t += 2) {
				let i = n[e[t]],
					s = n[e[t + 1]];
				o.push(a[i >> 2]), o.push(a[(3 & i) << 2 | s >> 4]), o.push(a[15 & s])
			}
			return o.splice(8, 0, "-"), o.splice(13, 0, "-"), o.splice(18, 0, "-"), o.splice(23, 0, "-"), o.join("")
		}
		static getType(t) {
			return {
				"[object Boolean]": "boolean",
				"[object Number]": "number",
				"[object String]": "string",
				"[object Function]": "function",
				"[object Array]": "array",
				"[object Date]": "date",
				"[object RegExp]": "regExp",
				"[object Undefined]": "undefined",
				"[object Null]": "null",
				"[object Object]": "object"
			} [Object.prototype.toString.call(t)]
		}
		static clone(t) {
			let e, a = this.getType(t);
			if (window.cc && t instanceof window.cc.Node) return t;
			if ("object" === a) e = {};
			else {
				if ("array" !== a) return t;
				e = []
			}
			if ("array" === a)
				for (let a = 0, i = t.length; a < i; a++) e.push(this.clone(t[a]));
			else if ("object" === a)
				for (let a in t) e[a] = this.clone(t[a]);
			return e
		}
		static toArray(t) {
			return Array.isArray(t) ? t : []
		}
		static sumNumberArray(t) {
			if (!Array.isArray(t)) return 0;
			let e = 0;
			for (let a = 0; a < t.length; a++) {
				const i = t[a];
				isNaN(i) || (e += i)
			}
			return e
		}
		static getRandomValueInArray(t) {
			return Array.isArray(t) ? t[this.random(t.length) - 1] : null
		}
		static _convert(t, e) {
			t.sign = e ? "" : t.negative ? "-" : t.sign;
			var a = t.min - t.argument.length + 1 - t.sign.length,
				i = new Array(a < 0 ? 0 : a).join(t.pad);
			return t.left ? "0" == t.pad || e ? t.sign + t.argument + i.replace(/0/g, " ") : t.sign + t.argument + i : "0" == t.pad || e ? t.sign + i + t.argument : i + t.sign + t.argument
		}
		static format(...t) {
			if (void 0 === arguments) return null;
			if (arguments.length < 1) return null;
			if ("string" != typeof arguments[0]) return null;
			if ("undefined" == typeof RegExp) return null;
			for (var e = arguments[0], a = new RegExp(/(%([%]|(\-)?(\+|\x20)?(0)?(\d+)?(\.(\d)?)?([bcdfosxX])))/g), i = new Array, s = new Array, n = 0, o = 0, r = 0, l = 0, c = "", h = null; h = a.exec(e);) h[9] && (n += 1), o = l, r = a.lastIndex - h[0].length, s[s.length] = e.substring(o, r), l = a.lastIndex, i[i.length] = {
				match: h[0],
				left: !!h[3],
				sign: h[4] || "",
				pad: h[5] || " ",
				min: h[6] || 0,
				precision: h[8],
				code: h[9] || "%",
				negative: parseInt(arguments[n]) < 0,
				argument: String(arguments[n])
			};
			if (s[s.length] = e.substring(l), 0 == i.length) return e;
			if (arguments.length - 1 < n) return null;
			h = null;
			var d = null,
				_ = null;
			for (_ = 0; _ < i.length; _++) "%" == i[_].code ? d = "%" : "b" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(2)), d = this._convert(i[_], !0)) : "c" == i[_].code ? (i[_].argument = String(String.fromCharCode(Math.abs(parseInt(i[_].argument)))), d = this._convert(i[_], !0)) : "d" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument))), d = this._convert(i[_])) : "f" == i[_].code ? (i[_].argument = String(Math.abs(parseFloat(i[_].argument)).toFixed(i[_].precision ? i[_].precision : 6)), d = this._convert(i[_])) : "o" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(8)), d = this._convert(i[_])) : "s" == i[_].code ? (i[_].argument = i[_].argument.substring(0, i[_].precision ? i[_].precision : i[_].argument.length), d = this._convert(i[_], !0)) : "x" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(16)), d = this._convert(i[_])) : "X" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(16)), d = this._convert(i[_]).toUpperCase()) : d = i[_].match, c += s[_], c += d;
			return c += s[_]
		}
		static httpGet(t) {
			let e = new XMLHttpRequest,
				a = new ULTimer(t.timeoutMillisecond / 1e3, 1, a => {
					if (e) {
						let a = e;
						e = null, a.abort(), t.fail instanceof Function && t.fail("timeout")
					}
				});
			e.onreadystatechange = function(i) {
				if (e && 4 == e.readyState)
					if (a.stop(), 200 == e.status) {
						let a = e.responseText;
						t.success instanceof Function && t.success(a)
					} else ULLog.console.warn("ULTools.httpGet on error:", e.readyState, e.status), t.fail instanceof Function && t.fail(e.status.toString())
			}, e.ontimeout = function(a) {
				if (e) {
					let a = e;
					e = null, a.abort(), t.fail instanceof Function && t.fail("timeout")
				}
			}, e.onerror = function(a) {
				if (e) {
					let i = e;
					e = null, i.abort(), t.fail instanceof Function && t.fail("on error :" + a)
				}
			}, a.start(), e.open("get", t.url), e.send()
		}
		static httpPost(t) {
			t.contentType = t.contentType || "application/x-www-form-urlencoded;charset=utf-8";
			let e = new XMLHttpRequest,
				a = new ULTimer(t.timeoutMillisecond / 1e3, 1, a => {
					if (e) {
						let a = e;
						e = null, a.abort(), t.fail instanceof Function && t.fail("timeout")
					}
				});
			e.onreadystatechange = function(i) {
				if (e && 4 == e.readyState)
					if (a.stop(), 200 == e.status) {
						let a = e.responseText;
						t.success instanceof Function && t.success(a)
					} else ULLog.console.warn("ULTools.httpPost on error:", e.readyState, e.status), t.fail instanceof Function && t.fail(e.status.toString())
			}, e.ontimeout = function(a) {
				if (e) {
					let a = e;
					e = null, a.abort(), t.fail instanceof Function && t.fail("timeout")
				}
			}, e.onerror = function(a) {
				if (e) {
					let i = e;
					e = null, i.abort(), t.fail instanceof Function && t.fail("on error :" + a)
				}
			}, a.start(), e.open("post", t.url, !0), e.setRequestHeader("Content-Type", t.contentType), e.send(t.postData)
		}
		static stringToByte(t) {
			var e, a, i = new Array;
			e = t.length;
			for (var s = 0; s < e; s++)(a = t.charCodeAt(s)) >= 65536 && a <= 1114111 ? (i.push(a >> 18 & 7 | 240), i.push(a >> 12 & 63 | 128), i.push(a >> 6 & 63 | 128), i.push(63 & a | 128)) : a >= 2048 && a <= 65535 ? (i.push(a >> 12 & 15 | 224), i.push(a >> 6 & 63 | 128), i.push(63 & a | 128)) : a >= 128 && a <= 2047 ? (i.push(a >> 6 & 31 | 192), i.push(63 & a | 128)) : i.push(255 & a);
			return i
		}
		static httpPostEncryption(t) {
			let e = new XMLHttpRequest,
				a = new ULTimer(t.timeoutMillisecond / 1e3, 1, a => {
					if (e) {
						let a = e;
						e = null, a.abort(), t.fail instanceof Function && t.fail("timeout")
					}
				});
			e.onreadystatechange = function(i) {
				if (e && 4 == e.readyState)
					if (a.stop(), 200 == e.status) {
						let a = e.responseText;
						t.success instanceof Function && t.success(a)
					} else console.warn("ULTools.httpPost on error:", e.readyState, e.status), t.fail instanceof Function && t.fail(e.status.toString())
			}, e.ontimeout = function(a) {
				if (e) {
					let a = e;
					e = null, a.abort(), t.fail instanceof Function && t.fail("timeout")
				}
			}, e.onerror = function(a) {
				if (e) {
					let i = e;
					e = null, i.abort(), t.fail instanceof Function && t.fail("on error :" + a)
				}
			};
			let i = this.stringToByte(t.postString),
				s = i.length % 127 || 127;
			var n = new ArrayBuffer(i.length),
				o = new Uint8Array(n);
			for (let t = 0; t < i.length; t++) i[t] = i[t] ^ s, o[t] = i[t];
			a.start(), e.open("post", t.url, !0), e.setRequestHeader("isEncrypt", "1"), e.send(n)
		}
		static httpJsonp(t) {
			if (!t || !t.url) throw new Error("参数不合法");
			let e = ULTools.format("jsonp_%d", ULTools.random(1e6));
			t.data.callback = e;
			let a = document.getElementsByTagName("head")[0],
				i = [];
			this.forEachMap(t.data, (t, e) => {
				i.push(ULTools.format("%s=%s", encodeURIComponent(t), encodeURIComponent(e)))
			});
			let s = i.join("&"),
				n = document.createElement("script");
			a.appendChild(n);
			let o = new ULTimer(t.timeoutMillisecond / 1e3, 1, i => {
				window[e] && (window[e] = null, a.removeChild(n), t.fail && t.fail("timeout"))
			});
			window[e] = function(i) {
				window[e] && (a.removeChild(n), o.stop(), window[e] = null, t.success && t.success(i))
			}, n.src = t.url + "?" + s
		}
		static loadJs(t, e, a) {
			let i = document.createElement("script");
			i.type = "text/javascript", i.addEventListener("load", t => {
				e instanceof Function && e()
			}), i.src = t, i.defer = "defer", a && (i.crossOrigin = "anonymous"), document.getElementsByTagName("head")[0].appendChild(i)
		}
		static getQueryString(t) {
			var e = new RegExp("(^|&)" + t + "=([^&]*)(&|$)"),
				a = window.location.search.substr(1).match(e);
			return null != a ? decodeURI(a[2]) : null
		}
		static createRandomString(t) {
			t = t || 32;
			let e = "ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz123456789",
				a = e.length,
				i = "";
			for (let s = 0; s < t; s++) i += e.charAt(Math.floor(Math.random() * a));
			return i
		}
		static createRandomUserId() {
			let t = this.generateUUID();
			return this.compressUuid(t)
		}
		static createRandomOrderId() {
			return (new Date).getTime() + this.createRandomString(7)
		}
		static compareVersion(t, e) {
			let a = t.split("."),
				i = e.split(".");
			const s = Math.max(a.length, i.length);
			for (; a.length < s;) a.push("0");
			for (; i.length < s;) i.push("0");
			for (let t = 0; t < s; t++) {
				const e = parseInt(a[t]),
					s = parseInt(i[t]);
				if (e > s) return 1;
				if (e < s) return -1
			}
			return 0
		}
		static _hack_console_print_method() {
			let t = function(t, e) {
				return function(...a) {
					e(...a), ULTools.socketingWS && ULTools.socketingWS.send({
						type: t,
						data: a
					})
				}
			};
			this._console_log || (this._console_log = t(1, console.log)), this._console_warn || (this._console_warn = t(2, console.warn)), this._console_error || (this._console_error = t(3, console.error)), window.cc && (this._cc_log || (this._cc_log = t(1, window.cc.log)), this._cc_warn || (this._cc_warn = t(2, window.cc.warn)), this._cc_error || (this._cc_error = t(3, window.cc.error)));
			let e = ULConfig.getConfig();
			console.log = e.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_LOG ? () => {} : this._console_log, console.warn = e.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_WARN ? () => {} : this._console_warn, console.error = e.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_ERROR ? () => {} : this._console_error, window.cc && (window.cc.log = e.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_LOG ? () => {} : this._cc_log, window.cc.warn = e.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_WARN ? () => {} : this._cc_warn, window.cc.error = e.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_ERROR ? () => {} : this._cc_error)
		}
		static _start_console_print_LAN() {
			if (ULTools.socketingWS) return;
			let t = ULConfig.getConfig().s_sdk_lan_debug_address.length > 10 ? ULConfig.getConfig().s_sdk_lan_debug_address : "",
				e = localStorage.getItem("console_lan_id") || ULStorageManager.getInstance().getStorage("console_lan_id") || t;
			if (ULLog.console.log("console_lan_id:", e), e && e.length && "WebSocket" in window) {
				ULLog.console.log("支持WebSocket局域网调试");
				var a = `ws://${e}:3002/websocket/test`,
					i = null;
				try {
					(i = new ULWebSocket(a)).onopen = function() {
						ULLog.console.log("Connection open ..."), ULSdkManager.getInstance().moduleCheckerManager.addDebugInfo("console_lan_id", "已开启局域网调试")
					}, i.onmessage = function(t) {
						ULLog.console.log("Received Message:" + t.data)
					}, i.onclose = function() {
						ULLog.console.log("Connection closed"), ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("console_lan_id"), ULTools.socketingWS = null
					}, i.onerror = function(t) {
						ULLog.console.error("Connection onerror:", t), ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("console_lan_id"), ULTools.socketingWS = null
					}
				} catch (t) {
					i = null, ULLog.console.log("局域网调试错误:", JSON.stringify(t))
				} finally {
					if (null == i) return;
					ULTools.socketingWS = i
				}
			} else ULLog.console.log("不支持WebSocket局域网调试")
		}
		static _close_console_print_LAN() {
			ULTools.socketingWS && (ULTools.socketingWS.close(), ULTools.socketingWS = null)
		}
		static jsonValToStr(t) {
			if (!t) return t;
			let e = {},
				a = Object.keys(t);
			for (let i = 0; i < a.length; i++) {
				let s = a[i],
					n = t[s];
				n = "object" == typeof n ? JSON.stringify(n) : String(n), e[s] = n
			}
			return e
		}
		static calcWheelTargetByArray(t, e) {
			let a = 0;
			for (let e = 0; e < t.length; e++) a += t[e];
			0 != e && (a = Math.min(a, e));
			let i = Math.random() * a,
				s = 0;
			for (let e = 0; e < t.length; e++)
				if ((s += t[e]) > i) return e;
			return null
		}
		static recordVideoTimeLimit(t, e) {
			let a = ULConfig.getConfig().t_sdk_record_duration_limit_object || {},
				i = a["string" == typeof t ? t : "number" == typeof t ? t.toString() : ""] || a["*"] || {},
				s = i.min || 0,
				n = i.max || 1e4;
			return s > e ? {
				isConform: !1,
				msg: `录屏时间少于${s}秒`
			} : n < e ? {
				isConform: !1,
				msg: `录屏时间大于${n}秒`
			} : {
				isConform: !0,
				msg: ""
			}
		}
	}
	ULTools.socketingWS = null;
	class ULConfig {
		static init() {
			this.bInit = !0, ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, ULConst.PRIORITY_NONE, this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
		}
		static getConfig() {
			return this.bInit || this.init(), this.currConfig || (this.currConfig = ULTools.clone(cConfig)), this.currConfig
		}
		static get(t) {
			return this.getConfig()[t]
		}
		static updateValueByCop(t) {
			let e = ULTools.clone(cConfig);
			ULTools.forEachMap(t, (t, a) => {
				"nil" == a && (a = ""), e[t] = a
			}), this.currConfig = e, ULConst.B_INNER_DEBUG = this.getConfig().i_sdk_debug_mode >= ULConst.CONSOLE_OUTPUT_LEVEL_INNER_DEBUG
		}
		static onCmdSdkCollectionModuleCheckerConfig(t) {
			let e = t.getReturnValue() || [];
			e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "cConfig:"
			}), e.push({
				type: "button",
				text: "显示cConfig",
				onClick: () => {
					let t = this.currConfig,
						e = Object.keys(t);
					e.sort();
					let a = [];
					for (let i = 0; i < e.length; i++) {
						const s = e[i];
						let n = JSON.stringify(t[s]),
							o = ULTools.format("[%s] = [%s]\n", s, n);
						o.length >= 64 && (o = o.substr(0, 62) + ".."), a.push({
							text: o,
							value: {
								k: s,
								v: n
							}
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("cConfig", a, t => {
						ULSdkManager.getInstance().moduleCheckerManager.alertPrompt(t.k, t.v, "关闭", null)
					}, !0)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: ULTools.format("i_sdk_debug_mode=[%s]", this.getConfig().i_sdk_debug_mode),
				name: "labelDebugMode"
			}), e.push({
				type: "button",
				text: "切换调试模式",
				onClick: () => {
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("选择调试模式", [{
						text: "0: 全关",
						value: 0
					}, {
						text: "1: warn + error",
						value: 1
					}, {
						text: "2: log + warn + error",
						value: 2
					}, {
						text: "3: 开启各模块的DEBUG + log + warn + error",
						value: 3
					}], t => {
						cConfig.i_sdk_debug_mode = t, this.currConfig.i_sdk_debug_mode = t, ULTools._hack_console_print_method(), ULConst.B_INNER_DEBUG = this.getConfig().i_sdk_debug_mode >= ULConst.CONSOLE_OUTPUT_LEVEL_INNER_DEBUG, ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelDebugMode", ULTools.format("i_sdk_debug_mode=[%s]", this.getConfig().i_sdk_debug_mode))
					})
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "局域网调试：",
				name: "labelSocketDebugMode"
			}), e.push({
				type: "inputBox",
				text: ULStorageManager.getInstance().getStorage("console_lan_id"),
				name: "console_lan_id"
			}), e.push({
				type: "button",
				text: "切换局域网调试模式",
				onClick: () => {
					let t = ULSdkManager.getInstance().moduleCheckerManager.getItemText("console_lan_id"),
						e = [{
							text: "关闭调试",
							value: 0
						}, {
							text: "开启调试: " + t,
							value: 1
						}];
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("选择调试模式", e, e => {
						0 == e ? (ULStorageManager.getInstance().setStorage("console_lan_id", null), ULTools._close_console_print_LAN()) : (ULStorageManager.getInstance().setStorage("console_lan_id", t), ULTools._start_console_print_LAN())
					})
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: `SDK log 开关：(${this.sdkLogSwitch?"已开启":"已关闭"})`,
				name: "SDK_LOG_MODE"
			}), e.push({
				type: "button",
				text: "切换状态",
				onClick: () => {
					this.sdkLogSwitch ? (this.sdkLogSwitch = !1, ULLog.console.allowConsole = !1) : (this.sdkLogSwitch = !0, ULLog.console.allowConsole = !0), ULSdkManager.getInstance().moduleCheckerManager.setItemText("SDK_LOG_MODE", `SDK log 开关：(${this.sdkLogSwitch?"已开启":"已关闭"})`)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "显示sdk通信记录:"
			}), e.push({
				type: "button",
				text: "查看...",
				onClick: () => {
					let t = ULSdkManager.getInstance().getSdkCommunicationLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						try {
							let t = JSON.parse(i);
							ULLog.console.log(a, i, t), e.push({
								text: ULTools.format("%d: %s", a, t.cmd),
								value: i
							})
						} catch (t) {}
					}
					ULLog.console.log("conf", e), ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("sdk通信记录（最近100条）", e, t => {
						ULSdkManager.getInstance().moduleCheckerManager.showBigTextWithPickerDialog("详情", t, 40)
					}, !0)
				}
			}), e.push({
				type: "newLine"
			}), t.setReturnValue(e, !0)
		}
	}
	ULConfig.bInit = !1, ULConfig.sdkLogSwitch = !0;
	class ULModuleBase {
		constructor() {
			ULLog.console.log("ULModuleBase-constructor")
		}
		init() {
			ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, this.getCollectionModuleCheckerPriority(), this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
		}
		onDisposeModule() {
			ULLog.console.log("ULModuleBase-onDisposeModule")
		}
		loadSubModules() {
			return []
		}
		getSubAdModuleClassName() {
			return []
		}
		getAdMainClassName() {
			return ""
		}
		createSubAdObj(t, e) {
			return null
		}
		createMainAdObj() {
			return null
		}
		loadModuleCheckerConfig() {
			return []
		}
		onCmdSdkCollectionModuleCheckerConfig(t) {
			let e = t.getReturnValue() || [],
				a = this.loadModuleCheckerConfig();
			for (let t = 0; t < a.length; t++) {
				const i = a[t];
				e.push(i)
			}
			t.setReturnValue(e, !0)
		}
		getCollectionModuleCheckerPriority() {
			return ULConst.PRIORITY_NONE
		}
	}
	class ULModuleCdk extends ULModuleBase {
		constructor() {
			super(...arguments), this.className = "ULModuleCdk"
		}
		init() {
			super.init(), ULEventDispatcher.getInstance().addListener(ULConst.CMD_USE_CDKEY, 1, this.onCmdUseCdkey.bind(this))
		}
		requestUseCdk(t, e, a) {
			let i = ULConfig.getConfig(),
				s = i.s_sdk_cdk_app_id,
				n = i.i_net_timeout,
				o = ULTools.format("%s?userId=%s&cdkStr=%s&appId=%s&channelId=%s", i.s_sdk_cdk_url, t, e, s, a);
			ULLog.console.log("ULModuleCdk.requestUseCdk", o), ULTools.httpGet({
				url: o,
				timeoutMillisecond: n,
				success: t => {
					t = (t = (t = (t = t.replace('"[', "[")).replace(']"', "]")).replace('"0"', '"1"')).replace("message", "data");
					let e = JSON.parse(t);
					ULSdkManager.getInstance().statisManager.reportOpenCdk(e.code), 1 == e.code ? ULSdkManager.getInstance().response(ULConst.CMD_USE_CDKEY_RESULT, {
						code: 1,
						data: e.data,
						message: "兑换成功"
					}) : ULSdkManager.getInstance().response(ULConst.CMD_USE_CDKEY_RESULT, {
						code: 0,
						data: [],
						message: e.data
					})
				},
				fail: () => {
					ULSdkManager.getInstance().statisManager.reportOpenCdk(0), ULSdkManager.getInstance().response(ULConst.CMD_USE_CDKEY_RESULT, {
						code: 0,
						message: "请求超时"
					})
				}
			})
		}
		onCmdUseCdkey(t) {
			t.stopImmediatePropagation();
			ULConfig.getConfig();
			let e = t.data,
				a = e.userId,
				i = e.cdkStr,
				s = e.channelId;
			this.requestUseCdk(a, i, s)
		}
	}
	class ULModuleMegadata extends ULModuleBase {
		constructor() {
			super(...arguments), this.className = "ULModuleMegadata"
		}
		init() {
			super.init(), ULEventDispatcher.getInstance().addListener(ULConst.CMD_MEGADATA_SERVER, 1, this.onCmdMegadataServer.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_POST_MEGADATA, 1, this.onCmdPostMegadata.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_RESUME, ULConst.PRIORITY_NONE, this.onCmdSdkOnGameResume.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_PAUSE, ULConst.PRIORITY_NONE, this.onCmdSdkOnGamePause.bind(this)), this.gameLevelStartMsgList = {}
		}
		onCmdMegadataServer(t) {
			t.stopImmediatePropagation();
			let e = ULConfig.getConfig(),
				a = t.data;
			Array.isArray(a) && a.length > 0 ? ULSdkManager.getInstance().response(ULConst.CMD_MEGADATA_SERVER_RESULT, {
				code: 1,
				message: "上报成功"
			}) : ULSdkManager.getInstance().response(ULConst.CMD_MEGADATA_SERVER_RESULT, {
				code: 0,
				message: "数据异常"
			});
			let i = e.s_sdk_megadata_url;
			if (ULSdkManager.getInstance().statisManager.getPostMegadataMode() && (i = e.s_sdk_megadata_test_url), -1 != i.search(/megadatav7/gi)) return void ULLog.console.warn("应用确定使用v7版本统计，/c/megadataServer接口数据不再进行上报");
			let s = ULTools.clone(a),
				n = s[0];
			if (n != ULConst.STATIS_USER_EVENT_POINT_EVENT) {
				if (n == ULConst.STATIS_USER_EVENT_GAME_LEVEL_START) {
					let t = ULTools.time(),
						e = s[1] + "";
					this.gameLevelStartMsgList[e] = t
				}
				if (n == ULConst.STATIS_USER_EVENT_GAME_LEVEL_COMPLETE) {
					let t = s[1] + "",
						e = ULTools.time() - this.gameLevelStartMsgList[t];
					this.gameLevelStartMsgList[t] = void 0, delete this.gameLevelStartMsgList[t], isNaN(e) && (e = 0), (e < 0 || e > 1e4) && (e = 0), s.push(Math.floor(e).toString())
				}
				ULSdkManager.getInstance().statisManager.reportUserEvent(s)
			} else ULSdkManager.getInstance().statisManager.reportPointEvent(s[1], s[2])
		}
		onCmdPostMegadata(t) {
			t.stopImmediatePropagation();
			let e = ULConfig.getConfig(),
				a = t.data;
			Array.isArray(a) && a.length > 0 ? ULSdkManager.getInstance().response(ULConst.CMD_POST_MEGADATA_RESULT, {
				code: 1,
				message: "上报成功"
			}) : ULSdkManager.getInstance().response(ULConst.CMD_POST_MEGADATA_RESULT, {
				code: 0,
				message: "数据异常"
			});
			let i = ULTools.clone(a),
				s = i[0],
				n = "";
			if (s == ULConst.STATIS_USER_ACTION_EVENT_LEVEL_START) {
				let t = ULTools.time(),
					a = i[1] + "";
				this.gameLevelStartMsgList[a] = t, n = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_START_EVENT)
			}
			if (s == ULConst.STATIS_USER_ACTION_EVENT_LEVEL_COMPLETE) {
				let t = i[1] + "",
					a = ULTools.time() - this.gameLevelStartMsgList[t];
				this.gameLevelStartMsgList[t] = void 0, delete this.gameLevelStartMsgList[t], isNaN(a) && (a = 0), (a < 0 || a > 1e4) && (a = 0), i.push(Math.floor(a).toString()), n = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, ["levelComplete", t])
			}
			if (s == ULConst.STATIS_USER_ACTION_EVENT_COIN_CHANGE && (n = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_COIN_CHANGE_EVENT)), s == ULConst.STATIS_USER_ACTION_EVENT_ITEM_BUY && (n = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_ITEM_BUY)), s == ULConst.STATIS_USER_ACTION_EVENT_BUY_ACTION && (n = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_BUY_ACTION)), s == ULConst.STATIS_USER_ACTION_EVENT_COMMON_EVENT) {
				n = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_COMMON_EVENT);
				let t = ULTools.clone(i);
				t.shift(), ULLog.console.log("ULModuleMegadta.onCmdPostMegadatapostData postData:", t), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, t)
			}
			s == ULConst.STATIS_USER_ACTION_EVENT_VIDEO_POINT_EVENT && (n = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_VIDEO_POINT_EVENT), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, ["videoPointShow", i[1]])), "" != n && (i.shift(), ULLog.console.log("ULModuleMegadta.onCmdPostMegadatapostData typeId:", n, " rawDatas:", i), ULSdkManager.getInstance().statisManager.reportUserActionEvent(i, n))
		}
		onCmdSdkOnGameResume(t) {
			ULConfig.getConfig();
			for (let t in this.gameLevelStartMsgList) this.gameLevelStartMsgList[t] = ULTools.time();
			ULLog.console.log("ULModuleMegadta.onCmdSdkOnGameResume gameLevelStartTime:", this.gameLevelStartMsgList)
		}
		onCmdSdkOnGamePause(t) {
			let e = ULConfig.getConfig();
			for (let t in this.gameLevelStartMsgList) {
				ULLog.console.log("ULModuleMegadta.onCmdSdkOnGamePause currentGameLevelName:", t);
				let a = ULTools.time() - this.gameLevelStartMsgList[t];
				isNaN(a) && (a = 0), (a < 0 || a > 1e4) && (a = 0);
				let i = new Array;
				i.push(t), i.push("2"), i.push("pause"), i.push("0"), i.push("0"), i.push("0"), i.push("0"), i.push("0"), i.push("0"), i.push(Math.floor(a).toString());
				let s = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT);
				ULSdkManager.getInstance().statisManager.reportUserActionEvent(i, s)
			}
		}
	}
	class ULModuleUserData extends ULModuleBase {
		constructor() {
			super(...arguments), this.className = "ULModuleUserData"
		}
		init() {
			super.init(), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SAVE_USER_DATA, ULConst.PRIORITY_DISABLE, this.onCmdSaveUserData.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_GET_USER_DATA, ULConst.PRIORITY_DISABLE, this.onCmdGetUserData.bind(this))
		}
		requestUploadUserData(t, e) {
			let a = ULConfig.getConfig(),
				i = a.s_sdk_user_data_save_url,
				s = {
					userId: t,
					data: e
				};
			ULTools.httpPost({
				url: i,
				postData: s,
				timeoutMillisecond: a.i_net_timeout,
				success: t => {
					let e = JSON.parse(t);
					e && 0 == e.code ? ULSdkManager.getInstance().response(ULConst.CMD_SAVE_USER_DATA_RESULT, {
						code: 1,
						msg: "存档成功"
					}) : ULSdkManager.getInstance().response(ULConst.CMD_SAVE_USER_DATA_RESULT, {
						code: 0,
						msg: "存档失败"
					})
				},
				fail: () => {
					ULSdkManager.getInstance().response(ULConst.CMD_SAVE_USER_DATA_RESULT, {
						code: 0,
						msg: "存档超时"
					})
				}
			})
		}
		requestDownloadUserData(t) {
			let e = ULConfig.getConfig(),
				a = ULTools.format("%s?userId=%s", e.s_sdk_user_data_get_url, t);
			ULLog.console.log("ULModuleUserData.requestDownloadUserData", t), ULLog.console.log("  url", a), ULTools.httpGet({
				url: a,
				timeoutMillisecond: e.i_net_timeout,
				success: t => {
					let e = JSON.parse(t);
					ULLog.console.log("  ULModuleUserData.requestDownloadUserData success", t), e && 0 == e.code ? ULSdkManager.getInstance().response(ULConst.CMD_GET_USER_DATA_RESULT, {
						code: 1,
						userData: e.data,
						msg: "模拟成功"
					}) : ULSdkManager.getInstance().response(ULConst.CMD_GET_USER_DATA_RESULT, {
						code: 0,
						userData: {},
						msg: "读取存档失败"
					})
				},
				fail: t => {
					ULLog.console.log("  ULModuleUserData.requestDownloadUserData fail", t), ULSdkManager.getInstance().response(ULConst.CMD_GET_USER_DATA_RESULT, {
						code: 0,
						userData: {},
						msg: "读取存档超时"
					})
				}
			})
		}
		onCmdSaveUserData(t) {
			t.stopImmediatePropagation();
			ULConfig.getConfig();
			let e = ULSdkManager.getInstance().channelInfo,
				a = t.data,
				i = e.uuid,
				s = a.userData;
			i ? this.requestUploadUserData(i, s) : ULLog.console.log("ULModuleUserData.onCmdSaveUserData userId not found!")
		}
		onCmdGetUserData(t) {
			t.stopImmediatePropagation();
			ULConfig.getConfig();
			let e = ULSdkManager.getInstance().channelInfo,
				a = (t.data, e.uuid);
			this.requestDownloadUserData(a)
		}
	}
	class ULClipboardManager {
		static getInstance() {
			return this._instance || (this._instance = new ULClipboardManager), this._instance
		}
		getClipboardData(t) {
			if (!(t instanceof Function)) return void ULLog.console.warn("ULClipboardManager.getClipboardData finishCallback not a function");
			ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_GET_CLIPBOARD_DATA, {
				finishCallback: t
			}) || t(null)
		}
		setClipboardData(t, e) {
			if (!(e instanceof Function)) return void ULLog.console.warn("ULClipboardManager.setClipboardData finishCallback not a function");
			ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SET_CLIPBOARD_DATA, {
				data: t,
				finishCallback: e
			}) || e(!1)
		}
		isSupport() {
			return !!ULEventDispatcher.getInstance().dispatchWithReturn(ULConst.CMD_SDK_IS_SUPPORT_CLIPBOARD, {})
		}
	}
	ULClipboardManager._instance = null;
	class ULModuleClipboard extends ULModuleBase {
		constructor() {
			super(...arguments), this.className = "ULModuleClipboard"
		}
		init() {
			super.init(), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SET_CLIPBOARD_DATA, 1, this.onCmdSetClipboardData.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_GET_CLIPBOARD_DATA, 1, this.onCmdGetClipboardData.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SET_VERSION, 1, this.onCmdSetVersion.bind(this))
		}
		onCmdSetClipboardData(t) {
			t.stopImmediatePropagation();
			ULConfig.getConfig();
			let e = t.data,
				a = e.clipboardData,
				i = e.userData;
			ULClipboardManager.getInstance().setClipboardData(a, t => {
				t ? ULSdkManager.getInstance().response(ULConst.CMD_SET_CLIPBOARD_DATA_RESULT, {
					code: 1,
					msg: "保存成功",
					clipboardData: a,
					userData: i
				}) : ULSdkManager.getInstance().response(ULConst.CMD_SET_CLIPBOARD_DATA_RESULT, {
					code: 0,
					msg: "保存失败",
					clipboardData: a,
					userData: i
				})
			})
		}
		onCmdGetClipboardData(t) {
			t.stopImmediatePropagation();
			ULConfig.getConfig();
			let e = t.data.userData;
			ULClipboardManager.getInstance().getClipboardData(t => {
				t ? ULSdkManager.getInstance().response(ULConst.CMD_GET_CLIPBOARD_DATA_RESULT, {
					code: 1,
					msg: "获取成功",
					clipboardData: t,
					userData: e
				}) : ULSdkManager.getInstance().response(ULConst.CMD_GET_CLIPBOARD_DATA_RESULT, {
					code: 0,
					msg: "获取失败",
					clipboardData: null,
					userData: e
				})
			})
		}
		onCmdSetVersion(t) {
			let e = ULSdkManager.getInstance().channelInfo;
			e.isSupportClipboardData = ULClipboardManager.getInstance().isSupport(), ULLog.console.log(ULTools.format("ULModuleClipboard.onCmdSetVersion mark isSupportClipboardData = %s", e.isSupportClipboardData))
		}
	}
	class ULChannelModuleBase extends ULModuleBase {
		constructor() {
			super(), ULLog.console.log("ULChannelModuleBase-constructor")
		}
		init() {
			super.init(), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_GET_STORAGE, ULConst.PRIORITY_NONE, this.onCmdSdkGetStorage.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_SET_STORAGE, ULConst.PRIORITY_NONE, this.onCmdSdkSetStorage.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_GET_CLIPBOARD_DATA, ULConst.PRIORITY_NONE, this.onCmdSdkGetClipboardData.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_SET_CLIPBOARD_DATA, ULConst.PRIORITY_NONE, this.onCmdSdkSetClipboardData.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_IS_SUPPORT_CLIPBOARD, ULConst.PRIORITY_NONE, this.onCmdSdkIsSupportClipboard.bind(this)), this.genSdkUserId(), ULSdkManager.getInstance().channelInfo._sdkUserId = this.sdkUserId, ULSdkManager.getInstance().channelInfo.isNewUser = this.isNewUser, ULLog.console.log("ULChannelModuleBase.init isNewUser:", this.isNewUser)
		}
		genSdkUserId() {
			let t = ULConfig.getConfig(),
				e = ULTools.format("mUserId_%s", t.s_sdk_megadata_game_id);
			this.isNewUser = !1, this.sdkUserId = ULStorageManager.getInstance().getStorage(e), this.sdkUserId || (this.sdkUserId = ULTools.format("%s_%s_%s", t.s_sdk_cop_game_id, ULTools.createRandomUserId(), t.s_sdk_cop_channel_id), ULStorageManager.getInstance().setStorage(e, this.sdkUserId), this.isNewUser = !0)
		}
		onCmdSdkGetStorage(t) {
			let e = t.data.key;
			t.setReturnValue(this._hook_getStorage(e))
		}
		onCmdSdkSetStorage(t) {
			let e = t.data.key,
				a = t.data.data;
			this._hook_setStorage(e, a), t.stopImmediatePropagation()
		}
		onCmdSdkGetClipboardData(t) {
			let e = t.data.finishCallback;
			this._hook_getClipboardData(e), t.stopImmediatePropagation()
		}
		onCmdSdkSetClipboardData(t) {
			let e = t.data.data,
				a = t.data.finishCallback;
			this._hook_setClipboardData(e, a), t.stopImmediatePropagation()
		}
		onCmdSdkIsSupportClipboard(t) {
			t.data;
			t.setReturnValue(this._hook_isSupportClipboard()), t.stopImmediatePropagation()
		}
	}
	class ULChannelModuleWebmobileBase extends ULChannelModuleBase {
		constructor() {
			super(...arguments), this.className = "ULChannelModuleWebmobileBase"
		}
		_hook_getStorage(t) {
			return localStorage ? localStorage.getItem(t) : null
		}
		_hook_setStorage(t, e) {
			localStorage && localStorage.setItem(t, e)
		}
		_hook_isSupportClipboard() {
			return !1
		}
		_hook_getClipboardData(t) {
			t(null)
		}
		_hook_setClipboardData(t, e) {
			if (!document) return void e(!1);
			ULLog.console.log("webmobile --- copy 2");
			const a = document.createElement("input");
			document.body.appendChild(a), a.value = t, a.focus(), a.select();
			var i = !1;
			try {
				i = document.execCommand("copy")
			} catch (t) {
				i = !1
			}
			document.body.removeChild(a), e(i)
		}
	}
	class ULAdvBase extends ULModuleBase {
		constructor() {
			super(), this._initState = !1, this.onInitModule()
		}
		get initState() {
			return this._initState
		}
		set initState(t) {
			this._initState = t
		}
	}
	class ULAdvFaceBook extends ULAdvBase {
		constructor() {
			super(), this.className = "ULAdvFaceBook"
		}
		onInitModule() {
			this.initState = !0, this.notifyInitState(this.initState)
		}
		notifyInitState(t) {
			let e = ULSdkManager.getInstance().advManager.getAdvObjectsByName("ULAdvFaceBook");
			if (e)
				for (const a of e) a.receiveMainClassInitState(t)
		}
		initAdv() {}
	}
	ULAdvFaceBook.NORMAL_ADVERTISER = "ULAdvFaceBook";
	class ULAdvObjectBase extends ULModuleBase {
		constructor(t, e, a) {
			super(), this._preLoadState = ULConst.ADV_PRELOAD_STATE_NOAD, this.onLoadFailErr = {
				code: "",
				msg: ""
			}, this._statisticsAdvertiser = "", this._statisticsType = "", this.advKey_2_lastRequestTime = {}, this._supportLoadType = [], this._loadType = void 0, this.isReportLoading = !1, this.isDispose = !1, this._arg = t, this._advType = e, this._advKey = a
		}
		onDisposeModule() {
			super.onDisposeModule(), this.isDispose = !0, ULLog.console.log("ULAdvObjectBase-onDisposeModule arg:", this.arg)
		}
		get arg() {
			return this._arg
		}
		get advKey() {
			return this._advKey
		}
		get preLoadState() {
			return this._preLoadState
		}
		set preLoadState(t) {
			this._preLoadState != t && (this._preLoadState = t, ULSdkManager.getInstance().advManager.onAdvObjectPreloadStateChanged(this.advKey))
		}
		get advType() {
			return this._advType
		}
		get isOpened() {
			return this._isOpened
		}
		set isOpened(t) {
			this._isOpened = t
		}
		get showData() {
			return this._mShowData
		}
		set showData(t) {
			this._mShowData = t
		}
		getMainClassNameString() {
			return this.getMainClassName()
		}
		receiveMainClassInitState(t) {
			this.receiveInitState(t)
		}
		preLoadAdv() {
			this.onLoadFailErr.code = "", this.onLoadFailErr.msg = "", this.preLoadState = ULConst.ADV_PRELOAD_STATE_LOADING, ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleRequest(this.advKey);
			let t = ULSdkManager.getInstance().advManager.getRcdByAdvKey(this.advKey);
			if (t) {
				let e = this.advKey_2_lastRequestTime[this.advKey],
					a = (new Date).valueOf();
				if (e) {
					if (a - e < t) return console.warn(`${this.className}-preLoadAdv:模块[ + ${this.advKey} + ]in cd`), this.preLoadState = ULConst.ADV_PRELOAD_STATE_NOAD, void this.reLoadAdv();
					this.advKey_2_lastRequestTime[this.advKey] = a
				} else this.advKey_2_lastRequestTime[this.advKey] = a
			}
			this.loadAdv()
		}
		reLoadAdv() {
			ULTimer.callLater(ULSdkManager.getInstance().advManager.getAdvReloadTime() / 1e3, () => {
				this.isDispose || this.preLoadAdv()
			})
		}
		advSkip(t, e) {
			ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleSkip(this.advKey, e, t)
		}
		get statisticsAdvertiser() {
			return this._statisticsAdvertiser
		}
		set statisticsAdvertiser(t) {
			this._statisticsAdvertiser = t
		}
		get statisticsType() {
			return this._statisticsType
		}
		set statisticsType(t) {
			this._statisticsType = t
		}
		set setSupportLoadType(t) {
			this._supportLoadType = t
		}
		get getSupportLoadType() {
			return this._supportLoadType
		}
		set setLoadType(t) {
			null != t && (this._loadType = t)
		}
		get getLoadType() {
			return this._loadType
		}
	}
	class ULAdvNativeObjectBase extends ULAdvObjectBase {
		constructor(t, e, a) {
			super(t, e, a), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_CLICK_NATIVE_ADV, ULConst.PRIORITY_NONE, this.clickNativeAdv.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_CLOSE_NATIVE_ADV, ULConst.PRIORITY_NONE, this.closeNativeAdv.bind(this))
		}
		get nativeShowState() {
			return this._nativeShowState
		}
		set nativeShowState(t) {
			this._nativeShowState = t
		}
		get nativeData() {
			return this._nativeData
		}
		set nativeData(t) {
			this._nativeData = t
		}
	}
	const SYMBOL = {
		"*": {
			order: 3,
			argCount: 2,
			handler: (t, e) => t * e
		},
		"/": {
			order: 3,
			argCount: 2,
			handler: (t, e) => t / e
		},
		"+": {
			order: 2,
			argCount: 2,
			handler: (t, e) => Number(t) + Number(e)
		},
		"-": {
			order: 2,
			argCount: 2,
			handler: (t, e) => t - e
		},
		">=": {
			order: 1,
			argCount: 2,
			handler: (t, e) => t >= e
		},
		">": {
			order: 1,
			argCount: 2,
			handler: (t, e) => t > e
		},
		"<=": {
			order: 1,
			argCount: 2,
			handler: (t, e) => t <= e
		},
		"<": {
			order: 1,
			argCount: 2,
			handler: (t, e) => t < e
		},
		"==": {
			order: 0,
			argCount: 2,
			handler: (t, e) => t == e
		},
		"!=": {
			order: 0,
			argCount: 2,
			handler: (t, e) => t != e
		},
		"&&": {
			order: -1,
			argCount: 2,
			handler: (t, e) => t && e
		},
		"||": {
			order: -1,
			argCount: 2,
			handler: (t, e) => t || e
		}
	};
	let SYMBOLKeysDic = {};
	Object.keys(SYMBOL).forEach(t => {
		SYMBOLKeysDic[t.length] = !0
	});
	let SYMBOLKeys = Object.keys(SYMBOLKeysDic).map(t => Number(t)).sort((t, e) => e - t);
	class ULAdvExpManager {
		constructor() {
			this.availableExpKeyArray = [], this.updateValue = 10
		}
		static getInstance() {
			return null == this.instance && (this.instance = new ULAdvExpManager, this.instance.addListern()), this.instance
		}
		get expValueCache() {
			if (!this._expValueCache) {
				let t, e = this._getRecordKey(),
					a = ULStorageManager.getInstance().getStorage(e) || "{}";
				try {
					t = JSON.parse(a)
				} catch (e) {
					t = {}
				}
				for (const e in t) {
					this.getKeyTimeString(e) != t[e].exp_time && delete t[e]
				}
				this._expValueCache = t
			}
			return this._expValueCache
		}
		addListern() {
			ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_PAUSE, ULConst.PRIORITY_NONE, this.onCmdSdkOnGamePause.bind(this))
		}
		onCmdSdkOnGamePause(t) {
			this.saveStoreValue()
		}
		static updateExpKeys(t) {
			ULAdvExpManager.getInstance().availableExpKeyArray = t.slice(0)
		}
		static calcExp(t) {
			return ULLog.console.log("ULAdvExpManager calcExp:", t), ULAdvExpManager.getInstance().calcExpResults(t)
		}
		static updateExpValue(t) {
			ULAdvExpManager.getInstance().setStoreValue(t)
		}
		trimCalcExp(t) {
			let e = (t = t.replace(/\s/g, "")).split(""),
				a = "",
				i = [],
				s = [],
				n = 0,
				o = "";
			for (; e.length;) {
				let t = e.pop();
				switch (t) {
					case "(":
						if (o = t + o, 0 == --n) {
							o = o.substring(1, o.length - 1), i = i.concat(this.trimCalcExp(o).reverse()), o = "";
							continue
						}
						break;
					case ")":
						n++, o = t + o;
						break;
					default: {
						if (0 != n) {
							o = t + o;
							continue
						}
						let r = null;
						for (let a = 0; a < SYMBOLKeys.length; a++) {
							let i = SYMBOLKeys[a] - 1;
							if (e.length > i) {
								let a = e.slice(e.length - i, e.length) + t;
								if (SYMBOL[a]) {
									t = a, r = SYMBOL[a], e = e.slice(0, e.length - i);
									break
								}
							}
						}
						if (r) {
							if (a.length && (i.push(a), a = ""), s.length)
								for (let t = s.length - 1; t >= 0; t--) {
									let t = s.pop(),
										e = SYMBOL[t];
									if (!(e && e.order > r.order)) {
										s.push(t);
										break
									}
									i.push(t)
								}
							s.push(t);
							continue
						}
						a = t + a
					}
				}
			}
			return a.length && (i.push(a), a = ""), i = (i = i.filter((t, e, a) => "" != t)).concat(s.reverse()).reverse()
		}
		calcExpResults(t) {
			try {
				let e = this.trimCalcExp(t),
					a = [];
				for (; e.length;) {
					let t = e.pop(),
						i = SYMBOL[t];
					if (i) {
						let t = a.pop(),
							e = a.pop(),
							s = i.handler(t, e);
						a.push(s)
					} else {
						let e = this.getCalcExpValue(t);
						a.push(e)
					}
				}
				return ULLog.console.log("ULAdvExpManager calcExpResults:", a[0] || !0), a[0] || !0
			} catch (e) {
				return console.warn("ULAdvExpManager exp规则错误：", t), !1
			}
		}
		_getRecordKey() {
			let t = ULConfig.getConfig();
			return ULTools.format("ULAdvExpManager_record_%d", t.s_sdk_megadata_game_id)
		}
		getCalcExpValue(t) {
			return "string" == typeof t && -1 != this.availableExpKeyArray.indexOf(t) ? this.getStoreValue(t) : t
		}
		getStoreValue(t) {
			let e = this.expValueCache[t];
			if (!e) return 0;
			let a = this.getKeyTimeString(t);
			return a != e.exp_time && (e.exp_time = a, e.exp_value = 0), e.exp_value
		}
		setStoreValue(t) {
			if ("string" != typeof t || -1 == this.availableExpKeyArray.indexOf(t)) return;
			let e = this.getKeyTimeString(t),
				a = this.expValueCache[t];
			a ? e != a.exp_time ? (a.exp_time = e, a.exp_value = 1) : a.exp_value += 1 : (a = {
				exp_name: t,
				exp_time: e,
				exp_value: 1
			}, this.expValueCache[t] = a), this.updateValue--, this.updateValue <= 0 && (this.updateValue = 10, this.saveStoreValue())
		}
		saveStoreValue() {
			let t = this._getRecordKey();
			ULStorageManager.getInstance().setStorage(t, JSON.stringify(this.expValueCache))
		}
		getKeyTimeString(t) {
			let e = ULTools.formatDate(new Date, "yyyyMMdd");
			switch (t.substr(0, 1)) {
				case "d":
					e = ULTools.formatDate(new Date, "yyyyMMdd");
					break;
				case "w":
					let a = new Date,
						i = a.getDay() || 7,
						s = new Date(a.getFullYear(), a.getMonth(), a.getDate() + 1 - i);
					e = ULTools.formatDate(s, "yyyyMMdd");
					break;
				case "m":
					e = ULTools.formatDate(new Date, "yyyyMM");
					break;
				case "y":
					e = ULTools.formatDate(new Date, "yyyy")
			}
			return e
		}
	}
	ULAdvExpManager.instance = null;
	class ULAdvSlot {
		constructor(t, e, a, i) {
			this.advId = t, this.schemes = e, this._subAids = a, this._rcd = i
		}
		refreshValidAdvKeys() {
			let t = this.getValidSchemes();
			if (t && 0 != t.length) {
				this.validAdvKeys = [];
				for (let e = 0, a = t.length; e < a; e++) {
					let a = t[e],
						i = this.getValidTemplates(a);
					if (i && 0 != i.length)
						for (const t of i) {
							let e = t.templateId,
								a = ULSdkManager.getInstance().advManager.getAdvKeysByTemplateId(e);
							if (a && 0 != a.length)
								for (const t of a) - 1 == this.validAdvKeys.indexOf(t) && this.validAdvKeys.push(t)
						}
				}
			}
		}
		set openingInfo(t) {
			this._openingInfo = t
		}
		get openingInfo() {
			return this._openingInfo
		}
		get preLoadState() {
			return this._preLoadState
		}
		set preLoadState(t) {
			this._preLoadState = t, ULSdkManager.getInstance().advManager.onAdvSlotPreloadStateChanged(this.advId)
		}
		get rcd() {
			return this._rcd
		}
		get subAids() {
			return this._subAids
		}
		set showTid(t) {
			this._showTid = t
		}
		get showTid() {
			return this._showTid
		}
		openAdv(t, e) {
			let a = {
				data: e,
				requestSerialNum: t
			};
			this.openingInfo = a;
			let i = this.getShowScheme();
			if (!i) return console.warn("ULAdvSlot-openAdv:广告位[" + this.advId + "]未获取到有效策略"), this.openingInfo = null, void ULSdkManager.getInstance().advManager.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, {
				code: "",
				msg: `广告位[${this.advId}]未获取到有效策略`
			});
			let s = this.getValidTemplates(i);
			if (!s || 0 == s.length) return console.warn("ULAdvSlot-openAdv:广告位[" + this.advId + "]未获取到可用模板"), this.openingInfo = null, void ULSdkManager.getInstance().advManager.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, {
				code: "",
				msg: `广告位[${this.advId}]未获取到可用模板`
			});
			ULLog.console.log("ULAdvSlot-openAdv:广告位[" + this.advId + "]当前展示策略：" + JSON.stringify(i)), this.openingInfo.scheme = i;
			let n = [],
				o = [];
			for (let t = 0; t < s.length; t++) {
				let e = s[t].templateId,
					a = 0,
					r = i.tids,
					l = i.tidWeights;
				for (let t = 0; t < r.length; t++)
					if (e == r[t].toString()) {
						a = Number(l[t] || 0), n.push(e), o.push(a);
						break
					}
			}
			this.openingInfo.validTemplateIdArray = n, this.openingInfo.validTemplateWeightArray = o, this.showNextAdv(e)
		}
		showNextAdv(t, e) {
			let a = this.openingInfo.validTemplateIdArray,
				i = this.openingInfo.validTemplateWeightArray,
				s = ULTools.calcWheelTargetByArray(i, ULConst.ADV_MUST_DEFAULT_WEIGHT);
			if (null == s) {
				console.warn("ULAdvSlot-showNextAdv:广告位[" + this.advId + "]无有效模板展示"), this.openingInfo = null;
				let a = {
					code: "",
					msg: `广告位[${this.advId}]无有效模板展示`
				};
				return void ULSdkManager.getInstance().advManager.responseOpenAdvResult(t, ULConst.ADV_RESULT_CODE_FAILED, e || a)
			}
			let n = a[s];
			this.openingInfo.tid = n, this.showTid = n, a.splice(s, 1), this.openingInfo.validTemplateIdArray = a, i.splice(s, 1), this.openingInfo.validTemplateWeightArray = i;
			let o = ULSdkManager.getInstance().advManager.getAdvTypeByTemplateId(n),
				r = ULSdkManager.getInstance().advManager.getLaunchCdByType(o);
			if (ULTools.time() - ULSdkManager.getInstance().advManager.sdkInitTime < r / 1e3) return ULLog.console.log(`ULAdvSlot-showNextAdv:广告${o}处于启动请求cd中`), void this.showNextAdv(t);
			let l = ULSdkManager.getInstance().advManager.getAdvTypeCd(o);
			if (l > 0) {
				let e = ULSdkManager.getInstance().advManager.getAdvTypeLastTriggerTimeLog()[o] || 0,
					a = ULTools.time() - e;
				if (ULLog.console.log(ULTools.format("ULAdvSlot-showNextAdv:检查广告类型cd。上次播放间隔%d秒，cd%d秒", a, l / 1e3)), a <= l / 1e3) return ULLog.console.log(ULTools.format("ULAdvSlot-showNextAdv:广告类型[%s]cd中，请%d后再试", o, l / 1e3 - a)), void this.showNextAdv(t)
			}
			let c = ULSdkManager.getInstance().advManager.getAdvTypeDailyLimit(o);
			if (c > 0) {
				let e = ULSdkManager.getInstance().advManager.getAdvTypeDailyCountLog()[o] || 0;
				if (ULLog.console.log(ULTools.format("检查广告日限。今日已播放%d次，日限制%d次", e, c)), e >= c) return ULLog.console.log(ULTools.format("广告类型[%s]今日已播放%d次，限制%d次。无法播放。", o, e, c)), void this.showNextAdv(t)
			}
			if (ULSdkManager.getInstance().advManager.isAdvTypeOpened(o)) return console.warn("ULAdvSlot-showNextAdv:一个广告类型，同一时间只允许启动一个广告"), void this.showNextAdv(t);
			let h = this.calcValidObjectByTemplateId(n);
			if (null == h) return console.warn("ULAdvSlot-showNextAdv:广告位[" + this.advId + "]当前展示模板【" + n + "】未获取到可用广告对象"), void this.showNextAdv(t);
			if (o == typeExp.video) {
				let e = t.tag || "";
				if (ULSdkManager.getInstance().advManager.isFirstPlayVideo) {
					ULSdkManager.getInstance().advManager.isFirstPlayVideo = !1;
					let t = ULTools.time() - ULSdkManager.getInstance().advManager.sdkInitTime;
					t = Math.floor(t), isNaN(t) && (t = 0), t < ULConfig.getConfig().t_sdk_miniplay_game_adv_point_first_click_event_report_time_limit && ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [ULConfig.getConfig().s_sdk_miniplay_game_adv_point_first_click_event_id, e, t.toString()])
				}
				ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [ULConfig.getConfig().s_sdk_miniplay_game_click_video_event_id, e])
			}
			ULSdkManager.getInstance().advManager.updateAdvIds(o, this.advId);
			let d = h.advKey;
			this.openingInfo.advTemplateItemName = d, ULLog.console.log("ULAdvSlot-showNextAdv:广告位[" + this.advId + "]当前展示模板：" + JSON.stringify(this.openingInfo)), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleShowRequest(d, t), t.type = o;
			let _ = ULSdkManager.getInstance().advManager.getRewardTypeByTemplateId(n);
			t.rewardType = _, h.showAdv(t)
		}
		closeAdv(t) {
			let e = this.openingInfo.advTemplateItemName,
				a = ULSdkManager.getInstance().advManager.getAdvObjectByAdvKey(e);
			a ? a.isOpened ? a.closeAdv(t) : ULSdkManager.getInstance().advManager.responseCloseAdvResult(t, ULConst.ADV_RESULT_CODE_FAILED, "广告未展示") : ULSdkManager.getInstance().advManager.responseCloseAdvResult(t, ULConst.ADV_RESULT_CODE_FAILED, "advobject未找到")
		}
		getShowScheme() {
			let t = this.getValidSchemes();
			if (!t || 0 == t.length) return null;
			let e = [];
			for (const a of t) {
				let t = this.getValidTemplates(a);
				t && t.length > 0 && e.push(a)
			}
			if (0 == e.length) return null;
			let a = new Array(e.length);
			for (let t = 0; t < e.length; t++) a[t] = e[t].weight;
			let i = ULTools.calcWheelTargetByArray(a, ULConst.ADV_MUST_DEFAULT_WEIGHT);
			return null != i ? e[i] : null
		}
		getValidSchemes() {
			let t = [];
			for (let e of this.schemes) {
				if (!ULAdvExpManager.calcExp(e.exp)) continue;
				let a = e.weight;
				a <= 0 || (100 == a ? t.unshift(e) : t.push(e))
			}
			return 0 == t.length ? null : t
		}
		getValidTemplates(t) {
			let e = [],
				a = t.tids;
			if (!a || 0 == a.length) return null;
			for (let i = 0; i < a.length; i++) {
				let s = a[i],
					n = ULSdkManager.getInstance().advManager.getTemplateObjByTid(s);
				n ? ULAdvExpManager.calcExp(n.exp) && (t.tidWeights[i] <= 0 || e.push(n)) : console.warn("ULAdvSlot-getValidTemplates:广告位【" + this.advId + "】对应的模板【" + s + "】不存在模板对象，需检查模板列表中是否配置该模板id")
			}
			return e
		}
		calcValidObjectByTemplateId(t) {
			let e = ULSdkManager.getInstance().advManager.getAdvObjsByTid(t);
			if (!e || 0 == e.length) return null;
			let a, i = [];
			for (const t of e) t.preLoadState == ULConst.ADV_PRELOAD_STATE_READY && i.push(t);
			a = 0 == i.length ? e : i;
			let s = new Array(a.length),
				n = ULSdkManager.getInstance().advManager.getTemplateObjByTid(t);
			if (!n) return null;
			for (let t = 0, e = a.length; t < e; t++) {
				let e = a[t];
				for (let a = 0, i = n.args.length; a < i; a++) {
					let i = n.args[a],
						o = n.moduleName + "_" + i,
						r = n.argWeights[a];
					o == e.advKey && (s[t] = r)
				}
			}
			let o = ULTools.calcWheelTargetByArray(s, ULConst.ADV_MUST_DEFAULT_WEIGHT);
			return null != o ? a[o] : null
		}
		onAdvObjectPreloadStateChanged(t) {
			this.validAdvKeys && -1 != this.validAdvKeys.indexOf(t) && this.refreshPreloadState()
		}
		refreshPreloadState() {
			let t = !1,
				e = !1;
			for (const a of this.validAdvKeys) {
				let i = ULSdkManager.getInstance().advManager.getAdvObjPreloadStateByAdvKey(a);
				i == ULConst.ADV_PRELOAD_STATE_LOADING ? t = !0 : i == ULConst.ADV_PRELOAD_STATE_READY && (e = !0)
			}
			this.preLoadState = e ? ULConst.ADV_PRELOAD_STATE_READY : t ? ULConst.ADV_PRELOAD_STATE_LOADING : ULConst.ADV_PRELOAD_STATE_NOAD
		}
		onAdvObjectLifeCycleSkip(t, e) {
			null != this.openingInfo && (null != this.openingInfo && (this.openingInfo.advTemplateItemName = null), this.showNextAdv(t, e))
		}
		onAdvObjectLifeCycleShow(t, e) {
			let a = ULSdkManager.getInstance().advManager.getRewardTypeByTemplateId(this.showTid);
			ULSdkManager.getInstance().advManager.getAdvTypeByTemplateId(this.showTid);
			ULSdkManager.getInstance().advManager.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, {
				code: "",
				msg: t
			}), rewardType.show == a && ULSdkManager.getInstance().advManager.responseRewardAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, t)
		}
		onAdvObjectLifeCycleClick(t, e) {
			ULSdkManager.getInstance().advManager.responseClickAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, t);
			let a = ULSdkManager.getInstance().advManager.getRewardTypeByTemplateId(this.showTid);
			rewardType.click == a && ULSdkManager.getInstance().advManager.responseRewardAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, t)
		}
		onAdvObjectLifeCycleClose() {
			let t = ULSdkManager.getInstance().advManager.getAdvTypeByTemplateId(this.showTid);
			ULSdkManager.getInstance().advManager.deleteAdvIdOpening(t, this.advId), this.openingInfo = null
		}
		onAdvObjectLifeCycleFail(t, e) {
			ULSdkManager.getInstance().advManager.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, t), this.openingInfo = null
		}
	}
	class ULAdvItem {
		constructor(t, e, a) {
			this.advId = t, this.advType = ULSdkManager.getInstance().advManager.searchAdvTypeByAdvId(t), this.advGroupId = ULSdkManager.getInstance().advManager.searchAdvGroupIdByAdvId(t), this.userData = e, this.tag = a, this.serialId = ULAdvItem.SERIAL_ID++, this.bOpenAdvResultResponsed = !1, this.bClickAdvResultResponsed = !1, this.lifeCycleLog = {}, this.bRequesting = !0, this.statisChannelName = "", this.statisSdkAdvId = "", this.statisNativeAdTitle = ""
		}
		startimeoutTimer(t) {
			this.timeoutTimer || (this.timeoutTimer = new ULTimer(t, 1, () => {
				ULSdkManager.getInstance().advManager.onAdvTimeout(this)
			}), this.timeoutTimer.start())
		}
		stopTimeoutTimer() {
			this.timeoutTimer && (this.timeoutTimer.stop(), this.timeoutTimer = null)
		}
		setLifeCycleLogAllCycle() {
			this.lifeCycleLog = {
				0: !0,
				1: !0,
				2: !0,
				3: !0,
				4: !0,
				5: !0
			}
		}
		set advData(t) {
			this._advData = t
		}
		get advData() {
			return this._advData
		}
	}
	var ULErrorRuleLogic, typeExp, rewardType, countExp, cdExp, dataExp, openResult, oldTypeExp;
	ULAdvItem.SERIAL_ID = 0,
		function(t) {
			t[t.ordinary = 0] = "ordinary", t[t.or = 1] = "or", t[t.with = 2] = "with", t[t.error = 3] = "error"
		}(ULErrorRuleLogic || (ULErrorRuleLogic = {}));
	class ULErrorRuleItem {
		constructor(t = null) {
			this.ruleString = null, this.logic = ULErrorRuleLogic.ordinary, this.rule = null, this.rules = [], this.ruleString = t, t && 0 != t.length ? this.initWithRule(this.ruleString) : this.logic = ULErrorRuleLogic.error
		}
		get isWildcard() {
			return "*" == this.rule
		}
		initWithErrRule() {
			this.logic = ULErrorRuleLogic.error, this.rule = null, this.rules = []
		}
		initWithRule(t) {
			t = t.replace(/\s/g, "");
			let e = 0,
				a = 0,
				i = "";
			for (; t.length;) {
				let s = t.charAt(0),
					n = t.length > 0 ? t.charAt(1) : "";
				switch (t = t.slice(1), s) {
					case "(":
						e++, "" == i.replace(/\(/g, "") && a++;
						break;
					case ")":
						if ("" == t.replace(/\)/g, "") && 0 != a) return i = i.substring(a), this.initWithRule(i);
						a = --e > a ? a : e;
						break;
					case "|":
						if (0 == e) {
							if (s + n == "||") {
								if (this.logic != ULErrorRuleLogic.or && this.logic != ULErrorRuleLogic.ordinary) return this.initWithErrRule();
								this.logic = ULErrorRuleLogic.or, this.rules.push(new ULErrorRuleItem(i)), i = ""
							}
							continue
						}
						break;
					case "&":
						if (0 == e) {
							if (s + n == "&&") {
								if (this.logic != ULErrorRuleLogic.with && this.logic != ULErrorRuleLogic.ordinary) return this.initWithErrRule();
								this.logic = ULErrorRuleLogic.with, this.rules.push(new ULErrorRuleItem(i)), i = ""
							}
							continue
						}
				}
				i += s
			}
			i.length > 0 && (this.logic == ULErrorRuleLogic.ordinary ? this.rule = i : this.rules.push(new ULErrorRuleItem(i)))
		}
		complianceTheRules(t, e = null) {
			switch (this.logic) {
				case ULErrorRuleLogic.ordinary:
					return this.judgmentStandard(t, e);
				case ULErrorRuleLogic.or:
					for (let a of this.rules)
						if (a.complianceTheRules(t, e)) return !0;
					return !1;
				case ULErrorRuleLogic.with:
					for (let a of this.rules)
						if (!a.complianceTheRules(t, e)) return !1;
					return !0
			}
			return !1
		}
		judgmentStandard(key, customData = null) {
			if (null == this.rule) return !1;
			if ("*" == this.rule) return !0;
			if (this.rule == key) return !0;
			if (this.rule.length > 2) {
				let t = this.rule,
					e = t.charAt(0),
					a = t.charAt(this.rule.length - 1);
				if (e + a == "//") {
					t = t.substring(1, t.length - 1);
					var reg = RegExp(t);
					if (reg.exec(key)) return !0
				}
			}
			var patrn = /(?==|!=|>=|>|<|<=)/;
			if (customData && patrn.exec(this.rule)) {
				let trimRule = this.rule.replace("this.", "customData."),
					string = "if (" + trimRule + ") { judge = true } else { judge = false }";
				try {
					var judge = !1;
					return eval(string), judge
				} catch (t) {
					return ULLog.console.log(t), !1
				}
			}
			return !1
		}
	}
	class ULAdvTrimErrorManager {
		static trimErrMessage(t, e) {
			let a = ULConfig.getConfig();
			if (!a.i_sdk_trim_adv_err_switch) return e && ULTools.format("%s %d", ULConst.ADV_FAIL_TIP_NOAD, e.code || e.errCode) || t || ULTools.format(ULConst.ADV_FAIL_TIP_NOAD, ULConst.ADV_ERR_CODE_UNKNOWN);
			let i = a.t_sdk_trim_adv_err_object || {};
			if (!e) return t || ULTools.format(ULConst.ADV_FAIL_TIP_NOAD, ULConst.ADV_ERR_CODE_UNKNOWN);
			let s = {};
			s[ULSdkManager.getInstance().channelInfo.channelName || ""] = e;
			let n = null;
			try {
				n = this.getCustomMsgFromRules(i, s)
			} catch (e) {
				ULLog.console.error("ULAdvTrimErrorManager:错误整理报错-------------请检查配置"), ULLog.console.error("ULAdvTrimErrorManager:errJson：", i), ULLog.console.error("ULAdvTrimErrorManager:channelNameErrJson：", s)
			}
			return n && (n = ULTools.format("%s %d", n, e.code || e.errCode)), n || t || ULTools.format(ULConst.ADV_FAIL_TIP_NOAD, ULConst.ADV_ERR_CODE_UNKNOWN)
		}
		static getCustomMsgFromRules(t, e) {
			let a = [],
				i = [];
			if ("object" != typeof t) return "string" == typeof t ? t : "";
			if (a = Object.keys(t), !e) return "";
			"object" == typeof e ? i = Object.keys(e) : i.push(e);
			let s = a.length;
			for (; a.length;) {
				let n = a.shift();
				s--;
				let o = this.trimRules[n];
				if (o || (o = new ULErrorRuleItem(n), this.trimRules[n] = o), o.isWildcard && s > 0) {
					a.join(n);
					continue
				}
				let r = t[n];
				for (let t of i)
					if (o.complianceTheRules(t, e)) {
						let a = e[t] || null,
							i = this.getCustomMsgFromRules(r, a);
						if (i) return i
					}
			}
			return ""
		}
	}
	ULAdvTrimErrorManager.trimRules = {},
		function(t) {
			t.all = "all", t.splash = "splash", t.inter = "inter", t.video = "video", t.custom = "custom", t.interVideo = "interVideo", t.banner = "banner", t.embed = "embed", t.url = "url", t.paster = "paster"
		}(typeExp || (typeExp = {})),
		function(t) {
			t.show = "show", t.click = "click"
		}(rewardType || (rewardType = {})),
		function(t) {
			t.rc = "rc", t.sc = "sc", t.cc = "cc", t.fc = "fc", t.mcc = "mcc"
		}(countExp || (countExp = {})),
		function(t) {
			t.rcd = "rcd", t.scd = "scd", t.ecd = "ecd"
		}(cdExp || (cdExp = {})),
		function(t) {
			t.nil = "nil", t.d = "d", t.w = "w", t.m = "m", t.y = "y"
		}(dataExp || (dataExp = {})),
		function(t) {
			t.totalAdvRequest = "totalAdvRequest", t.branchAdvRequest = "branchAdvRequest", t.success = "success", t.failed = "failed", t.clicked = "clicked", t.playStart = "playStart", t.playCompletion = "playCompletion", t.loadAdvRequest = "loadAdvRequest", t.close = "close", t.hide = "hide"
		}(openResult || (openResult = {})),
		function(t) {
			t.interstitial = "interstitial", t.embedded = "embedded", t.fullscreen = "fullscreen"
		}(oldTypeExp || (oldTypeExp = {}));
	class ULAdvManager {
		constructor() {
			this.systemAdvExpKeyArray = [], this.advExpKeyArray = [], this.advRequestSerialNum = 0, this.advId_2_advSlot = {}, this.templateId_2_advTemplate = {}, this.templateId_2_advTemplateItemArray = {}, this.advKey_2_templateIdArray = {}, this.moduleName_2_argsArray = {}, this.moduleName_2_advIdsArray = {}, this.templateId_2_moduleName = {}, this.moduleName_2_advTemplate = {}, this.mainName_2_advObjectArray = {}, this.templateId_2_advObjectArray = {}, this.advType_2_advObjectArray = {}, this.moduleName_2_templateIdsArray = {}, this.logKey_2_countNum = {}, this.advKey_2_advIdArray = {}, this.tid_2_advKeyArray = {}, this.advId_2_tidArray = {}, this.nativeType_2_advObjectArray = {}, this.advKey_2_advObject = {}, this.ADV_RELOAD_DEFAULT_TIME = 15e3, this.ADV_RELOAD_TIME = 15e3, this.bannerStartShowTime = 0, this.advKey_2_rcd = {}, this.advId_2_lastRequestTime = {}, this.adMainName_2_obj = {}, this.type_2_advIds = {}, this.exp_2_result = {}, this.advTypeLastTriggerTimeLog = {}
		}
		static getInstance() {
			return null == this.instance && (this.instance = new ULAdvManager), this.instance
		}
		get isFirstPlayVideo() {
			return this._isFirstPlayVideo
		}
		set isFirstPlayVideo(t) {
			this._isFirstPlayVideo = t
		}
		init() {
			this.loadRecord(), this.initAdvExpKey(), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, ULConst.PRIORITY_NONE, this.onCmdSdkCollectionModuleCheckerConfig.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_OPEN_ADV, ULConst.PRIORITY_NONE, this.onCmdOpenAdv.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_CLOSE_ADV, ULConst.PRIORITY_NONE, this.onCmdCloseAdv.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_CLOSE_NATIVE_ADV, ULConst.PRIORITY_NONE, this.onCmdCloseNativeAdv.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_CLICK_NATIVE_ADV, ULConst.PRIORITY_NONE, this.onCmdClickNativeAdv.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_RESUME, ULConst.PRIORITY_NONE, this.onCmdSdkOnGameResume.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_PAUSE, ULConst.PRIORITY_NONE, this.onCmdSdkOnGamePause.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_GET_ADV_STATE, ULConst.PRIORITY_NONE, this.onCmdGetAdvState.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_COP_CHANGED, 1, this.onCopChanged.bind(this)), this._sdkInitTime = ULTools.time(), this.isFirstPlayVideo = !0
		}
		loadRecord() {
			let t, e = ULStorageManager.getInstance().getStorage(this._getRecordKey()) || "{}";
			try {
				t = JSON.parse(e)
			} catch (e) {
				t = {}
			}
			this.advTypeDailyCountLog = t.advTypeDailyCountLog || {}, this.advTypeDailyRefreshTime = t.advTypeDailyRefreshTime || 0, this.tryDailyRefresh()
		}
		saveRecord() {
			let t, e = ULStorageManager.getInstance().getStorage(this._getRecordKey()) || "{}";
			try {
				t = JSON.parse(e)
			} catch (e) {
				t = {}
			}
			t.advTypeDailyCountLog = this.advTypeDailyCountLog || {}, t.advTypeDailyRefreshTime = this.advTypeDailyRefreshTime || 0, ULStorageManager.getInstance().setStorage(this._getRecordKey(), JSON.stringify(t))
		}
		_getRecordKey() {
			let t = ULConfig.getConfig();
			return ULTools.format("ULAdvManager_record_%d", t.s_sdk_megadata_game_id)
		}
		tryDailyRefresh() {
			ULTools.isOneDay(this.advTypeDailyRefreshTime, ULTools.time()) || (ULLog.console.log("ULAdvManager-tryDailyRefresh 进行日常刷新"), this.advTypeDailyCountLog = {}, this.advTypeDailyRefreshTime = ULTools.time(), this.saveRecord())
		}
		searchAdvGroupIdByAdvId(t) {
			let e = ULConfig.getConfig().s_sdk_adv_info,
				a = "";
			return ULTools.forEachMap(e, (e, i) => {
				if (i.group.indexOf(t) >= 0) return a = e, !0
			}), a
		}
		searchAdvTypeByAdvId(t) {
			let e = ULConfig.getConfig().s_sdk_adv_info,
				a = "";
			return ULTools.forEachMap(e, (e, i) => {
				if (i.group.indexOf(t) >= 0) return a = i.type, !0
			}), a
		}
		onCopChanged(t) {
			try {
				this.initAdv()
			} catch (t) {
				ULLog.console.error("ULAdvManager.onCopChanged err:", t)
			}
		}
		onCmdSdkOnGameResume(t) {
			ULLog.console.log("ULAdvManager-onCmdSdkOnGameResume"), this.getAdvObjectOpeningByAdvType(typeExp.banner) && (this.bannerStartShowTime = ULTools.time())
		}
		onCmdSdkOnGamePause(t) {
			let e, a = this.getAdvObjectOpeningByAdvType(typeExp.banner);
			a && (a instanceof ULAdvNativeObjectBase && (e = a.nativeData), this.reportBannerShowTime(a.advKey, a.showData, e))
		}
		onCmdSdkCollectionModuleCheckerConfig(t) {
			let e = t.getReturnValue() || [],
				a = ["interstitial", "banner", "embedded", "video", "url", "paster"];
			e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "广告cd限制:"
			}), e.push({
				type: "newLine"
			});
			for (let t = 0; t < a.length; t++) {
				const i = a[t];
				let s = "未配置CD",
					n = "未触发",
					o = this.getAdvTypeCd(i);
				o > 0 && (s = ULTools.format("CD%d秒", o / 1e3));
				let r = this.advTypeLastTriggerTimeLog[i] || 0;
				r > 0 && (n = ULTools.formatDate(new Date(1e3 * r), "触发时间：HH:mm:ss")), e.push({
					type: "label",
					text: ULTools.format("%s: %s %s", i, s, n)
				}), e.push({
					type: "newLine"
				})
			}
			e.push({
				type: "label",
				text: "广告次数限制:"
			}), e.push({
				type: "newLine"
			});
			for (let t = 0; t < a.length; t++) {
				const i = a[t];
				let s = "未配置次数限制",
					n = "未触发",
					o = this.getAdvTypeDailyLimit(i);
				o > 0 && (s = ULTools.format("日限制%d次", o));
				let r = this.advTypeDailyCountLog[i] || 0;
				r > 0 && (n = ULTools.format("今日已触发%d次", r)), e.push({
					type: "label",
					text: ULTools.format("%s: %s %s", i, s, n)
				}), e.push({
					type: "newLine"
				})
			}
			t.setReturnValue(e, !0)
		}
		initAdv() {
			let t = ULConfig.getConfig();
			this.ADV_RELOAD_TIME = t.i_sdk_adv_reload_time || this.ADV_RELOAD_DEFAULT_TIME;
			let e = t.o_sdk_adv_show_list;
			if (!e || "string" != typeof e) return void console.warn("ULAdvManager-initAdv:adv show list error");
			let a = JSON.parse(e),
				i = a.templates;
			if (!i || "object" != typeof i) return void console.warn("ULAdvManager-initAdv:templates error");
			let s = a.advSlots;
			if (!s || "object" != typeof s) return void console.warn("ULAdvManager-initAdv:advSlots error");
			let n = this.advKey_2_advObject;
			this.advKey_2_advObject = {}, this.advId_2_advSlot = {}, this.templateId_2_advTemplate = {}, this.templateId_2_advTemplateItemArray = {}, this.advKey_2_templateIdArray = {}, this.templateId_2_moduleName = {}, this.mainName_2_advObjectArray = {}, this.templateId_2_advObjectArray = {}, this.advType_2_advObjectArray = {}, this.moduleName_2_templateIdsArray = {}, this.logKey_2_countNum = {}, this.advKey_2_advIdArray = {}, this.tid_2_advKeyArray = {}, this.advId_2_tidArray = {}, this.nativeType_2_advObjectArray = {}, this.advKey_2_rcd = {}, this.updateAdvExpKey(i);
			let o = new Array;
			for (const t in i) {
				let e = t,
					a = i[e];
				if ("object" != typeof a) {
					console.warn(`ULAdvManager-initAdv:模板【 ${e} 】格式配置非法`);
					continue
				}
				let s = a.moduleName;
				if (!s || "string" != typeof s) {
					console.warn(`ULAdvManager-initAdv:模板【 ${e} 】缺少必配字段moduleName`);
					continue
				}
				let n = a.rewardType;
				if (!n || "string" != typeof s) {
					console.warn(`ULAdvManager-initAdv:模板【 ${e} 】缺少必配字段rewardType`);
					continue
				}
				let r = a.args;
				if (!(r && r instanceof Array)) {
					console.warn(`ULAdvManager-initAdv:模板【 ${e} 】缺少必配字段args，或格式非法`);
					continue
				}
				if (0 == r.length) {
					console.warn(`ULAdvManager-initAdv:模板【 ${e} 】必配字段args长度不能为0`);
					continue
				}
				let l = a.exp || "",
					c = a.argWeights || [],
					h = a.loadTypes || [],
					d = a.rcd;
				"number" != typeof d && (d = 0, console.warn(`ULAdvManager-initAdv:模板【 ${e} 】字段rcd未配置或格式错误，写入默认值0`));
				let _ = this.moduleName_2_templateIdsArray[s];
				_ ? -1 == _.indexOf(e) && _.push(e) : ((_ = []).push(e), this.moduleName_2_templateIdsArray[s] = _), this.templateId_2_moduleName[e] || (this.templateId_2_moduleName[e] = s), -1 == o.indexOf(e) && o.push(e);
				let g = [],
					u = [];
				for (let t = 0, a = r.length; t < a; t++) {
					let a = r[t];
					"string" != typeof a && (console.warn(`ULAdvManager-initAdv:模板【 ${e} 】字段args中的参数${a}，为非字符串类型`), a = a.toString());
					let i = 0;
					i = 0 == c.length ? ULConst.ADV_RANDOM_DEFAULT_WEIGHT : c[t], g.push(i);
					let o = void 0;
					try {
						(o = h[t]) && "number" != typeof o && (o = Number(o))
					} catch (t) {}
					u.push(o);
					let _ = {
							templateId: e,
							moduleName: s,
							rewardType: n,
							arg: a,
							argWeight: i,
							exp: l,
							loadType: o
						},
						m = this.templateId_2_advTemplateItemArray[e];
					if (m) {
						let t = !1;
						for (const i of m) {
							i.templateId + "_" + i.arg == e + "_" + a && (t = !0)
						}
						t || m.push(_)
					} else(m = []).push(_), this.templateId_2_advTemplateItemArray[e] = m;
					let p = ULTools.format("%s%s%s", s, "_", a),
						S = this.advKey_2_templateIdArray[p];
					S ? -1 == S.indexOf(e) && S.push(e) : ((S = []).push(e), this.advKey_2_templateIdArray[p] = S);
					let b = this.tid_2_advKeyArray[e];
					b ? -1 == b.indexOf(p) && b.push(p) : ((b = []).push(p), this.tid_2_advKeyArray[e] = b);
					let L, I = this.advKey_2_rcd[p];
					L = null != I ? Math.min(d, I) : d, this.advKey_2_rcd[p] = L
				}
				let m = {
					templateId: e,
					moduleName: s,
					rewardType: n,
					exp: l,
					args: r,
					argWeights: g,
					rcd: d,
					loadTypes: u
				};
				this.templateId_2_advTemplate[e] || (this.templateId_2_advTemplate[e] = m)
			}
			let r = [];
			for (const t in s) {
				let e = t,
					a = s[e];
				if ("object" != typeof a) {
					console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】格式配置非法`);
					continue
				}
				let i = a.schemes;
				if (!i) {
					console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】缺少必配字段schemes,或该字段格式非法`);
					continue
				}
				let n = a.subAids || [],
					o = a.rcd;
				"number" != typeof o && (o = 0, console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】字段rcd未配置或格式错误，写入默认值0`));
				let l = [];
				for (let t = 0, a = i.length; t < a; t++) {
					const a = i[t];
					let s = a.tids;
					if (!s) {
						console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】第【 ${t+1} 】条策略缺少必配字段tids,或该字段格式非法`);
						continue
					}
					if (0 == s.length) {
						console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】第【 ${t+1} 】条策略必配字段tids长度不能为0`);
						continue
					}
					let o = a.tidWeights || [],
						c = [];
					for (let a = 0, i = s.length; a < i; a++) {
						let i = s[a],
							l = 0;
						if (0 == o.length) console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】第【 ${t+1} 】条策略第【 ${a+1} 】个模板权重未配置，写入默认值${ULConst.ADV_MUST_DEFAULT_WEIGHT}`), l = ULConst.ADV_MUST_DEFAULT_WEIGHT;
						else {
							let i = o[a];
							"number" != typeof i ? (console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】第【 ${t+1} 】条策略第【 ${a+1} 】个模板权重格式异常，写入默认值${ULConst.ADV_MUST_DEFAULT_WEIGHT}`), l = ULConst.ADV_MUST_DEFAULT_WEIGHT) : l = i
						}
						c.push(l), -1 == r.indexOf(i) && r.push(i);
						let h = this.advId_2_tidArray[e];
						if (h ? -1 == h.indexOf(i) && h.push(i) : ((h = []).push(i), this.advId_2_tidArray[e] = h), n.length > 0)
							for (const t of n) {
								let e = this.advId_2_tidArray[t];
								e ? -1 == e.indexOf(i) && e.push(i) : ((e = []).push(i), this.advId_2_tidArray[t] = e)
							}
					}
					let h = a.exp || "",
						d = a.weight;
					"number" != typeof d && (d = ULConst.ADV_RANDOM_DEFAULT_WEIGHT, console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】第【 ${t+1} 】条策略字段weight格式异常，写入默认值${ULConst.ADV_RANDOM_DEFAULT_WEIGHT}`));
					let _ = {
						tids: s,
						tidWeights: c,
						exp: h,
						weight: d
					};
					l.push(_)
				}
				let c = new ULAdvSlot(e, l, n, o);
				if (this.advId_2_advSlot[e] || (this.advId_2_advSlot[e] = c), n.length > 0)
					for (const t of n) {
						let a = ULTools.clone(n),
							i = a.indexOf(t);
						i > -1 && a.splice(i, 1), a.push(e);
						let s = new ULAdvSlot(t, l, a, o);
						this.advId_2_advSlot[t] || (this.advId_2_advSlot[t] = s)
					}
			}
			ULTools.forEachMap(this.advId_2_tidArray, (t, e) => {
				for (const a of e) {
					let e = this.tid_2_advKeyArray[a];
					if (e)
						for (const a of e) {
							let e = this.advKey_2_advIdArray[a];
							e ? -1 == e.indexOf(t) && e.push(t) : ((e = []).push(t), this.advKey_2_advIdArray[a] = e)
						}
				}
			});
			let l = [];
			for (const t in this.templateId_2_advTemplateItemArray) {
				let e = this.templateId_2_advTemplateItemArray[t];
				if (-1 == r.indexOf(t)) {
					console.warn("ULAdvManager-initAdv:tid [" + t + "] no advId use");
					continue
				}
				let a, i = this.templateId_2_moduleName[t];
				if (ULTools.forEachMap(ULSdkModuleLoader.getSubAdModuleClassName(), (t, e) => {
						if (e.indexOf(i) >= 0) return a = t, !0
					}), a)
					for (let s = 0, o = e.length; s < o; s++) {
						let o = e[s],
							r = o.moduleName + "_" + o.arg;
						if (n[r]) {
							let t = n[r];
							this.advKey_2_advObject[r] = t, delete n[r]
						}
						if (this.advKey_2_advObject[r]) {
							console.warn("ULAdvManger-initAdv: class " + i + " already init,continue");
							let e = this.advKey_2_advObject[r],
								a = this.templateId_2_advObjectArray[t];
							a ? -1 == a.indexOf(e) && a.push(e) : ((a = []).push(e), this.templateId_2_advObjectArray[t] = a);
							continue
						}
						let c = ULSdkModuleLoader.getObjectByModuleName(a).createSubAdObj(i, o.arg);
						c.setLoadType = o.loadType;
						let h = c.getMainClassNameString(); - 1 == l.indexOf(c) && l.push(c);
						let d = this.mainName_2_advObjectArray[h];
						d ? -1 == d.indexOf(c) && d.push(c) : ((d = []).push(c), this.mainName_2_advObjectArray[h] = d);
						let _ = this.templateId_2_advObjectArray[t];
						if (_ ? -1 == _.indexOf(c) && _.push(c) : ((_ = []).push(c), this.templateId_2_advObjectArray[t] = _), c instanceof ULAdvNativeObjectBase) {
							let t = c.advType,
								e = this.nativeType_2_advObjectArray[t];
							null == e ? ((e = []).push(c), this.nativeType_2_advObjectArray[t] = e) : -1 == e.indexOf(c) && e.push(c)
						}
					} else console.warn("ULAdvManager-initAdv: class " + i + " not found ,continue")
			}
			ULTools.forEachMap(this.advKey_2_advObject, (t, e) => {
				let a = e,
					i = this.advType_2_advObjectArray[a.advType];
				i ? -1 == i.indexOf(a) && i.push(a) : ((i = []).push(a), this.advType_2_advObjectArray[a.advType] = i)
			});
			for (const t in n) {
				n[t].onDisposeModule()
			}
			ULTools.forEachMap(this.advId_2_advSlot, (t, e) => {
				e.refreshValidAdvKeys()
			});
			let c = {};
			for (let t = 0, e = l.length; t < e; t++) {
				let e = l[t],
					a = e.getMainClassNameString();
				ULTools.forEachMap(ULSdkModuleLoader.getSubAdMainClassName(), (t, i) => {
					let s = i;
					if (a == s)
						if (this.adMainName_2_obj[s]) {
							let t = this.adMainName_2_obj[s];
							e.receiveMainClassInitState(t.initState)
						} else if (!c[s]) {
						let e = ULSdkModuleLoader.getObjectByModuleName(t).createMainAdObj();
						c[s] = e
					}
				})
			}
			for (const t in c) this.adMainName_2_obj[t] = c[t];
			ULLog.console.log("ULAdvManager-initAdv-advExpKeyArray:", this.advExpKeyArray), ULLog.console.log("ULAdvManager-initAdv-templateArray:", o), ULLog.console.log("ULAdvManager-initAdv-advId_2_advSlot:", this.advId_2_advSlot), ULLog.console.log("ULAdvManager-initAdv-templateId_2_advTemplate:", this.templateId_2_advTemplate), ULLog.console.log("ULAdvManager-initAdv-templateId_2_advTemplateItemArray:", this.templateId_2_advTemplateItemArray), ULLog.console.log("ULAdvManager-initAdv-advKey_2_templateIdArray:", this.advKey_2_templateIdArray), ULLog.console.log("ULAdvManager-initAdv-templateId_2_moduleName:", this.templateId_2_moduleName), ULLog.console.log("ULAdvManager-initAdv-mainName_2_advObjectArray:", this.mainName_2_advObjectArray), ULLog.console.log("ULAdvManager-initAdv-templateId_2_advObjectArray:", this.templateId_2_advObjectArray), ULLog.console.log("ULAdvManager-initAdv-advType_2_advObjectArray:", this.advType_2_advObjectArray), ULLog.console.log("ULAdvManager-initAdv-moduleName_2_templateIdsArray:", this.moduleName_2_templateIdsArray), ULLog.console.log("ULAdvManager-initAdv-logKey_2_countNum:", this.logKey_2_countNum), ULLog.console.log("ULAdvManager-initAdv-advKey_2_advIdArray:", this.advKey_2_advIdArray), ULLog.console.log("ULAdvManager-initAdv-tid_2_advKeyArray:", this.tid_2_advKeyArray), ULLog.console.log("ULAdvManager-initAdv-advId_2_tidArray:", this.advId_2_tidArray), ULLog.console.log("ULAdvManager-initAdv-nativeType_2_advObjectArray:", this.nativeType_2_advObjectArray), ULLog.console.log("ULAdvManager-initAdv-advKey_2_advObject:", this.advKey_2_advObject), ULLog.console.log("ULAdvManager-initAdv-advKey_2_rcd:", this.advKey_2_rcd)
		}
		getAdvReloadTime() {
			return this.ADV_RELOAD_TIME
		}
		getAdvExpKeyArray() {
			return this.advExpKeyArray
		}
		getLogKeyCountNum() {
			return this.logKey_2_countNum
		}
		initAdvExpKey() {
			let t = new Array;
			for (const e in typeExp) {
				for (const a in countExp) {
					let i = ULTools.format("%s%s%s%s", ULConst.EXP_ADV_TYPE_CONST, e, ULConst.EXP_ADV_POINT_CONST, a); - 1 == t.indexOf(i) && t.push(i)
				}
				for (const a in cdExp) {
					let i = ULTools.format("%s%s%s%s", ULConst.EXP_ADV_TYPE_CONST, e, ULConst.EXP_ADV_POINT_CONST, a); - 1 == t.indexOf(i) && t.push(i)
				}
			}
			for (let e = 0; e < t.length; e++) {
				let a = t[e];
				for (const t in dataExp) {
					let e;
					e = t == dataExp.nil ? a : t + a, -1 == this.systemAdvExpKeyArray.indexOf(e) && this.systemAdvExpKeyArray.push(e)
				}
			}
		}
		updateAdvExpKey(t) {
			this.advExpKeyArray = this.systemAdvExpKeyArray.slice(0);
			let e = new Array;
			for (const a in t) {
				for (const t in countExp) {
					let i = ULTools.format("%s%s%s%s", ULConst.EXP_ADV_TEMPLATE_CONST, a, ULConst.EXP_ADV_POINT_CONST, t); - 1 == e.indexOf(i) && e.push(i)
				}
				for (const t in cdExp) {
					let i = ULTools.format("%s%s%s%s", ULConst.EXP_ADV_TEMPLATE_CONST, a, ULConst.EXP_ADV_POINT_CONST, t); - 1 == e.indexOf(i) && e.push(i)
				}
			}
			for (let t = 0; t < e.length; t++) {
				let a = e[t];
				for (const t in dataExp) {
					let e;
					e = t == dataExp.nil ? a : t + a, -1 == this.advExpKeyArray.indexOf(e) && this.advExpKeyArray.push(e)
				}
			}
			ULAdvExpManager.updateExpKeys(this.advExpKeyArray)
		}
		updateAdvKeyObjMap(t, e) {
			this.advKey_2_advObject[t] = e
		}
		updateAdvIds(t, e) {
			let a = this.type_2_advIds[t];
			a ? -1 == a.indexOf(e) && a.push(e) : ((a = []).push(e), this.type_2_advIds[t] = a)
		}
		deleteAdvIdOpening(t, e) {
			let a = this.type_2_advIds[t];
			a && (a = a.filter(t => t !== e), this.type_2_advIds[t] = a)
		}
		getAdvObjectsByName(t) {
			return this.mainName_2_advObjectArray[t]
		}
		onAdvObjectPreloadStateChanged(t) {
			ULTools.forEachMap(this.advId_2_advSlot, (e, a) => {
				a.onAdvObjectPreloadStateChanged(t)
			})
		}
		onAdvSlotPreloadStateChanged(t) {
			let e = this.advId_2_advSlot[t];
			if (!e) return;
			e.preLoadState
		}
		getTemplateObjByTid(t) {
			return this.templateId_2_advTemplate[t]
		}
		getAdvObjsByTid(t) {
			return this.templateId_2_advObjectArray[t]
		}
		getAdvTypeByTemplateId(t) {
			let e = null,
				a = this.templateId_2_advObjectArray[t];
			return a && a.length > 0 && (e = a[0].advType), e
		}
		isAdvTypeOpened(t) {
			let e = this.advType_2_advObjectArray[t];
			if (e && e.length > 0)
				for (let t = 0; t < e.length; t++) {
					if (e[t].isOpened) return !0
				}
			return !1
		}
		getAdvObjectByAdvKey(t) {
			return this.advKey_2_advObject[t]
		}
		getRcdByAdvKey(t) {
			return this.advKey_2_rcd[t]
		}
		getAdvKeysByTemplateId(t) {
			return this.tid_2_advKeyArray[t]
		}
		getAdvSlotByAdvId(t) {
			return this.advId_2_advSlot[t]
		}
		getAdvObjPreloadStateByAdvKey(t) {
			let e = this.advKey_2_advObject[t];
			return e ? e.preLoadState : ULConst.ADV_PRELOAD_STATE_NOAD
		}
		getRewardTypeByTemplateId(t) {
			let e = this.templateId_2_advTemplate[t];
			return e ? e.rewardType : rewardType.show
		}
		getAdvTypeDailyLimit(t) {
			let e = ULConfig.getConfig(),
				a = 0;
			switch (t) {
				case "interstitial":
					a = e.i_sdk_adv_type_interstitial_daily_limit;
					break;
				case "banner":
					a = e.i_sdk_adv_type_banner_daily_limit;
					break;
				case "embedded":
					a = e.i_sdk_adv_type_embedded_daily_limit;
					break;
				case "video":
					a = e.i_sdk_adv_type_video_daily_limit;
					break;
				case "url":
					a = e.i_sdk_adv_type_url_daily_limit;
					break;
				case "paster":
					a = e.i_sdk_adv_type_paster_daily_limit
			}
			return null == a ? 0 : isNaN(a) ? 0 : a
		}
		getAdvTypeCd(t) {
			let e = ULConfig.getConfig(),
				a = 0;
			switch (t) {
				case typeExp.inter:
					a = e.i_sdk_adv_type_interstitial_cd;
					break;
				case typeExp.banner:
					a = e.i_sdk_adv_type_banner_cd;
					break;
				case typeExp.embed:
					a = e.i_sdk_adv_type_embedded_cd;
					break;
				case typeExp.video:
					a = e.i_sdk_adv_type_video_cd;
					break;
				case typeExp.url:
					a = e.i_sdk_adv_type_url_cd;
					break;
				case typeExp.paster:
					a = e.i_sdk_adv_type_paster_cd
			}
			return null == a ? 0 : isNaN(a) ? 0 : a
		}
		getLaunchCdByType(t) {
			let e = ULConfig.getConfig(),
				a = 0;
			switch (t) {
				case typeExp.inter:
					a = e.i_sdk_adv_inter_launch_cd;
					break;
				case typeExp.banner:
					a = e.i_sdk_adv_banner_launch_cd;
					break;
				case typeExp.embed:
					a = e.i_sdk_adv_embed_launch_cd;
					break;
				case typeExp.video:
					a = e.i_sdk_adv_video_launch_cd;
					break;
				case typeExp.url:
					a = e.i_sdk_adv_url_launch_cd;
					break;
				case typeExp.paster:
					a = e.i_sdk_adv_paster_launch_cd
			}
			return null == a ? 0 : isNaN(a) ? 0 : a
		}
		get sdkInitTime() {
			return this._sdkInitTime
		}
		getAdvTypeLastTriggerTimeLog() {
			return this.advTypeLastTriggerTimeLog
		}
		getAdvTypeDailyCountLog() {
			return this.advTypeDailyCountLog
		}
		getAdvObjectOpeningByAdvType(t) {
			for (let e in this.advType_2_advObjectArray) {
				if (t !== e) continue;
				let a = this.advType_2_advObjectArray[e];
				for (let t of a)
					if (t.isOpened) return t
			}
			return null
		}
		getNewAdvTypeByOld(t) {
			let e = "";
			return t ? (e = t, oldTypeExp.embedded == t ? e = typeExp.embed : oldTypeExp.interstitial == t ? e = typeExp.inter : oldTypeExp.fullscreen == t && (e = typeExp.interVideo), e) : e
		}
		geOldAdvTypeByNew(t) {
			let e = "";
			return t ? (e = t, typeExp.embed == t ? e = oldTypeExp.embedded : typeExp.inter == t ? e = oldTypeExp.interstitial : typeExp.interVideo == t && (e = oldTypeExp.fullscreen), e) : e
		}
		onCmdGetAdvState(t) {
			t.stopImmediatePropagation();
			let e = t.data,
				a = e.userData || "",
				i = e.advIds || [],
				s = {};
			for (const t of i) {
				let e = this.advId_2_advSlot[t];
				e ? s[t] = e.preLoadState : s[t] = ULConst.ADV_PRELOAD_STATE_NOAD
			}
			this.getAdvStateResult(s, a)
		}
		onCmdOpenAdv(t) {
			t.stopImmediatePropagation();
			let e = t.data,
				a = ULConfig.getConfig();
			this.advRequestSerialNum++;
			let i = e.advId || "",
				s = e.userData || "",
				n = e.tag || "",
				o = this.searchAdvTypeByAdvId(i),
				r = this.searchAdvGroupIdByAdvId(i),
				l = new ULAdvItem(i, s, n);
			l.advType = o, l.advGroupId = r, ULSdkManager.getInstance().statisManager.reportAdvTotalRequest(l);
			let c = a.i_sdk_adv_all_launch_cd;
			if (ULTools.time() - this.sdkInitTime < c / 1e3) return ULLog.console.log("ULAdvManager-onCmdOpenAdv:广告处于启动请求cd中"), void this.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, {
				code: "",
				msg: "in all adv launch cd"
			});
			let h = this.advId_2_advSlot[i];
			if (!h) return console.warn("ULAdvManager-onCmdOpenAdv:广告位[" + i + "]对应的advSlot不存在"), void this.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, {
				code: "",
				msg: `广告位${i}对应的advSlot不存在`
			});
			if (h.openingInfo) return console.warn("ULAdvManager-onCmdOpenAdv:广告位[" + i + "]已有广告请求中或正在展示"), void this.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, {
				code: "",
				msg: `广告位${i}已有广告请求中或正在展示`
			});
			let d = h.rcd;
			ULLog.console.log("ULAdvManager-onCmdOpenAdv-rcd:", d);
			let _ = this.advId_2_lastRequestTime[i],
				g = (new Date).valueOf();
			if (_) {
				if (g - _ < d) return console.warn("ULAdvManager-onCmdOpenAdv:广告位[" + i + "]in cd"), void this.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, {
					code: "",
					msg: `广告位[${i}]in cd`
				});
				this.advId_2_lastRequestTime[i] = g
			} else this.advId_2_lastRequestTime[i] = g;
			h.openAdv(this.advRequestSerialNum, e)
		}
		onCmdCloseAdv(t) {
			t.stopImmediatePropagation();
			let e = t.data,
				a = e.advId,
				i = this.advId_2_advSlot[a];
			if (!i) return void this.responseCloseAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, "advSlot未找到!");
			if (!i.openingInfo) return void this.responseCloseAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, "advSlot没有广告执行!");
			let s = this.getAdvObjectByAdvKey(i.openingInfo.advTemplateItemName);
			s ? s instanceof ULAdvNativeObjectBase ? (i.closeAdv(e), this.responseCloseAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, "close adv success")) : i.closeAdv(e) : this.responseCloseAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, "no ad open!")
		}
		onCmdCloseAllAdvByType(t) {
			t.stopImmediatePropagation();
			let e = t.data,
				a = e.type || "",
				i = this.type_2_advIds[a];
			if (null != i && 0 != i.length) {
				for (let t of i) {
					let a = this.advId_2_advSlot[t];
					if (null == a || null == a.openingInfo) continue;
					let i = this.getAdvObjectByAdvKey(a.openingInfo.advTemplateItemName);
					null != i && (e.advId = t, i instanceof ULAdvNativeObjectBase ? i.closeNativeAdv(e) : a.closeAdv(e))
				}
				this.responseCloseAllAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, "关闭成功")
			} else this.responseCloseAllAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, "no ad show")
		}
		onCmdCloseNativeAdv(t) {
			t.stopImmediatePropagation();
			let e = t.data,
				a = e.advId;
			this.advId_2_advSlot[a] ? (ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CLOSE_NATIVE_ADV, e), this.responseCloseNativeAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, "关闭成功")) : this.responseCloseNativeAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, "no advSlot")
		}
		onCmdClickNativeAdv(t) {
			t.stopImmediatePropagation();
			let e = t.data,
				a = e.advId;
			ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", "109", a || "", ""]), this.advId_2_advSlot[a] ? (ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CLICK_NATIVE_ADV, e), ULSdkManager.getInstance().advManager.responseClickNativeAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, "点击成功")) : this.responseClickNativeAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, "no advSlot")
		}
		responseOpenAdvResult(t, e, a) {
			let i = {};
			i.code = e, i.msg = ULAdvTrimErrorManager.trimErrMessage(a.msg, a.code ? a : null), i.advId = t.advId || "", i.userData = t.userData || "", i.tag = t.tag || "", 1 == e && (i.type = t.type || "", i.rewardType = t.rewardType || "", this.advTypeLastTriggerTimeLog[t.type] = ULTools.time(), this.advTypeDailyCountLog[t.type] = (this.advTypeDailyCountLog[t.type] || 0) + 1, this.saveRecord()), ULSdkManager.getInstance().response(ULConst.CMD_OPEN_ADV_RESULT, i)
		}
		responseRewardAdvResult(t, e, a) {
			ULSdkManager.getInstance().response(ULConst.CMD_REWARD_ADV_RESULT, {
				code: e,
				msg: a,
				advId: t.advId || "",
				userData: t.userData || "",
				tag: t.tag || ""
			})
		}
		responseClickAdvResult(t, e, a) {
			ULSdkManager.getInstance().response(ULConst.CMD_CLICK_ADV_RESULT, {
				code: e,
				msg: a,
				advId: t.advId || "",
				userData: t.userData || "",
				tag: t.tag || ""
			})
		}
		responseOpenNativeAdvResult(t, e, a, i, s) {
			let n = {};
			n.code = a, n.msg = i, n.advId = t.advId || "", n.userData = t.userData || "", n.tag = t.tag || "", n.nativeType = e || "", n.nativeData = s || {}, 1 == a && (n.type = t.type || "", n.rewardType = t.rewardType || ""), ULSdkManager.getInstance().response(ULConst.CMD_OPEN_NATIVE_ADV_RESULT, n)
		}
		responseClickNativeAdvResult(t, e, a) {
			ULSdkManager.getInstance().response(ULConst.CMD_CLICK_NATIVE_ADV_RESULT, {
				code: e,
				msg: a,
				nativeType: t.nativeType || "",
				advId: t.advId || "",
				userData: t.userData || "",
				tag: t.tag || ""
			})
		}
		responseCloseNativeAdvResult(t, e, a) {
			ULSdkManager.getInstance().response(ULConst.CMD_CLOSE_NATIVE_ADV_RESULT, {
				code: e,
				msg: a,
				nativeType: t.nativeType || "",
				advId: t.advId || "",
				userData: t.userData || "",
				tag: t.tag || ""
			})
		}
		responseCloseAdvResult(t, e, a) {
			ULSdkManager.getInstance().response(ULConst.CMD_CLOSE_ADV_RESULT, {
				code: e,
				msg: a,
				advId: t.advId || "",
				userData: t.userData || "",
				tag: t.tag || ""
			})
		}
		responseCloseAllAdvResult(t, e, a) {
			ULSdkManager.getInstance().response(ULConst.CMD_CLOSE_ALL_ADV_BY_TYPE_RESULT, {
				code: e,
				msg: a,
				type: t.type || "",
				userData: t.userData || ""
			})
		}
		pauseSound() {
			ULSdkManager.getInstance().response(ULConst.CMD_PAUSE_SOUND_RESULT, {})
		}
		resumeSound() {
			ULSdkManager.getInstance().response(ULConst.CMD_RESUME_SOUND_RESULT, {})
		}
		getAdvStateResult(t, e) {
			ULSdkManager.getInstance().response(ULConst.CMD_GET_ADV_STATE_RESULT, {
				states: t,
				userData: e
			})
		}
		onAdvObjectLifeCycleShowRequest(t, e) {
			this.addAdvCountLog(t, countExp.rc);
			let a = e.advId || "",
				i = this.getAdvObjectByAdvKey(t);
			if (i) {
				let t = i.advType,
					s = i.arg,
					n = i.statisticsAdvertiser,
					o = i.statisticsType;
				o && "" != o && (t = o);
				let r = e.userData || "",
					l = e.tag || "",
					c = this.searchAdvGroupIdByAdvId(a),
					h = new ULAdvItem(a, r, l);
				h.showAdvType = t, h.advGroupId = c, ULSdkManager.getInstance().statisManager.reportAdvBranchRequest(h, n, s)
			}
		}
		onAdvObjectLifeCycleSkip(t, e, a) {
			let i = a.advId || "",
				s = this.advId_2_advSlot[i];
			if (!s) return;
			s.onAdvObjectLifeCycleSkip(a, e), this.addAdvCountLog(t, countExp.fc);
			let n = this.getAdvObjectByAdvKey(t);
			if (n) {
				let t = n.advType,
					s = n.arg,
					o = n.statisticsAdvertiser,
					r = n.statisticsType;
				r && "" != r && (t = r);
				let l = a.userData || "",
					c = a.tag || "",
					h = this.searchAdvGroupIdByAdvId(i),
					d = new ULAdvItem(i, l, c);
				d.showAdvType = t, d.advGroupId = h, d.statisChannelName = o, d.statisSdkAdvId = s, ULSdkManager.getInstance().statisManager.reportAdvFail(d, "errCode=" + e.code + ";errMsg=" + e.msg)
			}
		}
		onAdvObjectLifeCycleShow(t, e, a, i) {
			let s = a.advId || "",
				n = this.advId_2_advSlot[s];
			if (!n) return;
			n.onAdvObjectLifeCycleShow(e, a), this.addAdvCountLog(t, countExp.sc), this.reportVideoPlayCompletion(t, a, i);
			let o = this.getAdvObjectByAdvKey(t);
			if (o) {
				let t = o.advType,
					e = o.arg,
					n = o.statisticsAdvertiser,
					r = o.statisticsType;
				r && "" != r && (t = r), typeExp.banner == t && (this.bannerStartShowTime = ULTools.time());
				let l = i ? i.title : "",
					c = a.userData || "",
					h = a.tag || "",
					d = this.searchAdvGroupIdByAdvId(s),
					_ = new ULAdvItem(s, c, h);
				_.showAdvType = t, _.advGroupId = d, _.statisChannelName = n, _.statisNativeAdTitle = l, _.statisSdkAdvId = e, ULSdkManager.getInstance().statisManager.reportAdvSuccess(_, l)
			}
		}
		onAdvObjectLifeCycleClick(t, e, a, i) {
			let s = a.advId || "",
				n = this.advId_2_advSlot[s];
			if (!n) return;
			n.onAdvObjectLifeCycleClick(e, a), this.addAdvCountLog(t, countExp.cc);
			let o = this.getAdvObjectByAdvKey(t);
			if (o) {
				let t = o.advType,
					e = o.arg,
					n = o.statisticsAdvertiser,
					r = o.statisticsType;
				r && "" != r && (t = r);
				let l = i ? i.title : "",
					c = a.userData || "",
					h = a.tag || "",
					d = this.searchAdvGroupIdByAdvId(s),
					_ = new ULAdvItem(s, c, h);
				_.showAdvType = t, _.advGroupId = d, _.statisChannelName = n, _.statisNativeAdTitle = l, _.statisSdkAdvId = e, ULSdkManager.getInstance().statisManager.reportAdvClicked(_)
			}
		}
		onAdvObjectLifeCycleClose(t, e, a) {
			let i = e.advId || "",
				s = this.advId_2_advSlot[i];
			s && (this.reportBannerShowTime(t, e, a), this.reportVideoPlayStart(t, e, a), s.onAdvObjectLifeCycleClose())
		}
		onAdvTimeout(t, e) {}
		reportBannerShowTime(t, e, a) {
			let i = this.getAdvObjectByAdvKey(t);
			if (null != i) {
				let t = i.advType,
					s = i.arg,
					n = i.statisticsAdvertiser,
					o = i.statisticsType;
				if (null != o && "" != o && (t = o), typeExp.banner == t) {
					let i = Math.floor(ULTools.time() - this.bannerStartShowTime);
					if (i <= 0) return;
					let o = String(i),
						r = e.advId || "",
						l = e.userData || "",
						c = e.tag || "",
						h = this.searchAdvGroupIdByAdvId(r),
						d = new ULAdvItem(r, l, c);
					d.showAdvType = t, d.advGroupId = h, d.statisChannelName = n, d.statisNativeAdTitle = a ? a.title : "", d.statisSdkAdvId = s, ULSdkManager.getInstance().statisManager.reportAdvClose(d, o)
				}
			}
		}
		reportVideoPlayStart(t, e, a) {
			let i = e.advId || "";
			if (!this.advId_2_advSlot[i]) return;
			let s = this.getAdvObjectByAdvKey(t);
			if (null != s) {
				let t = s.advType,
					n = s.arg,
					o = s.statisticsAdvertiser,
					r = s.statisticsType;
				if (null != r && "" != r && (t = r), typeExp.video == t) {
					let s = a ? a.title : "",
						r = e.userData || "",
						l = e.tag || "",
						c = this.searchAdvGroupIdByAdvId(i),
						h = new ULAdvItem(i, r, l);
					h.showAdvType = t, h.advGroupId = c, h.statisChannelName = o, h.statisNativeAdTitle = s, h.statisSdkAdvId = n, ULSdkManager.getInstance().statisManager.reportAdvPlayStart(h)
				}
			}
		}
		reportVideoPlayCompletion(t, e, a) {
			let i = e.advId || "";
			if (!this.advId_2_advSlot[i]) return;
			let s = this.getAdvObjectByAdvKey(t);
			if (null != s) {
				let t = s.advType,
					n = s.arg,
					o = s.statisticsAdvertiser,
					r = s.statisticsType;
				if (null != r && "" != r && (t = r), typeExp.video == t) {
					let s = a ? a.title : "",
						r = e.userData || "",
						l = e.tag || "",
						c = this.searchAdvGroupIdByAdvId(i),
						h = new ULAdvItem(i, r, l);
					h.showAdvType = t, h.advGroupId = c, h.statisChannelName = o, h.statisNativeAdTitle = s, h.statisSdkAdvId = n, ULSdkManager.getInstance().statisManager.reportAdvPlayCompletion(h)
				}
			}
		}
		onAdvObjectLifeCycleRequest(t) {
			let e = this.getAdvObjectByAdvKey(t);
			if (null != e && !e.isReportLoading) {
				e.isReportLoading = !0;
				let t = e.advType,
					a = e.arg,
					i = e.statisticsAdvertiser,
					s = e.statisticsType;
				null != s && "" != s && (t = s);
				let n = new ULAdvItem("", "", "");
				n.showAdvType = t, n.advGroupId = "", n.statisChannelName = i, n.statisNativeAdTitle = "", n.statisSdkAdvId = a, ULSdkManager.getInstance().statisManager.reportAdvLoadAdvRequest(n)
			}
		}
		onAdvObjectLifeCycleRequestSuccess(t) {
			let e = this.getAdvObjectByAdvKey(t);
			if (null != e && e.isReportLoading) {
				e.isReportLoading = !1;
				let t = e.advType,
					a = e.arg,
					i = e.statisticsAdvertiser,
					s = e.statisticsType;
				null != s && "" != s && (t = s);
				let n = new ULAdvItem("", "", "");
				n.showAdvType = t, n.advGroupId = "", n.statisChannelName = i, n.statisNativeAdTitle = "", n.statisSdkAdvId = a, ULSdkManager.getInstance().statisManager.reportAdvLoadAdvSuccess(n)
			}
		}
		onAdvObjectLifeCycleRequestFailed(t, e) {
			let a = this.getAdvObjectByAdvKey(t);
			if (null != a && a.isReportLoading) {
				a.isReportLoading = !1;
				let t = a.advType,
					i = a.arg,
					s = a.statisticsAdvertiser,
					n = a.statisticsType;
				null != n && "" != n && (t = n);
				let o = new ULAdvItem("", "", "");
				o.showAdvType = t, o.advGroupId = "", o.statisChannelName = s, o.statisSdkAdvId = i, ULSdkManager.getInstance().statisManager.reportAdvLoadAdvFailed(o, "errCode=" + e.code + ";errMsg=" + e.msg)
			}
		}
		onAdvObjectLifeCycleFail(t, e, a) {
			let i = a.advId || "",
				s = this.advId_2_advSlot[i];
			if (!s) return;
			s.onAdvObjectLifeCycleFail(e, a), this.addAdvCountLog(t, countExp.fc);
			let n = this.getAdvObjectByAdvKey(t);
			if (n) {
				let t = n.advType,
					s = n.arg,
					o = n.statisticsAdvertiser,
					r = n.statisticsType;
				r && "" != r && (t = r);
				let l = a.userData || "",
					c = a.tag || "",
					h = this.searchAdvGroupIdByAdvId(i),
					d = new ULAdvItem(i, l, c);
				d.showAdvType = t, d.advGroupId = h, d.statisChannelName = o, d.statisSdkAdvId = s, ULSdkManager.getInstance().statisManager.reportAdvFail(d, "errCode=" + e.code + ";errMsg=" + e.msg)
			}
		}
		onAdvObjectLifeCycleReuse(t, e, a) {
			let i = a.advId || "";
			if (!this.advId_2_advSlot[i]) return;
			ULSdkManager.getInstance().advManager.responseOpenAdvResult(a, ULConst.ADV_RESULT_CODE_FAILED, e), this.addAdvCountLog(t, countExp.fc);
			let s = this.getAdvObjectByAdvKey(t);
			if (s) {
				let t = s.advType,
					n = s.arg,
					o = s.statisticsAdvertiser,
					r = s.statisticsType;
				r && "" != r && (t = r);
				let l = a.userData || "",
					c = a.tag || "",
					h = this.searchAdvGroupIdByAdvId(i),
					d = new ULAdvItem(i, l, c);
				d.showAdvType = t, d.advGroupId = h, d.statisChannelName = o, d.statisSdkAdvId = n, ULSdkManager.getInstance().statisManager.reportAdvFail(d, "errCode=" + e.code + ";errMsg=" + e.msg)
			}
		}
		addAdvFailCount(t) {
			this.addAdvCountLog(t, countExp.fc)
		}
		addAdvCountLog(t, e) {
			let a = this.advKey_2_templateIdArray[t];
			if (a && a.length > 0)
				for (const i of a) {
					let a = ULConst.EXP_ADV_TEMPLATE_CONST + i + ULConst.EXP_ADV_POINT_CONST + e;
					this.updateAdvCountStoreNum(a), this.advSlotRefreshValidAdvKeys(t)
				}
			let i = this.advKey_2_advObject[t];
			if (i) {
				let a = i.advType,
					s = ULConst.EXP_ADV_TYPE_CONST + a + ULConst.EXP_ADV_POINT_CONST + e;
				this.updateAdvCountStoreNum(s), this.advSlotRefreshValidAdvKeys(t)
			}
		}
		updateAdvCountStoreNum(t) {
			ULAdvExpManager.updateExpValue(dataExp.d + t), ULAdvExpManager.updateExpValue(dataExp.w + t), ULAdvExpManager.updateExpValue(dataExp.m + t), ULAdvExpManager.updateExpValue(dataExp.y + t)
		}
		advSlotRefreshValidAdvKeys(t) {
			let e = this.advKey_2_advIdArray[t];
			if (e)
				for (const t of e) {
					let e = this.advId_2_advSlot[t];
					e && e.refreshValidAdvKeys()
				}
		}
	}
	ULAdvManager.instance = null;
	class ULAdvFaceBook$1 extends ULAdvBase {
		constructor() {
			super(), this.className = "ULAdvFaceBook"
		}
		onInitModule() {
			this.initState = !0, this.notifyInitState(this.initState)
		}
		notifyInitState(t) {
			let e = ULSdkManager.getInstance().advManager.getAdvObjectsByName("ULAdvFaceBook");
			if (e)
				for (const a of e) a.receiveMainClassInitState(t)
		}
		initAdv() {}
	}
	ULAdvFaceBook$1.NORMAL_ADVERTISER = "ULAdvFaceBook";
	class ULAdvFaceBookInter extends ULAdvObjectBase {
		constructor(t) {
			super(t, typeExp.inter, ULTools.format("%s%s%s", "ULAdvFaceBookInter", "_", t)), this.className = "ULAdvFaceBookInter", this.interAdPreloadArray = [], this.interAdArray = [], this.statisticsAdvertiser = ULAdvFaceBook$1.NORMAL_ADVERTISER, this.statisticsType = oldTypeExp.interstitial, this.setSupportLoadType = [ULConst.ADV_LOAD_TYPE_UNPRELOAD], this.setLoadType = ULConst.ADV_LOAD_TYPE_UNPRELOAD
		}
		initAdv() {
			let t = this.getLoadType;
			null != t && -1 != this.getSupportLoadType.indexOf(t) || (ULLog.console.log(`ULAdvFaceBookInter-initAdv-当前加载类型${t}模块不支持`), t = ULConst.ADV_LOAD_TYPE_UNPRELOAD), this.mLoadType = t, this.startTime = ULTools.time(), this.preLoadState = ULConst.ADV_PRELOAD_STATE_READY, setTimeout(() => {
				this.preLoadInterAd()
			}, 1e4)
		}
		preLoadInterAd() {
			this.interAdArray.length + this.interAdPreloadArray.length < 3 && this.getInterAd(), setTimeout(() => {
				this.preLoadInterAd()
			}, 3e4)
		}
		getInterAd() {
			ULConfig.getConfig();
			0 != (this.arg || "").replace(/(^\s*)|(\s*$)/g, "").length ? window.FBInstant && window.FBInstant.getInterstitialAdAsync(this.arg).then(t => {
				ULLog.console.log("ULAdvFaceBookInter.getInterAd....实例加载成功 "), this.interAdPreloadArray.push(t), this.interADLoadData(t, 0)
			}).catch(t => {
				console.error("ULAdvFaceBookInter.getInterAd....加载失败: " + t.message)
			}) : ULLog.console.log("ULAdvFaceBookInter arg 为空")
		}
		interADLoadData(t, e) {
			t.loadAsync().then(() => {
				ULLog.console.log("ULAdvFaceBookInter.interADLoadData.videoAd.loadAsync.then 加载成功 "), this.interAdArray.push(t);
				let e = this.interAdPreloadArray.indexOf(t);
				e >= 0 && this.interAdPreloadArray.splice(e, 1)
			}).catch(a => {
				if (console.error("ULAdvFaceBookInter.interADLoadData....加载失败: " + a.message), e > 3) {
					let e = this.interAdPreloadArray.indexOf(t);
					e >= 0 && this.interAdPreloadArray.splice(e, 1)
				} else setTimeout(() => {
					this.interADLoadData(t, e + 1)
				}, 2e4)
			})
		}
		loadAdv() {}
		showAdv(t) {
			ULLog.console.log("ULAdvFaceBookInter showAdv");
			let e = ULConfig.getConfig();
			if (this.preLoadState == ULConst.ADV_PRELOAD_STATE_LOADING) return console.warn("ULAdvFaceBookInter-showAdv:广告未加载就绪,直接跳过当前广告展示"), void this.advSkip(t, {
				code: "",
				msg: "adv is loading"
			});
			if (this.preLoadState == ULConst.ADV_PRELOAD_STATE_NOAD) return console.warn("ULAdvFaceBookInter-showAdv:广告未加载就绪,直接跳过当前广告展示"), void this.advSkip(t, this.onLoadFailErr);
			let a = ULTools.time(),
				i = e.i_sdk_adv_inter_launch_cd || 0,
				s = Math.max(30, i / 1e3);
			if (a - this.startTime < s) return ULLog.console.log("ULAdvFaceBook.showInterAdv:未达到请求启动cd限制，无法展示广告"), void this.advSkip(t, {
				code: "",
				msg: "请启动cd限制中"
			});
			let n = e.i_sdk_adv_inter_cd || 0,
				o = Math.max(30, n / 1e3);
			if (a - this.lastShowInterTime < o) return ULLog.console.log("ULAdvFaceBook.showInterAdv:未达到展示cd限制，无法展示广告"), void this.advSkip(t, {
				code: "",
				msg: "请求cd限制中"
			});
			var r = this.interAdArray.shift();
			if (!r) return ULLog.console.log("ULAdvFaceBookInter-showAdv：未预加载好"), void this.advSkip(t, {
				code: "",
				msg: "未加载好"
			});
			this.showData = t, this.isOpened = !0, r.showAsync().then(() => {
				ULLog.console.log("ULAdvFaceBookInter.showAsync then"), this.isOpened = !1, this.getInterAd(), this.lastShowInterTime = ULTools.time(), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleShow(this.advKey, ULConst.ADV_RESULT_MSG_SUCCESS, this.showData), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleClose(this.advKey, this.showData)
			}).catch(t => {
				console.error("ULAdvFaceBookInter.showAsync catch: ", t.message), this.getInterAd(), this.isOpened = !1, this.advSkip(this.showData, {
					code: String(t.code),
					msg: t.message
				})
			})
		}
		closeAdv(t) {
			ULLog.console.log("ULAdvFaceBookInter closeAdv:")
		}
		getMainClassName() {
			return "ULAdvFaceBook"
		}
		receiveInitState(t) {
			t ? (this.initState = t, this.initAdv()) : console.warn("ULAdvFaceBookInter-receiveInitState:初始化失败")
		}
	}
	class ULAdvFaceBookVideo extends ULAdvObjectBase {
		constructor(t) {
			super(t, typeExp.video, ULTools.format("%s%s%s", "ULAdvFaceBookVideo", "_", t)), this.className = "ULAdvFaceBookVideo", this.videoAdPreloadArray = [], this.videoAdArray = [], this.statisticsAdvertiser = ULAdvFaceBook$1.NORMAL_ADVERTISER, this.setSupportLoadType = [ULConst.ADV_LOAD_TYPE_UNPRELOAD], this.setLoadType = ULConst.ADV_LOAD_TYPE_UNPRELOAD
		}
		initAdv() {
			let t = this.getLoadType;
			null != t && -1 != this.getSupportLoadType.indexOf(t) || (ULLog.console.log(`ULAdvFaceBookVideo-initAdv-当前加载类型${t}模块不支持`), t = ULConst.ADV_LOAD_TYPE_UNPRELOAD), this.mLoadType = t, this.preLoadState = ULConst.ADV_PRELOAD_STATE_READY, setTimeout(() => {
				this.preLoadVideoAd()
			}, 1e4)
		}
		preLoadVideoAd() {
			this.videoAdArray.length + this.videoAdPreloadArray.length < 3 && this.getVideoAd(), setTimeout(() => {
				this.preLoadVideoAd()
			}, 3e4)
		}
		getVideoAd() {
			0 != this.arg.replace(/(^\s*)|(\s*$)/g, "").length ? window.FBInstant && window.FBInstant.getRewardedVideoAsync(this.arg).then(t => {
				ULLog.console.log("ULAdvFaceBookVideo.getVideoAd....实例加载成功: "), this.videoAdPreloadArray.push(t), this.videoADLoadData(t, 0)
			}).catch(t => {
				console.error("ULAdvFaceBookVideo.getVideoAd....加载失败: ", t, t.message)
			}) : ULLog.console.log("ULAdvFaceBookVideo arg 为空")
		}
		videoADLoadData(t, e) {
			t.loadAsync().then(() => {
				ULLog.console.log("ULAdvFaceBookVideo.videoADLoadData.videoAd.loadAsync.then 加载成功 "), this.videoAdArray.push(t);
				let e = this.videoAdPreloadArray.indexOf(t);
				e >= 0 && this.videoAdPreloadArray.splice(e, 1)
			}).catch(a => {
				if (console.error("ULAdvFaceBookVideo.videoADLoadData....加载失败: " + a.message), e > 3) {
					let e = this.videoAdPreloadArray.indexOf(t);
					e >= 0 && this.videoAdPreloadArray.splice(e, 1)
				} else setTimeout(() => {
					this.videoADLoadData(t, e + 1)
				}, 2e4)
			})
		}
		loadAdv() {}
		showAdv(t) {
			if (ULLog.console.log("ULAdvFaceBookVideo showAdv"), this.preLoadState == ULConst.ADV_PRELOAD_STATE_LOADING) return console.warn("ULAdvFaceBookVideo-showAdv:广告未加载就绪,直接跳过当前广告展示"), void this.advSkip(t, {
				code: "",
				msg: "adv is loading"
			});
			if (this.preLoadState == ULConst.ADV_PRELOAD_STATE_NOAD) return console.warn("ULAdvFaceBookVideo-showAdv:广告未加载就绪,直接跳过当前广告展示"), void this.advSkip(t, this.onLoadFailErr);
			var e = this.videoAdArray.shift();
			if (!e) return ULLog.console.log("ULAdvFaceBookVideo-showAdv：未预加载好"), void this.advSkip(t, {
				code: "",
				msg: "未加载好"
			});
			this.showData = t, this.isOpened = !0;
			let a = ULConfig.getConfig();
			e.showAsync().then(() => {
				ULLog.console.log("ULAdvFaceBookVideo.showVideoAdv....show.then"), this.isOpened = !1, this.getVideoAd(), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [a.s_sdk_miniplay_user_open_video_event_id, "1"]), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [a.s_sdk_miniplay_video_success_show_event_id]), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleShow(this.advKey, ULConst.ADV_RESULT_MSG_SUCCESS, this.showData), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleClose(this.advKey, this.showData)
			}).catch(t => {
				console.error("ULAdvFaceBookVideo.showVideoAdv....show.catch: ", t.message), this.getVideoAd(), this.isOpened = !1, this.advSkip(this.showData, {
					code: String(t.code),
					msg: t.message
				}), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [a.s_sdk_miniplay_user_open_video_event_id, "2"])
			})
		}
		closeAdv(t) {
			ULLog.console.log("ULAdvFaceBookVideo closeAdv:")
		}
		getMainClassName() {
			return "ULAdvFaceBook"
		}
		receiveInitState(t) {
			t ? (this.initState = t, this.initAdv()) : console.warn("ULAdvFaceBookVideo-receiveInitState:初始化失败")
		}
	}
	class ULAdvFacebookBanner extends ULAdvObjectBase {
		constructor(t) {
			super(t, typeExp.banner, "ULAdvFacebookBanner_" + t), this.className = "ULAdvFacebookBanner", this.channelBannerStyle = {}, this.statisticsAdvertiser = ULAdvFaceBook.NORMAL_ADVERTISER, this.channelBannerStyle = ULConfig.getConfig().t_sdk_adv_banner_tags_style_setting || {}
		}
		onDisposeModule() {
			super.onDisposeModule(), ULLog.console.log("ULAdvFacebookBanner-onDisposeModule arg:", this.arg)
		}
		initAdv() {
			ULLog.console.log("ULAdvFacebookBanner-initAdv"), this.preLoadState = ULConst.ADV_PRELOAD_STATE_READY
		}
		loadAdv() {}
		showAdv(t) {
			ULLog.console.log("ULAdvFacebookBanner-showAdv");
			let e = window.FBInstant;
			if (e && null != e && e.loadBannerAdAsync) {
				if (this.preLoadState != ULConst.ADV_PRELOAD_STATE_READY) return ULLog.console.log("ULAdvFacebookBanner-showAdv:广告未加载就绪，直接跳过"), void this.advSkip(t, {
					code: "",
					msg: "adv not ready"
				});
				this.showData = t, this.isOpened = !0, ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleRequest(this.advKey), e.loadBannerAdAsync(this.arg).then(() => {
					ULLog.console.error("ULAdvFaceBook.loadBannerAdAsync then"), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleRequestSuccess(this.advKey), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleShow(this.advKey, ULConst.ADV_RESULT_MSG_SUCCESS, this.showData), this.isOpened || e.hideBannerAdAsync()
				}).catch(t => {
					ULLog.console.error("ULAdvFaceBook.loadBannerAdAsync cath err: ", t), this.advSkip(this.showData, {
						code: String(t.code),
						msg: t.message
					})
				})
			} else this.advSkip(t, {
				code: "",
				msg: "FBInstant not loadBannerAdAsync"
			})
		}
		closeAdv(t) {
			ULLog.console.log("ULAdvFacebookBanner.closeAdv "), this.isOpened = !1;
			let e = window.FBInstant;
			(e && null != e || e.hideBannerAdAsync) && e.hideBannerAdAsync(), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleClose(this.advKey, this.showData), ULSdkManager.getInstance().advManager.responseCloseAdvResult(t, ULConst.ADV_RESULT_CODE_SUCCESS, ULConst.ADV_RESULT_MSG_CLOSE)
		}
		getMainClassName() {
			return "ULAdvFacebook"
		}
		receiveInitState(t) {
			t ? (this.initState = t, this.initAdv()) : console.warn("ULAdvDemoInter-receiveInitState:初始化失败")
		}
	}
	class ULModuleFaceBook extends ULChannelModuleWebmobileBase {
		constructor() {
			super(...arguments), this.reportCacheArray = []
		}
		getSubAdModuleClassName() {
			return ["ULAdvFaceBookInter", "ULAdvFaceBookVideo", "ULAdvFacebookBanner"]
		}
		getAdMainClassName() {
			return "ULAdvFaceBook"
		}
		createSubAdObj(t, e) {
			let a, i;
			switch (t) {
				case "ULAdvFaceBookInter":
					a = new ULAdvFaceBookInter(e);
					break;
				case "ULAdvFaceBookVideo":
					a = new ULAdvFaceBookVideo(e);
					break;
				case "ULAdvFacebookBanner":
					a = new ULAdvFacebookBanner(e)
			}
			return a && (i = ULTools.format("%s%s%s", t, "_", e), ULSdkManager.getInstance().advManager.updateAdvKeyObjMap(i, a)), a
		}
		createMainAdObj() {
			return new ULAdvFaceBook
		}
		init() {
			super.init(), ULLog.console.log("ULModuleFaceBook.init()"), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SET_VERSION, 1, this.onCmdSetVersion.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_REPORT_ULSDK_EVENT, 1, this.reportEvent.bind(this)), this.initSdk()
		}
		initSdk() {
			let t = ULConfig.getConfig(),
				e = ULSdkManager.getInstance().channelInfo;
			e.channelName = "facebook", e.uuid = this.sdkUserId, e.isSupportRecordShare = !1, e.isShareEnabled = !!t.i_sdk_share_mode, e.copChannelId = t.s_sdk_cop_channel_id, e.isPayEnabled = !!t.i_sdk_pay_mode, e.isUseSdkRank = !!t.i_sdk_sdk_rank_mode, e.appName = "facebook", e.payInfo = {};
			let a = this;
			ULLog.console.log("ULModuleFaceBook.initSdk 加载facebook广告SDK的js成功！");
			let i = window.FBInstant;
			FBInstant.initializeAsync().then(() => {
				FBInstant.setLoadingProgress(100), FBInstant.startGameAsync(), FBInstant.getSupportedAPIs(), a.initGoogleAnalytics()
			})
		}
		initGoogleAnalytics() {
			let t = window.FBInstant,
				e = this;
			this.googleReport("event", "fb_inited"), t.getEntryPointAsync().then(function(t) {
				ULLog.console.info("ULModuleGoogleAnalytics.initSdk：Entry Point: ", t), e.googleReport("event", "fb_entrypoint", {
					entrypoint: t
				})
			});
			const a = t.context.getType();
			ULLog.console.info("ULModuleGoogleAnalytics.initSdk：contextType: ", a), this.googleReport("event", "fb_context", {
				type: a
			}), this.googleReport("event", "fb_started"), this.cleanUpReportCache()
		}
		googleReport(t, ...e) {
			let a = window.gtag;
			a ? a(arguments) : this.reportCacheArray.push(arguments)
		}
		cleanUpReportCache() {
			for (; this.reportCacheArray.length;) {
				let t = this.reportCacheArray.shift();
				(window.dataLayer || []).push(t)
			}
		}
		onCmdSetVersion(t) {
			ULLog.console.log("ULModuleGoogleAnalytics.onCmdSetVersion........."), this.googleReport("event", "enter_first_scene")
		}
		reportEvent(t) {
			let e = ULConfig.getConfig(),
				a = t.data.parameter,
				i = a.typeid,
				s = a.updata;
			ULLog.console.log("ULModuleGoogleAnalytics type:", i), ULLog.console.log("ULModuleGoogleAnalytics updata:", s);
			let n = e.s_sdk_megadata_server_type_id;
			switch (i = i.replace(n + "-", "")) {
				case ULConst.STATIS_TYPE_LEVEL_START_EVENT: {
					let t = s[3] || "",
						e = s[4] || "";
					this.googleReport("event", "level_start", {
						levelName: t,
						reason: e
					});
					break
				}
				case ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT: {
					let t = s[3] || "",
						e = s[4] || "",
						a = s[5] || "",
						i = s[11] || "";
					this.googleReport("event", "level_complete", {
						levelName: t,
						state: e,
						reason: a,
						time: i
					});
					break
				}
				case ULConst.STATIS_TYPE_COIN_CHANGE_EVENT: {
					let t = s[3] || "",
						e = s[4] || "",
						a = s[5] || "",
						i = s[6] || "";
					this.googleReport("event", "coin_change", {
						coinType: t,
						changeType: e,
						num: a,
						reason: i
					});
					break
				}
				case ULConst.STATIS_TYPE_ITEM_BUY: {
					let t = s[4] || "",
						e = s[5] || "",
						a = s[3] || "";
					this.googleReport("event", "goods_buy", {
						goods: t,
						state: e,
						reason: a
					});
					break
				}
				case ULConst.STATIS_TYPE_PAY_INFO: {
					let t = s[4] || "",
						e = s[5] || "",
						a = s[6] || "";
					this.googleReport("event", "pay_info", {
						payType: t,
						price: e,
						result: a
					});
					break
				}
				case ULConst.STATIS_TYPE_ONLINE_TIME: {
					let t = s[4] || "";
					this.googleReport("event", "online_time", {
						time: t
					});
					break
				}
				case ULConst.STATIS_TYPE_VIDEO_POINT_EVENT: {
					let t = s[3] || "",
						e = s[4] || "";
					this.googleReport("event", "video_point_event", {
						advName: t,
						state: e
					});
					break
				}
				case ULConst.STATIS_TYPE_COMMON_EVENT: {
					let t = s[3] || "",
						e = s[4] || "",
						a = s[5] || "",
						i = s[9] || "";
					this.googleReport("event", "user_common_event", {
						eventId: t,
						parm1: e,
						parm2: a,
						parm3: i
					});
					break
				}
				case ULConst.STATIS_TYPE_ADV_INFO: {
					let t = s[4] || "",
						e = s[5] || "",
						a = s[6] || "",
						i = s[7] || "";
					this.googleReport("event", "adv_event", {
						advType: t,
						state: e,
						reason: a,
						cop: i
					});
					break
				}
			}
		}
	}
	class ULSdkModuleLoader {
		static getObjectByModuleName(t) {
			return ULSdkModuleLoader.moduleName_2_object[t]
		}
		static getSubAdModuleClassName() {
			return ULSdkModuleLoader.moduleName_2_subAdvModuleClassName
		}
		static getSubAdMainClassName() {
			return ULSdkModuleLoader.moduleName_2_subAdvMainClassName
		}
		static initAllModules() {
			let t = [];
			t.push(new ULModuleCdk), t.push(new ULModuleMegadata), t.push(new ULModuleUserData), t.push(new ULModuleClipboard), t.push(new ULModuleFaceBook);
			for (let e = 0, a = t.length; e < a; e++) {
				const a = t[e];
				let i = a.className;
				ULSdkModuleLoader.moduleName_2_subAdvModuleClassName[i] = a.getSubAdModuleClassName(), ULSdkModuleLoader.moduleName_2_subAdvMainClassName[i] = a.getAdMainClassName()
			}
			ULLog.console.log("ULSdkModuleLoader-moduleName_2_subAdvModuleClassName:", ULSdkModuleLoader.moduleName_2_subAdvModuleClassName), ULLog.console.log("ULSdkModuleLoader-moduleName_2_subAdvMainClassName:", ULSdkModuleLoader.moduleName_2_subAdvMainClassName);
			for (let e = 0; e < t.length; e++) {
				let a = t[e].loadSubModules();
				for (let i = 0; i < a.length; i++) {
					const s = a[i];
					t.splice(e + 1, 0, s), e++
				}
			}
			ULLog.console.log("ULSdkModuleLoader--modules:", t);
			for (let e = 0; e < t.length; e++) {
				const a = t[e];
				ULSdkModuleLoader.moduleName_2_object[a.className] = a;
				try {
					a.init()
				} catch (t) {
					ULLog.console.error(t)
				}
			}
			return t
		}
	}
	ULSdkModuleLoader.moduleName_2_object = {}, ULSdkModuleLoader.moduleName_2_subAdvModuleClassName = {}, ULSdkModuleLoader.moduleName_2_subAdvMainClassName = {};
	class ULChannelInfo {
		constructor() {
			this.preparationFlags = {}, this.copInfo = "{}", this.payInfo = {}, this.jumpInfo = [], this.isSupportRecordShare = !1, this.channelName = "default", this.isPayEnabled = !1, this.isShareEnabled = !1, this.isUseSdkRank = !1, this.isShowUrlAdIcon = !1, this.appName = "", this.equipmentModel = "", this.platformVersionMessage = "", this.osVersionMessage = "", this.cardType = 0, this.isThirdExit = !1, this.isAbout = !1, this.isMoreGame = !1, this.isULMoreGame = !1, this.isSupportClipboardData = !1, this.isSupportInstallShortcut = !1, this.isSupportFindMinigames = !1, this.findMinigamesImageUrl = "", this.isSupportRecommendationBtn = !1, this.isSupportJumpList = !1, this.is4399Watermark = !1, this.uuid = "", this.sdcardPath = "", this.packageVersion = "", this.copChannelId = "", this.ulsdkVersion = "", this.cdkChannelId = "", this.channelUserId = "", this.referenceBannerHeight = ULConst.DEFAULT_REFERANCE_BANNER_HEIGHT, this.isNewUser = !0, this.loginDays = 0, this._sdkUserId = "", this.isSupportPasterAdv = !1, this.gameLanguage = "", this.isSupportChannelMoreGameBox = !1, this.isSupportChannelBlockAd = !1, this.isSupportSubscribe = !1, this.isSupportColorSign = !1, this.isSupportGridAd = !1, this.isSupportVideoRank = !1, this.isSupportFavoriteGuide = !1, this.isSupportFollowOfficialAccount = !1, this.appIdOrPkgName = "", this.isSupportContentSecurityCheck = !1, this.isJumpLeisureEnabled = !1, this.isSupportVibrate = !0, this.isSupportOpenUrl = !1, this.isSupportJumpInfoVideoType = !1, ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, ULConst.PRIORITY_NONE, this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
		}
		toBaseChannelInfoData() {
			let t = ULConfig.getConfig();
			ULLog.console.log("config", t);
			let e = null == t.s_sdk_licence_info ? "" : t.s_sdk_licence_info;
			e = e.replace(/\/n/g, "\\n");
			let a = !!t.i_sdk_age_level_info_mode,
				i = t.s_sdk_age_level_info || "",
				s = {
					gameName: t.s_game_name,
					gameLanguage: this.gameLanguage,
					channelName: this.channelName,
					appName: this.appName,
					isShowLicenceInfo: 1 == t.i_sdk_licence_info_mode,
					licenceInfo: e,
					isShowAgeLevelInfo: a,
					isStartGameByTouch: 1 == t.i_sdk_start_game_by_touch
				};
			return i && (s.ageLevelInfo = i), s
		}
		toResponseData() {
			let t = [];
			for (let e = 0; e < this.jumpInfo.length; e++) {
				const a = this.jumpInfo[e];
				a.index && a.url ? t.push({
					index: a.index,
					url: a.url,
					rewards: a.rewards || [],
					bReceived: a.bReceived || !1,
					appName: a.appName || ""
				}) : ULLog.console.warn("ULChannelInfo.toResponseData jump data error!", a)
			}
			let e = ULConfig.getConfig();
			return null != e.i_sdk_adv_reference_banner_height && (this.referenceBannerHeight = e.i_sdk_adv_reference_banner_height), this.isJumpLeisureEnabled = this.isJumpLeisureEnabled && !!e.i_sdk_moreWonderful_mode, this.isSupportInstallShortcut = this.isSupportInstallShortcut && !!e.i_sdk_installShortcut_mode, this.isSupportRecommendationBtn = this.isSupportRecommendationBtn && !!e.i_sdk_moregame_mode, this.isSupportJumpList = this.isSupportJumpList && !!e.i_sdk_jumplist_mode, this.isSupportVibrate = this.isSupportVibrate && !!e.i_sdk_phone_vibrate, this.isSupportOpenUrl = this.isSupportOpenUrl && !!e.i_sdk_support_open_url, this.isSupportRecordShare = this.isSupportRecordShare && !!e.i_sdk_support_record_share, {
				copInfo: this.copInfo,
				cardType: this.cardType,
				isThirdExit: this.isThirdExit,
				isAbout: this.isAbout,
				payInfo: this.payInfo,
				isMoreGame: this.isMoreGame,
				isULMoreGame: this.isULMoreGame,
				uuid: this.uuid,
				sdcardPath: this.sdcardPath,
				packageVersion: this.packageVersion,
				copChannelId: this.copChannelId,
				ulsdkVersion: this.ulsdkVersion,
				isShowUrlAdIcon: this.isShowUrlAdIcon,
				cdkChannelId: this.cdkChannelId,
				isPayEnabled: this.isPayEnabled,
				isShareEnabled: this.isShareEnabled,
				isUseSdkRank: this.isUseSdkRank,
				isSupportRecordShare: this.isSupportRecordShare,
				isSupportInstallShortcut: this.isSupportInstallShortcut,
				isSupportClipboardData: this.isSupportClipboardData,
				isSupportFindMinigames: this.isSupportFindMinigames,
				findMinigamesImageUrl: this.findMinigamesImageUrl,
				isSupportRecommendationBtn: this.isSupportRecommendationBtn,
				isSupportJumpList: this.isSupportJumpList,
				is4399Watermark: this.is4399Watermark,
				appName: this.appName.toLocaleLowerCase(),
				jumpInfo: t,
				channelUserId: this.channelUserId,
				referenceBannerHeight: this.referenceBannerHeight,
				isNewUser: this.isNewUser,
				loginDays: this.loginDays,
				isSupportPasterAdv: this.isSupportPasterAdv,
				gameLanguage: this.gameLanguage,
				isSupportChannelMoreGameBox: this.isSupportChannelMoreGameBox,
				isSupportChannelBlockAd: this.isSupportChannelBlockAd,
				isSupportSubscribe: this.isSupportSubscribe,
				isSupportGridAd: this.isSupportGridAd,
				isSupportVideoRank: this.isSupportVideoRank,
				isSupportFavoriteGuide: this.isSupportFavoriteGuide,
				isSupportFollowOfficialAccount: this.isSupportFollowOfficialAccount,
				customerServiceInfo: e.t_customer_service_info,
				appIdOrPkgName: this.appIdOrPkgName,
				isSupportContentSecurityCheck: this.isSupportContentSecurityCheck,
				isJumpLeisureEnabled: this.isJumpLeisureEnabled,
				isSupportVibrate: this.isSupportVibrate,
				isSupportOpenUrl: this.isSupportOpenUrl,
				isSupportJumpInfoVideoType: this.isSupportJumpInfoVideoType
			}
		}
		isReady() {
			return ULTools.getObjSize(this.preparationFlags) <= 0
		}
		getPreparationFlags() {
			let t = [];
			return ULTools.forEachMap(this.preparationFlags, (e, a) => {
				t.push(e)
			}), t
		}
		addPreparationFlag(t) {
			this.preparationFlags[t] = !0
		}
		removePreparationFlag(t) {
			delete this.preparationFlags[t]
		}
		onCmdSdkCollectionModuleCheckerConfig(t) {
			let e = t.getReturnValue() || [];
			e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "渠道信息:"
			}), e.push({
				type: "newLine"
			});
			let a = "",
				i = this.toResponseData(),
				s = Object.keys(i);
			s.sort();
			for (let t = 0; t < s.length; t++) {
				const e = s[t];
				let n = i[e];
				a += ULTools.format("[%s] = [%s]\n", e, JSON.stringify(n))
			}
			e.push({
				type: "labelArea",
				text: a
			}), e.push({
				type: "newLine"
			}), t.setReturnValue(e, !0)
		}
	}
	class MCConsts {}
	MCConsts.COP_CITY_ID_2_NAME = {
		"": "关闭城市模拟"
	};
	class ULCopManager {
		constructor() {
			this.localCop = {}, this.serverCop = {}, this.cop = {}, this.simulateCityId = "", this.simulateTemplateId = ""
		}
		init() {
			this.loadRecord();
			let t = ULConfig.getConfig();
			this.localCop = t.t_sdk_cop_default_cop, this.localCop = ULTools.jsonValToStr(this.localCop), ULLog.console.log(`ULCopManager-init-localCop:${JSON.stringify(this.localCop)}`), this.processCop(), this.requestServerCop(!1), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, 10, this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
		}
		loadRecord() {
			let t, e = ULStorageManager.getInstance().getStorage(this._getRecordKey()) || "{}";
			try {
				t = JSON.parse(e)
			} catch (e) {
				t = {}
			}
			this.setSimulateCityId(t.simulateCityId || ""), this.setSimulateTemplateId(t.simulateTemplateId || "")
		}
		saveRecord() {
			let t = {
					simulateCityId: this.simulateCityId || "",
					simulateTemplateId: this.simulateTemplateId || ""
				},
				e = JSON.stringify(t);
			ULStorageManager.getInstance().setStorage(this._getRecordKey(), e)
		}
		_getRecordKey() {
			let t = ULConfig.getConfig();
			return ULTools.format("ULCopManager_record_%d", t.s_sdk_megadata_game_id)
		}
		requestServerCop(t) {
			let e = ULConfig.getConfig();
			if (!e.s_sdk_cop_game_id || "0" == e.s_sdk_cop_game_id) return void ULLog.console.log("禁用cop");
			t || ULSdkManager.getInstance().channelInfo.addPreparationFlag("cop");
			let a = e.s_sdk_cop_addr,
				i = e.s_sdk_cop_game_id,
				s = e.s_sdk_cop_channel_id,
				n = e.s_sdk_cop_version,
				o = ULSdkManager.getInstance().channelInfo._sdkUserId;
			RegExp(/^[0-9a-zA-Z_]{1,}$/).test(o) || (o = "");
			let r = e.i_net_timeout,
				l = ULTools.format("%s?gameid=%d&qudao=%d&version=%d&uid=%s", a, i, s, n, o);
			(this.simulateCityId || this.simulateTemplateId) && (ULLog.console.warn("使用debug模式cop地址"), l = l.replace("getdata/", "getdatadebug"), this.simulateCityId && (l += "&carrierid=0&zoneid=" + this.simulateCityId), this.simulateTemplateId && (l += "&templateId=" + this.simulateTemplateId)), ULLog.console.log("ULCopManager.requestServerCop:", l), ULTools.httpGet({
				url: l,
				timeoutMillisecond: r,
				success: e => {
					let a = null;
					try {
						a = JSON.parse(e), ULSdkManager.getInstance().statisManager.reportCopSuccess(e)
					} catch (t) {
						ULLog.console.error(t), ULSdkManager.getInstance().statisManager.reportCopFail(t.message)
					}
					ULLog.console.log("copJsonData", a), this.serverCop = a || {}, this.processCop(), this.triggerCopInfoResult(), t || ULSdkManager.getInstance().channelInfo.removePreparationFlag("cop")
				},
				fail: e => {
					ULLog.console.warn("ULCopManager.requestServerCop http fail!", e), t || ULSdkManager.getInstance().channelInfo.removePreparationFlag("cop"), ULSdkManager.getInstance().statisManager.reportCopFail("timeout"), ULTimer.callLater(ULConst.COP_RETRY_TIME_SEC, () => {
						ULLog.console.log(ULTools.format("ULCopManager.requestServerCop 失败后，等待%d秒重新请求cop", ULConst.COP_RETRY_TIME_SEC)), this.requestServerCop(!0)
					})
				}
			})
		}
		processCop() {
			let t = {};
			ULTools.forEachMap(this.localCop, (e, a) => {
				t[e] = a
			}), ULTools.forEachMap(this.serverCop, (e, a) => {
				if ("i_" != e.substr(0, 2) || isNaN(parseFloat(a)) || (a = parseFloat(a)), "t_" == e.substr(0, 2)) try {
					a = JSON.parse(a)
				} catch (t) {
					ULLog.console.log("processCop error --key:", e, " val:", a), a = ""
				}
				t[e] = a
			}), ULLog.console.log("processCop.copresult cop:", t), this.cop = t;
			let e = ULConfig.getConfig(),
				a = ULTools.clone(this.cop);
			a.cop_game_id = e.s_sdk_cop_game_id || "unknown", a.cop_channel_id = e.s_sdk_cop_channel_id || "unknown", a.cop_version = e.s_sdk_cop_version || "unknown", ULSdkManager.getInstance().channelInfo.copInfo = JSON.stringify(a), ULConfig.updateValueByCop(this.cop), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_COP_CHANGED, {})
		}
		get(t, e) {
			let a = this.cop[t];
			return null == a && (a = e), a
		}
		getNumberValue(t, e) {
			let a = this.get(t, e),
				i = parseFloat(a);
			return isNaN(i) ? 0 : i
		}
		getNumberValueInRange(t, e, a, i) {
			let s = this.getNumberValue(t, e);
			return s = ULTools.clampf(s, a, i)
		}
		getBooleanValue(t, e) {
			return 1 == this.get(t, e)
		}
		setSimulateCityId(t) {
			if (this.simulateCityId = t, this.saveRecord(), "" != t) {
				let e = ULTools.format("已开启COP调试模式，模拟城市：%s_%s", t, ULConfig.getConfig().t_sdk_cop_simulate_city_data[t]);
				ULSdkManager.getInstance().moduleCheckerManager.addDebugInfo("cop", e)
			} else ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("cop")
		}
		setSimulateTemplateId(t) {
			if (this.simulateTemplateId = t, this.saveRecord(), "" != t) {
				let e = ULTools.format("已开启COP调试模式，模板id：%s", t);
				ULSdkManager.getInstance().moduleCheckerManager.addDebugInfo("cop_templateId", e)
			} else ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("cop_templateId")
		}
		triggerCopInfoResult() {
			let t = ULConst.DEFAULT_REFERANCE_BANNER_HEIGHT,
				e = ULConfig.getConfig();
			null != e.i_sdk_adv_reference_banner_height && (t = e.i_sdk_adv_reference_banner_height), ULSdkManager.getInstance().response(ULConst.CMD_COP_INFO_RESULT, {
				copInfo: ULSdkManager.getInstance().channelInfo.copInfo,
				referenceBannerHeight: t
			})
		}
		onCmdSdkCollectionModuleCheckerConfig(t) {
			let e = t.getReturnValue() || [],
				a = ULTools.clone(MCConsts.COP_CITY_ID_2_NAME),
				i = ULConfig.getConfig();
			i.t_sdk_cop_simulate_city_data && (ULLog.console.log("t_sdk_cop_simulate_city_data", i.t_sdk_cop_simulate_city_data), ULTools.forEachMap(i.t_sdk_cop_simulate_city_data, (t, e) => {
				a[t] = e
			})), ULLog.console.log("cityId_2_name", a), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "Cop模块信息:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "cop调试模式 模板id："
			}), e.push({
				type: "label",
				text: this.simulateTemplateId ? ULTools.format("%s(已开启) ", this.simulateTemplateId) : "已关闭 ",
				name: "labelCopTemplate"
			}), e.push({
				type: "inputBox",
				name: "inputCopTemplate"
			}), e.push({
				type: "button",
				text: "切换开关",
				onClick: () => {
					let t = "";
					if (this.simulateTemplateId) t = "";
					else if (!(t = ULSdkManager.getInstance().moduleCheckerManager.getItemText("inputCopTemplate"))) return void ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("请先设置 模板id");
					this.setSimulateTemplateId(t), ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCopTemplate", t ? ULTools.format("%s(已开启) ", t) : "已关闭 "), ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("已开启cop调试模式，策略将在下次启动游戏时生效")
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "cop调试模式 城市id："
			}), e.push({
				type: "label",
				text: ULTools.format("%s_%s", this.simulateCityId, a[this.simulateCityId]),
				name: "labelCopCity"
			}), e.push({
				type: "button",
				text: "选择城市..",
				onClick: () => {
					let t = Object.keys(a),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						let s = parseInt(i);
						isNaN(s) || e.push(s)
					}
					e.sort((t, e) => t - e), e.unshift("");
					let i = [];
					for (let t = 0; t < Math.min(15, e.length); t++) {
						const s = e[t];
						i.push({
							text: ULTools.format("%s_%s", s, a[s]),
							value: s
						})
					}
					i.push({
						text: "加载其他城市...",
						value: "more"
					});
					let s = [];
					for (let t = 0; t < e.length; t++) {
						const i = e[t];
						s.push({
							text: ULTools.format("%s_%s", i, a[i]),
							value: i
						})
					}
					let n = t => {
						"more" != t ? (ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCopCity", ULTools.format("%s_%s", t, a[t])), this.setSimulateCityId(t), "" != t ? ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("已开启cop调试模式，策略将在下次启动游戏时生效") : ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("cop调试模式已关闭")) : ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("选择需要模拟的城市：", s, n)
					};
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("选择需要模拟的城市：", i, n)
				}
			}), e.push({
				type: "button",
				text: "重新请求cop",
				onClick: () => {
					ULSdkManager.getInstance().moduleCheckerManager.alertPrompt("温馨提示", "重新请求cop不能保证所有功能生效，仅供查看cop使用。切换cop城市模拟后，请重新启动游戏测试功能", "知道了", () => {
						ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("已重新请求cop，不能保证所有功能生效"), this.requestServerCop(!1)
					})
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "查看cop："
			}), e.push({
				type: "button",
				text: "默认cop",
				onClick: () => {
					let t = this.localCop,
						e = Object.keys(t);
					e.sort();
					let a = "默认cop：\n";
					for (let i = 0; i < e.length; i++) {
						const s = e[i];
						let n = t[s];
						a += ULTools.format("[%s] = [%s]\n", s, n)
					}
					ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCop", a)
				}
			}), e.push({
				type: "button",
				text: "远程cop",
				onClick: () => {
					let t = this.serverCop,
						e = Object.keys(t);
					e.sort();
					let a = "远程cop：\n";
					for (let i = 0; i < e.length; i++) {
						const s = e[i];
						let n = t[s];
						a += ULTools.format("[%s] = [%s]\n", s, n)
					}
					ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCop", a)
				}
			}), e.push({
				type: "button",
				text: "生效cop",
				onClick: () => {
					let t = this.cop,
						e = Object.keys(t);
					e.sort();
					let a = "生效cop：\n";
					for (let i = 0; i < e.length; i++) {
						const s = e[i];
						let n = t[s];
						a += ULTools.format("[%s] = [%s]\n", s, n)
					}
					ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCop", a)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "labelArea",
				text: "<<这里显示cop信息>>",
				name: "labelCop"
			}), e.push({
				type: "newLine"
			}), t.setReturnValue(e, !0)
		}
	}
	class ULStatisManager {
		constructor() {
			this.bUploading = !1, this.lastTimerLoopTime = null, this.pointEventLog = {}, this.pointEventCategoryId_2_enabled = null, this.gameStartDataPreparationFlags = {}, this.commonEventLog = {}, this.levelStartLog = {}, this.levelCompletetLog = {}, this.videoPointLog = {}, this.buyActionLog = {}, this.coinChangeLog = {}
		}
		init() {
			this.channelInfoUuid = ULSdkManager.getInstance().channelInfo.uuid, this.megadataId = ULConfig.getConfig().s_sdk_megadata_server_type_id, this.loadRecord(), ULTimer.callLoop(ULConfig.getConfig().i_sdk_megadata_upload_span / 1e3, this.onTimerLoop.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_START, ULConst.PRIORITY_NONE, this.onCmdSdkOnGameStart.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_PAUSE, ULConst.PRIORITY_NONE, this.onCmdSdkOnGamePause.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_RESUME, ULConst.PRIORITY_NONE, this.onCmdSdkOnGameResume.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_COP_CHANGED, ULConst.PRIORITY_NONE, this.onCmdSdkOnCopChanged.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, 9, this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
		}
		loadRecord() {
			let t, e = ULStorageManager.getInstance().getStorage(this._getRecordKey()) || "{}";
			try {
				t = JSON.parse(e)
			} catch (e) {
				t = {}
			}
			this.cacheItems = t.cacheItems || [];
			let a = t.postMegadataTestMode || 0;
			this.postMegadataTestUserId = t.postMegadataTestUserId, this.setPostMegadataMode(a)
		}
		saveRecord() {
			let t = {
					cacheItems: this.cacheItems || [],
					postMegadataTestUserId: this.postMegadataTestUserId,
					postMegadataTestMode: this.postMegadataTestMode
				},
				e = JSON.stringify(t);
			ULStorageManager.getInstance().setStorage(this._getRecordKey(), e)
		}
		_getRecordKey() {
			let t = ULConfig.getConfig();
			return ULTools.format("ULStatisManager_record_%d", t.s_sdk_megadata_game_id)
		}
		onTimerLoop(t) {
			this.cacheItems.length <= 0 ? ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatisManager.onTimerLoop no cacheItems") : this.tryUploadToServer()
		}
		setPostMegadataMode(t) {
			if (this.postMegadataTestMode = t, this.saveRecord(), this.postMegadataTestMode) {
				this.channelInfoUuid = this.postMegadataTestUserId;
				let t = "数据上传已开启测试模式\n测试用户id:" + this.postMegadataTestUserId;
				ULSdkManager.getInstance().moduleCheckerManager.addDebugInfo("postMegadataTestModeInfo", t)
			} else this.channelInfoUuid = ULSdkManager.getInstance().channelInfo.uuid, ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("postMegadataTestModeInfo")
		}
		getPostMegadataMode() {
			return this.postMegadataTestMode
		}
		_report(t, e) {
			let a = ULConfig.getConfig(),
				i = (a.s_sdk_megadata_close_table_type_ids || "").split(";");
			for (let e = 0; e < i.length; e++) {
				let a = ULTools.format("%s-%s", this.megadataId, i[e]);
				if (a == t) return void ULLog.console.log("ULStatisManager._report 大数据分表控制表数据上传closeId:", a)
			}
			ULLog.console.log("ULStatisManager._report i_sdk_megadata_mode 1 ", a.i_sdk_megadata_mode);
			try {
				let a = {
					typeid: t,
					updata: e
				};
				ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_REPORT_ULSDK_EVENT, {
					parameter: a
				})
			} catch (t) {
				ULLog.console.log("ULStatisManager.CMD_SDK_ON_REPORT_ULSDK_EVENT error:", t)
			}
			if (!a.i_sdk_megadata_mode) return void ULLog.console.log("ULStatisManager._report !i_sdk_megadata_mode 关闭统计功能");
			if (this.postMegadataTestMode) {
				let e = this.megadataId + "-";
				t = t.replace(e, "1-"), ULLog.console.log("ULStatisManager._report postMegadataTestMode 已打开 typeid:", t)
			}
			if (0 == e.length) return void ULLog.console.log("ULStatisManager._report !updata 无有效数据，无法上报:", e);
			for (let t = 0; t < e.length; t++) {
				let a = e[t];
				"string" != typeof a && (a = null == a ? "" : "" + a), e[t] = a
			}
			let s = {
				typeid: t,
				updata: e
			};
			this.cacheItems.push(s), this.cacheItems.length >= ULConst.STATIS_UPLOAD_SINGLE_REQUEST_MAX_COUNT && this.tryUploadToServer()
		}
		tryUploadToServer() {
			if (this.bUploading) return void(ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatisManager.tryUploadToServer 数据上传中"));
			let t = Math.min(this.cacheItems.length, ULConst.STATIS_UPLOAD_SINGLE_REQUEST_MAX_COUNT);
			if (t <= 0) return void(ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatisManager.tryUploadToServer 没有数据需要上传"));
			this.bUploading = !0;
			let e = this.cacheItems.slice(0, t);
			this.cacheItems.splice(0, t), this.saveRecord();
			let a = ULConfig.getConfig(),
				i = a.s_sdk_megadata_url;
			if (this.postMegadataTestMode && (i = a.s_sdk_megadata_test_url), a.i_sdk_megadata_encrypt) return void ULTools.httpPostEncryption({
				url: i,
				postString: JSON.stringify(e),
				timeoutMillisecond: a.i_net_timeout,
				success: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  加密统计上报成功!"), this.bUploading = !1
				},
				fail: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  加密统计上报错误!", t), this.cacheItems = e.concat(this.cacheItems), this.saveRecord(), this.bUploading = !1
				}
			});
			let s = "updata=" + JSON.stringify(e);
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatisManager.tryUploadToServer"), ULConst.B_INNER_DEBUG && ULLog.console.log("  url:", i), ULConst.B_INNER_DEBUG && ULLog.console.log("  postData:", s), s = s.replace(";", ","), ULTools.httpPost({
				url: i,
				postData: s,
				timeoutMillisecond: a.i_net_timeout,
				success: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  统计上报成功!"), this.bUploading = !1
				},
				fail: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  统计上报错误!", t), this.cacheItems = e.concat(this.cacheItems), this.saveRecord(), this.bUploading = !1
				}
			})
		}
		uploadToServerRightNow(t, e) {
			let a = ULConfig.getConfig(),
				i = a.s_sdk_megadata_url;
			if (!a.i_sdk_megadata_mode) return void ULLog.console.log("ULStatisManager.uploadToServerRightNow !i_sdk_megadata_mode 关闭统计功能");
			if (this.postMegadataTestMode) {
				i = a.s_sdk_megadata_test_url;
				let e = this.megadataId + "-";
				t = t.replace(e, "1-"), ULLog.console.log("ULStatisManager.uploadToServerRightNow postMegadataTestMode 已打开 typeid:", t)
			}
			let s = {
					typeid: t,
					updata: e
				},
				n = [];
			if (n.push(s), a.i_sdk_megadata_encrypt) return void ULTools.httpPostEncryption({
				url: i,
				postString: JSON.stringify(n),
				timeoutMillisecond: a.i_net_timeout,
				success: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  统计上报成功!")
				},
				fail: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  统计上报错误!", t)
				}
			});
			let o = "updata=" + JSON.stringify(n);
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatisManager.uploadToServerRightNow"), ULConst.B_INNER_DEBUG && ULLog.console.log("  url:", i), ULConst.B_INNER_DEBUG && ULLog.console.log("  postData:", o), ULTools.httpPost({
				url: i,
				postData: o,
				timeoutMillisecond: a.i_net_timeout,
				success: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  统计上报成功!")
				},
				fail: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  统计上报错误!", t)
				}
			})
		}
		genPointEventLog() {
			let t = this.pointEventLog,
				e = [],
				a = [];
			ULTools.forEachMap(t, (t, e) => {
				let i = parseInt(t);
				a.push({
					eventId: i,
					v: e
				})
			}), a = ULTools.sortArrayByField(a, "eventId");
			for (let t = 0; t < a.length; t++) {
				const i = a[t];
				let s = [];
				ULTools.forEachMap(i.v, (t, e) => {
					let a = parseInt(t);
					s.push({
						paramId: a,
						count: e
					})
				}), s = ULTools.sortArrayByField(s, "paramId");
				for (let t = 0; t < s.length; t++) {
					const a = s[t];
					e.push(ULTools.format("%d-%d: %d", i.eventId, a.paramId, a.count))
				}
			}
			return e
		}
		getCommonEventLog() {
			let t = [],
				e = [],
				a = this.commonEventLog;
			ULLog.console.log("ULStatisManager.getCommonEventLog rawLog:", a), ULTools.forEachMap(a, (t, a) => {
				e.push(t)
			}), e.sort();
			for (let i = 0; i < e.length; i++) {
				let s = e[i];
				t.push(ULTools.format("%s: %d", s, a[s]))
			}
			return t
		}
		getLevelStartLog() {
			let t = [],
				e = [],
				a = this.levelStartLog;
			ULLog.console.log("ULStatisManager.getLevelStartLog rawLog:", a), ULTools.forEachMap(a, (t, a) => {
				e.push(t)
			}), e.sort();
			for (let i = 0; i < e.length; i++) {
				let s = e[i];
				t.push(ULTools.format("%s: %d", s, a[s]))
			}
			return t
		}
		getLevelCompletetLog() {
			let t = [],
				e = [],
				a = this.levelCompletetLog;
			ULLog.console.log("ULStatisManager.getLevelCompletetLog rawLog:", a), ULTools.forEachMap(a, (t, a) => {
				e.push(t)
			}), e.sort();
			for (let i = 0; i < e.length; i++) {
				let s = e[i];
				t.push(ULTools.format("%s: %d   时长：%d", s, a[s].count, a[s].playTime))
			}
			return t
		}
		getVideoPointLog() {
			let t = [],
				e = [],
				a = this.videoPointLog;
			ULLog.console.log("ULStatisManager.getVideoPointLog rawLog:", a), ULTools.forEachMap(a, (t, a) => {
				e.push(t)
			}), e.sort();
			for (let i = 0; i < e.length; i++) {
				let s = e[i];
				t.push(ULTools.format("%s: %d", s, a[s]))
			}
			return t
		}
		getBuyActionLog() {
			let t = [],
				e = [],
				a = this.buyActionLog;
			ULLog.console.log("ULStatisManager.getBuyActionLog rawLog:", a), ULTools.forEachMap(a, (t, a) => {
				e.push(t)
			}), e.sort();
			for (let i = 0; i < e.length; i++) {
				let s = e[i];
				t.push(ULTools.format("%s: %d", s, a[s]))
			}
			return t
		}
		getCoinChangeLog() {
			let t = [],
				e = [],
				a = this.coinChangeLog;
			ULLog.console.log("ULStatisManager.coinChangeLog rawLog:", a), ULTools.forEachMap(a, (t, a) => {
				e.push(t)
			}), e.sort();
			for (let i = 0; i < e.length; i++) {
				let s = e[i];
				t.push(ULTools.format("%s  次数：%d   货币数量：%d", s, a[s].count, a[s].changeCount))
			}
			return t
		}
		isReady() {
			return ULTools.getObjSize(this.gameStartDataPreparationFlags) <= 0
		}
		getPreparationFlags() {
			let t = [];
			return ULTools.forEachMap(this.gameStartDataPreparationFlags, (e, a) => {
				t.push(e)
			}), t
		}
		addPreparationFlag(t) {
			this.gameStartDataPreparationFlags[t] = !0
		}
		removePreparationFlag(t) {
			delete this.gameStartDataPreparationFlags[t]
		}
		setGameStartSourceMsg(t) {
			this.gameStartSourceMsg = t
		}
		reportGameStart() {
			let t = ULSdkManager.getInstance().channelInfo,
				e = ULConfig.getConfig(),
				a = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_BASE_INFO),
				i = [];
			i.push(this.gameStartTimeFormattedStr), i.push(this.channelInfoUuid), i.push(""), i.push(""), i.push(""), i.push(e.s_game_name), i.push(e.s_sdk_cop_game_id), i.push(t.appName), i.push(e.s_sdk_cop_channel_id), i.push(e.s_sdk_cop_version), i.push(t.osVersionMessage || ""), i.push("gameStart"), i.push(""), i.push(e.s_sdk_version), i.push(t.equipmentModel || ""), i.push(this.gameStartSourceMsg), i.push(t.platformVersionMessage || ""), this._report(a, i)
		}
		reportPayRequest() {
			this.reportPayResult("", "", "requestPay")
		}
		reportPaySuccess(t, e) {
			let a = e || 0,
				i = ULTools.format("%.2f", a / 100);
			this.reportPayResult(t, i, "success")
		}
		reportPayCancel(t, e) {
			let a = e || 0,
				i = ULTools.format("%.2f", a / 100);
			this.reportPayResult(t, i, "cancel")
		}
		reportPayFail(t, e) {
			let a = e || 0,
				i = ULTools.format("%.2f", a / 100);
			this.reportPayResult(t, i, "failed")
		}
		reportPayResult(t, e, a) {
			let i = ULSdkManager.getInstance().channelInfo,
				s = ULConfig.getConfig(),
				n = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_PAY_INFO),
				o = [];
			o.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")), o.push(this.channelInfoUuid), o.push(""), o.push(i.channelName), o.push(t || ""), o.push(e || ""), o.push(a || ""), o.push(s.s_sdk_cop_version), o.push(s.s_sdk_version), this._report(n, o)
		}
		reportAdvBranchRequest(t, e, a) {
			t.statisChannelName = e, t.statisSdkAdvId = a, this.reportAdvInfo(e, t.showAdvType, "branchAdvRequest", "", t.advGroupId, t.advId, t.tag, "", a, "")
		}
		reportAdvTotalRequest(t) {
			this.reportAdvInfo("", t.advType, "totalAdvRequest", "", t.advGroupId, t.advId, t.tag, "", "", "")
		}
		reportAdvSuccess(t, e) {
			t.statisNativeAdTitle = e, this.reportAdvInfo(t.statisChannelName, t.showAdvType, "success", "", t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvClicked(t) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "clicked", "", t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvPlayStart(t) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "playStart", "", t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvPlayCompletion(t) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "playCompletion", "", t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvLoadAdvRequest(t) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "loadAdvRequest", "", t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvLoadAdvSuccess(t) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "loadAdvSuccess", "", t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvLoadAdvFailed(t, e) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "loadAdvFailed", e, t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvFail(t, e) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "failed", e, t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvClose(t, e) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "hide", "", t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, e)
		}
		reportAdvInfo(t, e, a, i, s, n, o, r, l, c) {
			ULSdkManager.getInstance().channelInfo;
			let h = ULConfig.getConfig(),
				d = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_ADV_INFO),
				_ = [];
			r && r.length > 6 && (r = r.substr(0, 6)), _.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")), _.push(this.channelInfoUuid), _.push(""), _.push(t || ""), _.push(e || ""), _.push(a || ""), _.push(i || ""), _.push(h.s_sdk_cop_version), _.push(h.s_sdk_version), _.push(s || ""), _.push(n || ""), _.push(o || ""), _.push(r || ""), _.push(l || ""), _.push(c || ""), ULLog.console.log("reportAdvInfo result:", a), "hide" == a ? this.uploadToServerRightNow(d, _) : this._report(d, _)
		}
		reportCopSuccess(t) {
			this.reportCopResult("success", "", t)
		}
		reportCopFail(t) {
			this.reportCopResult("filed", t, "")
		}
		reportCopResult(t, e, a) {
			ULSdkManager.getInstance().channelInfo;
			let i = ULConfig.getConfig(),
				s = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_COP_REQUEST),
				n = [];
			n.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")), n.push(this.channelInfoUuid), n.push(""), n.push("coprequest"), n.push(t || ""), n.push(i.s_sdk_cop_version), n.push(i.s_sdk_version), n.push(e || ""), n.push(""), this._report(s, n)
		}
		reportUserEvent(t) {
			let e = ULSdkManager.getInstance().channelInfo,
				a = ULConfig.getConfig(),
				i = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_USER_EVENT),
				s = [];
			s.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")), s.push(this.channelInfoUuid), s.push("");
			for (let e = 0; e < t.length; e++) {
				const a = t[e];
				s.push(a)
			}
			s.push(a.s_sdk_cop_version), s.push(a.s_sdk_version), s.push(e.channelName), this._report(i, s)
		}
		reportUserActionEvent(t, e) {
			let a = ULSdkManager.getInstance().channelInfo,
				i = ULConfig.getConfig(),
				s = [0, 1, 2, 5, 6, 7],
				n = [0, 1, 2, 11, 12, 13, 14],
				o = [0, 1, 2, 7, 8, 9],
				r = [0, 1, 2, 6, 7, 8],
				l = [0, 1, 2, 6, 7, 8],
				c = [0, 1, 2, 6, 7, 8],
				h = [0, 1, 2, 5, 6, 7],
				d = [ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss"), this.channelInfoUuid, "", i.s_sdk_cop_version, i.s_sdk_version, a.copChannelId],
				_ = [];
			if (e == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_COMMON_EVENT)) {
				_ = this.rebuildData(c, d, t);
				let e = t[0] + "-" + t[1];
				this.commonEventLog[e] = this.commonEventLog[e] ? this.commonEventLog[e] + 1 : 1
			} else if (e == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_START_EVENT)) {
				_ = this.rebuildData(s, d, t);
				let e = t[0];
				this.levelStartLog[e] = this.levelStartLog[e] ? this.levelStartLog[e] + 1 : 1
			} else if (e == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT)) {
				let e = t[0] + "-" + t[1];
				this.levelCompletetLog[e] || (this.levelCompletetLog[e] = {
					count: 0,
					playTime: 0
				}), this.levelCompletetLog[e].count = this.levelCompletetLog[e].count ? this.levelCompletetLog[e].count + 1 : 1, this.levelCompletetLog[e].playTime = this.levelCompletetLog[e].playTime ? this.levelCompletetLog[e].playTime + parseInt(t[t.length - 1]) : parseInt(t[t.length - 1]);
				let a = t.pop();
				d.splice(3, 0, a), _ = this.rebuildData(n, d, t)
			} else if (e == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_VIDEO_POINT_EVENT)) {
				_ = this.rebuildData(h, d, t);
				let e = t[0] + "-" + t[1];
				this.videoPointLog[e] = this.videoPointLog[e] ? this.videoPointLog[e] + 1 : 1
			} else if (e == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_BUY_ACTION)) {
				_ = this.rebuildData(l, d, t);
				let e = t[0] + "-" + t[1] + "-" + t[2];
				this.buyActionLog[e] = this.buyActionLog[e] ? this.buyActionLog[e] + 1 : 1
			} else if (e == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_COIN_CHANGE_EVENT)) {
				_ = this.rebuildData(o, d, t);
				let e = t[0] + "-" + t[1] + "-" + t[3];
				this.coinChangeLog[e] || (this.coinChangeLog[e] = {
					count: 0,
					changeCount: 0
				}), this.coinChangeLog[e].count = this.coinChangeLog[e].count ? this.coinChangeLog[e].count + 1 : 1, this.coinChangeLog[e].changeCount = this.coinChangeLog[e].changeCount ? this.coinChangeLog[e].changeCount + parseInt(t[2]) : parseInt(t[2])
			} else e == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_ITEM_BUY) && (_ = this.rebuildData(r, d, t));
			this._report(e, _)
		}
		rebuildData(t, e, a) {
			let i = ULTools.clone(t),
				s = ULTools.clone(e),
				n = ULTools.clone(a),
				o = [];
			for (; s.length || n.length;) {
				i[0] == o.length ? (o.push(s.shift()), i.shift()) : n.length ? o.push(n.shift()) : o.push("")
			}
			return o
		}
		reportOnlineTime(t) {
			ULSdkManager.getInstance().channelInfo;
			let e = ULConfig.getConfig(),
				a = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_ONLINE_TIME),
				i = [];
			i.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")), i.push(this.channelInfoUuid), i.push(""), i.push(this.gameStartTimeFormattedStr || ""), i.push(t.toString() || "0"), i.push(e.s_sdk_cop_version), i.push(e.s_sdk_version), this.uploadToServerRightNow(a, i)
		}
		reportShareSuccess(t) {
			let e = ["openShare", "success", t || 0].join("_"),
				a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {};
			(a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", e]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.open_share || "100", 1, t || 0])
		}
		reportShareFail(t) {
			let e = ["openShare", "fail", t || 0].join("_"),
				a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {};
			(a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", e]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.open_share || "100", 0, t || 0])
		}
		reportAppShare(t) {
			let e = ["openShare", "appShare", t || 0].join("_"),
				a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {};
			(a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", e]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.open_share || "100", 2, t || 0])
		}
		reportShareClick(t) {
			let e = ["clickShare", t || ""].join("_"),
				a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {};
			(a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", e]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.click_share || "101", t || "", ""])
		}
		reportAddSubcrible(t) {
			let e = ["addSubscrible", t || ""].join("_"),
				a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {};
			(a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", e]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.add_subscrible || "102", t || "", ""])
		}
		reportSubcribleClick(t) {
			let e = ["clickSubscrible", t || ""].join("_"),
				a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {};
			(a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", e]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.click_subscrible || "103", t || "", ""])
		}
		reportClickMoreGameIcon(t, e) {
			let a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {},
				s = i.click_more_game_icon_list || "106";
			"single" == t ? s = i.click_more_game_icon_single || "104" : "reward" == t && (s = i.click_more_game_icon_reward || "105"), (a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? this.reportPointEvent(s, parseInt(e)) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", s, e || "", ""])
		}
		reportClickMoreGameButtonToChannelSystem() {
			let t = ULConfig.getConfig(),
				e = (t.t_sdk_common_event_ids || {}).click_more_game_channel_system_button || "108";
			(t.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? this.reportPointEvent(e, 0) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", e, "", ""])
		}
		reportOpenCdk(t) {
			let e = ["openCdk", t].join("_"),
				a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {},
				s = a.s_sdk_megadata_url || "";
			ULLog.console.log("ULStatisManager.reportOpenCdk code:", t), s.indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", e]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.open_cdk || "107", t || 0, ""])
		}
		reportJumpGame(t, e, a, i, s) {
			let n = ULConfig.getConfig(),
				o = (n.s_sdk_jump_game_statis_game_indexes || "").split(";"),
				r = {};
			for (let t = 0; t < o.length; t++) r[o[t]] = !0;
			if (!r[s.split("_")[0]]) return void ULLog.console.log("ULStatisManager.reportJumpGame 当前跳转的游戏数据上报没开,targetIconId:", s);
			let l = n.s_sdk_megadata_server_jump_game_type_id,
				c = [];
			c.push(t), c.push(e), c.push(a), c.push(i), c.push(s), this._report(l, c)
		}
		_checkPointEventSwitch(t) {
			if (!this.pointEventCategoryId_2_enabled) {
				let t = ULConfig.getConfig().s_sdk_megadata_point_event_open_category_ids.split(";"),
					e = {};
				for (let a = 0; a < t.length; a++) {
					e[t[a]] = !0
				}
				this.pointEventCategoryId_2_enabled = e
			}
			let e = Math.floor(t / 1e3);
			return !!this.pointEventCategoryId_2_enabled[e]
		}
		reportPointEvent(t, e) {
			if (t = parseInt(t) || 0, isNaN(t) && (t = 0), t = ULTools.clampf(t, 0, 65535), e = parseInt(e) || 0, isNaN(e) && (e = 0), e = ULTools.clampf(e, 0, 65535), ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatisManager.reportPointEvent", t, e), !this._checkPointEventSwitch(t)) return void(ULConst.B_INNER_DEBUG && ULLog.console.log("  打点统计上报未开启：", ULConfig.getConfig().s_sdk_megadata_point_event_open_category_ids));
			let a = "",
				i = ULSdkManager.getInstance().channelInfo._sdkUserId;
			ULConst.B_INNER_DEBUG && ULLog.console.log(ULTools.format("  sdkUserId = [%s]", i));
			/(\d+)_(.*)_(\d+)/.test(i) ? (a = RegExp.$2) && 22 == a.length ? a = a.substr(2, a.length - 2) : (ULConst.B_INNER_DEBUG && ULLog.console.log("  核心长度不匹配，直接使用sdkUserId"), a = i) : (ULConst.B_INNER_DEBUG && ULLog.console.log("  userId规则不匹配，直接使用sdkUserId"), a = i), ULConst.B_INNER_DEBUG && ULLog.console.log(ULTools.format("  shortUserId = [%s]", a));
			ULSdkManager.getInstance().channelInfo;
			let s = ULConfig.getConfig(),
				n = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_POINT_EVENT),
				o = [];
			o.push(a), o.push(s.s_sdk_cop_channel_id), o.push(t.toString()), o.push(e.toString()), this._report(n, o);
			let r = this.pointEventLog,
				l = r[t];
			l || (l = {}, r[t] = l), l[e] = (l[e] || 0) + 1, ULConst.B_INNER_DEBUG && ULLog.console.log("  log", r)
		}
		onCmdSdkOnGameStart(t) {
			if (this.gameStartTimeFormattedStr = ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss"), this.gameLastResumeTime = ULTools.time(), ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatiManager.onCmdSdkOnGameStart", this.gameStartTimeFormattedStr, this.gameLastResumeTime), this.isReady()) return this.reportGameStart(), void this.tryUploadToServer();
			let e = this.getPreparationFlags();
			ULLog.console.log("ULStatiManager.onCmdSdkOnGameStart 上报数据没有准备好,flags:", e.join(","));
			let a = ULConfig.getConfig().i_game_start_ready_timeout / 1e3;
			ULTimer.callLoop(1 / 60, t => {
				if (t.usedTime >= a) {
					t.stop();
					let e = this.getPreparationFlags();
					return ULLog.console.log("ULStatiManager.onCmdSdkOnGameStart 等待超时！直接触发reportGameStart flags:", e.join(",")), this.reportGameStart(), void this.tryUploadToServer()
				}
				if (this.isReady()) return t.stop(), ULLog.console.log("ULStatiManager.onCmdSdkOnGameStart 准备完毕！触发reportGameStart"), this.reportGameStart(), void this.tryUploadToServer()
			})
		}
		onCmdSdkOnGamePause(t) {
			if (!this.gameLastResumeTime) return void ULLog.console.warn("ULStatiManager.onCmdSdkOnGamePause gameLastResumeTime not found! 无法上报在线时间");
			let e = ULTools.time() - this.gameLastResumeTime;
			if (ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatiManager.onCmdSdkOnGamePause", e), e <= 5 || e > 86400) return;
			this.gameLastResumeTime = ULTools.time(), this.reportOnlineTime(Math.floor(e));
			let a = ULConfig.getConfig();
			ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [a.s_sdk_miniplay_user_play_game_time_event_id, Math.floor(e)]), this.saveRecord()
		}
		onCmdSdkOnGameResume(t) {
			this.gameLastResumeTime = ULTools.time(), ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatiManager.onCmdSdkOnGameResume", this.gameLastResumeTime)
		}
		onCmdSdkOnCopChanged(t) {
			this.pointEventCategoryId_2_enabled = null
		}
		onCmdSdkCollectionModuleCheckerConfig(t) {
			let e = t.getReturnValue() || [];
			e.push({
				type: "newLine"
			});
			let a = ["正式模式", "测试模式"],
				i = "当前数据上传模式:" + a[this.postMegadataTestMode];
			e.push({
				type: "label",
				text: i,
				name: "labelPostDataMode"
			}), e.push({
				type: "button",
				text: "切换数据上传模式..",
				onClick: () => {
					let t = ULSdkManager.getInstance().moduleCheckerManager.getItemText("labelPostTestModeUserId"),
						e = [];
					e.push({
						text: "测试模式 ( 用户id:" + t + ")",
						value: 1
					}), e.push({
						text: "正式模式",
						value: 0
					});
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("切换数据上传模式:", e, e => {
						let i = "当前数据上传模式:" + a[this.postMegadataTestMode];
						if (e) {
							if (t.length < 1) return void ULSdkManager.getInstance().moduleCheckerManager.alertPrompt("提示", "请设置测试用户id", "好的");
							this.postMegadataTestUserId = t, ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("已开启测试模式")
						} else this.postMegadataTestUserId = null, ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("测试模式已关闭");
						this.setPostMegadataMode(e), ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelPostDataMode", i)
					})
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "测试用户id"
			}), e.push({
				type: "inputBox",
				text: this.postMegadataTestUserId,
				name: "labelPostTestModeUserId"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "清理游戏存档:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "清理游戏存档",
				onClick: () => {
					ULSdkManager.getInstance().response(ULConst.CMD_CLEAN_UP_GAME_ARCHIVE, {})
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "跳过新手引导:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "跳过新手引导",
				onClick: () => {
					ULSdkManager.getInstance().response(ULConst.CMD_JUMP_NEW_USER_GUIDE, {})
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "是否显示客户端打点信息界面开关:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "打开",
				onClick: () => {
					ULSdkManager.getInstance().response(ULConst.CMD_SHOW_POINT_DEBUG_INFO, {
						state: 1
					})
				}
			}), e.push({
				type: "button",
				text: "关闭",
				onClick: () => {
					ULSdkManager.getInstance().response(ULConst.CMD_SHOW_POINT_DEBUG_INFO, {
						state: 0
					})
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "打点统计记录:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "点击查看..",
				onClick: () => {
					let t = this.genPointEventLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						e.push({
							text: i,
							value: i
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("打点统计记录(事件id-状态：次数)：", e, () => {}, !0)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "自定义统计记录:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "点击查看..",
				onClick: () => {
					let t = this.getCommonEventLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						e.push({
							text: i,
							value: i
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("自定义统计记录(事件id-状态：次数)：", e, () => {}, !0)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "关卡开始统计记录:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "点击查看..",
				onClick: () => {
					let t = this.getLevelStartLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						e.push({
							text: i,
							value: i
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("关卡开始统计记录(关卡名：次数):", e, () => {}, !0)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "关卡结束统计记录:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "点击查看..",
				onClick: () => {
					let t = this.getLevelCompletetLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						e.push({
							text: i,
							value: i
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("关卡结束统计记录(关卡名-结果-次数):", e, () => {}, !0)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "视频埋点转化统计记录:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "点击查看..",
				onClick: () => {
					let t = this.getVideoPointLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						e.push({
							text: i,
							value: i
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("视频埋点转化统计记录(视频点-状态：次数)", e, () => {}, !0)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "内购行为统计记录:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "点击查看..",
				onClick: () => {
					let t = this.getBuyActionLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						e.push({
							text: i,
							value: i
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("内购行为统计记录(弹出理由-商品名-结果)", e, () => {}, !0)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "货币统计记录:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "点击查看..",
				onClick: () => {
					let t = this.getCoinChangeLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						e.push({
							text: i,
							value: i
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("货币统计记录(货币名称-变化类型-变化原因)", e, () => {}, !0)
				}
			}), t.setReturnValue(e, !0)
		}
	}
	class MCItem {
		initByData(t) {
			this.type = t.type, this.type = t.type || "newLine", this.name = t.name || "", this.text = t.text || "", this.width = t.width || 0, this.height = t.height || 0, this.fOnClick = t.onClick, this.fOnTextChanged = t.onTextChanged
		}
		setText(t) {
			this.text = t, this.fOnTextChanged instanceof Function && this.fOnTextChanged(t)
		}
		triggerOnClick() {
			this.fOnClick instanceof Function && this.fOnClick()
		}
	}
	const BUTTON_WIDTH = 150,
		BUTTON_HEIGHT = 40,
		NEW_LINE_HEIGHT = 20,
		FONT_SIZE = 20,
		PENDING = 10,
		GAP = 4;
	let _cc = window.cc;
	class MCPanelCreator {
		constructor() {
			this.nodeReferenceRects = {}
		}
		getNodeCanvas() {
			if (!_cc) return ULLog.console.warn("MCPanelCreator.getNodeCanvas 未检测到creator环境！"), null;
			let t = _cc.director.getScene();
			if (!t) return ULLog.console.warn("MCPanelCreator.getNodeCanvas scene not found!"), null;
			let e = t.getChildByName("Canvas");
			return e || (ULLog.console.warn("MCPanelCreator.getNodeCanvas nodeCanvas not found!"), null)
		}
		addFillerSprite(t, e) {
			let a = t.getContentSize(),
				i = t.addComponent(_cc.Sprite);
			i.sizeMode = _cc.Sprite.SizeMode.CUSTOM, i.type = _cc.Sprite.Type.SIMPLE, _cc.loader.loadRes("_ulsdk_ui/white_dot", _cc.SpriteFrame, (e, s) => {
				e ? ULLog.console.warn("MCPanelCreator.addFillerSprite err!", e) : (i.spriteFrame = s, t.setContentSize(a))
			}), t.color = e, t.opacity = e.getA()
		}
		registerTouchHandler(t, e, a = !1, i = !0, s = !1) {
			let n = t;
			if (!n) return;
			if (!e) return;
			n.on(_cc.Node.EventType.TOUCH_START, t => {
				let s = t.getID() || 0;
				return !(!a && null != n.__touch_id || (t.name = "began", i && t.stopPropagation(), n.__touch_id = s, e(t), 0))
			}, null, s), n.on(_cc.Node.EventType.TOUCH_MOVE, t => {
				let i = t.getID() || 0;
				(a || i == n.__touch_id) && (t.name = "moved", e(t))
			}, null, s), n.on(_cc.Node.EventType.TOUCH_END, t => {
				let i = t.getID() || 0;
				(a || i == n.__touch_id) && (t.name = "ended", n.__touch_id = null, e(t))
			}, null, s), n.on(_cc.Node.EventType.TOUCH_CANCEL, t => {
				let i = t.getID() || 0;
				(a || i == n.__touch_id) && (t.name = "cancelled", n.__touch_id = null, e(t))
			}, null, s)
		}
		isTouchEventClick(t) {
			if ("ended" != t.name && "cancelled" != t.name) return !1;
			let e = t.getStartLocation(),
				a = t.getLocation(),
				i = e.x - a.x,
				s = e.y - a.y;
			return i * i + s * s <= 400
		}
		createItemByData(t) {
			let e = new MCItem;
			e.initByData(t);
			let a = this.nodeContainer;
			switch (t.type) {
				case "label": {
					let t = new _cc.Node;
					t.parent = a, t.setAnchorPoint(.5, .5), t.on(_cc.Node.EventType.SIZE_CHANGED, () => {
						e.width = t.width, e.height = t.height, this.onItemNodeResize()
					}), t.addComponent(_cc.Label).string = e.text, t.getComponent(_cc.Label).fontSize = FONT_SIZE, t.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.LEFT, t.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, e.renderNode = t;
					break
				}
				case "labelArea": {
					let t = new _cc.Node;
					t.parent = a, t.setAnchorPoint(.5, .5), t.on(_cc.Node.EventType.SIZE_CHANGED, () => {
						e.width = t.width, e.height = t.height, this.onItemNodeResize()
					}), t.addComponent(_cc.Label).string = e.text, t.getComponent(_cc.Label).fontSize = FONT_SIZE, t.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.LEFT, t.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, t.getComponent(_cc.Label).overflow = _cc.Label.Overflow.RESIZE_HEIGHT, t.width = a.width - 2 * PENDING, t.height = FONT_SIZE, e.renderNode = t;
					break
				}
				case "button": {
					let t = new _cc.Node;
					t.parent = a, t.on(_cc.Node.EventType.SIZE_CHANGED, () => {
						e.width = t.width, e.height = t.height, this.onItemNodeResize()
					}), t.width = e.width || BUTTON_WIDTH, t.height = e.height || BUTTON_HEIGHT;
					let i = new _cc.Node;
					i.parent = t, i.setContentSize(i.parent.getContentSize()), this.addFillerSprite(i, _cc.color(200, 200, 200, 255));
					let s = new _cc.Node;
					s.parent = t, s.setAnchorPoint(.5, .5), s.addComponent(_cc.Label).string = e.text, s.getComponent(_cc.Label).fontSize = FONT_SIZE, s.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, s.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, s.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, s.width = t.width, s.height = t.height, s.color = _cc.Color.BLACK, this.registerTouchHandler(t, t => {
						switch (t.name) {
							case "began":
								s.color = _cc.Color.GREEN;
								break;
							case "moved":
								break;
							default:
								s.color = _cc.Color.BLACK
						}
						this.isTouchEventClick(t) && e.triggerOnClick()
					}), e.renderNode = t;
					break
				}
				case "inputBox": {
					let t = new _cc.Node;
					t.parent = a, t.on(_cc.Node.EventType.SIZE_CHANGED, () => {
						e.width = t.width, e.height = t.height, this.onItemNodeResize()
					}), t.width = e.width || BUTTON_WIDTH, t.height = e.height || BUTTON_HEIGHT;
					let i = new _cc.Node;
					i.parent = t, i.setContentSize(i.parent.getContentSize()), this.addFillerSprite(i, _cc.color(200, 200, 200, 255));
					let s = t.addComponent(_cc.EditBox);
					s.fontSize = FONT_SIZE, s.fontColor = _cc.Color.BLACK, s.lineHeight = t.height, s.inputMode = _cc.EditBox.InputMode.SINGLE_LINE, s.maxLength = 1024, s.placeholder = "<<输入框>>", s.placeholderFontSize = FONT_SIZE, s.placeholderFontColor = _cc.Color.GRAY;
					let n = t.getComponentsInChildren(_cc.Label);
					for (let t = 0; t < n.length; t++) {
						n[t].verticalAlign = _cc.Label.VerticalAlign.CENTER
					}
					s.node.on("text-changed", () => {
						let t = s.string;
						e.setText(t)
					}), e.renderNode = t;
					break
				}
				case "newLine":
					e.width = a.width - 2 * PENDING, e.height = NEW_LINE_HEIGHT
			}
			return e
		}
		doLayout() {
			if (!this.items) return;
			let t = this.nodePanel.width - 20,
				e = [],
				a = PENDING,
				i = -PENDING,
				s = 0;
			for (let n = 0; n < this.items.length; n++) {
				let o = this.items[n],
					r = o.renderNode || {
						x: 0,
						y: 0
					};
				if (a + o.width > t) {
					a = 0;
					for (let t = 0; t < e.length; t++) {
						(e[t].renderNode || {
							x: 0,
							y: 0
						}).y = i - s / 2
					}
					a = PENDING, i -= s + GAP, e = [], s = 0
				}
				s = Math.max(s, o.height), e.push(o), r.x = a + o.width / 2, a += o.width + GAP
			}
			for (let t = 0; t < e.length; t++) {
				(e[t].renderNode || {
					x: 0,
					y: 0
				}).y = i - s / 2
			}
			i -= s - PENDING, this.nodeContainer.height = Math.max(this.nodePanel.height, -i)
		}
		onItemNodeResize() {
			this.doLayout()
		}
		getItemByName(t) {
			for (let e = 0; e < this.items.length; e++) {
				const a = this.items[e];
				if (a.name == t) return a
			}
			return null
		}
		show(t) {
			let e = this.getNodeCanvas();
			if (!e) return;
			let a = new _cc.Node;
			a.parent = e, a.setContentSize(e.getContentSize()), a.zIndex = _cc.macro.MAX_ZINDEX, this.nodePanel = a;
			let i = new _cc.Node;
			i.parent = a, i.setContentSize(i.parent.getContentSize()), this.addFillerSprite(i, _cc.color(0, 0, 0, 191)), this.registerTouchHandler(this.nodePanel, t => {
				this.isTouchEventClick(t)
			});
			let s = new _cc.Node;
			s.setAnchorPoint(0, 1), s.parent = this.nodePanel, s.setContentSize(e.getContentSize()), this.nodeContainer = s;
			let n = this.nodePanel.addComponent(_cc.ScrollView);
			n.horizontal = !1, n.vertical = !0, n.content = s, n.cancelInnerEvents = !1, n.elastic = !0;
			let o = [];
			for (let e = 0; e < t.length; e++) {
				const a = t[e];
				let i = this.createItemByData(a);
				o.push(i)
			}
			this.items = o, this.doLayout()
		}
		close() {
			_cc.isValid(this.nodePanel) && this.nodePanel.destroy(), this.nodePanel = null, this.items = []
		}
		getItemText(t) {
			let e = this.getItemByName(t);
			return e ? e.text : ""
		}
		setItemText(t, e) {
			let a = this.getItemByName(t);
			if (!a) return;
			a.setText(e);
			let i = a.renderNode;
			if (i instanceof _cc.Node) {
				let t = i.getComponent(_cc.Label) || i.getComponentInChildren(_cc.Label);
				t && (t.string = e);
				let a = i.getComponent(_cc.EditBox) || i.getComponentInChildren(_cc.EditBox);
				a && (a.string = e)
			}
		}
		showMsgTip(t) {
			let e = this.getNodeCanvas();
			if (!e) return;
			let a = new _cc.Node;
			a.parent = e, a.width = e.width, a.height = 20, a.zIndex = _cc.macro.MAX_ZINDEX;
			let i = a.addComponent(_cc.Label);
			i.string = t, i.fontSize = 20, i.enableWrapText = !0, a.x = 0, a.y = .25 * e.height, a.runAction(_cc.sequence(_cc.moveBy(1.5, 0, 50), _cc.callFunc(() => {
				a.destroy()
			})))
		}
		showPickerDialog(t, e, a, i) {
			let s = this.getNodeCanvas();
			if (!s) return;
			let n = ULTools.scaleInRange(e.length, 8.5, 17.5, 430, 826),
				o = new _cc.Node;
			o.parent = s, o.setContentSize(s.getContentSize()), o.zIndex = _cc.macro.MAX_ZINDEX, this.registerTouchHandler(o, t => {
				this.isTouchEventClick(t) && o.destroy()
			});
			let r = new _cc.Node;
			r.parent = o, r.setContentSize(r.parent.getContentSize()), this.addFillerSprite(r, _cc.color(0, 0, 0, 127));
			let l = new _cc.Node;
			l.parent = o, l.width = s.width - 100, l.height = n, this.registerTouchHandler(l, t => {}), (r = new _cc.Node).parent = l, r.setContentSize(r.parent.getContentSize()), this.addFillerSprite(r, _cc.color(167, 167, 167, 255));
			let c = new _cc.Node;
			c.parent = l, c.y = l.height / 2 - 25, c.x = 0, c.addComponent(_cc.Label).string = t, c.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, c.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, c.getComponent(_cc.Label).fontSize = 40, c.width = l.width - 10, c.height = 40;
			let h = new _cc.Node;
			h.parent = l, h.width = l.width - 10, h.height = l.height - 50, h.x = 0, h.y = -l.height / 2 + h.height / 2 + 5, this.addFillerSprite(h, _cc.color(97, 97, 97, 255));
			let d = new _cc.Node;
			d.parent = l, d.width = l.width - 10, d.height = l.height - 50, d.x = 0, d.y = -l.height / 2 + d.height / 2 + 5, d.addComponent(_cc.Mask);
			let _ = new _cc.Node;
			_.setAnchorPoint(0, 1), _.parent = d, _.setContentSize(d.getContentSize());
			let g = d.addComponent(_cc.ScrollView);
			g.horizontal = !1, g.vertical = !0, g.content = _, g.cancelInnerEvents = !1, g.elastic = !0;
			let u = 0;
			for (let t = 0; t < e.length; t++) {
				const s = e[t];
				let n = new _cc.Node;
				n.parent = _, n.width = d.width, n.height = 40, n.x = _.width / 2, n.y = u - n.height / 2;
				let r = new _cc.Node;
				r.parent = n, r.setContentSize(r.parent.getContentSize()), this.addFillerSprite(r, _cc.color(0, 0, 0, 63));
				let l = new _cc.Node;
				l.parent = n, l.setAnchorPoint(0, .5), l.x = -n.width / 2 + 5, l.y = 0;
				let c = l.addComponent(_cc.Label);
				c.fontSize = FONT_SIZE, c.lineHeight = FONT_SIZE, c.verticalAlign = _cc.Label.VerticalAlign.CENTER, c.horizontalAlign = _cc.Label.HorizontalAlign.LEFT, c.string = s.text, this.registerTouchHandler(n, t => {
					this.isTouchEventClick(t) && (a(s.value), i || o.destroy())
				}), u -= n.height + 4
			}
			_.height = Math.max(d.height, -u)
		}
		showPromptDialog(t, e, a, i) {
			let s = this.getNodeCanvas();
			if (!s) return ULLog.console.warn("MCPanelCreator.showPromptDialog nodeCanvas not found!"), void ULTimer.callLater(.1, () => {
				this.showPromptDialog(t, e, a, i)
			});
			let n = new _cc.Node;
			n.parent = s, n.setContentSize(s.getContentSize()), n.zIndex = _cc.macro.MAX_ZINDEX, this.registerTouchHandler(n, t => {
				this.isTouchEventClick(t) && ULLog.console.log("click bg")
			});
			let o = new _cc.Node;
			o.parent = n, o.setContentSize(o.parent.getContentSize()), this.addFillerSprite(o, _cc.color(0, 0, 0, 127));
			let r = !1,
				l = new _cc.Node;
			l.parent = n, l.addComponent(_cc.Component).onDestroy = (() => {
				ULLog.console.log("MCPanelCreator.showPromptDialog triggerNode onDestroy", r), r || (ULLog.console.log("MCPanelCreator.showPromptDialog nodeShadow被意外销毁，0.1秒后尝试重新创建提示"), ULTimer.callLater(.1, () => {
					this.showPromptDialog(t, e, a, i)
				}))
			});
			let c = new _cc.Node;
			c.parent = n, c.width = 460, c.height = 320, this.registerTouchHandler(c, t => {});
			let h = new _cc.Node;
			h.parent = c, h.setContentSize(h.parent.getContentSize()), _cc.loader.loadRes("_ulsdk_ui/bg_01", _cc.SpriteFrame, (t, e) => {
				if (t) return void ULLog.console.warn("MCPanelCreator.showPromptDialog nodeDialogBg load sprite error", t);
				let a = h.getContentSize(),
					i = e.getOriginalSize();
				e.insetLeft = i.width / 3, e.insetRight = i.width / 3, e.insetTop = i.height / 3, e.insetBottom = i.height / 3;
				let s = h.addComponent(_cc.Sprite);
				s.spriteFrame = e, s.type = _cc.Sprite.Type.SLICED, s.sizeMode = _cc.Sprite.SizeMode.CUSTOM, h.setContentSize(a)
			});
			let d = new _cc.Node;
			d.parent = c, d.y = c.height / 2 - 45, d.x = 0, d.color = _cc.color(38, 38, 38, 255), d.addComponent(_cc.Label).string = t || "标题", d.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, d.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, d.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, d.getComponent(_cc.Label).fontSize = 32, d.width = c.width - 10, d.height = 40;
			let _ = new _cc.Node;
			_.parent = c, _.y = c.height / 2 - 155, _.x = 0, _.color = _cc.color(96, 96, 96, 255), _.addComponent(_cc.Label).string = e || "内容", _.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, _.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, _.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, _.getComponent(_cc.Label).fontSize = 24, _.width = c.width - 50, _.height = 160;
			let g = -(160 * a.length + 30 * (a.length - 1)) / 2,
				u = [];
			for (let t = 0; t < a.length; t++) {
				const e = a[t];
				let s = new _cc.Node;
				s.parent = c, s.x = g + 160 * (t + .5) + 30 * t, s.y = -c.height / 2 + 50, s.setContentSize(160, 56), u.push(s);
				let o = new _cc.Node;
				o.parent = s, o.setContentSize(s.getContentSize()), _cc.loader.loadRes("_ulsdk_ui/btn_01", _cc.SpriteFrame, (t, e) => {
					if (t) return void ULLog.console.warn("MCPanelCreator.showPromptDialog nodeButtonBg load sprite error", t);
					let a = o.getContentSize(),
						i = e.getOriginalSize();
					e.insetLeft = i.width / 3, e.insetRight = i.width / 3, e.insetTop = i.height / 3, e.insetBottom = i.height / 3;
					let s = o.addComponent(_cc.Sprite);
					s.spriteFrame = e, s.type = _cc.Sprite.Type.SLICED, s.sizeMode = _cc.Sprite.SizeMode.CUSTOM, o.setContentSize(a)
				});
				let l = new _cc.Node;
				l.parent = s, l.y = 0, l.x = 0, l.color = _cc.color(255, 255, 255, 255), l.addComponent(_cc.Label).string = e || "按钮" + (t + 1), l.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, l.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, l.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, l.getComponent(_cc.Label).fontSize = 30, l.width = o.width - 10, l.height = o.height - 10, this.registerTouchHandler(s, e => {
					if ("began" == e.name ? s.scale = 1.1 : "moved" == e.name || (s.scale = 1), this.isTouchEventClick(e)) {
						let e = i[t];
						if (e instanceof Function) {
							e() || (r = !0, n.destroy())
						} else r = !0, n.destroy()
					}
				})
			}
		}
		showWebView(t, e) {
			this.closeWebView();
			let a = this.getNodeCanvas();
			if (!a) return;
			let i = new _cc.Node;
			i.parent = a, i.setContentSize(2048, 2048), i.zIndex = _cc.macro.MAX_ZINDEX, this.showWebViewNode = i;
			let s = new _cc.Node;
			s.parent = i, s.setContentSize(i.getContentSize()), this.addFillerSprite(s, _cc.color(0, 0, 0, 127)), this.registerTouchHandler(s, t => {
				this.isTouchEventClick(t) && this.closeWebView()
			});
			let n = new _cc.Node;
			n.parent = i;
			let o = Math.min(.8 * a.width, 500),
				r = Math.min(.8 * a.height, 800);
			a.width > a.height && (o = Math.min(.8 * a.width, 800), r = Math.min(.8 * a.height, 500)), n.setContentSize(o, r), _cc.loader.loadRes("_ulsdk_ui/bg_01", _cc.SpriteFrame, (t, e) => {
				if (t) return void ULLog.console.warn("MCPanelCreator.showPrivacyDialog nodeDialogBg load sprite error", t);
				let a = n.getContentSize(),
					i = e.getOriginalSize();
				e.insetLeft = i.width / 3, e.insetRight = i.width / 3, e.insetTop = i.height / 3, e.insetBottom = i.height / 3;
				let s = n.addComponent(_cc.Sprite);
				s.spriteFrame = e, s.type = _cc.Sprite.Type.SLICED, s.sizeMode = _cc.Sprite.SizeMode.CUSTOM, n.setContentSize(a)
			});
			let l = new _cc.Node;
			l.parent = n, l.color = _cc.color(38, 38, 38, 255), l.addComponent(_cc.Label).string = t, l.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, l.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, l.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, l.getComponent(_cc.Label).fontSize = 32, l.width = o - 10, l.height = 40, l.y = r / 2 - 40, l.x = 0;
			let c = new _cc.Node;
			c.parent = n, c.setContentSize(o - 50, r - 80), c.x = 0, c.y = -20;
			let h = c.addComponent(_cc.ScrollView);
			h.horizontal = !1, h.vertical = !0, h.cancelInnerEvents = !1, h.elastic = !0;
			let d = new _cc.Node;
			d.parent = c, d.setContentSize(c.getContentSize()), d.addComponent(_cc.Mask).type = _cc.Mask.Type.RECT, d.getComponent(_cc.Mask).inverted = !1;
			let _ = new _cc.Node;
			_.parent = d, _.setAnchorPoint(.5, 1), _.setContentSize(c.getContentSize()), _.addComponent(_cc.Layout).resizeMode = _cc.Layout.ResizeMode.CONTAINER, h.content = _, ULTools.httpGet({
				url: e,
				timeoutMillisecond: 5e3,
				success: t => {
					let e = JSON.parse(t).policyText;
					ULLog.console.log("content:", e);
					let a = new _cc.Node;
					a.color = _cc.color(0, 0, 0, 255), a.parent = _, a.setAnchorPoint(.5, 1), a.addComponent(_cc.Label).string = e, a.getComponent(_cc.Label).overflow = _cc.Label.Overflow.RESIZE_HEIGHT, a.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.TOP, a.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.LEFT, a.getComponent(_cc.Label).fontSize = 18, a.getComponent(_cc.Label).lineHeight = 26;
					let i = a,
						s = _cc.Label;
					i.hasOwnProperty("cacheMode") && s.hasOwnProperty("CacheMode") && (i.cacheMode = s.CacheMode.CHAR), a.setContentSize(_.getContentSize())
				},
				fail: () => {}
			})
		}
		closeWebView() {
			_cc.isValid(this.showWebViewNode) && (this.showWebViewNode.__b_manual_destroy = !0, this.showWebViewNode.destroy()), this.showWebViewNode = null
		}
		showPrivacyDialog(t, e, a, i) {
			if (ULLog.console.log("MCPanelCreator.showPrivacyDialog"), this.showPrivacyNode) return;
			let s = this.getNodeCanvas();
			if (!s) return ULLog.console.warn("MCPanelCreator.showPrivacyDialog nodeCanvas not found!"), void ULTimer.callLater(.1, () => {
				this.showPrivacyDialog(t, e, a, i)
			});
			let n = new _cc.Node;
			n.parent = s, n.setContentSize(2048, 2048), n.zIndex = _cc.macro.MAX_ZINDEX, this.showPrivacyNode = n;
			let o = new _cc.Node;
			o.parent = n, o.setContentSize(n.getContentSize()), this.addFillerSprite(o, _cc.color(0, 0, 0, 127)), this.registerTouchHandler(o, t => {
				this.isTouchEventClick(t) && ULLog.console.log("click bg")
			});
			let r = !1,
				l = new _cc.Node;
			l.parent = o, l.addComponent(_cc.Component).onDestroy = (() => {
				ULLog.console.log("MCPanelCreator.showPrivacyDialog triggerNode onDestroy", r), this.showPrivacyNode = null, r || (ULLog.console.log("MCPanelCreator.showPrivacyDialog nodeShadow被意外销毁，0.1秒后尝试重新创建提示"), ULTimer.callLater(1 / 60, () => {
					ULLog.console.log("ontimer"), this.showPrivacyDialog(t, e, a, i)
				}))
			});
			let c = new _cc.Node;
			c.parent = n;
			c.setContentSize(400, 400), _cc.loader.loadRes("_ulsdk_ui/bg_01", _cc.SpriteFrame, (t, e) => {
				if (t) return void ULLog.console.warn("MCPanelCreator.showPrivacyDialog nodeDialogBg load sprite error", t);
				let a = c.getContentSize(),
					i = e.getOriginalSize();
				e.insetLeft = i.width / 3, e.insetRight = i.width / 3, e.insetTop = i.height / 3, e.insetBottom = i.height / 3;
				let s = c.addComponent(_cc.Sprite);
				s.spriteFrame = e, s.type = _cc.Sprite.Type.SLICED, s.sizeMode = _cc.Sprite.SizeMode.CUSTOM, c.setContentSize(a)
			});
			let h = new _cc.Node;
			h.parent = c, h.color = _cc.color(0, 0, 0, 255), h.addComponent(_cc.Label).string = "隐私政策", h.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, h.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, h.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, h.getComponent(_cc.Label).fontSize = 32, h.width = 390, h.height = 40, h.y = 160, h.x = 0;
			let d = new _cc.Node;
			d.parent = c, d.setContentSize(350, 260), d.x = 0, d.y = 3;
			let _ = d.addComponent(_cc.ScrollView);
			_.horizontal = !1, _.vertical = !0, _.cancelInnerEvents = !1, _.elastic = !0;
			let g = new _cc.Node;
			g.parent = d, g.setContentSize(d.getContentSize()), g.addComponent(_cc.Mask).type = _cc.Mask.Type.RECT, g.getComponent(_cc.Mask).inverted = !1;
			let u = new _cc.Node;
			u.parent = g, u.setAnchorPoint(.5, 1), u.setContentSize(d.getContentSize()), u.addComponent(_cc.Layout).resizeMode = _cc.Layout.ResizeMode.CONTAINER, _.content = u;
			let m = this,
				p = "感谢您对本公司游戏的支持，在体验我们的游戏前，请仔细阅读开发商的",
				S = {};
			for (let t = 0; t < e.length; t++) {
				const a = e[t];
				let i = a.name || "",
					s = a.url || "";
				S[i] = s, t > 0 && (p += "、"), p += `<color=#6495ED><outline color=#ffffff width=2><on click="onUserProtocolClicked" param="${i}">《${i}》</on></outline></color>`
			}
			p += "中的所有条款，包括\n        1.为了您有良好的游戏体验，我们会基于具体的场景收集您的个人信息\n        2.我们会基于先进的技术和管理措施保证您的个人信息安全\n        3.基于您的授权，我们会收集以下权限\n设备信息：包括设备标识符、MAC、机型、品牌、App包名、App版本号、IP地址、设备分辨率及像素密度。\n网络信息：网络连接状态、接入网络的方式和类型、IP地址。\n使用信息：包括广告内容的展现、点击、下载。\n        如果您对本隐私政策有任何疑问,请通过kefu@ultralisk.cn与我们联系。\n        ";
			class b extends _cc.RichText {
				onUserProtocolClicked(t, e) {
					m.showWebView(e, S[e] || "")
				}
			}
			let L = new _cc.Node;
			L.color = _cc.color(0, 0, 0, 255), L.parent = u, L.setAnchorPoint(.5, 1), L.addComponent(b).string = p, L.getComponent(b).maxWidth = 344, L.getComponent(b).fontSize = 18, L.getComponent(b).lineHeight = 26, L.setContentSize(u.getContentSize());
			let I = (c.width - 20) / a.length;
			for (let t = 0; t < a.length; t++) {
				const e = a[t];
				let s = new _cc.Node;
				s.parent = c, s.width = Math.min(.8 * I, 120), s.height = 40, s.x = -(a.length / 2 - t) * I + I / 2, s.y = (s.height - c.height) / 2 + 20;
				let n = new _cc.Node;
				n.parent = s, n.addComponent(_cc.Label).string = e, n.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, n.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, n.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, n.getComponent(_cc.Label).fontSize = 22, n.width = s.width, n.height = s.height, 1 == a.length || t % 2 == 1 ? (this.addFillerSprite(s, _cc.color(100, 149, 237, 255)), n.color = _cc.color(255, 255, 255, 255)) : (this.addFillerSprite(s, _cc.color(230, 230, 230, 255)), n.color = _cc.color(156, 176, 222, 255), n.addComponent(_cc.LabelOutline), n.getComponent(_cc.LabelOutline), n.getComponent(_cc.LabelOutline).width = 1, n.getComponent(_cc.LabelOutline).color = _cc.color(230, 230, 230, 255)), this.registerTouchHandler(n, e => {
					if (!this.isTouchEventClick(e)) return;
					let a = i[t];
					if (a instanceof Function) {
						a() || (r = !0, this.showPrivacyNode.destroy(), this.showPrivacyNode = null)
					} else r = !0, this.showPrivacyNode.destroy(), this.showPrivacyNode = null
				})
			}
		}
		getCanvasSize() {
			let t = 0,
				e = 0,
				a = this.getNodeCanvas();
			return {
				width: t = a.width,
				height: e = a.height
			}
		}
		getCanvasOriginSize() {
			let t = 0,
				e = 0,
				a = this.getNodeCanvas(),
				i = (a.getComponent(_cc.Canvas), _cc.view.getFrameSize()),
				s = i.width / i.height,
				n = a.width / a.height;
			return t = a.width, e = a.height, s < n ? e = Math.floor(e * n / s) : t = Math.floor(t * s / n), {
				width: t,
				height: e
			}
		}
		showReferenceRect(t, e, a, i, s, n, o) {
			ULLog.console.log("MCPanelCreator.showReferenceRect", t, e, a, i, s);
			let r = _cc.view.getFrameSize(),
				l = e * r.width,
				c = r.height - a * r.height;
			ULLog.console.log("  center", l, c);
			let h = this.getNodeCanvas(),
				d = this.getCanvasSize(),
				_ = this.getCanvasOriginSize(),
				g = l / r.width * _.width - (_.width - d.width) / 2,
				u = _.height - c / r.height * _.height - (_.height - d.height) / 2,
				m = h.convertToNodeSpaceAR(_cc.v2(g, u));
			ULLog.console.log("  pInWorld", m), this.hideReferenceRect(t), _cc.loader.loadRes("_ulsdk_ui/white_dot", _cc.SpriteFrame, (r, l) => {
				let c = new _cc.Node;
				c.parent = h, c.addComponent(_cc.Sprite).spriteFrame = l, c.setAnchorPoint(null == n ? .5 : n, null == o ? .5 : o), c.color = _cc.color(0, 0, 0, 127), c.opacity = 127, c.position = m, c.width = i, c.height = s, c.zIndex = _cc.macro.MAX_ZINDEX;
				let d = new _cc.Node;
				d.parent = c;
				let _ = d.addComponent(_cc.Label);
				_.string = t, _.fontSize = 18, _.verticalAlign = _cc.Label.VerticalAlign.CENTER, _.horizontalAlign = _cc.Label.HorizontalAlign.CENTER;
				let g = d.addComponent(_cc.Widget);
				g.isAlignVerticalCenter = !0, g.isAlignHorizontalCenter = !0, this.nodeReferenceRects[t] = c, c.__b_manual_destroy = !1;
				let u = new _cc.Node;
				u.parent = c, u.addComponent(_cc.Component).onDestroy = (() => {
					ULLog.console.log("MCPanelCreator.showReferenceRect triggerNode onDestroy", c.__b_manual_destroy), c.__b_manual_destroy || (ULLog.console.log("MCPanelCreator.showReferenceRect nodeRect被意外销毁，0.1秒后尝试重新创建提示"), ULTimer.callLater(.1, () => {
						this.showReferenceRect(t, e, a, i, s)
					}))
				})
			})
		}
		showReferenceRectFromViewPoint(t, e, a, i, s, n, o) {
			ULLog.console.log("MCPanelCreator.showReferenceRectFromViewPoint", t, e, a, i, s);
			let r = _cc.view.getFrameSize(),
				l = e / r.width,
				c = 1 - a / r.height;
			this.showReferenceRect(t, l, c, i, s, n, o)
		}
		showReferenceRectFromScale(t, e, a, i, s, n, o) {
			let r = this.getCanvasSize(),
				l = r.width * i,
				c = r.height * s;
			this.showReferenceRect(t, e, a, l, c, n, o)
		}
		hideReferenceRect(t) {
			ULLog.console.log("MCPanelCreator.hideReferenceRect", t);
			let e = this.nodeReferenceRects[t];
			_cc.isValid(e) && (e.__b_manual_destroy = !0, e.destroy(), e = null, delete this.nodeReferenceRects[t])
		}
		hideAllReferenceRects() {
			ULLog.console.log("MCPanelCreator.hideAllReferenceRects"), ULTools.forEachMap(this.nodeReferenceRects, (t, e) => {
				this.hideReferenceRect(t)
			})
		}
		showNationBanner(t, e) {
			ULLog.console.log("MCPanelCreator.showNationBanner"), t = t || {
				nationData: {
					title: null,
					desc: null,
					icon: null,
					url: null,
					targetTitle: null
				},
				onShow: null,
				onError: null,
				onClick: null,
				onClose: null
			};
			let a = this.getNodeCanvas();
			if (!a) return ULLog.console.warn("MCPanelCreator.showNationBanner nodeCanvas not found!"), void(t.onError && t.onError("nodeCanvas not found!"));
			if (this.bannerRootNode) return ULLog.console.warn("MCPanelCreator.showNationBanner 已经有 banner 正在展示中"), void(t.onError && t.onError("已经有 banner 正在展示中"));
			let i = e.width;
			this.bannerShowingObj = t;
			let s = this.getCanvasSize(),
				n = Math.min(s.width, s.height) * i,
				o = n / 3.5,
				r = new _cc.Node;
			r.parent = a, r.setContentSize(n, o), r.zIndex = _cc.macro.MAX_ZINDEX - 10, r.y = (s.height - o) * (e.y - .5), r.x = (s.width - n) * (e.x - .5), this.addFillerSprite(r, _cc.color(255, 255, 255, 255)), this.bannerRootNode = r, this.registerTouchHandler(r, e => {
				this.isTouchEventClick(e) && (ULLog.console.log("MCPanelCreator:click nationBanner"), t.onClick && t.onClick())
			});
			let l = new _cc.Node;
			l.parent = r, l.setContentSize(34 * i, 34 * i), l.y = (r.height - l.height) / 2, l.x = (r.width - l.width) / 2, _cc.loader.loadRes("_ulsdk_ui/native_adv_close", _cc.SpriteFrame, (t, e) => {
				if (t) return void ULLog.console.warn("MCPanelCreator.showNationBanner closeButton load sprite error", t);
				let a = l.getContentSize();
				l.addComponent(_cc.Sprite).spriteFrame = e, l.setContentSize(a)
			}), this.registerTouchHandler(l, t => {
				this.isTouchEventClick(t) && this.closeNationBanner(!0)
			});
			let c = new _cc.Node;
			c.parent = r, c.setContentSize(44 * i, 24 * i), c.y = (c.height - r.height) / 2, c.x = (r.width - c.width) / 2, _cc.loader.loadRes("_ulsdk_ui/native_adv_tag", _cc.SpriteFrame, (t, e) => {
				if (t) return void ULLog.console.warn("MCPanelCreator.showNationBanner advTag load sprite error", t);
				let a = c.getContentSize();
				c.addComponent(_cc.Sprite).spriteFrame = e, c.setContentSize(a)
			});
			let h = new _cc.Node;
			h.parent = r, h.setContentSize(o / 9 * 16, o);
			let d = t.nationData.url || null;
			d && (ULLog.console.warn("MCPanelCreator.showNationBanner load imageUrl:", d), _cc.loader.load({
				url: d,
				type: "png"
			}, (t, e) => {
				if (ULLog.console.warn("MCPanelCreator.showNationBanner load imageUrl callback err:", t), t) return void ULLog.console.warn("MCPanelCreator.showNationBanner imageNode load sprite error", t);
				let a = h.getContentSize(),
					i = h.addComponent(_cc.Sprite),
					s = new _cc.SpriteFrame;
				s.setTexture(e), i.spriteFrame = s, h.setContentSize(a)
			}));
			let _ = h.getContentSize(),
				g = .6 * Math.min(o, (n - _.width) / 2),
				u = g,
				m = {
					width: g,
					height: g / 16 * 5
				},
				p = new _cc.Node;
			p.parent = r, p.setContentSize(g, u), p.y = m.height / 2, p.x = -(n - _.width) / 4 - _.width / 2;
			let S = t.nationData.icon || null;
			S ? (ULLog.console.warn("MCPanelCreator.showNationBanner load iconUrl:", S), _cc.loader.load({
				url: S,
				type: "png"
			}, (t, e) => {
				if (ULLog.console.warn("MCPanelCreator.showNationBanner load iconUrl callback err:", t), t) return void ULLog.console.warn("MCPanelCreator.showNationBanner iconNode load sprite error", t);
				let a = p.getContentSize(),
					i = p.addComponent(_cc.Sprite),
					s = new _cc.SpriteFrame;
				s.setTexture(e), i.spriteFrame = s, p.setContentSize(a)
			})) : this.addFillerSprite(p, _cc.color(220, 0, 50, 255));
			let b = new _cc.Node;
			b.parent = r, b.setContentSize(m.width, m.height), b.y = -o / 2 + ((o - u) / 2 + p.y) / 2, b.x = p.x, this.addFillerSprite(b, _cc.color(100, 220, 50, 255));
			let L = new _cc.Node;
			L.parent = b, L.addComponent(_cc.Label).string = t.nationData.targetTitle || "点击查看", L.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, L.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, L.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, L.getComponent(_cc.Label).fontSize = 18, L.addComponent(_cc.LabelOutline), L.getComponent(_cc.LabelOutline), L.getComponent(_cc.LabelOutline).width = 1, L.getComponent(_cc.LabelOutline).color = _cc.color(100, 220, 50, 255), L.setContentSize(m.width, m.height);
			let I = (n - _.width) / 2 * .8,
				A = new _cc.Node;
			A.parent = r, A.color = _cc.color(0, 0, 0, 255), A.addComponent(_cc.Label).string = t.nationData.title || "", A.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, A.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, A.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.LEFT, A.getComponent(_cc.Label).fontSize = 24, A.getComponent(_cc.Label).lineHeight = 24, A.setContentSize(I, 36 * i), A.y = (p.height - 36 * i) / 2, A.x = +(n - _.width) / 4 + _.width / 2;
			let E = new _cc.Node;
			E.parent = r, E.color = _cc.color(0, 0, 0, 255), E.addComponent(_cc.Label).string = t.nationData.desc || "", E.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, E.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.TOP, E.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.LEFT, E.getComponent(_cc.Label).fontSize = 18, E.getComponent(_cc.Label).lineHeight = 20, E.setContentSize(I, 80 * i), E.y = (p.height - 80 * i) / 2 - A.height, E.x = +(n - _.width) / 4 + _.width / 2, t.onShow && t.onShow()
		}
		closeNationBanner(t = !1) {
			this.bannerRootNode && (this.bannerRootNode.destroy(), this.bannerRootNode = null, ULLog.console.log("MCPanelCreator:close nationBanner"), this.bannerShowingObj && this.bannerShowingObj.onClose && this.bannerShowingObj.onClose(t), this.bannerShowingObj = null)
		}
		showNationInter(t) {
			ULLog.console.log("MCPanelCreator.showNationInter"), t = t || {
				nationData: {
					title: null,
					desc: null,
					icon: null,
					url: null,
					targetTitle: null
				},
				onShow: null,
				onError: null,
				onClick: null,
				onClose: null
			};
			let e = this.getNodeCanvas();
			if (!e) return ULLog.console.warn("MCPanelCreator.showNationInter nodeCanvas not found!"), void(t.onError && t.onError("nodeCanvas not found!"));
			if (this.interRootNode) return ULLog.console.warn("MCPanelCreator.showNationInter 已经有 inter 正在展示中"), void(t.onError && t.onError("已经有 inter 正在展示中"));
			this.interShowingObj = t;
			let a = this.getCanvasSize(),
				i = new _cc.Node;
			i.parent = e, i.setContentSize(a.width, a.height), i.zIndex = _cc.macro.MAX_ZINDEX - 11, this.interRootNode = i;
			let s = new _cc.Node;
			s.parent = i, s.setContentSize(i.getContentSize()), this.addFillerSprite(s, _cc.color(0, 0, 0, 127)), this.registerTouchHandler(s, t => {
				this.isTouchEventClick(t) && console.log("MCPanelCreator:click nationInter bg")
			});
			let n = .86 * Math.min(a.width, a.height),
				o = n,
				r = new _cc.Node;
			r.parent = i, r.setContentSize(n, o), this.registerTouchHandler(r, t => {
				this.isTouchEventClick(t) && console.log("MCPanelCreator:click contentNode bg")
			});
			let l = new _cc.Node;
			l.parent = r, l.setContentSize(n, n / 16 * 9), l.y = (r.height - l.height) / 2, l.x = (l.width - r.width) / 2, this.addFillerSprite(l, _cc.color(255, 255, 255, 255));
			let c = t.nationData.url || null;
			if (c) {
				let t = new _cc.Node;
				t.parent = l, t.setContentSize(n, n / 16 * 9), ULLog.console.warn("MCPanelCreator.showNationInter load imageUrl:", c), _cc.loader.load({
					url: c,
					type: "png"
				}, (e, a) => {
					if (ULLog.console.warn("MCPanelCreator.showNationInter load imageUrl callback err:", e), e) return void ULLog.console.warn("MCPanelCreator.showNationInter imageNode load sprite error", e);
					let i = t.getContentSize(),
						s = t.addComponent(_cc.Sprite),
						n = new _cc.SpriteFrame;
					n.setTexture(a), s.spriteFrame = n, t.setContentSize(i)
				})
			}
			this.registerTouchHandler(l, e => {
				this.isTouchEventClick(e) && (ULLog.console.log("MCPanelCreator:click nationInter"), t.onClick && t.onClick())
			});
			let h = new _cc.Node;
			h.parent = l, h.setContentSize(34, 34), h.y = (l.height - h.height) / 2, h.x = (l.width - h.width) / 2, _cc.loader.loadRes("_ulsdk_ui/native_adv_close", _cc.SpriteFrame, (t, e) => {
				if (t) return void ULLog.console.warn("MCPanelCreator.showNationBanner closeButton load sprite error", t);
				let a = h.getContentSize();
				h.addComponent(_cc.Sprite).spriteFrame = e, h.setContentSize(a)
			}), this.registerTouchHandler(h, t => {
				this.isTouchEventClick(t) && this.closeNationInter(!0)
			});
			let d = new _cc.Node;
			d.parent = l, d.setContentSize(44, 24), d.y = (d.height - l.height) / 2, d.x = (l.width - d.width) / 2, _cc.loader.loadRes("_ulsdk_ui/native_adv_tag", _cc.SpriteFrame, (t, e) => {
				if (t) return void ULLog.console.warn("MCPanelCreator.showNationBanner advTag load sprite error", t);
				let a = d.getContentSize();
				d.addComponent(_cc.Sprite).spriteFrame = e, d.setContentSize(a)
			});
			let _ = n / 7,
				g = _,
				u = new _cc.Node;
			u.parent = l, u.setContentSize(_, g), u.y = (l.height - g) / 2 - .02 * o, u.x = (_ - l.width) / 2 + .02 * n;
			let m = t.nationData.icon || null;
			m ? (ULLog.console.warn("MCPanelCreator.showNationInter load iconUrl:", m), _cc.loader.load({
				url: m,
				type: "png"
			}, (t, e) => {
				if (ULLog.console.warn("MCPanelCreator.showNationInter load iconUrl callback err:", t), t) return void ULLog.console.warn("MCPanelCreator.showNationInter iconNode load sprite error", t);
				let a = u.getContentSize(),
					i = u.addComponent(_cc.Sprite),
					s = new _cc.SpriteFrame;
				s.setTexture(e), i.spriteFrame = s, u.setContentSize(a)
			})) : this.addFillerSprite(u, _cc.color(220, 0, 50, 255));
			let p = new _cc.Node;
			p.parent = i, p.color = _cc.color(255, 255, 255, 255), p.addComponent(_cc.Label).string = t.nationData.desc || t.nationData.title || "", p.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, p.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.TOP, p.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, p.getComponent(_cc.Label).fontSize = 24, p.getComponent(_cc.Label).lineHeight = 24, p.addComponent(_cc.LabelOutline), p.getComponent(_cc.LabelOutline), p.getComponent(_cc.LabelOutline).width = 1, p.getComponent(_cc.LabelOutline).color = _cc.color(0, 0, 0, 255), p.setContentSize(r.width, 36), p.y = (r.height - p.height) / 2 - l.height - 10;
			let S = n / 2.5,
				b = new _cc.Node;
			b.parent = r, b.setContentSize(S, S / 16 * 5), b.y = (r.height - b.height) / 2 - l.height - 10 - p.height - 10, this.addFillerSprite(b, _cc.color(100, 220, 50, 255));
			let L = new _cc.Node;
			L.parent = b, L.addComponent(_cc.Label).string = t.nationData.targetTitle || "点击查看", L.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, L.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, L.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, L.getComponent(_cc.Label).fontSize = 24, L.addComponent(_cc.LabelOutline), L.getComponent(_cc.LabelOutline), L.getComponent(_cc.LabelOutline).width = 1, L.getComponent(_cc.LabelOutline).color = _cc.color(100, 220, 50, 255), L.width = b.width, L.height = b.height, this.registerTouchHandler(L, e => {
				this.isTouchEventClick(e) && (ULLog.console.log("MCPanelCreator:click nationInter"), t.onClick && t.onClick())
			}), t.onShow && t.onShow()
		}
		closeNationInter(t = !1) {
			this.interRootNode && (this.interRootNode.destroy(), this.interRootNode = null, ULLog.console.log("MCPanelCreator:close nationInter"), this.interShowingObj && this.interShowingObj.onClose && this.interShowingObj.onClose(t), this.interShowingObj = null)
		}
	}
	const BUTTON_WIDTH$1 = 150,
		BUTTON_HEIGHT$1 = 40,
		NEW_LINE_HEIGHT$1 = 20,
		FONT_SIZE$1 = 20,
		PENDING$1 = 10,
		GAP$1 = 4;
	class MCPanelLaya {
		constructor() {
			this.nodeReferenceRects = {}
		}
		getRootNode() {
			return Laya.stage.getChildByName("__ulsdk_ui_node_root__")
		}
		registerTouchHander(t, e) {
			let a, i;
			t.on(Laya.Event.MOUSE_DOWN, t, s => {
				t.__b_touch = !0, a = s.stageX, i = s.stageY, e({
					name: "began",
					pos: {
						x: s.stageX,
						y: s.stageY
					}
				})
			}), t.on(Laya.Event.MOUSE_UP, t, a => {
				t.__b_touch && (t.__b_touch = !1, e({
					name: "ended",
					pos: {
						x: a.stageX,
						y: a.stageY
					}
				}))
			}), t.on(Laya.Event.MOUSE_MOVE, t, a => {
				1 == t.__b_touch && e({
					name: "moved",
					pos: {
						x: a.stageX,
						y: a.stageY
					}
				})
			}), t.on(Laya.Event.MOUSE_OUT, t, a => {
				t.__b_touch && (t.__b_touch = !1, e({
					name: "cancelled",
					pos: {
						x: a.stageX,
						y: a.stageY
					}
				}))
			}), t.on(Laya.Event.CLICK, t, t => {
				if (t.stopPropagation(), null != a && null != i) {
					let e = t.stageX - a,
						s = t.stageY - i;
					if (e * e + s * s >= 400) return
				}
				e({
					name: "click",
					pos: {
						x: t.stageX,
						y: t.stageY
					}
				})
			})
		}
		createItemByData(t) {
			let e = new MCItem;
			e.initByData(t);
			let a = this.nodeContainer;
			switch (ULConst.B_INNER_DEBUG && ULLog.console.log("createItemByData", t), t.type) {
				case "label": {
					let t = a.addChild(new Laya.Label);
					t.fontSize = FONT_SIZE$1, t.align = "left", t.color = "#ffffff", t.text = e.text, ULConst.B_INNER_DEBUG && ULLog.console.log("createLabel", t.width, t.height), e.width = t.width, e.height = t.height, e.renderNode = t;
					break
				}
				case "labelArea": {
					let t = a.addChild(new Laya.Label);
					t.width = a.width - 2 * PENDING$1, t.wordWrap = !0, t.fontSize = FONT_SIZE$1, t.align = "left", t.color = "#ffffff", t.text = e.text, ULConst.B_INNER_DEBUG && ULLog.console.log("createLabel", t.width, t.height), e.width = t.width, e.height = t.height, e.renderNode = t;
					break
				}
				case "button": {
					let t = a.addChild(new Laya.Sprite);
					t.size(BUTTON_WIDTH$1, BUTTON_HEIGHT$1), t.graphics.drawRect(0, 0, BUTTON_WIDTH$1, BUTTON_HEIGHT$1, "#c8c8c8ff");
					let i = t.addChild(new Laya.Label);
					i.fontSize = FONT_SIZE$1, i.color = "#000000", i.align = "center", i.text = e.text, i.pos(BUTTON_WIDTH$1 / 2 - i.width / 2, BUTTON_HEIGHT$1 / 2 - i.height / 2), this.registerTouchHander(t, t => {
						ULConst.B_INNER_DEBUG && ULLog.console.log("onTouch button", e.text, t.name), "began" == t.name ? (i.color = "#00ff00", i._tf.isChanged = !0) : "moved" == t.name || (i.color = "#000000", i._tf.isChanged = !0), ULConst.B_INNER_DEBUG && ULLog.console.log("  label.color", i.color), "click" == t.name && e.triggerOnClick()
					}), e.width = t.width, e.height = t.height, e.renderNode = t;
					break
				}
				case "inputBox": {
					let t = a.addChild(new Laya.Sprite);
					t.size(e.width || BUTTON_WIDTH$1, e.height || BUTTON_HEIGHT$1), t.graphics.drawRect(0, 0, BUTTON_WIDTH$1, BUTTON_HEIGHT$1, "#c8c8c8ff");
					let i = t.addChild(new Laya.TextInput);
					i.size(t.width - 4, t.height), i.pos(2, 0), i.fontSize = FONT_SIZE$1, i.color = "#000000", i.align = "left", i.on("keyup", this, t => {
						e.setText(i.text)
					}), t.textInput = i, e.width = t.width, e.height = t.height, e.renderNode = t;
					break
				}
				case "newLine":
					e.width = a.width - 2 * PENDING$1, e.height = NEW_LINE_HEIGHT$1
			}
			return e
		}
		doLayout() {
			if (!this.items) return;
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelCreator.doLayout"), ULConst.B_INNER_DEBUG && ULLog.console.log("  items", this.items);
			let t = this.nodePanel.width - 20,
				e = [],
				a = PENDING$1,
				i = PENDING$1,
				s = 0;
			for (let n = 0; n < this.items.length; n++) {
				let o = this.items[n],
					r = o.renderNode || {
						x: 0,
						y: 0
					};
				if (a + o.width > t) {
					a = 0, ULConst.B_INNER_DEBUG && ULLog.console.log("清空一行"), ULConst.B_INNER_DEBUG && ULLog.console.log("  rowHeight", s);
					for (let t = 0; t < e.length; t++) {
						let a = e[t].renderNode || {
							x: 0,
							y: 0
						};
						a.y = i + s / 2 - a.height / 2, ULConst.B_INNER_DEBUG && ULLog.console.log("  set y", t, a.y)
					}
					a = PENDING$1, i += s + GAP$1, e = [], s = 0
				}
				s = Math.max(s, o.height), e.push(o), r.x = a, a += o.width + GAP$1
			}
			for (let t = 0; t < e.length; t++) {
				(e[t].renderNode || {
					x: 0,
					y: 0
				}).y = i
			}
			i += s + PENDING$1, ULConst.B_INNER_DEBUG && ULLog.console.log("finish"), ULConst.B_INNER_DEBUG && ULLog.console.log("  rowTop", i), this.nodeContainer.height = Math.max(this.nodePanel.height, i)
		}
		onItemNodeResize() {
			this.doLayout()
		}
		getItemByName(t) {
			for (let e = 0; e < this.items.length; e++) {
				const a = this.items[e];
				if (a.name == t) return a
			}
			return null
		}
		show(t) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.show", t);
			let e = this.getRootNode();
			if (!e) return;
			let a = Laya.stage.width,
				i = Laya.stage.height,
				s = e.addChild(new Laya.Sprite);
			s.size(a, i), s.pos(-a / 2, -i / 2), this.nodePanel = s;
			let n = s.addChild(new Laya.Sprite);
			n.size(a, i), n.graphics.drawRect(0, 0, a, i, "#000000BF", null, null), this.registerTouchHander(n, t => {
				"click" == t.name && ULConst.B_INNER_DEBUG && ULLog.console.log("click spriteBg")
			});
			let o = s.addChild(new Laya.Panel);
			o.size(a, i), this.registerTouchHander(o, t => {
				if ("began" == t.name) o._downX = o.x, o._downY = o.y, o._downTouchX = t.pos.x, o._downTouchY = t.pos.y;
				else if ("moved" == t.name) {
					let e = t.pos.x - o._downTouchX,
						a = t.pos.y - o._downTouchY,
						i = o._downY + a;
					i = Math.min(0, i), ULConst.B_INNER_DEBUG && ULLog.console.log("move", e, a, i), o.y = i
				}
			}), this.nodeContainer = o;
			let r = [];
			for (let e = 0; e < t.length; e++) {
				const a = t[e];
				let i = this.createItemByData(a);
				r.push(i)
			}
			this.items = r, this.doLayout()
		}
		close() {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.close"), this.nodePanel && this.nodePanel.destroy(), this.nodePanel = null, this.items = []
		}
		showPickerDialog(t, e, a, i) {
			let s = this.getRootNode();
			if (!s) return;
			let n = Laya.stage.width,
				o = Laya.stage.height,
				r = ULTools.scaleInRange(e.length, 8.5, 17.5, 430, 826),
				l = s.addChild(new Laya.Sprite);
			l.size(n, o), l.pos(-n / 2, -o / 2), l.graphics.drawRect(0, 0, n, o, "#00000080"), this.registerTouchHander(l, t => {
				"click" == t.name && (ULConst.B_INNER_DEBUG && ULLog.console.log("click nodeShadow"), l.destroy())
			});
			let c = l.addChild(new Laya.Sprite);
			c.size(n - 100, r), c.pos(n / 2 - c.width / 2, o / 2 - c.height / 2), c.graphics.drawRect(0, 0, c.width, c.height, "#a7a7a7ff"), this.registerTouchHander(c, t => {
				"click" == t.name && ULConst.B_INNER_DEBUG && ULLog.console.log("click nodeDialog")
			});
			let h = c.addChild(new Laya.Label);
			h.fontSize = 36, h.align = "left", h.pos(5, 10), h.text = t || "标题";
			let d = c.addChild(new Laya.Sprite);
			d.size(c.width - 10, c.height - 55), d.pos(5, 50), d.graphics.drawRect(0, 0, d.width, d.height, "#616161ff");
			let _ = d.width,
				g = 40,
				u = this;
			let m = d.addChild(new Laya.List);
			m.itemRender = class extends Laya.Box {
				constructor() {
					super(), ULConst.B_INNER_DEBUG && ULLog.console.log("item.construct", this), this.size(_, g), this.graphics.drawRect(0, 0, _, g, "#0000003f");
					let t = this.addChild(new Laya.Label);
					t.fontSize = FONT_SIZE$1, t.align = "left", t.color = "#ffffff", t.text = "文字", t.pos(5, g / 2 - t.height / 2), u.registerTouchHander(this, t => {
						"click" == t.name && (a(this.data.value), i || l.destroy())
					}), this.label = t
				}
				fillData(t) {
					this.label.text = t.text, this.label.y = g / 2 - this.label.height / 2, this.data = t
				}
			}, m.vScrollBarSkin = "", m.spaceY = 4, m.array = e, m.pos(0, 0), m.size(d.width, d.height), m.selectEnable = !0, m.selectHandler = new Laya.Handler(this, (t, e, a) => {
				ULConst.B_INNER_DEBUG && ULLog.console.log("selectHander", t, e, a)
			}), m.renderHandler = new Laya.Handler(this, (t, e) => {
				ULConst.B_INNER_DEBUG && ULLog.console.log("renderHandler", t, e), t.fillData(t._dataSource)
			})
		}
		getItemText(t) {
			let e = this.getItemByName(t);
			return e ? e.renderNode.textInput.text ? e.renderNode.textInput.text : e.text : ""
		}
		setItemText(t, e) {
			let a = this.getItemByName(t);
			if (ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelCreator.setItemText", t, e, a), !a) return;
			a.setText(e);
			let i = a.renderNode;
			i instanceof Laya.Label ? (i.text = e, a.width = i.width, a.height = i.height, this.onItemNodeResize()) : i.textInput instanceof Laya.TextInput && (i.textInput.text = e)
		}
		showMsgTip(t) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.showMsgTip");
			let e = this.getRootNode();
			if (!e) return;
			let a = Laya.stage.width,
				i = Laya.stage.height,
				s = e.addChild(new Laya.Label);
			s.width = a - 10, s.wordWrap = !0, s.fontSize = 20, s.align = "center", s.color = "#ffffff", s.text = t, s.pos(-a / 2, .25 * -i), Laya.Tween.to(s, {
				y: .25 * -i - 100
			}, 1e3, null, new Laya.Handler(this, () => {
				Laya.Tween.to(s, {
					alpha: 0,
					y: .25 * -i - 150
				}, 500, null, new Laya.Handler(this, () => {
					s.destroy()
				}))
			}))
		}
		showPromptDialog(t, e, a, i) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.showPromptDialog");
			let s = this.getRootNode();
			if (!s) return ULLog.console.warn("MCPanelLaya.showPromptDialog nodeRoot not found!"), void ULTimer.callLater(.1, () => {
				this.showPromptDialog(t, e, a, i)
			});
			let n = Laya.stage.width,
				o = Laya.stage.height,
				r = s.addChild(new Laya.Sprite);
			r.size(n, o), r.pos(-n / 2, -o / 2), r.graphics.drawRect(0, 0, n, o, "#00000080"), this.registerTouchHander(r, t => {
				"click" == t.name && ULConst.B_INNER_DEBUG && ULLog.console.log("click nodeShadow")
			});
			let l = r.addChild(new Laya.Image);
			l.skin = "res/_ulsdk_ui/bg_01.png", l.sizeGrid = "40,40,40,40,0", l.size(460, 320), l.pos(n / 2 - l.width / 2, o / 2 - l.height / 2);
			let c = l.addChild(new Laya.Label);
			c.fontSize = 32, c.align = "center", c.color = "#262626", c.text = t || "标题", c._tf.isChanged = !0, c.pos(l.width / 2 - c.width / 2, 20);
			let h = l.addChild(new Laya.Label);
			h.fontSize = 24, h.align = "center", h.color = "#606060", h.wordWrap = !0, h.width = l.width - 50, h.text = e || "正文", h._tf.isChanged = !0, h.pos(l.width / 2 - h.width / 2, 145 - h.height / 2);
			let d = -(160 * a.length + 30 * (a.length - 1)) / 2;
			for (let t = 0; t < a.length; t++) {
				const e = a[t];
				let s = l.addChild(new Laya.Image);
				s.pos(l.width / 2 + d + 160 * (t + .5) + 30 * t, l.height - 50), s.skin = "res/_ulsdk_ui/btn_01.png", s.sizeGrid = "27,27,27,27,1", s.size(160, 56), s.anchorX = .5, s.anchorY = .5;
				let n = s.addChild(new Laya.Label);
				n.fontSize = 30, n.align = "center", n.text = e || "按钮" + (t + 1), n.color = "#ffffff", n.pos(s.width / 2 - n.width / 2, s.height / 2 - n.height / 2), this.registerTouchHander(s, e => {
					if ("began" == e.name ? s.scale(1.1, 1.1) : "moved" == e.name || s.scale(1, 1), "click" == e.name) {
						let e = i[t];
						if (e instanceof Function) {
							e() || r.destroy()
						} else r.destroy()
					}
				})
			}
		}
		showWebView(t, e) {
			this.closeWebView();
			let a = this.getRootNode();
			if (!a) return;
			let i = Laya.stage.width,
				s = Laya.stage.height,
				n = a.addChild(new Laya.Sprite);
			n.size(i, s), n.pos(-i / 2, -s / 2), n.graphics.drawRect(0, 0, i, s, "#0000007F"), this.showWebViewNode = n, this.registerTouchHander(n, t => {
				"click" == t.name && (ULConst.B_INNER_DEBUG && ULLog.console.log("click nodeShadow"), n.destroy())
			});
			let o = Math.min(.8 * i, 500),
				r = Math.min(.8 * s, 800);
			i > s && (o = Math.min(.8 * i, 800), r = Math.min(.8 * s, 500));
			let l = n.addChild(new Laya.Image);
			l.skin = "res/_ulsdk_ui/bg_01.png", l.sizeGrid = "40,40,40,40,0", l.size(o, r), l.pos(i / 2 - l.width / 2, s / 2 - l.height / 2);
			let c = l.addChild(new Laya.Label);
			c.fontSize = 32, c.align = "center", c.color = "#262626", c.text = t || "标题", c._tf.isChanged = !0, c.pos(l.width / 2 - c.width / 2, 20), ULTools.httpGet({
				url: e,
				timeoutMillisecond: 5e3,
				success: t => {
					let e = JSON.parse(t).policyText;
					let a = l.addChild(new Laya.List);
					a.repeatY = 1, a.itemRender = class extends Laya.Box {
						constructor() {
							super(), ULConst.B_INNER_DEBUG && ULLog.console.log("item.construct", this);
							let t = this.addChild(new Laya.Label);
							t.fontSize = 18, t.leading = 8, t.align = "left", t.color = "#606060", t.wordWrap = !0, t.width = o - 50, t.text = e, t.pos(0, 2), t._tf.isChanged = !0
						}
					}, a.vScrollBarSkin = "", a.spaceY = 4, a.array = ["正文"], a.pos(25, 65), a.size(o - 50, r - 70), a.selectEnable = !0, a.selectHandler = new Laya.Handler(this, (t, e, a) => {
						ULConst.B_INNER_DEBUG && ULLog.console.log("selectHander", t, e, a)
					})
				},
				fail: () => {}
			})
		}
		closeWebView() {
			this.showWebViewNode && (this.showWebViewNode.destroy(), this.showWebViewNode = null)
		}
		showPrivacyDialog(t, e, a, i) {
			if (ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.showPrivacyDialog"), this.showPrivacyNode) return;
			let s = this.getRootNode();
			if (!s) return ULLog.console.warn("MCPanelLaya.showPrivacyDialog nodeRoot not found!"), void ULTimer.callLater(.1, () => this.showPrivacyDialog(t, e, a, i));
			let n = Laya.stage.width,
				o = Laya.stage.height,
				r = s.addChild(new Laya.Sprite);
			r.size(n, o), r.pos(-n / 2, -o / 2), r.graphics.drawRect(0, 0, n, o, "#0000007F"), this.showPrivacyNode = r;
			let l = 400,
				c = r.addChild(new Laya.Image);
			c.skin = "res/_ulsdk_ui/bg_01.png", c.sizeGrid = "40,40,40,40,0", c.size(l, 400), c.pos(n / 2 - c.width / 2, o / 2 - c.height / 2);
			let h = c.addChild(new Laya.Label);
			h.fontSize = 32, h.align = "center", h.color = "#606060", h.text = t || "标题", h._tf.isChanged = !0, h.pos(c.width / 2 - h.width / 2, 20);
			let d = "感谢您对本公司游戏的支持，在体验我们的游戏前，请仔细阅读开发商的",
				_ = [],
				g = {};
			for (let t = 0; t < e.length; t++) {
				const a = e[t];
				let i = a.name || "",
					s = a.url || "";
				_.push(i), g[i] = s
			}
			let u = "中的所有条款，包括\n        1.为了您有良好的游戏体验，我们会基于具体的场景收集您的个人信息\n        2.我们会基于先进的技术和管理措施保证您的个人信息安全\n        3.基于您的授权，我们会收集以下权限\n设备信息：包括设备标识符、MAC、机型、品牌、App包名、App版本号、IP地址、设备分辨率及像素密度。\n网络信息：网络连接状态、接入网络的方式和类型、IP地址。\n使用信息：包括广告内容的展现、点击、下载。\n        如果您对本隐私政策有任何疑问,请通过kefu@ultralisk.cn与我们联系。\n        ",
				m = this;
			let p = c.addChild(new Laya.List);
			p.repeatY = 1, p.itemRender = class extends Laya.Box {
				constructor() {
					super(), ULConst.B_INNER_DEBUG && ULLog.console.log("item.construct", this);
					let t = this.addChild(new Laya.Label);
					t.fontSize = 18, t.leading = 8, t.align = "left", t.color = "#606060", t.wordWrap = !0, t.width = l - 50, t.text = d, t.pos(0, 2), t._tf.isChanged = !0;
					let e = t.height;
					for (let t = 0; t < _.length; t++) {
						const a = _[t];
						let i = this.addChild(new Laya.Label);
						i.fontSize = 18, i.leading = 8, i.align = "left", i.color = "#6495ED", i.wordWrap = !0, i.width = l - 50, i.text = `《${a}》`, i.pos(0, e), i._tf.isChanged = !0, e += i.height, m.registerTouchHander(i, t => {
							"click" == t.name && m.showWebView(a, g[a])
						})
					}
					let a = this.addChild(new Laya.Label);
					a.fontSize = 18, a.leading = 8, a.align = "left", a.color = "#606060", a.wordWrap = !0, a.width = l - 50, a.text = u, a.pos(0, e), a._tf.isChanged = !0
				}
			}, p.vScrollBarSkin = "", p.spaceY = 4, p.array = ["正文"], p.pos(25, 65), p.size(l - 50, 260), p.selectEnable = !0, p.selectHandler = new Laya.Handler(this, (t, e, a) => {
				ULConst.B_INNER_DEBUG && ULLog.console.log("selectHander", t, e, a)
			});
			let S = (l - 20) / a.length;
			for (let t = 0; t < a.length; t++) {
				const e = a[t];
				let s = c.addChild(new Laya.Label);
				s.fontSize = 22, s.align = "center", s.valign = "middle", s.text = e, 1 == a.length || t % 2 == 1 ? (s.color = "#ffffff", s.bgColor = "#6495ED") : (s.color = "#9CB0DE", s.bgColor = "#E6E6E6"), s.width = Math.min(.8 * S, 120), s.height = 40, s.x = S * t + (S - s.width) / 2 + 10, s.y = c.height - 60, this.registerTouchHander(s, e => {
					if ("click" == e.name) {
						let e = i[t];
						if (e instanceof Function) {
							e() || (this.showPrivacyNode.destroy(), this.showPrivacyNode = null)
						} else this.showPrivacyNode.destroy(), this.showPrivacyNode = null
					}
				})
			}
		}
		showReferenceRect(t, e, a, i, s, n, o) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.showReferenceRect", t, e, a, i, s, n, o);
			let r = this.getRootNode();
			if (!r) return ULLog.console.warn("MCPanelLaya.showReferenceRect nodeRoot not found!"), void ULTimer.callLater(.1, () => {
				this.showReferenceRect(t, e, a, i, s, n, o)
			});
			null == n && (n = .5), null == o && (o = .5), this.hideReferenceRect(t);
			let l = Laya.stage.width,
				c = Laya.stage.height,
				h = e * l,
				d = c - a * c,
				_ = r.addChild(new Laya.Sprite);
			_.size(i, s), _.pivot(i * n, s * (1 - o));
			let g = r.globalToLocal(new Laya.Point(h, d));
			_.pos(g.x, g.y), _.graphics.drawRect(0, 0, i, s, "#00000080");
			let u = _.addChild(new Laya.Label);
			u.fontSize = 30, u.align = "center", u.text = t, u.color = "#ffffff", u.pos(_.width / 2 - u.width / 2, _.height / 2 - u.height / 2), this.nodeReferenceRects[t] = _
		}
		showReferenceRectFromViewPoint(t, e, a, i, s, n, o) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.showReferenceRectFromViewPoint", t, e, a, i, s, n, o), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.clientWidth", Laya.Browser.clientWidth), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.clientHeight", Laya.Browser.clientHeight), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.pixelRatio", Laya.Browser.pixelRatio), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.width", Laya.Browser.width), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.height", Laya.Browser.height), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.stage.width", Laya.stage.width), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.stage.height", Laya.stage.height);
			let r = Laya.Browser.clientWidth / Laya.stage.width,
				l = Laya.Browser.clientHeight / Laya.stage.height,
				c = Math.min(r, l);
			ULConst.B_INNER_DEBUG && ULLog.console.log("widthRatio", r), ULConst.B_INNER_DEBUG && ULLog.console.log("heightRatio", l), ULConst.B_INNER_DEBUG && ULLog.console.log("ratio", c);
			let h = Laya.stage.width * c,
				d = Laya.stage.height * c;
			ULConst.B_INNER_DEBUG && ULLog.console.log("viewWidth", h), ULConst.B_INNER_DEBUG && ULLog.console.log("viewHeight", d);
			let _ = e / h,
				g = 1 - a / d;
			this.showReferenceRect(t, _, g, i, s, n, o)
		}
		showReferenceRectFromScale(t, e, a, i, s, n, o) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.clientWidth", Laya.Browser.clientWidth), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.clientHeight", Laya.Browser.clientHeight), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.pixelRatio", Laya.Browser.pixelRatio), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.width", Laya.Browser.width), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.height", Laya.Browser.height), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.stage.width", Laya.stage.width), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.stage.height", Laya.stage.height);
			let r = Laya.Browser.clientWidth / Laya.stage.width,
				l = Laya.Browser.clientHeight / Laya.stage.height,
				c = Math.min(r, l);
			ULConst.B_INNER_DEBUG && ULLog.console.log("widthRatio", r), ULConst.B_INNER_DEBUG && ULLog.console.log("heightRatio", l), ULConst.B_INNER_DEBUG && ULLog.console.log("ratio", c);
			let h = Laya.stage.width * c,
				d = Laya.stage.height * c;
			ULConst.B_INNER_DEBUG && ULLog.console.log("viewWidth", h), ULConst.B_INNER_DEBUG && ULLog.console.log("viewHeight", d);
			let _ = h * i,
				g = d * s;
			this.showReferenceRect(t, e, a, _, g, n, o)
		}
		hideReferenceRect(t) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.hideReferenceRect", t);
			let e = this.nodeReferenceRects[t];
			e && !e.destroyed && e.destroy(), delete this.nodeReferenceRects[t]
		}
		hideAllReferenceRects() {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.hideAllReferenceRects"), ULTools.forEachMap(this.nodeReferenceRects, (t, e) => {
				this.hideReferenceRect(t)
			})
		}
		showNationBanner(t, e) {
			ULLog.console.log("MCPanelLaya showNationBanner"), t = t || {
				nationData: {
					title: null,
					desc: null,
					icon: null,
					url: null,
					targetTitle: null
				},
				onShow: null,
				onError: null,
				onClick: null,
				onClose: null
			};
			let a = this.getRootNode();
			if (!a) return ULLog.console.warn("MCPanelLaya.showNationBanner nodeCanvas not found!"), void(t.onError && t.onError("nodeCanvas not found!"));
			if (this.bannerRootNode) return ULLog.console.warn("MCPanelLaya.showNationBanner 已经有 banner 正在展示中"), void(t.onError && t.onError("已经有 banner 正在展示中"));
			let i = e.width;
			this.bannerShowingObj = t;
			let s = {
					width: Laya.stage.width,
					height: Laya.stage.height
				},
				n = Math.min(s.width, s.height) * i,
				o = n / 3.5,
				r = (s.height - o) * (.5 - e.y) - o / 2,
				l = (s.width - n) * (e.x - .5) - n / 2,
				c = a.addChild(new Laya.Sprite);
			c.zOrder = 1010, c.size(n, o), c.pos(l, r), c.graphics.drawRect(0, 0, n, o, "#FFFFFFFF"), this.bannerRootNode = c, this.registerTouchHander(c, e => {
				"click" == e.name && (ULLog.console.log("MCPanelLaya:click nationBanner"), t.onClick && t.onClick())
			});
			let h = {
					width: 34 * i,
					height: 34 * i
				},
				d = c.addChild(new Laya.Image);
			d.skin = "res/_ulsdk_ui/native_adv_close.png", d.size(h.width, h.height), d.pos(n - h.width, 0), this.registerTouchHander(d, t => {
				"click" == t.name && this.closeNationBanner(!0)
			});
			let _ = {
					width: 44 * i,
					height: 24 * i
				},
				g = c.addChild(new Laya.Image);
			g.skin = "res/_ulsdk_ui/native_adv_tag.png", g.size(_.width, _.height), g.pos(n - _.width, o - _.height);
			let u = {
					width: o / 9 * 16,
					height: o
				},
				m = c.addChild(new Laya.Image);
			m.size(u.width, u.height), m.pos((n - u.width) / 2, 0);
			let p = t.nationData.url || null;
			p && (m.skin = p);
			let S = .6 * Math.min(o, (n - u.width) / 2),
				b = S,
				L = {
					width: S,
					height: S / 16 * 5
				},
				I = c.addChild(new Laya.Image);
			I.size(S, b), I.pos(((n - u.width) / 2 - S) / 2, (o - b) / 2 - L.height / 2);
			let A = t.nationData.icon || null;
			A ? I.skin = A : I.graphics.drawRect(0, 0, S, b, "#DC0032FF");
			let E = c.addChild(new Laya.Label);
			E.fontSize = 18 * i, E.align = "center", E.valign = "middle", E.color = "#ffffff", E.bgColor = "#64DC32", E.text = t.nationData.targetTitle || "点击查看", E.size(L.width, L.height), E.pos(((n - u.width) / 2 - S) / 2, (o + b + I.y) / 2 - L.height / 2);
			let f = {
					width: (n - u.width) / 2 * .8,
					height: 36 * i
				},
				C = c.addChild(new Laya.Label);
			C.fontSize = 24 * i, C.align = "left", C.valign = "middle", C.color = "#000000", C.text = t.nationData.title || "", C.size(f.width, f.height), C.pos(((n - u.width) / 2 - f.width) / 2 + n / 2 + u.width / 2, (o - b) / 2);
			let y = {
					width: f.width,
					height: 80 * i
				},
				T = c.addChild(new Laya.Label);
			T.fontSize = 18 * i, T.wordWrap = !0, T.align = "left", T.valign = "top", T.color = "#000000", T.text = t.nationData.desc || "", T.size(y.width, y.height), T.pos(((n - u.width) / 2 - f.width) / 2 + n / 2 + u.width / 2, (o - b) / 2 + f.height), t.onShow && t.onShow()
		}
		closeNationBanner(t = !1) {
			this.bannerRootNode && (this.bannerRootNode.destroy(), this.bannerRootNode = null, ULLog.console.log("MCPanelLaya:close nationBanner"), this.bannerShowingObj && this.bannerShowingObj.onClose && this.bannerShowingObj.onClose(t), this.bannerShowingObj = null)
		}
		showNationInter(t) {
			console.log("MCPanelLaya showNationInter"), t = t || {
				nationData: {
					title: null,
					desc: null,
					icon: null,
					url: null,
					targetTitle: null
				},
				onShow: null,
				onError: null,
				onClick: null,
				onClose: null
			};
			let e = this.getRootNode();
			if (!e) return ULLog.console.warn("MCPanelLaya.showNationInter nodeCanvas not found!"), void(t.onError && t.onError("nodeCanvas not found!"));
			if (this.interRootNode) return ULLog.console.warn("MCPanelLaya.showNationInter 已经有 inter 正在展示中"), void(t.onError && t.onError("已经有 inter 正在展示中"));
			this.interShowingObj = t;
			let a = {
					width: Laya.stage.width,
					height: Laya.stage.height
				},
				i = e.addChild(new Laya.Sprite);
			i.zOrder = 1e3, i.size(a.width, a.height), i.pos(-a.width / 2, -a.height / 2), i.graphics.drawRect(0, 0, a.width, a.height, "#0000007F"), this.interRootNode = i, this.registerTouchHander(i, t => {
				"click" == t.name && ULLog.console.log("MCPanelLaya:click nationInter bg")
			});
			let s = .86 * Math.min(a.width, a.height),
				n = s,
				o = i.addChild(new Laya.Sprite);
			o.size(s, n), o.pos((a.width - s) / 2, (a.height - n) / 2);
			let r = {
					width: s,
					height: s / 16 * 9
				},
				l = o.addChild(new Laya.Image);
			l.size(r.width, r.height), l.pos(0, 0);
			let c = t.nationData.url || null;
			c ? l.skin = c : l.graphics.drawRect(0, 0, r.width, r.height, "#FFFFFF"), this.registerTouchHander(l, e => {
				"click" == e.name && (ULLog.console.log("MCPanelLaya:click nationInter"), t.onClick && t.onClick())
			});
			let h = 34,
				d = 34,
				_ = o.addChild(new Laya.Image);
			_.skin = "res/_ulsdk_ui/native_adv_close.png", _.size(h, d), _.pos(s - h, 0), this.registerTouchHander(_, t => {
				"click" == t.name && this.closeNationInter(!0)
			});
			let g = 44,
				u = 24,
				m = o.addChild(new Laya.Image);
			m.skin = "res/_ulsdk_ui/native_adv_tag.png", m.size(g, u), m.pos(s - g, r.height - u);
			let p = {
					width: s / 7,
					height: s / 7
				},
				S = o.addChild(new Laya.Image);
			S.size(p.width, p.height), S.pos(.02 * s, .02 * n);
			let b = t.nationData.icon || null;
			b ? S.skin = b : S.graphics.drawRect(0, 0, p.width, p.height, "#DC0032FF");
			let L = {
					width: s,
					height: 36
				},
				I = o.addChild(new Laya.Label);
			I.fontSize = 24, I.align = "center", I.valign = "middle", I.color = "#FFFFFF", I.text = t.nationData.desc || t.nationData.title || "desc", I.size(L.width, L.height), I.pos(0, l.height + 10);
			let A = {
					width: s / 2.5,
					height: s / 2.5 / 16 * 5
				},
				E = o.addChild(new Laya.Label);
			E.fontSize = 24, E.align = "center", E.valign = "middle", E.color = "#ffffff", E.bgColor = "#64DC32", E.text = t.nationData.targetTitle || "点击查看", E.size(A.width, A.height), E.pos((s - A.width) / 2, r.height + L.height + 20), this.registerTouchHander(E, e => {
				"click" == e.name && (ULLog.console.log("MCPanelLaya:click nationInter"), t.onClick && t.onClick())
			}), t.onShow && t.onShow()
		}
		closeNationInter(t = !1) {
			this.interRootNode && (this.interRootNode.destroy(), this.interRootNode = null, ULLog.console.log("MCPanelLaya:close nationInter"), this.interShowingObj && this.interShowingObj.onClose && this.interShowingObj.onClose(t), this.interShowingObj = null)
		}
	}
	const TOUCH_AREA_WIDTH = 100,
		TOUCH_AREA_HEIGHT = 200,
		TOUCH_GAP = 2,
		RIGHT_CODE = "lrlrllrr";
	class ULModuleCheckerManager {
		constructor() {
			this.inputCode = "", this.lastInputTime = 0, this.debugInfos = {}, this.debugInfoRenderNode = null
		}
		init() {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.init"), this.registerTouchListener(), this.refreshDebugInfo(), window.cc && window.cc.director.on(window.cc.Director.EVENT_AFTER_SCENE_LAUNCH, t => {
				ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager on EVENT_AFTER_SCENE_LAUNCH"), this.registerTouchListener(), this.debugInfoRenderNode = null, this.refreshDebugInfo()
			})
		}
		showPanel(t) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.showPanel"), (t = t || []).splice(0, 0, {
				type: "newLine"
			}), t.splice(0, 0, {
				type: "button",
				text: "关闭",
				onClick: () => {
					this.closePanel()
				}
			}), t.splice(0, 0, {
				type: "label",
				text: "小游戏模块调试器"
			}), t.splice(0, 0, {
				type: "newLine"
			}), t.splice(0, 0, {
				type: "newLine"
			}), t.push({
				type: "newLine"
			}), t.push({
				type: "newLine"
			}), t.push({
				type: "newLine"
			}), t.push({
				type: "label",
				text: ULTools.format("©%d Ultralisk Chengdu", (new Date).getFullYear())
			}), this.closePanel();
			let e = this.getOrCreatePanel();
			e && e.show(t)
		}
		closePanel() {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.closePanel"), this.panel && this.panel.close()
		}
		showReferenceRect(t, e, a, i, s, n, o) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.showReferenceRect", t, e, a, i, s, n, o), this.getOrCreatePanel(), this.panel && this.panel.showReferenceRect(t, e, a, i, s, n, o)
		}
		showReferenceRectFromViewPoint(t, e, a, i, s, n, o) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.showReferenceRectFromViewPoint", t, e, a, i, s), this.getOrCreatePanel(), this.panel && this.panel.showReferenceRectFromViewPoint(t, e, a, i, s, n, o)
		}
		showReferenceRectFromScale(t, e, a, i, s, n, o) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.showReferenceRectFromScale", t, e, a, i, s, n, o), this.getOrCreatePanel(), this.panel && this.panel.showReferenceRectFromScale(t, e, a, i, s, n, o)
		}
		hideReferenceRect(t) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.hideReferenceRect", t), this.getOrCreatePanel(), this.panel && this.panel.hideReferenceRect(t)
		}
		hideAllReferenceRects() {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.hideAllReferenceRects"), this.getOrCreatePanel(), this.panel && this.panel.hideAllReferenceRects()
		}
		showNationBanner(t, e = null) {
			if (ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.showNationBanner"), this.getOrCreatePanel(), !this.panel) return;
			e = e || {
				x: .5,
				y: 0,
				width: 1
			}, console.log("ULModuleCheckerManager style:", e);
			let a = null == e.x ? .5 : e.x;
			a = Math.min(a, 1), a = Math.max(a, 0), console.log(a);
			let i = null == e.y ? 0 : e.y;
			i = Math.min(i, 1), i = Math.max(i, 0), console.log(i);
			let s = e.width || 1;
			s = Math.min(s, 1);
			let n = {
				x: a,
				y: i,
				width: s = Math.max(s, 0)
			};
			console.log("ULModuleCheckerManager trimWidth:", n), this.panel.showNationBanner(t, n)
		}
		closeNationBanner() {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.closeNationBanner"), this.getOrCreatePanel(), this.panel && this.panel.closeNationBanner()
		}
		showNationInter(t) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.showNationInter"), this.getOrCreatePanel(), this.panel && this.panel.showNationInter(t)
		}
		closeNationInter() {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.closeNationInter"), this.getOrCreatePanel(), this.panel && this.panel.closeNationInter()
		}
		getItemText(t) {
			if (this.panel) return this.panel.getItemText(t)
		}
		setItemText(t, e) {
			this.panel && this.panel.setItemText(t, e)
		}
		showMsgTip(t) {
			this.getOrCreatePanel(), this.panel && this.panel.showMsgTip(t)
		}
		alertPrompt(t, e, a, i) {
			return this._alertPrompt(t, e, [a], [i])
		}
		alertPrompt2(t, e, a, i, s, n) {
			return this._alertPrompt(t, e, [a, i], [s, n])
		}
		_alertPrompt(t, e, a, i) {
			this.getOrCreatePanel(), this.panel && this.panel.showPromptDialog(t, e, a, i)
		}
		alertPrivacy(t, e, a, i) {
			this.getOrCreatePanel(), this.panel && this.panel.showPrivacyDialog(t, e, a, i)
		}
		showPickerDialog(t, e, a, i) {
			this.getOrCreatePanel(), this.panel && this.panel.showPickerDialog(t, e, a, i)
		}
		addDebugInfo(t, e) {
			this.debugInfos[t] = e, this.refreshDebugInfo()
		}
		removeDebugInfo(t) {
			delete this.debugInfos[t], this.refreshDebugInfo()
		}
		showBigTextWithPickerDialog(t, e, a) {
			let i = [];
			for (let t = 0; t < e.length; t += a) {
				let s = e.substr(t, a);
				i.push({
					text: s,
					value: s
				})
			}
			this.showPickerDialog(t, i, t => {
				this.alertPrompt("完整内容", t, "好的", null)
			}, !0)
		}
		getOrCreatePanel() {
			return this.panel || (window.cc ? this.panel = new MCPanelCreator : window.Laya ? this.panel = new MCPanelLaya : ULLog.console.warn("ULModuleCheckerManager.getOrCreatePanel unknown platform!")), this.panel
		}
		registerTouchListener() {
			if (ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.registerTouchListener"), ULConst.B_INNER_DEBUG && ULLog.console.log("  cc", window.cc), ULConst.B_INNER_DEBUG && ULLog.console.log("  laya", window.laya), ULConst.B_INNER_DEBUG && ULLog.console.log("  Laya", window.Laya), window.cc && window.cc.systemEvent) {
				window.cc;
				let t = window.cc.director.getScene();
				if (!t) return ULConst.B_INNER_DEBUG && ULLog.console.log("  scene not found!"), null;
				let e = t.getChildByName("Canvas");
				if (!e) return ULConst.B_INNER_DEBUG && ULLog.console.log("  nodeCanvas not found!"), null;
				ULConst.B_INNER_DEBUG && ULLog.console.log("nodeCanvas", e), e.on(window.cc.Node.EventType.TOUCH_START, t => {
					let a = t.getLocation(),
						i = e.getContentSize(),
						s = window.cc.rect(0, i.height - TOUCH_AREA_HEIGHT, TOUCH_AREA_WIDTH, TOUCH_AREA_HEIGHT),
						n = window.cc.rect(i.width - TOUCH_AREA_WIDTH, i.height - TOUCH_AREA_HEIGHT, TOUCH_AREA_WIDTH, TOUCH_AREA_HEIGHT);
					s.contains(a) ? this.onTouchSpecialArea("l") : n.contains(a) ? this.onTouchSpecialArea("r") : this.onTouchSpecialArea(null)
				}, null, !0), e.on(window.cc.Node.EventType.TOUCH_END, t => {
					ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_TOUCH_SCREEN_END, {
						lastTouchScreenEnd: ULTools.time()
					})
				}, null, !0)
			} else if (window.Laya && window.Laya.stage) {
				let t = window.Laya,
					e = t.stage.getChildByName("__ulsdk_ui_node_root__");
				if (!e) {
					ULConst.B_INNER_DEBUG && ULLog.console.log("create laya nodeRoot"), (e = t.stage.addChild(new t.Sprite)).size(0, 0), e.pos(t.stage.width / 2, t.stage.height / 2), e.name = "__ulsdk_ui_node_root__", e.zOrder = 4e4;
					let a = this;
					class i extends t.Script {
						onStageClick(e) {
							ULConst.B_INNER_DEBUG && ULLog.console.log("LayaStageToucher.onStageClick", e), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_TOUCH_SCREEN_END, {
								lastTouchScreenEnd: ULTools.time()
							});
							let i = e.stageX,
								s = e.stageY;
							ULConst.B_INNER_DEBUG && ULLog.console.log(i, s, t.stage.width, t.stage.height), s > TOUCH_AREA_HEIGHT ? a.onTouchSpecialArea(null) : i <= TOUCH_AREA_WIDTH ? a.onTouchSpecialArea("l") : i >= t.stage.width - TOUCH_AREA_WIDTH ? a.onTouchSpecialArea("r") : a.onTouchSpecialArea(null)
						}
					}
					e.addComponent(i), ULTimer.callLoop(1, () => {
						let e = t.stage.getChildByName("__ulsdk_ui_node_root__");
						e && e.pos(t.stage.width / 2, t.stage.height / 2)
					})
				}
				ULConst.B_INNER_DEBUG && ULLog.console.log("  nodeRoot", e)
			}
		}
		refreshDebugInfo() {
			if (ULTools.getObjSize(this.debugInfos) <= 0) return void(this.debugInfoRenderNode && (window.cc ? window.cc.isValid(this.debugInfoRenderNode) && this.debugInfoRenderNode.destroy() : window.Laya && this.debugInfoRenderNode.destroy(), this.debugInfoRenderNode = null));
			let t = [];
			ULTools.forEachMap(this.debugInfos, (e, a) => {
				t.push(a)
			});
			let e = t.join("\n");
			if (!this.debugInfoRenderNode)
				if (window.cc) {
					window.cc;
					let t = window.cc.director.getScene();
					if (!t) return ULConst.B_INNER_DEBUG && ULLog.console.log("  scene not found!"), null;
					let e = t.getChildByName("Canvas");
					if (!e) return ULConst.B_INNER_DEBUG && ULLog.console.log("  nodeCanvas not found!"), null;
					let a = new window.cc.Node;
					a.parent = e, a.zIndex = window.cc.macro.MAX_ZINDEX, a.y = 0, a.x = 0, a.width = e.width - 10, a.setAnchorPoint(.5, 1), a.color = window.cc.Color.RED, a.addComponent(window.cc.Label).fontSize = 24, a.getComponent(window.cc.Label).enableWrapText = !0, a.getComponent(window.cc.Label).horizontalAlign = window.cc.Label.HorizontalAlign.CENTER, a.getComponent(window.cc.Label).verticalAlign = window.cc.Label.VerticalAlign.CENTER, a.runAction(window.cc.repeatForever(window.cc.sequence(window.cc.fadeTo(1, 63), window.cc.fadeTo(1, 255)))), this.debugInfoRenderNode = a
				} else if (window.Laya) {
				let t = window.Laya,
					e = t.stage.getChildByName("__ulsdk_ui_node_root__");
				if (!e) return void(ULConst.B_INNER_DEBUG && ULLog.console.log("  nodeRoot not found!"));
				let a = e.addChild(new t.Label);
				a.fontSize = 24, a.color = "#ff0000ff", a.align = "center", a.width = t.stage.width - 10, a.pos(-a.width / 2, 0), a.wordWrap = !0, this.debugInfoRenderNode = a
			}
			if (this.debugInfoRenderNode)
				if (window.cc) {
					window.cc;
					this.debugInfoRenderNode.getComponent(window.cc.Label).string = e
				} else if (window.Laya) {
				this.debugInfoRenderNode.text = e
			}
		}
		onTouchSpecialArea(t) {
			if (ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.onTouchSpecialArea", t), ULTools.time() - this.lastInputTime >= TOUCH_GAP && this.inputCode && (ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager inputCode: touch gap is too long time, cancel."), this.inputCode = ""), t) {
				if (this.inputCode += t, this.lastInputTime = ULTools.time(), ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager inputCode:", this.inputCode), this.inputCode == RIGHT_CODE) {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  right!"), this.inputCode = "";
					let t = this.moreGameAbTestConfig() || [];
					t = t.concat(this.collectionConfig()), this.showPanel(t)
				}
			} else this.inputCode && (ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager inputCode: touch invalid area, cancel."), this.inputCode = "")
		}
		collectionConfig() {
			return ULEventDispatcher.getInstance().dispatchWithReturn(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, {})
		}
		moreGameAbTestConfig() {
			return ULEventDispatcher.getInstance().dispatchWithReturn(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_MORE_GAME_AB_TEST_CONFIG, {})
		}
	}
	class ULSdkManager {
		constructor() {
			this.responseCallback = null, this.bChannelInfoResultResponsed = !1, this.bAllowStartGame = !0, this.version = "0.1", this.modules = [], this.channelInfo = new ULChannelInfo, this.copManager = new ULCopManager, this.advManager = new ULAdvManager, this.statisManager = new ULStatisManager, this.moduleCheckerManager = new ULModuleCheckerManager, this.bChannelInfoResultResponsed = !1, this.responsePending = [], this.sdkCommunicationLog = [], ULTools._hack_console_print_method(), ULTools._start_console_print_LAN()
		}
		static getInstance() {
			return this._instance || (this._instance = new ULSdkManager), this._instance
		}
		initUlsdk(t) {
			ULLog.console.log("ULSdkManger.init"), this.responseCallback = t, this.modules = ULSdkModuleLoader.initAllModules(), ULTools._start_console_print_LAN(), this.advManager.init(), this.statisManager.init(), this.copManager.init(), this.moduleCheckerManager.init(), ULEventDispatcher.getInstance().addListener(ULConst.CMD_GET_BASE_CHANNEL_INFO, ULConst.PRIORITY_NONE, this.onCmdGetBaseChannelInfo.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SET_VERSION, ULConst.PRIORITY_NONE, this.onCmdSetVersion.bind(this)), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_INIT_USER_LOGIN, {}), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_START, {}), window.cc && window.cc.game && window.cc.game.on instanceof Function ? (ULLog.console.log("register cocos EVENT_SHOW & EVENT_HIDE"), window.cc.game.on(window.cc.game.EVENT_SHOW, () => {
				ULLog.console.log("ULSdkManager on EVENT_SHOW"), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_RESUME, {})
			}), window.cc.game.on(window.cc.game.EVENT_HIDE, () => {
				ULLog.console.log("ULSdkManager on CC_EVENT_HIDE"), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_PAUSE, {})
			})) : window.Laya && this._register_laya_life_cycle_listener()
		}
		_register_laya_life_cycle_listener() {
			var t, e = window;
			void 0 !== document.hidden ? t = "hidden" : void 0 !== document.mozHidden ? t = "mozHidden" : void 0 !== document.msHidden ? t = "msHidden" : void 0 !== document.webkitHidden && (t = "webkitHidden");
			var a = !1;

			function onHidden() {
				ULLog.console.log("Laya.onHidden"), a || (a = !0, ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_PAUSE, {}))
			}

			function onShown() {
				ULLog.console.log("Laya.onShown"), a && (a = !1, ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_RESUME, {}))
			}
			if (t)
				for (var i = ["visibilitychange", "mozvisibilitychange", "msvisibilitychange", "webkitvisibilitychange", "qbrowserVisibilityChange"], s = 0; s < i.length; s++) document.addEventListener(i[s], function(e) {
					var a = document[t];
					(a = a || e.hidden) ? onHidden(): onShown()
				});
			else e.addEventListener("blur", onHidden), e.addEventListener("focus", onShown);
			navigator.userAgent.indexOf("MicroMessenger") > -1 && (e.onfocus = onShown), window.wx && (window.wx.onShow && window.wx.onShow(onShown), window.wx.onHide && window.wx.onHide(onHidden)), window.qg && (window.qg.onShow && window.qg.onShow(onShown), window.qg.onHide && window.qg.onHide(onHidden));
			window.hbs && (window.hbs.onShow && window.hbs.onShow(onShown), window.hbs.onHide && window.hbs.onHide(onHidden)), window.ks && (window.ks.onShow && window.ks.onShow(onShown), window.ks.onHide && window.ks.onHide(onHidden)), "onpageshow" in window && "onpagehide" in window && (e.addEventListener("pagehide", onHidden), e.addEventListener("pageshow", onShown), document.addEventListener("pagehide", onHidden), document.addEventListener("pageshow", onShown))
		}
		onRequest(t) {
			let e = null;
			this.recordSdkCommunicationLog(t);
			try {
				e = JSON.parse(t)
			} catch (t) {
				ULLog.console.error(t)
			}
			if (!e) return void ULLog.console.error("请仔细阅读文档,消息必须为json字符串类型");
			let a = e.cmd,
				i = e.data || {};
			if (a) switch (ULLog.console.log("ULSdkManager.onRequest", a, i), a) {
				default:
					ULEventDispatcher.getInstance().dispatch(a, i) || ULLog.console.warn(ULTools.format("未检测到[%s]监听器", a));
					break
			} else ULLog.console.error("cmd为空,请检查是否按照文档规范配置消息")
		}
		response(t, e, a) {
			if (ULLog.console.log("ULSdkManager.response", t, e), !this.bChannelInfoResultResponsed && !a) return ULLog.console.log("  尚未发送/c/channelInfoResult，暂存消息"), void this.responsePending.push({
				cmd: t,
				data: e
			});
			let i = JSON.stringify({
				cmd: t,
				data: e
			});
			this.responseCallback && this.responseCallback(i), this.recordSdkCommunicationLog(i)
		}
		uploadMegadata(t) {
			let e = t.join("_");
			this.statisManager.reportUserEvent(["commonEvent", e])
		}
		isAllowStartGame() {
			return ULLog.console.log("ULSdkManagaer.isAllowStartGame", this.bAllowStartGame), this.bAllowStartGame
		}
		getModuleByName(t) {
			for (let e = 0; e < this.modules.length; e++) {
				const a = this.modules[e];
				if (a.name == t) return a
			}
			return null
		}
		getSdkCommunicationLog() {
			return this.sdkCommunicationLog
		}
		recordSdkCommunicationLog(t) {
			this.sdkCommunicationLog && (this.sdkCommunicationLog.length >= 100 && this.sdkCommunicationLog.splice(0, 1), this.sdkCommunicationLog.push(t))
		}
		_doResponseChannelInfoResult() {
			this.bChannelInfoResultResponsed = !0, this.response(ULConst.CMD_CHANNEL_INFO_RESULT, this.channelInfo.toResponseData());
			for (let t = 0; t < this.responsePending.length; t++) {
				const e = this.responsePending[t];
				this.response(e.cmd, e.data)
			}
			this.responsePending = []
		}
		onCmdGetBaseChannelInfo(t) {
			this.response(ULConst.CMD_GET_BASE_CHANNEL_INFO_RESULT, this.channelInfo.toBaseChannelInfoData(), !0)
		}
		onCmdSetVersion(t) {
			t.data;
			if (t.stopImmediatePropagation(), this.channelInfo.isReady()) return void this._doResponseChannelInfoResult();
			ULLog.console.log("ULSdkManager.onEventSetVersion channelInfo准备中，开启timer进行监听");
			let e = ULConfig.getConfig().i_channel_info_timeout / 1e3;
			ULTimer.callLoop(1 / 60, t => {
				if (t.usedTime >= e) {
					t.stop();
					let e = this.channelInfo.getPreparationFlags();
					return ULLog.console.log("等待channelInfo超时！直接触发channelInfoResult。flags:", e.join(",")), void this._doResponseChannelInfoResult()
				}
				if (this.channelInfo.isReady()) return t.stop(), ULLog.console.log("channelInfo准备完毕！触发channelInfoResult"), void this._doResponseChannelInfoResult()
			})
		}
	}
	ULSdkManager._instance = null;
	class ULSdkMiddleware {
		static initUlsdk() {
			if (ULSdkManager) try {
				return ULSdkManager.getInstance().initUlsdk(this.onResponse), !0
			} catch (t) {
				return ULLog.console.error(t), !1
			} else ULLog.console.log("ULSdkMiddleware.initUlsdk ULSdkManager not found!")
		}
		static request(t) {
			if (!ULSdkManager) return ULLog.console.log("ULSdkMiddleware.request ULSdkManager not found!"), !1;
			try {
				return ULSdkManager.getInstance().onRequest(t), !0
			} catch (t) {
				return ULLog.console.error(t), !1
			}
		}
		static isAllowStartGame() {
			return ULSdkManager ? ULSdkManager.getInstance().isAllowStartGame() : (ULLog.console.log("ULSdkMiddleware.isAllowStartGame ULSdkManager not found!"), !0)
		}
		static registerOnResponseCallback(t) {
			this.fOnResponseCallback = t
		}
		static onResponse(t) {
			(ULSdkMiddleware.fOnResponseCallback instanceof Function || "function" == typeof ULSdkMiddleware.fOnResponseCallback) && ULSdkMiddleware.fOnResponseCallback(t)
		}
	}
	ULSdkMiddleware.fOnResponseCallback = null, window.ULSdkMiddleware = ULSdkMiddleware;
	class ULNativeControllerHtml5 {
		static init(t) {
			this.isEnabled(!0) ? (this.fOnGameCallback = t, ULSdkMiddleware.registerOnResponseCallback(t => {
				this.sendMsgToGame(t)
			})) : console.warn("ULNativeControllerHtml5.init !isEnabled()")
		}
		static isEnabled(t) {
			if (t) try {
				console.log("ULNativeControllerHtml5.isEnabled"), console.log("  wx", window.wx), console.log("  qq", window.qq), console.log("  tt", window.tt), console.log("  swan", window.swan), console.log("  hbs", window.hbs), console.log("  qg", window.qg), console.log("  document", document), console.log("  weibo", window.loadRuntime), console.log("  cc.sys.isBrowser", window.cc && window.cc.sys && window.cc.sys.isBrowser), console.log("  laya conch", window.Laya && window.conch)
			} catch (t) {
				console.log(t)
			}
			return !(!window || !window.Laya || window.conch) || (!(!window || !window.wx) || (!(!window || !window.qq) || (!(!window || !window.tt) || (!(!window || !window.swan) || (!(!window || !window.hbs) || (!(!window || !window.qg) || (!(!window || !window.loadRuntime) || !!(window.cc && window.cc.sys && window.cc.sys.isBrowser))))))))
		}
		static initUlsdk() {
			let t = ULSdkMiddleware.initUlsdk();
			return JSON.stringify({
				ret: t
			})
		}
		static sendMsgToSdk(t) {
			let e = ULSdkMiddleware.request(t);
			return JSON.stringify({
				ret: e
			})
		}
		static sendMsgToGame(t) {
			this.fOnGameCallback instanceof Function && this.fOnGameCallback(t)
		}
		static isAllowStartGame() {
			return ULSdkMiddleware.isAllowStartGame()
		}
	}
	ULNativeControllerHtml5.fOnGameCallback = null;
	const JAVA_FILE_PATH = "demo/ULNativeController",
		JAVA_PARAMS_RETURN = "(Ljava/lang/String;)Ljava/lang/String;",
		JAVA_CALLBACK_NAME = "JAVACALLBACK",
		OC_FILE_NAME = "ULNativeController",
		OC_CALLBACK_NAME = "OCCALLBACK";

	function JAVACALLBACK(t) {
		console.log("on JAVACALLBACK", t);
		try {
			let e = Base64.decode(t);
			mgrNative._onNativeCallbackJava(e)
		} catch (e) {
			console.warn("JAVACALLBACK decode base64 faild! direct use base64JsonStr"), mgrNative._onNativeCallbackJava(t)
		}
	}

	function OCCALLBACK(t) {
		console.log("on OCCALLBACK", t);
		try {
			let e = Base64.decode(t);
			mgrNative._onNativeCallbackObjc(e)
		} catch (e) {
			console.warn("OCCALLBACK decode base64 faild! direct use base64JsonStr"), mgrNative._onNativeCallbackObjc(t)
		}
	}

	function ONHTML5CALLBACK(t) {
		console.log("on ONHTML5CALLBACK", t), mgrNative._onNativeCallbackHtml5(t)
	}
	class mgrNative {
		static onLoad() {
			window[JAVA_CALLBACK_NAME] = JAVACALLBACK, window[OC_CALLBACK_NAME] = OCCALLBACK, window.conch && (this._js2JavaBridge = window.PlatformClass.createClass(JAVA_FILE_PATH), this._js2OCBridge = window.PlatformClass.createClass(OC_FILE_NAME)), this.nativeCallbackPending = [], this.bRegisterNativeCallback || (this.bRegisterNativeCallback = !0, this.registerNativeCallback()), Timer.callLoop(1 / 60, this.onTimer.bind(this))
		}
		static onTimer() {
			let t = this.nativeCallbackPending;
			for (; t.length > 0;) {
				let e = t.shift();
				this.m_receeveFromSdk && this.m_receeveFromSdk(e)
			}
		}
		static registerNativeCallback() {
			ULNativeControllerHtml5.isEnabled() ? this._registernativeCallbackHtml5() : Laya.Browser.onAndroid ? this._registerNativeCallbackJava() : Laya.Browser.onIOS ? this._registerNativeCallbackObjc() : console.warn(`[warn] mgrNative.registerNativeCallback, platform = ${Laya.Browser}, don't have native controller`)
		}
		static isHtml5Platform() {
			return ULNativeControllerHtml5.isEnabled()
		}
		static onNativeCallback(t) {
			t && this.nativeCallbackPending.push(t)
		}
		static _registerNativeCallbackJava() {
			this._js2JavaBridge.call("setCallFuncName", JAVA_CALLBACK_NAME)
		}
		static _registerNativeCallbackObjc() {
			this._callNativeObjc("setCallbackName", {
				callbackName: OC_CALLBACK_NAME
			})
		}
		static _registernativeCallbackHtml5() {
			ULNativeControllerHtml5.init(ONHTML5CALLBACK), this._callNativeHtml5("initUlsdk", null)
		}
		static _onNativeCallbackJava(t) {
			let e = {};
			try {
				e = JSON.parse(t || "")
			} catch (a) {
				console.warn("mgrNative._onNativeCallbackJava jsonStr error!"), e.text = t
			}
			this.onNativeCallback(e)
		}
		static _onNativeCallbackObjc(t) {
			let e = {};
			try {
				e = JSON.parse(t || "")
			} catch (a) {
				console.warn("mgrNative._onNativeCallbackObjc jsonStr error!"), e.text = t
			}
			this.onNativeCallback(e)
		}
		static _onNativeCallbackHtml5(t) {
			let e = {};
			try {
				e = JSON.parse(t || "")
			} catch (a) {
				console.warn("mgrNative._onNativeCallbackJs jsonStr error!"), e.text = t
			}
			this.onNativeCallback(e)
		}
		static isAllowStartGame() {
			return !ULNativeControllerHtml5.isEnabled() || ULNativeControllerHtml5.isAllowStartGame()
		}
		static callNative(t, e) {
			return e = e || {}, console.log(`mgrNative.callNative: ${t}`), ULNativeControllerHtml5.isEnabled() ? this._callNativeHtml5(t, e) : Laya.Browser.onAndroid ? this._callNativeJava(t, e) : Laya.Browser.onIOS ? this._callNativeObjc(t, e) : (console.warn(`[warn] mgrNative.callNative, platform = ${Laya.Browser}, don't have native controller`), null)
		}
		static _callNativeJava(t, e) {
			console.log(`--\x3e: js: 调用本地${t}: ${JSON.stringify(e)}`);
			try {
				let a = JSON.stringify(e),
					i = this._js2JavaBridge.call(t, a);
				return JSON.parse(i)
			} catch (t) {
				return console.warn("mgrNative._onNativeCallbackJava jsonStr error!"), {
					error: t
				}
			}
		}
		static _callNativeObjc(t, e) {
			try {
				let a = JSON.stringify(e),
					i = this._js2OCBridge.call(t + ":", a);
				return JSON.parse(i)
			} catch (t) {
				return console.warn("mgrNative._callNativeObjc jsonStr error!"), console.log(t), {
					error: t
				}
			}
		}
		static _callNativeHtml5(t, e) {
			try {
				let a = JSON.stringify(e),
					i = ULNativeControllerHtml5[t](a);
				return JSON.parse(i)
			} catch (t) {
				return console.warn("mgrNative._callNativeHtml5 jsonStr error!"), {
					error: t
				}
			}
		}
		static setReceiver(t) {
			this.m_receeveFromSdk = t
		}
	}
	mgrNative.nativeCallbackPending = null, mgrNative.bRegisterNativeCallback = !1;
	class SDKBridge {
		static init() {
			this.bInited || (this.bInited = !0, mgrNative.onLoad(), mgrNative.setReceiver(this.recieveFromSdk.bind(this)), mgrNative.callNative("initULSDK", {}), this.m_msgSender = function(t) {
				mgrNative.callNative("sendMsgToSdk", t)
			})
		}
		static registerCmd(t, e) {
			this.m_callbacks.hasOwnProperty(t) && Logger.warn("the cmd has registed:", t), this.m_callbacks[t] = e
		}
		static sendToSdk(t, e) {
			let a = {
				cmd: t,
				data: e
			};
			this.m_msgSender(a)
		}
		static recieveFromSdk(t) {
			let e = t.cmd,
				a = t.data;
			this.m_callbacks[e] ? this.m_callbacks[e](a) : Logger.warn(`SDKBridge.recieveFromSdk can't find callback with cmd: ${e}`)
		}
	}
	let globalEventDis;
	SDKBridge.m_msgSender = function(t) {}, SDKBridge.m_callbacks = {}, SDKBridge.bInited = !1;
	class MsgHandler {
		constructor(t) {
			globalEventDis || (globalEventDis = new Laya.EventDispatcher), this._eventTarget = t || globalEventDis, this._registeredListeners = Object.create(null), this._startedListeners = Object.create(null), this._bStarted = !1
		}
		registerListeners(t, e) {
			for (let a in t) {
				null != this._registeredListeners[a] && console.log(`[警告] MsgHandler.registerListeners msg重复注册！ msgName=${a}`);
				let i = t[a];
				this._registeredListeners[a] = (t => {
					e && e.destroyed ? this.stopProcMsg() : i(t)
				})
			}
			this._bStarted && this.startProcMsg()
		}
		startProcMsg() {
			this._bStarted = !0;
			for (const t in this._registeredListeners)
				if (!this._startedListeners[t]) {
					const e = this._registeredListeners[t];
					this._eventTarget.on(t, this, e), this._startedListeners[t] = e
				}
		}
		stopProcMsg() {
			for (const t in this._startedListeners) {
				let e = this._startedListeners[t];
				this._eventTarget.off(t, this, e)
			}
			this._bStarted = !1, this._startedListeners = Object.create(null)
		}
		sendMsg(t, e) {
			try {
				this._eventTarget.event(t, e)
			} catch (e) {
				Logger.catchError(`MsgHandler.sendMsg:${t}`, e)
			}
		}
		sendMsgWithArray(t, e) {
			try {
				this._eventTarget.event(t, [e])
			} catch (e) {
				Logger.catchError(`MsgHandler.sendMsgWithArray:${t}`, e)
			}
		}
	}

	function safeAdd(t, e) {
		var a = (65535 & t) + (65535 & e);
		return (t >> 16) + (e >> 16) + (a >> 16) << 16 | 65535 & a
	}

	function bitRotateLeft(t, e) {
		return t << e | t >>> 32 - e
	}

	function md5cmn(t, e, a, i, s, n) {
		return safeAdd(bitRotateLeft(safeAdd(safeAdd(e, t), safeAdd(i, n)), s), a)
	}

	function md5ff(t, e, a, i, s, n, o) {
		return md5cmn(e & a | ~e & i, t, e, s, n, o)
	}

	function md5gg(t, e, a, i, s, n, o) {
		return md5cmn(e & i | a & ~i, t, e, s, n, o)
	}

	function md5hh(t, e, a, i, s, n, o) {
		return md5cmn(e ^ a ^ i, t, e, s, n, o)
	}

	function md5ii(t, e, a, i, s, n, o) {
		return md5cmn(a ^ (e | ~i), t, e, s, n, o)
	}

	function binlMD5(t, e) {
		var a, i, s, n, o;
		t[e >> 5] |= 128 << e % 32, t[14 + (e + 64 >>> 9 << 4)] = e;
		var r = 1732584193,
			l = -271733879,
			c = -1732584194,
			h = 271733878;
		for (a = 0; a < t.length; a += 16) i = r, s = l, n = c, o = h, r = md5ff(r, l, c, h, t[a], 7, -680876936), h = md5ff(h, r, l, c, t[a + 1], 12, -389564586), c = md5ff(c, h, r, l, t[a + 2], 17, 606105819), l = md5ff(l, c, h, r, t[a + 3], 22, -1044525330), r = md5ff(r, l, c, h, t[a + 4], 7, -176418897), h = md5ff(h, r, l, c, t[a + 5], 12, 1200080426), c = md5ff(c, h, r, l, t[a + 6], 17, -1473231341), l = md5ff(l, c, h, r, t[a + 7], 22, -45705983), r = md5ff(r, l, c, h, t[a + 8], 7, 1770035416), h = md5ff(h, r, l, c, t[a + 9], 12, -1958414417), c = md5ff(c, h, r, l, t[a + 10], 17, -42063), l = md5ff(l, c, h, r, t[a + 11], 22, -1990404162), r = md5ff(r, l, c, h, t[a + 12], 7, 1804603682), h = md5ff(h, r, l, c, t[a + 13], 12, -40341101), c = md5ff(c, h, r, l, t[a + 14], 17, -1502002290), r = md5gg(r, l = md5ff(l, c, h, r, t[a + 15], 22, 1236535329), c, h, t[a + 1], 5, -165796510), h = md5gg(h, r, l, c, t[a + 6], 9, -1069501632), c = md5gg(c, h, r, l, t[a + 11], 14, 643717713), l = md5gg(l, c, h, r, t[a], 20, -373897302), r = md5gg(r, l, c, h, t[a + 5], 5, -701558691), h = md5gg(h, r, l, c, t[a + 10], 9, 38016083), c = md5gg(c, h, r, l, t[a + 15], 14, -660478335), l = md5gg(l, c, h, r, t[a + 4], 20, -405537848), r = md5gg(r, l, c, h, t[a + 9], 5, 568446438), h = md5gg(h, r, l, c, t[a + 14], 9, -1019803690), c = md5gg(c, h, r, l, t[a + 3], 14, -187363961), l = md5gg(l, c, h, r, t[a + 8], 20, 1163531501), r = md5gg(r, l, c, h, t[a + 13], 5, -1444681467), h = md5gg(h, r, l, c, t[a + 2], 9, -51403784), c = md5gg(c, h, r, l, t[a + 7], 14, 1735328473), r = md5hh(r, l = md5gg(l, c, h, r, t[a + 12], 20, -1926607734), c, h, t[a + 5], 4, -378558), h = md5hh(h, r, l, c, t[a + 8], 11, -2022574463), c = md5hh(c, h, r, l, t[a + 11], 16, 1839030562), l = md5hh(l, c, h, r, t[a + 14], 23, -35309556), r = md5hh(r, l, c, h, t[a + 1], 4, -1530992060), h = md5hh(h, r, l, c, t[a + 4], 11, 1272893353), c = md5hh(c, h, r, l, t[a + 7], 16, -155497632), l = md5hh(l, c, h, r, t[a + 10], 23, -1094730640), r = md5hh(r, l, c, h, t[a + 13], 4, 681279174), h = md5hh(h, r, l, c, t[a], 11, -358537222), c = md5hh(c, h, r, l, t[a + 3], 16, -722521979), l = md5hh(l, c, h, r, t[a + 6], 23, 76029189), r = md5hh(r, l, c, h, t[a + 9], 4, -640364487), h = md5hh(h, r, l, c, t[a + 12], 11, -421815835), c = md5hh(c, h, r, l, t[a + 15], 16, 530742520), r = md5ii(r, l = md5hh(l, c, h, r, t[a + 2], 23, -995338651), c, h, t[a], 6, -198630844), h = md5ii(h, r, l, c, t[a + 7], 10, 1126891415), c = md5ii(c, h, r, l, t[a + 14], 15, -1416354905), l = md5ii(l, c, h, r, t[a + 5], 21, -57434055), r = md5ii(r, l, c, h, t[a + 12], 6, 1700485571), h = md5ii(h, r, l, c, t[a + 3], 10, -1894986606), c = md5ii(c, h, r, l, t[a + 10], 15, -1051523), l = md5ii(l, c, h, r, t[a + 1], 21, -2054922799), r = md5ii(r, l, c, h, t[a + 8], 6, 1873313359), h = md5ii(h, r, l, c, t[a + 15], 10, -30611744), c = md5ii(c, h, r, l, t[a + 6], 15, -1560198380), l = md5ii(l, c, h, r, t[a + 13], 21, 1309151649), r = md5ii(r, l, c, h, t[a + 4], 6, -145523070), h = md5ii(h, r, l, c, t[a + 11], 10, -1120210379), c = md5ii(c, h, r, l, t[a + 2], 15, 718787259), l = md5ii(l, c, h, r, t[a + 9], 21, -343485551), r = safeAdd(r, i), l = safeAdd(l, s), c = safeAdd(c, n), h = safeAdd(h, o);
		return [r, l, c, h]
	}

	function binl2rstr(t) {
		var e, a = "",
			i = 32 * t.length;
		for (e = 0; e < i; e += 8) a += String.fromCharCode(t[e >> 5] >>> e % 32 & 255);
		return a
	}

	function rstr2binl(t) {
		var e, a = [];
		for (a[(t.length >> 2) - 1] = void 0, e = 0; e < a.length; e += 1) a[e] = 0;
		var i = 8 * t.length;
		for (e = 0; e < i; e += 8) a[e >> 5] |= (255 & t.charCodeAt(e / 8)) << e % 32;
		return a
	}

	function rstrMD5(t) {
		return binl2rstr(binlMD5(rstr2binl(t), 8 * t.length))
	}

	function rstrHMACMD5(t, e) {
		var a, i, s = rstr2binl(t),
			n = [],
			o = [];
		for (n[15] = o[15] = void 0, s.length > 16 && (s = binlMD5(s, 8 * t.length)), a = 0; a < 16; a += 1) n[a] = 909522486 ^ s[a], o[a] = 1549556828 ^ s[a];
		return i = binlMD5(n.concat(rstr2binl(e)), 512 + 8 * e.length), binl2rstr(binlMD5(o.concat(i), 640))
	}

	function rstr2hex(t) {
		var e, a, i = "";
		for (a = 0; a < t.length; a += 1) e = t.charCodeAt(a), i += "0123456789abcdef".charAt(e >>> 4 & 15) + "0123456789abcdef".charAt(15 & e);
		return i
	}

	function str2rstrUTF8(t) {
		return unescape(encodeURIComponent(t))
	}

	function rawMD5(t) {
		return rstrMD5(str2rstrUTF8(t))
	}

	function hexMD5(t) {
		return rstr2hex(rawMD5(t))
	}

	function rawHMACMD5(t, e) {
		return rstrHMACMD5(str2rstrUTF8(t), str2rstrUTF8(e))
	}

	function hexHMACMD5(t, e) {
		return rstr2hex(rawHMACMD5(t, e))
	}

	function md5(t, e, a) {
		return e ? a ? rawHMACMD5(e, t) : hexHMACMD5(e, t) : a ? rawMD5(t) : hexMD5(t)
	}
	const version = "3.5.2",
		VERSION = version,
		_hasatob = "function" == typeof atob,
		_hasbtoa = "function" == typeof btoa,
		_hasBuffer = "function" == typeof Buffer,
		_TD = "function" == typeof TextDecoder ? new TextDecoder : void 0,
		_TE = "function" == typeof TextEncoder ? new TextEncoder : void 0,
		b64ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
		b64chs = [...b64ch],
		b64tab = (t => {
			let e = {};
			return b64chs.forEach((t, a) => e[t] = a), e
		})(),
		b64re = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,
		_fromCC = String.fromCharCode.bind(String),
		_U8Afrom = "function" == typeof Uint8Array.from ? Uint8Array.from.bind(Uint8Array) : (t, e = (t => t)) => new Uint8Array(Array.prototype.slice.call(t, 0).map(e)),
		_mkUriSafe = t => t.replace(/[+\/]/g, t => "+" == t ? "-" : "_").replace(/=+$/m, ""),
		_tidyB64 = t => t.replace(/[^A-Za-z0-9\+\/]/g, ""),
		btoaPolyfill = t => {
			let e, a, i, s, n = "";
			const o = t.length % 3;
			for (let o = 0; o < t.length;) {
				if ((a = t.charCodeAt(o++)) > 255 || (i = t.charCodeAt(o++)) > 255 || (s = t.charCodeAt(o++)) > 255) throw new TypeError("invalid character found");
				n += b64chs[(e = a << 16 | i << 8 | s) >> 18 & 63] + b64chs[e >> 12 & 63] + b64chs[e >> 6 & 63] + b64chs[63 & e]
			}
			return o ? n.slice(0, o - 3) + "===".substring(o) : n
		},
		_btoa = _hasbtoa ? t => btoa(t) : _hasBuffer ? t => Buffer.from(t, "binary").toString("base64") : btoaPolyfill,
		_fromUint8Array = _hasBuffer ? t => Buffer.from(t).toString("base64") : t => {
			let e = [];
			for (let a = 0, i = t.length; a < i; a += 4096) e.push(_fromCC.apply(null, t.subarray(a, a + 4096)));
			return _btoa(e.join(""))
		},
		fromUint8Array = (t, e = !1) => e ? _mkUriSafe(_fromUint8Array(t)) : _fromUint8Array(t),
		cb_utob = t => {
			if (t.length < 2) return (e = t.charCodeAt(0)) < 128 ? t : e < 2048 ? _fromCC(192 | e >>> 6) + _fromCC(128 | 63 & e) : _fromCC(224 | e >>> 12 & 15) + _fromCC(128 | e >>> 6 & 63) + _fromCC(128 | 63 & e);
			var e = 65536 + 1024 * (t.charCodeAt(0) - 55296) + (t.charCodeAt(1) - 56320);
			return _fromCC(240 | e >>> 18 & 7) + _fromCC(128 | e >>> 12 & 63) + _fromCC(128 | e >>> 6 & 63) + _fromCC(128 | 63 & e)
		},
		re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,
		utob = t => t.replace(re_utob, cb_utob),
		_encode = _hasBuffer ? t => Buffer.from(t, "utf8").toString("base64") : _TE ? t => _fromUint8Array(_TE.encode(t)) : t => _btoa(utob(t)),
		encode = (t, e = !1) => e ? _mkUriSafe(_encode(t)) : _encode(t),
		encodeURI = t => encode(t, !0),
		re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,
		cb_btou = t => {
			switch (t.length) {
				case 4:
					var e = ((7 & t.charCodeAt(0)) << 18 | (63 & t.charCodeAt(1)) << 12 | (63 & t.charCodeAt(2)) << 6 | 63 & t.charCodeAt(3)) - 65536;
					return _fromCC(55296 + (e >>> 10)) + _fromCC(56320 + (1023 & e));
				case 3:
					return _fromCC((15 & t.charCodeAt(0)) << 12 | (63 & t.charCodeAt(1)) << 6 | 63 & t.charCodeAt(2));
				default:
					return _fromCC((31 & t.charCodeAt(0)) << 6 | 63 & t.charCodeAt(1))
			}
		},
		btou = t => t.replace(re_btou, cb_btou),
		atobPolyfill = t => {
			if (t = t.replace(/\s+/g, ""), !b64re.test(t)) throw new TypeError("malformed base64.");
			t += "==".slice(2 - (3 & t.length));
			let e, a, i, s = "";
			for (let n = 0; n < t.length;) e = b64tab[t.charAt(n++)] << 18 | b64tab[t.charAt(n++)] << 12 | (a = b64tab[t.charAt(n++)]) << 6 | (i = b64tab[t.charAt(n++)]), s += 64 === a ? _fromCC(e >> 16 & 255) : 64 === i ? _fromCC(e >> 16 & 255, e >> 8 & 255) : _fromCC(e >> 16 & 255, e >> 8 & 255, 255 & e);
			return s
		},
		_atob = _hasatob ? t => atob(_tidyB64(t)) : _hasBuffer ? t => Buffer.from(t, "base64").toString("binary") : atobPolyfill,
		_toUint8Array = _hasBuffer ? t => _U8Afrom(Buffer.from(t, "base64")) : t => _U8Afrom(_atob(t), t => t.charCodeAt(0)),
		toUint8Array = t => _toUint8Array(_unURI(t)),
		_decode = _hasBuffer ? t => Buffer.from(t, "base64").toString("utf8") : _TD ? t => _TD.decode(_toUint8Array(t)) : t => btou(_atob(t)),
		_unURI = t => _tidyB64(t.replace(/[-_]/g, t => "-" == t ? "+" : "/")),
		decode = t => _decode(_unURI(t)),
		_noEnum = t => ({
			value: t,
			enumerable: !1,
			writable: !0,
			configurable: !0
		}),
		extendString = function() {
			const t = (t, e) => Object.defineProperty(String.prototype, t, _noEnum(e));
			t("fromBase64", function() {
				return decode(this)
			}), t("toBase64", function(t) {
				return encode(this, t)
			}), t("toBase64URI", function() {
				return encode(this, !0)
			}), t("toBase64URL", function() {
				return encode(this, !0)
			}), t("toUint8Array", function() {
				return toUint8Array(this)
			})
		},
		extendUint8Array = function() {
			const t = (t, e) => Object.defineProperty(Uint8Array.prototype, t, _noEnum(e));
			t("toBase64", function(t) {
				return fromUint8Array(this, t)
			}), t("toBase64URI", function() {
				return fromUint8Array(this, !0)
			}), t("toBase64URL", function() {
				return fromUint8Array(this, !0)
			})
		},
		extendBuiltins = () => {
			extendString(), extendUint8Array()
		},
		gBase64 = {
			version: version,
			VERSION: VERSION,
			atob: _atob,
			atobPolyfill: atobPolyfill,
			btoa: _btoa,
			btoaPolyfill: btoaPolyfill,
			fromBase64: decode,
			toBase64: encode,
			encode: encode,
			encodeURI: encodeURI,
			encodeURL: encodeURI,
			utob: utob,
			btou: btou,
			decode: decode,
			fromUint8Array: fromUint8Array,
			toUint8Array: toUint8Array,
			extendString: extendString,
			extendUint8Array: extendUint8Array,
			extendBuiltins: extendBuiltins
		},
		LOG10 = Math.log(10);
	class Mathf {
		static log(t, e) {
			return null == e ? Math.log(t) / LOG10 : Math.log(t) / Math.log(e)
		}
		static getDigits(t) {
			return Math.floor(this.log(t))
		}
		static random(t, e) {
			return null == t ? Math.random() : null == e ? Math.random() * t + 1 | 0 : Math.random() * (e - t + 1) + t | 0
		}
		static randomPlusOrMinus() {
			return 2 * (this.random(2) - 1) - 1
		}
		static trueOrFalse() {
			return Math.random() > .5
		}
		static randomEnable(t) {
			return this.random(100) <= t
		}
		static clamp01(t) {
			return t > 1 ? 1 : t < 0 ? 0 : t
		}
		static clamp(t, e, a) {
			return t < e ? e : t > a ? a : t
		}
		static sign(t) {
			return t >= 0 ? 1 : -1
		}
		static fuzzyEquals(t, e) {
			return Math.abs(t - e) < this.EPSILON
		}
		static lerp(t, e, a) {
			return t + (e - t) * this.clamp01(a)
		}
		static inverseLerp(t, e, a) {
			return t != e ? this.clamp01((a - t) / (e - t)) : 0
		}
		static lerpFromInverseLerp(t, e, a, i, s) {
			return this.lerp(t, e, this.inverseLerp(a, i, s))
		}
		static getFitScale(t, e, a, i) {
			let s = a / t,
				n = i / e;
			return Math.min(s, n)
		}
		static round(t, e) {
			e = e || 0;
			let a = this.roundPower10Double[e];
			return t *= a, Math.round(t) / a
		}
		static loop(t, e, a) {
			if (null == a && (a = e, e = 0), t < e) return e;
			return e + (t - e) % (a - e)
		}
		static pingPong(t, e, a) {
			if (null == a && (a = e, e = 0), t < e) return e; {
				let i = a - e,
					s = t - e,
					n = s % i;
				return Math.floor(s / i) % 2 == 0 ? n + e : a - n
			}
		}
		static nextGaussian(t, e) {
			return t + this.uniform2NormalDistribution() * e
		}
		static uniform2NormalDistribution() {
			for (var t = 0, e = 0; e < 12; e++) t += Math.random();
			return t - 6
		}
		static circleRandom(...t) {
			return this.arrCircleRandom(t)
		}
		static arrCircleRandom(t) {
			let e = 0;
			for (let a = 0; a < t.length; a++) e += t[a];
			if (e <= 0) return -1;
			let a = Mathf.random(e);
			for (let e = 0; e < t.length; e++) {
				if (a <= t[e]) return e;
				a -= t[e]
			}
			return -1
		}
		static makeRandomArray(t) {
			let e = new Array(t);
			for (let a = 0; a < t; a++) e[a] = a;
			return this.shuffle(e), e
		}
		static randomFromArray(t, e) {
			if (t && t.length) {
				let a = this.random(t.length) - 1;
				return e ? t.splice(a, 1)[0] : t[a]
			}
			return null
		}
		static shuffle(t) {
			let e, a;
			for (let i = t.length - 1; i > 0; i--) a = this.random(0, i), e = t[i], t[i] = t[a], t[a] = e
		}
		static swap(t, e, a) {
			let i = t[e];
			t[e] = t[a], t[a] = i
		}
		static minIndex(t) {
			let e = Number.MAX_SAFE_INTEGER,
				a = -1;
			for (let i = t.length - 1; i >= 0; i--) t[i] <= e && (e = t[i], a = i);
			return a
		}
		static distance(t, e) {
			let a = t.x - e.x,
				i = t.y - e.y;
			return Math.sqrt(a * a + i * i)
		}
		static distance2(t, e) {
			return Math.sqrt(t * t + e * e)
		}
		static distanceSqr(t, e) {
			let a = t.x - e.x,
				i = t.y - e.y;
			return a * a + i * i
		}
		static distanceSqr2(t, e) {
			return t * t + e * e
		}
		static easeInLogic(t) {
			return 1 - Math.sin(.5 * Math.PI * (1 - t))
		}
		static easeOutLogic(t) {
			return Math.sin(.5 * Math.PI * t)
		}
		static easeInOutLogic(t) {
			let e = 2 * Math.PI;
			return t - Math.sin(t * e) / e
		}
		static bounceLogic(t) {
			return t < .363636 ? t *= 7.5685 * t : t = t < .727272 ? 7.5625 * (t -= .545454) * t + .75 : t < .90909 ? 7.5625 * (t -= .818181) * t + .9375 : 7.5625 * (t -= .9545454) * t + .984375, t
		}
		static point2Ray(t, e, a) {
			return Laya.Vector3.add(t, e, this._TEMP_VEC3), this.point2line(t, this._TEMP_VEC3, a)
		}
		static point2line(t, e, a) {
			let i = Math.sqrt,
				s = Math.pow,
				n = i(s(t.x - e.x, 2) + s(t.y - e.y, 2) + s(t.z - e.z, 2)),
				o = i(s(t.x - a.x, 2) + s(t.y - a.y, 2) + s(t.z - a.z, 2)),
				r = i(s(a.x - e.x, 2) + s(a.y - e.y, 2) + s(a.z - e.z, 2)),
				l = (s(o, 2) + s(n, 2) - s(r, 2)) / (2 * n * o);
			return o * i(1 - s(l, 2))
		}
		static intersectTriangle(t, e, a, i, s, n) {
			let o = 0,
				r = 0,
				l = 0,
				c = this.TEMP_VEC3S[0];
			Laya.Vector3.subtract(i, a, c);
			let h = this.TEMP_VEC3S[1];
			Laya.Vector3.subtract(s, a, h);
			let d = this.TEMP_VEC3S[2];
			Laya.Vector3.cross(e, h, d);
			let _ = Laya.Vector3.dot(c, d),
				g = this.TEMP_VEC3S[3];
			if (_ > 0 ? Laya.Vector3.subtract(t, a, g) : (Laya.Vector3.subtract(a, t, g), _ = -_), _ < 1e-8) return !1;
			if ((r = Laya.Vector3.dot(g, d)) < 0 || r > _) return !1;
			let u = this.TEMP_VEC3S[4];
			if (Laya.Vector3.cross(g, c, u), (l = Laya.Vector3.dot(e, u)) < 0 || r + l > _) return !1;
			if (o = Laya.Vector3.dot(h, u), n) {
				let a = 1 / _;
				o *= a, r *= a, l *= a, n.t = o, n.u = r, n.v = l;
				let i = e.clone();
				Laya.Vector3.scale(i, o, i), Laya.Vector3.add(t, i, i), n.p = i
			}
			return !0
		}
	}
	Mathf.roundPower10Double = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13, 1e14, 1e15], Mathf.PI = 3.14159274, Mathf.Deg2Rad = .0174532924, Mathf.Rad2Deg = 57.295779, Mathf.TEMP_POINT = new Laya.Point, Mathf.TEMP_POINTS = [new Laya.Point, new Laya.Point, new Laya.Point, new Laya.Point], Mathf.TempRect = Laya.Rectangle.create(), Mathf.TEMP_VEC3 = new Laya.Vector3, Mathf.TEMP_VEC3S = [new Laya.Vector3, new Laya.Vector3, new Laya.Vector3, new Laya.Vector3, new Laya.Vector3], Mathf._TEMP_VEC3 = new Laya.Vector3, Mathf.EPSILON = 1e-6, Mathf.calcPointOnArc = function(t, e, a, i) {
		let s, n, o = i * Math.PI / 180;
		return [s = Math.cos(o) * a + t, n = Math.sin(o) * a + e]
	};
	let pako = window.pako;

	function _dump(t, e) {
		let a = "";
		e || (e = 0);
		let i = "";
		for (let t = 0; t < e + 1; t++) i += "    ";
		if (t instanceof Array)
			for (let s = 0; s < t.length; s++) {
				let n = t[s];
				"object" == typeof n ? (a += i + s + " ...\n", a += _dump(n, e + 1)) : a += "number" == typeof n ? i + s + " => " + n + "\n" : i + s + ' => "' + n + '"\n'
			} else if ("object" == typeof t)
				for (let s in t) {
					let n = t[s];
					"object" == typeof n ? (a += i + "'" + s + "' ...\n", a += _dump(n, e + 1)) : a += "number" == typeof n ? i + "'" + s + "' => " + n + "\n" : i + "'" + s + "' => \"" + n + '"\n'
				} else a = "===>" + t + "<===(" + typeof t + ")";
		return a
	}
	class Tools {
		static isOneDay(t, e) {
			let a = new Date(1e3 * t),
				i = new Date(1e3 * e);
			return a.getFullYear() == i.getFullYear() && a.getMonth() == i.getMonth() && a.getDate() == i.getDate()
		}
		static getMidnightTime(t) {
			let e;
			return (e = null == t ? new Date(Date.now()) : new Date(1e3 * t)).setHours(0, 0, 0, 0), e.getTime() / 1e3
		}
		static getObjSize(t) {
			if (!t) return 0;
			if (Array.isArray(t)) return t.length;
			let e = 0;
			return Tools.forEachMap(t, (t, a) => {
				e++
			}), e
		}
		static forEachMap(t, e) {
			if (t)
				for (var a, i, s = Object.keys(t), n = 0, o = s.length; n < o && (null == (i = t[a = s[n]]) || !e(a, i)); n++);
		}
		static clearNullValue(t) {
			for (var e, a = Object.keys(t), i = 0, s = a.length; i < s; i++) null == t[e = a[i]] && delete t[e]
		}
		static splitToNumber(t, e) {
			if (!t || !e) return [];
			let a = t.split(e),
				i = [];
			for (let t = 0; t < a.length; t++) i[t] = this.safeParseInt(a[t], null);
			return i
		}
		static formatNumber(t, e, a) {
			let i = t = Math.floor(t),
				s = 1;
			for (;
				(i /= 10) >= 1;) s++;
			if (s >= a) return t.toString(); {
				let i = a - s,
					n = "";
				for (let t = 0; t < i; t++) n += e;
				return n + t
			}
		}
		static _formatTime(t, e) {
			let a = Math.floor(t / 3600),
				i = Math.floor(t / 60) % 60,
				s = Math.floor(t) % 60;
			return e.match("%h") && (e = e.replace("%h", a.toString())), e.match("%H") && (e = e.replace("%h", Tools.formatNumber(a, "0", 2))), e.match("%m") && (e = e.replace("%m", i.toString())), e.match("%M") && (e = e.replace("%M", Tools.formatNumber(i, "0", 2))), e.match("%s") && (e = e.replace("%s", s.toString())), e.match("%S") && (e = e.replace("%S", Tools.formatNumber(s, "0", 2))), e
		}
		static formatTime(t) {
			if ((t = Math.ceil(t)) <= 0) return "00:00";
			let e = Math.floor(t / 3600),
				a = Math.floor(t / 60) % 60,
				i = Math.ceil(t) % 60,
				s = "";
			return e > 0 && (s = e + ":"), s = a > 9 ? `${s}${a}:` : `${s}0${a}:`, s = i > 9 ? `${s}${i}` : `${s}0${i}`
		}
		static formatFullTime(t = Date.now()) {
			var e = new Date(t),
				a = e.getFullYear(),
				i = e.getMonth() + 1,
				s = e.getDate(),
				n = e.getHours(),
				o = e.getMinutes(),
				r = e.getSeconds();
			return `${a}-${i<10?"0"+i:i}-${s<10?"0"+s:s} ${n<10?"0"+n:n}:${o<10?"0"+o:o}:${r<10?"0"+r:r}`
		}
		static formatSimpleTime(t) {
			return (t = Math.max(Math.ceil(t), 0)) < 60 ? `0:0${t}` : t < 3600 ? `0:${Math.ceil(t/60)}0` : `${Math.ceil(t/3600)}:00`
		}
		static formatDate(t) {
			var e = new Date(t);
			return `${e.getFullYear()}-${e.getMonth()+1}-${e.getDate()}`
		}
		static generateUUID() {
			let t = (new Date).getTime();
			return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, e => {
				var a = (t + 16 * Math.random()) % 16 | 0;
				return t = Math.floor(t / 16), ("x" == e ? a : 3 & a | 8).toString(16)
			})
		}
		static deepCopy(t, e) {
			if (!t) return t;
			if (t instanceof Array) {
				let a = e || [],
					i = t.length;
				for (let e = 0; e < i; e++) {
					const i = t[e];
					a.push(this.deepCopy(i))
				}
				return a
			}
			if (t instanceof Object) {
				let a = e || {},
					i = Object.keys(t);
				for (let e = 0; e < i.length; e++) {
					let s = i[e],
						n = t[s];
					a[s] = this.deepCopy(n)
				}
				return a
			}
			return t
		}
		static testDeepCopy() {
			console.log(this.deepCopy("haha"));
			console.log(this.deepCopy(3));
			console.log(this.deepCopy(["1", "3"]));
			console.log(this.deepCopy({
				a: "h",
				b: "m"
			}))
		}
		static mergeArray(t, e) {
			for (let a = 0; a < t.length; a++) e.push(t[a])
		}
		static swap(t, e, a) {
			let i = t[e];
			t[e] = t[a], t[a] = i
		}
		static getMd5(t) {
			return md5(null == t ? "null" : t)
		}
		static getMax(t) {
			let e = -Number.MAX_VALUE;
			for (let a = 0; a < t.length; a++) e < t[a] && (e = t[a]);
			return e
		}
		static getMaxIndex(t) {
			let e = -Number.MAX_VALUE,
				a = -1;
			for (let i = 0; i < t.length; i++) e < t[i] && (e = t[i], a = i);
			return a
		}
		static isValueType(t) {
			let e = typeof t;
			return "number" == e || "boolean" == e || "string" == e
		}
		static serializeObject(t) {
			let e = this.deepCopy(t);
			return JSON.stringify(e)
		}
		static copyTo(t, e) {
			if (t instanceof Array)
				for (let a = 0; a < t.length; a++) e[a] = t[a];
			if (t instanceof Object) {
				let a = Object.keys(t);
				for (let i = 0; i < a.length; i++) {
					let s = a[i];
					e[s] = t[s]
				}
			}
		}
		static deserializeObject(t, e) {
			let a = JSON.parse(t);
			this.copyTo(a, e)
		}
		static safeParseInt(t, e, a) {
			let i = parseInt(t, a);
			return isNaN(i) ? e : i
		}
		static safeParseFloat(t, e) {
			let a = parseFloat(t);
			return isNaN(a) ? e : a
		}
		static safeParseBool(t) {
			return !!t && ("0" != (t = t.toString()) && "false" != (t = t.toLowerCase()))
		}
		static arrayCopy(t, e, a, i, s) {
			if (t.length < e + s) throw "arrayCopy: src out of bound";
			if (a.length < i + s) throw "arrayCopy: dest out of bound";
			for (let n = 0; n < s; n++) a[i + n] = t[e + n]
		}
		static arrayFill(t, e) {
			for (let a = t.length - 1; a >= 0; a--) t[a] = e
		}
		static sort_db_by_order(t, e) {
			return t.order - e.order
		}
		static dump(t, e, a) {
			let i = _dump(t);
			console.log("dump-begin", e), console.log(i), console.log("dump-end")
		}
		static utf8Len(t) {
			var e = 0;
			if (t)
				for (var a = 0; a < t.length; a++) {
					let i = t.charCodeAt(a);
					i > 127 || 94 == i ? e += 2 : e++
				}
			return e
		}
		static bitSub(t, e) {
			return (t & e) > 0 ? t - e : t
		}
		static compress(t) {
			return pako.gzip(t, {
				to: "string"
			})
		}
		static decompress(t) {
			try {
				return pako.ungzip(t, {
					to: "string"
				})
			} catch (t) {
				return Logger.catchError("Tools.decompress", t), null
			}
		}
		static compressToBase64(t) {
			let e = this.compress(t);
			return Base64.encode(e)
		}
		static decompressFromBase64(t) {
			let e = Base64.decode(t);
			return this.decompress(e)
		}
		static compressToBase64New(t) {
			let e = this.compress(t);
			return gBase64.encode(e, !0)
		}
		static decompressFromBase64New(t) {
			let e = gBase64.decode(t);
			return this.decompress(e)
		}
		static compressArr(t) {
			return pako.deflate(t)
		}
		static decompressArr(t) {
			try {
				return pako.inflate(t)
			} catch (t) {
				Logger.catchError("Tools.decompressArr", t)
			}
		}
		static decompressArrToStr(t) {
			return pako.ungzip(t, {
				to: "string"
			})
		}
		static printTrace() {
			Logger.isDebugLevel && console.trace && Logger.log(console.trace())
		}
		static getPath(t) {
			let e = t.lastIndexOf("/");
			return e > 0 ? t.slice(0, e + 1) : ";;"
		}
		static _toHexColor(t) {
			let e;
			return e = (e = Math.floor(t).toString(16)).length > 1 ? e : "0" + e
		}
		static toHexColor(t) {
			return "#" + this._toHexColor(t.r) + this._toHexColor(t.g) + this._toHexColor(t.b)
		}
		static requestHttp(t, e, a, i) {
			var s = new Laya.HttpRequest;
			s.http.timeout = 1e4, s.once(Laya.Event.COMPLETE, e, a), s.once(Laya.Event.ERROR, e, i), s.send("res/data.data", "", "get", "text")
		}
		static reverseBitmap(t, e, a) {
			var i = new Uint8Array(e * a * 4);
			let s = 4 * e,
				n = 0,
				o = (a - 1) * s;
			for (var r = a - 1; r >= 0; r--) i.set(t.slice(o, o + s), n), n += s, o -= s;
			return i
		}
		static getTex2dFromTex2d(t, e, a, i, s) {
			e |= 0, a |= 0, i |= 0, s |= 0;
			var n = this.getTexturePixels(t, e, a, i, s);
			let o = new Laya.Texture2D(i, s, t.format, !1, !0);
			return o.setPixels(n), o
		}
		static getTexturePixels(t, e, a, i, s) {
			e |= 0, a |= 0, i |= 0, s |= 0;
			let n = t.width,
				o = t.height,
				r = t.getPixels();
			if (0 == e && 0 == a && i == n && s == o) return r;
			let l = Laya.Texture.DEF_UV,
				c = Math.round(l[0] * n),
				h = Math.round(l[1] * o);
			var d = new Uint8Array(i * s * 4);
			let _ = 4 * n,
				g = 4 * c + 4 * e + (h + a) * _;
			for (var u = 0; u < s; u++) d.set(r.slice(g, g + 4 * i), 4 * i * (u + 0) + 0), g += _;
			return d
		}
		static calcWheelTarget(t, e) {
			let a = 0;
			for (let i = 0; i < t.length; i++) {
				const s = t[i];
				let n = parseInt(s[e]);
				if (isNaN(n)) return console.warn(`Tools.calcWheelTarget weight field not found! key=[${e}]`), null;
				a += n
			}
			let i = Mathf.random(a);
			for (let a = 0; a < t.length; a++) {
				const s = t[a];
				let n = parseInt(s[e]);
				if (i <= n) return s;
				i -= n
			}
			return null
		}
		static sortArrayByField(t, e) {
			e = "string" == typeof e ? [e] : e;
			let a = [];
			for (let t in e) {
				let i = e[t];
				if (i && "" != i)
					if ("-" === i.substring(0, 1)) {
						let t = i.substring(1, i.length);
						t && "" != t && a.push([t, !0])
					} else a.push([i, !1])
			}
			let i = [];
			for (let e = 0; e < t.length; e++) {
				const a = t[e];
				i.push(a)
			}
			return i.sort((t, e) => {
				let i = 0;
				for (let s in a) {
					let n = a[s],
						o = n[0],
						r = n[1],
						l = t[o],
						c = e[o];
					if (null != l && 0 != (i = r ? c - l : l - c)) return i
				}
				return i
			}), i
		}
		static calcAngleA2B(t, e) {
			if (!t) return 0;
			if (!e) return 0;
			let a = Laya.Vector3.scalarLength(t),
				i = Laya.Vector3.scalarLength(e);
			if (!a) return 0;
			if (!i) return 0;
			let s = Laya.Vector3.dot(t, e) / (a * i);
			return Math.acos(s)
		}
	}
	class Queue {
		constructor(t = 128, e = !0) {
			this.autoGrow = !0, this.autoGrow = e, this.maxLen = t, this.tail = 0, this.head = 0, this.count = 0, this.queue = new Array(t)
		}
		get size() {
			return this.count
		}
		get max() {
			return this.maxLen
		}
		enqueue(t) {
			if (this.autoGrow) this.count >= this.maxLen - 1 && this.grow();
			else if (this.count >= this.maxLen) return !1;
			return this.queue[this.tail] = t, this.tail = ++this.tail % this.maxLen, this.count++, !0
		}
		dequeue() {
			for (; this.count <= 0;) return null;
			let t = this.queue[this.head];
			return this.queue[this.head] = null, this.head = ++this.head % this.maxLen, this.count--, t
		}
		peek() {
			for (; this.count <= 0;) return null;
			return this.queue[this.head]
		}
		grow() {
			let t = this.maxLen + (this.maxLen >> 1);
			this.maxLen = this.hugeLen(t);
			let e = new Array(this.maxLen);
			this.count > 0 && (this.head < this.tail ? Tools.arrayCopy(this.queue, this.head, e, 0, this.count) : (Tools.arrayCopy(this.queue, this.head, e, 0, this.queue.length - this.head), Tools.arrayCopy(this.queue, 0, e, this.queue.length - this.head, this.tail))), this.queue = e, this.head = 0, this.tail = this.count == this.maxLen ? 0 : this.count
		}
		hugeLen(t) {
			if (t < 0) throw "Queue.hugeLen: OutOfMemoryError";
			return t > Queue.MAX_ARRAY_SIZE ? Queue.MAX_ARRAY_SIZE : t
		}
		clear() {
			this.tail = 0, this.head = 0, this.count = 0, this.queue = new Array(this.queue.length)
		}
		reset() {
			this.tail = 0, this.head = 0, this.count = 0
		}
		indexOf(t) {
			if (t < 0 || t >= this.count) return null;
			return this.queue[(this.head + t) % this.maxLen]
		}
		contains(t) {
			for (let e = 0; e < this.count; e++)
				if (t == this.indexOf(e)) return !0;
			return !1
		}
	}
	Queue.MAX_ARRAY_SIZE = Number.MAX_VALUE - 8;
	const KEY_POOL_ID = "__pool_id",
		KEY_POOL_KEY = "__pool_key",
		KEY_FLAG_IN_POOL = "__pool_flag_inpool";
	class PoolStack {
		constructor() {
			this.m_queue = new Queue(16, !0), this.m_referenceCount = 0
		}
		get length() {
			return this.m_queue.size
		}
		push(t) {
			this.m_queue.enqueue(t)
		}
		pop() {
			return this.m_queue.dequeue()
		}
		retain() {
			this.m_referenceCount++
		}
		release() {
			this.m_referenceCount--
		}
		get referenceCount() {
			return this.m_referenceCount
		}
		get totalCount() {
			return this.m_referenceCount + this.m_queue.size
		}
	}
	class PoolManager {
		constructor() {
			this.pools = [], this.poolConfigs = []
		}
		_getPool(t, e) {
			let a = this.pools[t];
			a || (a = {}, this.pools[t] = a);
			let i = a[e];
			return i || (i = new PoolStack, a[e] = i), i
		}
		register(t, e, a = !0) {
			if (t[KEY_POOL_ID]) {
				if (this.poolConfigs[t[KEY_POOL_ID]].reuseClass === t) return void Logger.error("PoolManager.register class is registed.", t)
			}
			let i = {
				reuseClass: t,
				maxCount: e,
				bOverload: a
			};
			t[KEY_POOL_ID] = this.poolConfigs.length, this.poolConfigs.push(i)
		}
		get(t, e) {
			let a = t[KEY_POOL_ID];
			if (null == a) return Logger.warn("PoolManager.get class is not register.", t), this.register(t, 1e3), this.get(t, e);
			let i = this.poolConfigs[a];
			if (!i) return void Logger.warn(`"PoolManager.get config not found! poolId = ${a}"`);
			null == e && (e = "__default_pool_key__");
			let s = this._getPool(a, e),
				n = s.pop();
			if (!n) {
				if (!i.bOverload && s.totalCount >= i.maxCount) return null;
				(n = new t(e))[KEY_POOL_ID] = a, n[KEY_POOL_KEY] = e
			}
			return s.retain(), n.reuse(), n[KEY_FLAG_IN_POOL] = !1, n
		}
		put(t) {
			if (!t) return Logger.warn("PoolManager.put node is nil!"), !1;
			let e = t[KEY_POOL_ID],
				a = t[KEY_POOL_KEY];
			if (null == e) return Logger.warn("PoolManager.put obj[KEY_POOL_ID] not found!"), !1;
			if (!a) return Logger.warn("PoolManager.put obj[KEY_POOL_KEY] not found!"), !1;
			let i = this.poolConfigs[e];
			if (!i) return Logger.warn(`PoolManager.put config not found! poolId:[${e}] key:[${a}]`), !1;
			if (t[KEY_FLAG_IN_POOL]) return Logger.warn(`PoolManager.put obj is already in pool! [${e}] key:[${a}]`), !1;
			if (t.destroyed || t.isResNodeDestroyed) return Logger.warn(`PoolManager.put obj is destroyed! [${e}] key:[${a}]`), !1;
			t.unuse();
			let s = this._getPool(e, a);
			return s.length < i.maxCount ? (t[KEY_FLAG_IN_POOL] = !0, s.push(t)) : (Logger.debug(`PoolManager.put pool:[${e}] key:[${a}] is full!`), t.dispose()), s.release(), !0
		}
		clean(t, e) {
			let a = t[KEY_POOL_ID];
			for (const t in this.pools)
				if (null != a || a == t) {
					const a = this.pools[t];
					for (const t in a)
						if (!e || e == t) {
							const e = a[t];
							let i = e.length;
							for (let t = 0; t < i; t++) {
								e.pop().dispose()
							}
						}
				}
		}
		debugInfo() {
			console.log("\n------ debug PoolManager ------");
			for (const t in this.pools) {
				const e = this.pools[t];
				for (const a in e) {
					const i = e[a],
						s = this.poolConfigs[t];
					console.log(`pool:${t}    class:${s.reuseClass.name}    key:${a}    cached:${i.length}    used:${i.referenceCount}`)
				}
			}
			console.log("\n------ debug pool class info ------")
		}
		debugClassId() {
			for (let t = 0; t < this.poolConfigs.length; t++) {
				let e = this.poolConfigs[t],
					a = e.reuseClass.toString(),
					i = a.indexOf("{");
				i && i > 9 && (a = a.substring(9, i)), console.log(`class:${a}    name:${e.reuseClass.name}    poolId:${e.reuseClass[KEY_POOL_ID]}`)
			}
		}
	}
	class Stack {
		constructor(t = 128, e = !0) {
			this.autoGrow = !0, this.autoGrow = e, this.count = 0, this.stack = new Array(t)
		}
		get size() {
			return this.count
		}
		push(t) {
			return !(!this.autoGrow && this.count >= this.stack.length) && (this.stack[this.count++] = t, !0)
		}
		pop() {
			if (this.count <= 0) return null;
			let t = this.stack[--this.count];
			return this.stack[this.count] = null, t
		}
		peek() {
			for (; this.count <= 0;) return null;
			return this.stack[this.count - 1]
		}
		clear() {
			this.count = 0, this.stack = new Array(this.stack.length)
		}
		reset() {
			this.count = 0
		}
		indexOf(t) {
			return t < 0 || t >= this.count ? null : this.stack[t]
		}
		contains(t) {
			for (let e = 0; e < this.count; e++)
				if (t == this.stack[e]) return !0;
			return !1
		}
	}
	const KEY_POOL_ID$1 = "__pool_id2",
		KEY_FLAG_IN_POOL$1 = "__pool_flag_inpool";
	class Pool {
		constructor() {
			this._pools = [], this._classNames = [], this._key2id = Object.create(null)
		}
		get(t) {
			let e = t[KEY_POOL_ID$1];
			null == e && (e = this._pools.length, t[KEY_POOL_ID$1] = e, this._classNames.push(t.name || "unkown"), this._pools.push(new Stack(32, !0)));
			let a = this._pools[e].pop();
			return a ? (a[KEY_FLAG_IN_POOL$1] = !1, a) : ((a = new t)[KEY_POOL_ID$1] = e, a)
		}
		put(t) {
			let e = t[KEY_POOL_ID$1];
			null != e ? t[KEY_FLAG_IN_POOL$1] ? Logger.warn(`Pool.put obj is already in pool! [${e}].`) : (t[KEY_FLAG_IN_POOL$1] = !0, this._pools[e].push(t)) : Logger.warn("Pool.put obj[KEY_POOL_ID] not found!")
		}
		getObject(t) {
			let e = this._key2id[t];
			null == e && (e = this._pools.length, this._key2id[t] = e, this._classNames.push(t), this._pools.push(new Stack(32, !0)));
			let a = this._pools[e].pop();
			return a ? (a[KEY_FLAG_IN_POOL$1] = !1, a) : ((a = Object.create(null))[KEY_POOL_ID$1] = e, a)
		}
		debugInfo() {
			console.log("\n------ debug pools ------");
			for (let t = 0; t < this._pools.length; t++) {
				const e = this._pools[t];
				console.log(`pool:${t}    name:${this._classNames[t]}    cached:${e.size}`)
			}
			console.log("")
		}
	}
	var SDK_VERSIONS_VALUE;
	! function(t) {
		t.NONE = "None", t.V5 = "V5", t.V6 = "V6"
	}(SDK_VERSIONS_VALUE || (SDK_VERSIONS_VALUE = {}));
	class _G {
		static sendMsg(t, e) {
			this.m_MsgHandler.sendMsg(t, e)
		}
		static get canvasWidth() {
			return UIRoot.canvasWidth
		}
		static get canvasHeight() {
			return UIRoot.canvasHeight
		}
		static get canvasFitWidth() {
			return UIRoot.canvasFitWidth
		}
		static get canvasFitHeight() {
			return UIRoot.canvasFitHeight
		}
		static get top() {
			return UIRoot.fitTop
		}
		static get bottom() {
			return this.canvasHeight - this.top
		}
		static get left() {
			return UIRoot.fitLeft
		}
		static get right() {
			return this.canvasWidth - this.left
		}
		static get centerX() {
			return this.canvasWidth / 2
		}
		static get centerY() {
			return this.canvasHeight / 2
		}
	}
	_G.H5_TEST = !1, _G.DEBUG = !1, _G.GAME_ID = "83", _G.SDK_VERSION = SDK_VERSIONS_VALUE.NONE, _G.RECORD_VERSION = 16, _G.GAME_VERSION = "v1224.2002", _G.PATCH_VERSION = "0", _G.PATCH_INFO = {
		PATCH_LIST: [],
		PATCH_PATH: "",
		B_ID: 0,
		PATCH_INFO_FILENAME: "patch_info.json",
		APP: "",
		P_ID: 1,
		HOST_CDN: "h005up.ultralisk.cn",
		HOST: "h005.ultralisk.cn:4022",
		VERSION: "",
		CONF: {
			CONFIG_VERSION: "",
			PUBLISH_CHANNEL: "",
			B_SKIP_PAYMENT: !0,
			LOGO_TEXTURES: [],
			PATCH_FILTER: {},
			B_DISABLE_DEVTEST_BUTTON: !1
		},
		GIT_HASH: "",
		CHANNEL: ""
	}, _G.gameFrameRate = 50, _G.isGuiding = !1, _G.poolManager = new PoolManager, _G.pool = new Pool, _G.m_MsgHandler = new MsgHandler, _G.FPS = 0, _G.EMPTY_FUN = function() {}, _G.SDK_VERSION = SDK_VERSIONS_VALUE.V6;
	class db {
		static setAllDbs(t) {
			this._allDbs = t
		}
		static getDb(t) {
			let e = this._allDbs[t];
			return e || console.error(`[警告] db.getDb db not found! dbName=[${t}]`), e
		}
		static get_adv_db_map() {
			return this.getDb("adv_db")
		}
		static get_adv_db(t) {
			let e = this.get_adv_db_map()[t];
			return null == e && console.error(`can't find data in adv_db by advName [${t}]`), e
		}
		static get_animation_db_map() {
			return this.getDb("animation_db")
		}
		static get_animation_db(t) {
			let e = this.get_animation_db_map()[t];
			return null == e && console.error(`can't find data in animation_db by id [${t}]`), e
		}
		static get_animation_face_db_map() {
			return this.getDb("animation_face_db")
		}
		static get_animation_face_db(t) {
			let e = this.get_animation_face_db_map()[t];
			return null == e && console.error(`can't find data in animation_face_db by id [${t}]`), e
		}
		static get_attr_up_db_map() {
			return this.getDb("attr_up_db")
		}
		static get_attr_up_db(t, e) {
			let a = this.get_attr_up_db_map()[t][e];
			return null == a && console.error(`can't find data in attr_up_db by level [${e}]`), a
		}
		static get_auto_increase_db_map() {
			return this.getDb("auto_increase_db")
		}
		static get_auto_increase_db(t) {
			let e = this.get_auto_increase_db_map()[t];
			return null == e && console.error(`can't find data in auto_increase_db by itemId [${t}]`), e
		}
		static get_brush_db_map() {
			return this.getDb("brush_db")
		}
		static get_brush_db(t) {
			let e = this.get_brush_db_map()[t];
			return null == e && console.error(`can't find data in brush_db by id [${t}]`), e
		}
		static get_caizhuang_db_arr() {
			return this.getDb("caizhuang_db")
		}
		static get_caizhuang_db(t) {
			let e = this.get_caizhuang_db_arr()[t];
			return null == e && console.error(`can't find data in caizhuang_db by idx [${t}]`), e
		}
		static get_class_matching_db_map() {
			return this.getDb("class_matching_db")
		}
		static get_class_matching_db(t) {
			let e = this.get_class_matching_db_map()[t];
			return null == e && console.error(`can't find data in class_matching_db by id [${t}]`), e
		}
		static get_class_matching_item_db_map() {
			return this.getDb("class_matching_item_db")
		}
		static get_class_matching_item_db(t) {
			let e = this.get_class_matching_item_db_map()[t];
			return null == e && console.error(`can't find data in class_matching_item_db by id [${t}]`), e
		}
		static get_class_math_stage_db_map() {
			return this.getDb("class_math_stage_db")
		}
		static get_class_math_stage_db(t) {
			let e = this.get_class_math_stage_db_map()[t];
			return null == e && console.error(`can't find data in class_math_stage_db by id [${t}]`), e
		}
		static get_class_room_level_db_map() {
			return this.getDb("class_room_level_db")
		}
		static get_class_room_level_db(t) {
			let e = this.get_class_room_level_db_map()[t];
			return null == e && console.error(`can't find data in class_room_level_db by id [${t}]`), e
		}
		static get_class_room_role_db_map() {
			return this.getDb("class_room_role_db")
		}
		static get_class_room_role_db(t) {
			let e = this.get_class_room_role_db_map()[t];
			return null == e && console.error(`can't find data in class_room_role_db by id [${t}]`), e
		}
		static get_class_room_seat_db_map() {
			return this.getDb("class_room_seat_db")
		}
		static get_class_room_seat_db(t) {
			let e = this.get_class_room_seat_db_map()[t];
			return null == e && console.error(`can't find data in class_room_seat_db by id [${t}]`), e
		}
		static get_color_egg_db_map() {
			return this.getDb("color_egg_db")
		}
		static get_color_egg_db(t) {
			let e = this.get_color_egg_db_map()[t];
			return null == e && console.error(`can't find data in color_egg_db by id [${t}]`), e
		}
		static get_cp_animations_map() {
			return this.getDb("cp_animations")
		}
		static get_cp_animations(t) {
			let e = this.get_cp_animations_map()[t];
			return null == e && console.error(`can't find data in cp_animations by id [${t}]`), e
		}
		static get_cp_items_map() {
			return this.getDb("cp_items")
		}
		static get_cp_items(t) {
			let e = this.get_cp_items_map()[t];
			return null == e && console.error(`can't find data in cp_items by id [${t}]`), e
		}
		static get_cp_npc_map() {
			return this.getDb("cp_npc")
		}
		static get_cp_npc(t) {
			let e = this.get_cp_npc_map()[t];
			return null == e && console.error(`can't find data in cp_npc by id [${t}]`), e
		}
		static get_cp_npc_fixed_map() {
			return this.getDb("cp_npc_fixed")
		}
		static get_cp_npc_fixed(t) {
			let e = this.get_cp_npc_fixed_map()[t];
			return null == e && console.error(`can't find data in cp_npc_fixed by id [${t}]`), e
		}
		static get_cp_test_map() {
			return this.getDb("cp_test")
		}
		static get_cp_test(t) {
			let e = this.get_cp_test_map()[t];
			return null == e && console.error(`can't find data in cp_test by id [${t}]`), e
		}
		static get_cp_test_npc_map() {
			return this.getDb("cp_test_npc")
		}
		static get_cp_test_npc(t) {
			let e = this.get_cp_test_npc_map()[t];
			return null == e && console.error(`can't find data in cp_test_npc by id [${t}]`), e
		}
		static get_dance_anim_db_map() {
			return this.getDb("dance_anim_db")
		}
		static get_dance_anim_db(t) {
			let e = this.get_dance_anim_db_map()[t];
			return null == e && console.error(`can't find data in dance_anim_db by id [${t}]`), e
		}
		static get_dance_box_animation_map() {
			return this.getDb("dance_box_animation")
		}
		static get_dance_box_animation(t) {
			let e = this.get_dance_box_animation_map()[t];
			return null == e && console.error(`can't find data in dance_box_animation by id [${t}]`), e
		}
		static get_dance_draw_color_map() {
			return this.getDb("dance_draw_color")
		}
		static get_dance_draw_color(t) {
			let e = this.get_dance_draw_color_map()[t];
			return null == e && console.error(`can't find data in dance_draw_color by id [${t}]`), e
		}
		static get_drop_db_map() {
			return this.getDb("drop_db")
		}
		static get_drop_db(t) {
			let e = this.get_drop_db_map()[t];
			return null == e && console.error(`can't find data in drop_db by id [${t}]`), e
		}
		static get_effect_db_map() {
			return this.getDb("effect_db")
		}
		static get_effect_db(t) {
			let e = this.get_effect_db_map()[t];
			return null == e && console.error(`can't find data in effect_db by id [${t}]`), e
		}
		static get_en_random_name_part1_db_arr() {
			return this.getDb("en_random_name_part1_db")
		}
		static get_en_random_name_part1_db(t) {
			let e = this.get_en_random_name_part1_db_arr()[t];
			return null == e && console.error(`can't find data in en_random_name_part1_db by word [${t}]`), e
		}
		static get_en_random_name_part2_db_arr() {
			return this.getDb("en_random_name_part2_db")
		}
		static get_en_random_name_part2_db(t) {
			let e = this.get_en_random_name_part2_db_arr()[t];
			return null == e && console.error(`can't find data in en_random_name_part2_db by word [${t}]`), e
		}
		static get_follow_rewards_db_map() {
			return this.getDb("follow_rewards_db")
		}
		static get_follow_rewards_db(t) {
			let e = this.get_follow_rewards_db_map()[t];
			return null == e && console.error(`can't find data in follow_rewards_db by id [${t}]`), e
		}
		static get_game_cfg_map() {
			return this.getDb("game_cfg")
		}
		static get_game_cfg(t) {
			let e = this.get_game_cfg_map()[t];
			return null == e && console.error(`can't find data in game_cfg by name [${t}]`), e
		}
		static get_goal_db_map() {
			return this.getDb("goal_db")
		}
		static get_goal_db(t) {
			let e = this.get_goal_db_map()[t];
			return null == e && console.error(`can't find data in goal_db by id [${t}]`), e
		}
		static get_hot_activity_db_map() {
			return this.getDb("hot_activity_db")
		}
		static get_hot_activity_db(t) {
			let e = this.get_hot_activity_db_map()[t];
			return null == e && console.error(`can't find data in hot_activity_db by id [${t}]`), e
		}
		static get_id_random_name_part1_db_arr() {
			return this.getDb("id_random_name_part1_db")
		}
		static get_id_random_name_part1_db(t) {
			let e = this.get_id_random_name_part1_db_arr()[t];
			return null == e && console.error(`can't find data in id_random_name_part1_db by word [${t}]`), e
		}
		static get_id_random_name_part2_db_arr() {
			return this.getDb("id_random_name_part2_db")
		}
		static get_id_random_name_part2_db(t) {
			let e = this.get_id_random_name_part2_db_arr()[t];
			return null == e && console.error(`can't find data in id_random_name_part2_db by word [${t}]`), e
		}
		static get_item_db_map() {
			return this.getDb("item_db")
		}
		static get_item_db(t) {
			let e = this.get_item_db_map()[t];
			return null == e && console.error(`can't find data in item_db by id [${t}]`), e
		}
		static get_laji_db_arr() {
			return this.getDb("laji_db")
		}
		static get_laji_db(t) {
			let e = this.get_laji_db_arr()[t];
			return null == e && console.error(`can't find data in laji_db by idx [${t}]`), e
		}
		static get_laji_level_db_arr() {
			return this.getDb("laji_level_db")
		}
		static get_laji_level_db(t) {
			let e = this.get_laji_level_db_arr()[t];
			return null == e && console.error(`can't find data in laji_level_db by idx [${t}]`), e
		}
		static get_level_db_arr() {
			return this.getDb("level_db")
		}
		static get_level_db(t) {
			let e = this.get_level_db_arr()[t];
			return null == e && console.error(`can't find data in level_db by id [${t}]`), e
		}
		static get_linggan_db_arr() {
			return this.getDb("linggan_db")
		}
		static get_linggan_db(t) {
			let e = this.get_linggan_db_arr()[t];
			return null == e && console.error(`can't find data in linggan_db by idx [${t}]`), e
		}
		static get_manicure_model_db_map() {
			return this.getDb("manicure_model_db")
		}
		static get_manicure_model_db(t) {
			let e = this.get_manicure_model_db_map()[t];
			return null == e && console.error(`can't find data in manicure_model_db by id [${t}]`), e
		}
		static get_manicure_nail_decoration_db_map() {
			return this.getDb("manicure_nail_decoration_db")
		}
		static get_manicure_nail_decoration_db(t) {
			let e = this.get_manicure_nail_decoration_db_map()[t];
			return null == e && console.error(`can't find data in manicure_nail_decoration_db by id [${t}]`), e
		}
		static get_manicure_part_container_db_map() {
			return this.getDb("manicure_part_container_db")
		}
		static get_manicure_part_container_db(t) {
			let e = this.get_manicure_part_container_db_map()[t];
			return null == e && console.error(`can't find data in manicure_part_container_db by id [${t}]`), e
		}
		static get_manicure_part_db_map() {
			return this.getDb("manicure_part_db")
		}
		static get_manicure_part_db(t) {
			let e = this.get_manicure_part_db_map()[t];
			return null == e && console.error(`can't find data in manicure_part_db by id [${t}]`), e
		}
		static get_manicure_part_type_db_map() {
			return this.getDb("manicure_part_type_db")
		}
		static get_manicure_part_type_db(t) {
			let e = this.get_manicure_part_type_db_map()[t];
			return null == e && console.error(`can't find data in manicure_part_type_db by id [${t}]`), e
		}
		static get_manicure_shape_db_map() {
			return this.getDb("manicure_shape_db")
		}
		static get_manicure_shape_db(t, e) {
			let a = this.get_manicure_shape_db_map()[t][e];
			return null == a && console.error(`can't find data in manicure_shape_db by fid [${e}]`), a
		}
		static get_manicure_stage_db_map() {
			return this.getDb("manicure_stage_db")
		}
		static get_manicure_stage_db(t) {
			let e = this.get_manicure_stage_db_map()[t];
			return null == e && console.error(`can't find data in manicure_stage_db by id [${t}]`), e
		}
		static get_model_db_map() {
			return this.getDb("model_db")
		}
		static get_model_db(t) {
			let e = this.get_model_db_map()[t];
			return null == e && console.error(`can't find data in model_db by id [${t}]`), e
		}
		static get_name_db_arr() {
			return this.getDb("name_db")
		}
		static get_name_db(t) {
			let e = this.get_name_db_arr()[t];
			return null == e && console.error(`can't find data in name_db by name [${t}]`), e
		}
		static get_paishou_db_arr() {
			return this.getDb("paishou_db")
		}
		static get_paishou_db(t) {
			let e = this.get_paishou_db_arr()[t];
			return null == e && console.error(`can't find data in paishou_db by idx [${t}]`), e
		}
		static get_part_animation_change_db_map() {
			return this.getDb("part_animation_change_db")
		}
		static get_part_animation_change_db(t) {
			let e = this.get_part_animation_change_db_map()[t];
			return null == e && console.error(`can't find data in part_animation_change_db by id [${t}]`), e
		}
		static get_part_type_db_map() {
			return this.getDb("part_type_db")
		}
		static get_part_type_db(t) {
			let e = this.get_part_type_db_map()[t];
			return null == e && console.error(`can't find data in part_type_db by id [${t}]`), e
		}
		static get_path_db_map() {
			return this.getDb("path_db")
		}
		static get_path_db(t) {
			let e = this.get_path_db_map()[t];
			return null == e && console.error(`can't find data in path_db by id [${t}]`), e
		}
		static get_pay_db_map() {
			return this.getDb("pay_db")
		}
		static get_pay_db(t) {
			let e = this.get_pay_db_map()[t];
			return null == e && console.error(`can't find data in pay_db by id [${t}]`), e
		}
		static get_pt_random_name_part1_db_arr() {
			return this.getDb("pt_random_name_part1_db")
		}
		static get_pt_random_name_part1_db(t) {
			let e = this.get_pt_random_name_part1_db_arr()[t];
			return null == e && console.error(`can't find data in pt_random_name_part1_db by word [${t}]`), e
		}
		static get_pt_random_name_part2_db_arr() {
			return this.getDb("pt_random_name_part2_db")
		}
		static get_pt_random_name_part2_db(t) {
			let e = this.get_pt_random_name_part2_db_arr()[t];
			return null == e && console.error(`can't find data in pt_random_name_part2_db by word [${t}]`), e
		}
		static get_pvp_base_award_db_arr() {
			return this.getDb("pvp_base_award_db")
		}
		static get_pvp_base_award_db(t) {
			let e = this.get_pvp_base_award_db_arr()[t];
			return null == e && console.error(`can't find data in pvp_base_award_db by idx [${t}]`), e
		}
		static get_pvp_db_map() {
			return this.getDb("pvp_db")
		}
		static get_pvp_db(t, e) {
			let a = this.get_pvp_db_map()[t][e];
			return null == a && console.error(`can't find data in pvp_db by idx [${e}]`), a
		}
		static get_pvp_part_award_db_map() {
			return this.getDb("pvp_part_award_db")
		}
		static get_pvp_part_award_db(t) {
			let e = this.get_pvp_part_award_db_map()[t];
			return null == e && console.error(`can't find data in pvp_part_award_db by partId [${t}]`), e
		}
		static get_quest_db_map() {
			return this.getDb("quest_db")
		}
		static get_quest_db(t) {
			let e = this.get_quest_db_map()[t];
			return null == e && console.error(`can't find data in quest_db by id [${t}]`), e
		}
		static get_random_name_part1_db_arr() {
			return this.getDb("random_name_part1_db")
		}
		static get_random_name_part1_db(t) {
			let e = this.get_random_name_part1_db_arr()[t];
			return null == e && console.error(`can't find data in random_name_part1_db by word [${t}]`), e
		}
		static get_random_name_part2_db_arr() {
			return this.getDb("random_name_part2_db")
		}
		static get_random_name_part2_db(t) {
			let e = this.get_random_name_part2_db_arr()[t];
			return null == e && console.error(`can't find data in random_name_part2_db by word [${t}]`), e
		}
		static get_role_contract_db_map() {
			return this.getDb("role_contract_db")
		}
		static get_role_contract_db(t) {
			let e = this.get_role_contract_db_map()[t];
			return null == e && console.error(`can't find data in role_contract_db by contractIdx [${t}]`), e
		}
		static get_role_db_map() {
			return this.getDb("role_db")
		}
		static get_role_db(t) {
			let e = this.get_role_db_map()[t];
			return null == e && console.error(`can't find data in role_db by id [${t}]`), e
		}
		static get_role_test_map() {
			return this.getDb("role_test")
		}
		static get_role_test(t) {
			let e = this.get_role_test_map()[t];
			return null == e && console.error(`can't find data in role_test by id [${t}]`), e
		}
		static get_role_test_answer_map() {
			return this.getDb("role_test_answer")
		}
		static get_role_test_answer(t) {
			let e = this.get_role_test_answer_map()[t];
			return null == e && console.error(`can't find data in role_test_answer by id [${t}]`), e
		}
		static get_role_test_color_map() {
			return this.getDb("role_test_color")
		}
		static get_role_test_color(t) {
			let e = this.get_role_test_color_map()[t];
			return null == e && console.error(`can't find data in role_test_color by id [${t}]`), e
		}
		static get_role_up_db_map() {
			return this.getDb("role_up_db")
		}
		static get_role_up_db(t, e) {
			let a = this.get_role_up_db_map()[t][e];
			return null == a && console.error(`can't find data in role_up_db by level [${e}]`), a
		}
		static get_shoe_config_data_map() {
			return this.getDb("shoe_config_data")
		}
		static get_shoe_config_data(t) {
			let e = this.get_shoe_config_data_map()[t];
			return null == e && console.error(`can't find data in shoe_config_data by id [${t}]`), e
		}
		static get_shoe_part_db_map() {
			return this.getDb("shoe_part_db")
		}
		static get_shoe_part_db(t) {
			let e = this.get_shoe_part_db_map()[t];
			return null == e && console.error(`can't find data in shoe_part_db by id [${t}]`), e
		}
		static get_shoe_suit_db_map() {
			return this.getDb("shoe_suit_db")
		}
		static get_shoe_suit_db(t) {
			let e = this.get_shoe_suit_db_map()[t];
			return null == e && console.error(`can't find data in shoe_suit_db by id [${t}]`), e
		}
		static get_sign_db_arr() {
			return this.getDb("sign_db")
		}
		static get_sign_db(t) {
			let e = this.get_sign_db_arr()[t];
			return null == e && console.error(`can't find data in sign_db by idx [${t}]`), e
		}
		static get_skincare_db_arr() {
			return this.getDb("skincare_db")
		}
		static get_skincare_db(t) {
			let e = this.get_skincare_db_arr()[t];
			return null == e && console.error(`can't find data in skincare_db by idx [${t}]`), e
		}
		static get_spine_db_map() {
			return this.getDb("spine_db")
		}
		static get_spine_db(t) {
			let e = this.get_spine_db_map()[t];
			return null == e && console.error(`can't find data in spine_db by id [${t}]`), e
		}
		static get_student_stage_db_map() {
			return this.getDb("student_stage_db")
		}
		static get_student_stage_db(t) {
			let e = this.get_student_stage_db_map()[t];
			return null == e && console.error(`can't find data in student_stage_db by id [${t}]`), e
		}
		static get_student_stage_offset_mapping_db_map() {
			return this.getDb("student_stage_offset_mapping_db")
		}
		static get_student_stage_offset_mapping_db(t) {
			let e = this.get_student_stage_offset_mapping_db_map()[t];
			return null == e && console.error(`can't find data in student_stage_offset_mapping_db by offset [${t}]`), e
		}
		static get_student_stage_score_mapping_db_arr() {
			return this.getDb("student_stage_score_mapping_db")
		}
		static get_student_stage_score_mapping_db(t) {
			let e = this.get_student_stage_score_mapping_db_arr()[t];
			return null == e && console.error(`can't find data in student_stage_score_mapping_db by score [${t}]`), e
		}
		static get_sub_cop_map() {
			return this.getDb("sub_cop")
		}
		static get_sub_cop(t) {
			let e = this.get_sub_cop_map()[t];
			return null == e && console.error(`can't find data in sub_cop by subCopKey [${t}]`), e
		}
		static get_suit_db_map() {
			return this.getDb("suit_db")
		}
		static get_suit_db(t) {
			let e = this.get_suit_db_map()[t];
			return null == e && console.error(`can't find data in suit_db by id [${t}]`), e
		}
		static get_switch_db_map() {
			return this.getDb("switch_db")
		}
		static get_switch_db(t) {
			let e = this.get_switch_db_map()[t];
			return null == e && console.error(`can't find data in switch_db by id [${t}]`), e
		}
		static get_szz_db_arr() {
			return this.getDb("szz_db")
		}
		static get_szz_db(t) {
			let e = this.get_szz_db_arr()[t];
			return null == e && console.error(`can't find data in szz_db by renqi [${t}]`), e
		}
		static get_tag_type_db_arr() {
			return this.getDb("tag_type_db")
		}
		static get_tag_type_db(t) {
			let e = this.get_tag_type_db_arr()[t];
			return null == e && console.error(`can't find data in tag_type_db by idx [${t}]`), e
		}
		static get_talk_db_map() {
			return this.getDb("talk_db")
		}
		static get_talk_db(t) {
			let e = this.get_talk_db_map()[t];
			return null == e && console.error(`can't find data in talk_db by id [${t}]`), e
		}
		static get_talk_role_db_map() {
			return this.getDb("talk_role_db")
		}
		static get_talk_role_db(t) {
			let e = this.get_talk_role_db_map()[t];
			return null == e && console.error(`can't find data in talk_role_db by id [${t}]`), e
		}
		static get_teacher_stage_db_map() {
			return this.getDb("teacher_stage_db")
		}
		static get_teacher_stage_db(t) {
			let e = this.get_teacher_stage_db_map()[t];
			return null == e && console.error(`can't find data in teacher_stage_db by id [${t}]`), e
		}
		static get_ui_role_anim_db_map() {
			return this.getDb("ui_role_anim_db")
		}
		static get_ui_role_anim_db(t, e) {
			let a = this.get_ui_role_anim_db_map()[t][e];
			return null == a && console.error(`can't find data in ui_role_anim_db by weight [${e}]`), a
		}
		static get_vi_random_name_part1_db_arr() {
			return this.getDb("vi_random_name_part1_db")
		}
		static get_vi_random_name_part1_db(t) {
			let e = this.get_vi_random_name_part1_db_arr()[t];
			return null == e && console.error(`can't find data in vi_random_name_part1_db by word [${t}]`), e
		}
		static get_vi_random_name_part2_db_arr() {
			return this.getDb("vi_random_name_part2_db")
		}
		static get_vi_random_name_part2_db(t) {
			let e = this.get_vi_random_name_part2_db_arr()[t];
			return null == e && console.error(`can't find data in vi_random_name_part2_db by word [${t}]`), e
		}
	}
	db.cop = {
		ad_interstitial_ratios: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		ad_banner_ratios: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		ad_embedded_ratios: [0, 0, 0],
		ad_video_ratios: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		ad_video_cds: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		ad_video_counts: [0, 10, 0, 10, 2, 2, 12, 0, 0, 2, 3, 0, 0, 0, 5, 0, 10, 5, 0, 0, 2, 1, 10],
		ad_inst_cd: .5,
		b_inst_or_banner: 0,
		native_insert_mode: 1,
		b_inst_in_guide: 0,
		some_function: [0, 0, 0, 0, 0, 0],
		b_open_statics_item: 0,
		pop_review_ratio: 0,
		url_notice: "",
		b_sign_delay_mode: 0,
		b_video_share_full_screen: 0,
		b_video_share_finger: 0,
		b_adv_reward_confirm: 0,
		b_adv_delay: 0,
		adv_thank_delay_time: 2,
		b_adv_thank_prompt: 0,
		b_adv_thank_prompt_tag: 0,
		b_adv_full_screen: 0,
		b_open_follow: 0,
		b_show_sub: 0,
		b_show_adv_cost: 0,
		b_ad_video_replay_prompt: 0,
		ad_flag_hide_ratios: [0, 0, 0, 0, 0],
		egg_diamond_count: 3,
		egg_count_max: 5,
		share_mode: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		share_close_delta_time: 0,
		cat_ratios: [0, 0, 0, 0, 0, 0],
		cat_delta_time: 20,
		share_tags: ["", "", "", "", "", "", "", "", "", "", "", "", "", ""],
		rule_graph_ratios: [0, 0, 0, 0, 0, 0, 0],
		rule_graph_cd: 20,
		subscribe_cd: 60,
		alert_hud_prompt_cds: [60, 60, 60, 60],
		alert_hud_prompt_ratios: [0, 0, 0, 0],
		alert_hud_prompt_orders: [0, 1, 2, 3],
		isItemGetShareFirst: 0,
		follow_close_delay_time: 0,
		b_follow_finger: 0,
		subscribe_close_delay_time: 0,
		b_subscribe_finger: 0,
		get_video_share_rank_tag: "",
		get_video_share_rank_tag_active: "",
		get_rank_tip_url: "",
		alert_hud_prompt_cds_v2: [60, 60, 60, 60, 60, 60],
		alert_hud_prompt_ratios_v2: [0, 0, 0, 0, 0, 0],
		alert_hud_prompt_list_v2: [0, 1, 2, 3, 4, 5],
		hot_activity_list_v2: [0, 1, 2, 3, 4, 5],
		isThirdExit: !1,
		isAbout: !1,
		isShareEnabled: !1,
		isPayEnabled: !0,
		isULMoreGame: !1,
		isUseSdkRank: !1,
		isWebView: !1,
		isShowUrlAdIcon: !1,
		isSupportRecordShare: !1,
		isSupportInstallShortcut: !1,
		isSupportFindMinigames: !1,
		isSupportRecommendationBtn: !1,
		is4399Watermark: !1,
		isJumpLeisureEnabled: !1,
		isSupportFollowOfficialAccount: !1,
		isSupportFavoriteGuide: !1,
		isSupportVideoRank: !1,
		isSupportSubscribe: !1,
		isSupportChannelMoreGameBox: !1
	}, db.game_cnf = {
		free_coin_time: 4500,
		diamond_coin_time: 27e3,
		daily_quest_count: 6,
		daily_quest_dianmond_count: 10,
		gift_count: 3,
		gift_delta_time: 60,
		egg_click_count: 10,
		egg_click_time: 30,
		bullet_chat_texts: ["你简直弱爆了", "今天的妆容很精致", "不敢看，丑哭", "爱了爱了，甜美暴击", "笑容比糖果还甜", "漂亮呀，有被惊艳到", "实力圈粉", "自带高贵气质", "硬生生给我看顺眼了", "慢慢的迷恋上小姐姐", "控制不住自己想笑", "真的长在了我的审美上"],
		order_star_rate: [0, .5, .6, .7, .85, 1],
		game_bar_max_score: 200,
		role_talk_delta: 1.5,
		like_lottery_count: 12,
		sign_award_delta_time: [60, 300, 600, 900],
		szz_lottery_drop_id: "20",
		szz_lottery_image: ["res/ui/bg/wawa_1.png", "res/ui/bg/wawa_1.png", "res/ui/bg/wawa_2.png"],
		mang_he_show_suits: ["20", "21"],
		pvp_duanwei_names: ["区级比赛", "市级比赛", "省级比赛", "全国大赛", "世界杯"],
		fish_price_origin: 2e3,
		fish_price_addition: 200,
		pai_shou_cost: [1, 10],
		cztg_cost: [1, 10],
		butterfly_cost: [1, 10],
		garbage_cost: [1, 10],
		hu_fu_cost: 90,
		jing_li_per_sec: .05,
		pvp_texts: ["与众不同，可爱无敌", "小小的我，大大的梦 ", "化妆大师，我当仁不让", "追逐梦想，秀出时尚", "努力成为顶级化妆师", "张扬我的个性", "展示最美好的自己", "光芒万丈，无可比拟"],
		default_parts1: ["15026", "11026", "12026"],
		default_parts2: ["15023", "11023", "12023"],
		default_parts3: ["15027", "11027", "12027"],
		default_parts4: ["15029", "11029", "12029"],
		default_parts5: ["15030", "11030", "12030"],
		default_parts6: ["15031", "11031", "12031"],
		default_parts7: ["15032", "11032", "12032"],
		default_parts8: ["15034", "11034", "12034"],
		default_parts9: ["15035", "11035", "12035"],
		default_parts10: ["15036", "11036", "12036"],
		default_parts11: ["15037", "11037", "12037"],
		default_parts12: ["15038", "11038", "12038"],
		dance_default_parts1: ["15026", "11026", "12026", "20009"],
		dance_default_parts2: ["15023", "11023", "12023", "19020", "14023", "24031"],
		dance_default_parts3: ["15027", "11027", "12027", "20017", "14027"],
		dance_default_parts4: ["15029", "11029", "12029", "20022"],
		dance_default_parts5: ["15030", "11030", "12030", "20014"],
		dance_default_parts6: ["15031", "11031", "12031", "20031"],
		dance_default_parts7: ["15032", "11032", "12032", "20032"],
		dance_default_parts8: ["15034", "11034", "12034", "20034", "13034", "16019", "25011"],
		dance_default_parts9: ["15035", "11035", "12035", "20035", "13035", "14035", "19035", "16020"],
		dance_default_parts10: ["15036", "11036", "12036", "19036", "20036", "23036"],
		dance_default_parts11: ["15037", "11037", "12037", "18037", "20037"],
		dance_default_parts12: ["15038", "11038", "12038", "14038", "20038"],
		game_result_texts: ["就差一点了，加油！", "不错不错，继续努力！", "再加把劲就完美了！", "太棒了！你真厉害！"]
	}, db.MODEL_DB_ID = {
		test: "test",
		body: "body",
		face: "face",
		paopao: "paopao",
		mofabang: "mofabang",
		mofabang_anim: "mofabang_anim",
		hudie: "hudie",
		hudie2: "hudie2",
		lihe: "lihe",
		xinfeng: "xinfeng",
		manghe: "manghe",
		shexiangji_come: "shexiangji_come",
		shexiangji_jiechu: "shexiangji_jiechu",
		wawahe: "wawahe",
		gemstone01: "gemstone01",
		gemstone02: "gemstone02",
		gemstone03: "gemstone03",
		gemstone04: "gemstone04",
		gemstone05: "gemstone05",
		gemstone06: "gemstone06",
		gemstone07: "gemstone07",
		gemstone08: "gemstone08",
		gemstone09: "gemstone09",
		gemstone10: "gemstone10",
		gemstone11: "gemstone11",
		gemstone13: "gemstone13",
		shexiangji_gj_jiesuan: "shexiangji_gj_jiesuan",
		come: "come",
		jingzi: "jingzi",
		duihui_01: "duihui_01",
		duihui_02: "duihui_02",
		duihui_03: "duihui_03",
		duihui_11: "duihui_11",
		duihui_12: "duihui_12",
		duihui_13: "duihui_13",
		jiangzhuang: "jiangzhuang",
		body_npc01: "body_npc01",
		face_npc01: "face_npc01",
		toufa_npc01: "toufa_npc01",
		body_npc02: "body_npc02",
		face_npc02: "face_npc02",
		toufa_npc02: "toufa_npc02",
		body_npc03: "body_npc03",
		face_npc03: "face_npc03",
		toufa_npc03: "toufa_npc03",
		body_npc05: "body_npc05",
		face_npc05: "face_npc05",
		toufa_npc05: "toufa_npc05",
		body_npc06: "body_npc06",
		face_npc06: "face_npc06",
		toufa_npc06: "toufa_npc06",
		body_npc08: "body_npc08",
		face_npc08: "face_npc08",
		toufa_npc08: "toufa_npc08",
		body_npc09: "body_npc09",
		face_npc09: "face_npc09",
		toufa_npc09: "toufa_npc09",
		body_npc10: "body_npc10",
		face_npc10: "face_npc10",
		toufa_npc10: "toufa_npc10",
		meimao: "meimao",
		jiemao: "jiemao",
		yanying: "yanying",
		meitong: "meitong",
		meitong_gg: "meitong_gg",
		saihong: "saihong",
		chuncai: "chuncai",
		mianwen: "mianwen",
		heitou: "heitou",
		mianmo_empty: "mianmo_empty",
		ty_douyin: "ty_douyin",
		ty_heitou: "ty_heitou",
		ty_mianmo: "ty_mianmo",
		ty_shuidi: "ty_shuidi",
		ty_zamao01: "ty_zamao01",
		ty_zamao02: "ty_zamao02",
		ty_zamao03: "ty_zamao03",
		ty_zamao04: "ty_zamao04",
		ty_zamao05: "ty_zamao05",
		ty_zamao06: "ty_zamao06",
		ty_zamao07: "ty_zamao07",
		ty_zamao08: "ty_zamao08",
		ty_zamao09: "ty_zamao09",
		ty_zamao10: "ty_zamao10",
		ty_zamao11: "ty_zamao11",
		ty_zamao12: "ty_zamao12",
		mianwen_zang: "mianwen_zang",
		heitoutie: "heitoutie",
		mianmo_fill: "mianmo_fill",
		hf_toushi: "hf_toushi",
		hf_yifu: "hf_yifu",
		hf_xiezi: "hf_xiezi",
		ty_meimao01: "ty_meimao01",
		ty_meimao02: "ty_meimao02",
		ty_meimao03: "ty_meimao03",
		ty_meimao04: "ty_meimao04",
		ty_meimao05: "ty_meimao05",
		ty_meimao06: "ty_meimao06",
		ty_meimao07: "ty_meimao07",
		ty_meimao08: "ty_meimao08",
		ty_meimao09: "ty_meimao09",
		ty_meimao10: "ty_meimao10",
		ty_meimao11: "ty_meimao11",
		ty_meimao12: "ty_meimao12",
		ty_meimao13: "ty_meimao13",
		ty_meimao14: "ty_meimao14",
		ty_meimao15: "ty_meimao15",
		ty_meimao16: "ty_meimao16",
		ty_meimao17: "ty_meimao17",
		ty_meimao18: "ty_meimao18",
		ty_meimao19: "ty_meimao19",
		ty_meimao20: "ty_meimao20",
		ty_meimao21: "ty_meimao21",
		ty_meimao22: "ty_meimao22",
		ty_meimao23: "ty_meimao23",
		ty_meimao24: "ty_meimao24",
		ty_meimao25: "ty_meimao25",
		ty_meimao26: "ty_meimao26",
		ty_meimao27: "ty_meimao27",
		ty_meimao28: "ty_meimao28",
		ty_meimao29: "ty_meimao29",
		ty_meimao30: "ty_meimao30",
		ty_meimao31: "ty_meimao31",
		ty_meimao32: "ty_meimao32",
		ty_meimao33: "ty_meimao33",
		ty_meimao34: "ty_meimao34",
		ty_meimao35: "ty_meimao35",
		ty_meimao36: "ty_meimao36",
		ty_meimao37: "ty_meimao37",
		ty_meimao38: "ty_meimao38",
		ty_jiemao01: "ty_jiemao01",
		ty_jiemao02: "ty_jiemao02",
		ty_jiemao03: "ty_jiemao03",
		ty_jiemao04: "ty_jiemao04",
		ty_jiemao05: "ty_jiemao05",
		ty_jiemao06: "ty_jiemao06",
		ty_jiemao07: "ty_jiemao07",
		ty_jiemao08: "ty_jiemao08",
		ty_jiemao09: "ty_jiemao09",
		ty_jiemao10: "ty_jiemao10",
		ty_jiemao11: "ty_jiemao11",
		ty_jiemao12: "ty_jiemao12",
		ty_jiemao13: "ty_jiemao13",
		ty_jiemao14: "ty_jiemao14",
		ty_jiemao15: "ty_jiemao15",
		ty_jiemao16: "ty_jiemao16",
		ty_jiemao17: "ty_jiemao17",
		ty_jiemao18: "ty_jiemao18",
		ty_jiemao19: "ty_jiemao19",
		ty_jiemao20: "ty_jiemao20",
		ty_jiemao21: "ty_jiemao21",
		ty_jiemao22: "ty_jiemao22",
		ty_jiemao23: "ty_jiemao23",
		ty_jiemao24: "ty_jiemao24",
		ty_jiemao25: "ty_jiemao25",
		ty_jiemao26: "ty_jiemao26",
		ty_jiemao27: "ty_jiemao27",
		ty_jiemao28: "ty_jiemao28",
		ty_jiemao29: "ty_jiemao29",
		ty_jiemao30: "ty_jiemao30",
		ty_jiemao31: "ty_jiemao31",
		ty_jiemao32: "ty_jiemao32",
		ty_jiemao33: "ty_jiemao33",
		ty_jiemao34: "ty_jiemao34",
		ty_jiemao35: "ty_jiemao35",
		ty_jiemao36: "ty_jiemao36",
		ty_jiemao37: "ty_jiemao37",
		ty_jiemao38: "ty_jiemao38",
		ty_yanying01: "ty_yanying01",
		ty_yanying02: "ty_yanying02",
		ty_yanying03: "ty_yanying03",
		ty_yanying04: "ty_yanying04",
		ty_yanying05: "ty_yanying05",
		ty_yanying06: "ty_yanying06",
		ty_yanying07: "ty_yanying07",
		ty_yanying08: "ty_yanying08",
		ty_yanying09: "ty_yanying09",
		ty_yanying10: "ty_yanying10",
		ty_yanying11: "ty_yanying11",
		ty_yanying12: "ty_yanying12",
		ty_yanying13: "ty_yanying13",
		ty_yanying14: "ty_yanying14",
		ty_yanying15: "ty_yanying15",
		ty_yanying16: "ty_yanying16",
		ty_yanying17: "ty_yanying17",
		ty_yanying18: "ty_yanying18",
		ty_yanying19: "ty_yanying19",
		ty_yanying20: "ty_yanying20",
		ty_yanying21: "ty_yanying21",
		ty_yanying22: "ty_yanying22",
		ty_yanying23: "ty_yanying23",
		ty_yanying24: "ty_yanying24",
		ty_yanying25: "ty_yanying25",
		ty_yanying26: "ty_yanying26",
		ty_yanying27: "ty_yanying27",
		ty_yanying28: "ty_yanying28",
		ty_yanying29: "ty_yanying29",
		ty_yanying30: "ty_yanying30",
		ty_yanying31: "ty_yanying31",
		ty_yanying32: "ty_yanying32",
		ty_yanying33: "ty_yanying33",
		ty_yanying34: "ty_yanying34",
		ty_yanying35: "ty_yanying35",
		ty_yanying36: "ty_yanying36",
		ty_yanying37: "ty_yanying37",
		ty_yanying38: "ty_yanying38",
		ty_tongkong01: "ty_tongkong01",
		ty_tongkong02: "ty_tongkong02",
		ty_tongkong03: "ty_tongkong03",
		ty_tongkong04: "ty_tongkong04",
		ty_tongkong05: "ty_tongkong05",
		ty_tongkong06: "ty_tongkong06",
		ty_tongkong07: "ty_tongkong07",
		ty_tongkong08: "ty_tongkong08",
		ty_tongkong09: "ty_tongkong09",
		ty_tongkong10: "ty_tongkong10",
		ty_tongkong11: "ty_tongkong11",
		ty_tongkong12: "ty_tongkong12",
		ty_tongkong13: "ty_tongkong13",
		ty_tongkong14: "ty_tongkong14",
		ty_tongkong15: "ty_tongkong15",
		ty_tongkong16: "ty_tongkong16",
		ty_tongkong17: "ty_tongkong17",
		ty_tongkong18: "ty_tongkong18",
		ty_tongkong19: "ty_tongkong19",
		ty_tongkong20: "ty_tongkong20",
		ty_tongkong21: "ty_tongkong21",
		ty_tongkong22: "ty_tongkong22",
		ty_tongkong23: "ty_tongkong23",
		ty_tongkong24: "ty_tongkong24",
		ty_tongkong25: "ty_tongkong25",
		ty_tongkong26: "ty_tongkong26",
		ty_tongkong27: "ty_tongkong27",
		ty_tongkong28: "ty_tongkong28",
		ty_tongkong29: "ty_tongkong29",
		ty_tongkong30: "ty_tongkong30",
		ty_tongkong31: "ty_tongkong31",
		ty_tongkong32: "ty_tongkong32",
		ty_tongkong33: "ty_tongkong33",
		ty_tongkong34: "ty_tongkong34",
		ty_tongkong35: "ty_tongkong35",
		ty_tongkong36: "ty_tongkong36",
		ty_tongkong37: "ty_tongkong37",
		ty_tongkong38: "ty_tongkong38",
		ty_tongkong01_gg: "ty_tongkong01_gg",
		ty_tongkong02_gg: "ty_tongkong02_gg",
		ty_tongkong03_gg: "ty_tongkong03_gg",
		ty_tongkong04_gg: "ty_tongkong04_gg",
		ty_tongkong05_gg: "ty_tongkong05_gg",
		ty_tongkong06_gg: "ty_tongkong06_gg",
		ty_tongkong07_gg: "ty_tongkong07_gg",
		ty_tongkong08_gg: "ty_tongkong08_gg",
		ty_tongkong09_gg: "ty_tongkong09_gg",
		ty_tongkong10_gg: "ty_tongkong10_gg",
		ty_tongkong11_gg: "ty_tongkong11_gg",
		ty_tongkong12_gg: "ty_tongkong12_gg",
		ty_tongkong13_gg: "ty_tongkong13_gg",
		ty_tongkong14_gg: "ty_tongkong14_gg",
		ty_tongkong15_gg: "ty_tongkong15_gg",
		ty_tongkong16_gg: "ty_tongkong16_gg",
		ty_tongkong17_gg: "ty_tongkong17_gg",
		ty_tongkong18_gg: "ty_tongkong18_gg",
		ty_tongkong19_gg: "ty_tongkong19_gg",
		ty_tongkong20_gg: "ty_tongkong20_gg",
		ty_tongkong21_gg: "ty_tongkong21_gg",
		ty_tongkong22_gg: "ty_tongkong22_gg",
		ty_tongkong23_gg: "ty_tongkong23_gg",
		ty_tongkong24_gg: "ty_tongkong24_gg",
		ty_tongkong25_gg: "ty_tongkong25_gg",
		ty_tongkong26_gg: "ty_tongkong26_gg",
		ty_tongkong27_gg: "ty_tongkong27_gg",
		ty_tongkong28_gg: "ty_tongkong28_gg",
		ty_tongkong29_gg: "ty_tongkong29_gg",
		ty_tongkong30_gg: "ty_tongkong30_gg",
		ty_tongkong31_gg: "ty_tongkong31_gg",
		ty_tongkong32_gg: "ty_tongkong32_gg",
		ty_tongkong33_gg: "ty_tongkong33_gg",
		ty_tongkong34_gg: "ty_tongkong34_gg",
		ty_tongkong35_gg: "ty_tongkong35_gg",
		ty_tongkong36_gg: "ty_tongkong36_gg",
		ty_tongkong37_gg: "ty_tongkong37_gg",
		ty_tongkong38_gg: "ty_tongkong38_gg",
		ty_saihong01: "ty_saihong01",
		ty_saihong02: "ty_saihong02",
		ty_saihong03: "ty_saihong03",
		ty_saihong04: "ty_saihong04",
		ty_saihong05: "ty_saihong05",
		ty_saihong06: "ty_saihong06",
		ty_saihong07: "ty_saihong07",
		ty_saihong08: "ty_saihong08",
		ty_saihong09: "ty_saihong09",
		ty_saihong10: "ty_saihong10",
		ty_saihong11: "ty_saihong11",
		ty_saihong12: "ty_saihong12",
		ty_saihong13: "ty_saihong13",
		ty_saihong14: "ty_saihong14",
		ty_saihong15: "ty_saihong15",
		ty_saihong16: "ty_saihong16",
		ty_saihong17: "ty_saihong17",
		ty_saihong18: "ty_saihong18",
		ty_saihong19: "ty_saihong19",
		ty_saihong20: "ty_saihong20",
		ty_saihong21: "ty_saihong21",
		ty_saihong22: "ty_saihong22",
		ty_saihong23: "ty_saihong23",
		ty_saihong24: "ty_saihong24",
		ty_saihong25: "ty_saihong25",
		ty_saihong26: "ty_saihong26",
		ty_chuncai01: "ty_chuncai01",
		ty_chuncai02: "ty_chuncai02",
		ty_chuncai03: "ty_chuncai03",
		ty_chuncai04: "ty_chuncai04",
		ty_chuncai05: "ty_chuncai05",
		ty_chuncai06: "ty_chuncai06",
		ty_chuncai07: "ty_chuncai07",
		ty_chuncai08: "ty_chuncai08",
		ty_chuncai09: "ty_chuncai09",
		ty_chuncai10: "ty_chuncai10",
		ty_chuncai11: "ty_chuncai11",
		ty_chuncai12: "ty_chuncai12",
		ty_chuncai13: "ty_chuncai13",
		ty_chuncai14: "ty_chuncai14",
		ty_chuncai15: "ty_chuncai15",
		ty_chuncai16: "ty_chuncai16",
		ty_chuncai17: "ty_chuncai17",
		ty_chuncai18: "ty_chuncai18",
		ty_chuncai19: "ty_chuncai19",
		ty_chuncai20: "ty_chuncai20",
		ty_chuncai21: "ty_chuncai21",
		ty_chuncai22: "ty_chuncai22",
		ty_chuncai23: "ty_chuncai23",
		ty_chuncai24: "ty_chuncai24",
		ty_chuncai25: "ty_chuncai25",
		ty_chuncai26: "ty_chuncai26",
		ty_chuncai27: "ty_chuncai27",
		ty_chuncai28: "ty_chuncai28",
		ty_chuncai29: "ty_chuncai29",
		ty_chuncai30: "ty_chuncai30",
		ty_chuncai31: "ty_chuncai31",
		ty_chuncai32: "ty_chuncai32",
		ty_chuncai33: "ty_chuncai33",
		ty_chuncai34: "ty_chuncai34",
		ty_chuncai35: "ty_chuncai35",
		ty_chuncai36: "ty_chuncai36",
		ty_chuncai37: "ty_chuncai37",
		ty_chuncai38: "ty_chuncai38",
		ty_mianwen01: "ty_mianwen01",
		ty_mianwen02: "ty_mianwen02",
		ty_mianwen03: "ty_mianwen03",
		ty_mianwen04: "ty_mianwen04",
		ty_mianwen05: "ty_mianwen05",
		ty_mianwen06: "ty_mianwen06",
		ty_mianwen07: "ty_mianwen07",
		ty_mianwen08: "ty_mianwen08",
		ty_mianwen09: "ty_mianwen09",
		ty_mianwen10: "ty_mianwen10",
		ty_mianwen11: "ty_mianwen11",
		ty_mianwen12: "ty_mianwen12",
		ty_mianwen13: "ty_mianwen13",
		ty_mianwen14: "ty_mianwen14",
		ty_mianwen15: "ty_mianwen15",
		ty_mianwen16: "ty_mianwen16",
		ty_mianwen17: "ty_mianwen17",
		ty_mianwen18: "ty_mianwen18",
		ty_mianwen19: "ty_mianwen19",
		ty_mianwen20: "ty_mianwen20",
		ty_mianwen21: "ty_mianwen21",
		ty_mianwen22: "ty_mianwen22",
		ty_mianwen23: "ty_mianwen23",
		ty_mianwen24: "ty_mianwen24",
		ty_mianwen25: "ty_mianwen25",
		ty_mianwen26: "ty_mianwen26",
		ty_mianwen27: "ty_mianwen27",
		ty_mianwen28: "ty_mianwen28",
		ty_mianwen29: "ty_mianwen29",
		ty_mianwen30: "ty_mianwen30",
		ty_mianwen31: "ty_mianwen31",
		ty_mianwen32: "ty_mianwen32",
		ty_mianwen33: "ty_mianwen33",
		ty_mianwen34: "ty_mianwen34",
		ty_mianwen35: "ty_mianwen35",
		ty_mianwen37: "ty_mianwen37",
		ty_mianshi01: "ty_mianshi01",
		ty_mianshi02: "ty_mianshi02",
		ty_mianshi03: "ty_mianshi03",
		ty_mianshi04: "ty_mianshi04",
		ty_mianshi05: "ty_mianshi05",
		ty_mianshi06: "ty_mianshi06",
		ty_mianshi08: "ty_mianshi08",
		ty_mianshi09: "ty_mianshi09",
		ty_mianshi10: "ty_mianshi10",
		yll_ip011_mianshi: "yll_ip011_mianshi",
		bll_008_toufa: "bll_008_toufa",
		bll_009_toufa: "bll_009_toufa",
		bll_010_toufa: "bll_010_toufa",
		bll_011_toufa: "bll_011_toufa",
		bll_013_toufa: "bll_013_toufa",
		bll_015_toufa: "bll_015_toufa",
		bll_016_toufa: "bll_016_toufa",
		bll_018_toufa: "bll_018_toufa",
		bll_020_toufa: "bll_020_toufa",
		bll_021_toufa: "bll_021_toufa",
		bll_022_toufa: "bll_022_toufa",
		bll_023_toufa: "bll_023_toufa",
		bll_024_toufa: "bll_024_toufa",
		bll_026_toufa: "bll_026_toufa",
		bll_028_toufa: "bll_028_toufa",
		bll_030_toufa: "bll_030_toufa",
		yll_001_toufa: "yll_001_toufa",
		yll_002_toufa: "yll_002_toufa",
		yll_003_toufa: "yll_003_toufa",
		yll_004_toufa: "yll_004_toufa",
		yll_005_toufa: "yll_005_toufa",
		yll_006_toufa: "yll_006_toufa",
		yll_008_toufa: "yll_008_toufa",
		yll_ip001_toufa: "yll_ip001_toufa",
		yll_ip002_toufa: "yll_ip002_toufa",
		yll_ip003_toufa: "yll_ip003_toufa",
		yll_ip004_toufa: "yll_ip004_toufa",
		yll_ip005_toufa: "yll_ip005_toufa",
		yll_ip006_toufa: "yll_ip006_toufa",
		yll_ip007_toufa: "yll_ip007_toufa",
		yll_ip008_toufa: "yll_ip008_toufa",
		yll_ip009_toufa: "yll_ip009_toufa",
		yll_ip010_toufa: "yll_ip010_toufa",
		yll_ip011_toufa: "yll_ip011_toufa",
		yll_ip012_toufa: "yll_ip012_toufa",
		yll_ip013_toufa: "yll_ip013_toufa",
		yll_ip014_toufa: "yll_ip014_toufa",
		yll_ip016_toufa: "yll_ip016_toufa",
		bll_008_toushi: "bll_008_toushi",
		bll_009_toushi: "bll_009_toushi",
		bll_010_toushi: "bll_010_toushi",
		bll_011_toushi: "bll_011_toushi",
		bll_013_toushi: "bll_013_toushi",
		bll_015_toushi: "bll_015_toushi",
		bll_016_toushi: "bll_016_toushi",
		bll_020_toushi: "bll_020_toushi",
		bll_021_toushi: "bll_021_toushi",
		bll_022_toushi: "bll_022_toushi",
		bll_023_toushi: "bll_023_toushi",
		bll_026_toushi: "bll_026_toushi",
		bll_028_toushi: "bll_028_toushi",
		yll_001_toushi: "yll_001_toushi",
		yll_002_toushi: "yll_002_toushi",
		yll_003_toushi: "yll_003_toushi",
		yll_004_toushi: "yll_004_toushi",
		yll_005_toushi: "yll_005_toushi",
		yll_006_toushi: "yll_006_toushi",
		yll_008_toushi: "yll_008_toushi",
		yll_099_toushi: "yll_099_toushi",
		yll_ip001_toushi: "yll_ip001_toushi",
		yll_ip002_toushi: "yll_ip002_toushi",
		yll_ip003_toushi: "yll_ip003_toushi",
		yll_ip004_toushi: "yll_ip004_toushi",
		yll_ip005_toushi: "yll_ip005_toushi",
		yll_ip006_toushi: "yll_ip006_toushi",
		yll_ip007_toushi: "yll_ip007_toushi",
		yll_ip008_toushi: "yll_ip008_toushi",
		yll_ip009_toushi: "yll_ip009_toushi",
		yll_ip010_toushi: "yll_ip010_toushi",
		yll_ip011_toushi: "yll_ip011_toushi",
		yll_ip012_toushi: "yll_ip012_toushi",
		yll_ip013_toushi: "yll_ip013_toushi",
		yll_ip014_toushi: "yll_ip014_toushi",
		yll_ip016_toushi: "yll_ip016_toushi",
		bll_008_ershi: "bll_008_ershi",
		bll_009_ershi: "bll_009_ershi",
		bll_010_ershi: "bll_010_ershi",
		bll_011_ershi: "bll_011_ershi",
		bll_013_ershi: "bll_013_ershi",
		bll_015_ershi: "bll_015_ershi",
		bll_016_ershi: "bll_016_ershi",
		bll_018_ershi: "bll_018_ershi",
		bll_022_ershi: "bll_022_ershi",
		bll_023_ershi: "bll_023_ershi",
		bll_024_ershi: "bll_024_ershi",
		bll_030_ershi: "bll_030_ershi",
		yll_002_ershi: "yll_002_ershi",
		yll_003_ershi: "yll_003_ershi",
		yll_004_ershi: "yll_004_ershi",
		yll_006_ershi: "yll_006_ershi",
		yll_008_ershi: "yll_008_ershi",
		yll_ip001_ershi: "yll_ip001_ershi",
		yll_ip002_ershi: "yll_ip002_ershi",
		yll_ip003_ershi: "yll_ip003_ershi",
		yll_ip004_ershi: "yll_ip004_ershi",
		yll_ip006_ershi: "yll_ip006_ershi",
		yll_ip008_ershi: "yll_ip008_ershi",
		yll_ip009_ershi: "yll_ip009_ershi",
		yll_ip010_ershi: "yll_ip010_ershi",
		yll_ip011_ershi: "yll_ip011_ershi",
		yll_ip012_ershi: "yll_ip012_ershi",
		yll_ip013_ershi: "yll_ip013_ershi",
		yll_ip014_ershi: "yll_ip014_ershi",
		yll_ip016_ershi: "yll_ip016_ershi",
		bll_008_jingshi: "bll_008_jingshi",
		bll_009_jingshi: "bll_009_jingshi",
		bll_010_jingshi: "bll_010_jingshi",
		bll_011_jingshi: "bll_011_jingshi",
		bll_013_jingshi: "bll_013_jingshi",
		bll_018_jingshi: "bll_018_jingshi",
		bll_020_jingshi: "bll_020_jingshi",
		bll_021_jingshi: "bll_021_jingshi",
		bll_024_jingshi: "bll_024_jingshi",
		bll_030_jingshi: "bll_030_jingshi",
		yll_001_jingshi: "yll_001_jingshi",
		yll_002_jingshi: "yll_002_jingshi",
		yll_003_jingshi: "yll_003_jingshi",
		yll_005_jingshi: "yll_005_jingshi",
		yll_006_jingshi: "yll_006_jingshi",
		yll_008_jingshi: "yll_008_jingshi",
		yll_ip001_jingshi: "yll_ip001_jingshi",
		yll_ip002_jingshi: "yll_ip002_jingshi",
		yll_ip005_jingshi: "yll_ip005_jingshi",
		yll_ip006_jingshi: "yll_ip006_jingshi",
		yll_ip007_jingshi: "yll_ip007_jingshi",
		yll_ip008_jingshi: "yll_ip008_jingshi",
		yll_ip009_jingshi: "yll_ip009_jingshi",
		yll_ip010_jingshi: "yll_ip010_jingshi",
		yll_ip012_jingshi: "yll_ip012_jingshi",
		yll_ip013_jingshi: "yll_ip013_jingshi",
		yll_ip014_jingshi: "yll_ip014_jingshi",
		yll_ip016_jingshi: "yll_ip016_jingshi",
		bll_008_yifu: "bll_008_yifu",
		bll_009_yifu: "bll_009_yifu",
		bll_010_yifu: "bll_010_yifu",
		bll_011_yifu: "bll_011_yifu",
		bll_013_yifu: "bll_013_yifu",
		bll_015_yifu: "bll_015_yifu",
		bll_016_yifu: "bll_016_yifu",
		bll_018_yifu: "bll_018_yifu",
		bll_020_yifu: "bll_020_yifu",
		bll_021_yifu: "bll_021_yifu",
		bll_022_yifu: "bll_022_yifu",
		bll_023_yifu: "bll_023_yifu",
		bll_024_yifu: "bll_024_yifu",
		bll_026_yifu: "bll_026_yifu",
		bll_028_yifu: "bll_028_yifu",
		bll_030_yifu: "bll_030_yifu",
		yll_001_yifu: "yll_001_yifu",
		yll_002_yifu: "yll_002_yifu",
		yll_003_yifu: "yll_003_yifu",
		yll_004_yifu: "yll_004_yifu",
		yll_005_yifu: "yll_005_yifu",
		yll_006_yifu: "yll_006_yifu",
		yll_008_yifu: "yll_008_yifu",
		yll_099_yifu: "yll_099_yifu",
		yll_ip001_yifu: "yll_ip001_yifu",
		yll_ip002_yifu: "yll_ip002_yifu",
		yll_ip003_yifu: "yll_ip003_yifu",
		yll_ip004_yifu: "yll_ip004_yifu",
		yll_ip005_yifu: "yll_ip005_yifu",
		yll_ip006_yifu: "yll_ip006_yifu",
		yll_ip007_yifu: "yll_ip007_yifu",
		yll_ip008_yifu: "yll_ip008_yifu",
		yll_ip009_yifu: "yll_ip009_yifu",
		yll_ip010_yifu: "yll_ip010_yifu",
		yll_ip011_yifu: "yll_ip011_yifu",
		yll_ip012_yifu: "yll_ip012_yifu",
		yll_ip013_yifu: "yll_ip013_yifu",
		yll_ip014_yifu: "yll_ip014_yifu",
		yll_ip016_yifu: "yll_ip016_yifu",
		bll_008_xiezi: "bll_008_xiezi",
		bll_009_xiezi: "bll_009_xiezi",
		bll_010_xiezi: "bll_010_xiezi",
		bll_011_xiezi: "bll_011_xiezi",
		bll_013_xiezi: "bll_013_xiezi",
		bll_015_xiezi: "bll_015_xiezi",
		bll_016_xiezi: "bll_016_xiezi",
		bll_018_xiezi: "bll_018_xiezi",
		bll_020_xiezi: "bll_020_xiezi",
		bll_021_xiezi: "bll_021_xiezi",
		bll_022_xiezi: "bll_022_xiezi",
		bll_023_xiezi: "bll_023_xiezi",
		bll_024_xiezi: "bll_024_xiezi",
		bll_026_xiezi: "bll_026_xiezi",
		bll_028_xiezi: "bll_028_xiezi",
		bll_030_xiezi: "bll_030_xiezi",
		yll_001_xiezi: "yll_001_xiezi",
		yll_002_xiezi: "yll_002_xiezi",
		yll_003_xiezi: "yll_003_xiezi",
		yll_004_xiezi: "yll_004_xiezi",
		yll_005_xiezi: "yll_005_xiezi",
		yll_006_xiezi: "yll_006_xiezi",
		yll_008_xiezi: "yll_008_xiezi",
		yll_099_xiezi: "yll_099_xiezi",
		yll_ip001_xiezi: "yll_ip001_xiezi",
		yll_ip002_xiezi: "yll_ip002_xiezi",
		yll_ip003_xiezi: "yll_ip003_xiezi",
		yll_ip004_xiezi: "yll_ip004_xiezi",
		yll_ip005_xiezi: "yll_ip005_xiezi",
		yll_ip006_xiezi: "yll_ip006_xiezi",
		yll_ip007_xiezi: "yll_ip007_xiezi",
		yll_ip008_xiezi: "yll_ip008_xiezi",
		yll_ip009_xiezi: "yll_ip009_xiezi",
		yll_ip010_xiezi: "yll_ip010_xiezi",
		yll_ip011_xiezi: "yll_ip011_xiezi",
		yll_ip012_xiezi: "yll_ip012_xiezi",
		yll_ip013_xiezi: "yll_ip013_xiezi",
		yll_ip014_xiezi: "yll_ip014_xiezi",
		yll_ip016_xiezi: "yll_ip016_xiezi",
		bll_008_wazi: "bll_008_wazi",
		bll_009_wazi: "bll_009_wazi",
		bll_011_wazi: "bll_011_wazi",
		bll_013_wazi: "bll_013_wazi",
		bll_015_wazi: "bll_015_wazi",
		bll_016_wazi: "bll_016_wazi",
		bll_018_wazi: "bll_018_wazi",
		bll_020_wazi: "bll_020_wazi",
		bll_022_wazi: "bll_022_wazi",
		bll_024_wazi: "bll_024_wazi",
		bll_026_wazi: "bll_026_wazi",
		bll_028_wazi: "bll_028_wazi",
		bll_030_wazi: "bll_030_wazi",
		yll_001_wazi: "yll_001_wazi",
		yll_002_wazi: "yll_002_wazi",
		yll_008_wazi: "yll_008_wazi",
		bll_008_shoushi: "bll_008_shoushi",
		bll_009_shoushi: "bll_009_shoushi",
		bll_010_shoushi: "bll_010_shoushi",
		bll_011_shoushi: "bll_011_shoushi",
		bll_015_shoushi: "bll_015_shoushi",
		bll_016_shoushi: "bll_016_shoushi",
		bll_018_shoushi: "bll_018_shoushi",
		bll_020_shoushi: "bll_020_shoushi",
		bll_021_shoushi: "bll_021_shoushi",
		bll_022_shoushi: "bll_022_shoushi",
		yll_001_shoushi: "yll_001_shoushi",
		yll_002_shoushi: "yll_002_shoushi",
		yll_003_shoushi: "yll_003_shoushi",
		yll_005_shoushi: "yll_005_shoushi",
		yll_006_shoushi: "yll_006_shoushi",
		yll_008_shoushi: "yll_008_shoushi",
		yll_ip001_shoushi: "yll_ip001_shoushi",
		yll_ip002_shoushi: "yll_ip002_shoushi",
		yll_ip004_shoushi: "yll_ip004_shoushi",
		yll_ip005_shoushi: "yll_ip005_shoushi",
		yll_ip006_shoushi: "yll_ip006_shoushi",
		yll_ip009_shoushi: "yll_ip009_shoushi",
		yll_ip011_shoushi: "yll_ip011_shoushi",
		bll_008_beibu: "bll_008_beibu",
		bll_009_beibu: "bll_009_beibu",
		bll_010_beibu: "bll_010_beibu",
		bll_011_beibu: "bll_011_beibu",
		bll_013_beibu: "bll_013_beibu",
		bll_015_beibu: "bll_015_beibu",
		bll_016_beibu: "bll_016_beibu",
		bll_018_beibu: "bll_018_beibu",
		bll_020_beibu: "bll_020_beibu",
		bll_021_beibu: "bll_021_beibu",
		bll_022_beibu: "bll_022_beibu",
		bll_023_beibu: "bll_023_beibu",
		yll_001_beibu: "yll_001_beibu",
		yll_002_beibu: "yll_002_beibu",
		yll_004_beibu: "yll_004_beibu",
		yll_005_beibu: "yll_005_beibu",
		yll_008_beibu: "yll_008_beibu",
		yll_098_beibu: "yll_098_beibu",
		yll_ip002_beibu: "yll_ip002_beibu",
		yll_ip011_beibu: "yll_ip011_beibu",
		yll_ip012_beibu: "yll_ip012_beibu",
		yll_ip013_beibu: "yll_ip013_beibu",
		yll_ip014_beibu: "yll_ip014_beibu",
		e_yll_fenwei001: "e_yll_fenwei001",
		e_yll_fenwei002: "e_yll_fenwei002",
		e_yll_fenwei003: "e_yll_fenwei003",
		e_yll_fenwei004: "e_yll_fenwei004",
		e_yll_fenwei005: "e_yll_fenwei005",
		e_yll_fenwei006: "e_yll_fenwei006",
		e_yll_fenwei007: "e_yll_fenwei007",
		e_yll_fenwei008: "e_yll_fenwei008",
		e_yll_fenwei009: "e_yll_fenwei009",
		e_yll_fenwei010: "e_yll_fenwei010",
		e_yll_fenwei011: "e_yll_fenwei011",
		e_yll_fenwei012: "e_yll_fenwei012",
		e_yll_fenwei013: "e_yll_fenwei013",
		e_yll_fenwei014: "e_yll_fenwei014",
		e_yll_fenwei015: "e_yll_fenwei015",
		e_yll_fenwei016: "e_yll_fenwei016",
		e_yll_fenwei017: "e_yll_fenwei017",
		e_yll_fenwei018: "e_yll_fenwei018",
		e_yll_fenwei019: "e_yll_fenwei019",
		e_yll_fenwei020: "e_yll_fenwei020",
		e_yll_fenwei021: "e_yll_fenwei021",
		e_yll_fenwei037: "e_yll_fenwei037",
		e_yll_fenwei041: "e_yll_fenwei041",
		zj_l01: "zj_l01",
		zj_l02: "zj_l02",
		zj_l03: "zj_l03",
		zj_l04: "zj_l04",
		zj_l05: "zj_l05",
		zj_r01: "zj_r01",
		zj_r02: "zj_r02",
		zj_r03: "zj_r03",
		zj_r04: "zj_r04",
		zj_r05: "zj_r05"
	}, db.SPINE_DB_ID = {
		yindao: "yindao",
		lajitong1: "lajitong1",
		lajitong2: "lajitong2",
		jinyu: "jinyu",
		qieping: "qieping",
		ui_pingzi01: "ui_pingzi01",
		ui_pingzi02: "ui_pingzi02",
		ui_pingzi03: "ui_pingzi03",
		ui_pingzi04: "ui_pingzi04",
		ui_pingzi05: "ui_pingzi05",
		role_yanjue: "role_yanjue",
		ui_luping: "ui_luping",
		q_chensisi: "q_chensisi",
		q_linggongzhu: "q_linggongzhu",
		q_luoli: "q_luoli",
		q_manduola: "q_manduola",
		q_shuiwangzi: "q_shuiwangzi",
		q_wangmo: "q_wangmo",
		q_xinling: "q_xinling",
		q_binggongzhu86: "q_binggongzhu86",
		q_wenqianbs: "q_wenqianbs",
		q_yanjue: "q_yanjue",
		cj_heibanca: "cj_heibanca",
		cj_jinyuhei: "cj_jinyuhei",
		q_liangcai: "q_liangcai",
		110100: "110100",
		110300: "110300",
		"110700_l1": "110700_l1",
		"110700_l2": "110700_l2",
		110800: "110800",
		"110200_l1": "110200_l1",
		"110200_l2": "110200_l2",
		110400: "110400",
		110600: "110600",
		ui_lianzi: "ui_lianzi",
		cartoon: "cartoon"
	};
	const RECORD_DATA_KEY = "record_game_hagou" + _G.GAME_ID,
		RECORD_AGE_KEY = "__age__",
		RECORD_VERSION_KEY = "__version__",
		RECORD_FILES_KEY = "__files__";
	class FileRecord {
		static init() {
			this._readRecord(), Timer.callLoop(5, this._onTimerSpan.bind(this))
		}
		static _onTimerSpan(t) {
			this.writeEnable && this.bNeedFlush && (this.bNeedFlush = !1, this._writeRecord())
		}
		static _readRecord(t) {
			if (t || (t = Laya.LocalStorage.getItem(RECORD_DATA_KEY)), !t) return console.log("提示] FileRecord._readRecord 存档未找到！重置存档！"), void this.resetRecord();
			let e = this._decodeData(t);
			return e ? e[RECORD_VERSION_KEY] != _G.RECORD_VERSION ? (console.warn("警告] FileRecord._readRecord 存档版本改变！重置存档！"), void this.resetRecord()) : void(this.record = e) : (console.warn("警告] FileRecord._readRecord 存档数据损坏！重置存档！"), void this.resetRecord())
		}
		static _writeRecord() {
			let t = this._encodeData(this.record);
			Laya.LocalStorage.setItem(RECORD_DATA_KEY, t)
		}
		static markFlush() {
			this.bNeedFlush = !0
		}
		static flush() {
			this._writeRecord(), this.bNeedFlush = !1
		}
		static _encodeData(t) {
			let e = JSON.stringify(t);
			if (this.compressEnable) {
				let t = Tools.compress(e);
				return Base64.encode(t)
			}
			return e
		}
		static _decodeData(t) {
			try {
				if (this.compressEnable) {
					let e = Base64.decode(t),
						a = Tools.decompress(e);
					if (a) {
						return JSON.parse(a)
					}
					return null
				}
				return JSON.parse(t)
			} catch (t) {
				Logger.catchError("FileRecord._decodeData", t)
			}
			return null
		}
		static getData(t) {
			return this.record[t]
		}
		static setData(t, e) {
			this.record[t] = e, this.record[RECORD_AGE_KEY] = (this.record[RECORD_AGE_KEY] || 0) + 1, this.markFlush()
		}
		static resetRecord() {
			this.deletFileData(), this.record = {}, this.record[RECORD_AGE_KEY] = 0, this.record[RECORD_VERSION_KEY] = _G.RECORD_VERSION, this.record[RECORD_FILES_KEY] = {}, this.markFlush(), this.isNewRecord = !0
		}
		static deletAllData(t = !0) {
			this.deletFileData(), t && (this.record = {}, this.record[RECORD_AGE_KEY] = 0), this.record[RECORD_VERSION_KEY] = _G.RECORD_VERSION + 123698745, this.record[RECORD_FILES_KEY] = {}, Laya.LocalStorage.removeItem(RECORD_DATA_KEY)
		}
		static deletFileData() {
			let t = this.record;
			if (t) {
				let e = t[RECORD_FILES_KEY];
				if (e)
					for (const t in e) Laya.LocalStorage.removeItem(t)
			}
		}
		static setDataToFile(t, e, a = !0) {
			let i = this.getData(RECORD_FILES_KEY);
			i[t] = 1, this.setData(RECORD_FILES_KEY, i), Laya.LocalStorage.setItem(t, a ? this._encodeData(e) : e)
		}
		static getDataFromFile(t, e = !0) {
			let a = Laya.LocalStorage.getItem(t);
			return a ? e ? this._decodeData(a) : a : null
		}
	}
	FileRecord.record = {}, FileRecord.bNeedFlush = !1, FileRecord.writeEnable = !0, FileRecord.isNewRecord = !1, FileRecord.compressEnable = !1;
	const test_data = {};
	class GameStatistics {
		static init() {
			this.onceEventId = FileRecord.getData("key_statistics") || {}
		}
		static saveData() {
			FileRecord.setData("key_statistics", this.onceEventId)
		}
		static postMegadata(t) {
			if (this.enable) {
				if (Laya.Browser.onPC && _G.H5_TEST) {
					let e = t.join("-"),
						a = test_data[e];
					test_data[e] = a ? a + 1 : 1
				}
				console.log("mgrSdk:postMegadata(data)", t), SDKBridge.sendToSdk("/c/postMegadata", t)
			}
		}
		static statisOnStageStart(t, e = 0) {
			console.info("mgrSdk:statisOnStageStart(stageName)", t);
			let a = ["levelStart", t + "", e + ""];
			this.postMegadata(a)
		}
		static statisOnStageEnd(t, e = 0, a = 0) {
			console.info("mgrSdk:statisOnStageEnd(stageName)", t, e, a);
			let i = ["levelComplete", t + "", e + "", a + "", "0", "0", "0", "0", "0"];
			this.postMegadata(i)
		}
		static statisOnAddItemAmount(t, e, a) {
			if (_G.isGuiding) return;
			if (!db.cop.b_open_statics_item) return;
			let i = ["coinChange", t + "", "1", e + "", a + ""];
			this.postMegadata(i)
		}
		static statisOnSubItemAmount(t, e, a) {
			if (_G.isGuiding) return;
			if (!db.cop.b_open_statics_item) return;
			let i = ["coinChange", t + "", "0", e + "", a + ""];
			this.postMegadata(i)
		}
		static statisOnItemBought(t, e, a = 0) {
			if (_G.isGuiding) return;
			let i = ["itemBuy", t + "", Math.abs(e) + "", a + ""];
			this.postMegadata(i)
		}
		static statisOnBuyAction(t, e, a) {
			if (_G.isGuiding) return;
			let i = ["buyAction", t + "", e + "", a + ""];
			this.postMegadata(i)
		}
		static statisCommonEvent(t, e = 0, a = 0) {
			let i = ["commonEvent", t + "", e + "", a + ""];
			this.postMegadata(i)
		}
		static statisVideoPointEvent(t, e) {
			if (_G.isGuiding) return;
			let a = ["videoPointEvent", t, e + ""];
			this.postMegadata(a)
		}
		static statisCommonEventOnce(t) {
			this.onceEventId[t] || (this.onceEventId[t] = 1, this.saveData(), this.statisCommonEvent(t))
		}
		static statisLog(t, e, a = "", i = "", s = "") {
			let n = ["commonEvent", t + "", "0", "0", "0", e, a, i, s];
			this.postMegadata(n)
		}
		static logAllData() {
			let t = "",
				e = Object.keys(test_data);
			e.sort();
			for (let a = 0; a < e.length; a++) t += `[${e[a]}] [${test_data[e[a]]}]`, t += "\n";
			Logger.debug("--- statistics start ---"), Logger.debug(t), Logger.debug("--- statistics end ---")
		}
	}
	GameStatistics.enable = !0;
	let pako$1 = window.pako;
	const DEV_REPORT = !1;
	class CrashReporter {
		constructor() {
			this.reportedLog = {}, this.onWindow = !1, this.registerOnErrorCallback();
			let t = Laya.Browser.userAgent;
			this.onWindow = t.indexOf("Windows") >= 0 && t.indexOf("Chrome") >= 0
		}
		static getInstance() {
			return this.reporter ? this.reporter : (this.reporter = new CrashReporter, this.reporter)
		}
		setDataHook(t) {
			this.hookCallback = t
		}
		registerOnErrorCallback() {
			let t, e = this;
			window.onerror && (t = window.onerror), window.onerror = function(a, i, s, n, o) {
				setTimeout(() => {
					e._browser_onerror(a, i, s, n, o)
				}, 0), t instanceof Function && t(a, i, s, n, o)
			}
		}
		_browser_onerror(t, e, a, i, s) {
			i = i || window.event && window.event.errorCharacter || 0;
			let n = {
				message: t.toString(),
				stack: "",
				location: e || "",
				line: a || 0,
				col: i || 0
			};
			if (s && s.stack) n.stack = s.stack.toString();
			else if (window.arguments && window.arguments.callee) {
				for (var o = [], r = window.arguments.callee.caller, l = 3; r && --l > 0 && (o.push(r.toString()), r !== r.caller);) r = r.caller;
				n.stack = o.join(",")
			}
			try {
				this.onError(n)
			} catch (s) {
				console.error("CrashReporter.onError has exception:", s)
			}
		}
		_native_onerror(t, e, a, i) {
			let s = {
				message: a || "",
				stack: i || "",
				location: t || "",
				line: e || 0,
				col: 0
			};
			try {
				this.onError(s)
			} catch (t) {
				console.error("CrashReporter.onError has exception:", t)
			}
		}
		manualReport(t, e, a = "") {
			this.onError({
				message: e || "",
				stack: a || "",
				location: t || "CrashReport.manualReport",
				line: 0,
				col: 0
			})
		}
		onError(t) {
			let e = "",
				a = "",
				i = "none";
			if (this.hookCallback instanceof Function) {
				let t = this.hookCallback();
				e = t.uid || "", a = t.channelName || "", i = t.gameVersion
			}
			let s = t.message,
				n = t.stack;
			n.length > 1024 && (n = n.substr(0, 1024));
			let o = t.location.toString(),
				r = t.line.toString(),
				l = t.col.toString(),
				c = Laya.Browser.userAgent,
				h = `${Laya.Browser.width}x${Laya.Browser.height}`,
				d = `${Laya.stage.width}x${Laya.stage.height}`;
			this.onWindow ? console.error("CrashReport.onError:", t) : console.log("CrashReport.onError:"), console.log("  uid", e), console.log("  channelName", a), console.log("  gameVersion", i), console.log("  message", s), console.log("  stack", n), console.log("  location", o), console.log("  line", r), console.log("  col", l), console.log("  userAgent", c), console.log("  deviceSize", h), console.log("  viewSizeStr", d), console.log("  gitHash", "LOCAL_PATCH_GIT_HASH");
			let _ = t.message + t.location;
			if (this.reportedLog[_]) return void console.log("当前crash信息已上报！");
			let g = [e, a, i, s, n, o, r, l, c, h, d, "LOCAL_PATCH_GIT_HASH"];
			this.uploadCrashInfo(g), this.reportedLog[_] = !0
		}
		uploadCrashInfo(t) {
			if (_G.H5_TEST) console.error("开发模式不需要上报数据");
			else try {
				let e = this.compressUpdata(t);
				e && GameStatistics.statisLog(99999, e[0], e[1], e[2], e[3])
			} catch (t) {
				console.error("mgrSdk._temp_upload_statistics has error!", t)
			}
		}
		compressUpdata(t, e = 0) {
			let a = JSON.stringify(t),
				i = pako$1.gzip(a, {
					to: "byte"
				}),
				s = gBase64.fromUint8Array(i, !0),
				n = s.length;
			if (n > 1250) switch (e) {
				case 0:
					for (let e = t.length - 1; e >= 8; e--) t.splice(e, 1);
					return this.compressUpdata(t, 1);
				case 1:
					return t[4] && (t[4] = t[4].substr(0, 1e3)), this.compressUpdata(t, 2);
				case 2:
					return t[4] = "", this.compressUpdata(t, 3);
				case 3:
					return console.warn("上传数据超长", t), null
			}
			let o = [];
			for (let t = 0; t < n; t += 250) o.push(s.substr(t, 250));
			return o
		}
	}
	let cur_log_level = 2,
		EMPTY_FUN = function() {};
	class Logger {
		static log() {}
		static debug() {}
		static warn() {}
		static error() {}
		static catchError(t, e) {
			e instanceof Error ? CrashReporter.getInstance().manualReport(t, e.message, e.stack) : CrashReporter.getInstance().manualReport(t, e.toString())
		}
		static getErrorStr(t) {
			return t instanceof Error ? `message:${t.message} stack:${t.stack}` : t ? JSON.stringify(t) : t.toString()
		}
		static setLogLevel(t) {
			cur_log_level = t, t >= 3 && (Logger.debug = console.log), t >= 2 && (Logger.log = console.log), t >= 1 && (Logger.warn = console.warn), t >= 0 && (Logger.error = console.error)
		}
		static get isDebugLevel() {
			return 3 == cur_log_level
		}
	}
	const BASE_MSG = {
			VIEW_RESIZE: "VIEW_RESIZE",
			SYS_SHOW: "SYS_SHOW",
			SYS_HIDE: "SYS_HIDE",
			SYS_KEY_DOWN: "SYS_KEY_DOWN",
			SYS_KEY_UP: "SYS_KEY_UP",
			RES_LOAD_START: "RES_LOAD_START",
			RES_LOAD_PROGRESS: "RES_LOAD_PROGRESS",
			RES_LOAD_END: "RES_LOAD_END",
			READY_OPEN_NEW_BANNER: "READY_OPEN_NEW_BANNER",
			CFG_LOAD_FINISH: "CFG_LOAD_FINISH",
			UI_SHOW_TIP: "UI_SHOW_TIP",
			UI_SHOW_ITEMS: "UI_SHOW_ITEMS",
			SDK_EXIT_GAME: "SDK_EXIT_GAME",
			SDK_VIDEO_VISIBLE: "SDK_VIDEO_VISIBLE",
			SDK_SHARE_SUC: "SDK_SHARE_SUC",
			SDK_SHARE_FAIL: "SDK_SHARE_FAIL",
			SDK_LOGIN_STATE: "SDK_LOGIN_STATE",
			SDK_LOGIN_RESULT: "SDK_LOGIN_RESULT",
			SDK_INSTALL_SHORTCUT_SUC: "SDK_INSTALL_SHORTCUT_SUC",
			SDK_GET_SHORTCUT_STATE_SUC: "SDK_GET_SHORTCUT_STATE_SUC",
			SDK_COP_CHANGED: "SDK_COP_CHANGED",
			SDK_VIDEO_SHARE_SUC: "SDK_VIDEO_SHARE_SUC",
			SDK_VIDEO_SHARE_FAIL: "SDK_VIDEO_SHARE_FAIL",
			SDK_OPEN_JUMP_RESULT: "SDK_OPEN_JUMP_RESULT",
			SDK_JUMP_GAME_SUC: "SDK_JUMP_GAME_SUC",
			MSG_ON_ADD_SUBSCRIBE_RESULT: "MSG_ON_ADD_SUBSCRIBE_RESULT",
			SDK_JUMP_GAME_REWARD: "SDK_JUMP_GAME_REWARD",
			SDK_JUMP_TO_VIDEO_VIEW_SUC: "SDK_JUMP_TO_VIDEO_VIEW_SUC",
			SDK_PRE_PAY: "SDK_PRE_PAY",
			SDK_FOLLOW_OFFICIAL_ACCOUNT_SUC: "SDK_FOLLOW_OFFICIAL_ACCOUNT_SUC",
			SDK_GET_FOLLOW_OFFICIAL_ACCOUNT_STATE_SUC: "SDK_GET_FOLLOW_OFFICIAL_ACCOUNT_STATE_SUC",
			SDK_GET_RANK_DATA_RESULT: "SDK_GET_RANK_DATA_RESULT",
			ADV_SHOW_SUC: "ADV_SHOW_SUC",
			ADV_SHOW_FAIL: "ADV_SHOW_FAIL",
			ADV_CLICK_SUC: "ADV_CLICK_SUC",
			NATIVE_ADV_LOADED: "NATIVE_ADV_LOADED",
			ADV_CLOSE_NATIVE_BANNER: "ADV_CLOSE_NATIVE_BANNER",
			BASE_MGR_LOADED: "BASE_MGR_LOADED",
			UI_PANEL_CLOSED: "UI_PANEL_CLOSED",
			ITEM_CHANGE: "ITEM_CHANGE",
			ITEM_USE: "ITEM_USE",
			ITEM_ADD: "ITEM_ADD",
			GOAL_STATE_CHANGE: "GOAL_STATE_CHANGE",
			GOAL_VALUE_CHANGE: "GOAL_VALUE_CHANGE",
			DAILY_SWITCH_ACTIVE: "DAILY_SWITCH_ACTIVE",
			QUEST_STATE_CHANGE: "QUEST_STATE_CHANGE",
			UP_STATE_CHANGE: "UP_STATE_CHANGE",
			PAY_SUC: "PAY_SUC"
		},
		RES_TYPE = {
			BUFFER: Laya.Loader.BUFFER,
			PREFAB2D: Laya.Loader.PREFAB,
			IMAGE: Laya.Loader.IMAGE,
			TEXT: Laya.Loader.TEXT,
			JSON: Laya.Loader.JSON,
			SOUND: Laya.Loader.SOUND,
			ATLAS: Laya.Loader.ATLAS,
			PREFAB3D: Laya.Loader.HIERARCHY,
			MATERIAL: Laya.Loader.MATERIAL,
			TEXTURE2D: Laya.Loader.TEXTURE2D,
			MESH: Laya.Loader.MESH,
			ANIMATIONCLIP: Laya.Loader.ANIMATIONCLIP
		};
	var GOAL_TYPE;
	! function(t) {
		t.QUEST = "QUEST", t.SWITCH = "SWITCH"
	}(GOAL_TYPE || (GOAL_TYPE = {}));
	const BASE_ACTION_ID = {
			ITEM_GET: "ITEM_GET",
			ITEM_USE: "ITEM_USE",
			PAY_SUC: "PAY_SUC",
			SHARE: "SHARE",
			LEVEL_UP: "LEVEL_UP",
			LEVEL_UP_KEY: "LEVEL_UP_KEY",
			LEVEL_UP_KEY_MAX: "LEVEL_UP_KEY_MAX",
			QUEST_FINISH: "QUEST_FINISH",
			QUEST_FINISH_COUNT: "QUEST_FINISH_COUNT",
			VIDEO_SHOW_SUC: "VIDEO_SHOW_SUC"
		},
		BASE_SWITCH_ID = {
			DAILY: "1",
			WEEKLY: "2"
		},
		UpAttrName = {
			Base: "baseUp"
		};
	let _convert = function(t, e) {
		t.sign = e ? "" : t.negative ? "-" : t.sign;
		var a = t.min - t.argument.length + 1 - t.sign.length,
			i = new Array(a < 0 ? 0 : a).join(t.pad);
		return t.left ? "0" == t.pad || e ? t.sign + t.argument + i.replace(/0/g, " ") : t.sign + t.argument + i : "0" == t.pad || e ? t.sign + i + t.argument : i + t.sign + t.argument
	};

	function sprintf(...t) {
		if (void 0 === t) return null;
		if (t.length < 1) return null;
		if ("string" != typeof t[0]) return null;
		if ("undefined" == typeof RegExp) return null;
		for (var e = t[0], a = new RegExp(/(%([%]|(\-)?(\+|\x20)?(0)?(\d+)?(\.(\d)?)?([bcdfosxX])))/g), i = new Array, s = new Array, n = 0, o = 0, r = 0, l = 0, c = "", h = null; h = a.exec(e);) h[9] && (n += 1), o = l, r = a.lastIndex - h[0].length, s[s.length] = e.substring(o, r), l = a.lastIndex, i[i.length] = {
			match: h[0],
			left: !!h[3],
			sign: h[4] || "",
			pad: h[5] || " ",
			min: h[6] || 0,
			precision: h[8],
			code: h[9] || "%",
			negative: parseInt(t[n]) < 0,
			argument: String(t[n])
		};
		if (s[s.length] = e.substring(l), 0 == i.length) return e;
		if (t.length - 1 < n) return null;
		h = null;
		var d = null,
			_ = null;
		for (_ = 0; _ < i.length; _++) "%" == i[_].code ? d = "%" : "b" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(2)), d = _convert(i[_], !0)) : "c" == i[_].code ? (i[_].argument = String(String.fromCharCode(Math.abs(parseInt(i[_].argument)))), d = _convert(i[_], !0)) : "d" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument))), d = _convert(i[_])) : "f" == i[_].code ? (i[_].argument = String(Math.abs(parseFloat(i[_].argument)).toFixed(i[_].precision ? i[_].precision : 6)), d = _convert(i[_])) : "o" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(8)), d = _convert(i[_])) : "s" == i[_].code ? (i[_].argument = i[_].argument.substring(0, i[_].precision ? i[_].precision : i[_].argument.length), d = _convert(i[_], !0)) : "x" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(16)), d = _convert(i[_])) : "X" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(16)), d = _convert(i[_]).toUpperCase()) : d = i[_].match, c += s[_], c += d;
		return c += s[_]
	}
	window.UL_DEBUG = !1, String.format = sprintf;
	let proto_onDestroy = Laya.Node.prototype.onDestroy;
	Laya.Node.prototype.onDestroy = function() {
		proto_onDestroy.apply(this), this.event("NODE_DESTROYED")
	}, Laya.Sprite.prototype.setVisible = function(t) {
		this._visible !== t && (this.visible = t, this.event(Laya.Event.VISIBILITY_CHANGE))
	};
	let proto_onCompResize = Laya.Image.prototype.onCompResize;

	function __init_laya_ex__() {}
	Laya.Image.prototype.onCompResize = function() {
		this.destroyed || proto_onCompResize.apply(this)
	}, Object.defineProperty(Laya.Text.prototype, "intText", {
		set: function(t) {
			this.text = Math.floor(t) + ""
		},
		get: function() {
			return parseInt(this.text) || 0
		}
	}), Object.defineProperty(Laya.Label.prototype, "intText", {
		set: function(t) {
			this.text = Math.floor(t) + ""
		},
		get: function() {
			return parseInt(this.text) || 0
		}
	});
	class Vec2 {
		constructor(t = 0, e = 0) {
			this.x = 0, this.y = 0, this.x = t, this.y = e
		}
		static get zero() {
			return new Vec2(0, 0)
		}
		static get one() {
			return new Vec2(1, 1)
		}
		clone() {
			return new Vec2(this.x, this.y)
		}
		setTo(t, e) {
			return this.setValue(t, e), this
		}
		setValue(t, e) {
			this.x = t, this.y = e
		}
		set(t) {
			return this.x = t.x, this.y = t.y, this
		}
		equals(t) {
			return t && this.x === t.x && this.y === t.y
		}
		fuzzyEquals(t, e) {
			return this.x - e <= t.x && t.x <= this.x + e && this.y - e <= t.y && t.y <= this.y + e
		}
		lerp(t, e, a) {
			a = a || new Vec2;
			let i = this.x,
				s = this.y;
			return a.x = i + (t.x - i) * e, a.y = s + (t.y - s) * e, a
		}
		clampf(t, e) {
			return this.x = Mathf.clamp(this.x, t.x, e.x), this.y = Mathf.clamp(this.y, t.y, e.y), this
		}
		addSelf(t) {
			return this.x += t.x, this.y += t.y, this
		}
		add(t, e) {
			return (e = e || new Vec2).x = this.x + t.x, e.y = this.y + t.y, e
		}
		subSelf(t) {
			return this.x -= t.x, this.y -= t.y, this
		}
		sub(t, e) {
			return (e = e || new Vec2).x = this.x - t.x, e.y = this.y - t.y, e
		}
		mulSelf(t) {
			return this.x *= t, this.y *= t, this
		}
		mul(t, e) {
			return (e = e || new Vec2).x = this.x * t, e.y = this.y * t, e
		}
		scaleSelf(t) {
			return this.x *= t.x, this.y *= t.y, this
		}
		scale(t, e) {
			return (e = e || new Vec2).x = this.x * t.x, e.y = this.y * t.y, e
		}
		divSelf(t) {
			return this.x /= t, this.y /= t, this
		}
		div(t, e) {
			return (e = e || new Vec2).x = this.x / t, e.y = this.y / t, e
		}
		negSelf() {
			return this.x = -this.x, this.y = -this.y, this
		}
		neg(t) {
			return (t = t || new Vec2).x = -this.x, t.y = -this.y, t
		}
		dot(t) {
			return this.x * t.x + this.y * t.y
		}
		cross(t) {
			return this.x * t.y - this.y * t.x
		}
		mag() {
			return Math.sqrt(this.x * this.x + this.y * this.y)
		}
		magSqr() {
			return this.x * this.x + this.y * this.y
		}
		normalizeSelf() {
			var t = this.x * this.x + this.y * this.y;
			if (1 === t) return this;
			if (0 === t) return this;
			var e = 1 / Math.sqrt(t);
			return this.x *= e, this.y *= e, this
		}
		normalize(t) {
			return (t = t || new Vec2).x = this.x, t.y = this.y, t.normalizeSelf(), t
		}
		angle(t) {
			var e = this.magSqr(),
				a = t.magSqr();
			if (0 === e || 0 === a) return console.warn("Can't get angle between zero vector"), 0;
			var i = this.dot(t) / Math.sqrt(e * a);
			return i = Mathf.clamp(i, -1, 1), Math.acos(i)
		}
		signAngle(t) {
			let e = this.angle(t);
			return this.cross(t) < 0 ? -e : e
		}
		rotate(t, e) {
			return (e = e || new Vec2).x = this.x, e.y = this.y, e.rotateSelf(t)
		}
		rotateSelf(t) {
			var e = Math.sin(t),
				a = Math.cos(t),
				i = this.x;
			return this.x = a * i - e * this.y, this.y = e * i + a * this.y, this
		}
		project(t) {
			return t.mul(this.dot(t) / t.dot(t))
		}
	}
	Vec2.ZERO = new Vec2(0, 0), Vec2.TEMP = new Vec2(0, 0), Vec2.TEMPS = [new Vec2(0, 0), new Vec2(0, 0), new Vec2(0, 0), new Vec2(0, 0)];
	var Vector2 = Laya.Vector2,
		vec2Proto = Vec2.prototype,
		proto = Vector2.prototype;

	function __init_vector2_ex__() {
		console.log("__init_vector2_ex__")
	}

	function logID(t) {
		console.log(t)
	}

	function errorID(t) {
		console.error(t)
	}

	function warnID(t, e) {
		console.warn(t, e)
	}
	proto.setTo = function(t, e) {
		return this.setValue(t, e), this
	}, proto.set = vec2Proto.set, proto.equals = vec2Proto.equals, proto.fuzzyEquals = vec2Proto.fuzzyEquals, proto.lerp = function(t, e, a) {
		a = a || new Vector2;
		let i = this.x,
			s = this.y;
		return a.x = i + (t.x - i) * e, a.y = s + (t.y - s) * e, a
	}, proto.clampf = vec2Proto.clampf, proto.addSelf = vec2Proto.addSelf, proto.add = function(t, e) {
		return (e = e || new Vector2).x = this.x + t.x, e.y = this.y + t.y, e
	}, proto.subSelf = vec2Proto.subSelf, proto.sub = function(t, e) {
		return (e = e || new Vector2).x = this.x - t.x, e.y = this.y - t.y, e
	}, proto.mulSelf = vec2Proto.mulSelf, proto.mul = function(t, e) {
		return (e = e || new Vector2).x = this.x * t, e.y = this.y * t, e
	}, proto.scaleSelf = vec2Proto.scaleSelf, proto.scale = function(t, e) {
		return (e = e || new Vector2).x = this.x * t.x, e.y = this.y * t.y, e
	}, proto.divSelf = vec2Proto.divSelf, proto.div = function(t, e) {
		return (e = e || new Vector2).x = this.x / t, e.y = this.y / t, e
	}, proto.negSelf = vec2Proto.negSelf, proto.neg = function(t) {
		return (t = t || new Vector2).x = -this.x, t.y = -this.y, t
	}, proto.dot = vec2Proto.dot, proto.cross = vec2Proto.cross, proto.mag = vec2Proto.mag, proto.magSqr = vec2Proto.magSqr, proto.normalizeSelf = vec2Proto.normalizeSelf, proto.normalize = function(t) {
		return (t = t || new Vector2).x = this.x, t.y = this.y, t.normalizeSelf(), t
	}, proto.angle = vec2Proto.angle, proto.signAngle = vec2Proto.signAngle, proto.rotate = function(t, e) {
		return (e = e || new Vector2).x = this.x, e.y = this.y, e.rotateSelf(t)
	}, proto.rotateSelf = vec2Proto.rotateSelf, proto.project = vec2Proto.project;
	let ID_COUNTER = 0;
	class HashElement {
		constructor() {
			this.actions = [], this.target = null, this.actionIndex = 0, this.currentAction = null, this.paused = !1, this.lock = !1
		}
	}
	class ActionManager {
		constructor() {
			this._hashTargets = Object.create(null), this._arrayTargets = [], this._elementPool = []
		}
		_searchElementByTarget(t, e) {
			for (var a = 0; a < t.length; a++)
				if (e === t[a].target) return t[a];
			return null
		}
		_getElement(t, e) {
			var a = this._elementPool.pop();
			return a || (a = new HashElement), a.target = t, a.paused = !!e, a
		}
		_putElement(t) {
			t.actions.length = 0, t.actionIndex = 0, t.currentAction = null, t.paused = !1, t.target = null, t.lock = !1, this._elementPool.push(t)
		}
		addAction(t, e, a) {
			if (t && e) {
				var i = e.$_GID || (e.$_GID = Laya.Utils.getGID()),
					s = this._hashTargets[i];
				s ? s.actions || (s.actions = []) : (s = this._getElement(e, a), this._hashTargets[i] = s, this._arrayTargets.push(s)), s.actions.push(t), t.startWithTarget(e)
			} else errorID(1e3)
		}
		removeAllActions() {
			for (var t = this._arrayTargets, e = 0; e < t.length; e++) {
				var a = t[e];
				a && this._putElement(a)
			}
			this._arrayTargets.length = 0, this._hashTargets = Object.create(null)
		}
		removeAllActionsFromTarget(t, e) {
			if (null != t) {
				var a = this._hashTargets[t.$_GID];
				a && (a.actions.length = 0, this._deleteHashElement(a))
			}
		}
		removeAction(t) {
			if (null != t) {
				var e = t.getOriginalTarget(),
					a = this._hashTargets[e.$_GID];
				if (a)
					for (var i = 0; i < a.actions.length; i++)
						if (a.actions[i] === t) {
							a.actions.splice(i, 1), a.actionIndex >= i && a.actionIndex--;
							break
						}
			}
		}
		getNumberOfRunningActionsInTarget(t) {
			var e = this._hashTargets[t.$_GID];
			return e && e.actions ? e.actions.length : 0
		}
		pauseTarget(t) {
			var e = this._hashTargets[t.$_GID];
			e && (e.paused = !0)
		}
		resumeTarget(t) {
			var e = this._hashTargets[t.$_GID];
			e && (e.paused = !1)
		}
		pauseAllRunningActions() {
			for (var t = [], e = this._arrayTargets, a = 0; a < e.length; a++) {
				var i = e[a];
				i && !i.paused && (i.paused = !0, t.push(i.target))
			}
			return t
		}
		resumeTargets(t) {
			if (t)
				for (var e = 0; e < t.length; e++) t[e] && this.resumeTarget(t[e])
		}
		pauseTargets(t) {
			if (t)
				for (var e = 0; e < t.length; e++) t[e] && this.pauseTarget(t[e])
		}
		purgeSharedManager() {
			Laya.stage.timer.clearAll(this)
		}
		_removeActionAtIndex(t, e) {
			e.actions[t];
			e.actions.splice(t, 1), e.actionIndex >= t && e.actionIndex--, 0 === e.actions.length && this._deleteHashElement(e)
		}
		_deleteHashElement(t) {
			var e = !1;
			if (t && !t.lock && this._hashTargets[t.target.$_GID]) {
				delete this._hashTargets[t.target.$_GID];
				for (var a = this._arrayTargets, i = 0, s = a.length; i < s; i++)
					if (a[i] === t) {
						a.splice(i, 1);
						break
					} this._putElement(t), e = !0
			}
			return e
		}
		update(t) {
			for (var e, a = this._arrayTargets, i = 0; i < a.length; i++) {
				if (this._currentTarget = a[i], !(e = this._currentTarget).paused && e.actions) {
					for (e.lock = !0, e.actionIndex = 0; e.actionIndex < e.actions.length; e.actionIndex++)
						if (e.currentAction = e.actions[e.actionIndex], e.currentAction) {
							if (e.currentAction.step(t * (e.currentAction._speedMethod ? e.currentAction._speed : 1)), e.currentAction && e.currentAction.isDone()) {
								e.currentAction.stop();
								var s = e.currentAction;
								e.currentAction = null, this.removeAction(s)
							}
							e.currentAction = null
						} e.lock = !1
				}
				0 === e.actions.length && this._deleteHashElement(e) && i--
			}
		}
	}
	class TweenSystem {
		constructor() {
			this.actionMgr = new ActionManager
		}
		static create() {
			if (!this.instance) {
				let t = new TweenSystem;
				this.instance = t;
				let e = Laya.timer;
				e.frameLoop(1, this, function() {
					t.postUpdate(e.delta / 1e3)
				})
			}
		}
		get ActionManager() {
			return this.actionMgr
		}
		postUpdate(t) {
			try {
				this.actionMgr.update(t)
			} catch (t) {
				Logger.catchError("TweenSystem.postUpdate", t)
			}
		}
	}
	TweenSystem.ID = "tween";
	class _mgrBase {
		static onload() {
			Logger.warn("please override this function")
		}
		static start() {}
		static registerMsg(t) {
			this.m_MsgHandler || (this.m_MsgHandler = new MsgHandler), this.m_MsgHandler.registerListeners(t), this.m_MsgHandler.startProcMsg()
		}
		static startProcMsg() {
			this.m_MsgHandler && this.m_MsgHandler.startProcMsg()
		}
		static stopProcMsg() {
			this.m_MsgHandler && this.m_MsgHandler.stopProcMsg()
		}
	}
	_mgrBase.m_MsgHandler = null;
	class PanelQueue extends Laya.Script {
		constructor() {
			super(...arguments), this.m_Dirty = !1, this.m_panelQueue = []
		}
		onAwake() {
			this.m_MsgHandler = new MsgHandler, this.m_MsgHandler.registerListeners({
				[BASE_MSG.UI_PANEL_CLOSED]: this.onMsgPanelClosed.bind(this)
			}), this.m_MsgHandler.startProcMsg()
		}
		onDestroy() {
			this.m_MsgHandler.stopProcMsg()
		}
		onUpdate() {
			this.m_Dirty && (this.m_Dirty = !1, this.openPanelFromQueue())
		}
		onMsgPanelClosed(t) {
			this.m_Dirty = !0
		}
		openPanelWithPriority(t, e, a = 0, i = !0) {
			i && (this.m_Dirty = !0);
			let s = this.m_panelQueue;
			if (s.length > 0)
				for (let i = 0; i < s.length; i++)
					if (s[i].priority > a) return void s.splice(i, 0, {
						panel: t,
						context: e,
						priority: a
					});
			s.push({
				panel: t,
				context: e,
				priority: a
			})
		}
		openPanelFromQueue() {
			if (this.m_panelQueue.length > 0) {
				let t = this.m_panelQueue.pop();
				mgrPanel.openPanel(t.panel, t.context, this.m_panelQueue.length > 0)
			}
		}
	}
	class mgrRes {
		static tryLoadRes(t) {
			return Laya.loader.getRes(t)
		}
		static loadRes(t, e, a) {
			a = a || _G.EMPTY_FUN;
			let i, s = Laya.loader.getRes(t);
			null == s ? this.loadingCallback[t] ? this.loadingCallback[t].calls.push(a) : (this.loadingCallback[t] = {
				calls: [a],
				loadCount: 1
			}, i = (a => {
				let s = this.loadingCallback[t];
				if (s)
					if (a) {
						let e = s.calls;
						delete this.loadingCallback[t];
						for (let t = 0; t < e.length; t++) e[t](a)
					} else if (Logger.error(`mgrRes.loadRes load [${t}] err.`), s.loadCount <= this.retryCount) s.loadCount++, this._loadRes(t, e, i);
				else {
					let e = s.calls;
					delete this.loadingCallback[t];
					for (let t = 0; t < e.length; t++) e[t](null)
				} else Logger.warn("mgrRes loadCallback: No Loaded Callback Exists! ", t)
			}), this._loadRes(t, e, i)) : a(s)
		}
		static _loadRes(t, e, a) {
			let i = Laya.Handler.create(this, function(t) {
				try {
					a(t)
				} catch (t) {
					Logger.catchError("mgrRes._loadRes complete", t)
				}
			});
			switch (e) {
				case RES_TYPE.PREFAB2D:
				case RES_TYPE.IMAGE:
				case RES_TYPE.TEXT:
				case RES_TYPE.JSON:
				case RES_TYPE.SOUND:
				case RES_TYPE.ATLAS:
				case RES_TYPE.BUFFER:
					return void Laya.loader.load(t, i, null, e);
				case RES_TYPE.PREFAB3D:
				case RES_TYPE.MATERIAL:
				case RES_TYPE.TEXTURE2D:
				case RES_TYPE.MESH:
				case RES_TYPE.ANIMATIONCLIP:
					return void Laya.loader.create(t, i, null, e);
				default:
					Logger.error("未知资源类型:", e)
			}
		}
		static promiseLoadAsset(t, e) {
			return new Promise((a, i) => {
				this.loadRes(t, e, function(t) {
					t ? a(t) : i(null)
				})
			})
		}
		static loadImageFromWeb(t, e) {
			t ? this.webResCache[t] ? e(this.webResCache[t]) : Logger.error("本方法暂未实现.") : e(null)
		}
		static loadTexture2D(t, e) {
			this.loadRes(t, RES_TYPE.TEXTURE2D, function(t) {
				e && e(t)
			})
		}
		static loadBmfontWithText(t, e) {
			this.loadRes(t, RES_TYPE.TEXT, a => {
				let i = a.indexOf('file="');
				if (i > 0) {
					let s = a.indexOf(".png", i + 1),
						n = a.slice(i + 6, s + 4),
						o = Tools.getPath(t);
					this.loadRes(o + n, RES_TYPE.IMAGE, i => {
						if (!i) return;
						let s = new Laya.BitmapFont;
						s._texture = i;
						let n = function(t, e = 0) {
								if (t += "=", (e = a.indexOf(t, e)) >= 0) {
									let i = a.indexOf(" ", e);
									return i >= 0 ? a.slice(e + t.length, i) : (console.warn("parse end error:", a, e, t), null)
								}
								return console.warn("parse start error:", a, e, t), null
							},
							o = function(t, e = 0) {
								let a = n(t, e);
								if (a) return parseInt(a)
							};
						s.fontSize = o("size");
						var r = n("padding");
						s._padding = Tools.splitToNumber(r, ",");
						let l = a.indexOf("char "),
							c = 0;
						for (; l > 0;) {
							c++;
							var h = o("id", l),
								d = o("xoffset", l),
								_ = o("yoffset", l),
								g = o("xadvance", l),
								u = o("x", l),
								m = o("y", l),
								p = o("width", l),
								S = o("height", l),
								b = Laya.Texture.create(i, u, m, p, S, d, _);
							s._maxWidth = Math.max(s._maxWidth, g + s.letterSpacing), s._fontCharDic[h] = b, s._fontWidthMap[h] = g, l = a.indexOf("char ", l + "char ".length)
						}
						Logger.debug("load fnt char:", t, c), Laya.Text.registerBitmapFont(t, s), e && e()
					})
				}
			})
		}
	}
	mgrRes.retryCount = 0, mgrRes.loadingCallback = {}, mgrRes.webResCache = {};
	const SOUND_TYPE_MUSIC = 1,
		SOUND_TYPE_EFFECT = 2;
	let sound_url_map = Object.create(null),
		WTF = "wtf";
	class mgrSound extends _mgrBase {
		static get musicEnabled() {
			return 0 != this.musicVolume
		}
		static set musicEnabled(t) {
			this.musicVolume = t ? 1 : 0, this.saveRecord(), t ? this.resumeMusic() : this.pauseMusic()
		}
		static get soundEnabled() {
			return 0 != this.effectVolume
		}
		static set soundEnabled(t) {
			this.effectVolume = t ? 1 : 0, this.saveRecord(), t ? this.resumeEffect() : this.pauseEffect()
		}
		static onload() {
			this.loadRecord(), Laya.SoundManager.autoStopMusic = !0, this.loadRecord()
		}
		static loadRecord() {
			let t, e = FileRecord.getData("sound") || {};
			this.musicVolume = null != e.musicVolume ? e.musicVolume : 1, this.effectVolume = null != e.effectVolume ? e.effectVolume : 1, window && window.wx && window.wx.onShow && window.wx.onHide && (t = window.wx), window && window.swan && window.swan.onShow && window.swan.onHide && (t = window.swan), t && (console.log("=== 注册窗口消息, mgrsound ===="), t.onShow(() => {
				Laya.SoundManager.musicMuted = !0, Timer.callLater(.1, () => {
					Laya.SoundManager.musicMuted = !1
				})
			}), t.onHide(() => {})), this.setMusicVomue(this.musicVolume, !0), this.setEffectVolume(this.effectVolume, !0)
		}
		static saveRecord() {
			let t = {
				musicVolume: this.musicVolume,
				effectVolume: this.effectVolume
			};
			FileRecord.setData("sound", t)
		}
		static playMusic(t, e = !1) {
			Logger.debug("play music:", t), this.play(t, !0, e)
		}
		static playSound(t, e = !1) {
			this.play(t, !1, e)
		}
		static getPlayingMusicSoundId() {
			return this.playingMusicSoundId
		}
		static playTalk(t) {
			this._lastTalkId && this.stopSound(this._lastTalkId), this._lastTalkId = t, this.play(t, !1, !1)
		}
		static playSoundIfTimeout(t, e, a) {
			let i = this._lastSoundPlayTime[t];
			i && Timer.time - i < a || (this._lastSoundPlayTime[t] = Timer.time, this.playSound(t))
		}
		static play(t, e, a = !1) {
			if (e) {
				if (t == this.playingMusicSoundId) return;
				this.playingMusicSoundId = t;
				var i = `res/audio/${t}.mp3`;
				let e = () => {
					Logger.debug(`开始播放音乐:${i} ${this.musicVolume}`), Laya.SoundManager.playMusic(i, 0), !Laya.SoundManager.musicMuted && (this.bPlayedMusic = !0)
				};
				window.document && window.document.__custom_web_platform_tag__ ? mgrRes.loadRes(i, Laya.Loader.SOUND, t => {
					t && e()
				}) : e()
			} else {
				if (this.bLoadingEffect) return;
				i = this.getUrl(t);
				let e = () => {
					this.bLoadingEffect = !1, Laya.SoundManager.playSound(i, a ? 0 : 1)
				};
				window.document && window.document.__custom_web_platform_tag__ ? (this.bLoadingEffect = !0, mgrRes.loadRes(i, Laya.Loader.SOUND, t => {
					e()
				})) : e()
			}
		}
		static getUrl(t) {
			let e = sound_url_map[t];
			return e || (e = window.conch ? `res/audio/${t}.ogg` : `res/audio/${t}.mp3`, sound_url_map[t] = e), e
		}
		static stopAll() {
			this.playingMusicSoundId = null, Laya.SoundManager.stopAll()
		}
		static stopBgm() {
			Laya.SoundManager.stopMusic()
		}
		static stopSound(t) {
			Laya.SoundManager.stopSound(this.getUrl(t))
		}
		static stopSoundAll() {
			Laya.SoundManager.stopAllSound()
		}
		static pauseSound(t = WTF) {
			this.pauseMusic(t), this.pauseEffect(t)
		}
		static resumeSound(t = WTF) {
			this.resumeMusic(t), this.resumeEffect(t)
		}
		static pauseEffect(t = WTF) {
			console.info(`暂停音效:${t}`);
			let e = this.pauseEffectRouters.length > 0; - 1 == this.pauseEffectRouters.indexOf(t) && this.pauseEffectRouters.push(t), e || this.setEffectVolume(0)
		}
		static resumeEffect(t = WTF) {
			console.info(`恢复音效:${t}`);
			let e = this.pauseEffectRouters.indexOf(t);
			e >= 0 && this.pauseEffectRouters.splice(e, 1), this.pauseEffectRouters.length > 0 || this.setEffectVolume(1)
		}
		static pauseMusic(t = WTF) {
			console.info(`暂停背景音:${t} count:${this.pauseMusicRouters.length}`);
			let e = this.pauseMusicRouters.length > 0; - 1 == this.pauseMusicRouters.indexOf(t) && this.pauseMusicRouters.push(t), e || this.setMusicVomue(0)
		}
		static resumeMusic(t = WTF) {
			console.info(`恢复背景音:${t} count:${this.pauseMusicRouters.length}`);
			let e = this.pauseMusicRouters.indexOf(t);
			e >= 0 && this.pauseMusicRouters.splice(e, 1), this.pauseMusicRouters.length > 0 || this.setMusicVomue(1)
		}
		static getMusicVolmue() {
			return this.musicVolume
		}
		static setMusicVomue(t, e) {
			if (this.musicVolume = t, 0 == t ? Laya.SoundManager.setMusicVolume(1e-4) : Laya.SoundManager.setMusicVolume(t), window.swan || window.__b_jkw_platform__ || window.wx)
				if (0 == t) Laya.SoundManager.musicMuted = !0;
				else if (Laya.SoundManager.musicMuted = !1, !this.bPlayedMusic) {
				let t = this.playingMusicSoundId;
				this.playingMusicSoundId = null, this.playMusic(t)
			}
			this.saveRecord()
		}
		static getEffectVolume() {
			return this.effectVolume
		}
		static setEffectVolume(t, e) {
			this.effectVolume = t, 0 == t ? (Laya.SoundManager.setSoundVolume(.001), Laya.SoundManager.soundMuted = !0) : (Laya.SoundManager.setSoundVolume(t), Laya.SoundManager.soundMuted = !1), this.saveRecord()
		}
	}
	mgrSound.playingMusicSoundId = null, mgrSound.musicVolume = 1, mgrSound.effectVolume = 1, mgrSound.effectCd = .1, mgrSound.effectPlayStartTime = 0, mgrSound.pauseMusicRouters = [], mgrSound.pauseEffectRouters = [], mgrSound.bPlayedMusic = !1, mgrSound._lastSoundPlayTime = Object.create(null);
	let emtpy_fun = function() {};
	class UpdateCom extends Laya.Script {
		constructor() {
			super(...arguments), this.update = emtpy_fun, this.lateUpdate = emtpy_fun
		}
		onUpdate() {
			this.update()
		}
		onLateUpdate() {
			this.lateUpdate()
		}
	}
	const SYNC_TEST = !1;
	class AsyncObject {
		constructor(t) {
			this.delayCalls = [], this.destroyed = !1, this.context = null, this.context = t, this._isDisposed = !1, this._isLoaded = !1, this._isLoading = !1
		}
		get isDisposed() {
			return this._isDisposed
		}
		get isLoaded() {
			return this._isLoaded
		}
		get isLoading() {
			return this._isLoading
		}
		setContext(t) {
			this.context = t
		}
		create(t) {
			if (this._isLoaded) return void(t && t(!1));
			if (this._isLoading) return void(t && t(!1));
			if (!this.resourceName) return Logger.error("AsyncObject.create: can't find resourceName."), void(t && t(!1));
			this._isLoading = !0;
			let e = mgrRes.tryLoadRes(this.resourceName);
			e ? this.onResLoaded(e, t) : (Logger.debug("异步加载资源:", this.resourceName), mgrRes.loadRes(this.resourceName, this.resourceType, e => {
				SYNC_TEST ? Timer.callLater(30 * Math.random() + 20, () => {
					this.onResLoaded(e, t)
				}) : this.onResLoaded(e, t)
			}))
		}
		onResLoaded(t, e) {
			this._isLoading = !1, t ? (e && e(!0), this._isDisposed || (this._isLoaded = !0, this.onResourceLoaded(t), this._isDisposed || this.processDelayCalls())) : (e && e(!1), this.onResourceLoadedFail())
		}
		tryCreate() {
			this._isDisposed || this._isLoaded || this._isLoading || this.create()
		}
		onResourceLoadedFail() {
			this._isLoading = !1, this.clearDelayCalls()
		}
		pushDelayCall(t, e) {
			this.delayCalls.push({
				method: t,
				params: e
			})
		}
		callIfLoaded(t) {
			this.isDisposed || (this.isLoaded ? this.callDelayFunc(t) : this.pushDelayCall(this.callDelayFunc, [t]))
		}
		callDelayFunc(t) {
			t && t()
		}
		get callable() {
			return this._isLoaded && !this._isDisposed
		}
		logNotFinishError() {
			Logger.error("对象未加载完成")
		}
		safeCall(t, ...e) {
			this._isDisposed || (this._isLoaded ? t.apply(this, e) : this.pushDelayCall(t, e))
		}
		processDelayCalls() {
			let t = this.delayCalls,
				e = t.length;
			if (e > 0) {
				this.delayCalls = [];
				for (let a = 0; a < e; a++) {
					const e = t[a];
					e.method.apply(this, e.params)
				}
			}
		}
		clearDelayCalls() {
			this.delayCalls.length > 0 && (this.delayCalls.length = 0)
		}
		dispose() {
			this._isDisposed ? Logger.warn("AsyncObject has already disposed. resourceName:", this.resourceName) : (this.destroyed = !0, this._isDisposed = !0, this._isLoaded = !1, this.delayCalls = null)
		}
	}
	class Action {
		constructor() {
			this.originalTarget = null, this.target = null, this.tag = Action.TAG_INVALID
		}
		clone() {
			var t = new Action;
			return t.originalTarget = null, t.target = null, t.tag = this.tag, t
		}
		isDone() {
			return !0
		}
		startWithTarget(t) {
			this.originalTarget = t, this.target = t
		}
		stop() {
			this.target = null
		}
		step(t) {
			logID(1006)
		}
		update(t) {
			logID(1007)
		}
		getTarget() {
			return this.target
		}
		setTarget(t) {
			this.target = t
		}
		getOriginalTarget() {
			return this.originalTarget
		}
		setOriginalTarget(t) {
			this.originalTarget = t
		}
		getTag() {
			return this.tag
		}
		setTag(t) {
			this.tag = t
		}
		reverse() {
			return logID(1008), null
		}
		retain() {}
		release() {}
	}
	Action.TAG_INVALID = -1;
	class FiniteTimeAction extends Action {
		constructor() {
			super(...arguments), this._duration = 0, this._timesForRepeat = 1
		}
		getDuration() {
			return this._duration * (this._timesForRepeat || 1)
		}
		setDuration(t) {
			this._duration = t
		}
		clone() {
			return new FiniteTimeAction
		}
	}
	class Speed extends Action {
		constructor(t, e = 1) {
			super(), this._speed = 0, this._innerAction = null, t && this.initWithAction(t, e)
		}
		getSpeed() {
			return this._speed
		}
		setSpeed(t) {
			this._speed = t
		}
		initWithAction(t, e) {
			return t ? (this._innerAction = t, this._speed = e, !0) : (errorID(1021), !1)
		}
		clone() {
			var t = new Speed;
			return t.initWithAction(this._innerAction.clone(), this._speed), t
		}
		startWithTarget(t) {
			Action.prototype.startWithTarget.call(this, t), this._innerAction.startWithTarget(t)
		}
		stop() {
			this._innerAction.stop(), Action.prototype.stop.call(this)
		}
		step(t) {
			this._innerAction.step(t * this._speed)
		}
		isDone() {
			return this._innerAction.isDone()
		}
		reverse() {
			return new Speed(this._innerAction.reverse(), this._speed)
		}
		setInnerAction(t) {
			this._innerAction !== t && (this._innerAction = t)
		}
		getInnerAction() {
			return this._innerAction
		}
	}
	class ActionInstant extends FiniteTimeAction {
		isDone() {
			return !0
		}
		step(t) {
			this.update(1)
		}
		update(t) {}
		reverse() {
			return this.clone()
		}
		clone() {
			return new ActionInstant
		}
	}
	class Show extends ActionInstant {
		update(t) {
			this.target.setVisible(!0)
		}
		reverse() {
			return new Hide
		}
		clone() {
			return new Show
		}
	}

	function show() {
		return new Show
	}
	class Hide extends ActionInstant {
		update(t) {
			this.target.setVisible(!1)
		}
		reverse() {
			return new Show
		}
		clone() {
			return new Hide
		}
	}

	function hide() {
		return new Hide
	}
	class RemoveSelf extends ActionInstant {
		constructor(t) {
			super(), this._isNeedCleanUp = !0, void 0 !== t && this.init(t)
		}
		update(t) {
			this.target.removeSelf(), this._isNeedCleanUp && this.target.destroy()
		}
		init(t) {
			return this._isNeedCleanUp = t, !0
		}
		reverse() {
			return new RemoveSelf(this._isNeedCleanUp)
		}
		clone() {
			return new RemoveSelf(this._isNeedCleanUp)
		}
	}

	function removeSelf(t) {
		return new RemoveSelf(t)
	}
	class CallFunc extends ActionInstant {
		constructor(t, e, a) {
			super(), this._selectorTarget = null, this._function = null, this._data = null, this.initWithFunction(t, e, a)
		}
		initWithFunction(t, e, a) {
			return t && (this._function = t), e && (this._selectorTarget = e), void 0 !== a && (this._data = a), !0
		}
		execute() {
			this._function && this._function.call(this._selectorTarget, this.target, this._data)
		}
		update(t) {
			this.execute()
		}
		getTargetCallback() {
			return this._selectorTarget
		}
		setTargetCallback(t) {
			t !== this._selectorTarget && (this._selectorTarget && (this._selectorTarget = null), this._selectorTarget = t)
		}
		clone() {
			var t = new CallFunc;
			return t.initWithFunction(this._function, this._selectorTarget, this._data), t
		}
	}

	function callFunc(t, e, a) {
		return new CallFunc(t, e, a)
	}
	class ActionInterval extends FiniteTimeAction {
		constructor(t) {
			super(), this.MAX_VALUE = 2, this._elapsed = 0, this._firstTick = !1, this._easeList = [], this._speed = 1, this._repeatForever = !1, this._repeatMethod = !1, this._speedMethod = !1, void 0 === t || isNaN(t) || this.initWithDuration(t)
		}
		getElapsed() {
			return this._elapsed
		}
		initWithDuration(t) {
			return this._duration = 0 === t ? 1.192092896e-7 : t, this._elapsed = 0, this._firstTick = !0, !0
		}
		isDone() {
			return this._elapsed >= this._duration
		}
		_cloneDecoration(t) {
			t._repeatForever = this._repeatForever, t._speed = this._speed, t._timesForRepeat = this._timesForRepeat, t._easeList = this._easeList, t._speedMethod = this._speedMethod, t._repeatMethod = this._repeatMethod
		}
		_reverseEaseList(t) {
			if (this._easeList) {
				t._easeList = [];
				for (var e = 0; e < this._easeList.length; e++) t._easeList.push(this._easeList[e])
			}
		}
		clone() {
			var t = new ActionInterval(this._duration);
			return this._cloneDecoration(t), t
		}
		easing(...t) {
			this._easeList ? this._easeList.length = 0 : this._easeList = [];
			for (var e = 0; e < t.length; e++) this._easeList.push(t[e]);
			return this
		}
		_computeEaseTime(t) {
			var e = this._easeList;
			if (!e || 0 === e.length) return t;
			for (var a = 0, i = e.length; a < i; a++) t = e[a](t);
			return t
		}
		step(t) {
			this._firstTick ? (this._firstTick = !1, this._elapsed = 0) : this._elapsed += t;
			var e = this._elapsed / (this._duration > 1.192092896e-7 ? this._duration : 1.192092896e-7);
			e = 1 > e ? e : 1, this.update(e > 0 ? e : 0), this._repeatMethod && this._timesForRepeat > 1 && this.isDone() && (this._repeatForever || this._timesForRepeat--, this.startWithTarget(this.target), this.step(this._elapsed - this._duration))
		}
		startWithTarget(t) {
			Action.prototype.startWithTarget.call(this, t), this._elapsed = 0, this._firstTick = !0
		}
		reverse() {
			return logID(1010), this
		}
		setAmplitudeRate(t) {
			logID(1011)
		}
		getAmplitudeRate() {
			return logID(1012), 0
		}
		speed(t) {
			return t <= 0 ? (logID(1013), this) : (this._speedMethod = !0, this._speed *= t, this)
		}
		getSpeed() {
			return this._speed
		}
		setSpeed(t) {
			return this._speed = t, this
		}
		repeat(t) {
			return t = Math.round(t), isNaN(t) || t < 1 ? (logID(1014), this) : (this._repeatMethod = !0, this._timesForRepeat *= t, this)
		}
		repeatForever() {
			return this._repeatMethod = !0, this._timesForRepeat = this.MAX_VALUE, this._repeatForever = !0, this
		}
	}

	function actionInterval(t) {
		return new ActionInterval(t)
	}
	class Sequence extends ActionInterval {
		constructor(t) {
			super(), this._actions = [], this._split = 0, this._last = 0, this._reversed = !1;
			var e = t instanceof Array ? t : arguments;
			if (1 !== e.length) {
				var a = e.length - 1;
				if (a >= 0 && null == e[a] && logID(1015), a >= 0) {
					for (var i, s = e[0], n = 1; n < a; n++) e[n] && (i = s, s = Sequence._actionOneTwo(i, e[n]));
					this.initWithTwoActions(s, e[a])
				}
			} else errorID(1019)
		}
		initWithTwoActions(t, e) {
			if (!t || !e) return errorID(1025), !1;
			var a = t._duration,
				i = e._duration,
				s = (a *= t._repeatMethod ? t._timesForRepeat : 1) + (i *= e._repeatMethod ? e._timesForRepeat : 1);
			return this.initWithDuration(s), this._actions[0] = t, this._actions[1] = e, !0
		}
		clone() {
			var t = new Sequence;
			return this._cloneDecoration(t), t.initWithTwoActions(this._actions[0].clone(), this._actions[1].clone()), t
		}
		startWithTarget(t) {
			ActionInterval.prototype.startWithTarget.call(this, t), this._split = this._actions[0]._duration / this._duration, this._split *= this._actions[0]._repeatMethod ? this._actions[0]._timesForRepeat : 1, this._last = -1
		}
		stop() {
			-1 !== this._last && this._actions[this._last].stop(), Action.prototype.stop.call(this)
		}
		update(t) {
			var e, a, i = 0,
				s = this._split,
				n = this._actions,
				o = this._last;
			(t = this._computeEaseTime(t)) < s ? (e = 0 !== s ? t / s : 1, 0 === i && 1 === o && this._reversed && (n[1].update(0), n[1].stop())) : (i = 1, e = 1 === s ? 1 : (t - s) / (1 - s), -1 === o && (n[0].startWithTarget(this.target), n[0].update(1), n[0].stop()), 0 === o && (n[0].update(1), n[0].stop())), a = n[i], o === i && a.isDone() || (o !== i && a.startWithTarget(this.target), e *= a._timesForRepeat, a.update(e > 1 ? e % 1 : e), this._last = i)
		}
		reverse() {
			var t = Sequence._actionOneTwo(this._actions[1].reverse(), this._actions[0].reverse());
			return this._cloneDecoration(t), this._reverseEaseList(t), t._reversed = !0, t
		}
	}

	function sequence(t) {
		var e = t instanceof Array ? t : arguments;
		if (1 === e.length) return errorID(1019), null;
		var a = e.length - 1;
		a >= 0 && null == e[a] && logID(1015);
		var i = null;
		if (a >= 0) {
			i = e[0];
			for (var s = 1; s <= a; s++) e[s] && (i = Sequence._actionOneTwo(i, e[s]))
		}
		return i
	}
	Sequence._actionOneTwo = function(t, e) {
		var a = new Sequence;
		return a.initWithTwoActions(t, e), a
	};
	class Repeat extends ActionInterval {
		constructor(t, e) {
			super(), this._times = 0, this._total = 0, this._nextDt = 0, this._actionInstant = !1, this._innerAction = null, void 0 !== e && this.initWithAction(t, e)
		}
		initWithAction(t, e) {
			var a = t._duration * e;
			return !!this.initWithDuration(a) && (this._times = e, this._innerAction = t, t instanceof ActionInstant && (this._actionInstant = !0, this._times -= 1), this._total = 0, !0)
		}
		clone() {
			var t = new Repeat;
			return this._cloneDecoration(t), t.initWithAction(this._innerAction.clone(), this._times), t
		}
		startWithTarget(t) {
			this._total = 0, this._nextDt = this._innerAction._duration / this._duration, ActionInterval.prototype.startWithTarget.call(this, t), this._innerAction.startWithTarget(t)
		}
		stop() {
			this._innerAction.stop(), Action.prototype.stop.call(this)
		}
		update(t) {
			t = this._computeEaseTime(t);
			var e = this._innerAction,
				a = this._duration,
				i = this._times,
				s = this._nextDt;
			if (t >= s) {
				for (; t > s && this._total < i;) e.update(1), this._total++, e.stop(), e.startWithTarget(this.target), s += e._duration / a, this._nextDt = s > 1 ? 1 : s;
				t >= 1 && this._total < i && (e.update(1), this._total++), this._actionInstant || (this._total === i ? e.stop() : e.update(t - (s - e._duration / a)))
			} else e.update(t * i % 1)
		}
		isDone() {
			return this._total === this._times
		}
		reverse() {
			var t = new Repeat(this._innerAction.reverse(), this._times);
			return this._cloneDecoration(t), this._reverseEaseList(t), t
		}
		setInnerAction(t) {
			this._innerAction !== t && (this._innerAction = t)
		}
		getInnerAction() {
			return this._innerAction
		}
	}

	function repeat(t, e) {
		return new Repeat(t, e)
	}
	class RepeatForever extends ActionInterval {
		constructor(t) {
			super(), this._innerAction = null, t && this.initWithAction(t)
		}
		initWithAction(t) {
			return t ? (this._innerAction = t, !0) : (errorID(1026), !1)
		}
		clone() {
			var t = new RepeatForever;
			return this._cloneDecoration(t), t.initWithAction(this._innerAction.clone()), t
		}
		startWithTarget(t) {
			ActionInterval.prototype.startWithTarget.call(this, t), this._innerAction.startWithTarget(t)
		}
		step(t) {
			var e = this._innerAction;
			e.step(t), e.isDone() && (e.startWithTarget(this.target), e.step(e.getElapsed() - e._duration))
		}
		isDone() {
			return !1
		}
		reverse() {
			var t = new RepeatForever(this._innerAction.reverse());
			return this._cloneDecoration(t), this._reverseEaseList(t), t
		}
		setInnerAction(t) {
			this._innerAction !== t && (this._innerAction = t)
		}
		getInnerAction() {
			return this._innerAction
		}
	}

	function repeatForever(t) {
		return new RepeatForever(t)
	}
	class Spawn extends ActionInterval {
		constructor(t) {
			super(), this._one = null, this._two = null;
			var e = t instanceof Array ? t : arguments;
			if (1 !== e.length) {
				var a = e.length - 1;
				if (a >= 0 && null == e[a] && logID(1015), a >= 0) {
					for (var i, s = e[0], n = 1; n < a; n++) e[n] && (i = s, s = Spawn._actionOneTwo(i, e[n]));
					this.initWithTwoActions(s, e[a])
				}
			} else errorID(1020)
		}
		initWithTwoActions(t, e) {
			if (!t || !e) return errorID(1027), !1;
			var a = !1,
				i = t._duration,
				s = e._duration;
			return this.initWithDuration(Math.max(i, s)) && (this._one = t, this._two = e, i > s ? this._two = Sequence._actionOneTwo(e, delayTime(i - s)) : i < s && (this._one = Sequence._actionOneTwo(t, delayTime(s - i))), a = !0), a
		}
		clone() {
			var t = new Spawn;
			return this._cloneDecoration(t), t.initWithTwoActions(this._one.clone(), this._two.clone()), t
		}
		startWithTarget(t) {
			ActionInterval.prototype.startWithTarget.call(this, t), this._one.startWithTarget(t), this._two.startWithTarget(t)
		}
		stop() {
			this._one.stop(), this._two.stop(), Action.prototype.stop.call(this)
		}
		update(t) {
			t = this._computeEaseTime(t), this._one && this._one.update(t), this._two && this._two.update(t)
		}
		reverse() {
			var t = Spawn._actionOneTwo(this._one.reverse(), this._two.reverse());
			return this._cloneDecoration(t), this._reverseEaseList(t), t
		}
	}

	function spawn(t) {
		var e = t instanceof Array ? t : arguments;
		if (1 === e.length) return errorID(1020), null;
		e.length > 0 && null == e[e.length - 1] && logID(1015);
		for (var a = e[0], i = 1; i < e.length; i++) null != e[i] && (a = Spawn._actionOneTwo(a, e[i]));
		return a
	}
	Spawn._actionOneTwo = function(t, e) {
		var a = new Spawn;
		return a.initWithTwoActions(t, e), a
	};
	class DelayTime extends ActionInterval {
		update(t) {}
		reverse() {
			var t = new DelayTime(this._duration);
			return this._cloneDecoration(t), this._reverseEaseList(t), t
		}
		clone() {
			var t = new DelayTime;
			return this._cloneDecoration(t), t.initWithDuration(this._duration), t
		}
	}

	function delayTime(t) {
		return new DelayTime(t)
	}
	class ReverseTime extends ActionInterval {
		constructor(t) {
			super(), this._other = null, t && this.initWithAction(t)
		}
		initWithAction(t) {
			return t ? t === this._other ? (errorID(1029), !1) : !!ActionInterval.prototype.initWithDuration.call(this, t._duration) && (this._other = t, !0) : (errorID(1028), !1)
		}
		clone() {
			var t = new ReverseTime;
			return this._cloneDecoration(t), t.initWithAction(this._other.clone()), t
		}
		startWithTarget(t) {
			ActionInterval.prototype.startWithTarget.call(this, t), this._other.startWithTarget(t)
		}
		update(t) {
			t = this._computeEaseTime(t), this._other && this._other.update(1 - t)
		}
		reverse() {
			return this._other.clone()
		}
		stop() {
			this._other.stop(), Action.prototype.stop.call(this)
		}
	}

	function reverseTime(t) {
		return new ReverseTime(t)
	}
	var Easing;

	function TweenEasinAdapter(t) {
		let e = t.charAt(0);
		if (/[A-Z]/.test(e)) {
			const a = (t = t.replace(e, e.toLowerCase())).split("-");
			if (2 == a.length) {
				const e = a[0];
				if ("linear" == e) t = "linear";
				else {
					const i = a[1];
					switch (e) {
						case "quadratic":
							t = "quad" + i;
							break;
						case "quartic":
							t = "quart" + i;
							break;
						case "quintic":
							t = "quint" + i;
							break;
						case "sinusoidal":
							t = "sine" + i;
							break;
						case "exponential":
							t = "expo" + i;
							break;
						case "circular":
							t = "circ" + i;
							break;
						default:
							t = e + i
					}
				}
			}
		}
		return t
	}

	function TweenOptionChecker(t) {}! function(t) {
		function quadIn(t) {
			return t * t
		}

		function quadOut(t) {
			return t * (2 - t)
		}

		function cubicIn(t) {
			return t * t * t
		}

		function cubicOut(t) {
			return --t * t * t + 1
		}

		function quartIn(t) {
			return t * t * t * t
		}

		function quartOut(t) {
			return 1 - --t * t * t * t
		}

		function quintIn(t) {
			return t * t * t * t * t
		}

		function quintOut(t) {
			return --t * t * t * t * t + 1
		}

		function sineIn(t) {
			return 1 - Math.cos(t * Math.PI / 2)
		}

		function sineOut(t) {
			return Math.sin(t * Math.PI / 2)
		}

		function expoIn(t) {
			return 0 === t ? 0 : Math.pow(1024, t - 1)
		}

		function expoOut(t) {
			return 1 === t ? 1 : 1 - Math.pow(2, -10 * t)
		}

		function circIn(t) {
			return 1 - Math.sqrt(1 - t * t)
		}

		function circOut(t) {
			return Math.sqrt(1 - --t * t)
		}

		function elasticIn(t) {
			let e, a = .1;
			return 0 === t ? 0 : 1 === t ? 1 : (!a || a < 1 ? (a = 1, e = .1) : e = .4 * Math.asin(1 / a) / (2 * Math.PI), -a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4))
		}

		function elasticOut(t) {
			let e, a = .1;
			return 0 === t ? 0 : 1 === t ? 1 : (!a || a < 1 ? (a = 1, e = .1) : e = .4 * Math.asin(1 / a) / (2 * Math.PI), a * Math.pow(2, -10 * t) * Math.sin((t - e) * (2 * Math.PI) / .4) + 1)
		}

		function backIn(t) {
			const e = 1.70158;
			return t * t * ((e + 1) * t - e)
		}

		function backOut(t) {
			const e = 1.70158;
			return --t * t * ((e + 1) * t + e) + 1
		}

		function bounceIn(t) {
			return 1 - bounceOut(1 - t)
		}

		function bounceOut(t) {
			return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375
		}

		function _makeOutIn(t, e) {
			return a => a < .5 ? e(2 * a) / 2 : t(2 * a - 1) / 2 + .5
		}
		t.constant = function() {
			return 0
		}, t.linear = function(t) {
			return t
		}, t.quadIn = quadIn, t.quadOut = quadOut, t.quadInOut = function(t) {
			return (t *= 2) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1)
		}, t.cubicIn = cubicIn, t.cubicOut = cubicOut, t.cubicInOut = function(t) {
			return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2)
		}, t.quartIn = quartIn, t.quartOut = quartOut, t.quartInOut = function(t) {
			return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2)
		}, t.quintIn = quintIn, t.quintOut = quintOut, t.quintInOut = function(t) {
			return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2)
		}, t.sineIn = sineIn, t.sineOut = sineOut, t.sineInOut = function(t) {
			return .5 * (1 - Math.cos(Math.PI * t))
		}, t.expoIn = expoIn, t.expoOut = expoOut, t.expoInOut = function(t) {
			return 0 === t ? 0 : 1 === t ? 1 : (t *= 2) < 1 ? .5 * Math.pow(1024, t - 1) : .5 * (2 - Math.pow(2, -10 * (t - 1)))
		}, t.circIn = circIn, t.circOut = circOut, t.circInOut = function(t) {
			return (t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1)
		}, t.elasticIn = elasticIn, t.elasticOut = elasticOut, t.elasticInOut = function(t) {
			let e, a = .1;
			return 0 === t ? 0 : 1 === t ? 1 : (!a || a < 1 ? (a = 1, e = .1) : e = .4 * Math.asin(1 / a) / (2 * Math.PI), (t *= 2) < 1 ? a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4) * -.5 : a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4) * .5 + 1)
		}, t.backIn = backIn, t.backOut = backOut, t.backInOut = function(t) {
			const e = 2.5949095;
			return (t *= 2) < 1 ? t * t * ((e + 1) * t - e) * .5 : .5 * ((t -= 2) * t * ((e + 1) * t + e) + 2)
		}, t.bounceIn = bounceIn, t.bounceOut = bounceOut, t.bounceInOut = function(t) {
			return t < .5 ? .5 * bounceIn(2 * t) : .5 * bounceOut(2 * t - 1) + .5
		}, t.smooth = function(t) {
			return t <= 0 ? 0 : t >= 1 ? 1 : t * t * (3 - 2 * t)
		}, t.fade = function(t) {
			return t <= 0 ? 0 : t >= 1 ? 1 : t * t * t * (t * (6 * t - 15) + 10)
		}, t.quadOutIn = _makeOutIn(quadIn, quadOut), t.cubicOutIn = _makeOutIn(cubicIn, cubicOut), t.quartOutIn = _makeOutIn(quartIn, quartOut), t.quintOutIn = _makeOutIn(quintIn, quintOut), t.sineOutIn = _makeOutIn(sineIn, sineOut), t.expoOutIn = _makeOutIn(expoIn, expoOut), t.circOutIn = _makeOutIn(circIn, circOut), t.elasticOutIn = _makeOutIn(elasticIn, elasticOut), t.backOutIn = _makeOutIn(backIn, backOut), t.bounceOutIn = _makeOutIn(bounceIn, bounceOut)
	}(Easing || (Easing = {}));
	class TweenAction extends ActionInterval {
		constructor(t, e, a) {
			if (super(), null == a) a = TweenAction.EMPTY_OPTION;
			else if (TweenOptionChecker(a), a.easing && "string" == typeof a.easing && (a.easing = TweenEasinAdapter(a.easing)), a.progress || (a.progress = this.progress), a.easing && "string" == typeof a.easing) {
				let t = a.easing;
				a.easing = Easing[t], a.easing || warnID(1031, t)
			}
			this._opts = a, this._props = Object.create(null);
			for (let t in e) {
				let a, i, s = e[t];
				void 0 !== s.value && (s.easing || s.progress) && ("string" == typeof s.easing ? !(a = a[s.easing]) && warnID(1031, s.easing) : a = s.easing, i = s.progress, s = s.value);
				let n = Object.create(null);
				n.value = s, n.easing = a, n.progress = i, this._props[t] = n
			}
			this._originProps = e, this.initWithDuration(t)
		}
		clone() {
			var t = new TweenAction(this._duration, this._originProps, this._opts);
			return this._cloneDecoration(t), t
		}
		startWithTarget(t) {
			super.startWithTarget(t);
			const e = !!this._opts.relative,
				a = this._props;
			for (var i in a) {
				const n = t[i];
				if (void 0 === n) continue;
				const o = a[i],
					r = o.value;
				if ("number" == typeof n) o.start = n, o.current = n, o.end = e ? n + r : r;
				else if ("object" == typeof n)
					for (var s in null == o.start && (o.start = {}, o.current = {}, o.end = {}), r) o.start[s] = n[s], o.current[s] = n[s], o.end[s] = e ? n[s] + r[s] : r[s]
			}
			this._opts.onStart && this._opts.onStart(this.target)
		}
		update(t) {
			const e = this.target;
			if (!e || e.destroyed) return;
			const a = this._props,
				i = this._opts;
			let s = t;
			i.easing && (s = i.easing(t));
			let n = i.progress;
			for (const i in a) {
				let o = a[i],
					r = o.easing ? o.easing(t) : s,
					l = o.progress ? o.progress : n;
				const c = o.start,
					h = o.end;
				if ("number" == typeof c) o.current = l(c, h, o.current, r);
				else if ("object" == typeof c)
					for (const t in c) o.current[t] = l(c[t], h[t], o.current[t], r);
				e[i] = o.current
			}
			i.onUpdate && i.onUpdate(this.target, t), 1 == t && i.onComplete && i.onComplete(this.target)
		}
		progress(t, e, a, i) {
			return t + (e - t) * i
		}
	}
	TweenAction.EMPTY_OPTION = Object.create(null);
	class SetAction extends ActionInstant {
		constructor(t) {
			super(), this._props = {}, void 0 !== t && this.init(t)
		}
		init(t) {
			for (let e in t) this._props[e] = t[e];
			return !0
		}
		update() {
			let t = this._props,
				e = this.target;
			for (let a in t) e[a] = t[a]
		}
		clone() {
			var t = new SetAction;
			return t.init(this._props), t
		}
	}
	let _default_progress = function(t, e, a, i) {
			return t + (e - t) * i
		},
		DEFAULT_OPT1 = {
			easing: Easing.linear,
			progress: _default_progress
		},
		DEFAULT_OPT2 = {
			easing: Easing.linear,
			progress: _default_progress
		};
	class Tween {
		constructor(t) {
			this._actions = [], this._finalAction = null, this._target = null, this._target = void 0 === t ? null : t, this._target && this._target instanceof Laya.EventDispatcher && this._target.on("NODE_DESTROYED", this, this._destroy)
		}
		then(t) {
			return t instanceof Action ? this._actions.push(t) : this._actions.push(t._union()), this
		}
		target(t) {
			return this._target && this._target instanceof Laya.EventDispatcher && this._target.off("NODE_DESTROYED", this, this._destroy), this._target = t, this._target && this._target instanceof Laya.EventDispatcher && this._target.on("NODE_DESTROYED", this, this._destroy), this
		}
		start() {
			return this._target ? (this._finalAction && TweenSystem.instance.ActionManager.removeAction(this._finalAction), this._finalAction = this._union(), TweenSystem.instance.ActionManager.addAction(this._finalAction, this._target, !1), this) : (console.warn("Please set target to tween first"), this)
		}
		stop() {
			return this._finalAction && TweenSystem.instance.ActionManager.removeAction(this._finalAction), this
		}
		clone(t) {
			let e = this._union();
			return new Tween(t).then(e.clone())
		}
		union() {
			let t = this._union();
			return this._actions.length = 0, this._actions.push(t), this
		}
		to(t, e, a) {
			(a = a || DEFAULT_OPT1).relative = !1;
			const i = new TweenAction(t, e, a);
			return this._actions.push(i), this
		}
		by(t, e, a) {
			(a = a || DEFAULT_OPT2).relative = !0;
			const i = new TweenAction(t, e, a);
			return this._actions.push(i), this
		}
		set(t) {
			const e = new SetAction(t);
			return this._actions.push(e), this
		}
		delay(t) {
			const e = delayTime(t);
			return this._actions.push(e), this
		}
		call(t) {
			const e = callFunc(t);
			return this._actions.push(e), this
		}
		sequence(...t) {
			const e = Tween._wrappedSequence(...t);
			return this._actions.push(e), this
		}
		parallel(...t) {
			const e = Tween._wrappedParallel(...t);
			return this._actions.push(e), this
		}
		repeat(t, e) {
			if (t == 1 / 0) return this.repeatForever(e);
			const a = this._actions;
			let i;
			return i = e ? e._union() : a.pop(), a.push(repeat(i, t)), this
		}
		repeatForever(t) {
			const e = this._actions;
			let a;
			return a = t ? t._union() : e.pop(), e.push(repeatForever(a)), this
		}
		reverseTime(t) {
			const e = this._actions;
			let a;
			return a = t instanceof Tween ? t._union() : e.pop(), e.push(reverseTime(a)), this
		}
		hide() {
			let t = hide();
			return this._actions.push(t), this
		}
		show() {
			let t = show();
			return this._actions.push(t), this
		}
		removeSelf(t = !1) {
			let e = removeSelf(t);
			return this._actions.push(e), this
		}
		_union() {
			let t, e = this._actions;
			return t = 1 === e.length ? e[0] : sequence(e)
		}
		_destroy() {
			this.stop()
		}
		static _wrappedSequence(...t) {
			const e = Tween._tmp_args;
			e.length = 0;
			for (let a = t.length, i = 0; i < a; i++) {
				let a = e[i] = t[i];
				a instanceof Tween && (e[i] = a._union())
			}
			return sequence.apply(sequence, e)
		}
		static _wrappedParallel(...t) {
			const e = Tween._tmp_args;
			e.length = 0;
			for (let a = t.length, i = 0; i < a; i++) {
				let a = e[i] = t[i];
				a instanceof Tween && (e[i] = a._union())
			}
			return spawn.apply(spawn, e)
		}
	}
	Tween._tmp_args = [];
	class JumpBy extends ActionInterval {
		constructor(t, e, a, i, s) {
			super(), this._previousPosition = new Vec2(0, 0), this._startPosition = new Vec2(0, 0), this._delta = new Vec2(0, 0), this._height = 0, this._jumps = 0, void 0 !== i && this.initWithDuration(t, e, a, i, s)
		}
		initWithDuration(t, e, a, i, s) {
			return !!super.initWithDuration(t) && (this._delta.x = e, this._delta.y = a, this._height = i, this._jumps = s, !0)
		}
		clone() {
			var t = new JumpBy;
			return this._cloneDecoration(t), t.initWithDuration(this._duration, this._delta.x, this._delta.y, this._height, this._jumps), t
		}
		startWithTarget(t) {
			super.startWithTarget(t);
			var e = t.x,
				a = t.y;
			this._previousPosition.x = e, this._previousPosition.y = a, this._startPosition.x = e, this._startPosition.y = a
		}
		update(t) {
			t = this._computeEaseTime(t);
			let e = this.target;
			if (e) {
				var a = t * this._jumps % 1,
					i = 4 * this._height * a * (1 - a);
				i += this._delta.y * t;
				var s = this._delta.x * t,
					n = this._startPosition;
				e.pos(n.x + s, n.y + i, !0)
			}
		}
		reverse() {
			var t = new JumpBy(this._duration, -this._delta.x, -this._delta.y, this._height, this._jumps);
			return this._cloneDecoration(t), this._reverseEaseList(t), t
		}
	}
	class JumpTo extends JumpBy {
		constructor(t, e, a, i, s) {
			super(), this._endPosition = new Vec2(0, 0), void 0 !== i && this.initWithDuration(t, e, a, i, s)
		}
		initWithDuration(t, e, a, i, s) {
			return !!super.initWithDuration(t, e, a, i, s) && (this._endPosition.x = e, this._endPosition.y = a, !0)
		}
		startWithTarget(t) {
			super.startWithTarget(t), this._delta.x = this._endPosition.x - this._startPosition.x, this._delta.y = this._endPosition.y - this._startPosition.y
		}
		clone() {
			var t = new JumpTo;
			return this._cloneDecoration(t), t.initWithDuration(this._duration, this._endPosition.x, this._endPosition.y, this._height, this._jumps), t
		}
	}
	let default_number_formater = function(t) {
		return (0 | t).toString()
	};
	class NumberTo extends ActionInterval {
		constructor(t, e, a, i) {
			super(), this._from = e, this._to = a, this._formater = i || default_number_formater, this.initWithDuration(t)
		}
		clone() {
			var t = new NumberTo(this._duration, this._from, this._to, this._formater);
			return this._cloneDecoration(t), t
		}
		initWithDuration(t) {
			return !!super.initWithDuration(t)
		}
		startWithTarget(t) {
			super.startWithTarget(t), this.m_label = t
		}
		update(t) {
			if (this.m_label) {
				t = this._computeEaseTime(t);
				let e = this._from + (this._to - this._from) * t;
				this.m_label.text = this._formater(e)
			}
		}
	}
	class StringOneByOne extends ActionInterval {
		constructor(t, e) {
			super(), this._text = e, this.initWithDuration(t)
		}
		clone() {
			var t = new StringOneByOne(this._duration, this._text);
			return this._cloneDecoration(t), t
		}
		update(t) {
			let e = this.target;
			if (e) {
				t = this._computeEaseTime(t);
				let a = Math.floor(Mathf.lerp(0, this._text.length, t));
				e.text = this._text.substring(0, a)
			}
		}
	}
	class Follow3DTo2D extends ActionInterval {
		constructor(t, e, a, i = 0, s = 0) {
			super(), this._followTarget = e, this._orthographicCamera = a, this._offsetX = i, this._offsetY = s, t <= 0 && (t = 1e8), this.initWithDuration(t)
		}
		clone() {
			var t = new Follow3DTo2D(this._duration, this._followTarget, this._orthographicCamera);
			return this._cloneDecoration(t), t
		}
		update(t) {
			let e = this.target;
			if (e) {
				let t = this._followTarget;
				if (t && !t.destroyed) {
					let a = Laya.Point.TEMP;
					a.setTo(this._offsetX + t.pivotX, this._offsetY + t.pivotY), t.localToGlobal(a, !1);
					let i = Mathf.TEMP_VEC3;
					i.setValue(a.x, a.y, 0), this._orthographicCamera.convertScreenCoordToOrthographicCoord(i, i), e.transform.position = i
				}
			}
		}
	}

	function bezierAt(t, e, a, i, s) {
		return Math.pow(1 - s, 3) * t + 3 * s * Math.pow(1 - s, 2) * e + 3 * Math.pow(s, 2) * (1 - s) * a + Math.pow(s, 3) * i
	}
	class BezierBy extends ActionInterval {
		constructor(t, e) {
			super(), this._config = [], this._startPosition = new Vec2, this._previousPosition = new Vec2, e && this.initWithDuration(t, e)
		}
		initWithDuration(t, e) {
			return !!super.initWithDuration(t) && (this._config = e, !0)
		}
		clone() {
			var t = new BezierBy;
			this._cloneDecoration(t);
			for (var e = [], a = 0; a < this._config.length; a++) {
				var i = this._config[a];
				e.push(new Vec2(i.x, i.y))
			}
			return t.initWithDuration(this._duration, e), t
		}
		startWithTarget(t) {
			super.startWithTarget(t);
			var e = t.x,
				a = t.y;
			this._previousPosition.x = e, this._previousPosition.y = a, this._startPosition.x = e, this._startPosition.y = a
		}
		update(t) {
			if (t = this._computeEaseTime(t), this.target) {
				var e = this.target,
					a = this._config,
					i = a[0].x,
					s = a[1].x,
					n = a[2].x,
					o = a[0].y,
					r = a[1].y,
					l = a[2].y,
					c = bezierAt(0, i, s, n, t),
					h = bezierAt(0, o, r, l, t),
					d = this._startPosition;
				e.pos(d.x + c, d.y + h, !0)
			}
		}
		reverse() {
			var t = this._config,
				e = t[0].x,
				a = t[0].y,
				i = t[1].x,
				s = t[1].y,
				n = t[2].x,
				o = t[2].y,
				r = [new Vec2(i - n, s - o), new Vec2(e - n, a - o), new Vec2(-n, -o)],
				l = new BezierBy(this._duration, r);
			return this._cloneDecoration(l), this._reverseEaseList(l), l
		}
	}
	class BezierTo extends ActionInterval {
		constructor(t, e, a = 5, i = 2) {
			super(), this.initWithDuration(t, e, a, i)
		}
		initWithDuration(t, e, a, i) {
			if (super.initWithDuration(t)) {
				let t = (new Laya.Bezier).getBezierPoints(e, a, i);
				this._path = t;
				let n = 0;
				for (var s = 0; s < t.length - 2; s += 2) n += Mathf.distance2(t[s] - t[s + 2], t[s + 1] - t[s + 3]);
				return !0
			}
			return !1
		}
		clone() {
			return console.error("暂无clone实现，偷懒而已"), null
		}
		startWithTarget(t) {
			super.startWithTarget(t)
		}
		update(t) {
			if (t = this._computeEaseTime(t), this.target) {
				var e = Vec2.TEMP;
				BezierTo.lerpPath(this._path, t, e), this.target.pos(e.x, e.y, !0)
			}
		}
		reverse() {
			return console.error("暂无reverse实现，偷懒而已"), null
		}
		static lerpPath(t, e, a) {
			if (0 != t.length) {
				if (e = Mathf.clamp01(e), null == a && (a = new Vec2(0, 0)), 0 == e) a.setValue(t[0], t[1]);
				else if (1 == e) a.setValue(t[t.length - 2], t[t.length - 1]);
				else {
					let i = (t.length / 2 - 1) * e,
						s = 0 | i,
						n = Math.ceil(i);
					s != n ? (a.x = Mathf.lerp(t[2 * s], t[2 * n], i - s), a.y = Mathf.lerp(t[2 * s + 1], t[2 * n + 1], i - s)) : a.setValue(t[2 * n], t[2 * n + 1])
				}
				return a
			}
		}
	}
	class LookAt extends ActionInterval {
		constructor(t, e) {
			super(), this.looAtTarget = e, this.lookAtPos = new Laya.Vector3, t <= 0 && (t = 1e8), this.initWithDuration(t)
		}
		startWithTarget(t) {
			super.startWithTarget(t);
			let e = Mathf.TEMP_VEC3;
			t.transform.getForward(e), Laya.Vector3.normalize(e, e);
			let a = Laya.Vector3.distance(t.transform.position, this.looAtTarget.transform.position);
			Laya.Vector3.scale(e, a, e), Laya.Vector3.add(t.transform.position, e, this.lookAtPos)
		}
		clone() {
			var t = new LookAt(this._duration, this.looAtTarget);
			return this._cloneDecoration(t), t
		}
		update(t) {
			let e = this.target;
			if (e) {
				let t = this.looAtTarget;
				t && !t.destroyed && (Laya.Vector3.lerp(this.lookAtPos, t.transform.position, .1, this.lookAtPos), e.transform.lookAt(this.lookAtPos, LookAt.UP, !1))
			}
		}
	}
	LookAt.UP = new Laya.Vector3(0, 1, 0);
	class Follow3D extends ActionInterval {
		constructor(t, e, a = 0) {
			super(), this.followTarget = e, this.distance = a, this.originPos = new Laya.Vector3, t <= 0 && (t = 1e8), this.initWithDuration(t)
		}
		startWithTarget(t) {
			super.startWithTarget(t), this.distance <= 0 && (this.distance = Laya.Vector3.distance(t.transform.position, this.followTarget.transform.position)), t.transform.position.cloneTo(this.originPos)
		}
		clone() {
			var t = new Follow3D(this._duration, this.followTarget, this.distance);
			return this._cloneDecoration(t), t
		}
		update(t) {
			let e = this.target;
			if (e) {
				let t = this.followTarget;
				t && !t.destroyed && (Laya.Vector3.lerp(this.originPos, t.transform.position, .1, this.originPos), e.transform.position = this.originPos)
			}
		}
	}
	Follow3D.UP = new Laya.Vector3(0, 1, 0);
	class Follow2D extends ActionInterval {
		constructor(t, e, a) {
			super(), this.followTarget = e, this.offset = a || new Laya.Point, t <= 0 && (t = 1e8), this.initWithDuration(t)
		}
		startWithTarget(t) {
			super.startWithTarget(t)
		}
		clone() {
			var t = new Follow2D(this._duration, this.followTarget, this.offset);
			return this._cloneDecoration(t), t
		}
		update(t) {
			let e = this.target;
			if (e) {
				let t = this.followTarget;
				if (t && !t.destroyed) {
					let a = Follow2D.temp_point;
					a.setTo(this.offset.x, this.offset.y), t.localToGlobal(a, !1), e.parent && (e.parent.globalToLocal(a, !1), e.pos(Mathf.lerp(e.x, a.x, .1), Mathf.lerp(e.y, a.y, .1), !0))
				}
			}
		}
	}
	var cc;
	Follow2D.temp_point = new Laya.Point,
		function(t) {
			function clearTween(t) {
				TweenSystem.instance.ActionManager.removeAllActionsFromTarget(t)
			}

			function bezierTo(t, e, a) {
				return new BezierTo(t, e, a, e.length / 2 - 1)
			}
			t.tween = function(t, e = !1) {
				return e && clearTween(t), new Tween(t)
			}, t.clearTween = clearTween, t.Ease = Easing, t.jumpBy = function(t, e, a, i, s) {
				return new JumpBy(t, e, a, -i, s)
			}, t.jumpTo = function(t, e, a, i, s) {
				return new JumpTo(t, e, a, -i, s)
			}, t.numberTo = function(t, e, a, i) {
				return new NumberTo(t, e, a, i)
			}, t.stringOneByOne = function(t, e) {
				return new StringOneByOne(t, e)
			}, t.lookAt = function(t, e) {
				return new LookAt(t, e)
			}, t.bezierTo = bezierTo, t.bezierFromTo = function(t, e, a, i = .5) {
				let s = Mathf.distance(e, a) * i,
					n = Mathf.random(200 * Math.PI) / 100,
					o = Math.cos(n) * s,
					r = Math.sin(n) * s;
				return bezierTo(t, [e.x, e.y, e.x + o, e.y + r, a.x, a.y], 10)
			}, t.follow2d = function(t, e = 0, a) {
				return new Follow2D(e, t, a)
			}, t.PROP = {
				EMPTY: {},
				SCALE0: {
					scaleX: 0,
					scaleY: 0
				},
				SCALE1: {
					scaleX: 1,
					scaleY: 1
				},
				SCALE1_2: {
					scaleX: 1.2,
					scaleY: 1.2
				},
				SCALE1_3: {
					scaleX: 1.3,
					scaleY: 1.3
				},
				ALPHA0: {
					alpha: 0
				},
				ALPHA1: {
					alpha: 1
				},
				SCALE_ALPHA0: {
					scaleX: 0,
					scaleY: 0,
					alpha: 0
				},
				SCALE_ALPHA1: {
					scaleX: 1,
					scaleY: 1,
					alpha: 1
				}
			}, t.OPTION = {
				BACK_OUT: {
					easing: Easing.backOut
				},
				BACK_IN: {
					easing: Easing.backIn
				},
				SINE_IN: {
					easing: Easing.sineIn
				},
				SINE_OUT: {
					easing: Easing.sineOut
				},
				SINE_IN_OUT: {
					easing: Easing.sineInOut
				},
				SINE_OUT_IN: {
					easing: Easing.sineOutIn
				},
				CIRC_IN: {
					easing: Easing.circIn
				},
				CIRC_OUT: {
					easing: Easing.circOut
				},
				EXPO_IN: {
					easing: Easing.expoIn
				},
				EXPO_OUT: {
					easing: Easing.expoOut
				},
				CUBIC_IN: {
					easing: Easing.cubicIn
				},
				CUBIC_OUT: {
					easing: Easing.cubicOut
				}
			}
		}(cc || (cc = {}));
	class UIButton extends Laya.Script {
		constructor() {
			super(...arguments), this._pressed = !1, this.time = 0, this._transitionFinished = !0, this._lastClickTime = 0, this.transition = "SCALE", this._interactable = !0, this._gray = !1, this.enableAutoGrayEffect = !1, this.stopPropagation = !1, this.pressToKeepClick = !1, this.duration = .1, this.zoomScale = 1.2, this.clickDelta = .5
		}
		get interactable() {
			return this._interactable
		}
		set interactable(t) {
			this._interactable !== t && (this._interactable = t, !t && this._pressed && (this._pressed = !1))
		}
		get gray() {
			return this._gray
		}
		set gray(t) {
			t !== this._gray && (this._gray = !!t, Laya.UIUtils.gray(this.node, t))
		}
		get node() {
			return this.owner
		}
		onAwake() {
			this._applyTarget(), this._updateDisabledState()
		}
		onDestroy() {}
		onEnable() {}
		onDisable() {
			let t = this._fromScale;
			t && this.node.scale(t.scaleX, t.scaleY, !0), this._transitionFinished = !0
		}
		onUpdate() {
			let t = .001 * Laya.timer.delta;
			this._lastClickTime -= t, this._transitionFinished || (this.time += t, this._interactable && this._pressed && this.pressToKeepClick && this.clickDelta > 0 ? this._emitClickEvent() : this.time >= this.duration && (this._transitionFinished = !0))
		}
		_applyTarget() {
			let t = this.node;
			this._fromScale = {
				scaleX: t.scaleX,
				scaleY: t.scaleY
			}, this._toScale = {
				scaleX: t.scaleX * this.zoomScale,
				scaleY: t.scaleY * this.zoomScale
			}
		}
		onMouseDown(t) {
			this.stopPropagation && t && t.stopPropagation(), this.interactable && this.enabled && (this._lastClickTime > 0 || (this._pressed = !0, this._transitionFinished = !1, "SCALE" == this.transition && cc.tween(this.node, !0).to(.05, this._toScale).to(.05, this._fromScale).start()))
		}
		onMouseMove(t) {
			this.stopPropagation && t && t.stopPropagation(), this.interactable && this.enabled && this._pressed && (this._transitionFinished = !1)
		}
		onMouseUp(t) {
			this.stopPropagation && t && t.stopPropagation(), this.interactable && this.node.activeInHierarchy && (this._pressed && this._emitClickEvent(), this._pressed = !1, this._transitionFinished = !0)
		}
		_emitClickEvent() {
			this._lastClickTime <= 0 && (this._lastClickTime = this.clickDelta, this.node.event("uibutton_click", this))
		}
		onMouseOut(t) {
			this._pressed && (this._pressed = !1)
		}
		onClick(t) {
			t && t.stopPropagation()
		}
		_updateDisabledState() {
			!this._sprite || !this.enableAutoGrayEffect || this.interactable
		}
		stopTransition() {
			this._transitionFinished = !0
		}
	}
	UIButton.TRANSITION_NONE = "NONE", UIButton.TRANSITION_SCALE = "SCALE";
	class GConfig {
		static changeValue(t, e) {
			this[t] = e
		}
	}

	function calc_level_award(t) {
		return Math.pow(t, 2.9) / 3 + 4e3
	}
	GConfig.tile_width = 64, GConfig.tile_height = 64, GConfig.offline_delta_time = 10, GConfig.per_profit_time = 60, GConfig.img_single_color = "res/singleColor.png", GConfig.img_alpha_mask = "res/alpha_mask.png", GConfig.bmf_score = "res/font/num_score.fnt", GConfig.bmf_rank = "res/font/num_rank.fnt", GConfig.bmf_laji = "res/font/num_laji.fnt", GConfig.bmf_over = "res/font/num_over.fnt", GConfig.bmf_class = "res/font/num_class.fnt", GConfig.bmf_math = "res/font/num_math.fnt", GConfig.qte_time = 2, GConfig.qte_cd_time = 2, GConfig.qte_suc_rate = .2, GConfig.qte_fail_rate = .05, GConfig.db_award_info = {
		delta: 10,
		duration: 60
	}, GConfig.big_sell_info = {
		delta: 25
	}, GConfig.fast_sell_info = {
		duration: 25,
		moveRate: 2,
		progressRate: 2
	}, GConfig.show_part_coin_rate = .1, GConfig.letter_share_rate = 7500, GConfig.renqi_rate = 1.5, GConfig.renqi_award_limit = [120], GConfig.renqi_award_count = 2, GConfig.chn_data = {
		appName: "toutiao",
		isShareEnabled: !0,
		isPayEnabled: !0,
		isSupportRecordShare: !0,
		isSupportFindMinigames: !0,
		isSupportInstallShortcut: !0,
		findMinigamesImageUrl: "https://gamesres.ultralisk.cn/h5_games_res/common/find_me/default.png",
		jumpInfo: [{
			index: "61",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/61.png"
		}, {
			index: "64",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/64.png"
		}, {
			index: "49",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/49.png"
		}, {
			index: "60",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/60.png"
		}, {
			index: "61",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/61.png"
		}, {
			index: "64",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/64.png"
		}, {
			index: "49",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/49.png"
		}, {
			index: "60",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/60.png"
		}, {
			index: "61",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/61.png"
		}, {
			index: "64",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/64.png"
		}],
		copInfo: '{\n            "share_rate":"10",\n\n            "ad_mode":0,\n            "ad_h5":"0",\n            "ad_interstitial_ratios": "0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;100;100;100;100;100;100;100;100",\n            "ad_banner_ratios": "0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;100;100;100;100;100;100;100;100",\n            "ad_embedded_ratios":"0;0;0",\n            "ad_video_ratios_":"",\n            "ad_video_ratios": "0;0;0;0;0;0;0;100;0;0;0;0;0;0;0;0;0;0;0;100;0;0;100;100",\n            "ad_video_cds":"",\n            "ad_inst_cd":"10",\n            "native_insert_mode":1,\n            "some_function":"0;0;0;0;0",\n            "b_open_statics_item":1,\n            "url_notice":"0",\n\n            "share_mode":"2;2;2;2;2;2;2;2;2;2;2",\n            "share_close_delta_time":1,\n\n            "cat_ratios": "100;100;100;100;100;100",\n            "cat_delta_time": 30,\n    \n            "rule_graph_ratios": "100;100;100;100;100;100;100",\n            "get_video_share_rank_tag_active": "",\n            "get_rank_tip_url": "https://gamesres.ultralisk.cn/h5_games_res/common/videoranknotice/game83/ranknotice.png",\n\n            "follow_close_delay_time":2,\n            "b_follow_finger": 1,\n\n            "b_open_follow": 1,\n            \n            "video_mode":"0;0",\n            "b_sign_delay_mode":0,\n            "b_video_share_full_screen":1,\n            "b_video_share_finger":1,\n            "b_adv_reward_confirm":1,\n            "b_adv_delay":1,\n            "b_adv_full_screen":1\n        }'
	};
	var exchange_rate_fun = {
		1001: function(t, e) {
			return Math.ceil((500 + 25 * (e - 1)) * t)
		},
		1002: function(t, e) {
			return 5 * t
		}
	};
	class DbExt {
		static getBrushId(t) {
			return t.p1
		}
		static getSkincareScore(t) {
			return t.num0
		}
		static getTagWeights(t) {
			return t.it
		}
		static getTag1(t) {
			return t.num0
		}
		static getTag2(t) {
			return t.num1
		}
		static getTgPrice(t) {
			return t.num2
		}
		static getJumpType(t) {
			return t.num3
		}
		static getCustEventWeights(t) {
			return t.it
		}
		static getGuideId(t) {
			return t.num1
		}
		static getGuideParam(t) {
			return t.num1
		}
		static isMan(t) {
			return 1 == t.num2
		}
	}
	class SpriteBase3D extends AsyncObject {
		constructor() {
			super(...arguments), this.resNode = null
		}
		get isResNodeDestroyed() {
			return !!this.resNode && this.resNode.destroyed
		}
		setLayer(t) {
			if (this.callable) {
				if (this._layer == t) return;
				this._layer = t, UiHelper.setLayer(this.resNode, t)
			} else this.safeCall(this.setLayer, t)
		}
		once(t, e, a) {
			this.callable ? this.resNode.once(t, e, a) : this.safeCall(this.once, t, e, a)
		}
		on(t, e, a) {
			this.callable ? this.resNode.on(t, e, a) : this.safeCall(this.on, t, e, a)
		}
		off(t, e, a) {
			this.callable ? this.resNode.off(t, e, a) : this.safeCall(this.off, t, e, a)
		}
		offAll(t) {
			this.callable ? this.resNode.offAll(t) : this.safeCall(this.offAll, t)
		}
		setWorldPosition(t, e, a) {
			this.callable ? null == e ? this.resNode.transform.position = t : (SpriteBase3D._tempVec3.setValue(t, e, a), this.resNode.transform.position = SpriteBase3D._tempVec3) : null == e ? this.safeCall(this.setWorldPosition, t.x, t.y, t.z) : this.safeCall(this.setWorldPosition, t, e, a)
		}
		findChild(t) {
			if (this.callable) return UiHelper.findChild(this.resNode, t);
			this.logNotFinishError()
		}
		dispose() {
			this.resNode && (this.resNode.destroy(!0), this.resNode = null), super.dispose()
		}
		get enable() {
			return this._isLoaded && this.resNode.active
		}
		set enable(t) {
			this.callable ? this.resNode.active = t : this.safeCall(t ? this.show : this.hide)
		}
		setName(t) {
			this.callable ? this.resNode.name = t : this.safeCall(this.setName, t)
		}
		addNodeChild(t) {
			this.callable ? t.setParent(this.resNode) : this.safeCall(this.addNodeChild, t)
		}
		addChild(t) {
			this.callable ? this.resNode.addChild(t) : this.safeCall(this.addChild, t)
		}
		getChild(t) {
			return this.callable ? UiHelper.getChild(this.resNode, t) : (this.logNotFinishError(), null)
		}
		getChildAt(t) {
			return this.callable ? this.resNode.getChildAt(t) : (this.logNotFinishError(), null)
		}
		setParent(t) {
			this.callable ? t.addChild(this.resNode) : this.safeCall(this.setParent, t)
		}
		getParent() {
			return this.callable ? this.resNode.parent : (this.logNotFinishError(), null)
		}
		removeFromParent() {
			this.callable ? this.resNode.removeSelf() : this.safeCall(this.removeFromParent)
		}
		setSize(t, e) {
			console.error("Model 没有size属性")
		}
		setPosition(t, e, a) {
			this.callable ? null == e ? this.resNode.transform.localPosition = t : (SpriteBase3D._tempVec3.setValue(t, e, a), this.resNode.transform.localPosition = SpriteBase3D._tempVec3) : null == e ? this.safeCall(this.setPosition, t.x, t.y, t.z) : this.safeCall(this.setPosition, t, e, a)
		}
		setScale(t, e, a) {
			this.callable ? null == e ? this.resNode.transform.localScale = t : (SpriteBase3D._tempVec3.setValue(t, e, a), this.resNode.transform.localScale = SpriteBase3D._tempVec3) : null == e ? this.safeCall(this.setScale, t.x, t.y, t.z) : this.safeCall(this.setScale, t, e, a)
		}
		setRotation(t, e, a) {
			this.callable ? null == e ? this.resNode.transform.localRotationEuler = t : (SpriteBase3D._tempVec3.setValue(t, e, a), this.resNode.transform.localRotationEuler = SpriteBase3D._tempVec3) : null == e ? this.safeCall(this.setRotation, t.x, t.y, t.z) : this.safeCall(this.setRotation, t, e, a)
		}
		setAlpha(t) {
			console.log("模型没有alpha")
		}
		show() {
			this.enable = !0
		}
		hide() {
			this.enable = !1
		}
		setSiblingIndex(t) {
			if (this.callable) {
				if (!this.resNode.parent) return; - 1 === t && (t = this.resNode.parent.numChildren - 1), this.resNode.parent.setChildIndex(this.resNode, t)
			} else this.safeCall(this.setSiblingIndex, t)
		}
		setTop() {
			this.setSiblingIndex(-1)
		}
		setBottom() {
			this.setSiblingIndex(0)
		}
		addComponent(t) {
			if (this.callable) return this.resNode.addComponent(t);
			this.safeCall(this.addComponent, t)
		}
		getComponent(t) {
			return this._isLoaded ? this.resNode.getComponent(t) : (this.logNotFinishError(), null)
		}
		convertToWorldSpaceOut(t, e) {
			return console.error("暂未实现"), null
		}
	}
	SpriteBase3D._tempVec3 = new Laya.Vector3;
	class Particle extends SpriteBase3D {
		constructor(t) {
			super(), this.resourceName = null, this.resourceType = RES_TYPE.PREFAB3D, this._pss = [], this.effectId = t;
			let e = db.get_effect_db(t);
			this.resourceName = e.res
		}
		onResourceLoaded(t) {
			this.resNode = Laya.Sprite3D.instantiate(t), Particle._findPs(this.resNode, this._pss)
		}
		static _findPs(t, e) {
			for (var a = t.numChildren - 1; a >= 0; a--) {
				var i = t.getChildAt(a);
				i.particleSystem && (i.particleSystem.playOnAwake = !1, e.push(i.particleSystem)), this._findPs(i, e)
			}
		}
		reuse() {
			this.tryCreate(), this.show()
		}
		unuse() {
			this.stop(), this.stopFollow(), this.removeFromParent(), this.hide(), this.clearDelayCalls()
		}
		dispose() {
			this._pss = null, super.dispose()
		}
		play(t, e, a, i) {
			if (this.callable) {
				i && i.addChild(this.resNode), t && this.setPosition(t);
				for (var s = this._pss.length - 1; s >= 0; s--) this._pss[s].play();
				e && Laya.timer.once(1e3 * e, this, this.stopAndPutback, [a])
			} else this.safeCall(this.play, t, e, a, i)
		}
		stopAndPutback(t) {
			this.callable ? (this.stop(), t ? Laya.timer.once(1e3 * t, this, this.putBack) : this.putBack()) : this.safeCall(this.stopAndPutback, t)
		}
		stop() {
			if (this.callable)
				for (var t = this._pss.length - 1; t >= 0; t--) this._pss[t].stop();
			else this.safeCall(this.stop)
		}
		putBack() {
			this.callable ? this.resNode.destroyed || _G.poolManager.put(this) : this.safeCall(this.putBack)
		}
		resetTrail(t) {
			if ((t = t || this.resNode) instanceof Laya.TrailSprite3D) {
				let e = t.trailFilter.time;
				t.trailFilter.time = 0, Laya.timer.frameOnce(1, t, function() {
					t.trailFilter.time = e
				})
			}
			for (let e = 0; e < t.numChildren; e++) {
				let a = t.getChildAt(e);
				this.resetTrail(a)
			}
		}
		simulate(t, e) {
			if (this.callable)
				for (var a = this._pss.length - 1; a >= 0; a--) this._pss[a].simulate(t, e);
			else this.safeCall(this.simulate, t, e)
		}
		setCurrentTime(t) {
			if (this.callable)
				for (var e = this._pss.length - 1; e >= 0; e--) {
					var a = t - this._pss[e]._currentTime;
					this._pss[e]._updateParticles(a)
				} else this.safeCall(this.setCurrentTime, t)
		}
		followTarget(t, e, a = 0, i = 0) {
			if (!this.callable) return this.safeCall(this.followTarget, t, e, a, i);
			t instanceof Laya.Sprite3D ? this._target3D = t : (this._target = t, this._camera = e, this._offsetX = a, this._offsetY = i), Laya.timer.frameLoop(1, this, this.updateFollow, null, !0), this.updateFollow()
		}
		followScale(t) {
			this.callable ? this._bScale = t : this.safeCall(this.followScale, t)
		}
		stopFollow() {
			if (!this.callable) return this.safeCall(this.stopFollow);
			this._target = null, this._target3D = null, this._camera = null, this._bScale = !1, Laya.timer.clearAll(this)
		}
		updateFollow() {
			this._target ? this._target.destroyed || this._camera.destroyed ? this.stopAndPutback() : this.align(this._target, this._camera, this._offsetX, this._offsetY) : this._target3D.destroyed ? this.stopAndPutback() : this.align3D(this._target3D)
		}
		align(t, e, a = 0, i = 0) {
			let s = Particle._TEMP_P,
				n = Particle._TEMP_VEC3;
			t.parent && (s.setTo(t.x + a, t.y + i), t.parent.localToGlobal(s, !1)), n.setValue(s.x, s.y, 0), e.convertScreenCoordToOrthographicCoord(n, n), n.z = 0, this.setWorldPosition(n)
		}
		align3D(t) {
			let e = Particle._TEMP_VEC3;
			t.transform.position.cloneTo(e), this.setWorldPosition(e), this._bScale && this.setScale(t.transform.localScale)
		}
	}
	Particle._TEMP_P = new Laya.Point, Particle._TEMP_VEC3 = new Laya.Vector3;
	class ReuseSprite extends Laya.Sprite {
		constructor(t) {
			super(), this.effect = _G.poolManager.get(Particle, "131")
		}
		dispose() {
			this.effect && (_G.poolManager.put(this.effect), this.effect = null), this.destroy()
		}
		reuse() {
			this.visible = !0, _G.effectScene && (this.effect.show(), this.effect.setParent(_G.effectScene), this.effect.setLayer(1), this.effect.play(), this.effect.followTarget(this, _G.effectCamera))
		}
		unuse() {
			this.removeSelf(), this.effect.stopFollow(), this.effect.setScale(1, 1, 1), this.effect.stop(), this.effect.removeFromParent(), this.effect.hide(), this.visible = !1
		}
		loadUrl(t) {
			this.loadImage(t, Laya.Handler.create(this, this.onLoaded))
		}
		onLoaded() {
			if (this.destroyed) return;
			let t = this.texture;
			t && this.pivot(t.width / 2, t.height / 2)
		}
	}
	class UiHelper {
		static get MASK_TEXTURE2D() {
			if (!this.maskTexture2d) {
				var t = new Uint8Array(4);
				t[0] = 1, t[1] = 1, t[2] = 1, t[3] = .7;
				let e = new Laya.Texture2D(1, 1, Laya.Texture2D.FORMAT_R8G8B8A8, !1, !1);
				e.setPixels(t), e.lock = !0, this.maskTexture2d = e
			}
			return this.maskTexture2d
		}
		static get MASK_TEXTURE() {
			return this.maskTexture || (this.maskTexture = Laya.Texture.create(this.MASK_TEXTURE2D, 0, 0, 1, 1)), this.maskTexture
		}
		static get WHITE_TEXTURE2D() {
			return Laya.Texture2D.whiteTexture
		}
		static get WHITE_TEXTURE() {
			return this.whiteTexture || (this.whiteTexture = Laya.Texture.create(this.WHITE_TEXTURE2D, 0, 0, 1, 1)), this.whiteTexture
		}
		static get BLACK_TEXTURE() {
			if (!this.blackTexture) {
				let t = Laya.Texture2D.blackTexture;
				this.blackTexture = new Laya.Texture(t)
			}
			return this.blackTexture
		}
		static addClickEvent(t, e, a, i = .5, s = !1) {
			let n = 0;
			t.on(Laya.Event.CLICK, t, function(o) {
				UiHelper.stopEventHandler(o), ViewBase.playButtonClickSound(a), n > Timer.time || (i && (n = Timer.time + i), s && cc.tween(t).to(.05, cc.PROP.SCALE1_2).to(.05, cc.PROP.SCALE1).start(), e && e())
			})
		}
		static addUIButtonClick(t, e, a) {
			t.on("uibutton_click", t, function() {
				ViewBase.playButtonClickSound(a), e()
			})
		}
		static addUIToggleClick(t, e, a) {
			t.on("ui_toggle", t, function(t) {
				ViewBase.playButtonClickSound(a), e(t)
			})
		}
		static addScrollViewClick(t, e, a, i) {
			let s, n, o;

			function on_click(t) {
				ViewBase.playButtonClickSound(a), e(), UiHelper.stopEventHandler(t)
			}
			t.on(Laya.Event.MOUSE_DOWN, t, function(e) {
				s = !0, n = Laya.stage.mouseX, o = Laya.stage.mouseY, i && cc.tween(t).to(.05, cc.PROP.SCALE1_2).to(.05, cc.PROP.SCALE1).start()
			}), t.on(Laya.Event.MOUSE_MOVE, t, function(t) {
				if (!s) return;
				let e = Laya.stage.mouseX,
					a = Laya.stage.mouseY;
				Mathf.distanceSqr2(e - n, a - o) > 16 && (s = !1), n = e, o = a
			}), t.on(Laya.Event.CLICK, t, function(t) {
				s && on_click(t)
			}), t.on("uibutton_click", t, on_click)
		}
		static getChildComponent(t, e, a) {
			if (e && "" != e) {
				let i = this.getChild(t, e);
				return i ? i.getComponent(a) : null
			}
			return t.getComponent(a)
		}
		static getComponentsInChildren(t, e, a) {
			a = a || [];
			for (let i = 0; i < t.numChildren; i++) {
				let s = t.getChildAt(i);
				if (s) {
					let t = s.getComponent(e);
					t && a.push(t), this.getComponentsInChildren(s, e, a)
				}
			}
			return a
		}
		static registerTouchEvent(t, e, a, i, s) {
			e && t.on(Laya.Event.MOUSE_DOWN, this, e), a && t.on(Laya.Event.MOUSE_MOVE, this, a), i && t.on(Laya.Event.MOUSE_UP, this, i), s && t.on(Laya.Event.MOUSE_OUT, this, s)
		}
		static unregisterTouchEvent(t) {
			t.offAllCaller(this)
		}
		static calcRecursiveScale(t) {
			let e = 1;
			do {
				e *= t.scaleX, t = t.parent
			} while (null != t);
			return e
		}
		static resetAnchor(t, e, a, i) {
			let s = 0;
			_G.canvasFitHeight < _G.canvasHeight && (s = (_G.canvasHeight - _G.canvasFitHeight) / 2);
			let n = 0;
			_G.canvasFitWidth < _G.canvasWidth && (n = (_G.canvasWidth - _G.canvasFitWidth) / 2), t && (t.y = s), a && (a.y = _G.canvasHeight - s), e && (e.x = n), i && (i.x = _G.canvasWidth - n)
		}
		static setButtonToNormal(t) {
			let e = t.getComponent(UIButton);
			e && (e.interactable = !0), console.error("setButtonToNormal")
		}
		static formatLastTime(t) {
			let e = (1e3 * Timer.now - t) / 3600 / 1e3;
			if (e > 24) return Tools.formatDate(t);
			if (e >= 1) return `${Math.round(e)}小时前`; {
				let t = 60 * e;
				return t >= 1 ? `${Math.round(t)}分钟前` : "刚刚"
			}
		}
		static playBigSmallOnce(t, e, a, i = .1) {
			cc.tween(t).to(i, {
				scaleX: a,
				scaleY: a
			}).to(i, {
				scaleX: e,
				scaleY: e
			}).start()
		}
		static playBreathe(t, e = .9, a = 1.1, i = .8) {
			cc.tween(t).repeatForever(cc.tween().to(i, {
				scaleX: a,
				scaleY: a
			}).to(i, {
				scaleX: e,
				scaleY: e
			})).start()
		}
		static removeBreathe(t) {
			cc.clearTween(t), t.scale(1, 1, !0)
		}
		static playScaleOneByOne(t, e, ...a) {
			for (var i = 0, s = a.length; i < s; i++) {
				var n = a[i];
				n && (this.playScaleOnce(n, t), t += e)
			}
		}
		static playScaleOnce(t, e = 0, a = .2) {
			t.alpha = 0, t.scale(0, 0, !0), Laya.Tween.to(t, cc.PROP.SCALE_ALPHA1, 1e3 * a, Laya.Ease.backOut, null, 1e3 * e)
		}
		static playRotShake(t, e = 1, a) {
			let i = t.rotation;
			cc.tween(t).repeat(e / .06 / 2, cc.tween().to(.06, {
				rotation: i - 10
			}).to(.06, {
				rotation: i + 10
			})).to(.03, {
				rotation: i
			}).call(a).start()
		}
		static playTipRot(t) {
			cc.tween(t, !0).repeatForever(cc.tween().repeat(2, cc.tween().to(.2, {
				rotation: 15
			}, cc.OPTION.SINE_IN_OUT).to(.2, {
				rotation: -15
			}, cc.OPTION.SINE_IN_OUT)).to(.1, {
				rotation: 0
			}).delay(2)).start()
		}
		static playRotCycle(t) {
			cc.tween(t).repeatForever(cc.tween().to(.05, {
				rotation: 10
			}).to(.1, {
				rotation: -10
			}).to(.1, {
				rotation: 10
			}).to(.1, {
				rotation: -10
			}).to(.05, {
				rotation: 0
			}).delay(1)).start()
		}
		static playFadein(t, e = 0) {
			t && (t.alpha = 0, Laya.Tween.to(t, cc.PROP.ALPHA1, 200, null, null, 1e3 * e))
		}
		static playScaleThenFadeOut(t, e) {
			if (t) {
				let a = t.scaleX,
					i = t.scaleY;
				cc.tween(t).parallel(cc.tween().to(.5, {
					scaleX: 1.5 * a,
					scaleY: 1.5 * i
				}), cc.tween().delay(.4).to(.1, cc.PROP.ALPHA0)).call(e).start()
			}
		}
		static playAlert(t, e) {
			t.scale(0, 0, !0), cc.clearTween(t);
			let a = cc.tween(t).to(.2, {
				scaleX: .2,
				scaleY: 1.2
			}).to(.2, {
				scaleX: 1.1,
				scaleY: .9
			}, {
				easing: cc.Ease.quadOut
			}).to(.1, {
				scaleX: .9,
				scaleY: 1.1
			}, {
				easing: cc.Ease.quadOut
			}).to(.1, {
				scaleX: 1,
				scaleY: 1
			}, {
				easing: cc.Ease.backOut
			});
			e && (a = a.call(function() {
				cc.tween(t).repeatForever(cc.tween().to(.8, {
					y: 60
				}).to(.8, {
					y: 74
				})).start()
			})), a.start()
		}
		static playMoveOut(t, e, a = .3) {
			cc.tween(t, !0).to(a, {
				x: e
			}, cc.OPTION.SINE_OUT).hide().start()
		}
		static playMoveIn(t, e = 0, a = .3, i = 0) {
			cc.tween(t, !0).show().delay(i).to(a, {
				x: e
			}, cc.OPTION.BACK_OUT).start()
		}
		static getCircleConverter(t, e, a = !0) {
			let i, s, n, o = (t * t + (e /= 2) * e) / (2 * t);
			return i = e, s = o - t, n = o * o,
				function(e) {
					let o;
					return o = a ? -(-Math.sqrt(n - Math.pow(e - i, 2)) + s) : -Math.sqrt(n - Math.pow(e - i, 2)) + s + t
				}
		}
		static getChild(t, e) {
			if (!e) return null;
			if ("/" == e) return t;
			if (~e.indexOf("/")) {
				let a = e.split("/");
				for (let e = 0; e < a.length; e++)
					if (!(t = t.getChildByName(a[e]))) return null;
				return t
			}
			return t.getChildByName(e)
		}
		static findChild(t, e) {
			if (!e) return null;
			if (t.name == e) return t;
			for (let a = t.numChildren - 1; a >= 0; a--) {
				let i = this.findChild(t.getChildAt(a), e);
				if (i) return i
			}
		}
		static findAllMeshRenderers(t, e, a = !1) {
			e = e || [];
			for (let i = 0; i < t.numChildren; i++) {
				let s = t.getChildAt(i);
				if (s) {
					let t = s.meshRenderer;
					t && e.push(t), a && this.findAllMeshRenderers(s, e, a)
				}
			}
			return e
		}
		static findAllSkinnedMeshRenderers(t, e, a = !1) {
			e = e || [];
			for (let i = 0; i < t.numChildren; i++) {
				let s = t.getChildAt(i);
				if (s) {
					let t = s.skinnedMeshRenderer;
					t && e.push(t), a && this.findAllSkinnedMeshRenderers(s, e, a)
				}
			}
			return e
		}
		static findSkinnedMeshSprite(t, e = !1) {
			if (t.skinnedMeshRenderer) return t;
			if (e)
				for (let a = 0; a < t.numChildren; a++) {
					let i = t.getChildAt(a),
						s = this.findSkinnedMeshSprite(i, e);
					if (s) return s
				}
			return null
		}
		static findMeshSprite(t, e = !1) {
			if (t.meshRenderer) return t;
			if (e)
				for (let a = 0; a < t.numChildren; a++) {
					let i = t.getChildAt(a),
						s = this.findMeshSprite(i, e);
					if (s) return s
				}
			return null
		}
		static findAllShurikenParticleSystem(t, e) {
			e = e || [];
			for (var a = t.numChildren - 1; a >= 0; a--) {
				var i = t.getChildAt(a);
				i.particleSystem && e.push(i.particleSystem), this.findAllShurikenParticleSystem(i, e)
			}
			return e
		}
		static setLayer(t, e) {
			t.layer = e;
			for (var a = 0; a < t.numChildren; a++) this.setLayer(t.getChildAt(a), e)
		}
		static cloneSprite(t) {
			let e = this._cloneSingleSprite(t);
			for (var a = 0; a < t.numChildren; a++) {
				var i = this.cloneSprite(t.getChildAt(a));
				i && e.addChild(i)
			}
			return e
		}
		static _cloneSingleSprite(t) {
			if (!t.name) return null;
			let e;
			if (t instanceof Laya.Image) {
				let a = new Laya.Image(t.skin);
				t.anchorX && (a.anchorX = t.anchorX), t.anchorY && (a.anchorY = t.anchorY), a.sizeGrid = t.sizeGrid, a.pivot(t.pivotX, t.pivotY), e = a
			} else if (t instanceof Laya.Label) {
				let a = new Laya.Label;
				a.fontSize = t.fontSize, a.color = t.color, a.strokeColor = t.strokeColor, a.stroke = t.stroke, t.anchorX && (a.anchorX = t.anchorX), t.anchorY && (a.anchorY = t.anchorY), a.align = t.align, a.wordWrap = t.wordWrap, a.text = t.text, e = a
			} else if (t instanceof Laya.Text) {
				let a = new Laya.Label;
				a.fontSize = t.fontSize, a.color = t.color, a.strokeColor = t.strokeColor, a.stroke = t.stroke, a.align = t.align, a.wordWrap = t.wordWrap, a.text = t.text, e = a
			} else t instanceof Laya.Sprite && ((e = new Laya.Sprite).texture = t.texture, e.pivot(t.pivotX, t.pivotY));
			return t._width && (e.width = t.width), t._height && (e.height = t.height), e.pos(t.x, t.y, !0).scale(t.scaleX, t.scaleY).rotation = t.rotation, e.name = t.name, e
		}
		static screenShot(t, e, a) {
			e = Math.floor(e), a = Math.floor(a);
			let i = new Laya.Camera(t.aspectRatio, t.nearPlane, t.farPlane);
			i.clearFlag = t.clearFlag, i.cullingMask = t.cullingMask, i.fieldOfView = t.fieldOfView, t.parent.addChild(i), i.transform.position = t.transform.position, i.transform.rotation = t.transform.rotation;
			let s = new Laya.RenderTexture(e, a);
			i.renderTarget = s, i.render(), i.destroy();
			let n = new Uint8Array(e * a * 4);
			s.getData(0, 0, e, a, n), s.destroy();
			let o = new Laya.Texture2D(e, a, void 0, !1, !0);
			return o.setPixels(n), o
		}
		static testPlayPhoto(t) {
			let e = new Laya.Sprite,
				a = Laya.Texture.create(t, 0, 0, t.width, t.height);
			e.size(t.width, t.height).pivot(t.width / 2, t.height / 2), e.texture = a, mgrPanel.getLayerNode(PANEL_LAYER.TOP).addChild(e), e.pos(_G.canvasWidth / 2, _G.canvasHeight / 2, !0), cc.tween(e).delay(2).to(.5, {
				scaleX: .3,
				scaleY: .3,
				alpha: 0
			}).call(function() {
				e.destroy()
			}).start()
		}
		static playPhotoFlash() {
			let t = new Laya.Sprite;
			t.loadImage(GConfig.img_single_color), t.size(_G.canvasWidth, _G.canvasHeight), t.alpha = 0, mgrPanel.getLayerNode(PANEL_LAYER.TOP).addChild(t), cc.tween(t).to(.08, cc.PROP.ALPHA1).to(.5, cc.PROP.ALPHA0).call(() => {
				t.destroy()
			}).start()
		}
		static playBlackFlash(t = 1, e) {
			let a = new Laya.Sprite;
			a.texture = this.BLACK_TEXTURE, a.size(_G.canvasWidth, _G.canvasHeight), a.alpha = 0, mgrPanel.getLayerNode(PANEL_LAYER.TOP).addChild(a), cc.tween(a).to(.3, cc.PROP.ALPHA1).call(e).delay(t).to(.3, cc.PROP.ALPHA0).call(() => {
				a.destroy()
			}).start()
		}
		static spriteScreenShot(t, e = !0) {
			let a = t.width,
				i = t.height;
			if (!a || !i) return void Logger.error("sprite 必须要有尺寸");
			let s = new Laya.RenderTexture2D(a, i, Laya.RenderTexture2D.FORMAT_R8G8B8A8);
			t.drawToTexture(a, i, 0, 0, s);
			let n = s.getData(0, 0, a, i);
			s.destroy();
			let o = new Laya.Texture2D(a, i, Laya.Texture2D.FORMAT_R8G8B8A8, !1);
			return e ? o.setPixels(Tools.reverseBitmap(n, a, i)) : o.setPixels(n), o
		}
		static addFilterWithSingleton(t, e) {
			var a = t.filters || [];
			a.indexOf(e) >= 0 || (a.push(e), t.filters = a)
		}
		static addMaskFilter(t) {
			this._maskFilter || (this._maskFilter = new Laya.ColorFilter, this._maskFilter.adjustContrast(-100)), this.addFilterWithSingleton(t, this._maskFilter)
		}
		static removeColorMaskFilter(t) {
			Laya.UIUtils.clearFilter(t, Laya.ColorFilter)
		}
		static addMaskFilter2(t) {
			this._maskFilter2 || (this._maskFilter2 = new Laya.ColorFilter, this._maskFilter2.adjustContrast(-80)), this.addFilterWithSingleton(t, this._maskFilter2)
		}
		static local2local(t, e, a) {
			return a = a || new Laya.Point, t.localToGlobal(a, !1), e.globalToLocal(a, !1), a
		}
		static getSelfGlobalPos(t, e, a) {
			return e = e || new Laya.Point, t.parent && (e.setTo(t.x, t.y), t.parent.localToGlobal(e, !1, a)), e
		}
		static node2camera(t, e, a) {
			let i = this.getSelfGlobalPos(t, new Laya.Point);
			return this.global2camera(i, e, a)
		}
		static global2camera(t, e, a) {
			return (a = a || new Laya.Vector3).x = t.x, a.y = t.y, a.z = 0, e.convertScreenCoordToOrthographicCoord(a, a), a
		}
		static worldToScreen(t, e, a) {
			let i = UiHelper.vec3_temp;
			t.viewport.project(e, t.projectionViewMatrix, i), a.x = i.x / Laya.stage.clientScaleX, a.y = i.y / Laya.stage.clientScaleY
		}
		static screenToRay(t, e, a) {
			return a = a || new Laya.Ray(new Laya.Vector3, new Laya.Vector3), this.convertScreenToCanvas(t, this.vec2_temp), e.viewportPointToRay(this.vec2_temp, a), a
		}
		static convertScreenToCanvas(t, e) {
			return (e = e || new Laya.Vector2).x = t.x * Laya.stage.clientScaleX, e.y = t.y * Laya.stage.clientScaleY, e
		}
		static clampSpriteSize(t, e) {
			let a = Math.max(t.width, t.height);
			if (a > 0) {
				if (a > e) {
					let i = e / a;
					t.scale(i, i, !0)
				}
			} else {
				let a = t.texture;
				if (a) {
					let i = function() {
						if (t.destroyed) return;
						let i = Math.max(a.width, a.height);
						if (i > e) {
							let a = e / i;
							t.scale(a, a, !0)
						}
					};
					a.getIsReady() ? i() : a.once(Laya.Event.READY, t, i)
				}
			}
		}
		static playNodeElasticAndMove(t, e, a, i, s, n) {
			i && i.addChild(t);
			let o = this.point_temp;
			o.setTo(e.x, e.y), e.parent.localToGlobal(o, !1), i && i.globalToLocal(o, !1), t.pos(o.x, o.y, !0);
			let r = Mathf.TEMP_POINTS[0];
			r.setTo(a.x, a.y), a.parent.localToGlobal(r, !1), i && i.globalToLocal(r, !1), t.scale(e.globalScaleX, e.globalScaleY, !0);
			let l = Mathf.TEMP_POINTS[1];
			l.setTo(a.globalScaleX, a.globalScaleY), this.playElasticAndMove(t, r, l, s, n)
		}
		static playElasticAndMove(t, e, a, i, s) {
			if (s = s || _G.EMPTY_FUN, i) {
				let t = mgrPanel.getLayerNode(PANEL_LAYER.DIALOG),
					e = new Laya.Sprite;
				t.addChild(e), e.loadImage(GConfig.img_alpha_mask).size(_G.canvasWidth, _G.canvasHeight), e.alpha = 0, cc.tween(e).to(.3, cc.PROP.ALPHA1).delay(1.3).to(.2, cc.PROP.ALPHA0).call(function() {
					e.destroy()
				}).start()
			}
			let n = Math.abs(t.scaleX) * Mathf.sign(a.x),
				o = Math.abs(t.scaleY) * Mathf.sign(a.y);
			cc.tween(t).delay(.2).to(.1, cc.PROP.SCALE0).to(.3, {
				scaleX: 1.2 * n,
				scaleY: 1.2 * o
			}, {
				easing: cc.Ease.backOut
			}).delay(.2).to(1, {
				scaleX: a.x,
				scaleY: a.y,
				x: e.x,
				y: e.y
			}, {
				easing: cc.Ease.sineInOut
			}).call(s).start()
		}
		static playNodeScaleAndJump(t, e, a, i = !0, s = !0, n, o) {
			n = n || mgrPanel.getLayerNode(PANEL_LAYER.DIALOG);
			let r = this.point_temp,
				l = Mathf.TEMP_POINTS[0],
				c = Mathf.TEMP_POINTS[1].setTo(1, 1);
			r.setTo(e.x, e.y), e.parent.localToGlobal(r, !1), n.globalToLocal(r, !1), t.pos(r.x, r.y, !0), l.setTo(a.x, a.y), a.parent.localToGlobal(l, !1), n.globalToLocal(l, !1), i && t.scale(e.globalScaleX, e.globalScaleY, !0), s ? c.setTo(a.globalScaleX, a.globalScaleY) : c.setTo(t.scaleX, t.scaleY), n.addChild(t), this.playScaleAndJump(t, l, c.x, c.y, 1, o)
		}
		static playItemScaleAndJumpToEmpty(t, e, a, i, s) {
			let n = db.get_item_db(t);
			if (!n) return;
			i = i || mgrPanel.getLayerNode(PANEL_LAYER.TIP);
			let o = _G.poolManager.get(ReuseSprite);
			i.addChild(o), o.loadUrl(n.icon), o.pos(e.x, e.y, !0).scale(1, 1, !0).alpha = 1, this.playScaleAndJump(o, a, .3, .3, 0, function() {
				_G.poolManager.put(o), s && s()
			})
		}
		static playItemScaleAndJump(t, e, a, i, s) {
			let n = db.get_item_db(t);
			n && this.playImageScaleAndJump(n.icon, e, a, i, s)
		}
		static playImageScaleAndJump(t, e, a, i, s) {
			i = i || mgrPanel.getLayerNode(PANEL_LAYER.TIP);
			let n = _G.poolManager.get(ReuseSprite);
			return i.addChild(n), n.loadUrl(t), n.pos(e.x, e.y, !0).scale(1, 1, !0).alpha = 1, this.playScaleAndJump(n, a, 1, 1, 1, function() {
				_G.poolManager.put(n), s && s()
			}), n
		}
		static playScaleAndJump(t, e, a = 1, i = 1, s = 1, n) {
			n = n || _G.EMPTY_FUN;
			let o = Mathf.distance2(t.x - e.x, t.y - e.y),
				r = Mathf.lerpFromInverseLerp(.3, 1, 100, 800, o);
			cc.tween(t).to(.2, {
				scaleX: 1.2 * t.scaleX,
				scaleY: 1.2 * t.scaleY
			}, {
				easing: cc.Ease.backOut
			}).parallel(cc.tween().to(r, {
				scaleX: a,
				scaleY: i
			}), cc.tween().delay(.7 * r).to(.3 * r, {
				alpha: s
			}), cc.tween().then(cc.jumpTo(r, e.x, e.y, 100, 1))).call(n).start()
		}
		static playColorEgg(t, e) {
			cc.tween(t).to(.3, {
				scaleX: 1.5 * t.scaleX,
				scaleY: 1.5 * t.scaleY
			}, {
				easing: cc.Ease.backOut
			}).parallel(cc.tween().to(.5, {
				scaleX: 1,
				scaleY: 1
			}), cc.tween().then(cc.jumpTo(.5, e.x, e.y, 100, 1))).hide().start()
		}
		static playMoveTo(t, e, a, i) {
			i = i || _G.EMPTY_FUN, cc.tween(t).delay(.2).to(1, {
				scaleX: a,
				scaleY: a,
				x: e.x,
				y: e.y
			}, {
				easing: cc.Ease.sineInOut
			}).call(i).start()
		}
		static playScaleAndMoveTo(t, e, a, i, s) {
			s = s || _G.EMPTY_FUN, cc.tween(t).delay(.2).to(.2, {
				scaleX: a,
				scaleY: a
			}, {
				easing: cc.Ease.backOut
			}).to(1, {
				scaleX: i,
				scaleY: i,
				x: e.x,
				y: e.y
			}, {
				easing: cc.Ease.sineInOut
			}).call(s).start()
		}
		static playStampEffect(t, e, a = 2) {
			let i, s = !1;

			function playEffect() {
				i.pivot(i.width / 2, i.height / 2), i.scale(3, 3, !0);
				let t = cc.tween(i).to(.2, cc.PROP.SCALE1).call(function() {
					let t = new Laya.Sprite;
					i instanceof Laya.Image ? t.texture = i.source : t.texture = i.texture, i.parent.addChild(i), t.pivot(i.pivotX, i.pivotY), t.pos(i.x, i.y, !0), cc.tween(t).to(.2, {
						scaleX: 1.4,
						scaleY: 1.4,
						alpha: 0
					}).removeSelf(!0).start()
				}).delay(a);
				s && (t = t.to(.2, cc.PROP.ALPHA0).call(function() {
					i.destroy(!0)
				})), t.call(e).start()
			}
			"string" == typeof t ? ((i = new Laya.Sprite).loadImage(t), s = !0) : i = t, i.texture.getIsReady() ? playEffect() : i.texture.once(Laya.Event.LOADED, this, playEffect)
		}
		static setStars(t, e, a, i = !1, s = 0) {
			let n = t.node;
			if (a > n.numChildren) Logger.error("UIHelper.setStars error: max > numChildren.");
			else {
				for (let t = 0; t < e; t++) {
					n.getChildAt(t).visible = !0
				}
				for (let t = e; t < a; t++) {
					n.getChildAt(t).visible = !1
				}
				if (t.updateLayout(0, !0), i)
					for (let t = 0; t < e; t++) {
						let e = n.getChildAt(t);
						e.scale(0, 0, !0), Laya.Tween.to(e, cc.PROP.SCALE1, 200, Laya.Ease.backOut, null, 1e3 * s + 150 * t)
					}
			}
		}
		static changeStars(t, e, a, i = 0) {
			let s = t.node;
			if (a > s.numChildren) return void Logger.error("UIHelper.setStars error: max > numChildren.");
			let n = 0;
			for (let t = 0; t < e; t++) {
				let e = s.getChildAt(t);
				e.visible ? (cc.clearTween(e), e.scale(1, 1, !0)) : (e.visible = !0, e.scale(0, 0, !0), cc.tween(e).delay(i + .15 * n).to(.2, cc.PROP.SCALE1, {
					easing: cc.Ease.backOut
				}).start(), n++)
			}
			n = 0;
			for (let t = a - 1; t >= e; t--) {
				let e = s.getChildAt(t);
				e.visible && (cc.clearTween(e), cc.tween(e).delay(i + .15 * n).to(.2, cc.PROP.SCALE0, {
					easing: cc.Ease.backIn
				}).call(function() {
					e.visible = !1, e.scale(1, 1, !0)
				}).start(), n++)
			}
		}
		static loadTagIconWithPart(t, e, a) {
			let i = db.get_item_db(t);
			this.loadTagIcon(DbExt.getTag1(i), e), this.loadTagIcon(DbExt.getTag2(i), a)
		}
		static loadTagIconWithData(t, e, a) {
			this.loadTagIcon(t.tag1, e), this.loadTagIcon(t.tag2, a)
		}
		static loadTagIcon(t, e) {
			if (e)
				if (t) {
					let a = db.get_tag_type_db(t - 1);
					a && (e.visible = !0, e.loadImage(a.icon))
				} else e.loadImage(null)
		}
		static debug_sprite(t, e = !1) {
			var a, i;
			if (t instanceof Laya.Texture2D) i = Laya.Texture.create(t, 0, 0, t.width, t.height);
			else if (t instanceof Laya.RenderTexture) {
				a = new Laya.Texture2D(t.width, t.height, void 0, !1, !0);
				var s = new Uint8Array(t.width * t.height * 4);
				a.setPixels(t.getData(0, 0, t.width, t.height, s)), i = Laya.Texture.create(a, 0, 0, t.width, t.height)
			} else(a = new Laya.Texture2D(t.width, t.height, void 0, !1, !0)).setPixels(t.getData(0, 0, t.width, t.height)), i = Laya.Texture.create(a, 0, 0, t.width, t.height);
			let n = (new Laya.Sprite).size(t.width, t.height);
			n.texture = i, mgrPanel.getLayerNode(PANEL_LAYER.TOP).addChild(n), n.pivot(t.width / 2, t.height / 2).pos(_G.canvasWidth / 2, _G.canvasHeight / 2, !0), cc.tween(n).to(2, {
				scaleX: 1.5,
				scaleY: 1.5
			}).call(function() {
				i.destroy(), a && a.destroy(), n.destroy(), e && t.destroy()
			}).start()
		}
		static debug_line(t, e, a) {
			t.addChild(new Laya.PixelLineSprite3D(1)).addLine(e, a, Laya.Color.RED, Laya.Color.RED)
		}
		static debug_point(t, e, a = .1) {
			t.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(a, 10, 10))).transform.position = e
		}
		static tweenCamera(t, e, a, i, s, n, o) {
			cc.tween(t, !0).to(e, {
				fieldOfView: s
			}).start();
			let r = _G.pool.get(Laya.Vector3);
			t.transform.localPosition.cloneTo(r);
			let l = _G.pool.get(Laya.Quaternion);
			t.transform.localRotation.cloneTo(l);
			let c = _G.pool.get(Laya.Vector3),
				h = _G.pool.get(Laya.Quaternion);
			cc.tween(t.transform, !0).to(e, {}, {
				easing: n,
				onUpdate: (t, e) => {
					Laya.Vector3.lerp(r, a, e, c), t.localPosition = c, Laya.Quaternion.lerp(l, i, e, h), t.localRotation = h
				}
			}).call(function() {
				_G.pool.put(r), _G.pool.put(l), _G.pool.put(c), _G.pool.put(h), o && o()
			}).start()
		}
		static tweenPosition(t, e, a, i, s = 0, n) {
			let o = _G.pool.get(Laya.Vector3);
			t.transform.localPosition.cloneTo(o);
			let r = _G.pool.get(Laya.Vector3);
			cc.tween(t.transform, !0).delay(s).to(a, {}, {
				easing: i,
				onUpdate: (t, a) => {
					Laya.Vector3.lerp(o, e.transform.localPosition, a, r), t.localPosition = r
				}
			}).call(function() {
				_G.pool.put(o), _G.pool.put(r), n && n()
			}).start()
		}
		static tweenTransform(t, e, a, i, s = 0, n) {
			let o = _G.pool.get(Laya.Vector3);
			t.transform.localPosition.cloneTo(o);
			let r = _G.pool.get(Laya.Quaternion);
			t.transform.localRotation.cloneTo(r);
			let l = _G.pool.get(Laya.Vector3),
				c = _G.pool.get(Laya.Quaternion);
			cc.tween(t.transform, !0).delay(s).to(a, {}, {
				easing: i,
				onUpdate: (t, a) => {
					Laya.Vector3.lerp(o, e.transform.localPosition, a, l), t.localPosition = l, Laya.Quaternion.lerp(r, e.transform.localRotation, a, c), t.localRotation = c
				}
			}).call(function() {
				_G.pool.put(o), _G.pool.put(r), _G.pool.put(l), _G.pool.put(c), n && n()
			}).start()
		}
		static drawToRtx(t, e, a, i, s) {
			e -= t.x, a -= t.y, e |= 0, a |= 0, s._targets = i, i.start(), Laya.RenderSprite.renders[t._renderType]._fun(t, s, e, a), s.flush(), i.end(), i.restore(), s._targets = null
		}
		static playPopup(t, e) {
			mgrRes.loadRes(t, RES_TYPE.IMAGE, function(t) {
				let a = new Laya.Sprite;
				a.texture = t, a.pivot(t.width / 2, t.height / 2).pos(e.x, e.y, !0).scale(0, 0, !0), mgrPanel.getLayerNode(PANEL_LAYER.TIP).addChild(a), cc.tween(a).parallel(cc.tween().to(.3, {
					scaleX: 1,
					scaleY: 1
				}, {
					easing: cc.Ease.backOut
				}), cc.tween().by(1, {
					y: -100
				}), cc.tween().delay(.5).to(.2, {
					alpha: 0
				})).call(function() {
					a.destroy()
				}).start()
			})
		}
		static playItemJumpFromTo(t, e, a, i) {
			let s = db.get_item_db(t);
			if (!s) return;
			let n = _G.poolManager.get(ReuseSprite);
			n.loadUrl(s.icon), mgrPanel.getLayerNode(PANEL_LAYER.TIP).addChild(n), n.pos(e.x, e.y, !0), this.playJumpTo(n, .5, a, function() {
				_G.poolManager.put(n), i && i()
			})
		}
		static playJumpTo(t, e, a, i) {
			t.alpha = 0, t.scale(0, 0, !0), cc.tween(t).parallel(cc.tween().then(cc.jumpTo(e, a.x, a.y, 200, 1)), cc.tween().to(e, {
				alpha: 1,
				scaleX: 1,
				scaleY: 1
			})).call(i).start()
		}
		static playBezierTo(t, e, a, i, s = 1, n) {
			let o = _G.poolManager.get(ReuseSprite);
			mgrPanel.getLayerNode(PANEL_LAYER.TIP).addChild(o), o.loadUrl(t), o.pos(e.x, e.y, !0), o.scale(s, s, !0), cc.tween(o, !0).then(cc.bezierFromTo(i, e, a)).call(function() {
				n && n(), _G.poolManager.put(o)
			}).start()
		}
		static isTouched(t, e) {
			let a = new Laya.Point;
			return this.getSelfGlobalPos(t, a), a.distance(Laya.stage.mouseX, Laya.stage.mouseY) < e
		}
		static setTransformVec3Prop(t, e, a, i, s) {
			let n = t[e];
			n.setValue(a, i, s), t[e] = n
		}
		static tweenTransformVec3Prop(t, e, a, i, s, n) {
			let o = t[e],
				r = o.x,
				l = o.y,
				c = o.z;
			cc.tween(t).to(a, cc.PROP.EMPTY, {
				onUpdate: function(a, h) {
					o.setValue(Mathf.lerp(r, i, h), Mathf.lerp(l, s, h), Mathf.lerp(c, n, h)), t[e] = o
				}
			}).start()
		}
	}
	UiHelper.vec2_temp = new Laya.Vector2, UiHelper.vec3_temp = new Laya.Vector3, UiHelper.point_temp = new Laya.Point, UiHelper.stopEventHandler = function(t) {
		t && t.stopPropagation && t.stopPropagation()
	};
	class SpriteBase2D extends AsyncObject {
		get isResNodeDestroyed() {
			return !!this.resNode && this.resNode.destroyed
		}
		setZorder(t) {
			this.callable ? this.resNode.zOrder = t : this.safeCall(this.setZorder, t)
		}
		get node() {
			if (this.callable) return this.resNode;
			this.logNotFinishError()
		}
		get x() {
			if (this.callable) return this.resNode.x;
			this.logNotFinishError()
		}
		set x(t) {
			this.callable ? this.resNode.x = t : this.callIfLoaded(() => {
				this.resNode.x = t
			})
		}
		get y() {
			if (this.callable) return this.resNode.y;
			this.logNotFinishError()
		}
		set y(t) {
			this.callable ? this.resNode.y = t : this.callIfLoaded(() => {
				this.resNode.y = t
			})
		}
		get scaleX() {
			return this.callable ? this.resNode.scaleX : (this.logNotFinishError(), 0)
		}
		once(t, e, a) {
			this.callable ? this.resNode.once(t, e, a) : this.safeCall(this.once, t, e, a)
		}
		on(t, e, a) {
			this.callable ? this.resNode.on(t, e, a) : this.safeCall(this.on, t, e, a)
		}
		off(t, e, a) {
			this.callable ? this.resNode.off(t, e, a) : this.safeCall(this.off, t, e, a)
		}
		offAll(t) {
			this.callable ? this.resNode.offAll(t) : this.safeCall(this.offAll, t)
		}
		runTween(t) {
			this.callable ? cc.tween(this.resNode).then(t).start() : this.safeCall(this.runTween, t)
		}
		clearTween() {
			this.callable ? cc.clearTween(this.resNode) : this.safeCall(this.clearTween)
		}
		dispose() {
			this.resNode && (this.resNode.destroy(!0), this.resNode = null), super.dispose()
		}
		get enable() {
			return this._isLoaded && this.resNode.visible && this.resNode.active
		}
		set enable(t) {
			this.callable ? (this.resNode.visible = t, this.resNode.active = t) : this.safeCall(t ? this.show : this.hide)
		}
		setName(t) {
			this.callable ? this.resNode.name = t : this.safeCall(this.setName, t)
		}
		addNodeChild(t) {
			this.callable ? t.setParent(this.resNode) : this.safeCall(this.addNodeChild, t)
		}
		addChild(t) {
			if (this.callable) return this.resNode.addChild(t), t
		}
		getChild(t) {
			return this.callable ? UiHelper.getChild(this.resNode, t) : (this.logNotFinishError(), null)
		}
		setParent(t) {
			this.callable ? t.addChild(this.resNode) : this.safeCall(this.setParent, t)
		}
		getParent() {
			return this.callable ? this.resNode.parent : (this.logNotFinishError(), null)
		}
		removeFromParent() {
			this.callable ? this.resNode.removeSelf() : this.safeCall(this.removeFromParent)
		}
		setSize(t, e) {
			this.callable ? this.resNode.size(t, e) : this.safeCall(this.setSize, t, e)
		}
		setPosition(t, e) {
			this.callable ? null == e ? this.resNode.pos(t.x, t.y, !0) : this.resNode.pos(t, e, !0) : null == e ? this.safeCall(this.setPosition, t.x, t.y) : this.safeCall(this.setPosition, t, e)
		}
		setScale(t, e) {
			this.callable ? null == e ? this.resNode.scale(t.x, t.y, !0) : this.resNode.scale(t, e, !0) : null == e ? this.safeCall(this.setScale, t.x, t.y) : this.safeCall(this.setScale, t, e)
		}
		setScaleX(t) {
			this.callable ? this.resNode.scaleX = t : this.safeCall(this.setScaleX, t)
		}
		setRotation(t) {
			this.callable ? this.resNode.rotation = t : this.safeCall(this.setRotation, t)
		}
		setAlpha(t) {
			this.callable ? this.resNode.alpha = t : this.safeCall(this.setAlpha, t)
		}
		show() {
			this.enable = !0
		}
		hide() {
			this.enable = !1
		}
		setSiblingIndex(t) {
			if (this.callable) {
				if (!this.resNode.parent) return; - 1 === t && (t = this.resNode.parent.numChildren - 1), this.resNode.parent.setChildIndex(this.resNode, t)
			} else this.safeCall(this.setSiblingIndex, t)
		}
		setTop() {
			this.setSiblingIndex(-1)
		}
		setBottom() {
			this.setSiblingIndex(0)
		}
		addComponent(t) {
			if (this.callable) return this.resNode.addComponent(t);
			this.safeCall(this.addComponent, t)
		}
		getComponent(t) {
			return this._isLoaded ? this.resNode.getComponent(t) : (this.logNotFinishError(), null)
		}
		convertToWorldSpaceOut(t, e) {
			if (this.callable) {
				let a = Laya.Point.TEMP;
				return a.setTo(t.x, t.y), this.resNode.localToGlobal(a, !1), e || (e = new Vec2), e.x = a.x, e.y = a.y, e
			}
			return this.logNotFinishError(), null
		}
	}
	var ClassUtils = Laya.ClassUtils;
	class ViewBase extends SpriteBase2D {
		constructor() {
			super(...arguments), this.resourceType = Laya.Loader.PREFAB, this._exportNodeInfo = null, this.btnsClickSound = null, this.m_MsgHandler = null, this._needClearTimer = !1
		}
		onResourceLoaded(t) {
			if (!t) return;
			let e = t.create();
			this.createFromNode(e)
		}
		createFromNode(t) {
			if (t) {
				if (this._isLoaded = !0, this.resNode = t, this._exportNodeInfo && this.loadExportNode(t, this._exportNodeInfo), this.onCreateComplete(), this.update && !this.isDisposed) {
					let t = this.resNode.getComponent(UpdateCom);
					t || (t = this.resNode.addComponent(UpdateCom)), t.update = this.update.bind(this)
				}
				return this
			}
		}
		static setClickSound(t, e) {
			this.m_buttonClickSoundName = t, this.m_toggleClickSoundName = e
		}
		static playButtonClickSound(t) {
			"" !== t && (t ? mgrSound.playSound(t) : mgrSound.playSoundIfTimeout(this.m_buttonClickSoundName, "default_click", .1))
		}
		static playToggleClickSound(t) {
			t ? mgrSound.playSound(t) : this.m_toggleClickSoundName && mgrSound.playSoundIfTimeout(this.m_toggleClickSoundName, "default_click", .1)
		}
		static getClass(t) {
			let e = ClassUtils.getClass(t);
			return e || (e = ClassUtils.getRegClass(`script/extensions/component/${t}.ts`)) && ClassUtils.regClass(t, e), e
		}
		loadExportNode(t, e) {
			let a, i, s;
			for (let o = t.numChildren - 1; o >= 0; o--) {
				if (s = e[(a = t.getChildAt(o)).name]) switch (i = a.name.substring(3), s) {
					case "Laya.Button":
						Logger.warn("LayaButton 不会自动注册点击事件");
					case "Laya.Sprite":
					case "Laya.Text":
					case "Laya.Label":
					case "Laya.Image":
					case "Laya.Box":
					case "Laya.View":
					case "Laya.TextInput":
						this[i] = a;
						break;
					default:
						var n = a.getComponent(ViewBase.getClass(s));
						let t, e;
						switch (n || (n = a.addComponent(ViewBase.getClass(s))), this[i] = n, s) {
							case "UIButton":
							case "UIToggle":
								t = `on_click_${i}`, e = this.btnsClickSound && this.btnsClickSound[i], this._bindClickFunc(t, a, e)
						}
				}
				this.loadExportNode(a, e)
			}
		}
		_bindClickFunc(t, e, a) {
			this[t] && "function" == typeof this[t] && e.on("uibutton_click", this, () => {
				ViewBase.playButtonClickSound(a), this[t]()
			})
		}
		dispose() {
			this.resNode && this._needClearTimer && this.unscheduleAllCallbacks(), super.dispose()
		}
		getChildText(t) {
			return this.getChild(t)
		}
		getChildLabel(t) {
			return this.getChild(t)
		}
		getChildSprite(t) {
			return this.getChild(t)
		}
		getChildImage(t) {
			return this.getChild(t)
		}
		registerMsg(t) {
			this.m_MsgHandler || (this.m_MsgHandler = new MsgHandler), this.m_MsgHandler.registerListeners(t, this)
		}
		startProcMsg() {
			this.m_MsgHandler && this.m_MsgHandler.startProcMsg()
		}
		stopProcMsg() {
			this.m_MsgHandler && this.m_MsgHandler.stopProcMsg()
		}
		schedule(t, e) {
			this.resNode.timerLoop(1e3 * t, this, e), this._needClearTimer = !0
		}
		scheduleOnce(t, e) {
			this.resNode.timerOnce(1e3 * t, this, e), this._needClearTimer = !0
		}
		unschedule(t) {
			this.resNode.clearTimer(this, t)
		}
		unscheduleAllCallbacks() {
			this.resNode.timer.clearAll(this)
		}
	}
	ViewBase.m_buttonClickSoundName = null, ViewBase.m_toggleClickSoundName = null;
	class ResLoader {
		constructor(t = "", e = Logger.isDebugLevel) {
			this.destroyed = !1, this.isLoaded = !1, this.isLoading = !1, this.taskName = "", this.urls = [], this.urlData = {
				prefab: [],
				d3: [],
				d2: []
			}, this.calls = [], this.resStartTime = 0, this.callStartTime = 0, this.progressCallback = null, this.completeCallback = null, t && (this.taskName = `(${t})`), this.bLog = e
		}
		get resCount() {
			return this.urls.length
		}
		get totalCallWeight() {
			let t = 0;
			for (var e = this.calls.length - 1; e >= 0; e--) t += this.calls[e].weight;
			return t
		}
		dispose() {
			this.destroyed = !0, this.urlData = null, this.urls = null, this.calls = null, this.completeCallback = null, this.progressCallback = null
		}
		setLoadingCallback(t, e) {
			this.completeCallback = t, this.progressCallback = e || _G.EMPTY_FUN
		}
		add(t, e = Laya.Loader.PREFAB) {
			if (!t) return;
			if (this.isLoading) return void Logger.error(`ResLoader${this.taskName} is loading!`);
			this.bLog && Logger.log(`ResLoader${this.taskName} add:${t} ${e}`);
			let a = this.urls;
			if (t instanceof Array)
				for (let i = 0; i < t.length; i++) {
					let s = t[i];
					"string" == typeof s ? a.push({
						url: s,
						type: e
					}) : a.push(s)
				} else "string" == typeof t ? a.push({
					url: t,
					type: e
				}) : a.push(t)
		}
		addModel(t) {
			this.add(t, RES_TYPE.PREFAB3D)
		}
		addAnimationClip(t) {
			this.add(t, RES_TYPE.ANIMATIONCLIP)
		}
		addPrefab2D(t) {
			this.add(t, RES_TYPE.PREFAB2D)
		}
		addTexture2D(t) {
			this.add(t, RES_TYPE.TEXTURE2D)
		}
		addImage(t) {
			this.add(t, RES_TYPE.IMAGE)
		}
		addBuffer(t) {
			this.add(t, RES_TYPE.BUFFER)
		}
		addCall(t, e = 1) {
			this.calls.push({
				fuc: t,
				weight: e
			})
		}
		clearDuplicateRes() {
			let t = this.urls,
				e = Object.create(null);
			for (let a = t.length - 1; a >= 0; a--) {
				let i = t[a];
				Laya.loader.getRes(i.url) ? t.splice(a, 1) : e[i.url] ? t.splice(a, 1) : e[i.url] = !0
			}
		}
		classifyRes() {
			if (this.clearDuplicateRes(), this.urlData.prefab.length > 0 || this.urlData.d2.length > 0 || this.urlData.d3.length > 0) return;
			let t = this.urls;
			for (let e = t.length - 1; e >= 0; e--) {
				let a = t[e];
				switch (a.type) {
					case RES_TYPE.PREFAB2D:
						this.urlData.prefab.push(a);
						break;
					case RES_TYPE.IMAGE:
					case RES_TYPE.TEXT:
					case RES_TYPE.JSON:
					case RES_TYPE.SOUND:
					case RES_TYPE.ATLAS:
					case RES_TYPE.BUFFER:
						this.urlData.d2.push(a);
						break;
					case RES_TYPE.PREFAB3D:
					case RES_TYPE.MATERIAL:
					case RES_TYPE.TEXTURE2D:
					case RES_TYPE.MESH:
					case RES_TYPE.ANIMATIONCLIP:
						this.urlData.d3.push(a);
						break;
					default:
						t.splice(e, 1), Logger.error(`ResLoader${this.taskName}.classifyRes 未知资源类型:${a.type}`)
				}
			}
		}
		get isEmpty() {
			return 0 == this.resCount
		}
		loadAll() {
			if (this.isLoading) return void Logger.error(`ResLoader${this.taskName} is loading!`);
			if (this.isLoading = !0, this.resStartTime = Timer.time, this.classifyRes(), 0 == this.resCount) return void this.onResLoadComplete(!0);
			let t = this.urlData.prefab.length,
				e = this.urlData.d2.length,
				a = this.urlData.d3.length,
				i = t + e + a + this.totalCallWeight,
				s = 0,
				n = 0,
				o = 0,
				r = 0,
				l = !1,
				c = () => {
					var r = s * t + n * e + o * a;
					this.onProgress(r / i)
				},
				h = t => {
					t || (l = !0), 3 == ++r && (l ? (this.onResLoadComplete(!1), Logger.error(`ResLoader${this.taskName} 资源加载错误.`)) : this.onResLoadComplete(!0))
				};
			this._loadPrefab(h, function(t) {
				s = t, c()
			}), this._load2d(h, function(t) {
				n = t, c()
			}), this._load3d(h, function(t) {
				o = t, c()
			})
		}
		_loadPrefab(t, e, a = 0) {
			if (a < this.urlData.prefab.length) {
				let i = this.urlData.prefab[a++],
					s = i => {
						i ? (e(a / this.urlData.prefab.length), this._loadPrefab(t, e, a)) : this.onComplete(!1)
					},
					n = t => {
						if (t) {
							if (t.json && t.json.loadList && t.json.loadList.length > 0) return void Laya.loader.load(t.json.loadList, Laya.Handler.create(this, s));
							s(!0)
						} else s(!1)
					};
				Laya.loader.load(i.url, Laya.Handler.create(this, n), null, i.type)
			} else t(!0)
		}
		_load2d(t, e) {
			this.urlData.d2.length > 0 ? Laya.loader.load(this.urlData.d2, Laya.Handler.create(this, t), Laya.Handler.create(this, e)) : t(!0)
		}
		_load3d(t, e) {
			this.urlData.d3.length > 0 ? Laya.loader.create(this.urlData.d3, Laya.Handler.create(this, t), Laya.Handler.create(this, e)) : t(!0)
		}
		loadOneByOne(t = 1) {
			this.isLoading ? Logger.error(`ResLoader${this.taskName} is loading!`) : (this.isLoading = !0, this.resStartTime = Timer.time, this.clearDuplicateRes(), this._loadOneByOne(1e3 * t))
		}
		_loadOneByOne(t) {
			if (this.destroyed) return;
			let e = this.urls.shift();
			e ? mgrRes.loadRes(e.url, e.type, a => {
				a ? Laya.timer.once(t, this, this._loadOneByOne, [t]) : (Logger.error(`ResLoader${this.taskName}.loadOneByOne error, url:${e.url}`), this.onResLoadComplete(!1))
			}) : this.onResLoadComplete(!0)
		}
		onResLoadComplete(t) {
			this.bLog && Logger.log(`ResLoader 资源加载结束:${t}，耗时：${Mathf.round(Timer.time-this.resStartTime,2)}`), t ? (this.bLog && Logger.log(`ResLoader${this.taskName} 开始执行call!`), this.callStartTime = Timer.time, this._processCalls()) : this.onComplete(!1)
		}
		_processCalls(t = 0) {
			if (this.destroyed || !this.calls) return void(this.bLog && Logger.log(`ResLoader${this.taskName} _processCalls already dispose!`));
			if (this.curCallIndex = t, t >= this.calls.length) return this.onProgress(1), void this.onComplete(!0);
			this.bLog && Logger.log(`ResLoader${this.taskName} 执行索引：`, t);
			let e = 0;
			for (var a = 0; a < t; a++) e += this.calls[a].weight;
			this.onProgress((e + this.resCount) / (this.totalCallWeight + this.resCount));
			let i = this.calls[t];
			try {
				let e = () => {
					Laya.timer.frameOnce(1, this, this._processCalls, [t + 1])
				};
				i.fuc(e)
			} catch (e) {
				Logger.catchError(`ResLoader${this.taskName}._processCalls index:${t}`, e), this.onComplete(!1)
			}
		}
		setParent(t) {
			this.parent && Logger.warn(`ResLoader${this.taskName}.setParent: parent already exists.`), this.parent = t
		}
		setCallProgress(t) {
			if (this.curCallIndex < this.calls.length) {
				let a = 0;
				for (var e = 0; e < this.curCallIndex; e++) a += this.calls[e].weight;
				a += this.calls[this.curCallIndex].weight * t, this.onProgress((a + this.resCount) / (this.totalCallWeight + this.resCount))
			}
		}
		onProgress(t) {
			this.progressCallback && this.progressCallback(t), this.parent && this.parent.setCallProgress(t), this.bLog && Logger.log(`ResLoader${this.taskName} 加载进度: [${Mathf.round(t,2)}]`)
		}
		onComplete(t) {
			if (Logger.log(`ResLoader${this.taskName} 执行完成，耗时：${Mathf.round(Timer.time-this.callStartTime,2)}`), Logger.log(`ResLoader${this.taskName} 总耗时：${Mathf.round(Timer.time-this.resStartTime,2)}`), this.isLoaded = !0, this.completeCallback) try {
				this.completeCallback(t)
			} catch (e) {
				Logger.catchError(`ResLoader${this.taskName}.onComplete[${t}]`, e)
			}
			this.dispose()
		}
	}
	class PanelBase extends ViewBase {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.UI, this.panelStyle = 2, this.isFocus = !1, this.bCloseMsg = !1, this.bResetRootNode = !0
		}
		create(t) {
			if (this._isLoaded) return void(t && t(!1));
			if (this._isLoading) return void(t && t(!1));
			if (!this.resourceName) return Logger.error("AsyncObject.create: can't find resourceName."), void(t && t(!1));
			this._isLoading = !0;
			let e = mgrRes.tryLoadRes(this.resourceName);
			e ? this.onResLoaded(e, t) : (Logger.debug("异步加载资源:", this.resourceName), mgrRes.loadRes(this.resourceName, this.resourceType, e => {
				this.onResLoaded(e, t)
			}))
		}
		onResLoaded(t, e) {
			this._isLoading = !1, t ? this.isDisposed ? e && e(!0) : (this._isLoaded = !0, this.fCreateCallback = e, this.onResourceLoaded(t), this.isDisposed || this.processDelayCalls()) : (e && e(!1), this.onResourceLoadedFail())
		}
		onCreateComplete() {
			let t = new ResLoader(this.resourceName);
			this.addPreloadRes(t), t.setLoadingCallback(() => {
				this.fCreateCallback && this.fCreateCallback(!0), mgrPanel.addPanel(this), this.bResetRootNode && this.resNode.size(_G.canvasFitWidth, _G.canvasFitHeight).pos(_G.left, _G.top), this.mask && this.mask.size(_G.canvasWidth, _G.canvasHeight).pos(-_G.left, -_G.top, !0), this.openAndCloseAnimEnabled && this.onDialogOpenAnim(this.onOpenComplete.bind(this)), this.buildUi(), this.openAndCloseAnimEnabled || this.onOpenComplete()
			}), t.loadAll()
		}
		onOpenComplete() {
			this.regGuide()
		}
		regGuide() {}
		addPreloadRes(t) {}
		onFocus(t) {
			this.isFocus = t
		}
		close(t) {
			!t && this.openAndCloseAnimEnabled ? this.onDialogCloseAnim(this._close.bind(this)) : this._close()
		}
		_close() {
			this.isLoaded ? mgrPanel.closePanel(this) : this.dispose(), this.bCloseMsg && _G.sendMsg(BASE_MSG.UI_PANEL_CLOSED, this)
		}
		onDialogOpenAnim(t) {
			let e = this.mask;
			e && (e.alpha = 0, Laya.Tween.to(e, cc.PROP.ALPHA1, 300));
			let a = this.bg;
			a && (a.scale(0, 1.4, !0).alpha = 0, Laya.Tween.to(a, PanelBase.OPEN_PROP, 400, Laya.Ease.backOut)), this.scheduleOnce(.4, t)
		}
		onDialogCloseAnim(t) {
			let e = this.mask;
			e && Laya.Tween.to(e, {
				alpha: 0
			}, 150);
			let a = this.bg;
			a && Laya.Tween.to(a, PanelBase.CLOSE_PROP, 200, Laya.Ease.backIn), this.scheduleOnce(.2, t)
		}
	}
	PanelBase.OPEN_PROP = {
		scaleX: 1,
		scaleY: 1,
		alpha: 1
	}, PanelBase.CLOSE_PROP = {
		scaleX: 1.4,
		scaleY: 0,
		alpha: 0
	};
	const tip_str = [".", "..", "..."];
	class PanelFadeIn extends PanelBase {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.resourceName = "PanelFadeIn", this.mask = null, this.text = null, this.m_tipString = "", this.m_tipDeltaTime = 0, this.m_tipIndex = 0
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), UiHelper.registerTouchEvent(e, UiHelper.stopEventHandler, UiHelper.stopEventHandler, UiHelper.stopEventHandler);
			let a = new Laya.Sprite;
			e.addChild(a), a.size(_G.canvasWidth, _G.canvasHeight), a.graphics.drawRect(0, 0, _G.canvasWidth, _G.canvasHeight, "#000000"), this.mask = a;
			let i = new Laya.Label;
			e.addChild(i), i.color = "#ffffff", i.centerX = 0, i.centerY = -100, i.fontSize = 30, this.text = i, this.createFromNode(e)
		}
		buildUi() {
			PanelFadeIn.isWorking = !0, this.mask.alpha = 0, this.fadeIn()
		}
		dispose() {
			PanelFadeIn.isWorking = !1, PanelFadeIn.bCloseMsg = !1, super.dispose()
		}
		update(t) {
			tip_str && this.m_tipString && (this.m_tipDeltaTime -= t, this.m_tipDeltaTime <= 0 && (this.m_tipDeltaTime = .5, this.text.text = this.m_tipString + tip_str[this.m_tipIndex++ % 3]))
		}
		fadeIn() {
			let t, e = this.context;
			e.maskColor && this.mask.graphics.drawRect(0, 0, 100, 500, e.maskColor), e.tip ? (t = .7, this.text.text = e.tip, this.m_tipString = e.tip, this.text.alpha = 0, cc.tween(this.text).delay(1).to(.2, cc.PROP.ALPHA1)) : (t = 1, this.text.text = "", this.m_tipString = "");
			let a = e.fadinTime || .2;
			cc.tween(this.mask).delay(1).to(a, {
				alpha: t
			}).start(), this.startLoading()
		}
		startLoading() {
			let t = this.context.loader;
			t ? (t.setLoadingCallback(this.beforeOpenPanel.bind(this)), t.loadAll()) : this.beforeOpenPanel()
		}
		beforeOpenPanel() {
			let t = this.context;
			t.callbackBeforOpen ? t.callbackBeforOpen().then(() => this.openPanel()) : this.openPanel()
		}
		openPanel() {
			let t = this.context;
			t.panelClass ? (PanelFadeIn.isOpening = !0, mgrPanel.openPanel(t.panelClass, t.context, PanelFadeIn.bCloseMsg, () => this.fadeOut())) : this.fadeOut()
		}
		fadeOut() {
			Laya.Tween.to(this.mask, {
				alpha: 0
			}, 200, Laya.Ease.linearNone, Laya.Handler.create(this, this.close))
		}
	}
	var PANEL_LAYER;
	PanelFadeIn.isWorking = !1, PanelFadeIn.isOpening = !1, PanelFadeIn.bCloseMsg = !1,
		function(t) {
			t[t.BOTTOM = 0] = "BOTTOM", t[t.UI = 1] = "UI", t[t.DIALOG = 2] = "DIALOG", t[t.TIP = 3] = "TIP", t[t.FUNCTION = 4] = "FUNCTION", t[t.TOP = 5] = "TOP"
		}(PANEL_LAYER || (PANEL_LAYER = {}));
	const CLASS_KEY = "__mgr_class__",
		FLAG_OPENING = "__mgr_flag_open__",
		FLAG_LOADED = "__mgr_flag_loaded__";
	class mgrPanel extends _mgrBase {
		static onload() {
			if (this.isLoaded) return;
			this.panelQueue = UIRoot.instance.owner.addComponent(PanelQueue);
			let t = PANEL_LAYER.TOP + 1;
			UIRoot.instance.createLayerNode(t);
			for (let e = 0; e < t; e++) this.view_stack.push([]);
			this.isLoaded = !0
		}
		static onDestory() {
			this.isLoaded = !1, this.view_stack = [
				[],
				[],
				[],
				[],
				[]
			]
		}
		static getLayerNode(t) {
			return UIRoot.instance.getLayerNode(t)
		}
		static pushStack(t, e) {
			let a = this.view_stack[e];
			a ? a.push(t) : Logger.error(`push panel invalid layer: ${e}`)
		}
		static popStack(t) {
			let e = this.view_stack[t];
			if (e) return e.pop();
			Logger.error(`pop panel invalid layer:${t}}`)
		}
		static peekStack(t, e) {
			let a = this.view_stack[t];
			if (a) {
				if (null == e) return a[a.length - 1];
				for (var i = e; i >= 0; i--)
					if (a[i]) return a[i];
				return null
			}
			Logger.error(`pop panel invalid layer:${t}}`)
		}
		static removeAndDispose(t) {
			if (t) {
				let e = this.view_stack[t.panelLayer],
					a = -1;
				for (let i = 0; i < e.length; i++)
					if (e[i] === t) {
						t[CLASS_KEY][FLAG_OPENING] = !1, e.splice(i, 1), a = i;
						break
					} return a < 0 && Logger.error(`can't remove panel:${t.resourceName} in layer:${t.panelLayer}`), t.dispose(), a
			}
			return -1
		}
		static closePanel(t) {
			if (!t || !t.isLoaded) return;
			t.isFocus && t.onFocus(!1);
			let e = t.panelLayer,
				a = t.panelStyle,
				i = this.removeAndDispose(t);
			if (i > 0) {
				let t = this.peekStack(e, i - 1);
				if (!t) return;
				0 == t.panelStyle || (t.panelStyle == a ? t.show() : 1 == a && t.show()), this.peekStack(e) === t && t.onFocus(!0)
			}
		}
		static hasLoaded(t) {
			return !!t[FLAG_LOADED]
		}
		static getPanelClass(t) {
			return "string" == typeof t ? _G.requireModule(t) : t
		}
		static openPanel(t, e, a = !1, i) {
			let s = this.getPanelClass(t),
				n = new s(e);
			this.openPanelInstance(n, s, a, i)
		}
		static openPanelInstance(t, e, a = !1, i) {
			let s = this.getPanelClass(e);
			t[CLASS_KEY] = s, t.bCloseMsg = a, t.create(function(e) {
				e && (s[FLAG_LOADED] = !0), i && i(e), Logger.debug("打开:" + t.resourceName, e)
			})
		}
		static openPanelWithFadeIn(t, e, a) {
			let i = this.getPanelClass(t);
			if (this.hasLoaded(i)) this.openPanel(i, e, !1, a);
			else {
				let t;
				t = {
					panelClass: i,
					context: e,
					tip: ""
				}, a && (t.callbackBeforOpen = function() {
					return new Promise(function(t, e) {
						a(!0), t()
					})
				}), PanelFadeIn.isWorking ? PanelFadeIn.isOpening ? (Logger.error("PanelFadeIn.isOpening."), this.openPanel(i, e, !1, a)) : (PanelFadeIn.bCloseMsg = !0, this.openPanelWithPriority(PanelFadeIn, t, void 0, !1), Logger.warn("mgrPanel.openPanelWithFadeIn: PanelFadeIn is opening.")) : this.openPanel(PanelFadeIn, t)
			}
		}
		static openPanelWithPriority(t, e, a = 0, i = !0) {
			this.panelQueue.openPanelWithPriority(t, e, a, i)
		}
		static openPanelWithSingleton(t, e, a) {
			let i = this.getPanelClass(t),
				s = this.findPanel(i);
			if (s) {
				a && a(!0), s.setContext(e), s.setTop(), s.show();
				let t = this.view_stack[s.panelLayer],
					i = t.indexOf(s);
				i >= 0 && (t.splice(i, 1), t.push(s))
			} else {
				if (i[FLAG_OPENING]) return void Logger.debug(`${i} is opening`);
				i[FLAG_OPENING] = !0, this.openPanel(i, e, void 0, function(t) {
					i[FLAG_OPENING] = !1, a && a(t)
				})
			}
		}
		static findPanel(t, e) {
			for (let a = 0; a < this.view_stack.length; a++)
				if (null == e || e == a) {
					const e = this.view_stack[a];
					for (let a = 0; a < e.length; a++) {
						const i = e[a];
						if (i[CLASS_KEY] == t) return i
					}
				} return null
		}
		static findViewByName(t) {
			let e = this.getPanelClass(t);
			return this.findPanel(e)
		}
		static addPanel(t) {
			if (!t.isLoaded) return void Logger.error("panel has not loaded, please create first!");
			let e = t.panelLayer,
				a = t.panelStyle,
				i = this.peekStack(e);
			this.pushStack(t, e), t.setParent(this.getLayerNode(e)), i && (0 == i.panelStyle || (i.panelStyle == a ? i.hide() : 1 == a && i.hide()), i.onFocus(!1)), t.onFocus(!0)
		}
		static disposeAllPanel() {
			for (let t = 0; t < this.view_stack.length; t++) {
				const e = this.view_stack[t];
				for (let t = 0; t < e.length; t++) {
					const a = e[t];
					a[CLASS_KEY][FLAG_OPENING] = !1, a.dispose()
				}
				this.view_stack[t] = []
			}
		}
		static closeTop(t) {
			if (null == t)
				for (let t = this.view_stack.length - 1; t >= 0; t--) {
					const e = this.view_stack[t];
					for (let t = e.length - 1; t >= 0; t--) {
						const a = e[t];
						if (a.isLoaded) return a.close(), void Logger.debug("close top:", a.resourceName)
					}
				} else {
					const e = this.view_stack[t];
					for (let t = e.length - 1; t >= 0; t--) {
						const a = e[t];
						if (a.isLoaded) return a.close(), void Logger.debug("close top:", a.resourceName)
					}
				}
		}
		static closeLayer(t) {
			for (let e = this.view_stack.length - 1; e >= 0; e--)
				if (null == t || e == t) {
					const t = this.view_stack[e];
					for (let e = t.length - 1; e >= 0; e--) {
						const a = t[e];
						a.isLoaded && a.close()
					}
				}
		}
		static debugPanels() {
			console.log("------ debug panels start ------");
			for (let t = 0; t < this.view_stack.length; t++) {
				const e = this.view_stack[t];
				for (let a = 0; a < e.length; a++) {
					const i = e[a];
					console.log(`layer:[${t}]  name:[${i.resourceName}] active:[${i.enable}]`)
				}
			}
			console.log("------ debug panels end ------")
		}
	}
	mgrPanel.isLoaded = !1, mgrPanel.view_stack = [];
	class mgrScene extends _mgrBase {
		static onLoad() {}
		static get isBusy() {
			return this._isBusy
		}
		static runScene(t, e, a) {
			Logger.log("mgrScene startRun."), this._isBusy ? Logger.error("mgr scene is busy") : (this._isBusy = !0, e ? (mgrPanel.isLoaded || mgrPanel.onload(), mgrPanel.openPanelWithSingleton(e, void 0, e => {
				this.startLoading(t, a)
			})) : this.startLoading(t, a))
		}
		static startLoading(t, e) {
			let a;
			_G.sendMsg(BASE_MSG.RES_LOAD_START, "收集能量"), this.runningScene && (this.runningScene.onExit(), this.runningScene = null);
			try {
				a = new t
			} catch (t) {
				return void Logger.error("mgrScene.runScene:", t)
			}
			this.nextScene = a, this.nextSceneparams = e;
			let i = a.getResLoader();
			null == i ? this.onResComplete(!0) : (i.setLoadingCallback(this.onResComplete.bind(this), this.onResProgress.bind(this)), i.loadAll(), Logger.log("mgrScene 开始加载."))
		}
		static onResProgress(t) {
			_G.sendMsg(BASE_MSG.RES_LOAD_PROGRESS, t)
		}
		static onResComplete(t) {
			if (Logger.log("mgrScene 加载完成.", t), t) {
				this.runningScene = this.nextScene, this.nextScene = null;
				let t = this.nextSceneparams;
				this.nextSceneparams = null, this._isBusy = !1, _G.sendMsg(BASE_MSG.RES_LOAD_END), this.runningScene.onEnter(t)
			} else Logger.error("mgrSceen.onResComplete error.")
		}
	}
	mgrScene._isBusy = !1, mgrScene.runningScene = null, mgrScene.nextScene = null, mgrScene.nextSceneparams = null;
	class SceneBase {
		constructor() {
			this.msgHandler = null
		}
		registerMsg(t) {
			this.msgHandler || (this.msgHandler = new MsgHandler), this.msgHandler.registerListeners(t), this.msgHandler.startProcMsg()
		}
		stopMsgHandler() {
			this.msgHandler && this.msgHandler.stopProcMsg()
		}
	}
	let merged_cfg = !0,
		compress_cfg = !0;
	class CfgLoader {
		static init(t) {
			let e = e => {
				this.loaded = !0, _G.sendMsg(BASE_MSG.CFG_LOAD_FINISH), t && t(e)
			};
			this.loaded ? e(!0) : (merged_cfg ? compress_cfg ? this.loadFromText(e) : this.loadFromJson(e) : console.error("暂时未接入非合并配置表的读取方式!!!"), this.loaded = !0, _G.sendMsg(BASE_MSG.CFG_LOAD_FINISH))
		}
		static loadFromJson(t) {
			mgrRes.loadRes("res/cfg/allCfgDb.json", Laya.Loader.JSON, e => {
				e && this.initCfg(e), t(!!e)
			})
		}
		static loadFromText(t) {
			mgrRes.loadRes("res/cfg/allCfgDb.txt", RES_TYPE.BUFFER, e => {
				if (e) {
					let t = Tools.decompressArrToStr(e),
						a = JSON.parse(t);
					this.initCfg(a)
				}
				t(!!e)
			})
		}
		static initCfg(t) {
			db.setAllDbs(t), this.processCfg()
		}
		static processCfg() {
			let t = db.get_item_db_map(),
				e = db.get_shoe_part_db_map();
			Tools.forEachMap(e, function(e, a) {
				t[e] && console.error("物品重复"), a.type = 2, a.subType = 2, t[e] = a
			});
			let a = db.get_quest_db_map(),
				i = db.get_color_egg_db_map();
			Tools.forEachMap(i, function(t, e) {
				a[t] && console.error("任务重复"), e.type = 11, a[t] = e
			})
		}
	}
	CfgLoader.loaded = !1;
	class _mBase {
		constructor(t) {
			this.m_MsgHandler = null, this.m_MsgHandler = t
		}
		start() {}
		stop() {}
		registerMsg(t) {
			this.m_MsgHandler ? (this.m_MsgHandler.registerListeners(t), this.m_MsgHandler.startProcMsg()) : Logger.error("找不到MsgHandler")
		}
		startProcMsg() {
			this.m_MsgHandler && this.m_MsgHandler.startProcMsg()
		}
		stopProcMsg() {
			this.m_MsgHandler && this.m_MsgHandler.stopProcMsg()
		}
		sendMsg(t, e) {
			this.m_MsgHandler && this.m_MsgHandler.sendMsg(t, e)
		}
	}
	class mUp extends _mBase {
		constructor() {
			super(...arguments), this.allUpDbs = []
		}
		onload() {
			this.loadData(), this.m_data || (this.m_data = {
				levels: {},
				exps: {},
				autoUp: {
					byItem: {},
					byGoal: {}
				}
			}, this.saveData()), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				[BASE_MSG.GOAL_STATE_CHANGE]: this.onMsgGoalStateChange.bind(this)
			})
		}
		loadData() {
			this.m_data = FileRecord.getData("up_data")
		}
		saveData() {
			FileRecord.setData("up_data", this.m_data)
		}
		onMsgItemChange(t) {
			if (t.changeCount > 0) {
				let e = this.m_data.autoUp.byItem[t.itemId];
				if (e)
					for (let a = e.length - 1; a >= 0; a--) e[a].costCount <= t.count && this.tryAutoLvupAttrByItem(t.itemId, e[a])
			}
		}
		onMsgGoalStateChange(t) {
			if (t.isDone) {
				let e = this.m_data.autoUp.byGoal[t.goalId];
				if (e)
					for (let a = e.length - 1; a >= 0; a--) this.tryAutoLvupAttrByGoal(t.goalId, e[a])
			}
		}
		getUpId(t, e) {
			let a = db.get_item_db(t);
			return a ? a[e] : null
		}
		setDbs(t, e) {
			this.allUpDbs[t] = e
		}
		initDbGetter(t) {
			this._upGetter = t
		}
		getAllUp(t, e = "baseUp") {
			let a = db.get_item_db(t),
				i = a[e];
			if (!i) return null;
			let s = this.allUpDbs[a.subType];
			return s ? s[i] : (Logger.error(`mUp.setDbs first! type:${a.subType}.`), null)
		}
		getMaxLevel(t, e = "baseUp") {
			return this.getAllUp(t, e).length - 1
		}
		getUpDb(t, e, a = "baseUp") {
			null == e && (e = this.getLevel(t, a));
			let i = this.getAllUp(t, a);
			if (i) {
				return i[e]
			}
			return null
		}
		getLevel(t, e = "baseUp") {
			let a = this.getUpId(t, e);
			return this.m_data.levels[a] || 0
		}
		isUnlock(t, e = "baseUp") {
			return this.getLevel(t, e) > 0
		}
		isMax(t, e = "baseUp") {
			return this.getLevel(t, e) >= this.getMaxLevel(t, e)
		}
		isUpable(t, e = "baseUp", a = !1) {
			let i = db.get_item_db(t);
			if (!i) return !1;
			let s = i[e];
			if (!s) return !1;
			if (this.isMax(t, e)) return !1;
			if (a) return !0;
			let n = this.getUpDb(t, void 0, e);
			if (n.goalId && BaseFacade.mGoal.exists(n.goalId) && !BaseFacade.mGoal.isDone(n.goalId)) return !1;
			let o = this.m_data.exps[s];
			if (null == o) {
				if (this.getLackItemId(n)) return !1
			} else if (o < n.reqCnt1) return !1;
			return !0
		}
		tryActive(t, e = "baseUp") {
			let a = this.getUpId(t, e);
			if (null == this.m_data.levels[a]) {
				let a = this.getAllUp(t, e);
				if (a) {
					let i = 0;
					"" !== a[0].reqId1 || 0 !== a[0].reqCnt1 || a[0].goalId ? this.registerAutoUp(t, e, a[i]) : (this.lvupAttr(t, e), i = 1);
					for (let t = 0; t < a.length; t++) a[t].goalId && BaseFacade.mGoal.register(a[t].goalId, {
						type: "",
						data: ""
					})
				}
			}
		}
		registerAutoUp(t, e, a) {
			let i = this.m_data.autoUp;
			if (!a.reqId1 || !a.goalId)
				if (a.reqId1) {
					let s = i.byItem[a.reqId1],
						n = {
							itemId: t,
							attrName: e,
							costCount: a.reqCnt1
						};
					if (null == s) i.byItem[a.reqId1] = [n];
					else {
						for (let i = s.length - 1; i >= 0; i--) {
							let n = s[i];
							if (n.itemId == t && n.attrName == e) return void Logger.error(`registerAutoUp reqId:[${a.reqId1}] is exists. itemId:[${t}] attrName:[${e}]`)
						}
						s.push(n)
					}
				} else if (a.goalId) {
				let s = i.byGoal[a.goalId],
					n = {
						itemId: t,
						attrName: e
					};
				if (null == s) i.byGoal[a.goalId] = [n];
				else {
					for (let i = s.length - 1; i >= 0; i--) {
						let n = s[i];
						if (n.itemId == t && n.attrName == e) return void Logger.error(`registerAutoUp goalId:[${a.goalId}] is exists. itemId:[${t}] attrName:[${e}]`)
					}
					s.push(n)
				}
			}
		}
		addExp(t, e = "baseUp", a) {
			let i = this.getUpId(t, e),
				s = this.m_data.exps,
				n = s[i] || 0;
			n += a, s[i] = n, this.saveData(), this.onUpStateChange(t, e, null, n)
		}
		getExp(t, e = "baseUp") {
			let a = this.getUpId(t, e);
			return this.m_data.exps[a] || 0
		}
		lvupAttr(t, e = "baseUp", a = !1) {
			return !!this.isUpable(t, e, a) && this._produce(t, e, a)
		}
		tryAutoLvupAttrByItem(t, e) {
			if (this.lvupAttr(e.itemId, e.attrName)) {
				let a = this.getLevel(e.itemId, e.attrName),
					i = this.getUpDb(e.itemId, a, e.attrName),
					s = this.m_data.autoUp.byItem[t],
					n = s.indexOf(e);
				n >= 0 ? s.splice(n, 1) : Logger.error(`找不到自动升级数据[item] upItem:${e.itemId} attr:${e.attrName}`), this.saveData(), i.autoUp && a !== this.getMaxLevel(e.itemId, e.attrName) && this.registerAutoUp(e.itemId, e.attrName, i)
			} else Logger.error("自动升级是一定会成功的.")
		}
		tryAutoLvupAttrByGoal(t, e) {
			if (this.lvupAttr(e.itemId, e.attrName)) {
				let a = this.getLevel(e.itemId, e.attrName),
					i = this.getUpDb(e.itemId, a, e.attrName),
					s = this.m_data.autoUp.byGoal[t],
					n = s.indexOf(e);
				n >= 0 ? s.splice(n, 1) : Logger.error(`找不到自动升级数据[goal] upItem:${e.itemId} attr:${e.attrName}`), this.saveData(), i.autoUp && a !== this.getMaxLevel(e.itemId, e.attrName) && this.registerAutoUp(e.itemId, e.attrName, i)
			} else Logger.error("自动升级是一定会成功的")
		}
		_produce(t, e, a) {
			let i = this.getUpDb(t, void 0, e);
			i.goalId && BaseFacade.mGoal.exists(i.goalId) && BaseFacade.mGoal.unregister(i.goalId);
			let s = this.getUpId(t, e),
				n = this.m_data.exps[s],
				o = this.m_data.levels,
				r = null;
			if (a || (null == n ? i.reqId1 && BaseFacade.mItem.subItem(i.reqId1, i.reqCnt1, 8) : (this.m_data.exps[s] = 0, r = 0), i.reqId2 && BaseFacade.mItem.subItem(i.reqId2, i.reqCnt2, 8)), o[s] ? o[s]++ : o[s] = 1, this.saveData(), this.onUpStateChange(t, e, o[s], r), BaseFacade.mGoal.commit(BASE_ACTION_ID.LEVEL_UP, o[s], s, 2), i.commitKey && (BaseFacade.mGoal.commit(BASE_ACTION_ID.LEVEL_UP_KEY, 1, i.commitKey), BaseFacade.mGoal.commit(BASE_ACTION_ID.LEVEL_UP_KEY_MAX, o[s], i.commitKey, 2)), i.dropId) {
				let t = BaseFacade.mDrop.makeDrop(i.dropId);
				for (let e = 0; e < t.length; e++) {
					const a = t[e];
					BaseFacade.mItem.addItem(a.itemId, a.count, 8)
				}
			}
			return i.statistics && GameStatistics.statisCommonEvent(i.statistics), !0
		}
		getLackItemId(t) {
			return BaseFacade.mItem.enoughItem(t.reqId1, t.reqCnt1) ? t.reqId2 ? BaseFacade.mItem.enoughItem(t.reqId2, t.reqCnt2) ? null : t.reqId2 : null : t.reqId1
		}
		onUpStateChange(t, e, a, i) {
			let s = _G.pool.getObject("UpChangeEvent");
			s.itemId = t, s.attr = e, s.level = a, s.exp = i, this.sendMsg(BASE_MSG.UP_STATE_CHANGE, s), _G.pool.put(s)
		}
		getGoalId(t, e, a = "baseUp") {
			if (null == e) {
				let e = this.getNextGoalLevel(t, null, a);
				return e >= 0 ? this.getUpDb(t, e, a).goalId : null
			}
			return this.getUpDb(t, e, a).goalId
		}
		checkGoal(t, e, a = "baseUp") {
			let i = this.getUpDb(t, e, a);
			return !i.goalId || !BaseFacade.mGoal.exists(i.goalId) || BaseFacade.mGoal.isDone(i.goalId)
		}
		getNextGoalLevel(t, e, a = "baseUp") {
			null == e && (e = this.getLevel(t, a));
			let i = this.getMaxLevel(t, a) - 1;
			for (let s = e; s <= i; s++)
				if (!this.checkGoal(t, s, a)) return s;
			return -1
		}
	}

	function sort_item_id_by_order(t, e) {
		return Tools.sort_db_by_order(db.get_item_db(t), db.get_item_db(e))
	}
	class mItem extends _mBase {
		constructor() {
			super(...arguments), this.uid = "", this._bNeedInited = !1
		}
		onload() {
			this.loadData(), this.m_data || (this._bNeedInited = !0, this.m_data = {}), this.registerMsg({
				[BASE_MSG.ITEM_ADD]: this.onMsgItemAdd.bind(this)
			})
		}
		start() {
			this._bNeedInited && this.resetItems()
		}
		resetItems() {
			let t = this.m_data,
				e = db.get_item_db_map();
			Tools.forEachMap(e, (e, a) => {
				t[e] = a.initCount, a.initCount > 0 && this.tryActiveUp(e)
			}), this.m_data = t, this.saveData()
		}
		loadData() {
			this.m_data = FileRecord.getData("items_data")
		}
		saveData() {
			FileRecord.setData("items_data", this.m_data)
		}
		onMsgItemAdd(t) {
			this.addItem(t.itemId, t.count, t.reason), _G.sendMsg(BASE_MSG.UI_SHOW_ITEMS, t)
		}
		getAllItemInBag() {
			return this.m_data
		}
		getItemByType(t, e, a) {
			let i = [],
				s = this.getAllItemInBag();
			if (s) {
				let n;
				Tools.forEachMap(s, (s, o) => {
					o > 0 && (n = db.get_item_db(s)).type == t && (null == e ? i.push(s) : e == n.subType && (null == a ? i.push(s) : a == n.gid && i.push(s)))
				})
			}
			return i
		}
		static getAllItem(t, e, a) {
			let i = [],
				s = db.get_item_db_map();
			return s && Tools.forEachMap(s, (s, n) => {
				n.type == t && (null == e ? i.push(s) : e == n.subType && (null == a ? i.push(s) : a == n.gid && i.push(s)))
			}), i
		}
		getItemCountByType(t, e, a) {
			let i = 0,
				s = this.getAllItemInBag();
			if (s) {
				let n;
				Tools.forEachMap(s, (s, o) => {
					o > 0 && (n = db.get_item_db(s)).type == t && (null == e ? i++ : e == n.subType && (null == a ? i++ : a == n.gid && i++))
				})
			}
			return i
		}
		getItemCount(t) {
			return BaseFacade.mAutoIncreaseItem.refresh(t), this.m_data[t] || 0
		}
		enoughItem(t, e) {
			return e <= 0 || this.getItemCount(t) >= e
		}
		isOwned(t) {
			return this.enoughItem(t, 1)
		}
		addItem(t, e, a) {
			if (null == e) return Logger.error("add item null count"), !1;
			if (e <= 0) return !1;
			let i = this.getItemCount(t);
			0 == i && this.tryActiveUp(t);
			let s = db.get_item_db(t);
			if (s.autoSell) {
				if (0 != i) return void this.autoSellItem(t, e);
				this.autoSellItem(t, e - 1), e = 1
			}
			let n = i + e;
			this.m_data[t] = n, this.saveData();
			let o = _G.pool.getObject("ItemChangeEvent");
			return o.uid = this.uid, o.itemId = t, o.count = n, o.lastCount = i, o.changeCount = e, o.reason = a, o.itemDb = s, BaseFacade.mSwitch.active(s.switch), BaseFacade.mGoal.commit(BASE_ACTION_ID.ITEM_GET, e, t), a && 1 == s.type && GameStatistics.statisOnAddItemAmount(parseInt(t), e, a), this.sendMsg(BASE_MSG.ITEM_CHANGE, o), _G.pool.put(o), !1
		}
		autoSellItem(t, e) {
			let a = db.get_item_db(t);
			return !!a.sellItemId && (this.addItem(a.sellItemId, a.sellPrice * e, 0), !0)
		}
		tryActiveUp(t) {
			return 4 == db.get_item_db(t).type && (BaseFacade.mUp.tryActive(t), !0)
		}
		subItem(t, e, a) {
			if (e <= 0) return !0;
			if (!t) return !1;
			let i = this.getItemCount(t);
			if (i < e) return !1;
			let s = i - e;
			this.m_data[t] = s, this.saveData();
			let n = db.get_item_db(t),
				o = _G.pool.getObject("ItemChangeEvent");
			return o.uid = this.uid, o.itemId = t, o.count = s, o.lastCount = i, o.changeCount = -e, o.reason = a, o.itemDb = n, BaseFacade.mGoal.commit(BASE_ACTION_ID.ITEM_USE, e, t), a && 1 == n.type && GameStatistics.statisOnSubItemAmount(parseInt(t), e, a), this.sendMsg(BASE_MSG.ITEM_CHANGE, o), _G.pool.put(o), !0
		}
		sellItem(t, e) {
			if (null == e && (e = this.getItemCount(t)), this.subItem(t, e, 1)) {
				let a = db.get_item_db(t);
				a.sellItemId && this.addItem(a.sellItemId, a.sellPrice * e, 1)
			}
		}
		useItem(t, e) {
			if (this.enoughItem(t, e)) {
				let a = {
					uid: this.uid,
					itemId: t,
					count: e
				};
				this.sendMsg(BASE_MSG.ITEM_USE, a)
			}
		}
		setItem(t, e) {
			if (e < 0) return;
			if (!t) return;
			let a = this.getItemCount(t);
			if (a == e) return;
			this.m_data[t] = e, this.saveData();
			let i = db.get_item_db(t),
				s = {
					uid: this.uid,
					itemId: t,
					count: e,
					lastCount: a,
					changeCount: e - a,
					itemDb: i
				};
			this.sendMsg(BASE_MSG.ITEM_CHANGE, s)
		}
		addWrapItem(t, e, a) {
			let i, s = this.unpackItemToMap(t, e),
				n = Object.keys(s),
				o = n.length;
			for (let t = 0; t < o; t++)(i = s[n[t]]) > 0 ? this.addItem(n[t], i, a) : delete s[n[t]];
			return s
		}
		addWrapItemToList(t, e, a) {
			let i = this.unpackItemToList(t, e),
				s = i.length;
			for (let t = 0; t < s; t++) this.addItem(i[t].itemId, i[t].count, a) && (i[t].bSell = !0);
			return i
		}
		getWrapItem(t, e) {
			return this.unpackItemToList(t, e, [], !1)
		}
		getWrapItemPreview(t, e) {
			return this.unpackItemToList(t, e, [], !0)
		}
		unpackItemToList(t, e, a, i = !1) {
			e = e || 1, a = a || [];
			let s = db.get_item_db(t);
			t: for (let n = 0; n < e; n++) switch (s.type) {
				case 3:
					let n = BaseFacade.mDrop.makeDrop(s.wrapId, i);
					if (n)
						for (let t = 0; t < n.length; t++) {
							const e = n[t];
							this.unpackItemToList(e.itemId, e.count, a, i)
						} else Logger.error(`mItem.unpackItemToList: can't drop by item:[${t}], dropId:[${s.wrapId}]`);
					break;
				default:
					a.push({
						itemId: t,
						count: e
					});
					break t
			}
			return a
		}
		unpackItemToMap(t, e, a) {
			e = e || 1, a = a || {};
			let i = db.get_item_db(t);
			t: for (let s = 0; s < e; s++) switch (i.type) {
				case 3:
					let s = BaseFacade.mDrop.makeDrop(i.wrapId);
					if (s)
						for (let t = 0; t < s.length; t++) {
							const e = s[t];
							this.unpackItemToMap(e.itemId, e.count, a)
						} else Logger.error(`mItem.unpackItemToMap: can't drop by item:[${t}], dropId:[${i.wrapId}]`);
					break;
				default:
					let n = a[t] || 0;
					n += e, a[t] = n;
					break t
			}
			return a
		}
	}
	let lock_tag = !1;
	class mAutoIncreaseItem extends _mBase {
		constructor() {
			super(...arguments), this.m_data = null
		}
		onload() {
			this.loadData()
		}
		loadData() {
			if (this.m_data = FileRecord.getData("aotu_increase_data"), !this.m_data) {
				let t = db.get_auto_increase_db_map(),
					e = Object.create(null);
				Tools.forEachMap(t, function(t, a) {
					e[t] = {
						time: Timer.time,
						added: 0
					}
				}), this.m_data = e, this.saveData()
			}
		}
		saveData() {
			FileRecord.setData("aotu_increase_data", this.m_data)
		}
		refresh(t) {
			if (lock_tag) return;
			lock_tag = !0;
			let e, a = this.m_data;
			if (null == t)
				for (const t in a)(e = a[t]).time = this.refreshItemTime(t, e.time);
			else(e = a[t]) && (e.time = this.refreshItemTime(t, e.time));
			lock_tag = !1
		}
		refreshItemTime(t, e) {
			if (e >= Timer.time) return e;
			let a = BaseFacade.mItem.getItemCount(t),
				i = this.getMaxCount(t);
			if (a >= i) return e = Timer.time;
			let s = db.get_auto_increase_db(t);
			if (e + s.increaseDelta > Timer.time) return e;
			let n = a,
				o = s.increaseCount + this.m_data[t].added,
				r = 0 | (Timer.time - e) / s.increaseDelta;
			return a += r * o, e += r * s.increaseDelta, a > i && (a = i, e = Timer.time), BaseFacade.mItem.addItem(t, a - n, 6), this.saveData(), e
		}
		resetTime(t) {
			let e = this.m_data[t];
			e && (e.time = Timer.time)
		}
		getMaxCount(t) {
			let e = db.get_auto_increase_db(t);
			return e && e.maxCheckItemId ? BaseFacade.mItem.getItemCount(e.maxCheckItemId) : Number.MAX_VALUE
		}
		getNextTime(t) {
			if (this.m_data[t]) {
				let e = db.get_auto_increase_db(t);
				return this.m_data[t].time + e.increaseDelta
			}
			return 0
		}
		getIncreaseDelta(t) {
			if (this.m_data && this.m_data[t]) {
				return db.get_auto_increase_db(t).increaseDelta
			}
		}
		isMax(t) {
			let e = db.get_auto_increase_db(t);
			return !(!e || !e.maxCheckItemId) && BaseFacade.mItem.getItemCount(t) >= BaseFacade.mItem.getItemCount(e.maxCheckItemId)
		}
		setIncreaseItemAddedPerSec(t, e) {
			let a = this.m_data;
			if (a && a[t]) {
				let i = a[t],
					s = db.get_auto_increase_db(t);
				i.added = e * s.increaseDelta, this.saveData()
			}
		}
		getItemIncreasePerSec(t) {
			let e = this.m_data;
			if (e && e[t]) {
				let a = db.get_auto_increase_db(t);
				if (a.increaseDelta > 0) return e[t].added / a.increaseDelta
			}
			return 0
		}
		getItemIncreaseCount(t) {
			let e = this.m_data;
			return e && e[t] ? e[t].added : 0
		}
		accItem(t, e, a) {
			if (e <= 0) return !1;
			let i = this.getMaxCount(t),
				s = BaseFacade.mItem.getItemCount(t);
			return s < i && (e = Math.min(i - s, e), BaseFacade.mItem.addItem(t, e, a), !0)
		}
	}
	class mDrop extends _mBase {
		constructor() {
			super(...arguments), this.m_lotteryData = null, this.m_dropData = null
		}
		onload() {
			this.loadData()
		}
		loadData() {
			this.m_lotteryData = FileRecord.getData("lotter_data") || {}, this.m_dropData = FileRecord.getData("drop_data") || {}
		}
		saveData() {
			FileRecord.setData("drop_data", this.m_dropData)
		}
		getAllDropItems(t) {
			let e = [];
			if (!t) return e;
			let a = db.get_drop_db(t);
			if (!a) return e;
			for (let t = 0; t < a.items.length; t++) {
				const i = a.items[t];
				e.push({
					itemId: i.id,
					count: i.max
				})
			}
			return e
		}
		getDropActive(t) {
			let e = db.get_drop_db(t);
			return !!e && BaseFacade.mSwitch.check(e.switchId)
		}
		makeDrop(t, e = !1) {
			if (!t) return [];
			let a = db.get_drop_db(t);
			if (!BaseFacade.mSwitch.check(a.switchId)) return [];
			let i, s = a.items;
			switch (a.type) {
				case 1:
					i = (a.dis, this.makeDrop_singleRate(s));
					break;
				case 2:
					i = this.makeDrop_roundRate(s);
					break;
				case 3:
					let n = this.makeLottery(t, e);
					return n ? [n] : [];
				default:
					return []
			}
			return BaseFacade.mSwitch.active(a.switchId), i
		}
		makeDrop_singleRate(t) {
			let e, a = [];
			if (t)
				for (let i = 0; i < t.length; i++) {
					const s = t[i];
					(e = Mathf.random(1e4)) <= s.rate && a.push({
						itemId: s.id,
						count: Mathf.random(s.min, s.max),
						index: i
					})
				}
			return a
		}
		makeDrop_roundRate(t) {
			if (t) {
				let e = Mathf.random(1e4);
				for (let a = 0; a < t.length; a++) {
					const i = t[a];
					if (e <= i.rate) return [{
						itemId: i.id,
						count: Mathf.random(i.min, i.max),
						index: a
					}];
					e -= i.rate
				}
			}
			return []
		}
		saveLotteryRecord() {
			FileRecord.setData("lotter_data", this.m_lotteryData)
		}
		getLotteryActive(t) {
			if (!t) return !1;
			let e = db.get_drop_db(t);
			return !(!e || 3 != e.type) && (!(0 == e.loop && this.getCurLotteryIndex(t) >= e.items.length) && BaseFacade.mSwitch.check(e.switchId))
		}
		getCurLotteryIndex(t) {
			let e = this.m_lotteryData[t];
			return null == e ? 0 : e
		}
		getLotteryState(t, e) {
			let a = this.getLotteryActive(t),
				i = this.getCurLotteryIndex(t);
			return e < i ? 1 : e == i && a ? 0 : 2
		}
		makeLottery(t, e = !1) {
			if (!t) return null;
			let a = db.get_drop_db(t);
			if (!a || 3 != a.type) return null;
			if (!BaseFacade.mSwitch.check(a.switchId)) return null;
			e || BaseFacade.mSwitch.active(a.switchId);
			let i = this.m_lotteryData[t];
			if (null == i && (i = 0), i < 0) return null;
			let s = i,
				n = a.items[s];
			if (!n) return null;
			if (!e) {
				if (++i >= a.items.length) switch (a.loop) {
					case 0:
						i = a.items.length;
						break;
					case 1:
						i = 0;
						break;
					case 2:
						i = a.items.length - 1;
						break;
					default:
						return Logger.error(`未知循环类型，lotteryId:[${t}]`), null
				}
				this.m_lotteryData[t] = i, this.saveLotteryRecord()
			}
			return {
				itemId: n.id,
				count: Mathf.random(n.min, n.max),
				index: s
			}
		}
	}
	const SECONDS_IN_DAY = 86400,
		LONG_DELTA_TIME = 365 * SECONDS_IN_DAY * 1e3;
	class mSwitch extends _mBase {
		constructor() {
			super(...arguments), this.m_data = null, this.dailyActive = !1, this.weeklyActive = !1
		}
		onload() {
			if (this.loadData(), !this.m_data) {
				this.m_data = {};
				let t = db.get_switch_db_map();
				for (const e in t) {
					const a = t[e];
					this.initSwitch(a)
				}
			}
			this.registerMsg({
				[BASE_MSG.GOAL_STATE_CHANGE]: this.onMsgGoalStateChange.bind(this)
			})
		}
		start() {
			this.active(BASE_SWITCH_ID.DAILY) && (this.dailyActive = !0, this.sendMsg(BASE_MSG.DAILY_SWITCH_ACTIVE), Logger.log("---\x3e daily switch active true.")), this.active(BASE_SWITCH_ID.WEEKLY) && (this.weeklyActive = !0, Logger.log("---\x3e weekly switch active true."))
		}
		loadData() {
			this.m_data = FileRecord.getData("switch_data")
		}
		saveData() {
			FileRecord.setData("switch_data", this.m_data)
		}
		onMsgGoalStateChange(t) {
			if (t.userData.type != GOAL_TYPE.SWITCH) return;
			if (!t.isDone) return;
			let e = t.userData.data,
				a = this.m_data[e];
			if (a) {
				let t = db.get_switch_db(e);
				t && (this.updateUnlockSwitch(a, t), this.saveData())
			}
			return !1
		}
		initSwitch(t) {
			let e = this.m_data;
			if (e[t.id]) return;
			let a = {
				count: t.count,
				startTime: 0,
				endTime: 0
			};
			switch (t.type) {
				case 0:
					this.updateCycleSwitch(a, t);
					break;
				case 1:
					return void this.updateCdSwitch(a, t);
				case 2:
					this.updateUnlockSwitch(a, t);
					break;
				case 3:
				case 4:
					t.count = 1
			}
			e[t.id] = a, this.saveData()
		}
		query(t) {
			let e = this.m_data[t];
			return e || (Logger.error("mSwitch: can't find switch by switchId " + t), null)
		}
		check(t) {
			if (!t) return !0;
			let e = this.query(t);
			return !!e && (Timer.time >= e.startTime && (Timer.time <= e.endTime ? 0 != e.count : (this.updateCheck(t), this.check(t))))
		}
		active(t) {
			if (!t) return !0;
			if (!this.check(t)) return !1;
			let e = this.m_data[t];
			if (e.count--, 0 == e.count) {
				let a = db.get_switch_db(t);
				1 == a.type && this.updateCdSwitch(e, a)
			}
			return this.pushChangeToSession(t, null, null, e.count), this.saveData(), !0
		}
		getCount(t) {
			let e = this.query(t);
			return e ? e.count : 0
		}
		getCycleStartTime(t) {
			let e = this.query(t);
			return e ? e.startTime : 0
		}
		getCycleEndTime(t) {
			let e = this.query(t);
			return e ? e.endTime : 0
		}
		updateCheck(t) {
			let e = this.m_data[t],
				a = db.get_switch_db(t);
			switch (a.type) {
				case 0:
					this.updateCycleSwitch(e, a);
					break;
				case 1:
					this.updateCdSwitch(e, a);
					break;
				case 2:
					e.endTime = LONG_DELTA_TIME, Logger.error(`解锁类型开关无法重复check id: ${t}`);
					break;
				default:
					Logger.error(`暂不支持类型更新 ${a.type}`)
			}
		}
		updateCycleSwitch(t, e) {
			let a, i = Tools.splitToNumber(e.params, ":");
			5 == i.length ? a = new Date(i[2], i[3] - 1, i[4], i[0], i[1], 0, 0) : 2 == i.length ? (a = 0 == t.startTime ? new Date(Date.now()) : new Date(1e3 * t.startTime)).setHours(i[0], i[1], 0, 0) : Logger.error(`开关[${e.id}]起始时间[${e.params}]错误.`);
			let s = a.getTime() / 1e3,
				n = 0;
			n = e.duration <= 0 ? LONG_DELTA_TIME : s + 3600 * e.duration;
			let o = 3600 * e.delta;
			(o = Math.ceil((Timer.time - n) / o) * o) > 0 && (s += o, n += o), t.startTime = s, t.endTime = n, t.count = e.count
		}
		updateCdSwitch(t, e) {
			0 == t.endTime ? (t.startTime = Timer.time, t.endTime = LONG_DELTA_TIME) : t.startTime = Timer.time + e.delta, t.count = e.count
		}
		updateUnlockSwitch(t, e) {
			0 == t.endTime ? (BaseFacade.mGoal.register(e.params, {
				type: GOAL_TYPE.SWITCH,
				data: e.id
			}), t.startTime = LONG_DELTA_TIME, t.endTime = t.startTime) : (BaseFacade.mGoal.unregister(e.params), t.startTime = Timer.time, e.duration <= 0 ? t.endTime = LONG_DELTA_TIME : t.endTime = Timer.time + 3600 * e.duration, t.count = e.count)
		}
		pushChangeToSession(t, e, a, i) {}
	}
	const DEFAULT_TARGET_ID = "_default_";
	class mGoal extends _mBase {
		constructor() {
			super(...arguments), this.m_data = null
		}
		onload() {
			this.loadData(), this.m_data || (this.m_data = {
				goalList: {}
			})
		}
		loadData() {
			this.m_data = FileRecord.getData("s_goal_data")
		}
		saveData() {
			FileRecord.setData("s_goal_data", this.m_data)
		}
		getGoalList(t, e, a) {
			let i = this.m_data[t];
			if (!i) {
				if (!a) return null;
				i = {}, this.m_data[t] = i, this.saveData()
			}
			if (!i[e = e || DEFAULT_TARGET_ID]) {
				if (!a) return null;
				i[e] = {}, this.saveData()
			}
			return i[e]
		}
		register(t, e) {
			let a, i = db.get_goal_db(t);
			if (!i) return;
			a = "" == i.targetId ? DEFAULT_TARGET_ID : i.targetId;
			let s = this.getGoalList(i.actionId, a, !0);
			s[t] && Logger.isDebugLevel && Logger.warn(`mGoal.registerGold: goal[${t}] is registered and it will be reset!!!`), s[t] = {
				userData: e,
				commits: 0
			}, this.saveData()
		}
		unregister(t) {
			let e = db.get_goal_db(t);
			if (!e) return;
			let a = this.getGoalList(e.actionId, e.targetId, !1);
			a && a[t] && (delete a[t], this.saveData())
		}
		commit(t, e = 1, a, i = 0) {
			"" === a || null == a ? a = DEFAULT_TARGET_ID : a += "", a != DEFAULT_TARGET_ID && this.commit(t, e, DEFAULT_TARGET_ID, i);
			let s, n, o = this.getGoalList(t, a, !1);
			o && Tools.forEachMap(o, (t, a) => {
				if (s = db.get_goal_db(t)) {
					switch (n = this._isDone(a.commits, s.value, s.type), i) {
						case 0:
							a.commits += e;
							break;
						case 1:
							a.commits = e;
							break;
						case 2:
							a.commits = Math.max(a.commits, e)
					}
					if (a.userData) {
						let e = this._isDone(a.commits, s.value, s.type),
							i = _G.pool.getObject("GoalStateChangeEvent");
						i.userData = a.userData, i.goalId = t, i.isDone = e, i.commits = a.commits, this.sendMsg(BASE_MSG.GOAL_VALUE_CHANGE, i), e != n && this.sendMsg(BASE_MSG.GOAL_STATE_CHANGE, i), _G.pool.put(i)
					}
					this.saveData()
				}
			})
		}
		_isDone(t, e, a) {
			return "min" == a ? t >= e : "max" == a ? t <= e : (Logger.error(`can't find goal type ${a}`), !1)
		}
		isDone(t) {
			let e = db.get_goal_db(t);
			if (!e) return !1;
			let a = this.getCurValue(t);
			return this._isDone(a, e.value, e.type)
		}
		getCurValue(t) {
			let e = db.get_goal_db(t);
			if (!e) return 0;
			let a = this.getGoalList(e.actionId, e.targetId, !1);
			if (!a) return Logger.warn(`can't find goal list by goalId ${t}`), 0;
			let i = a[t];
			return i ? i.commits : (Logger.warn(`can't find goal entry by entryId ${t}`), 0)
		}
		getDbValue(t) {
			let e = db.get_goal_db(t);
			return e ? e.value : 0
		}
		getDeltaValue(t) {
			let e = this.getCurValue(t);
			return this.getDbValue(t) - e
		}
		getProgress(t) {
			let e = this.getCurValue(t),
				a = this.getDbValue(t);
			return a > 0 ? Mathf.clamp01(e / a) : 0
		}
		exists(t) {
			let e = db.get_goal_db(t);
			if (!e) return !1;
			let a = this.getGoalList(e.actionId, e.targetId, !1);
			return !!a && null != a[t]
		}
	}
	var QUEST_STATE;

	function sort_quest_id_by_order(t, e) {
		return Tools.sort_db_by_order(db.get_quest_db(t), db.get_quest_db(e))
	}

	function sort_quest_id_by_state(t, e) {
		return sort_quest_db_by_state(db.get_quest_db(t), db.get_quest_db(e))
	}

	function sort_quest_db_by_order(t, e) {
		return Tools.sort_db_by_order(t, e)
	}

	function sort_quest_db_by_state(t, e) {
		let a = BaseFacade.mQuest.query(t.id).state,
			i = BaseFacade.mQuest.query(e.id).state;
		if (a != i) {
			if (a == QUEST_STATE.COMMITABLE) return -1;
			if (i == QUEST_STATE.COMMITABLE) return 1;
			if (a == QUEST_STATE.UPDATABLE) return -1;
			if (i == QUEST_STATE.UPDATABLE) return 1;
			if (a == QUEST_STATE.FINISHED) return 1;
			if (i == QUEST_STATE.FINISHED) return -1
		}
		return Tools.sort_db_by_order(t, e)
	}! function(t) {
		t[t.NONE = 0] = "NONE", t[t.UPDATABLE = 1] = "UPDATABLE", t[t.FAIL = 2] = "FAIL", t[t.COMMITABLE = 3] = "COMMITABLE", t[t.FINISHED = 4] = "FINISHED"
	}(QUEST_STATE || (QUEST_STATE = {}));
	class mQuest extends _mBase {
		constructor() {
			super(...arguments), this.m_data = null, this.m_cdQuests = [], this.statisticsQueue = new Queue(256, !0), this.statisticsTimer = null, this._hasMainQuests = !0
		}
		onload() {
			this.prepareData(), this.loadData(), this.m_data || (this.m_data = {});
			let t = db.get_quest_db_map();
			Tools.forEachMap(t, (t, e) => {
				switch (e.type) {
					case 0:
					case 3:
					case 10:
						this.isAccept(t) || this.accept(t)
				}
			}), this.registerMsg({
				[BASE_MSG.GOAL_STATE_CHANGE]: this.onMsgGoalStateChange.bind(this),
				[BASE_MSG.DAILY_SWITCH_ACTIVE]: this.onMsgUserDailySwitchActive.bind(this),
				[BASE_MSG.ITEM_USE]: this.onMsgItemUse.bind(this)
			})
		}
		loadData() {
			this.m_data = FileRecord.getData("quest_data")
		}
		saveData() {
			FileRecord.setData("quest_data", this.m_data)
		}
		prepareData() {}
		onMsgGoalStateChange(t) {
			if (t.userData.type != GOAL_TYPE.QUEST) return;
			let e = t.userData.data,
				a = this.query(e);
			if (!a || a.state != QUEST_STATE.UPDATABLE) return;
			let i = db.get_quest_db(e);
			for (let e = 0; e < i.goals.length; e++) {
				const a = i.goals[e];
				if (a != t.goalId && BaseFacade.mGoal.isDone(a) != t.isDone) return
			}
			this.onQuestFinish(e, t.isDone)
		}
		onMsgUserDailySwitchActive() {
			let t = mQuest.getAllQuest(1);
			for (let e = 0; e < t.length; e++) this.accept(t[e]);
			let e = mQuest.getAllQuest(2);
			for (let t = 0; t < e.length; t++) this.accept(e[t]);
			let a = mQuest.getAllQuest(4);
			for (let t = 0; t < a.length; t++) this.accept(a[t])
		}
		onMsgItemUse(t) {}
		query(t) {
			return this.m_data[t]
		}
		getState(t) {
			let e = this.query(t);
			return e ? e.state : QUEST_STATE.NONE
		}
		isAccept(t) {
			return !!this.query(t)
		}
		isFinish(t) {
			let e = this.query(t);
			return !!e && e.state == QUEST_STATE.FINISHED
		}
		isUpdatable(t) {
			let e = this.query(t);
			return !!e && e.state == QUEST_STATE.UPDATABLE
		}
		isCommitable(t) {
			let e = this.query(t);
			return !!e && e.state == QUEST_STATE.COMMITABLE
		}
		accept(t, e = !0) {
			let a = db.get_quest_db(t);
			if (!a) return !1;
			if (!BaseFacade.mSwitch.active(a.switchId)) return !1;
			let i = !0,
				s = this.query(t);
			if (s) {
				if (!e) return !1;
				for (let t = 0; t < a.goals.length; t++) BaseFacade.mGoal.unregister(a.goals[t]);
				i = s.state != QUEST_STATE.FINISHED && s.first
			}
			for (let e = 0; e < a.goals.length; e++) BaseFacade.mGoal.register(a.goals[e], {
				type: GOAL_TYPE.QUEST,
				data: t
			});
			let n = 0 != a.goals.length ? QUEST_STATE.UPDATABLE : QUEST_STATE.COMMITABLE;
			return this.m_data[t] = {
				state: n,
				first: i
			}, this.onQuestStateChange(n, a), a.statistics && this.statisticsQueue.enqueue(t), this.uploadStatisticsLater(), this.saveData(), !0
		}
		uploadStatisticsLater() {
			this.statisticsTimer || (this.statisticsTimer = new Timer(.1, 1, () => {
				Logger.isDebugLevel && Logger.log("mQuest.uploadStatisticsLater"), this.statisticsTimer = null;
				for (let t = 0; t < 50; t++) {
					if (!this.statisticsQueue.dequeue()) break
				}
				this.statisticsQueue.size > 0 && this.uploadStatisticsLater()
			}), this.statisticsTimer.start())
		}
		commit(t, e = !1) {
			let a = this.query(t);
			if (!a) return null;
			let i = db.get_quest_db(t);
			if (a.state == QUEST_STATE.UPDATABLE) {
				let a = !0;
				if (!e)
					for (let t = 0; t < i.goals.length; t++)
						if (!BaseFacade.mGoal.isDone(i.goals[t])) {
							a = !1;
							break
						} this.onQuestFinish(t, a)
			}
			if (a.state != QUEST_STATE.COMMITABLE) return null;
			a.first;
			let s = BaseFacade.mDrop.makeDrop(i.dropId);
			for (let t = 0; t < s.length; t++) {
				const e = s[t];
				BaseFacade.mItem.addItem(e.itemId, e.count, 7)
			}
			switch (a.state = QUEST_STATE.FINISHED, i.statistics && GameStatistics.statisCommonEvent(i.statistics, 1), this.saveData(), this.onQuestStateChange(a.state, i), BaseFacade.mGoal.commit(BASE_ACTION_ID.QUEST_FINISH_COUNT, 1, i.type), i.completion && BaseFacade.mGoal.commit(BASE_ACTION_ID.QUEST_FINISH, i.completion, i.type), i.type) {
				case 0:
				case 5:
					break;
				case 6:
					this.accept(t, !0)
			}
			return s
		}
		cancel(t) {
			if (!this.query(t)) return;
			delete this.m_data[t];
			let e = db.get_quest_db(t);
			for (let t = 0; t < e.goals.length; t++) BaseFacade.mGoal.unregister(e.goals[t]);
			this.onQuestStateChange(QUEST_STATE.NONE, e), this.saveData()
		}
		onQuestFinish(t, e) {
			let a = this.query(t);
			if (!a || a.state != QUEST_STATE.UPDATABLE) return;
			let i = db.get_quest_db(t);
			e ? (a.state = QUEST_STATE.COMMITABLE, i.statistics && GameStatistics.statisCommonEvent(i.statistics, 0)) : a.state = QUEST_STATE.FAIL;
			for (let t = 0; t < i.goals.length; t++) BaseFacade.mGoal.unregister(i.goals[t]);
			this.onQuestStateChange(a.state, i), this.saveData()
		}
		onQuestStateChange(t, e) {
			let a = {
				state: t,
				questDb: e
			};
			this.sendMsg(BASE_MSG.QUEST_STATE_CHANGE, a)
		}
		getQuestByType(t, e) {
			let a, i = [];
			return Tools.forEachMap(this.m_data, (s, n) => {
				(a = db.get_quest_db(s)).type != t || null != e && a.gid != e || i.push(s)
			}), i
		}
		getQuestDbByType(t, e) {
			let a, i = [];
			return Tools.forEachMap(this.m_data, (s, n) => {
				(a = db.get_quest_db(s)).type != t || null != e && e != a.gid || i.push(a)
			}), i
		}
		static getAllQuest(t, e) {
			let a = [],
				i = db.get_quest_db_map();
			return Tools.forEachMap(i, function(i, s) {
				s.type == t && (null != e && e != s.gid || a.push(i))
			}), a
		}
		getLastQuestDbByGid(t, e, a) {
			let i = [];
			t: for (let s = e; s <= a; s++) {
				let e = this.getQuestDbByType(t, s);
				if (e.sort(Tools.sort_db_by_order), 0 == e.length) e.push(null), Logger.error("任务分组为空:", s);
				else {
					for (let t = 0; t < e.length; t++)
						if (!this.isFinish(e[t].id)) {
							i.push(e[t]);
							continue t
						} i.push(e[e.length - 1])
				}
			}
			return i
		}
		getCurValue(t, e = 0) {
			if (this.query(t).state == QUEST_STATE.UPDATABLE) {
				let a = db.get_quest_db(t).goals[e];
				return BaseFacade.mGoal.getCurValue(a)
			}
			return -1
		}
		getDbValue(t, e = 0) {
			let a = db.get_quest_db(t).goals[e];
			return BaseFacade.mGoal.getDbValue(a)
		}
		getDeltaValue(t, e = 0) {
			if (this.query(t).state == QUEST_STATE.UPDATABLE) {
				let a = db.get_quest_db(t).goals[e];
				return BaseFacade.mGoal.getDeltaValue(a)
			}
			return -1
		}
		getProgress(t, e = 0) {
			if (this.query(t).state == QUEST_STATE.UPDATABLE) {
				let a = db.get_quest_db(t).goals[e];
				return BaseFacade.mGoal.getProgress(a)
			}
			return 0
		}
		getAwardItems(t) {
			let e = db.get_quest_db(t);
			return e ? BaseFacade.mDrop.getAllDropItems(e.dropId) : []
		}
		hasCommitQuest(t) {
			let e = this.getQuestByType(t);
			for (let t = e.length - 1; t >= 0; t--)
				if (this.query(e[t]).state == QUEST_STATE.COMMITABLE) return !0;
			return !1
		}
		isAllFinish(t) {
			let e = this.getQuestByType(t);
			for (let t = e.length - 1; t >= 0; t--)
				if (this.query(e[t]).state != QUEST_STATE.FINISHED) return !1;
			return !0
		}
		finishQuest(t) {
			if (!this.query(t)) return void Logger.warn(`mQuest.finishQuest 未接此任务[${t}]`);
			let e = db.get_quest_db(t);
			for (let t = 0; t < e.goals.length; t++) {
				let a = db.get_goal_db(e.goals[t]);
				BaseFacade.mGoal.commit(a.actionId, a.value, a.targetId, 1)
			}
		}
		getHeadMainQuest() {
			if (this._hasMainQuests) {
				let t = this.getQuestByType(0);
				t.sort(sort_quest_id_by_order);
				for (let e = 0; e < t.length; e++)
					if (!this.isFinish(t[e])) return t[e];
				return this._hasMainQuests = !1, null
			}
			return null
		}
	}
	const h_count = 20,
		v_count = 30;
	class ScreenPieceEffect extends Laya.Sprite {
		constructor(t) {
			super(), this.paperNodes = [], this.paperTextures = [], this.name = "effectNode", this.createScreenShotFromSprite(t)
		}
		dispose() {
			for (let t = 0; t < this.paperTextures.length; t++) {
				let e = this.paperTextures[t];
				for (let t = 0; t < e.length; t++) e[t].destroy(!0)
			}
			this.paperTextures = null, this._texture && (this._texture.destroy(), this._texture = null), this.destroy(!0)
		}
		createScreenShotFromSprite(t) {
			this._texture = UiHelper.spriteScreenShot(t), this.generatePaper(this._texture)
		}
		generatePaper(t) {
			let e = t.width,
				a = t.height,
				i = Math.ceil(e / h_count),
				s = Math.ceil(a / v_count);
			for (let e = 0; e < h_count; e++)
				for (let a = 0; a < v_count; a++) {
					let n = this.addChild(new Laya.Sprite);
					n.name = `${e}_${a}`, n.pivotX = i / 2, n.pivotY = s / 2;
					let o = e * i,
						r = a * s;
					n.size(i, s), n.pos(o + n.pivotX, r + n.pivotY, !0);
					let l = Laya.Texture.create(t, o, r, i, s);
					n.texture = l, this.paperNodes[e] || (this.paperNodes[e] = [], this.paperTextures[e] = []), this.paperNodes[e][a] = n, this.paperTextures[e][a] = l
				}
		}
		playEffect(t) {
			for (let t = 0; t < h_count; t++)
				for (let e = 0; e < v_count; e++) {
					let a = this.paperNodes[t][e];
					cc.tween(a).delay(.015 * (t + e)).to(.3, {
						scaleX: 0,
						scaleY: 0,
						alpha: 0
					}).start()
				}
			return Timer.callLater(.015 * (h_count + v_count) + .3, () => {
				this.dispose(), t && t()
			}), this
		}
		playEffectRnd(t) {
			let e = [];
			for (let t = 0; t < h_count; t++)
				for (let a = 0; a < v_count; a++) {
					let i = this.paperNodes[t][a];
					e.push(i)
				}
			let a = 0;
			for (let i = 0; i < e.length; i++) {
				const s = e[i];
				cc.tween(s).delay(.25 * Math.random()).to(.3, {
					scaleX: 0,
					scaleY: 0,
					alpha: 0
				}).call(() => {
					++a == e.length && (this.dispose(), t && t())
				}).start()
			}
			return this
		}
	}
	let delta = .02,
		update_count = 0;
	class PanelLoadingBase extends PanelBase {
		constructor(t) {
			super(t), this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.barSytle = 0, this.state = 0, this.curProgress = 0, this.maxProgress = 0, this.startTime = 0, this.registerMsg({
				[BASE_MSG.RES_LOAD_START]: this.onMsgLoadStart.bind(this),
				[BASE_MSG.RES_LOAD_PROGRESS]: this.onMsgLoadProgress.bind(this),
				[BASE_MSG.RES_LOAD_END]: this.onMsgLoadEnd.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgLoadStart(t) {
			this.startTime = Timer.time, this.onLoadStart(t)
		}
		onMsgLoadProgress(t) {
			(t = Mathf.clamp01(t)) > this.maxProgress && (this.maxProgress = t)
		}
		onMsgLoadEnd(t) {
			this.maxProgress = 1, t || this.curProgress < .95 && (this.curProgress = .95)
		}
		update() {
			switch (this.state) {
				case 0:
					switch (this.barSytle) {
						case 0:
							this.curProgress = Mathf.clamp(this.curProgress + delta, 0, this.maxProgress);
							break;
						case 1:
							if ((update_count = (update_count + 1) % 5) > 0) return;
							this.curProgress = this.maxProgress
					}
					this.curProgress >= 1 ? (this.state = 1, this.onLoadProgress(1)) : this.onLoadProgress(this.curProgress);
					break;
				case 1:
					this.state = 2, _G.sendMsg("LOADING_COMPLETED"), console.log("loading time:", Mathf.round(Timer.time - this.startTime, 2)), this.onLoadComplete() && this.close()
			}
		}
	}
	class PanelResLoaderLoading extends PanelLoadingBase {
		startLoader() {
			let t = this.context;
			if (t && t.loader) {
				return t.loader.setLoadingCallback(function(t) {
					_G.sendMsg(BASE_MSG.RES_LOAD_END)
				}, function(t) {
					_G.sendMsg(BASE_MSG.RES_LOAD_PROGRESS, t)
				}), _G.sendMsg(BASE_MSG.RES_LOAD_START), t.loader.loadAll(), !0
			}
			return Logger.error("PanelSPELoading 参数异常."), !1
		}
	}
	class PanelSPELoading extends PanelResLoaderLoading {
		constructor() {
			super(...arguments), this.resourceName = "PanelSPELoading"
		}
		create(t) {
			if (!this.startLoader()) return void(t && t(!1)); {
				t && t(!0);
				let e = new ScreenPieceEffect(mgrPanel.getLayerNode(PANEL_LAYER.UI));
				mgrPanel.getLayerNode(PANEL_LAYER.TIP).addChild(e), this._effect = e
			}
			let e = new Laya.Box;
			e.size(_G.canvasWidth, _G.canvasHeight);
			let a = e.addChild(new Laya.Label);
			(a = new Laya.Label).fontSize = 32, a.anchorX = .5, a.anchorY = .5, a.centerX = 0, a.centerY = -100, a.text = "0%", a.color = "#ff0000", this.label = a, this.createFromNode(e)
		}
		buildUi() {}
		onLoadStart(t) {}
		onLoadProgress(t) {
			this.label.text = Math.floor(100 * t) + "%"
		}
		onLoadComplete() {
			let t = this.context,
				e = this._effect;
			return this._effect = null, mgrPanel.openPanel(t.panel, t.context, !1, function() {
				e.playEffect(t.callback)
			}), !0
		}
	}
	class DropIcon extends Laya.Sprite {
		constructor() {
			super(), this.userData = Object.create(null), this.size(1, 1), this.image = new Laya.Image, this.image.anchorX = .5, this.image.anchorY = .5, this.effect = _G.poolManager.get(Particle, "131"), this.addChild(this.image)
		}
		reuse() {
			this.visible = !0
		}
		unuse() {
			this.visible = !1, this._onClick = null, this.alpha = 1, this._itemId = null, this.image.anchorY = .5, this.image.y = 0, this.effect.stopFollow(), this.effect.stop(), this.effect.removeFromParent(), this.effect.hide(), cc.clearTween(this), this.removeSelf()
		}
		dispose() {
			this.effect && (_G.poolManager.put(this.effect), this.effect = null), this.destroy()
		}
		onClick() {
			this._onClick ? (this._onClick(this), this._onClick = null) : this.putBack()
		}
		autoClick() {
			this._onClick ? (this._onClick(this, !0), this._onClick = null) : this.putBack()
		}
		setAutoAddItem(t, e, a) {
			this._itemId = t, this._itemCount = e, this._reason = a
		}
		setIcon(t) {
			return this.image.skin = t, this
		}
		showTuowei() {
			_G.effectScene && (this.effect.show(), this.effect.setParent(_G.effectScene), this.effect.play(), this.effect.followTarget(this, _G.effectCamera))
		}
		putBack() {
			this._itemId && (BaseFacade.mItem.addItem(this._itemId, this._itemCount, this._reason), this._itemId = null, this._effect && mgrAlert.playParticleEffect("125", mgrAlert.uiCoinPos, .6)), _G.poolManager.put(this)
		}
		jumpOutAndJumpTo(t, e, a, i, s = !1) {
			let n = 1.5 * a;
			this.scale(n, n, !0);
			let o = Mathf.randomPlusOrMinus(),
				r = t.x + o * Mathf.random(10, 120),
				l = t.y + Mathf.random(10, 150),
				c = .01 * Mathf.random(-10, 10);
			this.image.anchorY = 1, this.image.y = this.image.height / 2;
			let h = Mathf.random(40, 70),
				d = cc.tween(this);
			this.pos(t.x, t.y, !0), d.parallel(cc.tween().then(cc.jumpTo(.5 + c, r, l, h, 1)), cc.tween().repeat(3, cc.tween().to(.1, {
				scaleX: .2 * n,
				scaleY: 1.2 * n
			}).to(.1, {
				scaleX: n,
				scaleY: n
			}))).parallel(cc.tween().then(cc.jumpTo(.3 + c, r, l, h / 3, 1)), cc.tween().to(.15, {
				scaleX: .7 * n,
				scaleY: 1.2 * n
			}).to(.15, {
				scaleX: n,
				scaleY: n
			})).call(() => {
				this.image.anchorY = .5, this.image.y = 0, this.showTuowei()
			}), s ? d.delay(Mathf.random(5, 15) / 100) : d.delay(.1), d.parallel(cc.tween().then(cc.jumpTo(.6, e.x, e.y, 50, 1)), cc.tween().to(.6, {
				scaleX: a,
				scaleY: a
			})).to(.1, cc.PROP.ALPHA0).call(() => {
				i && i(), this.putBack()
			}).start()
		}
		burstOutAndJumpTo(t, e, a, i, s = !1) {
			let n = 1.5 * a;
			this.scale(n, n, !0), this.pos(t.x, t.y, !0);
			let o = Mathf.random(100 * Math.PI) / 100,
				r = Mathf.random(50, 150),
				l = {
					x: t.x + Math.cos(o) * r,
					y: t.y + Math.sin(o) * r
				},
				c = .6 + .02 * Mathf.random(-10, 10);
			cc.tween(this, !0).to(.2, l, cc.OPTION.SINE_OUT).parallel(cc.tween().then(cc.bezierFromTo(c, l, e, .3)), cc.tween().to(c, {
				scaleX: a,
				scaleY: a
			})).call(() => {
				i && i(), this.putBack()
			}).start()
		}
		playJumpFrom(t, e, a, i, s = 0, n = .6, o) {
			let r, l;
			this.pos(t, e, !0), this.scale(n, n, !0), o ? (r = t + o.offsetX, l = e + o.offsetY) : (r = t + Mathf.randomPlusOrMinus() * Mathf.random(10, 120), l = e + Mathf.random(10, 100));
			let c = .01 * Mathf.random(-10, 10);
			this.image.anchorY = 1, this.image.y = this.image.height / 2;
			let h = Mathf.random(40, 70),
				d = cc.tween(this).parallel(cc.tween().then(cc.jumpTo(.5 + c, r, l, h, 1)), cc.tween().repeat(3, cc.tween().to(.1, {
					scaleX: .2 * n,
					scaleY: 1.2 * n
				}).to(.1, {
					scaleX: n,
					scaleY: n
				}))).parallel(cc.tween().then(cc.jumpTo(.3 + c, r, l, h / 3, 1)), cc.tween().to(.15, {
					scaleX: .7 * n,
					scaleY: 1.2 * n
				}).to(.15, {
					scaleX: n,
					scaleY: n
				})).call(() => {
					this.image.anchorY = .5, this.image.y = 0, i && i(this)
				});
			s > 0 ? d.delay(s).call(this.autoClick.bind(this)).start() : d.start(), this._onClick = a
		}
		playFlyTo(t, e) {
			cc.clearTween(this), cc.tween(this).then(cc.jumpTo(.6, t, e, 50, 1)).to(.1, {
				scaleX: 1.2,
				scaleY: 1.2,
				alpha: 0
			}).call(this.putBack.bind(this)).start()
		}
		playHappyJump() {
			this.image.anchorY = 1, this.image.y = this.image.height / 2, cc.tween(this).repeatForever(cc.tween().parallel(cc.tween().then(cc.jumpTo(.5, this.x, this.y, 50, 1)), cc.tween().repeat(3, cc.tween().to(.1, {
				scaleX: .2,
				scaleY: 1.2
			}).to(.1, {
				scaleX: 1,
				scaleY: 1
			}))).parallel(cc.tween().then(cc.jumpTo(.3, this.x, this.y, 50 / 3, 1)), cc.tween().to(.15, {
				scaleX: .7,
				scaleY: 1.2
			}).to(.15, {
				scaleX: 1,
				scaleY: 1
			})).call(() => {
				this.image.anchorY = .5, this.image.y = 0
			}).delay(1)).start()
		}
	}
	class CoinCount extends Laya.Label {
		reuse() {
			this.visible = !0
		}
		unuse() {
			this.visible = !1, cc.clearTween(this), this.removeSelf()
		}
		dispose() {
			this.destroy()
		}
		constructor() {
			super(), this.anchorX = .5, this.fontSize = 22, this.color = "#cc5b2f", this.strokeColor = "#ffffff", this.stroke = 2
		}
		setCount(t) {
			return this.text = "+" + t, this
		}
		play(t) {
			this.pos(t.x, t.y, !0).scale(0, 0, !0).alpha = 1, cc.tween(this).parallel(cc.tween().then(cc.jumpBy(.5, 20, -60, 10, 1)), cc.tween().to(.1, cc.PROP.SCALE1).delay(.6).to(.1, cc.PROP.ALPHA0)).call(this.putback.bind(this)).start()
		}
		putback() {
			_G.poolManager.put(this)
		}
	}
	class UIHVLayout extends Laya.Script {
		constructor() {
			super(...arguments), this.horizon = !0, this.align = "middle", this.space = 0, this.itemSize = 0, this.ignoreInvisible = !0, this._totalLen = 0, this._bDirty = !1
		}
		get totalLen() {
			return this._totalLen
		}
		get node() {
			return this.owner
		}
		onStart() {
			let t = this.node;
			if (this.ignoreInvisible)
				for (var e = 0, a = t.numChildren; e < a; e++) {
					t.getChildAt(e).on(Laya.Event.VISIBILITY_CHANGE, this, this._updateLayoutLater)
				}
			this._bDirty = !0, this.updateLayout()
		}
		onDestroy() {
			Laya.timer.clearAll(this)
		}
		_updateLayoutLater() {
			this._bDirty = !0, Laya.timer.callLater(this, this.updateLayout)
		}
		addChild(t) {
			return this.node.addChild(t), this.ignoreInvisible && t.on(Laya.Event.VISIBILITY_CHANGE, this, this._updateLayoutLater), this._bDirty = !0, Laya.timer.callLater(this, this.updateLayout), t
		}
		updateIfDirty() {
			Laya.timer.runCallLater(this, this.updateLayout)
		}
		updateLayout(t = 0, e = !1) {
			if (!this._bDirty && !e) return;
			let a, i, s, n;
			this._bDirty = !1, this.horizon ? (a = "x", i = "displayWidth", s = "pivotX", n = "scaleX") : (a = "y", i = "displayHeight", s = "pivotY", n = "scaleY");
			let o = this.node,
				r = this.space,
				l = -r;
			var c = [];
			let h = 0 == this.itemSize;
			for (var d = 0, _ = o.numChildren; d < _; d++) {
				var g = o.getChildAt(d);
				if (g) {
					if (this.ignoreInvisible && !g.visible) continue;
					c.push(g), l = h ? l + g[i] + r : l + this.itemSize + r
				}
			}
			var u;
			switch (this._totalLen = l, this.align) {
				case "head":
					u = 0;
					break;
				case "middle":
					u = -.5 * l;
					break;
				case "tail":
					u = -l
			}
			for (d = 0, _ = c.length; d < _; d++) {
				var m = u + (g = c[d])[s] * g[n];
				t > 0 ? Laya.Tween.to(g, {
					[a]: m
				}, 1e3 * t, Laya.Ease.sineInOut) : g[a] = m, u += h ? g[i] + r : this.itemSize + r
			}
		}
		foreachChild(t) {
			for (var e = 0; e < this.node.numChildren; e++)
				if (t(this.node.getChildAt(e), e)) return
		}
	}
	class Script2dEvent extends Laya.Script {
		constructor() {
			super(), this._msgHander = new MsgHandler, this._msgHander.startProcMsg()
		}
		onDestroy() {
			this._msgHander.stopProcMsg()
		}
		sendMsg(t, e) {
			this._msgHander && this._msgHander.sendMsg(t, e)
		}
		registerListeners(t) {
			Tools.forEachMap(t, (e, a) => {
				t[e] = a.bind(this)
			}), this._msgHander.registerListeners(t)
		}
	}
	class I18nComponent extends Script2dEvent {
		constructor() {
			super(...arguments), this.__key__ = ""
		}
		get key() {
			return this.__key__
		}
		set key(t) {
			this.__key__ = t, this.refresh()
		}
		get artistFont() {
			return this.__artistFont__
		}
		set artistFont(t) {
			this.__artistFont__ = t, this.key = "font", this.refresh()
		}
		onStart() {
			this.registerListeners({
				MSG_I18N_REFRESH: this.refresh.bind(this)
			}), this.refresh()
		}
		refresh() {
			if (!this.key || this.key.length <= 0) return;
			let t = this.owner;
			console.log("owner===", t);
			t._tf;
			"label2222" == t.name && console.log(t), t._tf ? this.artistFont ? mgrI18n.loadFont(this.artistFont, t) : (console.log("当前语言=====", mgrI18n.getLanguage()), t.text = mgrI18n.getText(this.key)) : t._text ? t.text = mgrI18n.getText(this.key) : t._skin ? t.skin = mgrI18n.getImage(this.key) : t.loadImage(mgrI18n.getImage(this.key))
		}
	}
	var E_LANGUAGE;
	! function(t) {
		t[t.zhcn = 0] = "zhcn", t[t.zhtw = 1] = "zhtw", t[t.en = 2] = "en", t[t.id = 3] = "id", t[t.hi = 4] = "hi", t[t.vi = 5] = "vi", t[t.pt = 6] = "pt"
	}(E_LANGUAGE || (E_LANGUAGE = {}));
	const LANGUAGE2FLAG = {
			[E_LANGUAGE.zhcn]: "zhcn",
			[E_LANGUAGE.zhtw]: "zhtw",
			[E_LANGUAGE.en]: "en",
			[E_LANGUAGE.id]: "id",
			[E_LANGUAGE.hi]: "hi",
			[E_LANGUAGE.vi]: "vi",
			[E_LANGUAGE.pt]: "pt"
		},
		I18N_RES_PATH = "res/i18n/";
	class mgrI18n extends _mgrBase {
		static onload() {
			super.onload(), this.bonLoad = !0, this.loadRecord()
		}
		static loadRecord() {
			let t = FileRecord.getData("mgrI18n1");
			t ? this.isLanguage = !0 : (t = this.sdkLanguage ? {
				curLanguage: this.sdkLanguage
			} : {
				curLanguage: E_LANGUAGE.zhcn
			}, this.isLanguage = !1), this.recordLanguage = t.curLanguage, this.saveRecord(), console.log("this.recordLanguage", this.recordLanguage), this._updateLanguage()
		}
		static saveRecord() {
			let t = {
				curLanguage: this.curLanguage
			};
			FileRecord.setData("mgrI18n1", t)
		}
		static getLanguage() {
			return null == this.curLanguage && (this.curLanguage = this.sdkLanguage || E_LANGUAGE.zhcn), this.curLanguage
		}
		static setLanguage(t) {
			this.curLanguage = t, this.saveRecord(), _G.sendMsg("MSG_I18N_REFRESH")
		}
		static _updateLanguage() {
			null != this.recordLanguage ? this.setLanguage(this.recordLanguage) : null != this.sdkLanguage ? this.setLanguage(this.sdkLanguage) : this.setLanguage(this.defaultLanguage)
		}
		static setSdkLanguage(t) {
			switch (t) {
				case "en-us":
					this.sdkLanguage = E_LANGUAGE.en;
					break;
				case "zh":
					this.sdkLanguage = E_LANGUAGE.zhcn;
					break;
				case "pt-br":
					this.sdkLanguage = E_LANGUAGE.pt;
					break;
				case "vi":
					this.sdkLanguage = E_LANGUAGE.vi;
					break;
				case "id":
					this.sdkLanguage = E_LANGUAGE.id;
					break;
				case "hi":
					this.sdkLanguage = E_LANGUAGE.hi;
					break;
				default:
					this.sdkLanguage = E_LANGUAGE.en
			}
		}
		static isReceiveSdkLanguage() {
			return null != this.sdkLanguage
		}
		static getText(t) {
			let e = this.parseKey(t);
			return e || t
		}
		static parseKey(t) {
			let e = ((window.i18n || {}).languages || {})[LANGUAGE2FLAG[this.curLanguage]] || {},
				a = t.split("."),
				i = e;
			for (let t = 0; t < a.length; t++) {
				if (!(i = i[a[t]])) return null
			}
			return i
		}
		static getImage(t) {
			if (!this.bonLoad) return;
			this.curLanguage || (this.curLanguage = E_LANGUAGE.zhcn);
			let e = "";
			e = /\.png/.test(t) ? ".png" : ".jpg", t = t.replace(e, "");
			let a = `res/i18n/${LANGUAGE2FLAG[this.curLanguage]}`,
				i = t.split(".");
			for (let t = 0; t < i.length; t++) {
				a += "/", a += i[t]
			}
			return a += e
		}
		static loadFont(t, e, a) {
			if (!this.bonLoad) return;
			if (!e) return;
			this.curLanguage || (this.curLanguage = E_LANGUAGE.zhcn, this.saveRecord());
			let i = `${t}_${LANGUAGE2FLAG[this.curLanguage]}`,
				s = () => {
					if (!e || e.destroyed) return;
					e.font = i;
					let t = e.text;
					e.text = "", e.text = t
				};
			if (this.loadedFontname[i]) return void s();
			let n = new Laya.BitmapFont,
				o = `res/i18n/${LANGUAGE2FLAG[this.curLanguage]}/font/${t}.fnt`;
			n.loadFont(o, new Laya.Handler(this, () => {
				Laya.loader.getRes(o) ? (Laya.Text.registerBitmapFont(i, n), this.loadedFontname[i] = !0, s()) : (o = `res/font/${t}.fnt`, n.loadFont(o, new Laya.Handler(this, () => {
					Laya.loader.getRes(o) && (Laya.Text.registerBitmapFont(i, n), this.loadedFontname[i] = !0, s())
				})))
			}))
		}
		static trySetI18nArtistFont(t, e) {
			let a = t.getComponent(I18nComponent);
			a || (a = t.addComponent(I18nComponent)), a.artistFont = e
		}
		static trySetI18nText(t, e) {
			let a = t.getComponent(I18nComponent);
			a || (a = t.addComponent(I18nComponent)), a.key = e
		}
		static trySetI18nImage(t, e) {
			if (!t) return void console.error("多语言图片节点为空", t, e);
			let a = t.getComponent(I18nComponent);
			a || (a = t.addComponent(I18nComponent)), a.key = e
		}
		static getRecordLanguage() {
			return this.recordLanguage
		}
		static getSdkLanguage() {
			return this.sdkLanguage
		}
		static getDefaultLanguage() {
			return this.defaultLanguage
		}
	}
	mgrI18n.isLanguage = !1, mgrI18n.bonLoad = !1, mgrI18n.loadedFontname = {};
	class PanelPanelLoading extends PanelBase {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.resourceName = "PanelPanelLoading"
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), UiHelper.registerTouchEvent(e, UiHelper.stopEventHandler, UiHelper.stopEventHandler, UiHelper.stopEventHandler), this._loadSprite = new Laya.Image, e.addChild(this._loadSprite), this._loadSprite.skin = `res/ui/pnl_loading/load${PanelPanelLoading.imgIndex++%3}.png`, this._loadSprite.anchorX = .5, this._loadSprite.anchorY = 1, this._loadSprite.pos(_G.canvasWidth / 2, _G.canvasHeight / 2 - 80, !0), this._loadSprite.alpha = 0;
			let a = (new Laya.Sprite).addComponent(UIHVLayout);
			e.addChild(a.node), this._textLayout = a, a.ignoreInvisible = !1, a.node.pos(_G.canvasWidth / 2, _G.canvasHeight / 2 - 50, !0);
			let i = [mgrI18n.getText("panelPanelLoading.1"), ".", ".", "."];
			for (var s = 0; s < i.length; s++) {
				let t = new Laya.Text;
				a.addChild(t), t.color = "#6884c1", t.stroke = 2, t.strokeColor = "#ffffff", t.fontSize = 30, t.pivotY = 30, t.text = i[s], t.visible = !1
			}
			this.createFromNode(e), this.scheduleOnce(.5, this.startAnim)
		}
		buildUi() {
			let t = new(mgrPanel.getPanelClass(this.context.panelClass))(this.context.context),
				e = new ResLoader;
			t.resourceName.endsWith(".json") && e.add(t.resourceName), e.setLoadingCallback(this.openPanel.bind(this, t)), e.loadAll()
		}
		startAnim() {
			cc.tween(this._loadSprite).sequence(cc.tween().to(.1, cc.PROP.ALPHA1), cc.tween().repeatForever(cc.tween().to(.6, cc.PROP.SCALE1_2).to(.6, cc.PROP.SCALE1))).start(), this._textLayout.foreachChild(function(t, e) {
				cc.tween(t).delay(.1 * e).show().set({
					scaleX: 0,
					scaleY: 0,
					alpha: 0
				}).to(.3, {
					scaleX: 1,
					scaleY: 1,
					alpha: 1
				}, {
					easing: cc.Ease.backOut
				}).call(function() {
					cc.tween(t).repeatForever(cc.tween().delay(1).to(.1, {
						scaleX: 1.2,
						scaleY: 1.2
					}).to(.15, {
						scaleX: 1,
						scaleY: 1
					})).start()
				}).start()
			})
		}
		openPanel(t) {
			Laya.timer.frameOnce(1, this, () => {
				mgrPanel.openPanelInstance(t, this.context.panelClass, this.context.bCloseMsg, t => {
					this.context.callback && this.context.callback(t), this.fadeOut()
				})
			})
		}
		fadeOut() {
			cc.tween(this._loadSprite).to(.2, cc.PROP.ALPHA0).call(this.close.bind(this)).start(), cc.tween(this._textLayout.node).to(.2, cc.PROP.ALPHA0).start()
		}
	}
	PanelPanelLoading.imgIndex = 0;
	class PanelWait extends PanelPanelLoading {
		constructor() {
			super(...arguments), this.resourceName = "PanelWait"
		}
		buildUi() {
			this.scheduleOnce(.01, this.startAnim), this.registerMsg({
				[BASE_MSG.RES_LOAD_END]: this.onMsgLoadEnd.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgLoadEnd() {
			this.fadeOut()
		}
	}
	const SYNC_TEST$1 = !1;
	let warn_once = !0;
	class Spine extends SpriteBase2D {
		constructor(t) {
			super(), this.resourceType = Laya.Loader.BUFFER, this._bAddCallback = !1, this.spineDb = db.get_spine_db(t), this.resourceName = this.spineDb.skeletonData
		}
		get curAnimName() {
			return this._curAnimName
		}
		create(t) {
			if (this._isLoaded) return void(t && t(!1));
			if (this._isLoading) return void(t && t(!1));
			if (!this.resourceName) return Logger.error("Spine.create: can't find resourceName."), void(t && t(!1));
			this._isLoading = !0;
			let e = Spine.allTemplets[this.resourceName];
			e ? e.isParseFail ? (t && t(!1), this.onResourceLoadedFail()) : e.isParserComplete ? this.onResLoaded(!0, t) : (e.on(Laya.Event.COMPLETE, this, e => {
				this.onResLoaded(e, t)
			}), e.on(Laya.Event.ERROR, this, this.onResourceLoadedFail)) : ((e = new Laya.Templet).on(Laya.Event.COMPLETE, this, e => {
				this.onResLoaded(e, t)
			}), e.on(Laya.Event.ERROR, this, this.onResourceLoadedFail), SYNC_TEST$1 ? Timer.callLater(30 * Math.random() + 20, () => {
				e.loadAni(this.resourceName)
			}) : e.loadAni(this.resourceName), Spine.allTemplets[this.resourceName] = e, Logger.debug("异步加载资源:", this.resourceName))
		}
		onResourceLoaded(t) {
			let e = this.spineDb,
				a = Spine.allTemplets[this.resourceName].buildArmature(e.aniMode);
			this.resNode = a, this._skinName = e.skin, a.scale(e.scaleX, e.scaleY, !0), a.showSkinByName(e.skin), a.playbackRate(e.timeScale), warn_once && (warn_once = !1, Logger.warn("spine动画统一设置为30帧，原因请查阅源码，本警告只触发一次.")), a.player.cacheFrameRate = 30, e.anim && this.play(e.anim, e.loop)
		}
		reuse() {
			this.tryCreate(), this.show()
		}
		unuse() {
			this.clearAllListener(), this.stop(), this.hide(), this.removeFromParent(), this.clearTween(), this.setScale(this.spineDb.scaleX, this.spineDb.scaleY), this.setAlpha(1), this.setTimeScale(this.spineDb.timeScale), this.clearDelayCalls()
		}
		dispose() {
			super.dispose()
		}
		play(t, e = !0) {
			this.callable ? (this._curAnimName = t, this.resNode.play(t, e, !0)) : this.safeCall(this.play, t, e)
		}
		playDefaultAnim() {
			this.play(this.spineDb.anim, this.spineDb.loop)
		}
		stop() {
			this.callable ? (this.resNode.stop(), this._curAnimName = null, this._animPlayList && (this._animPlayList = null)) : this.safeCall(this.stop)
		}
		setTimeScale(t) {
			this.callable ? this.resNode.playbackRate(t) : this.safeCall(this.setTimeScale, t)
		}
		_onAnimStoped() {
			if (this._animPlayList && this._animPlayList.length > 0) {
				let t = this._animPlayList.shift();
				this.play(t, 0 == this._animPlayList.length)
			}
		}
		playAnims(...t) {
			if (this.callable) switch (t.length) {
				case 0:
					return;
				case 1:
					this.play(t[0], !0);
					break;
				default:
					this._bAddCallback || (this._bAddCallback = !0, this.resNode.on(Laya.Event.STOPPED, this, this._onAnimStoped)), this._animPlayList = t.slice(1), this.play(t[0], !1)
			} else this.safeCall(this.playAnims, ...t)
		}
		setCompleteListener(t, e, a = !0) {
			this.callable ? a ? this.resNode.once(Laya.Event.COMPLETE, t, e) : this.resNode.on(Laya.Event.COMPLETE, t, e) : this.safeCall(this.setCompleteListener, t, e, a)
		}
		setStopListener(t, e, a = !0) {
			this.callable ? a ? this.resNode.once(Laya.Event.STOPPED, t, e) : this.resNode.on(Laya.Event.STOPPED, t, e) : this.safeCall(this.setStopListener, t, e, a)
		}
		clearAllListener() {
			if (!this.callable) return this.safeCall(this.clearAllListener);
			this.resNode.offAll(Laya.Event.COMPLETE), this.resNode.offAll(Laya.Event.STOPPED)
		}
		setSkin(t) {
			if (this.callable) {
				if (t == this._skinName) return;
				this._skinName = t, this.resNode.showSkinByName(t)
			} else this.safeCall(this.setSkin, t)
		}
		getSkeleton() {
			return this.resNode
		}
	}
	Spine.allTemplets = Object.create(null);
	class PanelGameLoading1 extends PanelResLoaderLoading {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelGameLoading1.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_roleSprite: "Laya.Sprite",
				cc_animNode: "Laya.Sprite",
				cc_button: "UIButton",
				cc_followTarget: "Laya.Sprite",
				cc_kouHong: "Laya.Sprite"
			}
		}
		buildUi() {
			this._anim = _G.poolManager.get(Spine, db.SPINE_DB_ID.qieping), this._anim.setParent(this.animNode), this._anim.setPosition(0, 0), this._anim.setAlpha(0), this.bg.alpha = 0, this.roleSprite.alpha = 0, this._startTime = Timer.time, this.roleSprite.loadImage(`res/ui/pnl_loading/role${PanelGameLoading1.nextRoleIdx}.png`), mgrAlert.playParticleEffect("129", new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2), 1.5, .5), cc.tween(this.bg).to(.5, cc.PROP.ALPHA1).call(() => {
				this._anim.setAlpha(1), this._anim.play("idle" + Mathf.random(2), !1);
				let t = this.context;
				t && t.onOpenBefore && t.onOpenBefore(), cc.tween(this.roleSprite).delay(.2).to(.4, {
					alpha: .4
				}).delay(.6).to(.4, {
					alpha: 1
				}).start()
			}).start(), PanelGameLoading1.nextRoleIdx = (PanelGameLoading1.nextRoleIdx + Mathf.random(2)) % 3, mgrRes.loadRes(`res/ui/pnl_loading/role${PanelGameLoading1.nextRoleIdx}.png`, RES_TYPE.IMAGE), this.initLoader(), this.scheduleOnce(.5, this.startLoader)
		}
		dispose() {
			this._anim && (_G.poolManager.put(this._anim), this._anim = null), super.dispose()
		}
		update() {
			super.update();
			let t = Laya.Point.TEMP;
			UiHelper.getSelfGlobalPos(this.followTarget, t, this.bg), this.kouHong.pos(t.x, t.y, !0)
		}
		initLoader() {
			let t = this.context;
			if (t && t.panel) {
				let e = t.loader || new ResLoader,
					a = mgrPanel.getPanelClass(t.panel);
				this.panelInstance = new a(t.context), this.panelInstance.resourceName.endsWith(".json") && e.add(this.panelInstance.resourceName), this.panelInstance.addPreloadRes(e), t.loader = e
			}
		}
		onLoadStart(t) {}
		onLoadProgress(t) {}
		onLoadComplete() {
			let t = this.context,
				e = Math.max(0, 2.5 - (Timer.time - this._startTime));
			return cc.tween(this.bg).delay(e).call(() => {
				this.panelInstance && mgrPanel.openPanelInstance(this.panelInstance, t.panel), mgrAlert.playParticleEffect("128", new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2), 1.5, .5)
			}).delay(.5).to(.5, cc.PROP.ALPHA0).call(this.close.bind(this)).start(), !1
		}
		on_click_button() {}
	}
	PanelGameLoading1.nextRoleIdx = 0;
	const ACTION_ID = {
			SIGN: "SIGN",
			PART_COUNT: "PART_COUNT",
			LEVEL_FINISH: "LEVEL_FINISH",
			LOTTERY: "LOTTERY",
			JIN_JI: "JIN_JI",
			PVP_SUC: "PVP_SUC",
			PVP_ALWAYS_SUC: "PVP_ALWAYS_SUC",
			SKINCARE: "SKINCARE",
			GET_FISH: "GET_FISH",
			OPEN_BOX: "OPEN_BOX",
			PLAY_GAME: "PLAY_GAME",
			PVP_FINISH: "PVP_FINISH",
			BUY_CAT_SHOP: "BUY_CAT_SHOP",
			ADD_LIKE: "ADD_LIKE",
			NEW_SUIT: "NEW_SUIT",
			SWITCH_ROLE: "SWITCH_ROLE",
			ROLE_TEST: "ROLE_TEST",
			DANCE_DRAW: "DANCE_DRAW",
			PLAY_DANCE: "PLAY_DANCE",
			CP_TEST: "CP_TEST",
			CLASS_TEACHER: "CLASS_TEACHER",
			EGG_CLICK_BUTTERFLY: "EGG_CLICK_BUTTERFLY",
			EGG_GET_FISH: "EGG_GET_FISH",
			EGG_CLEAR_TUYA: "EGG_CLEAR_TUYA",
			EGG_STEP: "EGG_STEP"
		},
		PAY_ID = {
			FREE_DIAMON: "101",
			COIN_GIFT: "102"
		},
		GOAL_ID = {
			CD_QUEST_FINISH: "10"
		},
		SWITCH_ID = {
			DAILY_RANK: "4",
			WEEKLY_RANK: "5"
		};
	var LayerMask;
	! function(t) {
		t[t.Default = 0] = "Default", t[t.Ground = 1] = "Ground", t[t.Object = 2] = "Object", t[t.Effect = 3] = "Effect"
	}(LayerMask || (LayerMask = {}));
	var GuideInfo = {
			start_time: 0
		},
		MODEL_ANIM, GUD_EVENT, GUD_REG_NODE, JUMP_PANEL, MPartType, ColorEggTargetId, UI_NAME;
	! function(t) {
		t.IDLE1 = "idle-idle01", t.IDLE2 = "idle-idle02", t.IDLE_T1 = "idle-transiting01", t.IDLE_T2 = "idle-transiting02", t.BEI_KE_OPEN = "beike_open", t.WIN = "jiesuan-shengli", t.LOSE = "jiesuan-shibai", t.MAIN_IDLE = "zjm-idle_01", t.MAIN_HUDONG1 = "zjm-dianji01", t.MAIN_HUDONG2 = "zjm-dianji02", t.MAIN_HUDONG3 = "zjm-dianji03", t.MAIN_XIUBIAO = "zsdh-zsdh", t.MAIN_MEIJIA_SHOW1 = "meijia-show01", t.MAIN_MEIJIA_SHOW2 = "meijia-show02", t.MEIJIA_ZHANSHI = "meijia-zhanshi", t.MEIJIA_ZHANSHI_IDLE = "meijia-zhanshi_idle", t.HUFU_WANCHENG = "hufu-wancheng", t.HUFU_KAISHI = "hufu-kaishi", t.HUFU_ZANTONG1 = "hufu-zantong01", t.HUFU_ZANTONG2 = "hufu-zantong02", t.HUFU_ZANTONG3 = "hufu-zantong03", t.HUFU_ZAMAO_R = "hufu-zamao_you", t.HUFU_ZAMAO_L = "hufu-zamao_zuo", t.HUFU_IDLE = "hufu-hufu_idle", t.PAISHOU01 = "paishou-paishou01", t.PAISHOU02 = "paishou-paishou02", t.PAISHOU03 = "paishou-paishou03", t.PAISHOU04 = "paishou-paishou04", t.PAISHOU05 = "paishou-paishou05", t.PAISHOU06 = "paishou-paishou06", t.PAISHOU07 = "paishou-paishou07", t.PAISHOU08 = "paishou-paishou08", t.PAISHOU09 = "paishou-paishou09", t.PAISHOU_IDLE = "paishou-paishou_idle", t.FACE_BIYAN_01 = "face_hufu-face_biyan_01", t.FACE_BIYAN_02 = "face_hufu-face_biyan_02", t.FACE_IDLE01 = "face_hufu-face_idle01", t.FACE_IDLE02 = "face_hufu-face_idle02", t.FACE_ZHAYAN = "face_hufu-face_zhayan", t.FACE_PAISHOU01 = "face_paishou-face_paishou01", t.FACE_PAISHOU02 = "face_paishou-face_paishou02", t.FACE_PAISHOU03 = "face_paishou-face_paishou03", t.FACE_PAISHOU04 = "face_paishou-face_paishou04", t.FACE_PAISHOU_IDLE = "face_paishou-face_paishou_idle", t.LAJI_1 = "ljxyx-laji_diu01", t.LAJI_2 = "ljxyx-laji_diu02", t.LAJI_IDLE = "ljxyx-laji_idle", t.LAJI_CUO = "ljxyx-laji_cuo", t.LAJI_WANCHENG = "ljxyx-laji_wancheng", t.FACE_LAJI_DIU01 = "face_ljxyx-face_laji_diu01", t.FACE_LAJI_DIU02 = "face_ljxyx-face_laji_diu02", t.FACE_LAJI_IDLE = "face_ljxyx-laji_idle", t.FACE_LAJI_CUO = "face_ljxyx-face_laji_cuo", t.FACE_LAJI_WANCHENG = "face_ljxyx-face_laji_wancheng", t.ZHUAN_SHEN = "lgxyx-zhuanshen", t.LIHE_IDLE = "lihe-idle", t.LIHE_CLOSE = "lihe-close", t.MFB_IDLE = "mozhang_anim-mz_idle", t.P_LIHE_IDLE = "lihe-lihe_idle", t.P_LIHE_CLOSE = "lihe-lihe_close", t.ZBS_XI_HUAN = "zbs-xihuan", t.ZBS_BU_XI_HUAN = "zbs-buxihuan", t.MH_IDLE1 = "manghe-idle01", t.MH_IDLE2 = "manghe-idle02", t.MH_OPEN = "manghe-open", t.FACE_COME = "face_come-face_come", t.FACE_IDLE = "face_come-face_idle", t.SHENTI_COME = "come-come", t.SHENTI_IDLE = "come-idle", t.WAWAHE_COME01 = "wawahe_come-wawahe_come01", t.WAWAHE_COME02 = "wawahe_come-wawahe_come02", t.WAWAHE_COME03 = "wawahe_come-wawahe_come03", t.GEMSTONE_COME = "come-gemstone_come", t.GEMSTONE_IDLE = "come-gemstone_idle", t.GEMSTONE_ZHANSHI = "come-gemstone_zhanshi", t.SHEXIANGJI_COME01 = "shexiangji_come-shexiangji_come01", t.SHEXIANGJI_COME02 = "shexiangji_come-shexiangji_come02", t.SHEXIANGJI_COME03 = "shexiangji_come-shexiangji_come03", t.COME_ZHANSHI = "come-zhanshi", t.SHEXIANGJI_ZHANSHI = "shexiangji_come-shexiangji_zhanshi", t.FACE_ZHANSHI = "face_come-face_zhanshi", t.FACE_ZHANSHI_LC = "face_come_liangcai-face_zhanshi_liangcai", t.COME_ZHANSHI_LC = "come_liangcai-zhanshi_liangcai", t.SHEXIANGJI_ZHANSHI_LC = "shexiangji_come_liangcai-shexiangji_zhanshi_liangcai", t.FACE_JIECHU = "face_jiechu-jiechu", t.SHENTI_JIECHU = "shenti_jiechu-jiechu", t.WAWAHE_JIECHU = "wawahe_jiechu-jiechu", t.GEMSTONE_JIECHU = "gs_jiechu-jiechu", t.SHEXIANGJI_JIECHU = "shexiangji_jiechu-jiechu", t.PIJUAN01 = "pijuan-pijuan01", t.PIJUAN02 = "pijuan-pijuan02", t.PIJUAN03 = "pijuan-pijuan03", t.PIJUAN_IDLE = "pijuan-pijuan_idle", t.CHEN_SHUI = "zjm_chenshui-chenshui", t.XING_LAI = "zjm_chenshui-xinglai", t.GEMSTONE_YUANDIAN = "come-gemstone_yuandian", t.GJ_JIESUAN = "gj_jiesuan-gj_jiesuan", t.SANLIANPAI = "gj_jiesuan-sanlianpai", t.PTJS00 = "pt_jiesuan-ptjs00", t.PTJS01 = "pt_jiesuan-ptjs01", t.PTJS02 = "pt_jiesuan-ptjs02", t.PTJS03 = "pt_jiesuan-ptjs03", t.REALLY = "pt_jiesuan-really", t.FACE_GJ_JIESUAN = "face_gj_jiesuan-face_gj_jiesuan", t.FACE_SANLIANPAI = "face_gj_jiesuan-face_sanlianpai", t.FACE_PTJS00 = "face_pt_jiesuan-face_ptjs00", t.FACE_PTJS01 = "face_pt_jiesuan-face_ptjs01", t.FACE_PTJS02 = "face_pt_jiesuan-face_ptjs02", t.FACE_PTJS03 = "face_pt_jiesuan-face_ptjs03", t.FACE_REALLY = "face_pt_jiesuan-face_really", t.SHEXIANGJI_GJ_JIESUAN = "shexiangji_gj_jiesuan-shexiangji_gj_jiesuan", t.WAWAHE_GJ_JIESUAN = "wawahe_gj_jiesuan-wawahe_gj_jiesuan", t.LAOYU_IDLE = "laoyu-idle", t.LAOYU_LOOK = "laoyu-look", t.SHENGJI = "shengji-shengji", t.FACE_SHENGJI = "face_shengji-face_shengji", t.ZJZ = "zjm_zjz-zjm_zjz", t.FACE_ZJZ = "face_zjm_zjz-face_zjm_zjz", t.HUDIE_IDLE = "hudie-idle", t.HUDIE_SHOW = "hudie_show-show", t.SHOW01 = "show-show01", t.SHOW02 = "show-show02", t.DANCE_XIANDAI01 = "dance_xiandai-dance_xiandai01", t.DANCE_XIANDAI02 = "dance_xiandai-dance_xiandai02", t.DANCE_XIANDAI03 = "dance_xiandai-dance_xiandai03", t.DANCE_XIANDAI04 = "dance_xiandai-dance_xiandai04", t.DANCE_XIANDAI05 = "dance_xiandai-dance_xiandai05", t.DANCE_XIANDAI06 = "dance_xiandai-dance_xiandai06", t.DANCE_XIANDAI07 = "dance_xiandai-dance_xiandai07", t.DANCE_XIANDAI08 = "dance_xiandai-dance_xiandai08", t.DANCE_XIANDAI09 = "dance_xiandai-dance_xiandai09", t.DANCE_XIANDAI10 = "dance_xiandai-dance_xiandai10", t.DANCE_XIANDAI11 = "dance_xiandai-dance_xiandai11", t.DANCE_XIANDAI12 = "dance_xiandai-dance_xiandai12", t.DANCE_XIANDAI13 = "dance_xiandai-dance_xiandai13", t.DANCE_XIANDAI14 = "dance_xiandai-dance_xiandai14", t.DANCE_XIANDAI15 = "dance_xiandai-dance_xiandai15", t.DANCE_XIANDAI16 = "dance_xiandai-dance_xiandai16"
	}(MODEL_ANIM || (MODEL_ANIM = {})),
	function(t) {
		t.START_GAME = "START_GAME", t.START_CONTRACT = "START_CONTRACT", t.START_CONTRACT2 = "START_CONTRACT2", t.ENTER_ROOM = "ENTER_ROOM", t.ENTER_MAIN = "ENTER_MAIN", t.ENTER_SKINCARE = "ENTER_SKINCARE", t.GOTO_CAT_COIN = "GOTO_CAT_COIN", t.GOTO_DREAM = "GOTO_DREAM", t.ENTER_DREAM = "ENTER_DREAM", t.ENTER_FISH = "ENTER_FISH", t.ENTER_PHONE = "ENTER_PHONE", t.ENTER_TALK = "ENTER_TALK", t.ENTER_SZZ = "ENTER_SZZ", t.ENTER_MANGHE = "ENTER_MANGHE", t.ENTER_MANGHE_OPEN = "ENTER_MANGHE_OPEN", t.ENTER_PLAY = "ENTER_PLAY", t.ENTER_LAJI = "ENTER_LAJI", t.ENTER_PAISHOU = "ENTER_PAISHOU", t.ENTER_HUDIE = "ENTER_HUDIE", t.ENTER_LINGGAN = "ENTER_LINGGAN", t.ENTER_CZTG = "ENTER_CZTG", t.ENTER_ORDER = "ENTER_ORDER", t.OPT_IDLE_SI_MIAN_MO = "OPT_IDLE_SI_MIAN_MO", t.OPT_IDLE_TU_LIAN = "OPT_IDLE_TU_LIAN", t.OPT_IDLE_TU_BI_ZI = "OPT_IDLE_TU_BI_ZI", t.OPT_IDLE_XIU_MEI_MAO = "OPT_IDLE_XIU_MEI_MAO", t.QUEST_GOTO_IN = "QUEST_GOTO_IN", t.QUEST_GOTO_OUT = "QUEST_GOTO_OUT", t.QUEST_GOTO_MOHE = "QUEST_GOTO_MOHE", t.QUEST_GOTO_DREAM = "QUEST_GOTO_DREAM", t.QUEST_GOTO_WEITUO = "QUEST_GOTO_WEITUO", t.QUEST_GOTO_CAT_SHOP = "QUEST_GOTO_CAT_SHOP", t.QUEST_GOTO_SZZ = "QUEST_GOTO_SZZ", t.QUEST_GOTO_SKINCARE = "QUEST_GOTO_SKINCARE", t.QUEST_GOTO_PVP = "QUEST_GOTO_PVP", t.QUEST_GOTO_SUIT = "QUEST_GOTO_SUIT", t.PANEL_DANCE_DRAW = "PANEL_DANCE_DRAW", t.PANEL_DANCE_PREVIEW = "PANEL_DANCE_PREVIEW", t.PANEL_DANCE_DRAW_IDLE_DRAW = "PANEL_DANCE_DRAW_IDLE_DRAW", t.PANEL_DANCE_DRAW_IDLE_OK = "PANEL_DANCE_DRAW_IDLE_OK", t.ENTER_CP_TEST = "ENTER_CP_TEST", t.ENTER_CLASS_ROOM = "ENTER_CLASS_ROOM", t.ENTER_STUDENT_STAGE = "ENTER_STUDENT_STAGE", t.PANEL_STUDENT_STAGE_ENTER_IDLE = "PANEL_STUDENT_STAGE_ENTER_IDLE", t.PANEL_STUDENT_STAGE_MOVE_IDLE = "PANEL_STUDENT_STAGE_MOVE_IDLE", t.PANEL_TEACHER_STAGE_IDLE = "PANEL_TEACHER_STAGE_IDLE", t.PANEL_TEACHER_CHANGE_SCORE_IDLE = "PANEL_TEACHER_CHANGE_SCORE_IDLE"
	}(GUD_EVENT || (GUD_EVENT = {})),
	function(t) {
		t.PANELCONTRACT_BUTTONOK = "PanelContract.buttonOk", t.PANELCONTRACT_BUTTONCIRCLE = "PanelContract.buttonCircle", t.PANELCONTRACT_BUTTONBOX = "PanelContract.buttonBox", t.PANELROOM_PART_18024 = "PanelRoom.part18024", t.PANELROOM_YANYING = "PanelRoom.menuYanYing", t.PANELROOM_CHUNCAI = "PanelRoom.menuChunCai", t.PANELROOM_BRUSH = "PanelRoom.brush", t.PANELROOM_PART_19011 = "PanelRoom.part19011", t.PANELROOM_PART_23003 = "PanelRoom.part23003", t.PANELROOM_BTNOK = "PanelRoom.btnOk", t.PANELMAIN_BUTTONPLAY = "PanelMain.buttonPlay", t.PANELMAIN_BUTTONCOIN = "PanelMain.buttonCoin", t.PANELMAIN_BUTTONDREAM = "PanelMain.buttonDream", t.PANELMAIN_BUTTONWEITUO = "PanelMain.buttonWeiTuo", t.PANELDANCEDRAW_BUTTONCOLOR0 = "PanelDanceDraw.buttonColor0", t.PANELDANCEDRAW_BUTTONOK = "PanelDanceDraw.buttonOk", t.PANELDANCEPREVIEW_BUTTONTODANCEDRAW = "PanelDancePreview.buttonToDanceDraw", t.PANELCPTEST_BUTTONGUIDE = "PanelCpTest.buttonGuide", t.PANELCLASSROOM_BUTTONSTUDENT = "PanelClassRoom.buttonStudent", t.PANELSKINCARE_BUTTONSTART = "PanelSkincare.buttonPlay", t.PANELSKINCARE_ITEM0 = "PanelSkincare.item0", t.PANELSKINCARE_BRUSH = "PanelSkincare.brush", t.PANELSKINCARE_BUTTONCLOSE = "PanelSkincare.buttonClose", t.PANELDREAM_SUITITEM0 = "PanelDream.suitItem0", t.PANELFISH_BUTTONFIND = "PanelFishGame.buttonFind", t.PANELFISH_TOUCHNODE = "PanelFishGame.touchNode", t.PANELPHONE_BUTTONYES = "PanelPhone.buttonYes", t.PANELTALK_BUTTONSTART = "PanelTalk.buttonStart", t.PANELSZZ_BUTTONYES = "PanelSzz.buttonYes", t.PANELSZZ_BUTTONAWARD = "PanelSzz.buttonAward", t.PLAY_NODE_BUTTONOUT = "PlayBottomNode.outsideNode", t.PLAY_NODE_BUTTONSKINCARE = "PlayBottomNode.skincareNode", t.PANELOUT_BUTTONLAJI = "PanelOutside.buttonStartLaJi", t.PANELOUT_LAJITONG = "PanelOutside.lajiTong", t.PANELOUT_DIALOG = "PanelOutside.dialog", t.PANELIN_ORDER = "PanelOutside.orderItem", t.PANELORDER_ITEM = "PanelOrder.orderItem", t.PANELORDER_BUTTONOK = "PanelOrder.buttonOk", t.PANELMANGHE_BUTTONOPEN = "PanelMangHeOpen.buttonOpenBox"
	}(GUD_REG_NODE || (GUD_REG_NODE = {})),
	function(t) {
		t[t.SKINCARE = 1] = "SKINCARE", t[t.DREAM = 2] = "DREAM", t[t.ENTRUST = 3] = "ENTRUST", t[t.PVP = 4] = "PVP", t[t.MANG_HE = 5] = "MANG_HE", t[t.INSIDE = 6] = "INSIDE", t[t.SWITCH_ROLE = 7] = "SWITCH_ROLE", t[t.ROLE_TEST = 8] = "ROLE_TEST", t[t.DANCE_DRAW = 9] = "DANCE_DRAW", t[t.CP_TEST = 10] = "CP_TEST", t[t.CLASS_ROOM = 11] = "CLASS_ROOM", t[t.ROOM = 12] = "ROOM", t[t.OUTSIDE = 13] = "OUTSIDE", t[t.SZZ = 14] = "SZZ"
	}(JUMP_PANEL || (JUMP_PANEL = {})),
	function(t) {
		t[t.SHAPE = 10] = "SHAPE", t[t.VARNISH = 20] = "VARNISH", t[t.DECAL_BOTTOM = 30] = "DECAL_BOTTOM", t[t.DECAL_FRONT = 31] = "DECAL_FRONT", t[t.NAIL_DECORATION = 40] = "NAIL_DECORATION", t[t.RING = 50] = "RING", t[t.HAND_DECORATION = 60] = "HAND_DECORATION", t[t.WRIST_DECORATION = 70] = "WRIST_DECORATION", t[t.BACKGROUND = 80] = "BACKGROUND", t[t.PET_DECORATION = 90] = "PET_DECORATION", t[t.BODY = 99] = "BODY"
	}(MPartType || (MPartType = {})),
	function(t) {
		t.huai_biao = "huaibiao", t.mian_ju = "mianju", t.man_du_la = "mandula"
	}(ColorEggTargetId || (ColorEggTargetId = {})),
	function(t) {
		t.PanelActiveClass = "PanelActiveClass", t.PanelActiveCp = "PanelActiveCp", t.PanelActiveCpTestPreview = "PanelActiveCpTestPreview", t.PanelActiveDance = "PanelActiveDance", t.PanelActiveDanceNew = "PanelActiveDanceNew", t.PanelActiveTest = "PanelActiveTest", t.PanelAdvCostDialog = "PanelAdvCostDialog", t.PanelAdvDialog = "PanelAdvDialog", t.PanelCat = "PanelCat", t.PanelCatLvup = "PanelCatLvup", t.PanelChallengePreview = "PanelChallengePreview", t.PanelClassColorEggs = "PanelClassColorEggs", t.PanelClassOutSide = "PanelClassOutSide", t.PanelClassReward = "PanelClassReward", t.PanelClassRoleDetail = "PanelClassRoleDetail", t.PanelClassRoleGet = "PanelClassRoleGet", t.PanelClassRoom = "PanelClassRoom", t.PanelClassStudenMatchingStageResult = "PanelClassStudenMatchingStageResult", t.PanelClassStudenMathStageResult = "PanelClassStudenMathStageResult", t.PanelClassStudenStageResult = "PanelClassStudenStageResult", t.PanelClassStudentMatchingStage = "PanelClassStudentMatchingStage", t.PanelClassStudentMathStage = "PanelClassStudentMathStage", t.PanelClassStudentStage = "PanelClassStudentStage", t.PanelClassTeacherChangeScore = "PanelClassTeacherChangeScore", t.PanelClassTeacherMatchingStage = "PanelClassTeacherMatchingStage", t.PanelClassTeacherMathStage = "PanelClassTeacherMathStage", t.PanelClassTeacherStage = "PanelClassTeacherStage", t.PanelCoinGift = "PanelCoinGift", t.PanelColorEggGet = "PanelColorEggGet", t.PanelContract = "PanelContract", t.PanelCpBooks = "PanelCpBooks", t.PanelCpTest = "PanelCpTest", t.PanelCpTestPreview = "PanelCpTestPreview", t.PanelDanceAnswer = "PanelDanceAnswer", t.PanelDanceDraw = "PanelDanceDraw", t.PanelDancePastRole = "PanelDancePastRole", t.PanelDancePreDestination = "PanelDancePreDestination", t.PanelDancePreview = "PanelDancePreview", t.PanelDanceRoleGet = "PanelDanceRoleGet", t.PanelDialog = "PanelDialog", t.PanelDiamondGift = "PanelDiamondGift", t.PanelDream = "PanelDream", t.PanelEgg = "PanelEgg", t.PanelFind = "PanelFind", t.PanelFishGame = "PanelFishGame", t.PanelFishGet = "PanelFishGet", t.PanelFishShow = "PanelFishShow", t.PanelFollow = "PanelFollow", t.PanelFriends = "PanelFriends", t.PanelGameLoading1 = "PanelGameLoading1", t.PanelGuide = "PanelGuide", t.PanelHotActivity = "PanelHotActivity", t.PanelInside = "PanelInside", t.PanelInstall = "PanelInstall", t.PanelItemGet = "PanelItemGet", t.PanelJoinSuc = "PanelJoinSuc", t.PanelLanguageDialog = "PanelLanguageDialog", t.PanelLingGan = "PanelLingGan", t.PanelLoading = "PanelLoading", t.PanelLottery = "PanelLottery", t.PanelMain = "PanelMain", t.PanelMangHe = "PanelMangHe", t.PanelMangHeOpen = "PanelMangHeOpen", t.PanelManicure = "PanelManicure", t.PanelManicurePreview = "PanelManicurePreview", t.PanelManicureResult = "PanelManicureResult", t.PanelMoreGame = "PanelMoreGame", t.PanelNativeAdv = "PanelNativeAdv", t.PanelNativeBanner = "PanelNativeBanner", t.PanelNotice = "PanelNotice", t.PanelOffline = "PanelOffline", t.PanelOrder = "PanelOrder", t.PanelOutside = "PanelOutside", t.PanelOver = "PanelOver", t.PanelOverCommon = "PanelOverCommon", t.PanelOverRemedy = "PanelOverRemedy", t.PanelPartInfo = "PanelPartInfo", t.PanelPhone = "PanelPhone", t.PanelPhoto = "PanelPhoto", t.PanelPvp = "PanelPvp", t.PanelPvpCard = "PanelPvpCard", t.PanelPvpDeclare = "PanelPvpDeclare", t.PanelPvpOver = "PanelPvpOver", t.PanelPvpReward = "PanelPvpReward", t.PanelPvpRongYao = "PanelPvpRongYao", t.PanelPvpSelect = "PanelPvpSelect", t.PanelQuest = "PanelQuest", t.PanelQuestGift = "PanelQuestGift", t.PanelRank = "PanelRank", t.PanelRankHuDong = "PanelRankHuDong", t.PanelRankVideo = "PanelRankVideo", t.PanelReconnectDialog = "PanelReconnectDialog", t.PanelRoleLvup = "PanelRoleLvup", t.PanelRolePreDestination = "PanelRolePreDestination", t.PanelRoleTest = "PanelRoleTest", t.PanelRoleTestOver = "PanelRoleTestOver", t.PanelRoom = "PanelRoom", t.PanelSchoolYearbook = "PanelSchoolYearbook", t.PanelSetting = "PanelSetting", t.PanelShare = "PanelShare", t.PanelShoe = "PanelShoe", t.PanelShoeColorEggs = "PanelShoeColorEggs", t.PanelShoeColorEggTip = "PanelShoeColorEggTip", t.PanelShoeSelect = "PanelShoeSelect", t.PanelShoeSelectResult = "PanelShoeSelectResult", t.PanelShop = "PanelShop", t.PanelShopLvup = "PanelShopLvup", t.PanelSign = "PanelSign", t.PanelSkincare = "PanelSkincare", t.PanelStory = "PanelStory", t.PanelSubscribe = "PanelSubscribe", t.PanelSuit = "PanelSuit", t.PanelSuitAward = "PanelSuitAward", t.PanelSuitDetail = "PanelSuitDetail", t.PanelSuitList = "PanelSuitList", t.PanelSuitSelect = "PanelSuitSelect", t.PanelSzz = "PanelSzz", t.PanelSzzShow = "PanelSzzShow", t.PanelTalk = "PanelTalk", t.PanelTryGame = "PanelTryGame", t.PanelVideoRankShare = "PanelVideoRankShare", t.PanelVideoRankTips = "PanelVideoRankTips", t.PanelVideoRankTipsRemote = "PanelVideoRankTipsRemote", t.PanelVideoShareReward = "PanelVideoShareReward", t.PanelWaitTime = "PanelWaitTime", t.Temp = "Temp"
	}(UI_NAME || (UI_NAME = {}));
	var Keyboard = Laya.Keyboard,
		MaskStyle, GUD;
	class KeyboardDebugTool extends MsgHandler {
		constructor(t) {
			super(), this.props = {}, this.bindPanel = t, this.registerListeners({
				[BASE_MSG.SYS_KEY_DOWN]: this.onMsgKeyDown.bind(this)
			}), this.startProcMsg()
		}
		static create(t) {
			this.remove(t);
			let e = new KeyboardDebugTool(t);
			return this._instance.push(e), e
		}
		static remove(t) {
			for (let e = 0; e < this._instance.length; e++)
				if (this._instance[e].bindPanel == t) {
					this._instance[e].dispose(), this._instance.splice(e, 1);
					break
				}
		}
		dispose() {
			this.setter1 = null, this.getter1 = null, this.setter2 = null, this.getter2 = null, this.stopProcMsg()
		}
		onMsgKeyDown(t) {
			if (this.bindPanel && !this.bindPanel.destroyed) {
				if (this.bindPanel.isFocus) switch (t.keyCode) {
					case Keyboard.W:
					case Keyboard.S:
					case Keyboard.A:
					case Keyboard.D:
						(e = this.props[t.keyCode]) && this.updateValue1(e[0], e[1]);
						break;
					case Keyboard.UP:
					case Keyboard.DOWN:
					case Keyboard.LEFT:
					case Keyboard.RIGHT:
						var e;
						(e = this.props[t.keyCode]) && this.updateValue2(e[0], e[1]);
						break;
					case Keyboard.P:
						this.debugInfo()
				}
			} else this.dispose()
		}
		updateValue1(t, e) {
			this.setter1(t, this.getter1(t) + e)
		}
		updateValue2(t, e) {
			this.setter2(t, this.getter2(t) + e)
		}
		setProp(t, e, a) {
			this.props[t] = [e, a]
		}
		createFromTarget(t) {
			this.setter2 = function(e, a) {
				t[e] = a
			}, this.getter2 = function(e) {
				return t[e]
			}
		}
		target(t, e) {
			return this.setter1 ? t instanceof Function ? (this.setter2 = t, this.getter2 = e) : this.createFromTarget(t) : (t instanceof Function ? (this.setter2 = t, this.getter2 = e) : this.createFromTarget(t), this.setter1 = this.setter2, this.getter1 = this.getter2), this
		}
		up(t, e = -1) {
			return this.setProp(Keyboard.W, t, e), this
		}
		down(t, e = 1) {
			return this.setProp(Keyboard.S, t, e), this
		}
		left(t, e = -1) {
			return this.setProp(Keyboard.A, t, e), this
		}
		right(t, e = 1) {
			return this.setProp(Keyboard.D, t, e), this
		}
		up2(t, e = -1) {
			return this.setProp(Keyboard.UP, t, e), this
		}
		down2(t, e = 1) {
			return this.setProp(Keyboard.DOWN, t, e), this
		}
		left2(t, e = -1) {
			return this.setProp(Keyboard.LEFT, t, e), this
		}
		right2(t, e = 1) {
			return this.setProp(Keyboard.RIGHT, t, e), this
		}
		debugInfo() {
			let t = {};
			for (const e in this.props) {
				let a = parseInt(e),
					i = this.props[a][0];
				t[i] = a < 50 ? Mathf.round(this.getter1(i), 4) : Mathf.round(this.getter2(i), 4)
			}
			console.log("------ start ctrl key info ------");
			for (const e in t) console.log(`key:[${e}]=[${t[e]}]`);
			console.log("------ end ctrl key info ------")
		}
		trasform(t, e = .02) {
			return this.target(t), this.up("localPositionY", -e), this.down("localPositionY", e), this.left("localPositionX", e), this.right("localPositionX", -e), this.up2("localRotationEulerX", 1), this.down2("localRotationEulerX", -1), this.left2("localPositionZ", e), this.right2("localPositionZ", -e), this
		}
	}
	KeyboardDebugTool._instance = [];
	class PanelBase3D extends PanelBase {
		static setDefaultLightEular(t, e, a) {}
		dispose() {
			if (this.panelEffects) {
				for (let t = 0; t < this.panelEffects.length; t++) _G.poolManager.put(this.panelEffects[t]);
				this.panelEffects.length = 0
			}
			KeyboardDebugTool.remove(this), this.scene3DBack && (this.scene3DBack.destroy(), this.scene3DBack = null), this.scene3DEffect && (this.scene3DEffect.destroy(), this.scene3DEffect = null, this.cameraEffect = null), super.dispose()
		}
		createScene3DBack(t = 0, e) {
			this.scene3DBack || (this.scene3DBack = this.createScene3D(t), e && (this.camera = this.createCamera(e, this.scene3DBack), this.lightBack = this.camera.addChild(this.createLight())))
		}
		createScene3DEffect(t = 1) {
			if (!this.scene3DEffect) {
				this.scene3DEffect = this.createScene3D();
				var e = this.scene3DEffect.addChild(new Laya.Camera(0, .1, 100));
				e.transform.localPositionZ = 1, e.clearFlag = Laya.Camera.CLEARFLAG_DEPTHONLY, e.orthographic = !0, e.orthographicVerticalSize *= _G.canvasHeight / 1024, this.cameraEffect = e
			}
		}
		global2camer(t, e) {
			return UiHelper.global2camera(t, this.cameraEffect, e)
		}
		node2Camera(t, e) {
			return UiHelper.node2camera(t, this.cameraEffect, e)
		}
		createScene3D(t) {
			let e = new Laya.Scene3D;
			return this.addChild(e), null != t && this.resNode.setChildIndex(e, t), e
		}
		createLight() {
			let t = new Laya.DirectionLight;
			return t.transform.localRotationEuler = PanelBase3D.defaultLightEular, t.color = new Laya.Vector3(1, 1, 1), t
		}
		createCamera(t, e) {
			let a = e.addChild(new Laya.Camera(0, .01, 100));
			return a.fieldOfView = t, a.clearFlag = Laya.Camera.CLEARFLAG_DEPTHONLY, KeyboardDebugTool.create(this).trasform(a.transform), a
		}
		addEffect(t) {
			this.panelEffects || (this.createScene3DEffect(), this.panelEffects = []);
			let e = _G.poolManager.get(Particle, t);
			return e.setParent(this.scene3DEffect), this.panelEffects.push(e), e
		}
		getEffect(t, e = !0) {
			if (this.panelEffects)
				for (let e = 0; e < this.panelEffects.length; e++) {
					let a = this.panelEffects[e];
					if (a.effectId == t) return a
				}
			return e ? this.addEffect(t) : null
		}
		removeEffect(t) {
			if (this.panelEffects)
				for (let e = 0; e < this.panelEffects.length; e++) {
					let a = this.panelEffects[e];
					if (a.effectId == t) {
						this.panelEffects.splice(e, 1), _G.poolManager.put(a);
						break
					}
				}
		}
	}
	PanelBase3D.defaultLightEular = new Laya.Vector3(-5, -11, 0),
		function(t) {
			t.All = "all", t.ExceptCenter = "center", t.None = "none"
		}(MaskStyle || (MaskStyle = {}));
	class PanelGuide extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.UI, this.panelStyle = 0, this.resourceName = "res/ui/PanelGuide.json", this.bResetRootNode = !1, this._exportNodeInfo = {
				cc_blockNode: "Laya.Sprite",
				cc_maskNode: "Laya.Sprite",
				cc_leftNode: "Laya.Image",
				cc_rightNode: "Laya.Image",
				cc_topNode: "Laya.Image",
				cc_bottomNode: "Laya.Image",
				cc_centerNode: "UIButton",
				cc_msgMask: "UIButton",
				cc_anchorCenter: "Laya.Sprite",
				cc_msgNode: "Laya.Sprite",
				cc_msgPnl: "Laya.Sprite",
				cc_headSprite: "Laya.Sprite",
				cc_msgLabel: "Laya.Label",
				cc_nameLabel: "Laya.Label",
				cc_continueSprite: "Laya.Sprite",
				cc_btnJump: "UIButton",
				cc_fingerNode: "Laya.Sprite",
				cc_fingerAnimNode: "Laya.Sprite",
				cc_moveFinger: "Laya.Sprite"
			}, this.btnsClickSound = {
				centerNode: ""
			}, this.curStepIndex = 0, this.curSteps = null, this.curState = "empty", this._clickHandler = null, this._msgKey = null, this._msgFinishTag = null, this._msgFinishCallback = null, this.curWaitTime = 0, this.leftSpine = null, this._jumpCount = 0, this.msgNodeOffset = Vec2.zero
		}
		buildUi() {
			this.resNode.mouseThrough = !0, this.maskNode.visible = !1, this.maskNode.alpha = 0, this.msgNode.visible = !1, this.msgMask.node.alpha = 0, this.blockNode.size(_G.canvasWidth, _G.canvasHeight), this.msgMask.node.size(_G.canvasWidth, _G.canvasHeight), this.anchorCenter.pos(_G.canvasWidth / 2, _G.canvasHeight / 2, !0), this.btnJump.node.pos(_G.canvasWidth - this.btnJump.node.pivotX - 10, 100 + this.btnJump.node.pivotY, !0), this.btnJump.node.visible = !1, this.btnJump.clickDelta = 0, this.initFinger(), this.moveFinger.visible = !1, UiHelper.registerTouchEvent(this.blockNode, UiHelper.stopEventHandler, UiHelper.stopEventHandler, UiHelper.stopEventHandler), this.msgLabel.text = "", this.msgRichText = this.msgLabel, this.curSteps = this.context.script, this.curStepIndex = 0, this.params = this.context.context, this.registerMsg({
				GUD_COMPLETE_KEY: this.onMsgCompleteKey.bind(this),
				GUIDE_FORCE_CLOSE: this.onMsgForceClose.bind(this)
			}), this.startProcMsg(), this.switchToUpdateState()
		}
		dispose() {
			this.stopProcMsg(), this.stopMoveToTimer(), this.leftSpine && (_G.poolManager.put(this.leftSpine), this.leftSpine = null), this._msgFingerAnim && (this._msgFingerAnim.clearTween(), this._msgFingerAnim.setAlpha(1), _G.poolManager.put(this._msgFingerAnim), this._msgFingerAnim = null), super.dispose()
		}
		onMsgCompleteKey(t) {
			"wait_msg" == this.curState && t && t == this._msgKey && (this._msgKey = null, this._msgFinishTag && (this.gotoTag(this._msgFinishTag), this._msgFinishTag = null), this.curState = "update", this._msgFinishCallback && (this._msgFinishCallback(this), this._msgFinishCallback = null), "update" == this.curState && this.switchToUpdateState())
		}
		onMsgForceClose() {
			this.forceClose()
		}
		initFinger() {
			this.fingerAnim = this.addEffect("135"), this.fingerAnim.followTarget(this.fingerAnimNode, this.cameraEffect, 100, 10), this.fingerAnim.hide()
		}
		nextStep() {
			if (this.curStepIndex < this.curSteps.length) {
				let t = this.curStepIndex++;
				console.log("guide step:" + t), (0, this.curSteps[t])(this), "update" == this.curState && this.nextStep()
			} else this.isDisposed || (Logger.error("guide index out of range"), this.close())
		}
		switchToUpdateState() {
			this.curState = "update", this.nextStep()
		}
		update() {
			switch (this.curState) {
				case "empty":
					break;
				case "update":
					this.nextStep();
					break;
				case "wait_time":
					this.curWaitTime -= Timer.deltaTime, this.curWaitTime <= 0 && this.switchToUpdateState();
					break;
				case "wait_click":
					break;
				case "wait_msg":
					this.curWaitTime -= Timer.deltaTime, this.curWaitTime <= 0 && (this._msgFinishTag = null, this._msgFinishCallback = null, this._msgKey = null, this.switchToUpdateState());
					break;
				case "wait_panel":
					this.checkPanel()
			}
		}
		on_click_centerNode() {
			if (Logger.debug("click centerNode"), "wait_click" == this.curState) {
				if (this._clickHandler) try {
					this._clickHandler()
				} catch (t) {
					Logger.error("guide on click error:", t), this._clickHandler = null
				}
				this.switchToUpdateState()
			}
		}
		on_click_msgMask() {
			Logger.debug("click msgMask"), "wait_talk" == this.curState && (this.curState = "update")
		}
		on_click_btnJump() {
			this._jumpCount++ > 10 && (mgrGuide.skipAll(), this.curState, this.closeGuide(!0))
		}
		forceClose() {
			this.callable ? (mgrGuide.finish(!1), this.curState, this.close()) : this.safeCall(this.forceClose)
		}
		closeGuide(t) {
			this.callable ? this.isDisposed || (mgrGuide.finish(t), this.close()) : this.safeCall(this.closeGuide, t)
		}
		stop() {
			this.callable ? this.curStepIndex = this.curSteps.length : this.safeCall(this.stop)
		}
		moveTo(t, e, a = 128, i = 128) {
			if (!this.callable) return void this.safeCall(this.moveTo, t, e, a, i);
			let s = _G.canvasWidth,
				n = _G.canvasHeight,
				o = !1;
			if (t instanceof Laya.Sprite) {
				var r = new Laya.Vector2(t.pivotX, t.pivotY);
				e && (r.x += e.x, r.y += e.y), t.localToGlobal(r, !1), o = !0
			} else r = t;
			r.x -= a / 2, r.y -= i / 2, r.x = Math.floor(Mathf.clamp(r.x, 0, s - a)), r.y = Math.floor(Mathf.clamp(r.y, 0, n - i)), this.centerNode.node.size(a, i).pos(r.x, r.y, !0), this.fingerNode.pos(r.x, r.y, !0);
			let l = r.x;
			this.leftNode.size(l, n).pos(0, 0, !0);
			let c = s - l - a;
			this.rightNode.size(c, n).pos(r.x + a, 0, !0);
			let h = r.y;
			this.topNode.size(a, h).pos(r.x, 0, !0);
			let d = n - h - i;
			this.bottomNode.size(a, d).pos(r.x, r.y + i, !0), this.fingerAnimNode.pos(a / 2, i / 2, !0), o && (this.stopMoveToTimer(), Laya.timer.frameOnce(1, this, this.moveTo, [t, e, a, i]))
		}
		stopMoveToTimer() {
			Laya.timer.clear(this, this.moveTo)
		}
		showFingerClickAnim() {
			this.callable ? (this.fingerNode.visible = !0, this.moveFinger.visible = !1, cc.clearTween(this.moveFinger), this.centerNode.node.x > _G.canvasWidth - 150 ? (this.fingerAnimNode.scale(-1, 1, !0), this.fingerAnim.setScale(-1, 1, 1), this.fingerAnim._offsetX = -100) : (this.fingerAnimNode.scale(1, 1, !0), this.fingerAnim.setScale(1, 1, 1), this.fingerAnim._offsetX = 100), this.fingerAnim.show(), this.fingerAnim.play(), this.fingerAnimNode.pos(this.centerNode.node.width / 2, this.centerNode.node.height / 2, !0), this.fingerAnimNode.alpha = 0, cc.tween(this.fingerAnimNode, !0).to(.2, cc.PROP.ALPHA1).start()) : this.safeCall(this.showFingerClickAnim)
		}
		showFingerMoveAnim(t, e, a = !1, i = 1) {
			this.callable ? (this.fingerNode.visible = !1, this.stopMoveToTimer(), this.fingerAnim.stop(), this.fingerAnim.hide(), this.moveFinger.visible = !0, a ? (this.moveFinger.alpha = 1, this.moveFinger.pos(t.x, t.y, !0), cc.tween(this.moveFinger, !0).repeatForever(cc.tween().to(i, {
				x: e.x,
				y: e.y
			}).to(i, {
				x: t.x,
				y: t.y
			})).start()) : (this.moveFinger.alpha = 0, cc.tween(this.moveFinger, !0).repeatForever(cc.tween().set({
				x: t.x,
				y: t.y
			}).to(.2, cc.PROP.ALPHA1).to(i, {
				x: e.x,
				y: e.y
			}, cc.OPTION.SINE_OUT).to(.2, cc.PROP.ALPHA0)).start())) : this.safeCall(this.showFingerMoveAnim, t, e, a, i)
		}
		showFingerMovePathAnim(t, e = 450, a = 0) {
			if (!this.callable) return void this.safeCall(this.showFingerMovePathAnim, t, e, a);
			this.fingerNode.visible = !1, this.stopMoveToTimer(), this.fingerAnim.stop(), this.fingerAnim.hide(), this.moveFinger.visible = !0;
			let i = cc.tween();
			for (let a = 0; a < t.length; a++) {
				const s = t[a];
				if (0 == a) i.set({
					x: s.x,
					y: s.y
				}), i.set(cc.PROP.ALPHA0), i.to(.2, cc.PROP.ALPHA1);
				else {
					let n = t[a - 1],
						o = Mathf.distance(s, n) / e;
					i.to(o, {
						x: s.x,
						y: s.y
					})
				}
			}
			i.to(.2, cc.PROP.ALPHA0).delay(a), this.moveFinger.alpha = 0, cc.tween(this.moveFinger, !0).repeatForever(i).start()
		}
		hideMoveFinger() {
			this.callable ? (cc.clearTween(this.moveFinger), this.moveFinger.visible = !1) : this.safeCall(this.hideMoveFinger)
		}
		followSprite(t) {
			this.callable ? (this.moveFinger.alpha = 1, cc.tween(this.moveFinger, !0).then(cc.follow2d(t)).start()) : this.safeCall(this.followSprite, t)
		}
		setMaskStyle(t) {
			if (this.callable) switch (t) {
				case MaskStyle.All:
					this.centerNode.node.mouseEnabled = !0, this.centerNode.node.visible = !0, this.leftNode.visible = !0, this.rightNode.visible = !0, this.topNode.visible = !0, this.bottomNode.visible = !0;
					break;
				case MaskStyle.ExceptCenter:
					this.centerNode.node.mouseEnabled = !1, this.centerNode.node.visible = !0, this.leftNode.visible = !0, this.rightNode.visible = !0, this.topNode.visible = !0, this.bottomNode.visible = !0;
					break;
				case MaskStyle.None:
					this.centerNode.node.visible = !1, this.leftNode.visible = !1, this.rightNode.visible = !1, this.topNode.visible = !1, this.bottomNode.visible = !1
			} else this.safeCall(this.setMaskStyle, t)
		}
		setMaskVisible(t, e = .2) {
			this.callable ? t ? (this.maskNode.visible = !0, cc.clearTween(this.maskNode), 1 != this.maskNode.alpha && cc.tween(this.maskNode).to(e, cc.PROP.ALPHA1).start(), this.setMsgMaskVisible(!1)) : (this.maskNode.visible && cc.tween(this.maskNode, !0).to(e, cc.PROP.ALPHA0).hide().start(), this.stopMoveToTimer(), this.fingerAnim.stop(), this.fingerAnim.hide()) : this.safeCall(this.setMaskVisible, t, e)
		}
		setBlockEnabled(t) {
			this.callable ? this.blockNode.visible = t : this.safeCall(this.setBlockEnabled, t)
		}
		showMsg(t, e = 0, a = 0, i = !1, s = !1) {
			if (!this.callable) return void this.safeCall(this.showMsg, t, e, a, i, s);
			let n = this.msgPnl;
			this.msgNode.pos(e, a + this.msgNodeOffset.y), n.scale(0, 0, !0), n.visible = !0, cc.tween(n, !0).to(.3, {
				scaleX: s ? -1 : 1,
				scaleY: 1
			}, {
				easing: cc.Ease.backOut
			}).start(), this.msgRichText.text = t, this.msgNode.visible = !0, s ? (this.msgLabel.scale(-1, 1, !0), this.nameLabel.scale(-1, 1, !0), this.headSprite.scale(-1, 1, !0)) : (this.msgLabel.scale(1, 1, !0), this.nameLabel.scale(1, 1, !0), this.headSprite.scale(1, 1, !0)), this._msgFingerAnim && (this._msgFingerAnim.clearTween(), this._msgFingerAnim.setAlpha(0)), i && (this.curState = "wait_talk")
		}
		setStateToWaitTalk() {
			this.callable ? this.curState = "wait_talk" : this.safeCall(this.setStateToWaitTalk)
		}
		hideMsg() {
			this.callable ? this.msgNode.visible = !1 : this.safeCall(this.hideMsg)
		}
		setMsgNodeOffset(t, e) {
			this.callable ? (this.msgNodeOffset.x = t, this.msgNodeOffset.y = e) : this.safeCall(this.setMsgNodeOffset, t, e)
		}
		showClickMsg(t, e, a, i = 0, s = !0) {
			this.callable ? (i > 0 ? this.scheduleOnce(i, () => {
				this.showMsg(t, e, a, !1, !s)
			}) : this.showMsg(t, e, a, !1, !s), this.curState = "wait_free", this.scheduleOnce(i + .6, () => {
				this.curState = "wait_talk"
			}), this._msgFingerAnim || (this._msgFingerAnim = _G.poolManager.get(Spine, db.SPINE_DB_ID.yindao), this._msgFingerAnim.setParent(this.continueSprite), this._msgFingerAnim.setPosition(this.continueSprite.pivotX, this.continueSprite.pivotY), this._msgFingerAnim.playDefaultAnim()), this._msgFingerAnim.clearTween(), this._msgFingerAnim.setAlpha(0), this._msgFingerAnim.runTween(cc.tween().delay(1.3).to(.3, cc.PROP.ALPHA1))) : this.safeCall(this.showClickMsg, t, e, a, i, s)
		}
		setHead(t, e, a, i) {
			this.callable ? (this.nameLabel.text = t, e && this.headSprite.loadImage(e), this.headSprite.pos(a, i, !0)) : this.safeCall(this.setHead, t, e, a, i)
		}
		setMsgMaskVisible(t, e = 1, a = .3) {
			this.callable ? t ? (this.msgMask.node.visible = !0, this.msgMask.node.alpha != e && cc.tween(this.msgMask.node, !0).to(a, {
				alpha: e
			}).start(), this.setMaskVisible(!1)) : this.msgMask.node.visible && cc.tween(this.msgMask.node, !0).to(a, cc.PROP.ALPHA0).hide().start() : this.safeCall(this.setMsgMaskVisible, t, e, a)
		}
		wait(t) {
			this.callable ? (this.curWaitTime = t, this.curState = "wait_time") : this.safeCall(this.wait, t)
		}
		waitForMsg(t, e, a = null, i) {
			this.callable ? (this.curWaitTime = e, this._msgKey = t, this._msgFinishTag = a, this._msgFinishCallback = i, this.curState = "wait_msg") : this.safeCall(this.waitForMsg, t, e, a, i)
		}
		gotoTag(t) {
			if (!this.callable) return void this.safeCall(this.gotoTag, t);
			let e = this.curSteps;
			for (let a = 0; a < e.length; a++)
				if (e[a] == t) return void(this.curStepIndex = a + 1);
			Logger.error("jumpToTag error")
		}
		setWaitPanel(t) {
			this.callable ? (this._waitPanel = t, this.curState = "wait_panel") : this.safeCall(this.setWaitPanel, t)
		}
		checkPanel() {
			this.callable ? "wait_panel" == this.curState && (this._waitPanel ? mgrPanel.findPanel(this._waitPanel) && (this._waitPanel = null, this.switchToUpdateState()) : this.switchToUpdateState()) : this.safeCall(this.checkPanel)
		}
		setJumpEnable(t) {
			this.callable ? this.btnJump.node.visible = t : this.safeCall(this.setJumpEnable, t)
		}
	}

	function findUi(t) {
		let e = mgrGuide.getRegisterNode(t);
		if (e) return e;
		let a = t.split("/");
		if (a && a.length > 1) {
			let e = mgrPanel.findViewByName(a[0]);
			if (e) {
				let a = UiHelper.getChild(mgrPanel.getLayerNode(e.panelLayer), t);
				if (a) return a;
				console.warn(`找不到ui:${t}`)
			} else console.warn(`找不到 panel:${t}`)
		} else console.warn(`uiName错误:${t}`);
		return null
	}
	class GUDHelper {
		static getPosByBottomOffset(t, e) {
			return new Laya.Point(_G.canvasWidth / 2 + t, _G.bottom + e)
		}
		static getPosByCenterOffset(t, e) {
			return new Laya.Point(_G.canvasWidth / 2 + t, _G.canvasHeight / 2 + e)
		}
	}

	function sort_rank_by_score(t, e) {
		return t.score < e.score ? 1 : t.score > e.score ? -1 : 0
	}

	function sort_rank_by_rank(t, e) {
		return t.rank < e.rank ? -1 : t.rank > e.rank ? 1 : 0
	}! function(t) {
		function click(t, e = Vec2.zero, a, i, s) {
			return function(n) {
				let o = findUi(t);
				o ? (n.setMaskVisible(!0), n.setMaskStyle(MaskStyle.All), n.moveTo(o, e, a, i), n.showFingerClickAnim(), n._clickHandler = function() {
					function doClick() {
						o.event(Laya.Event.CLICK), o.event("uibutton_click", "dummy")
					}
					s && s(n) || doClick()
				}, n.curState = "wait_click") : n.forceClose()
			}
		}

		function getUiPos(t) {
			if ("string" == typeof t) {
				let e = findUi(t);
				return e ? (new Vec2).set(UiHelper.getSelfGlobalPos(e, new Laya.Point)) : null
			}
			return (new Vec2).set(t)
		}
		t.close = function() {
			return function(t) {
				t.closeGuide(!1)
			}
		}, t.closeAndSave = function() {
			return function(t) {
				t.closeGuide(!0)
			}
		}, t.moveMaskTo = function(t, e) {
			return function(a) {
				let i = findUi(t);
				a.moveTo(i, e)
			}
		}, t.click = click, t.clickOnly = function(t, e, a, i = Vec2.zero) {
			return function(s) {
				let n = findUi(t);
				n ? (s.moveTo(n, i, e, a), s._clickHandler = function() {
					n.event(Laya.Event.CLICK), n.event("uibutton_click")
				}, s.curState = "wait_click") : s.forceClose()
			}
		}, t.waitAndClick = function(t, e = Vec2.zero, a, i, s) {
			return function(n) {
				mgrGuide.getRegisterNode(t) ? click(t, e, a, i, s)(n) : n.waitForMsg(t, 1e5, null, function() {
					click(t, e, a, i, s)(n)
				})
			}
		}, t.waitPanel = function(t) {
			return function(e) {
				e.setWaitPanel(t)
			}
		}, t.waitNode = function(t) {
			return function(e) {
				mgrGuide.getRegisterNode(t) || e.waitForMsg(t, 1e5)
			}
		}, t.moveFingerTo = function(t) {
			return function(e) {
				if ("string" == typeof t) {
					let a = findUi(t);
					e.moveTo(a)
				} else e.moveTo(t)
			}
		}, t.moveFingerBetween = function(t, e, a, i) {
			return function(s) {
				let n = getUiPos(t);
				if (!n) return void s.forceClose();
				let o = getUiPos(e);
				o ? s.showFingerMoveAnim(n, o, a, i) : s.forceClose()
			}
		}, t.hideMoveFinger = function() {
			return function(t) {
				t.hideMoveFinger()
			}
		}, t.setMaskVisible = function(t) {
			return function(e) {
				e.setMaskVisible(t)
			}
		}, t.showMaskAll = function() {
			return function(t) {
				t.setMaskStyle(MaskStyle.All)
			}
		}, t.showMaskExceptCenter = function() {
			return function(t) {
				t.setMaskStyle(MaskStyle.ExceptCenter)
			}
		}, t.showMaskNone = function() {
			return function(t) {
				t.setMaskStyle(MaskStyle.None)
			}
		}, t.showMsg = function(t, e = 0, a = 0, i = !1) {
			return function(s) {
				let n = e,
					o = _G.canvasFitHeight / 2 - 80 + a;
				s.showMsg(t, n, o, i)
			}
		}, t.setHead = function(t, e, a, i) {
			return function(s) {
				s.setHead(t, e, a, i)
			}
		}, t.showClickMsg = function(t, e = 0, a = 0, i = 0) {
			return function(s) {
				s.setMsgMaskVisible(!0);
				let n = e,
					o = _G.canvasFitHeight / 2 - 80 + a;
				s.showClickMsg(t, n, o, i, !0)
			}
		}, t.hideAll = function() {
			return function(t) {
				t.hideMsg(), t.setMsgMaskVisible(!1), t.setMaskVisible(!1)
			}
		}, t.hideMsg = function() {
			return function(t) {
				t.hideMsg()
			}
		}, t.setMsgMaskVisible = function(t, e, a) {
			return function(i) {
				i.setMsgMaskVisible(t, e, a)
			}
		}, t.waitTime = function(t) {
			return function(e) {
				e.wait(t)
			}
		}, t.waitForMsg = function(t, e = 1e6, a = null) {
			return function(i) {
				i.waitForMsg(t, e, a)
			}
		}, t.callFunc = function(t) {
			return function(e) {
				t && t(e)
			}
		}, t.setBlockEnabled = function(t) {
			return function(e) {
				e.setBlockEnabled(t)
			}
		}, t.setJumpEnable = function(t) {
			return function(e) {
				e.setJumpEnable(t)
			}
		}, t.setStateToWaitTalk = function() {
			return function(t) {
				t.setStateToWaitTalk()
			}
		}, t.gotoTag = function(t) {
			return function(e) {
				e.gotoTag(t)
			}
		}, t.saveGuide = function(t, e) {
			mgrGuide.saveGuideStep(t, e)
		}, t.stop = function() {
			return function(t) {
				t.stop()
			}
		}, t.playTalk = function(t) {
			return function() {
				mgrSound.playTalk(t)
			}
		}, t.playSound = function(t) {
			return function() {
				mgrSound.playSound(t)
			}
		}, t.sendMsg = function(t) {
			return function() {
				_G.sendMsg(t)
			}
		}, t.pointEvent = function(t, e) {
			return function() {
				GameStatistics.statisCommonEvent(t, e)
			}
		}
	}(GUD || (GUD = {}));
	const KEY_PLAYER_SCORE = "KEY_PLAYER_SCORE",
		KEY_UID = "KEY_UID",
		KEY_RANK_HEAD = "KEY_RANK_HEAD",
		FILE_RANK = "FILE_RANK";
	class mgrRank extends _mgrBase {
		static onload() {
			SDKBridge.registerCmd("/c/getRankResult", this.onGetRankResult.bind(this)), FileRecord.getData(KEY_PLAYER_SCORE) || FileRecord.setData(KEY_PLAYER_SCORE, []);
			let t = FileRecord.getData(KEY_UID);
			t || (t = _G.H5_TEST ? `uid_${Tools.formatFullTime()}_${Mathf.random(1e3)}` : Tools.generateUUID(), FileRecord.setData(KEY_UID, t)), this.uid = t, this.headRankData = FileRecord.getData(KEY_RANK_HEAD) || [], this.loadRankData()
		}
		static loadRankData() {
			let t = FileRecord.getDataFromFile(FILE_RANK);
			if (t)
				for (let e = 0; e < t.length; e++) {
					let a = t[e];
					for (let t = 0; t < a.length; t++)
						if (a[t].name == this.playerName) {
							this.playerRankData[e] = a[t];
							break
						}
				}
			this.rankDatas = t || [
				[],
				[],
				[]
			]
		}
		static saveRankData() {
			this.rankDatas && FileRecord.setDataToFile(FILE_RANK, this.rankDatas)
		}
		static getRandomHead() {
			return Mathf.random(18) + ""
		}
		static getRandomName() {
			let t = mgrI18n.zhcn1 && mgrI18n.zhcn1.values,
				e = mgrI18n.zhcn2 && mgrI18n.zhcn2.values,
				a = mgrI18n.pt1 && mgrI18n.pt1.values,
				i = mgrI18n.pt2 && mgrI18n.pt2.values,
				s = mgrI18n.vi1 && mgrI18n.vi1.values,
				n = mgrI18n.vi2 && mgrI18n.vi2.values,
				o = mgrI18n.en1 && mgrI18n.en1.values,
				r = mgrI18n.en2 && mgrI18n.en2.values,
				l = mgrI18n.id1 && mgrI18n.id1.values,
				c = mgrI18n.id2 && mgrI18n.id2.values,
				h = "";
			switch (mgrI18n.getLanguage()) {
				case E_LANGUAGE.zhcn:
					h = t[Mathf.random(t.length) - 1] + e[Mathf.random(e.length) - 1];
					break;
				case E_LANGUAGE.pt:
					h = a[Mathf.random(a.length) - 1] + i[Mathf.random(i.length) - 1];
					break;
				case E_LANGUAGE.vi:
					h = s[Mathf.random(s.length) - 1] + n[Mathf.random(n.length) - 1];
					break;
				case E_LANGUAGE.en:
					h = o[Mathf.random(o.length) - 1] + r[Mathf.random(r.length) - 1];
					break;
				case E_LANGUAGE.id:
					h = l[Mathf.random(l.length) - 1] + c[Mathf.random(c.length) - 1]
			}
			return h == this.playerName ? this.getRandomName() : h
		}
		static setPlayerName() {
			this.playerName = FileRecord.getData("player_name"), this.playerName || (this.playerName = this.getRandomName(), FileRecord.setData("player_name", this.playerName))
		}
		static setHttpMode(t, e) {
			t && e ? (this._rankId = t, this._appId = e, this._rankMode = 1) : this._rankMode = 0
		}
		static setSdkMode() {
			this._rankMode = 2
		}
		static setDummyMode() {
			this._rankMode = 3
		}
		static requestRankData(t = 0) {
			switch (console.log("---\x3e mgrRank.requestRankData"), this._rankMode) {
				case 1:
					console.log("服务器排行已经弃用");
					break;
				case 2:
					this.requestSdkRank(t);
					break;
				case 3:
					this.requestDummyRank(t)
			}
		}
		static commit(t, e = 0) {
			switch (this._rankMode) {
				case 1:
					this.commitToHttp(this._rankId, e, t), this.playerRankData[e] = null, this.rankDatas[e] = [];
					break;
				case 2:
					this.commitToSdk(e, t), this.playerRankData[e] = null, this.rankDatas[e] = [];
					break;
				case 3:
					this.commitToDummy(e, t)
			}
		}
		static getPlayerScore(t) {
			return FileRecord.getData(KEY_PLAYER_SCORE)[t] || 0
		}
		static onGetRankResult(t) {
			if (console.log("---\x3e mgrRank.onGetRankResult:", t.code), 1 == t.code) {
				let e = [];
				for (const a in t.msg) {
					let i = JSON.parse(t.msg[a]),
						s = {
							name: i.nickName,
							rank: parseInt(a),
							score: i.score,
							uid: i.userId.toString(),
							headUrl: i.headUrl,
							selfFlag: i.selfFlag
						};
					e.push(s), i.selfFlag && (this.playerRankData[0] = e[e.length - 1])
				}
				e.sort(function(t, e) {
					return t.rank - e.rank
				}), console.error("sdk 排行只有1个。"), this.rankDatas[0] = e, _G.sendMsg("RECEIVE_RANK_DATA"), this.playerRankData[0] && _G.sendMsg("RECEIVE_SELF_RANK_DATA")
			}
		}
		static requestSdkRank(t, e = 20) {
			SDKBridge.sendToSdk("/c/getRankData", {
				dataNum: e,
				rankName: t,
				order: 1,
				rankType: 0
			})
		}
		static commitToSdk(t, e) {
			let a = Math.floor(Timer.now);
			SDKBridge.sendToSdk("/c/saveRankData", {
				startTime: (a - 15).toString(),
				endTime: a.toString(),
				rankName: t + "",
				score: Math.floor(e),
				order: 1
			})
		}
		static commitToHttp(t, e, a) {
			let i = this.uid;
			JSON.stringify;
			let s = {
					cmd: "/set/setPlayerInfoWithScoreArray",
					info: {
						uidarray: [i],
						dataarray: [JSON.stringify({
							name: this.playerName
						})],
						scorearray: [a.toString()],
						rankid: t
					}
				},
				n = JSON.stringify(s);
			n && this.request(n)
		}
		static requestHttpRank(t, e = 1, a = 30) {
			if (e < 1 || a < e) return void Logger.error(`mgrRank.requestServerRank 非法请求 from:${e}, to:${a}`);
			let i = new Array(a - e + 1);
			for (let t = 0; t < i.length; t++) i[t] = (e + t).toString();
			let s = {
					cmd: "/get/getPlayerInoByRankid",
					info: {
						rankarry: i,
						rankid: this._rankId,
						sorttype: "REVRANGE"
					}
				},
				n = JSON.stringify(s);
			n && this.request(n, e => {
				this.refreshHttpRankData(e, t)
			})
		}
		static refreshHttpRankData(t, e = 0) {
			if (!t) return;
			if (1 != parseInt(t.code)) return;
			let a = t.msg;
			if (!a) return;
			let i = [];
			Tools.forEachMap(a, (t, e) => {
				let a = JSON.parse(e);
				if (a && a.data) try {
					let e = JSON.parse(a.data);
					i.push({
						name: e.name,
						score: parseInt(a.score),
						rank: parseInt(t),
						uid: a.uid,
						headUrl: ""
					})
				} catch (t) {}
			}), i.sort(sort_rank_by_rank), this.rankDatas[e] = i, _G.sendMsg("RECEIVE_RANK_DATA")
		}
		static requestSelfHttpRank(t) {
			let e = {
					cmd: "/get/getPlayerInfoByUid",
					info: {
						uidarry: [this.uid],
						rankid: this._rankId,
						sorttype: "REVRANGE"
					}
				},
				a = JSON.stringify(e);
			a && this.request(a, e => {
				this.refreshHttpSelfRankData(e, t)
			})
		}
		static refreshHttpSelfRankData(t, e = 0) {
			let a = this.uid,
				i = t.msg[a];
			if (!i) return;
			let s = JSON.parse(i);
			if (s && s.data) {
				let t = JSON.parse(s.data);
				this.playerRankData[e] = {
					name: t.name,
					score: parseInt(s.score),
					rank: s.rank,
					uid: a,
					headUrl: ""
				}, _G.sendMsg("RECEIVE_SELF_RANK_DATA")
			}
		}
		static request(t, e) {}
		static _calcRank(t, e) {
			let a = this._getMaxScore(t);
			switch (e = Math.min(a, e), t) {
				case 0:
					return 1 + (100 * Math.pow(a - e, 2) | 0);
				case 1:
					return Math.floor(Math.pow(a - e, 2.4)) + 1;
				case 2:
					return Math.floor(Math.pow(a - e, 1.1)) + 1
			}
		}
		static _getMaxScore(t) {
			switch (t) {
				case 0:
					return 25;
				case 1:
					return 100;
				case 2:
					return 2e4;
				default:
					return 9999
			}
		}
		static _randomRankRange(t, e, a) {
			if (a < 2) return null;
			e = Math.min(this._getMaxScore(t), e);
			let i = [],
				s = this._calcRank(t, e);
			if (e < 1) {
				for (let t = 0; t < a; t++) i.push({
					name: this.getRandomName(),
					score: e,
					rank: s + t,
					uid: "",
					headUrl: this.getRandomHead()
				});
				return void(this.rankDatas[t] = i)
			}
			let n = {
				name: this.playerName,
				score: e,
				rank: s,
				uid: this.uid,
				headUrl: "1",
				selfFlag: !0
			};
			if (i.push(n), this.playerRankData[t] = n, 1 == s) {
				for (let t = 0; t < a - 1; t++) i.push({
					name: this.getRandomName(),
					score: e,
					rank: s + 1 + t,
					uid: "",
					headUrl: this.getRandomHead()
				});
				return this.rankDatas[t] = i, void this.updateHeadRank(t)
			}
			for (let t = 0; t < a - 2; t++) i.push({
				name: this.getRandomName(),
				score: e,
				rank: s,
				uid: "",
				headUrl: this.getRandomHead()
			});
			Mathf.shuffle(i);
			let o = Math.min(this._getMaxScore(t), e + 1),
				r = this._calcRank(t, o);
			i.unshift({
				name: this.getRandomName(),
				score: o,
				rank: r,
				uid: "",
				headUrl: this.getRandomHead()
			});
			for (let t = 1; t < i.length; t++) i[t].rank = r + t + 1;
			this.rankDatas[t] = i
		}
		static commitToDummy(t, e) {
			e < 1 && (e = 1);
			let a = FileRecord.getData(KEY_PLAYER_SCORE);
			(a[t] || 0) > e || (a[t] = e, FileRecord.setData(KEY_PLAYER_SCORE, a), this.playerRankData[t] = null, this.rankDatas[t] = [])
		}
		static requestDummyRank(t) {
			let e = FileRecord.getData(KEY_PLAYER_SCORE)[t] || 1;
			this._randomRankRange(t, e, 20), this.headRankData[t] || this.updateHeadRank(t), this.rankDatas[t] && (_G.sendMsg("RECEIVE_RANK_DATA"), this.playerRankData[t] && _G.sendMsg("RECEIVE_SELF_RANK_DATA"), this.saveRankData())
		}
		static updateHeadRank(t) {
			let e = this.playerRankData[t],
				a = this.rankDatas[t];
			if (e && 1 == e.rank) this.headRankData[t] = [a[0], a[1], a[2]];
			else {
				let e = [];
				for (let a = 0; a < 3; a++) e.push({
					name: this.getRandomName(),
					score: this._getMaxScore(t),
					rank: 1,
					uid: "",
					headUrl: this.getRandomHead()
				});
				this.headRankData[t] = e
			}
			FileRecord.setData(KEY_RANK_HEAD, this.headRankData)
		}
		static getRankPercent(t, e) {
			let a = this._calcRank(t, 0);
			return Mathf.lerpFromInverseLerp(0, 1, a, 1, e)
		}
	}
	mgrRank.playerRankData = [], mgrRank._rankMode = 3;
	class mgrSuit extends _mgrBase {
		static onload() {
			this.suitData = FileRecord.getData("KEY_SUIT_DATA") || {}
		}
		static saveData() {
			FileRecord.setData("KEY_SUIT_DATA", this.suitData)
		}
		static getAllSuits(t) {
			let e = [];
			return Tools.forEachMap(db.get_suit_db_map(), function(a, i) {
				null != t && t != i.gid || e.push(a)
			}), e
		}
		static getHasSuits(t) {
			let e = [];
			return Tools.forEachMap(db.get_suit_db_map(), (a, i) => {
				null != t && t != i.gid || this.hasSuit(a) && e.push(a)
			}), e
		}
		static getSuitId(t) {
			let e, a = db.get_suit_db_map();
			return Tools.forEachMap(a, function(a, i) {
				if (i.parts.indexOf(t) >= 0) return e = a, !0
			}), e
		}
		static hasSuit(t) {
			if (!t) return !1;
			let e = db.get_suit_db(t).parts;
			for (let t = e.length - 1; t >= 0; t--)
				if (!BaseFacade.mItem.isOwned(e[t])) return !1;
			return !0
		}
		static hasPartCount(t) {
			if (!t) return 0;
			let e = 0,
				a = db.get_suit_db(t).parts;
			for (let t = a.length - 1; t >= 0; t--) BaseFacade.mItem.isOwned(a[t]) && e++;
			return e
		}
		static isSuitAwarded(t) {
			return !!t && this.suitData[t]
		}
		static getSuitAward(t, e) {
			if (!t) return;
			if (this.isSuitAwarded(t)) return;
			this.suitData[t] = !0, this.saveData();
			let a = db.get_suit_db(t),
				i = {
					itemId: "1000",
					count: a.diamondCount
				};
			return e && (i.count *= 3), BaseFacade.mItem.addItem(i.itemId, i.count, 24), mgrAlert.alertItems(i), _G.sendMsg("SUIT_UPDATE"), GameStatistics.statisCommonEventOnce(7054), a.awardStatistics && GameStatistics.statisCommonEvent(a.awardStatistics, e ? 1 : 0), i
		}
		static findSuit(t) {
			let e = db.get_suit_db_map(),
				a = null;
			return Tools.forEachMap(e, function(e, i) {
				if (~i.parts.indexOf(t)) return a = e, !0
			}), a
		}
		static hasAwardSuit() {
			let t = this.getHasSuits();
			for (let e = t.length - 1; e >= 0; e--)
				if (!this.isSuitAwarded(t[e])) return !0;
			return !1
		}
	}
	const KEY_PART_DEFAULT = "KEY_PART_DEFAULT",
		KEY_PART_SELECT = "KEY_PART_SELECT",
		KEY_PART_WEAR = "KEY_PART_WEAR";
	class mgrPart extends _mgrBase {
		static onload() {
			let t = FileRecord.getData(KEY_PART_WEAR);
			t || (t = this.defaultParts, FileRecord.setData(KEY_PART_WEAR, t)), this.partsWear = t, mgrRes.loadRes("res/cfg/paintData.txt", RES_TYPE.BUFFER, t => {
				let e = Tools.decompressArrToStr(t);
				if (e) {
					let t = JSON.parse(e);
					this.paintData = t
				}
			}), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this)
			})
		}
		static start() {}
		static onMsgItemChange(t) {
			if (0 == t.lastCount) {
				let e = t.itemDb;
				if (2 == e.type) switch (e.subType) {
					case 1:
						this.onGetNewPart(e)
				}
			}
		}
		static onGetNewPart(t) {
			let e = t.id;
			_G.sendMsg("GET_NEW_PART", e), BaseFacade.mGoal.commit(ACTION_ID.PART_COUNT);
			let a = mgrSuit.findSuit(e);
			if (mgrSuit.hasSuit(a)) {
				BaseFacade.mGoal.commit(ACTION_ID.NEW_SUIT);
				let t = db.get_suit_db(a);
				t.finishStatistics && GameStatistics.statisCommonEvent(t.finishStatistics), _G.sendMsg("SUIT_UPDATE")
			}
		}
		static setWearPart(t) {
			if (t instanceof Object) this.partsWear = t;
			else {
				let e = db.get_item_db(t);
				this.partsWear[e.gid] != t && (this.partsWear[e.gid] = t)
			}
			FileRecord.setData(KEY_PART_WEAR, this.partsWear)
		}
		static getSelectParts() {
			return FileRecord.getData(KEY_PART_SELECT)
		}
		static setSelectParts(t) {
			this.resetDefaultParts(t), t = this.checkDefaultParts(t), FileRecord.setData(KEY_PART_SELECT, t), FileRecord.setData(KEY_PART_WEAR, t), this.partsWear = Tools.deepCopy(t)
		}
		static resetDefaultParts(t) {
			let e = db.get_part_type_db_map(),
				a = {};
			Tools.forEachMap(e, function(e, i) {
				i.defaultPartId && (t[e] ? a[e] = t[e] : a[e] = i.defaultPartId)
			}), Tools.forEachMap(t, function(t, e) {
				BaseFacade.mItem.isOwned(e) || BaseFacade.mItem.addItem(e, 1, null)
			}), FileRecord.setData(KEY_PART_DEFAULT, a)
		}
		static get defaultParts() {
			let t = FileRecord.getData(KEY_PART_DEFAULT);
			return t ? Tools.deepCopy(t) : (t = {}, Tools.forEachMap(db.get_part_type_db_map(), function(e, a) {
				a.defaultPartId && (t[e] = a.defaultPartId)
			}), t)
		}
		static checkDefaultParts(t) {
			let e, a = this.defaultParts;
			if (t instanceof Array) {
				e = [];
				for (let i = 0; i < t.length; i++) {
					delete a[db.get_item_db(t[i]).gid], e.push(t[i])
				}
				for (const t in a) {
					let i = a[t];
					i && e.push(i)
				}
			} else {
				e = {};
				for (const i in t) {
					let s = db.get_item_db(t[i]);
					delete a[s.gid], e[s.gid] = s.id
				}
				for (const t in a) {
					let i = a[t];
					i && (e[t] = i)
				}
			}
			return e
		}
		static removeUnchoosePart(t) {
			for (var e = t.length - 1; e >= 0; e--) {
				2 != db.get_item_db(t[e]).type && t.splice(e, 1)
			}
		}
		static addPartResList(t, e, a = !1) {
			for (var i in a && (e.add(db.get_model_db(db.MODEL_DB_ID.body).resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.face).resPath, RES_TYPE.PREFAB3D)), t) {
				var s = t[i];
				let a = db.get_item_db(s).viewList;
				for (let t = 0; t < a.length; t++) {
					let i = db.get_model_db(a[t]);
					0 == i.type ? e.add(i.resPath, RES_TYPE.PREFAB3D) : e.add(i.resPath, RES_TYPE.TEXTURE2D)
				}
			}
		}
		static isMatchTag(t, e, a) {
			return "number" == typeof t ? t == e || t == a : t.tag1 && t.tag2 ? this.isMatchTag(t.tag1, e, a) && this.isMatchTag(t.tag2, e, a) : this.isMatchTag(t.tag1, e, a) || this.isMatchTag(t.tag2, e, a)
		}
		static setRolePhoto(t) {
			this.roleTexture && (this.roleTexture.destroy(!0), this.roleTexture = null), t && (t instanceof Laya.Texture ? this.roleTexture = t : this.roleTexture = Laya.Texture.create(t, 0, 0, t.width, t.height))
		}
		static calcLevelScore(t, e) {
			let a = {},
				i = 0;
			for (const s in t) {
				let n = this.calcPartScore(t[s], e);
				a[s] = n, i += n
			}
			let s = i >= e.score;
			return _G.H5_TEST && Logger.log(`总分数:${i}, 结果:${s}`), this.partScoreResult = {
				partsScore: a,
				totalScore: i,
				suc: s,
				parts: t,
				weight: e
			}, this.partScoreResult
		}
		static calcPartScore(t, e) {
			let a = db.get_item_db(t),
				i = DbExt.getTagWeights(a),
				s = 0;
			return e.tag1 && (s = i[e.tag1 - 1] * e.tag1Weight), e.tag2 && (s += i[e.tag2 - 1] * e.tag2Weight, e.tag1 && (s /= 2)), _G.H5_TEST && Logger.log(`部件id:${t}, 分数:${s}`), s
		}
		static getPaintData(t) {
			if (t) {
				let e = t.replace(/(.*\/)*([^.]+).*/gi, "$2");
				if (e) {
					return this.paintData[e]
				}
			}
			return console.warn("can't find paint data by url:", t), null
		}
		static getPartTypeName(t) {}
		static removePartNotOwned(t) {
			let e = this.defaultParts;
			Tools.forEachMap(t, function(a, i) {
				BaseFacade.mItem.isOwned(i) || (e[a] ? t[a] = e[a] : delete t[a])
			})
		}
		static openPanelRoom(t, e, a, i) {
			e = e || this.partsWear, mgrAlert.openGameLoading(UI_NAME.PanelRoom, {
				type: t,
				parts: e,
				data: i
			}, a)
		}
		static openPanelSuitDetal(t, e = !1) {
			mgrAlert.openGameLoading(UI_NAME.PanelSuitDetail, {
				suitIdOrParts: t,
				bPvpAward: e
			})
		}
	}
	var AnimLoadState;
	mgrPart.photoWidth = 98, mgrPart.photoHeight = 96, mgrPart.popularRateLevel = 0, mgrPart.popularAwardRate = 0,
		function(t) {
			t[t.Empty = 0] = "Empty", t[t.Loading = 1] = "Loading", t[t.Loaded = 2] = "Loaded"
		}(AnimLoadState || (AnimLoadState = {}));
	const DEFAULT_TRANSITION_DURATION = .1;
	class AnimStateScript extends Laya.AnimatorStateScript {
		setEventData(t, e) {
			this._node = t, this._animId = e
		}
		onStateEnter() {
			this._node.destroyed || this._node.event("Enter", this._animId)
		}
		onStateUpdate() {}
		onStateExit() {
			this._node.destroyed || this._node.event("Exit", this._animId)
		}
	}
	class Model extends SpriteBase3D {
		constructor(t) {
			super(), this.resourceType = RES_TYPE.PREFAB3D, this._lastAnimId = "", this._curAnimId = "", this._animStates = Object.create(null), this.modelId = t, this.modelDb = db.get_model_db(t), this.resourceName = this.modelDb.resPath
		}
		get lastAnimationId() {
			return this._lastAnimId
		}
		get curAnimationId() {
			return this._curAnimId
		}
		onResourceLoaded(t) {
			this.resNode = Laya.Sprite3D.instantiate(t), this._animtor = this.resNode.getComponent(Laya.Animator), this._animtor && this.resNode.on("Exit", this, this._onAnimComplete)
		}
		reuse() {
			this.tryCreate(), this.setSpeed(1), this.show()
		}
		unuse() {
			this._curAnimId = "", this._clearAnimList(), this.setSpeed(0), this.removeFromParent(), this.hide(), this.clearDelayCalls()
		}
		dispose() {
			super.dispose()
		}
		initAnimator(t = !0) {
			this.callable ? this._animtor || (this._animtor = this.addComponent(Laya.Animator), t && this._animtor.addControllerLayer(new Laya.AnimatorControllerLayer("")), this.resNode.on("Exit", this, this._onAnimComplete)) : this.safeCall(this.initAnimator)
		}
		getAnimator() {
			if (this.callable) return this._animtor;
			this.logNotFinishError()
		}
		getAnimationDuration(t) {
			let e = this._animtor.getControllerLayer(0).getAnimatorState(t);
			return e ? e.clip.duration() : 0
		}
		playAnim(t, e = DEFAULT_TRANSITION_DURATION, a) {
			this.callable ? (this._clearAnimList(), this._checkAnimAndPlay(t, e, 0, a)) : this.safeCall(this.playAnim, t, e, a)
		}
		_checkAnimAndPlay(t, e, a, i) {
			if (this._animtor) switch (this._curAnimId = t, this._lastAnimId = t, this._animStates[t] || AnimLoadState.Empty) {
				case AnimLoadState.Loaded:
					this._playAnimOnloaded(t, e, a, i);
					break;
				case AnimLoadState.Empty:
					if (t) {
						let s = db.get_animation_db(t);
						s && (this._animStates[t] = AnimLoadState.Loading, mgrRes.loadRes(s.path, RES_TYPE.ANIMATIONCLIP, s => {
							this.isDisposed || (this.addAnimatorState(t, s), this._playAnimOnloaded(t, e, a, i))
						}))
					} else this._playAnimOnloaded(null, e, a, i);
					break;
				case AnimLoadState.Loading:
			}
		}
		addAnimatorStateById(t) {
			if (this._animtor.getControllerLayer(0).getAnimatorState(t)) return;
			let e = db.get_animation_db(t),
				a = mgrRes.tryLoadRes(e.path);
			a ? this.addAnimatorState(t, a) : console.error(`Model.addAnimatorStateById: 动画未加载:${t}`)
		}
		addAnimatorState(t, e) {
			if (!this._animtor) return;
			if (!e) return void console.error(`Model.addAnimatorState: 未知动画:${t}`);
			if (this._animtor.getControllerLayer(0).getAnimatorState(t)) return void console.log("Model.addAnimatorState: 重复添加动画:", t);
			let a = new Laya.AnimatorState;
			a.clip = e, a.clipStart = 0, a.clipEnd = 1, a.name = t, a.addScript(AnimStateScript).setEventData(this.resNode, t), this._animtor.getControllerLayer(0).addState(a), this._animStates[t] = AnimLoadState.Loaded
		}
		_playAnimOnloaded(t, e, a, i) {
			this.isDisposed || (null != i && (this._animtor.getControllerLayer(0).getAnimatorState(t).clip.islooping = i), e ? this._animtor.crossFade(t, e, 0, a) : this._animtor.play(t, 0, a))
		}
		playAnims(t = DEFAULT_TRANSITION_DURATION, e, a) {
			if (this.callable) switch (this._loop = a, e.length) {
				case 0:
					return;
				case 1:
					this._checkAnimAndPlay(e[0], t, 0, a);
					break;
				default:
					this._animPlayList = e.slice(1), this._checkAnimAndPlay(e[0], t, 0, !1)
			} else this.safeCall(this.playAnims, t, e, a)
		}
		_onAnimComplete(t) {
			if (this._curAnimId = "", this._animPlayList && this._animPlayList.length > 0) {
				let t = this._animPlayList.shift();
				this._checkAnimAndPlay(t, .1, 0, this._loop), 0 == this._animPlayList.length && (this._animPlayList = null)
			}
		}
		_clearAnimList() {
			this._animPlayList = null, this._loop = null
		}
		simulate(t, e) {
			this.callable ? (this._clearAnimList(), this._checkAnimAndPlay(t, 0, e, !1)) : this.safeCall(this.simulate, t, e)
		}
		getSpeed() {
			return this._animtor && this._animtor.speed
		}
		setSpeed(t) {
			this.callable ? this._animtor && (this._animtor.speed = t) : this.safeCall(this.setSpeed, t)
		}
		get transform() {
			if (this.callable) return this.resNode.transform
		}
	}
	var UnlitMaterial = Laya.UnlitMaterial;
	class PaintMaterialTest extends Laya.Material {
		constructor() {
			super(), this._screenPos = new Laya.Vector2, this._state = 32, this.setShaderName("PaintMaterialTest"), this._shaderValues.setVector(UnlitMaterial.ALBEDOCOLOR, new Laya.Vector4(1, 1, 1, 1))
		}
		static initShader() {
			var t = {
					s_Cull: Laya.Shader3D.RENDER_STATE_CULL,
					s_Blend: Laya.Shader3D.RENDER_STATE_BLEND,
					s_BlendSrc: Laya.Shader3D.RENDER_STATE_BLEND_SRC,
					s_BlendDst: Laya.Shader3D.RENDER_STATE_BLEND_DST,
					s_DepthTest: Laya.Shader3D.RENDER_STATE_DEPTH_TEST,
					s_DepthWrite: Laya.Shader3D.RENDER_STATE_DEPTH_WRITE
				},
				e = {
					a_Position: Laya.VertexMesh.MESH_POSITION0,
					a_Color: Laya.VertexMesh.MESH_COLOR0,
					a_Texcoord0: Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
					a_BoneWeights: Laya.VertexMesh.MESH_BLENDWEIGHT0,
					a_BoneIndices: Laya.VertexMesh.MESH_BLENDINDICES0,
					a_MvpMatrix: Laya.VertexMesh.MESH_MVPMATRIX_ROW0
				},
				a = {
					u_Bones: Laya.Shader3D.PERIOD_CUSTOM,
					u_AlbedoTexture: Laya.Shader3D.PERIOD_MATERIAL,
					u_AlbedoColor: Laya.Shader3D.PERIOD_MATERIAL,
					u_TilingOffset: Laya.Shader3D.PERIOD_MATERIAL,
					u_MvpMatrix: Laya.Shader3D.PERIOD_SPRITE,
					u_AlphaTestValue: Laya.Shader3D.PERIOD_MATERIAL,
					u_maskTexture: Laya.Shader3D.PERIOD_MATERIAL,
					u_newTexture: Laya.Shader3D.PERIOD_MATERIAL,
					u_transition: Laya.Shader3D.PERIOD_MATERIAL,
					u_screenSize: Laya.Shader3D.PERIOD_MATERIAL,
					u_screenPosition: Laya.Shader3D.PERIOD_MATERIAL,
					u_noiseTexture: Laya.Shader3D.PERIOD_MATERIAL
				};
			let i = Laya.Shader3D.add("PaintMaterialTest", null, null, !0),
				s = new Laya.SubShader(e, a);
			i.addSubShader(s), s.addShaderPass('\n#include "Lighting.glsl";\n\nattribute vec4 a_Position;\n\nattribute vec2 a_Texcoord0;\n\n#ifdef GPU_INSTANCE\n    attribute mat4 a_MvpMatrix;\n#else\n    uniform mat4 u_MvpMatrix;\n#endif\n\nattribute vec4 a_Color;\nvarying vec4 v_Color;\nvarying vec2 v_Texcoord0;\n\n#ifdef TILINGOFFSET\n    uniform vec4 u_TilingOffset;\n#endif\n\n#ifdef BONE\n    const int c_MaxBoneCount = 24;\n    attribute vec4 a_BoneIndices;\n    attribute vec4 a_BoneWeights;\n    uniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\n#if defined(DEF_PAINT_UV) || defined(DEF_TRANSITION_DISSOLVE_DIR)\n    varying vec2 v_Texcoord1;\n#endif\n\nvoid main() {\n    vec4 position;\n    #ifdef BONE\n        mat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n        skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n        skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n        skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n        position=skinTransform*a_Position;\n    #else\n        position=a_Position;\n    #endif\n    #ifdef GPU_INSTANCE\n        gl_Position = a_MvpMatrix * position;\n    #else\n        gl_Position = u_MvpMatrix * position;\n    #endif\n\n    #ifdef TILINGOFFSET\n        v_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n    #else\n        v_Texcoord0=a_Texcoord0;\n    #endif\n\n    #if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n        v_Color = a_Color;\n    #endif\n    gl_Position=remapGLPositionZ(gl_Position);\n\n    #if defined(DEF_PAINT_UV) || defined(DEF_TRANSITION_DISSOLVE_DIR)\n        v_Texcoord1 = gl_Position.xy / gl_Position.w * 0.5 + 0.5;\n    #endif\n}\n        ', "\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\n\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n    varying vec4 v_Color;\n#endif\n\n#ifdef ALBEDOTEXTURE\n    uniform sampler2D u_AlbedoTexture;\n    varying vec2 v_Texcoord0;\n#endif\n\nuniform vec4 u_AlbedoColor;\n\n#ifdef DEF_PAINT_UV\n    varying vec2 v_Texcoord1;\n    uniform vec2 u_screenSize;\n    uniform vec2 u_screenPosition;\n#endif\n\n#ifdef DEF_PAINT_MASK\n    uniform sampler2D u_maskTexture;\n    uniform sampler2D u_newTexture;\n#endif\n\n#if defined(DEF_TRANSITION_COLOR) || defined(DEF_TRANSITION_ALPHA) || defined(DEF_TRANSITION_DISSOLVE)\n    uniform float u_transition;\n#endif\n\n#if defined(DEF_TRANSITION_DISSOLVE) || defined(DEF_TRANSITION_DISSOLVE_DIR)\n    uniform sampler2D u_noiseTexture;\n#endif\n\n#if defined(DEF_TRANSITION_DISSOLVE_DIR)\n    uniform float u_transition;\n    varying vec2 v_Texcoord1;\n#endif\n\n#ifdef ALPHATEST\nuniform float u_AlphaTestValue;\n#endif\n\n\nvoid main()\n{\n    vec4 color =  u_AlbedoColor;\n\n    #ifdef DEF_PAINT_UV\n        // float dx = u_screenPosition.x - v_Texcoord1.x * u_screenSize.x;\n        // float dy = u_screenPosition.y - v_Texcoord1.y * u_screenSize.y;\n        // float r = dx * dx + dy * dy;\n        \n        // color.r = step(r , 4.0);\n        color.r = 1.0;\n        \n        color.g = v_Texcoord0.x;\n        color.b = v_Texcoord0.y;\n        color.a = 1.0;\n    #elif defined(DEF_PAINT_NONE)\n        color.r = 0.0;\n        color.g = 0.0;\n        color.b = 0.0;\n        color.a = 0.0;\n    #elif defined(DEF_PAINT_MASK)\n        #ifdef ALBEDOTEXTURE\n            color *= texture2D(u_AlbedoTexture, v_Texcoord0);\n        #endif\n        #if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n            color *= v_Color;\n        #endif\n\n        vec2 maskTexcoord = v_Texcoord0.xy;\n        maskTexcoord.y = 1.0 - maskTexcoord.y;\n        float maskAlpha = texture2D(u_maskTexture, maskTexcoord).r;\n        vec4 newColor = texture2D(u_newTexture, v_Texcoord0);\n        color = mix(color, newColor, maskAlpha);\n\n        #ifdef DEF_TRANSITION_COLOR\n            color = mix(color, newColor, u_transition);\n        #elif defined(DEF_TRANSITION_ALPHA)\n            color.a = mix(color.a, 0.0, u_transition);\n        #endif\n    #elif defined(DEF_TRANSITION_DISSOLVE)\n        float dissolveValue = texture2D(u_noiseTexture, v_Texcoord0).r;\n        if (dissolveValue <= u_transition) {\n            discard;\n        }\n\n        #ifdef ALBEDOTEXTURE\n            color *= texture2D(u_AlbedoTexture, v_Texcoord0);\n        #endif\n        #ifdef ALPHATEST\n            if(color.a <= u_AlphaTestValue){\n                discard;\n            }\n        #endif\n        #if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n            color *= v_Color;\n        #endif\n\n        float limit = u_transition / dissolveValue;\n\n        float _ThresholdFar = 0.9;\n        float _ThresholdNear = 0.95;\n        vec4 _ColorNear = vec4(0.83, 1.0, 1.0, 1.0);\n        vec4 _ColorFar = vec4(0.28, 0.36, 0.96, 1.0);\n\n        float bFar = step(_ThresholdFar, limit);\n        float bNear = step(_ThresholdNear, limit) * bFar;\n        vec4 disCol = _ColorNear * bNear + (bFar - bNear) * _ColorFar;\n\n        color = color * (1.0 - bFar) + disCol;\n    #elif defined(DEF_TRANSITION_DISSOLVE_DIR)\n        float dissolveValue = texture2D(u_noiseTexture, v_Texcoord0 * 2.0).r;\n        float dis = distance(v_Texcoord1, vec2(0.5, 0.5)) * 1.414 * 6.0;\n        dis = (dis - dissolveValue) / 6.0 - u_transition;\n\n        if(dis <= 0.0){\n            discard;\n        }\n        \n        #ifdef ALBEDOTEXTURE\n            color *= texture2D(u_AlbedoTexture, v_Texcoord0);\n        #endif\n        #if defined(COLOR) && defined(ENABLEVERTEXCOLOR)\n            color *= v_Color;\n        #endif\n\n        float b1 = step(0.0, dis) * step(dis, 0.05);\n        float b2 = step(0.05, dis) * step(dis, 0.1);\n\n        vec4 _ColorNear = vec4(0.84, 0.58, 1, 1.0);\n        vec4 _ColorFar = vec4(0.8, 0.3, 0.5, 1.0);\n\n        vec4 disCol = (_ColorNear * b1 + _ColorFar * b2);\n        color += disCol;\n    #else\n        #ifdef ALBEDOTEXTURE\n            color *= texture2D(u_AlbedoTexture, v_Texcoord0);\n        #endif\n        #ifdef ALPHATEST\n            if(color.a <= u_AlphaTestValue){\n                discard;\n            }\n        #endif\n        #if defined(COLOR) && defined(ENABLEVERTEXCOLOR)\n            color *= v_Color;\n        #endif\n    #endif\n\n    gl_FragColor = color;\n}\n        ", t)
		}
		get albedoTexture() {
			return this._shaderValues.getTexture(UnlitMaterial.ALBEDOTEXTURE)
		}
		set albedoTexture(t) {
			t ? this._defineDatas.add(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE) : this._defineDatas.remove(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE), this._shaderValues.setTexture(UnlitMaterial.ALBEDOTEXTURE, t)
		}
		get albedoColor() {
			return this._shaderValues.getVector(UnlitMaterial.ALBEDOCOLOR)
		}
		set albedoColor(t) {
			this._shaderValues.setVector(UnlitMaterial.ALBEDOCOLOR, t)
		}
		setScreenSize(t, e) {
			this._shaderValues.setVector2(PaintMaterialTest.SCREEN_SIZE, new Laya.Vector2(t, e))
		}
		setScreenPosition(t, e) {
			this._screenPos.setValue(t, e), this._shaderValues.setVector2(PaintMaterialTest.SCREEN_POSITION, this._screenPos)
		}
		get maskTexture() {
			return this._shaderValues.getTexture(PaintMaterialTest.MASK_TEX)
		}
		set maskTexture(t) {
			this._shaderValues.setTexture(PaintMaterialTest.MASK_TEX, t)
		}
		get newTexture() {
			return this._shaderValues.getTexture(PaintMaterialTest.NEW_TEX)
		}
		set newTexture(t) {
			this._shaderValues.setTexture(PaintMaterialTest.NEW_TEX, t)
		}
		get noiseTexture() {
			return this._shaderValues.getTexture(PaintMaterialTest.NOISE_TEX)
		}
		set noiseTexture(t) {
			this._shaderValues.setTexture(PaintMaterialTest.NOISE_TEX, t)
		}
		get transition() {
			return this._shaderValues.getNumber(PaintMaterialTest.TRANSITION)
		}
		set transition(t) {
			this._shaderValues.setNumber(PaintMaterialTest.TRANSITION, t)
		}
		setState(t) {
			if (this._state !== t) switch (this._state = t, this._removeAllState(), t) {
				case 1:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_PAINT_UV);
					break;
				case 2:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_PAINT_NONE);
					break;
				case 4:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_PAINT_MASK);
					break;
				case 8:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_PAINT_MASK), this._shaderValues.addDefine(PaintMaterialTest.DEF_TRANSITION_COLOR);
					break;
				case 16:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_PAINT_MASK), this._shaderValues.addDefine(PaintMaterialTest.DEF_TRANSITION_ALPHA);
					break;
				case 32:
					break;
				case 64:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_TRANSITION_DISSOLVE);
					break;
				case 128:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_TRANSITION_DISSOLVE_DIR)
			}
		}
		get state() {
			return this._state
		}
		_removeAllState() {
			this._shaderValues.removeDefine(PaintMaterialTest.DEF_PAINT_UV), this._shaderValues.removeDefine(PaintMaterialTest.DEF_PAINT_NONE), this._shaderValues.removeDefine(PaintMaterialTest.DEF_PAINT_MASK), this._shaderValues.removeDefine(PaintMaterialTest.DEF_TRANSITION_COLOR), this._shaderValues.removeDefine(PaintMaterialTest.DEF_TRANSITION_ALPHA), this._shaderValues.removeDefine(PaintMaterialTest.DEF_TRANSITION_DISSOLVE), this._shaderValues.removeDefine(PaintMaterialTest.DEF_TRANSITION_DISSOLVE_DIR)
		}
		get cull() {
			return this._shaderValues.getInt(UnlitMaterial.CULL)
		}
		set cull(t) {
			this._shaderValues.setInt(UnlitMaterial.CULL, t)
		}
		get blend() {
			return this._shaderValues.getInt(UnlitMaterial.BLEND)
		}
		set blend(t) {
			this._shaderValues.setInt(UnlitMaterial.BLEND, t)
		}
		get blendSrc() {
			return this._shaderValues.getInt(UnlitMaterial.BLEND_SRC)
		}
		set blendSrc(t) {
			this._shaderValues.setInt(UnlitMaterial.BLEND_SRC, t)
		}
		get blendDst() {
			return this._shaderValues.getInt(UnlitMaterial.BLEND_DST)
		}
		set blendDst(t) {
			this._shaderValues.setInt(UnlitMaterial.BLEND_DST, t)
		}
		get depthTest() {
			return this._shaderValues.getInt(UnlitMaterial.DEPTH_TEST)
		}
		set depthTest(t) {
			this._shaderValues.setInt(UnlitMaterial.DEPTH_TEST, t)
		}
		get depthWrite() {
			return this._shaderValues.getBool(UnlitMaterial.DEPTH_WRITE)
		}
		set depthWrite(t) {
			this._shaderValues.setBool(UnlitMaterial.DEPTH_WRITE, t)
		}
		set renderMode(t) {
			switch (t) {
				case UnlitMaterial.RENDERMODE_OPAQUE:
					this.alphaTest = !1, this.renderQueue = Laya.Material.RENDERQUEUE_OPAQUE, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case UnlitMaterial.RENDERMODE_CUTOUT:
					this.renderQueue = Laya.Material.RENDERQUEUE_ALPHATEST, this.alphaTest = !0, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case UnlitMaterial.RENDERMODE_TRANSPARENT:
					this.renderQueue = Laya.Material.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_ENABLE_ALL, this.blendSrc = Laya.RenderState.BLENDPARAM_SRC_ALPHA, this.blendDst = Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case UnlitMaterial.RENDERMODE_ADDTIVE:
					this.renderQueue = Laya.Material.RENDERQUEUE_TRANSPARENT, this.depthWrite = !1, this.cull = Laya.RenderState.CULL_NONE, this.blend = Laya.RenderState.BLEND_ENABLE_ALL, this.blendSrc = Laya.RenderState.BLENDPARAM_SRC_ALPHA, this.blendDst = Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.alphaTest = !1;
					break;
				default:
					throw new Error("UnlitMaterial : renderMode value error.")
			}
		}
		playDissolveIn(t, e) {
			this.setState(64);
			let a = mgrRes.tryLoadRes("res/texture/sf_noise_clouds_01.png");
			this.noiseTexture = a, this.transition = 1, e ? cc.tween(this).delay(e).to(t, {
				transition: 0
			}).call(this.setToNormal.bind(this)).start() : cc.tween(this).to(t, {
				transition: 0
			}).call(this.setToNormal.bind(this)).start()
		}
		setToNormal() {
			this.clearTween(), this.setState(32)
		}
		playDissolveOut(t, e, a) {
			let i = mgrRes.tryLoadRes("res/texture/sf_noise_clouds_01.png");
			if (this.setState(64), this.noiseTexture = i, this.transition = 0, e) var s = cc.tween(this).delay(e).to(t, {
				transition: 1
			});
			else s = cc.tween(this).to(t, {
				transition: 1
			});
			s.call(a).start()
		}
		playDissolveOutFromCenter(t, e, a) {
			let i = mgrRes.tryLoadRes("res/texture/sf_noise_clouds_01.png");
			if (this.setState(128), this.noiseTexture = i, this.transition = 0, e) var s = cc.tween(this).delay(e).to(t, {
				transition: 1
			});
			else s = cc.tween(this).to(t, {
				transition: 1
			});
			s.call(a).start()
		}
		clearTween() {
			cc.clearTween(this)
		}
	}
	PaintMaterialTest.MASK_TEX = Laya.Shader3D.propertyNameToID("u_maskTexture"), PaintMaterialTest.NEW_TEX = Laya.Shader3D.propertyNameToID("u_newTexture"), PaintMaterialTest.TRANSITION = Laya.Shader3D.propertyNameToID("u_transition"), PaintMaterialTest.SCREEN_SIZE = Laya.Shader3D.propertyNameToID("u_screenSize"), PaintMaterialTest.SCREEN_POSITION = Laya.Shader3D.propertyNameToID("u_screenPosition"), PaintMaterialTest.NOISE_TEX = Laya.Shader3D.propertyNameToID("u_noiseTexture"), PaintMaterialTest.DEF_PAINT_UV = Laya.Shader3D.getDefineByName("DEF_PAINT_UV"), PaintMaterialTest.DEF_PAINT_NONE = Laya.Shader3D.getDefineByName("DEF_PAINT_NONE"), PaintMaterialTest.DEF_PAINT_MASK = Laya.Shader3D.getDefineByName("DEF_PAINT_MASK"), PaintMaterialTest.DEF_TRANSITION_COLOR = Laya.Shader3D.getDefineByName("DEF_TRANSITION_COLOR"), PaintMaterialTest.DEF_TRANSITION_ALPHA = Laya.Shader3D.getDefineByName("DEF_TRANSITION_ALPHA"), PaintMaterialTest.DEF_TRANSITION_DISSOLVE = Laya.Shader3D.getDefineByName("DEF_TRANSITION_DISSOLVE"), PaintMaterialTest.DEF_TRANSITION_DISSOLVE_DIR = Laya.Shader3D.getDefineByName("DEF_TRANSITION_DISSOLVE_DIR");
	class CartoonMaterial extends Laya.Material {
		constructor() {
			super(), this.baseAlbedoIntensity = 1, this._state = 32, this.setShaderName("CartoonShader"), this._shaderValues.setVector(CartoonMaterial.SHADOWCOLOR, new Laya.Vector4(.6663285, .6544118, 1, 1)), this._shaderValues.setNumber(CartoonMaterial.SHADOWRANGE, .002), this._shaderValues.setNumber(CartoonMaterial.SHADOWINTENSITY, .98), this._shaderValues.setNumber(CartoonMaterial.SHADOWBOUNDARY, .015), this._shaderValues.setNumber(CartoonMaterial.SPECULARRANGE, .99), this._shaderValues.setNumber(CartoonMaterial.SPECULARINTENSITY, .09), this._shaderValues.setVector(CartoonMaterial.SPECULARCOLOR, new Laya.Vector4(1, 1, 1, 1)), this._shaderValues.setNumber(CartoonMaterial.OUTLINEWIDTH, .001), this._shaderValues.setNumber(CartoonMaterial.OUTLINELIGHTNESS, .25), this._shaderValues.setVector(CartoonMaterial.OUTLINECOLOR, new Laya.Vector4(1, 1, 1, 1)), this._shaderValues.setNumber(CartoonMaterial.ALBEDOIDENTITY, .5), this._shaderValues.setVector(CartoonMaterial.ALBEDOCOLOR, new Laya.Vector4(1, 1, 1, 1)), this._shaderValues.setVector(CartoonMaterial.SECOND_SHADOWCOLOR, new Laya.Vector4(1, 1, 1, 1)), this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWRANGE, 0), this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWINTENSITY, .98), this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWBOUNDARY, 0), this._shaderValues.setVector(CartoonMaterial.EDGE_HIGHLIGHT_COLOR, new Laya.Vector4(0, 1, 0, 1)), this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_RANGE, 0), this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_INTENSITY, .98), this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_BOUNDARY, 0), this._shaderValues.setNumber(CartoonMaterial.ALPHATESTVALUE, .5)
		}
		static initShader() {
			var t = {
					s_Cull: Laya.Shader3D.RENDER_STATE_CULL,
					s_Blend: Laya.Shader3D.RENDER_STATE_BLEND,
					s_BlendSrc: Laya.Shader3D.RENDER_STATE_BLEND_SRC,
					s_BlendDst: Laya.Shader3D.RENDER_STATE_BLEND_DST,
					s_DepthTest: Laya.Shader3D.RENDER_STATE_DEPTH_TEST,
					s_DepthWrite: Laya.Shader3D.RENDER_STATE_DEPTH_WRITE
				},
				e = {
					a_Position: Laya.VertexMesh.MESH_POSITION0,
					a_Normal: Laya.VertexMesh.MESH_NORMAL0,
					a_Texcoord0: Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
					a_BoneWeights: Laya.VertexMesh.MESH_BLENDWEIGHT0,
					a_BoneIndices: Laya.VertexMesh.MESH_BLENDINDICES0
				},
				a = {
					u_MvpMatrix: Laya.Shader3D.PERIOD_SPRITE,
					u_WorldMat: Laya.Shader3D.PERIOD_SPRITE,
					u_CameraPos: Laya.Shader3D.PERIOD_CAMERA,
					u_AlbedoTexture: Laya.Shader3D.PERIOD_MATERIAL,
					u_AlbedoIdentity: Laya.Shader3D.PERIOD_MATERIAL,
					u_AlbedoColor: Laya.Shader3D.PERIOD_MATERIAL,
					u_ShadowColor: Laya.Shader3D.PERIOD_MATERIAL,
					u_ShadowRange: Laya.Shader3D.PERIOD_MATERIAL,
					u_ShadowIntensity: Laya.Shader3D.PERIOD_MATERIAL,
					u_ShadowBoundary: Laya.Shader3D.PERIOD_MATERIAL,
					u_SpecularRange: Laya.Shader3D.PERIOD_MATERIAL,
					u_SpecularColor: Laya.Shader3D.PERIOD_MATERIAL,
					u_SpecularIntensity: Laya.Shader3D.PERIOD_MATERIAL,
					u_OutlineWidth: Laya.Shader3D.PERIOD_MATERIAL,
					u_OutlineLightness: Laya.Shader3D.PERIOD_MATERIAL,
					u_OutlineColor: Laya.Shader3D.PERIOD_MATERIAL,
					u_AlphaTestValue: Laya.Shader3D.PERIOD_MATERIAL,
					"u_SunLight.direction": Laya.Shader3D.PERIOD_SCENE,
					"u_SunLight.color": Laya.Shader3D.PERIOD_SCENE,
					u_Bones: Laya.Shader3D.PERIOD_CUSTOM,
					u_Second_ShadowColor: Laya.Shader3D.PERIOD_MATERIAL,
					u_Second_ShadowRange: Laya.Shader3D.PERIOD_MATERIAL,
					u_Second_ShadowIntensity: Laya.Shader3D.PERIOD_MATERIAL,
					u_Second_ShadowBoundary: Laya.Shader3D.PERIOD_MATERIAL,
					u_Edge_HighlightColor: Laya.Shader3D.PERIOD_MATERIAL,
					u_Edge_HighlightRange: Laya.Shader3D.PERIOD_MATERIAL,
					u_Edge_HighlightIntensity: Laya.Shader3D.PERIOD_MATERIAL,
					u_Edge_HighlightBoundary: Laya.Shader3D.PERIOD_MATERIAL,
					u_RandomDiscardFactor: Laya.Shader3D.PERIOD_MATERIAL,
					u_alpha: Laya.Shader3D.PERIOD_MATERIAL,
					"u_SpotLight.color": Laya.Shader3D.PERIOD_SCENE,
					"u_SpotLight.direction": Laya.Shader3D.PERIOD_SCENE,
					"u_SpotLight.range": Laya.Shader3D.PERIOD_SCENE,
					"u_SpotLight.spot": Laya.Shader3D.PERIOD_SCENE,
					"u_SpotLight.position": Laya.Shader3D.PERIOD_SCENE
				},
				i = Laya.Shader3D.add("CartoonShader"),
				s = new Laya.SubShader(e, a);
			i.addSubShader(s);
			s.addShaderPass("\n\t\tattribute vec4 a_Position; \n\t\tattribute vec3 a_Normal;\n\t\tattribute vec2 a_Texcoord0;\t\n\t\tuniform mat4 u_MvpMatrix;\n\t\tuniform mat4 u_WorldMat;\n\t\tuniform vec3 u_CameraPos;\t\n\t\tvarying vec2 v_Texcoord0;\n\t\tvarying vec3 v_Normal;\n\t\tvarying vec3 v_PositionWorld;\n\t\tvarying vec3 v_ViewDir;\n\n\t\t#if defined(CASTSHADOW)\n\t\tvarying vec4 v_posView;\n\t\t#endif\n\n\t\t#ifdef BONE\n\t\t\tconst int c_MaxBoneCount = 24;\n\t\t\tattribute vec4 a_BoneIndices;\n\t\t\tattribute vec4 a_BoneWeights;\n\t\t\tuniform mat4 u_Bones[c_MaxBoneCount];\n\t\t#endif\n\t\t\n\t\tvoid main()\n\t\t{\n\t\t\t#ifdef BONE\n\t\t\t\t//计算骨骼对位置的影响\n\t\t\t\tmat4 skinTransform=mat4(0.0);\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\t\t\tvec4 position = skinTransform * a_Position;\n\t\t\t\t\n\t\t\t\tgl_Position=u_MvpMatrix * position;\n\t\t\t\tmat3 worldMat=mat3(u_WorldMat * skinTransform);\n\t\t\t#else\n\t\t\t\tgl_Position=u_MvpMatrix * a_Position;\n\t\t\t\tmat3 worldMat=mat3(u_WorldMat);\n\t\t\t#endif\n\n\t\t\t//法线\n\t\t\tv_Normal=worldMat*a_Normal;\n\t\t\t//纹理贴图\n\t\t\tv_Texcoord0 = a_Texcoord0;\t\t\n\t\t\t\n\t\t\t#ifdef BONE\n\t\t\t\tv_PositionWorld=(u_WorldMat*position).xyz;\n\t\t\t#else\n\t\t\t\tv_PositionWorld=(u_WorldMat*a_Position).xyz;\n\t\t\t#endif\n\t\t\t//eye vec\n\t\t\tv_ViewDir = u_CameraPos - v_PositionWorld; \n\n\t\t\t#if defined(CASTSHADOW)\n\t\t\t\tv_posView = gl_Position.xyzw;\n\t\t\t#endif\n\t\t\tgl_Position.z=gl_Position.z * 2.0 - gl_Position.w;\n\t\t}", "\n\t\t// #ifdef FSHIGHPRECISION\n\t\t// \tprecision highp float;\n\t\t// #else\n\t\t// \tprecision mediump float;\n\t\t// #endif\n\t\tprecision lowp float;\n\t\n\t\tstruct DirectionLight\n\t\t{\n\t\t\tvec3 color;\n\t\t\tvec3 direction;\n\t\t};\n\t\t#ifdef SPOTLIGHT\n\t\t\tstruct SpotLight {\n\t\t\t\tvec3 color;\n\t\t\t\tvec3 position;\n\t\t\t\tfloat range;\n\t\t\t\tvec3 direction;\n\t\t\t\tfloat spot;\n\t\t\t};\n\t\t\tuniform SpotLight u_SpotLight;\n\t\t#endif\n\n\t\n\t\tvarying vec2 v_Texcoord0;\n\t\tvarying vec3 v_Normal;\n\t\tvarying vec3 v_PositionWorld;\n\t\tvarying vec3 v_ViewDir;\n\t\t#if defined(CASTSHADOW)\n\t\tvarying vec4 v_posView;\n\t\t#endif\n\t\n\t\t#ifdef ALBEDOTEXTURE\n\t\tuniform sampler2D u_AlbedoTexture;\t\n\t\t#endif\n\t\t\n\t\t#ifdef ALBEDO_COLOR\n\t\tuniform float u_AlbedoIdentity;\n\t\tuniform vec4 u_AlbedoColor;\n\t\t#endif\n\t\tuniform vec4 u_ShadowColor;\n\t\tuniform float u_ShadowRange;\n\t\tuniform float u_ShadowIntensity;\n\t\tuniform float u_ShadowBoundary;\n\t\tuniform float u_SpecularRange;\n\t\tuniform float u_SpecularIntensity;\n\t\tuniform vec4 u_SpecularColor;\n\t\t//双重阴影参数\n\t\tuniform vec4 u_Second_ShadowColor;\n\t\tuniform float u_Second_ShadowRange;\n\t\tuniform float u_Second_ShadowIntensity;\n\t\tuniform float u_Second_ShadowBoundary;\n\t\tuniform float u_RandomDiscardFactor;\n\t\t//边缘高亮参数\n\t\tuniform vec4 u_Edge_HighlightColor;\n\t\tuniform float u_Edge_HighlightRange;\n\t\tuniform float u_Edge_HighlightIntensity;\n\t\tuniform float u_Edge_HighlightBoundary;\n\t\n\t\tuniform DirectionLight u_SunLight;\n\n\t\t#ifdef WHOLE_ALPHA\n\t\tuniform float u_alpha;\n\t\t#endif\n\n\t\t#ifdef ALPHATEST\n\t\tuniform float u_AlphaTestValue;\n\t\t#endif\n\n\t\tvoid main_castshadow(){\n\t\t\t#ifdef CASTSHADOW\n\t\t\t\tfloat z = v_posView.z/v_posView.w;\n\t\t\t\tz = z*0.5 + 0.5;\n\t\t\t\tgl_FragColor = vec4(0.0, 0, z, 1.0);\n\t\t\t#endif\n\t\t}\n\n\t\tvoid main_normal(){\n\t\t\tvec4 albedoTextureColor = vec4(1.0);\n\t\t#ifdef ALBEDOTEXTURE\n\t\t\talbedoTextureColor = texture2D(u_AlbedoTexture, v_Texcoord0);\n\t\t#endif\n\t\t\t\n\t\t\t#ifdef ALPHATEST\n\t\t\tif(albedoTextureColor.a <= u_AlphaTestValue){\n\t\t\t\tdiscard;\n\t\t\t}\n\t\t\t#endif\n\n\t\t\tvec3 normal = normalize(v_Normal);\n\t\t\tvec3 viewdir = normalize(v_ViewDir);\n\t\t\tvec3 lightDir = normalize(u_SunLight.direction);\n\t\t\n\t\t\t//屏蔽掉卡通色转换, 使用模型原始颜色\n\t\t\tvec3 albedoColor = albedoTextureColor.rgb;\t\t\n\t\t\t\n\t\t\t// 阴影计算部分计算\n\t\t\t// 1.0 -> 0.0\n\t\t\tfloat nl = max(dot(normal, -lightDir), 0.0);\n\t\t\t// +0.01是避免阴影边界等于0时 shadow_allin && shadow_partin 相同\n            float shadow_boundary = u_ShadowBoundary + 0.01;\n            float shadow_allin = step(nl, u_ShadowRange - shadow_boundary*0.5);\n            float shadow_partin = step(nl, u_ShadowRange + shadow_boundary*0.5);\n            //分析:  allin时:  shadow_allin == 1.0;  shadow_partin == 1.0;\n            //      partin时: shadow_allin == 0.0; shadow_partin = 1.0;\n            //      none时:   shadow_allin == 0.0; shadow_partin = 0.0;\n            float shadow = shadow_allin + (u_ShadowRange + shadow_boundary*0.5 - nl)/shadow_boundary * (shadow_partin - shadow_allin);\n\n\t\t\tshadow *= u_ShadowIntensity;\n\t\t\tvec3 albedoAreaColor = (1.0 - shadow) * albedoColor;\n\t\t\tvec3 shadowAreaColor = shadow * albedoColor * u_ShadowColor.rgb;\n\t\t\t\n\t\t\t//高光部分计算\n\t\t\tfloat specular = pow(nl,u_SpecularRange*10.0);\n\t\t\tvec3 speculAreaColor = (1.0 - shadow) * albedoColor * u_SpecularIntensity * specular * u_SpecularColor.rgb;\n\t\t\t//混合漫反射 + 高光 + 阴影\n\t\t\tvec3 finalColor = albedoAreaColor + speculAreaColor + shadowAreaColor;\n\n\t\t\t//阴影补光计算\n            float secondShadowRange = 1.0 - u_Second_ShadowRange;\n            float secondShadowBoundary = u_Second_ShadowBoundary + 0.01;\n            float negativeNl = max(dot(normal, lightDir), 0.0);\n            float secShadowAllin = step(secondShadowRange + secondShadowBoundary*0.5, negativeNl);\n            float secShadowPartin = step(secondShadowRange - secondShadowBoundary*0.5, negativeNl);\n            //分析:\n            //allin时: secShadowAllin == 1.0; secShadowPartin = 1.0;\n            //partin时: secShadowAllin == 0.0; secShadowPartin = 1.0;\n            //none时: secShadowAllin == 0.0; secShadowPartin = 0.0\n            float shadow_second = secShadowAllin + (negativeNl - (secondShadowRange - secondShadowBoundary*0.5))/secondShadowBoundary * (secShadowPartin - secShadowAllin);\n            //\n\t\t\tvec3 secondShadowArenaColor = shadow_second*albedoColor*u_Second_ShadowColor.rgb*u_Second_ShadowIntensity;\n\t\t\tfinalColor += secondShadowArenaColor;\n\t\t\t//边缘高光计算(附加条件， 光照方向才有)\n\t\t\tfloat nv = 1.0 - abs(dot(normal, viewdir));\n            float hf_nvl = nv * nl;\n            float positive_hrange = 1.0 - u_Edge_HighlightRange;\n            float hightLightBoundary = u_Edge_HighlightBoundary + 0.01;\n            float higAllIn = step(positive_hrange + hightLightBoundary*0.5, hf_nvl);\n            float higPartIn = step(positive_hrange - hightLightBoundary*0.5, hf_nvl);\n            //分析:\n            //allin时: higAllIn = 1.0; higPartIn = 1.0;\n            //partin时: higAllIn = 0.0;higPartIn = 1.0;\n            //none时: higAllIn = 0.0;higPartIn = 0.0;\n            float edgehf = higAllIn + (hf_nvl - (positive_hrange - hightLightBoundary*0.5))/hightLightBoundary * (higPartIn - higAllIn);\n\n\t\t\tvec3 edgeHighlightColor = edgehf *albedoColor* u_Edge_HighlightColor.rgb*u_Edge_HighlightIntensity*2.0;\n\t\t\tfinalColor += edgeHighlightColor;\n\n\t\t\t#ifdef WHOLE_ALPHA\n\t\t\t\t//叠加全局透明度\n\t\t\t\tgl_FragColor = vec4(finalColor.rgb, albedoTextureColor.a*u_alpha);\n\t\t\t#else\n\t\t\t\tgl_FragColor = vec4(finalColor.rgb, albedoTextureColor.a);\n\t\t\t#endif\n\n\t\t\t#ifdef ALBEDO_COLOR\n\t\t\t\t//叠加全局颜色\n\t\t\t\tgl_FragColor *= (u_AlbedoColor * (u_AlbedoIdentity+0.5));\n\t\t\t#endif\n\t\t\t\n\t\t\t\n\t\t\t#ifdef SPOTLIGHT\n\t\t\t\tfloat distance = distance(v_PositionWorld.xz, u_SpotLight.position.xz);\n\t\t\t\tfloat inRange = step(distance, u_SpotLight.range);\n\t\t\t\tfloat inTransition = step(distance, u_SpotLight.range+0.01);\n\t\t\t\tfloat factor = (distance - u_SpotLight.range)/0.01;\n\n\t\t\t\tfloat spotValue = 1.0*inRange + (1.0 - factor) * (inTransition - inRange);\n\t\t\t\tvec3 spotColor = u_SpotLight.color * gl_FragColor.rgb * spotValue;\n\t\t\t\t\n\t\t\t\tvec3 sunColor = u_SunLight.color * gl_FragColor.rgb;\n\n\t\t\t\tgl_FragColor.rgb = spotColor + sunColor;\n\t\t\t\t// gl_FragColor.rgb = vec3(distance);\n\t\t\t#else\n\t\t\t\tgl_FragColor.rgb *= u_SunLight.color;\n\t\t\t#endif\n\t\t}\n\t\n\t\tvoid main()\n\t\t{\n\t\t\t#ifdef CASTSHADOW\n\t\t\t\tmain_castshadow();\n\t\t\t#else\n\t\t\t\t#ifdef DEF_PAINT_NONE\n\t\t\t\t\tgl_FragColor.rgba = vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t\t#else\n\t\t\t\t\tmain_normal();\n\t\t\t\t#endif\n\t\t\t#endif\n\t\t}", t)
		}
		get albedoTexture() {
			return this._shaderValues.getTexture(CartoonMaterial.ALBEDOTEXTURE)
		}
		set albedoTexture(t) {
			t ? this._defineDatas.add(CartoonMaterial.SHADERDEFINE_ALBEDOTEXTURE) : this._defineDatas.remove(CartoonMaterial.SHADERDEFINE_ALBEDOTEXTURE), this._shaderValues.setTexture(CartoonMaterial.ALBEDOTEXTURE, t)
		}
		get albedoColor() {
			return this._shaderValues.getVector(CartoonMaterial.ALBEDOCOLOR)
		}
		set albedoColor(t) {
			1 != t.x || 1 != t.y || 1 != t.z || 1 != t.w || .5 != this.albedoIdentity ? this._defineDatas.add(CartoonMaterial.SHADERDEFINE_ALBEDO_COLOR) : this._defineDatas.remove(CartoonMaterial.SHADERDEFINE_ALBEDO_COLOR), this._shaderValues.setVector(CartoonMaterial.ALBEDOCOLOR, t)
		}
		get albedoIdentity() {
			return this._shaderValues.getNumber(CartoonMaterial.ALBEDOIDENTITY)
		}
		set albedoIdentity(t) {
			1 != this.albedoColor.x || 1 != this.albedoColor.y || 1 != this.albedoColor.z || 1 != this.albedoColor.w || .5 != t ? this._defineDatas.add(CartoonMaterial.SHADERDEFINE_ALBEDO_COLOR) : this._defineDatas.remove(CartoonMaterial.SHADERDEFINE_ALBEDO_COLOR), t = Math.max(0, Math.min(10, t)), this._shaderValues.setNumber(CartoonMaterial.ALBEDOIDENTITY, t)
		}
		set albedoIntensity(t) {
			this.albedoIdentity = t * this.baseAlbedoIntensity
		}
		get albedoIntensity() {
			return this.albedoIdentity / this.baseAlbedoIntensity
		}
		get shadowColor() {
			return this._shaderValues.getVector(CartoonMaterial.SHADOWCOLOR)
		}
		set shadowColor(t) {
			this._shaderValues.setVector(CartoonMaterial.SHADOWCOLOR, t)
		}
		get shadowRange() {
			return this._shaderValues.getNumber(CartoonMaterial.SHADOWRANGE)
		}
		set shadowRange(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SHADOWRANGE, t)
		}
		get shadowIntensity() {
			return this._shaderValues.getNumber(CartoonMaterial.SHADOWINTENSITY)
		}
		set shadowIntensity(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SHADOWINTENSITY, t)
		}
		get shadowBoundary() {
			return this._shaderValues.getNumber(CartoonMaterial.SHADOWBOUNDARY)
		}
		set shadowBoundary(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SHADOWBOUNDARY, t)
		}
		get specularRange() {
			return this._shaderValues.getNumber(CartoonMaterial.SPECULARRANGE)
		}
		set specularRange(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SPECULARRANGE, t)
		}
		set specularIntensity(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SPECULARINTENSITY, t)
		}
		get specularIntensity() {
			return this._shaderValues.getNumber(CartoonMaterial.SPECULARINTENSITY)
		}
		get specularColor() {
			return this._shaderValues.getVector(CartoonMaterial.SPECULARCOLOR)
		}
		set specularColor(t) {
			this._shaderValues.setVector(CartoonMaterial.SPECULARCOLOR, t)
		}
		get outlineWidth() {
			return this._shaderValues.getNumber(CartoonMaterial.OUTLINEWIDTH)
		}
		set outlineWidth(t) {
			t = Math.max(0, Math.min(.05, t)), this._shaderValues.setNumber(CartoonMaterial.OUTLINEWIDTH, t)
		}
		get outlineColor() {
			return this._shaderValues.getVector(CartoonMaterial.OUTLINECOLOR)
		}
		set outlineColor(t) {
			this._shaderValues.setVector(CartoonMaterial.OUTLINECOLOR, t)
		}
		get outlineLightness() {
			return this._shaderValues.getNumber(CartoonMaterial.OUTLINELIGHTNESS)
		}
		set outlineLightness(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.OUTLINELIGHTNESS, t)
		}
		get secondShadowColor() {
			return this._shaderValues.getVector(CartoonMaterial.SECOND_SHADOWCOLOR)
		}
		set secondShadowColor(t) {
			this._shaderValues.setVector(CartoonMaterial.SECOND_SHADOWCOLOR, t)
		}
		get secondShadowRange() {
			return this._shaderValues.getNumber(CartoonMaterial.SECOND_SHADOWRANGE)
		}
		set secondShadowRange(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWRANGE, t)
		}
		get secondShadowIntensity() {
			return this._shaderValues.getNumber(CartoonMaterial.SECOND_SHADOWINTENSITY)
		}
		set secondShadowIntensity(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWINTENSITY, t)
		}
		get secondShadowBoundary() {
			return this._shaderValues.getNumber(CartoonMaterial.SECOND_SHADOWBOUNDARY)
		}
		set secondShadowBoundary(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWBOUNDARY, t)
		}
		get EdgeHightColor() {
			return this._shaderValues.getVector(CartoonMaterial.EDGE_HIGHLIGHT_COLOR)
		}
		set EdgeHightColor(t) {
			this._shaderValues.setVector(CartoonMaterial.EDGE_HIGHLIGHT_COLOR, t)
		}
		get EdgeHightRange() {
			return this._shaderValues.getNumber(CartoonMaterial.EDGE_HIGHLIGHT_RANGE)
		}
		set EdgeHightRange(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_RANGE, t)
		}
		get EdgeHightIntensity() {
			return this._shaderValues.getNumber(CartoonMaterial.EDGE_HIGHLIGHT_INTENSITY)
		}
		set EdgeHightIntensity(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_INTENSITY, t)
		}
		get EdgeHightBoundary() {
			return this._shaderValues.getNumber(CartoonMaterial.EDGE_HIGHLIGHT_BOUNDARY)
		}
		set EdgeHightBoundary(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_BOUNDARY, t)
		}
		get tilingOffset() {
			return this._shaderValues.getVector(CartoonMaterial.TILINGOFFSET)
		}
		set tilingOffset(t) {
			t && (1 != t.x || 1 != t.y || 0 != t.z || 0 != t.w) ? this._defineDatas.add(CartoonMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(CartoonMaterial.SHADERDEFINE_TILINGOFFSET), this._shaderValues.setVector(CartoonMaterial.TILINGOFFSET, t)
		}
		get alpha() {
			return this._shaderValues.getNumber(CartoonMaterial.WHOLE_ALPHA)
		}
		set alpha(t) {
			null != t ? this._defineDatas.add(CartoonMaterial.SHADERDEFINE_WHOLE_ALPHA) : this._defineDatas.remove(CartoonMaterial.SHADERDEFINE_WHOLE_ALPHA), this._shaderValues.setNumber(CartoonMaterial.WHOLE_ALPHA, t)
		}
		get cull() {
			return this._shaderValues.getInt(CartoonMaterial.CULL)
		}
		set cull(t) {
			this._shaderValues.setInt(CartoonMaterial.CULL, t)
		}
		get blend() {
			return this._shaderValues.getInt(CartoonMaterial.BLEND)
		}
		set blend(t) {
			this._shaderValues.setInt(CartoonMaterial.BLEND, t)
		}
		get blendSrc() {
			return this._shaderValues.getInt(CartoonMaterial.BLEND_SRC)
		}
		set blendSrc(t) {
			this._shaderValues.setInt(CartoonMaterial.BLEND_SRC, t)
		}
		get blendDst() {
			return this._shaderValues.getInt(CartoonMaterial.BLEND_DST)
		}
		set blendDst(t) {
			this._shaderValues.setInt(CartoonMaterial.BLEND_DST, t)
		}
		get depthTest() {
			return this._shaderValues.getInt(CartoonMaterial.DEPTH_TEST)
		}
		set depthTest(t) {
			this._shaderValues.setInt(CartoonMaterial.DEPTH_TEST, t)
		}
		get depthWrite() {
			return this._shaderValues.getBool(CartoonMaterial.DEPTH_WRITE)
		}
		set depthWrite(t) {
			this._shaderValues.setBool(CartoonMaterial.DEPTH_WRITE, t)
		}
		get renderMode() {
			return this.__render_mode__
		}
		set renderMode(t) {
			switch (this.__render_mode__ = t, t) {
				case CartoonMaterial.RENDERMODE_OPAQUE:
					this.alphaTest = !1, this.renderQueue = Laya.Material.RENDERQUEUE_OPAQUE, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case CartoonMaterial.RENDERMODE_OPAQUE_CULL_NONE:
					this.alphaTest = !1, this.renderQueue = Laya.Material.RENDERQUEUE_OPAQUE, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_NONE, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case CartoonMaterial.RENDERMODE_CUTOUT:
					this.renderQueue = Laya.Material.RENDERQUEUE_ALPHATEST, this.alphaTest = !0, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case CartoonMaterial.RENDERMODE_CUTOUT_CULL_NONE:
					this.renderQueue = Laya.Material.RENDERQUEUE_ALPHATEST, this.alphaTest = !0, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_NONE, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case CartoonMaterial.RENDERMODE_TRANSPARENT:
					this.renderQueue = Laya.Material.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_ENABLE_ALL, this.blendSrc = Laya.RenderState.BLENDPARAM_SRC_ALPHA, this.blendDst = Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case CartoonMaterial.RENDERMODE_TRANSPARENT_CULL_NONE:
					this.renderQueue = Laya.Material.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, this.cull = Laya.RenderState.CULL_NONE, this.blend = Laya.RenderState.BLEND_ENABLE_ALL, this.blendSrc = Laya.RenderState.BLENDPARAM_SRC_ALPHA, this.blendDst = Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				default:
					this.renderQueue = t
			}
		}
		setState(t) {
			if (this._state !== t) switch (this._state = t, this._removeAllState(), t) {
				case 2:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_PAINT_NONE);
					break;
				case 32:
					break;
				default:
					console.error("CartoonMaterial no state:", t)
			}
		}
		_removeAllState() {
			this._shaderValues.removeDefine(PaintMaterialTest.DEF_PAINT_NONE)
		}
	}
	CartoonMaterial.ALBEDOTEXTURE = Laya.Shader3D.propertyNameToID("u_AlbedoTexture"), CartoonMaterial.ALBEDOIDENTITY = Laya.Shader3D.propertyNameToID("u_AlbedoIdentity"), CartoonMaterial.ALBEDOCOLOR = Laya.Shader3D.propertyNameToID("u_AlbedoColor"), CartoonMaterial.OUTLINEWIDTH = Laya.Shader3D.propertyNameToID("u_OutlineWidth"), CartoonMaterial.OUTLINELIGHTNESS = Laya.Shader3D.propertyNameToID("u_OutlineLightness"), CartoonMaterial.OUTLINECOLOR = Laya.Shader3D.propertyNameToID("u_OutlineColor"), CartoonMaterial.SHADOWCOLOR = Laya.Shader3D.propertyNameToID("u_ShadowColor"), CartoonMaterial.SHADOWRANGE = Laya.Shader3D.propertyNameToID("u_ShadowRange"), CartoonMaterial.SHADOWINTENSITY = Laya.Shader3D.propertyNameToID("u_ShadowIntensity"), CartoonMaterial.SHADOWBOUNDARY = Laya.Shader3D.propertyNameToID("u_ShadowBoundary"), CartoonMaterial.SECOND_SHADOWCOLOR = Laya.Shader3D.propertyNameToID("u_Second_ShadowColor"), CartoonMaterial.SECOND_SHADOWRANGE = Laya.Shader3D.propertyNameToID("u_Second_ShadowRange"), CartoonMaterial.SECOND_SHADOWINTENSITY = Laya.Shader3D.propertyNameToID("u_Second_ShadowIntensity"), CartoonMaterial.SECOND_SHADOWBOUNDARY = Laya.Shader3D.propertyNameToID("u_Second_ShadowBoundary"), CartoonMaterial.EDGE_HIGHLIGHT_COLOR = Laya.Shader3D.propertyNameToID("u_Edge_HighlightColor"), CartoonMaterial.EDGE_HIGHLIGHT_RANGE = Laya.Shader3D.propertyNameToID("u_Edge_HighlightRange"), CartoonMaterial.EDGE_HIGHLIGHT_INTENSITY = Laya.Shader3D.propertyNameToID("u_Edge_HighlightIntensity"), CartoonMaterial.EDGE_HIGHLIGHT_BOUNDARY = Laya.Shader3D.propertyNameToID("u_Edge_HighlightBoundary"), CartoonMaterial.SPECULARRANGE = Laya.Shader3D.propertyNameToID("u_SpecularRange"), CartoonMaterial.SPECULARINTENSITY = Laya.Shader3D.propertyNameToID("u_SpecularIntensity"), CartoonMaterial.SPECULARCOLOR = Laya.Shader3D.propertyNameToID("u_SpecularColor"), CartoonMaterial.DIRECTIONLIGHTDIRECTION = Laya.Shader3D.propertyNameToID("u_SunLight.direction"), CartoonMaterial.DIRECTIONLIGHTCOLOR = Laya.Shader3D.propertyNameToID("u_SunLight.color"), CartoonMaterial.SPOT_LIGHT_COLOR = Laya.Shader3D.propertyNameToID("u_SpotLight.color"), CartoonMaterial.SPOT_LIGHT_DIRECTION = Laya.Shader3D.propertyNameToID("u_SpotLight.direction"), CartoonMaterial.SPOT_LIGHT_RANGE = Laya.Shader3D.propertyNameToID("u_SpotLight.range"), CartoonMaterial.SPOT_LIGHT_SPOT = Laya.Shader3D.propertyNameToID("u_SpotLight.spot"), CartoonMaterial.SPOT_LIGHT_POSITION = Laya.Shader3D.propertyNameToID("u_SpotLight.position"), CartoonMaterial.WHOLE_ALPHA = Laya.Shader3D.propertyNameToID("u_alpha"), CartoonMaterial.SHADERDEFINE_ALBEDOTEXTURE = Laya.Shader3D.getDefineByName("ALBEDOTEXTURE"), CartoonMaterial.SHADERDEFINE_TILINGOFFSET = Laya.Shader3D.getDefineByName("TILINGOFFSET"), CartoonMaterial.SHADERDEFINE_BONE = Laya.Shader3D.getDefineByName("BONE"), CartoonMaterial.SHADERDEFINE_WHOLE_ALPHA = Laya.Shader3D.getDefineByName("WHOLE_ALPHA"), CartoonMaterial.SHADERDEFINE_ALBEDO_COLOR = Laya.Shader3D.getDefineByName("ALBEDO_COLOR"), CartoonMaterial.CULL = Laya.Shader3D.propertyNameToID("s_Cull"), CartoonMaterial.BLEND = Laya.Shader3D.propertyNameToID("s_Blend"), CartoonMaterial.BLEND_SRC = Laya.Shader3D.propertyNameToID("s_BlendSrc"), CartoonMaterial.BLEND_DST = Laya.Shader3D.propertyNameToID("s_BlendDst"), CartoonMaterial.DEPTH_TEST = Laya.Shader3D.propertyNameToID("s_DepthTest"), CartoonMaterial.DEPTH_WRITE = Laya.Shader3D.propertyNameToID("s_DepthWrite"), CartoonMaterial.RENDERMODE_OPAQUE = 0, CartoonMaterial.RENDERMODE_OPAQUE_CULL_NONE = 1, CartoonMaterial.RENDERMODE_CUTOUT = 2, CartoonMaterial.RENDERMODE_CUTOUT_CULL_NONE = 3, CartoonMaterial.RENDERMODE_TRANSPARENT = 4, CartoonMaterial.RENDERMODE_TRANSPARENT_CULL_NONE = 5;
	var Vector3 = Laya.Vector3,
		Quaternion = Laya.Quaternion,
		Script3D = Laya.Script3D,
		BoneColliderPart;
	! function(t) {
		t[t.NONE = 1] = "NONE", t[t.UP = 2] = "UP", t[t.DOWN = 3] = "DOWN"
	}(BoneColliderPart || (BoneColliderPart = {}));
	class Bone extends Script3D {
		constructor() {
			super(...arguments), this.parm1 = .6, this.parm2 = .9, this.radius = .03, this.part = BoneColliderPart.NONE, this.colliders = [], this.deepth = 0, this.boneLength = .1, this.displacementFactor = .3, this.maxDisplacement = .1, this.wind = new Laya.Vector3, this.gravity = new Laya.Vector3
		}
		onAwake() {
			this.transfom = this.owner.transform, this.originLocalRotation = this.transfom.localRotation.clone(), this.originLocalPosition = this.transfom.localPosition.clone(), this.lastWorldRotation = this.transfom.rotation.clone(), this.lastWorldPosition = this.transfom.position.clone(), this.deepth = 1;
			let t = this.owner;
			for (; t.parent && t.getComponent(Bone);) this.deepth++, t = t.parent;
			let e = this.owner.parent;
			e && (this.parent = e.transform, this.parentBone = this.owner.parent.getComponent(Bone)), this.parent ? this.boneLength = Vector3.distance(this.transfom.position, this.parent.position) : this.boneLength = 0
		}
		onStart() {
			this.updateTemplate1 = this.parm1 / this.parm2, this.updateTemplateNormal = new Laya.Vector3
		}
		_ignoreBoneFromNodeToRoot(t) {
			let e = t.getComponent(Bone);
			if (e) {
				if (e.bIgnoredBone) return;
				e.bIgnoredBone = !0
			}
			t.parent && t != Laya.stage && this._ignoreBoneFromNodeToRoot(t.parent)
		}
		UpdateBone(t) {
			if (this.transfom.localRotation = this.originLocalRotation, this.transfom.localPosition = this.originLocalPosition, this.bIgnoredBone) return;
			let e = this.owner.parent.___childBoneIdDict;
			if (e || (e = Object.create(null), this.owner.parent.___childBoneIdDict = e, this.owner.parent.___childBoneIdDictSize = 0), this.owner.parent.___childBoneIdDictSize >= 2) {
				let t = this.owner.parent.numChildren;
				for (let e = 0; e < t; e++) {
					let t = this.owner.parent.getChildAt(e);
					t && this._ignoreBoneFromNodeToRoot(t)
				}
				return
			}
			if (e[this.id] || (e[this.id] = !0, this.owner.parent.___childBoneIdDictSize++), !this.parentBone) return;
			Quaternion.lerp(this.lastWorldRotation, this.transfom.rotation, this.updateTemplate1, this.lastWorldRotation), this.transfom.rotation = this.lastWorldRotation.clone(), Laya.Vector3.add(this.transfom.position, this.gravity, this.transfom.position), Laya.Vector3.lerp(this.lastWorldPosition, this.transfom.position, this.displacementFactor, this.lastWorldPosition), Laya.Vector3.subtract(this.lastWorldPosition, this.transfom.position, this.updateTemplateNormal), Laya.Vector3.scalarLengthSquared(this.updateTemplateNormal) > this.maxDisplacement * this.maxDisplacement && (Laya.Vector3.normalize(this.updateTemplateNormal, this.updateTemplateNormal), Laya.Vector3.scale(this.updateTemplateNormal, this.maxDisplacement, this.updateTemplateNormal), Laya.Vector3.add(this.transfom.position, this.updateTemplateNormal, this.lastWorldPosition)), Laya.Vector3.subtract(this.lastWorldPosition, this.parent.position, this.updateTemplateNormal);
			let a = this.boneLength;
			Laya.Vector3.scalarLengthSquared(this.updateTemplateNormal) > a * a && (Laya.Vector3.normalize(this.updateTemplateNormal, this.updateTemplateNormal), Laya.Vector3.scale(this.updateTemplateNormal, a, this.updateTemplateNormal), Laya.Vector3.add(this.parent.position, this.updateTemplateNormal, this.lastWorldPosition));
			for (let t = 0; t < this.colliders.length; t++) {
				const e = this.colliders[t];
				let a = Laya.Vector3.distanceSquared(e.transform.position, this.lastWorldPosition),
					i = this.radius + e.radius;
				a <= i * i && (Laya.Vector3.subtract(this.lastWorldPosition, e.transform.position, this.updateTemplateNormal), Laya.Vector3.normalize(this.updateTemplateNormal, this.updateTemplateNormal), Laya.Vector3.scale(this.updateTemplateNormal, i, this.updateTemplateNormal), Laya.Vector3.add(e.transform.position, this.updateTemplateNormal, this.lastWorldPosition))
			}
			this.transfom.position = this.lastWorldPosition
		}
	}
	var Script3D$1 = Laya.Script3D;
	class BoneCollider extends Script3D$1 {
		constructor() {
			super(...arguments), this.radius = .1, this.part = BoneColliderPart.NONE
		}
		onAwake() {
			this.transform = this.owner.transform
		}
		onStart() {
			/1/.test(this.owner.name) && (this.radius *= .5), /2/.test(this.owner.name) && (this.radius *= .8), /3/.test(this.owner.name) && (this.radius *= .7), this.preRadius = this.radius
		}
		SetScale(t) {
			this.radius = this.preRadius * t
		}
	}
	var Script3D$2 = Laya.Script3D;
	class BoneManager extends Script3D$2 {
		constructor() {
			super(...arguments), this.bones = [], this.allColliders = [], this.isRefresh = !1, this.COLLIDER_REPXS_DRESS = [/PZD_/], this.COLLIDER_REPXS_HAIR = [/PZH_/], this.BONE_REPXS_DRESS = [/qb_/, /pd_/, /qunbai_/, /mianshi_/, /toushi_/, /tfhudiejie_/, /ershi_/, /beibu_/, /jiansui_/, /cb_/, /Bone_beishi_/, /shouchi_/, /weiba_/, /beibu01_/, /beibu02/, /Bnone_/, /pb_/, /piaodai_/, /yifu/, /qp/, /yw_/, /shoushi_/], this.BONE_REPXS_HAIR = [/tf_/, /toufa_/], this.B_SHOW_GIMOS = !1, this._1Center = new Laya.Vector3, this._2Center = new Laya.Vector3, this._3Center = new Laya.Vector3, this.allGimos = []
		}
		onAwake() {
			let t = this.owner;
			/toufa/.test(this.owner.name) ? (this.part = BoneColliderPart.UP, t = this.owner.parent.parent.parent.parent.parent.parent.parent) : this.part = BoneColliderPart.DOWN, this.part == BoneColliderPart.UP ? (this.AddComponentsInChildren(t, BoneCollider, this.COLLIDER_REPXS_HAIR, {
				part: BoneColliderPart.UP
			}), this.AddBoneInChildren(this.owner, BoneColliderPart.UP)) : (this.AddComponentsInChildren(t, BoneCollider, this.COLLIDER_REPXS_DRESS, {
				part: BoneColliderPart.DOWN
			}), this.AddBoneInChildren(this.owner, BoneColliderPart.DOWN)), this.allColliders = [];
			let e = this.GetComponentsInChildren(t, BoneCollider);
			for (let t = 0; t < e.length; t++) {
				const a = e[t];
				this.allColliders[a.part] || (this.allColliders[a.part] = []), this.allColliders[a.part].push(a)
			}
		}
		onStart() {
			this.CheckBone(), this.onStarted && this.onStarted()
		}
		CheckBone() {
			this.bones = this.GetComponentsInChildren(this.owner, Bone);
			for (let t = 0; t < this.bones.length; t++) {
				this.bones[t];
				this.bones[t].part == BoneColliderPart.UP && (this.bones[t].colliders = this.allColliders[this.bones[t].part] || [], this.bones[t].wind = new Laya.Vector3, this.bones[t].gravity = new Laya.Vector3), this.bones[t].part == BoneColliderPart.DOWN && (this.bones[t].colliders = this.allColliders[this.bones[t].part] || [], this.bones[t].wind = new Laya.Vector3, this.bones[t].gravity = new Laya.Vector3(0, -.01, 0))
			}
		}
		onLateUpdate() {
			for (var t in this._1Center.setValue(0, 0, 0), this._2Center.setValue(0, 0, 0), this._3Center.setValue(0, 0, 0), this.allColliders)
				for (var e = this.allColliders[t], a = 0; a < e.length; a++) {
					(i = e[a]).owner.name.indexOf("PZD_") >= 0 && (i.owner.name.indexOf("1") >= 0 && Laya.Vector3.add(this._1Center, i.transform.position, this._1Center), i.owner.name.indexOf("2") >= 0 && Laya.Vector3.add(this._2Center, i.transform.position, this._2Center), i.owner.name.indexOf("3") >= 0 && Laya.Vector3.add(this._3Center, i.transform.position, this._3Center))
				}
			for (var t in Laya.Vector3.scale(this._1Center, .5, this._1Center), Laya.Vector3.scale(this._2Center, .5, this._2Center), Laya.Vector3.scale(this._3Center, .5, this._3Center), this.allColliders)
				for (e = this.allColliders[t], a = 0; a < e.length; a++) {
					var i;
					(i = e[a]).owner.name.indexOf("PZD_") >= 0 && (i.owner.name.indexOf("4") >= 0 && (i.transform.position = this._1Center), i.owner.name.indexOf("5") >= 0 && (i.transform.position = this._2Center), i.owner.name.indexOf("6") >= 0 && (i.transform.position = this._3Center))
				}
			for (var s = 0; s < this.bones.length; s++) {
				var n = this.bones[s];
				n && n.UpdateBone(0)
			}
			this.isRefresh && (this.isRefresh = !1, this.CheckBone())
		}
		GetComponentsInChildren(t, e) {
			let a = [];
			for (let i = 0; i < t.numChildren; i++) {
				let s = t.getChildAt(i);
				if (s) {
					let t = s.getComponent(e);
					t && a.push(t);
					let i = this.GetComponentsInChildren(s, e);
					for (let t = 0; t < i.length; t++) {
						const e = i[t];
						a.push(e)
					}
				}
			}
			return a
		}
		AddComponentsInChildren(t, e, a, i) {
			for (let s = 0; s < t.numChildren; s++) {
				let n = t.getChildAt(s);
				if (n) {
					let t = !1;
					for (let e = 0; e < a.length; e++) {
						const i = a[e];
						t = t || i.test(n.name)
					}
					if (t) {
						let t = n.addComponent(e);
						if (i)
							for (const e in i) i[e] && (t[e] = i[e])
					}
					this.AddComponentsInChildren(n, e, a, i)
				}
			}
		}
		AddBoneInChildren(t, e) {
			for (let a = 0; a < t.numChildren; a++) {
				let i = t.getChildAt(a),
					s = !1;
				for (let t = 0; t < this.BONE_REPXS_DRESS.length; t++) {
					const e = this.BONE_REPXS_DRESS[t];
					s = s || e.test(i.name)
				}
				for (let t = 0; t < this.BONE_REPXS_HAIR.length; t++) {
					const e = this.BONE_REPXS_HAIR[t];
					s = s || e.test(i.name)
				}
				if (s) {
					i.addComponent(Bone).part = e
				}
				this.AddBoneInChildren(i, e)
			}
		}
		AddBoneFromRoot(t, e) {
			if (!t) return;
			t.addComponent(Bone).part = e;
			let a = t.getChildAt(0);
			a && this.AddBoneFromRoot(a, e)
		}
		Refresh() {
			this.isRefresh = !0
		}
		onUpdate() {}
		setColliderRidus(t) {
			for (let t = 0; t < this.allGimos.length; t++) {
				this.allGimos[t].destroy()
			}
			for (let e = 0; e < this.allColliders.length; e++)
				if (null != this.allColliders[e])
					for (let a = 0; a < this.allColliders[e].length; a++) {
						const i = this.allColliders[e][a];
						if (i && (i.radius = t), this.B_SHOW_GIMOS) {
							let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
							i.owner.addChild(e), this.allGimos.push(e)
						}
					}
		}
		setDisplacementFactor(t) {
			t = parseFloat(t), this.displacementFactor = t;
			for (let e = 0; e < this.bones.length; e++) {
				this.bones[e].displacementFactor = t
			}
		}
		setMaxDisplacement(t) {
			t = parseFloat(t);
			for (let e = 0; e < this.bones.length; e++) {
				this.bones[e].maxDisplacement = t
			}
		}
		setCollider1Size(t) {
			t = parseFloat(t);
			for (const e in this.allColliders) {
				let a = this.allColliders[e];
				for (let e = 0; e < a.length; e++) {
					const i = a[e];
					if (/1/.test(i.owner.name) && (i.radius = t, this.B_SHOW_GIMOS)) {
						i.owner.removeChildByName("gimo");
						let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
						i.owner.addChild(e), e.name = "gimo"
					}
				}
			}
		}
		setCollider2Size(t) {
			t = parseFloat(t);
			for (const e in this.allColliders) {
				let a = this.allColliders[e];
				for (let e = 0; e < a.length; e++) {
					const i = a[e];
					if (/2/.test(i.owner.name) && (i.radius = t, this.B_SHOW_GIMOS)) {
						i.owner.removeChildByName("gimo");
						let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
						i.owner.addChild(e), e.name = "gimo"
					}
				}
			}
		}
		setCollider3Size(t) {
			t = parseFloat(t);
			for (const e in this.allColliders) {
				let a = this.allColliders[e];
				for (let e = 0; e < a.length; e++) {
					const i = a[e];
					if (/3/.test(i.owner.name) && (i.radius = t, this.B_SHOW_GIMOS)) {
						i.owner.removeChildByName("gimo");
						let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
						i.owner.addChild(e), e.name = "gimo"
					}
				}
			}
		}
		setCollider4Size(t) {
			t = parseFloat(t);
			for (const e in this.allColliders) {
				let a = this.allColliders[e];
				for (let e = 0; e < a.length; e++) {
					const i = a[e];
					if (/4/.test(i.owner.name) && (i.radius = t, this.B_SHOW_GIMOS)) {
						i.owner.removeChildByName("gimo");
						let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
						i.owner.addChild(e), e.name = "gimo"
					}
				}
			}
		}
		setCollider5Size(t) {
			t = parseFloat(t);
			for (const e in this.allColliders) {
				let a = this.allColliders[e];
				for (let e = 0; e < a.length; e++) {
					const i = a[e];
					if (/5/.test(i.owner.name) && (i.radius = t, this.B_SHOW_GIMOS)) {
						i.owner.removeChildByName("gimo");
						let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
						i.owner.addChild(e), e.name = "gimo"
					}
				}
			}
		}
		setCollider6Size(t) {
			t = parseFloat(t);
			for (const e in this.allColliders) {
				let a = this.allColliders[e];
				for (let e = 0; e < a.length; e++) {
					const i = a[e];
					if (/6/.test(i.owner.name) && (i.radius = t, this.B_SHOW_GIMOS)) {
						i.owner.removeChildByName("gimo");
						let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
						i.owner.addChild(e), e.name = "gimo"
					}
				}
			}
		}
		setColliderHair(t) {
			t = parseFloat(t);
			for (const e in this.allColliders) {
				let a = this.allColliders[e];
				for (let e = 0; e < a.length; e++) {
					const i = a[e];
					if (/PZH/.test(i.owner.name) && (i.radius = t, this.B_SHOW_GIMOS)) {
						i.owner.removeChildByName("gimo");
						let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
						i.owner.addChild(e), e.name = "gimo"
					}
				}
			}
		}
		setGravity(t) {
			if (t)
				for (let e = 0; e < this.bones.length; e++) {
					this.bones[e].gravity = new Laya.Vector3(t.x, t.y, t.z)
				}
		}
	}
	const ST_READ_HEAD = 1,
		ST_READ_DATA = 2;
	class SeasionWS extends Laya.EventDispatcher {
		constructor() {
			super(), this.instanceId = 0, this.uuid = null, this.revDataBuffer = "", this.socket = null, this.readState = ST_READ_HEAD, this.head = {}, this.instanceId = 0, this.uuid = null, this.revDataBuffer = "", this.socket = null, this.readState = ST_READ_HEAD, this.head = {}
		}
		setUuid(t) {
			this.uuid = t
		}
		setSocket(t) {
			this.socket = t, this.socket.onopen = (() => {
				this.event("open")
			}), this.socket.onclose = (() => {
				this.event("close")
			}), this.socket.onerror = (t => {
				this.event("error")
			}), this.socket.onmessage = (t => {
				if (this.revDataBuffer += t.data, this.readState == ST_READ_HEAD) {
					let t = /({.+?})/.exec(this.revDataBuffer);
					if (t) {
						let e = t.shift();
						this.revDataBuffer = this.revDataBuffer.replace(e, ""), this.head = JSON.parse(e), this.readState = ST_READ_DATA
					}
				}
				if (this.readState == ST_READ_DATA && this.revDataBuffer.length >= this.head.dataLength) {
					let t = this.revDataBuffer.slice(0, this.revDataBuffer.length);
					try {
						let e = JSON.parse(t);
						this.event("data", e)
					} catch (t) {
						console.error("ST_READ_DATA error:", t)
					}
					this.revDataBuffer = this.revDataBuffer.replace(t, ""), this.readState = ST_READ_HEAD
				}
			})
		}
		write(t) {
			let e = JSON.stringify(t),
				a = {
					dataLength: e.length
				};
			this.socket.send(JSON.stringify(a) + e)
		}
		close() {
			this.socket.close()
		}
	}
	class NetworkWS {
		static newSeasion(t, e) {
			let a = "ws://" + t + ":" + e.toString();
			console.log("连接地址:", a);
			let i = new WebSocket(a),
				s = new SeasionWS;
			return s.setSocket(i), s
		}
	}
	class GameRemoteRouter {
		constructor(t) {
			this.__seasion = null, this.__registedRouter = null, this.seasion = t, this.seasion ? this.seasion.on("data", this, t => {
				this.__router(t)
			}) : console.error("没有设置seasion")
		}
		static create() {
			if (this._bCreate) return;
			this._bCreate = !0;
			let t = NetworkWS.newSeasion("127.0.0.1", 8082);
			t.on("open", this, () => {
				Timer.callLater(1, () => {
					_G.sendMsg(BASE_MSG.UI_SHOW_TIP, "链接存档服务器成功!可以存档！")
				}), GameRemoteRouter.instance = new GameRemoteRouter(t)
			}), t.on("error", this, () => {
				console.log("链接存档服务器失败!")
			})
		}
		get seasion() {
			return this.__seasion
		}
		set seasion(t) {
			this.__seasion = t
		}
		sendMsgToServer(t) {
			this.seasion.write(t)
		}
		registerRouter(t, e) {
			t && e && (this.__registedRouter[t] = e)
		}
		__router(t) {
			if (!t) return;
			if (!t.route) return;
			if (!this.__registedRouter[t.route]) return;
			(0, this.__registedRouter[t.route])(t.data)
		}
	}
	GameRemoteRouter._bCreate = !1;
	class LightMapMaterial extends Laya.Material {
		constructor() {
			super(), this.setShaderName("lightMapMaterial"), this._shaderValues.setNumber(LightMapMaterial.ALBEDOINTENSITY, 1), this._shaderValues.setVector(LightMapMaterial.ALBEDOCOLOR, new Laya.Vector4(1, 1, 1, 1)), this.alpha = 1
		}
		static __init__() {
			LightMapMaterial.SHADERDEFINE_BONE = Laya.Shader3D.getDefineByName("BONE"), LightMapMaterial.SHADERDEFINE_TILINGOFFSET = Laya.Shader3D.getDefineByName("TILINGOFFSET"), LightMapMaterial.SHADERDEFINE_WHOLE_ALPHA = Laya.Shader3D.getDefineByName("WHOLE_ALPHA")
		}
		static initShader() {
			LightMapMaterial.__init__();
			var t = {
					s_Cull: Laya.Shader3D.RENDER_STATE_CULL,
					s_Blend: Laya.Shader3D.RENDER_STATE_BLEND,
					s_BlendSrc: Laya.Shader3D.RENDER_STATE_BLEND_SRC,
					s_BlendDst: Laya.Shader3D.RENDER_STATE_BLEND_DST,
					s_DepthTest: Laya.Shader3D.RENDER_STATE_DEPTH_TEST,
					s_DepthWrite: Laya.Shader3D.RENDER_STATE_DEPTH_WRITE
				},
				e = {
					a_Position: Laya.VertexMesh.MESH_POSITION0,
					a_Normal: Laya.VertexMesh.MESH_NORMAL0,
					a_Texcoord0: Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
					a_Texcoord1: Laya.VertexMesh.MESH_TEXTURECOORDINATE1,
					a_BoneWeights: Laya.VertexMesh.MESH_BLENDWEIGHT0,
					a_BoneIndices: Laya.VertexMesh.MESH_BLENDINDICES0
				},
				a = {
					u_MvpMatrix: Laya.Shader3D.PERIOD_SPRITE,
					u_WorldMat: Laya.Shader3D.PERIOD_SPRITE,
					u_CameraPos: Laya.Shader3D.PERIOD_CAMERA,
					u_AlbedoTexture: Laya.Shader3D.PERIOD_MATERIAL,
					u_AlbedoIdentity: Laya.Shader3D.PERIOD_MATERIAL,
					u_AlbedoColor: Laya.Shader3D.PERIOD_MATERIAL,
					"u_SunLight.direction": Laya.Shader3D.PERIOD_SCENE,
					"u_SunLight.color": Laya.Shader3D.PERIOD_SCENE,
					u_Bones: Laya.Shader3D.PERIOD_CUSTOM,
					u_alpha: Laya.Shader3D.PERIOD_MATERIAL,
					u_ShadowMap: Laya.Shader3D.PERIOD_MATERIAL,
					u_LightvpMatrix: Laya.Shader3D.PERIOD_MATERIAL,
					u_LightmapScaleOffset: Laya.Shader3D.PERIOD_SPRITE,
					u_LightMap: Laya.Shader3D.PERIOD_SPRITE,
					u_TilingOffset: Laya.Shader3D.PERIOD_MATERIAL
				},
				i = Laya.Shader3D.add("lightMapMaterial"),
				s = new Laya.SubShader(e, a);
			i.addSubShader(s);
			s.addShaderPass("\n\t\tattribute vec4 a_Position; \n\t\tattribute vec3 a_Normal; \n\t\tattribute vec2 a_Texcoord0;\n\t\tuniform mat4 u_MvpMatrix; \n\t\tuniform mat4 u_WorldMat;\n\t\tuniform vec3 u_CameraPos;\n\t\tvarying vec2 v_Texcoord0;    \n\n\n\t\t#ifdef BONE\n\t\t\tconst int c_MaxBoneCount = 24;\n\t\t\tattribute vec4 a_BoneIndices;\n\t\t\tattribute vec4 a_BoneWeights;\n\t\t\tuniform mat4 u_Bones[c_MaxBoneCount];\n\t\t#endif\n\n\t\t#if defined(LIGHTMAP)&&defined(UV1)\n\t\t\tattribute vec2 a_Texcoord1;\n\t\t#endif\n\n\t\t#ifdef LIGHTMAP\n\t\t\tuniform vec4 u_LightmapScaleOffset;\n\t\t\tvarying vec2 v_LightMapUV;\n        #endif\n        \n        #ifdef TILINGOFFSET\n            uniform vec4 u_TilingOffset;\n\t\t#endif\n\t\t\n\n        vec2 TransformUV(vec2 texcoord,vec4 tilingOffset) {\n            vec2 transTexcoord=vec2(texcoord.x,texcoord.y-1.0)*tilingOffset.xy+vec2(tilingOffset.z,-tilingOffset.w);\n            transTexcoord.y+=1.0;\n            return transTexcoord;\n        }\n\n\t\tvoid main() \n\t\t{ \n\t\t\t#ifdef BONE\n\t\t\t\tmat4 skinTransform=mat4(0.0);\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\t\t\tvec4 position = skinTransform * a_Position;\n\t\t\t\tgl_Position=u_MvpMatrix * position;\n\t\t\t\tmat3 worldMat=mat3(u_WorldMat * skinTransform);\n\t\t\t#else\n\t\t\t\tgl_Position=u_MvpMatrix * a_Position;\n\t\t\t\tmat3 worldMat=mat3(u_WorldMat);\n\t\t\t#endif\n\n            #ifdef TILINGOFFSET\n                v_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n            #else\n                v_Texcoord0=a_Texcoord0;\n            #endif\t\n\n\t\t\tvec3 v_PositionWorld;\n\t\t\t#ifdef BONE\n\t\t\t\tv_PositionWorld=(u_WorldMat*position).xyz;\n\t\t\t#else\n\t\t\t\tv_PositionWorld=(u_WorldMat*a_Position).xyz;\n\t\t\t#endif\n\n\t\t\t#ifdef LIGHTMAP\n\t\t\t\t#ifdef SCALEOFFSETLIGHTINGMAPUV\n\t\t\t\t\t#ifdef UV1\n\t\t\t\t\t\tv_LightMapUV=vec2(a_Texcoord1.x,1.0-a_Texcoord1.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n\t\t\t\t\t#else\n\t\t\t\t\t\tv_LightMapUV=vec2(a_Texcoord0.x,1.0-a_Texcoord0.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n\t\t\t\t\t#endif \n\t\t\t\t\tv_LightMapUV.y=1.0-v_LightMapUV.y;\n\t\t\t\t#else\n\t\t\t\t\t#ifdef UV1\n\t\t\t\t\t\tv_LightMapUV=a_Texcoord1;\n\t\t\t\t\t#else\n\t\t\t\t\t\tv_LightMapUV=a_Texcoord0;\n\t\t\t\t\t#endif \n\t\t\t\t#endif \n\t\t\t#endif\n\n\t\t\tgl_Position.z=gl_Position.z * 2.0 - gl_Position.w;\n\t\t}", "\n\t\tprecision lowp float;\n\t\n\t\tvarying vec2 v_Texcoord0; \n        \n\n\t\t#ifdef WHOLE_ALPHA\n\t\t\tuniform float u_alpha;\n\t\t#endif\n\t\tuniform samplerCube u_reflection_cube;\n\t\tuniform float u_reflection_factor;\n\t\tuniform sampler2D u_AlbedoTexture;\n\n\t\t#ifdef LIGHTMAP\n\t\t\tvarying vec2 v_LightMapUV;\n\t\t\tuniform sampler2D u_LightMap;\n\t\t#endif\n\n\t\tuniform float u_AlbedoIdentity;\n\n\t\tvec3 DecodeLightmap(vec4 color) {\n\t\t\treturn color.rgb*color.a*5.0;\n\t\t}\n\n\t\tvoid main_normal(){\n\t\t\tvec4 albedoTextureColor = texture2D(u_AlbedoTexture, v_Texcoord0);\n\n\t\t\t#ifdef ALPHATEST\n\t\t\tif(albedoTextureColor.a <= 0.5){\n\t\t\t\tdiscard;\n\t\t\t}\n\t\t\t#endif\n\t\t\t\n\t\t\t#ifdef LIGHTMAP\n\t\t\t\t// unity导出后会在laya中会过度曝光，0.75是测试后的一个修正值\n\t\t\t\talbedoTextureColor.rgb *= DecodeLightmap(texture2D(u_LightMap, v_LightMapUV)) * 0.75;\n\t\t\t#endif\n\n\t\t\talbedoTextureColor *= u_AlbedoIdentity;\n\n\t\t\t#ifdef WHOLE_ALPHA\n\t\t\t\t//叠加全局透明度\n\t\t\t\tgl_FragColor = vec4(albedoTextureColor.rgb, albedoTextureColor.a*u_alpha);\n\t\t\t#else\n\t\t\t\tgl_FragColor = vec4(albedoTextureColor.rgb, albedoTextureColor.a);\n\t\t\t#endif\n\t\t}\n\t\n\t\tvoid main() \n\t\t{ \n\t\t\tmain_normal();\n\t\t}", t)
		}
		get albedoTexture() {
			return this._shaderValues.getTexture(LightMapMaterial.ALBEDOTEXTURE)
		}
		set albedoTexture(t) {
			this._shaderValues.setTexture(LightMapMaterial.ALBEDOTEXTURE, t)
		}
		get albedoColor() {
			return this._shaderValues.getVector(LightMapMaterial.ALBEDOCOLOR)
		}
		set albedoColor(t) {
			this._shaderValues.setVector(LightMapMaterial.ALBEDOCOLOR, t)
		}
		get albedoIntensity() {
			return this._shaderValues.getNumber(LightMapMaterial.ALBEDOINTENSITY)
		}
		set albedoIntensity(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(LightMapMaterial.ALBEDOINTENSITY, t)
		}
		get shadowMap() {
			return this._shaderValues.getTexture(LightMapMaterial.SHADOW_MAP)
		}
		get lightvp() {
			return this._shaderValues.getMatrix4x4(LightMapMaterial.LIGHT_VP)
		}
		set lightvp(t) {
			this._shaderValues.setMatrix4x4(LightMapMaterial.LIGHT_VP, t)
		}
		get tilingOffset() {
			return this._shaderValues.getVector(LightMapMaterial.TILINGOFFSET)
		}
		set tilingOffset(t) {
			t && (1 != t.x || 1 != t.y || 0 != t.z || 0 != t.w) ? this._shaderValues.addDefine(LightMapMaterial.SHADERDEFINE_TILINGOFFSET) : this._shaderValues.removeDefine(LightMapMaterial.SHADERDEFINE_TILINGOFFSET), this._shaderValues.setVector(LightMapMaterial.TILINGOFFSET, t)
		}
		get alpha() {
			return this._shaderValues.getNumber(LightMapMaterial.WHOLE_ALPHA)
		}
		set alpha(t) {
			null != t ? this._defineDatas.add(LightMapMaterial.SHADERDEFINE_WHOLE_ALPHA) : this._defineDatas.remove(LightMapMaterial.SHADERDEFINE_WHOLE_ALPHA), this._shaderValues.setNumber(LightMapMaterial.WHOLE_ALPHA, t)
		}
		get cull() {
			return this._shaderValues.getInt(LightMapMaterial.CULL)
		}
		set cull(t) {
			this._shaderValues.setInt(LightMapMaterial.CULL, t)
		}
		get blend() {
			return this._shaderValues.getInt(LightMapMaterial.BLEND)
		}
		set blend(t) {
			this._shaderValues.setInt(LightMapMaterial.BLEND, t)
		}
		get blendSrc() {
			return this._shaderValues.getInt(LightMapMaterial.BLEND_SRC)
		}
		set blendSrc(t) {
			this._shaderValues.setInt(LightMapMaterial.BLEND_SRC, t)
		}
		get blendDst() {
			return this._shaderValues.getInt(LightMapMaterial.BLEND_DST)
		}
		set blendDst(t) {
			this._shaderValues.setInt(LightMapMaterial.BLEND_DST, t)
		}
		get depthTest() {
			return this._shaderValues.getInt(LightMapMaterial.DEPTH_TEST)
		}
		set depthTest(t) {
			this._shaderValues.setInt(LightMapMaterial.DEPTH_TEST, t)
		}
		get depthWrite() {
			return this._shaderValues.getBool(LightMapMaterial.DEPTH_WRITE)
		}
		set depthWrite(t) {
			this._shaderValues.setBool(LightMapMaterial.DEPTH_WRITE, t)
		}
		set renderMode(t) {
			switch (t) {
				case LightMapMaterial.RENDERMODE_OPAQUE:
					this.alphaTest = !1, this.renderQueue = Laya.Material.RENDERQUEUE_OPAQUE, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case LightMapMaterial.RENDERMODE_CUTOUT:
					this.renderQueue = Laya.Material.RENDERQUEUE_ALPHATEST, this.alphaTest = !0, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case LightMapMaterial.RENDERMODE_CUTOUT_CULL_NONE:
					this.renderQueue = Laya.Material.RENDERQUEUE_ALPHATEST, this.alphaTest = !0, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_NONE, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case LightMapMaterial.RENDERMODE_TRANSPARENT:
					this.renderQueue = Laya.Material.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_ENABLE_ALL, this.blendSrc = Laya.RenderState.BLENDPARAM_SRC_ALPHA, this.blendDst = Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case LightMapMaterial.RENDERMODE_TRANSPARENT_CULL_NONE:
					this.renderQueue = Laya.Material.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, this.cull = Laya.RenderState.CULL_NONE, this.blend = Laya.RenderState.BLEND_ENABLE_ALL, this.blendSrc = Laya.RenderState.BLENDPARAM_SRC_ALPHA, this.blendDst = Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				default:
					throw new Error("LightMapMaterial : renderMode value error.")
			}
		}
	}
	LightMapMaterial.ALBEDOTEXTURE = Laya.Shader3D.propertyNameToID("u_AlbedoTexture"), LightMapMaterial.ALBEDOINTENSITY = Laya.Shader3D.propertyNameToID("u_AlbedoIdentity"), LightMapMaterial.ALBEDOCOLOR = Laya.Shader3D.propertyNameToID("u_AlbedoColor"), LightMapMaterial.SHADOW_MAP = Laya.Shader3D.propertyNameToID("u_ShadowMap"), LightMapMaterial.LIGHT_VP = Laya.Shader3D.propertyNameToID("u_LightvpMatrix"), LightMapMaterial.TILINGOFFSET = Laya.Shader3D.propertyNameToID("u_TilingOffset"), LightMapMaterial.WHOLE_ALPHA = Laya.Shader3D.propertyNameToID("u_alpha"), LightMapMaterial.CULL = Laya.Shader3D.propertyNameToID("s_Cull"), LightMapMaterial.BLEND = Laya.Shader3D.propertyNameToID("s_Blend"), LightMapMaterial.BLEND_SRC = Laya.Shader3D.propertyNameToID("s_BlendSrc"), LightMapMaterial.BLEND_DST = Laya.Shader3D.propertyNameToID("s_BlendDst"), LightMapMaterial.DEPTH_TEST = Laya.Shader3D.propertyNameToID("s_DepthTest"), LightMapMaterial.DEPTH_WRITE = Laya.Shader3D.propertyNameToID("s_DepthWrite"), LightMapMaterial.RENDERMODE_OPAQUE = 1, LightMapMaterial.RENDERMODE_CUTOUT = 2, LightMapMaterial.RENDERMODE_CUTOUT_CULL_NONE = 3, LightMapMaterial.RENDERMODE_TRANSPARENT = 4, LightMapMaterial.RENDERMODE_TRANSPARENT_CULL_NONE = 5;
	const KEY_MATERIAL_INFO_VERSION = "KEY_MATERIAL_INFO_VERSION",
		MATERIAL_INFO_VERSION = 1;
	class mgrMaterial extends _mgrBase {
		static onload() {
			if (CartoonMaterial.initShader(), PaintMaterialTest.initShader(), LightMapMaterial.initShader(), this.loadFromText(), !this.EMPTY_TEX2D) {
				var t = new Uint8Array(4);
				t[0] = 0, t[1] = 0, t[2] = 0, t[3] = 0;
				let e = new Laya.Texture2D(1, 1, Laya.Texture2D.FORMAT_R8G8B8A8, !1, !1);
				e.setPixels(t), e.lock = !0, this.EMPTY_TEX2D = e
			}
			_G.H5_TEST && mgrRes.loadRes("res/cfg/editorConfig.json", Laya.Loader.JSON, t => {
				t && t[KEY_MATERIAL_INFO_VERSION] == MATERIAL_INFO_VERSION && (this.editorConfig = t)
			})
		}
		static loadFromText() {
			mgrRes.loadRes("res/cfg/3dConfig.txt", Laya.Loader.TEXT, t => {
				if (t) {
					let e = Tools.decompressFromBase64New(t);
					if (e) {
						let t = JSON.parse(e);
						return void(t[KEY_MATERIAL_INFO_VERSION] == MATERIAL_INFO_VERSION && (this.materialInfos = t.materialInfos, this.dynamicBoneInfos = t.dynamicBoneInfos, this.lightRotation = t.lightRotation, this.resetPanel3DLight()))
					}
				}
				this.loadFromJson()
			})
		}
		static loadFromJson() {
			console.log("加载3dConfig.json --- 未压缩格式"), mgrRes.loadRes("res/cfg/3dConfig.json", Laya.Loader.JSON, t => {
				t && t[KEY_MATERIAL_INFO_VERSION] == MATERIAL_INFO_VERSION && (this.materialInfos = t.materialInfos, this.dynamicBoneInfos = t.dynamicBoneInfos, this.lightRotation = t.lightRotation, this.resetPanel3DLight())
			})
		}
		static getSaveData() {
			let t = {
				materialInfos: this.materialInfos,
				dynamicBoneInfos: this.dynamicBoneInfos,
				lightRotation: this.lightRotation
			};
			t[KEY_MATERIAL_INFO_VERSION] = MATERIAL_INFO_VERSION;
			let e = JSON.stringify(t);
			return [e, Tools.compressToBase64New(e)]
		}
		static saveToLocal() {
			if (GameRemoteRouter.instance) {
				let [t, e] = this.getSaveData();
				GameRemoteRouter.instance.sendMsgToServer({
					route: "keepInFile",
					data: {
						filePath: "res/cfg/3dConfig.txt",
						data: e
					}
				}), GameRemoteRouter.instance.sendMsgToServer({
					route: "keepInFile",
					data: {
						filePath: "res/cfg/3dConfig.json",
						data: t
					}
				}), GameRemoteRouter.instance.sendMsgToServer({
					route: "keepInFile",
					data: {
						filePath: "res/cfg/editorConfig.json",
						data: this.editorConfig
					}
				}), this.resetPanel3DLight()
			} else GameRemoteRouter.create()
		}
		static resetPanel3DLight() {
			let t = this.lightRotation;
			t && 3 == t.length && PanelBase3D.setDefaultLightEular(t[0], t[1], t[2])
		}
		static setMaterialInfos(t) {
			this.materialInfos = t
		}
		static setDynamicBoneInfos(t) {
			this.dynamicBoneInfos = t
		}
		static setMaterial(t, e, a, i) {
			this.materialInfos[t] || (this.materialInfos[t] = {}), this.materialInfos[t][e] || (this.materialInfos[t][e] = {}), this.materialInfos[t][e][a] = i
		}
		static getMaterial(t, e, a, i = !0) {
			if (!this.materialInfos[t]) {
				if (!i) return null;
				this.materialInfos[t] = {}
			}
			if (!this.materialInfos[t][e]) {
				if (!i) return null;
				this.materialInfos[t][e] = {}
			}
			return !this.materialInfos[t][e][a] && i && (this.materialInfos[t][e][a] = this.getDefaultCartonMateril()), this.materialInfos[t][e][a]
		}
		static getDefaultCartonMateril() {
			return {
				albedoColor: [1, 1, 1, 1],
				albedoIdentity: .5,
				shadowRange: 0,
				shadowIntensity: 0,
				shadowColor: [0, 0, 0, 0],
				shadowBoundary: 0,
				specularRange: 0,
				specularIntensity: 0,
				specularColor: [1, 1, 1, 1],
				outlineWidth: 0,
				outlineLightness: 1,
				outlineColor: [0, 0, 0, 0],
				secondShadowRange: 0,
				secondShadowIntensity: 1,
				secondShadowBoundary: 0,
				secondShadowColor: [1, 1, 1, 1],
				EdgeHightRange: 0,
				EdgeHightBoundary: 0,
				EdgeHightColor: [1, 1, 1, 1],
				EdgeHightIntensity: 1,
				alphaTestValue: .5,
				renderMode: CartoonMaterial.RENDERMODE_OPAQUE
			}
		}
		static setCartonShader(t, e, a = !0) {
			if (!t) return [];
			let i = [];
			for (let s = 0; s < t.numChildren; s++) {
				let n = t.getChildAt(s),
					o = n.skinnedMeshRenderer || n.meshRenderer;
				if (o) {
					let t = this.__setCartonMaterial(o, e, n.name, a);
					i = i.concat(t)
				}
			}
			return i
		}
		static __setCartonMaterial(t, e, a, i) {
			let s = [],
				n = t.sharedMaterials;
			for (let t = n.length - 1; t >= 0; t--) {
				const o = n[t];
				let r = mgrMaterial.getMaterial(e, a, t, i);
				r ? o ? s[t] = this.createCartoonShader(r, o) : console.error("__setCartonMaterial err") : s[t] = o
			}
			return t.sharedMaterials = s, s
		}
		static createCartoonShader(t, e) {
			let a = new CartoonMaterial;
			return a.name = e.name, a.albedoTexture = e.albedoTexture, Tools.forEachMap(t, function(t, e) {
				e instanceof Array ? a[t] = new Laya.Vector4(e[0], e[1], e[2], 1) : a[t] = e
			}), a
		}
		static setDynamicBone(t, e) {
			this.dynamicBoneInfos[t] || (this.dynamicBoneInfos[t] = []);
			for (let a = 0; a < this.dynamicBoneInfos[t].length; a++) {
				if (this.dynamicBoneInfos[t][a].route == e.route) return void(this.dynamicBoneInfos[t][a] = e)
			}
			this.dynamicBoneInfos[t].push(e)
		}
		static getDynamicBone(t, e) {
			this.dynamicBoneInfos[t] || (this.dynamicBoneInfos[t] = []);
			for (let a = 0; a < this.dynamicBoneInfos[t].length; a++) {
				const i = this.dynamicBoneInfos[t][a];
				if (i.route == e) return i
			}
			return this.dynamicBoneInfos[t].push({
				route: e,
				cr: .05,
				df: .3,
				dl: .01,
				c1s: .05,
				c2s: .05,
				c3s: .05,
				c4s: .05,
				c5s: .05,
				c6s: .05,
				gravity: .02
			}), this.dynamicBoneInfos[t][this.dynamicBoneInfos[t].length - 1]
		}
		static hasDynamicBone(t, e) {
			if (!this.dynamicBoneInfos[t]) return !1;
			for (let a = 0; a < this.dynamicBoneInfos[t].length; a++) {
				if (this.dynamicBoneInfos[t][a].route == e) return !0
			}
			return !1
		}
		static removeDynamicBone(t, e) {
			this.dynamicBoneInfos[t] || (this.dynamicBoneInfos[t] = []);
			for (let a = 0; a < this.dynamicBoneInfos[t].length; a++) {
				if (this.dynamicBoneInfos[t][a].route == e) return void this.dynamicBoneInfos[t].splice(a, 1)
			}
		}
		static useDynamicBone(t, e) {
			let a = this.dynamicBoneInfos[e];
			if (!a) return !1;
			let i = !1;
			for (let e = 0; e < a.length; e++) {
				const s = a[e];
				let n = UiHelper.getChild(t, s.route);
				if (!n) continue;
				let o = n.getComponent(BoneManager);
				o || ((o = n.addComponent(BoneManager)).onStarted = (() => {
					o.setDisplacementFactor(s.df), o.setMaxDisplacement(s.dl), o.setCollider1Size(s.c1s), o.setCollider2Size(s.c2s), o.setCollider3Size(s.c3s), o.setCollider4Size(s.c4s), o.setCollider5Size(s.c5s), o.setCollider6Size(s.c6s), o.setColliderHair(0), o.setGravity({
						x: 0,
						y: -s.gravity,
						z: 0
					})
				}), i = !0)
			}
			return i
		}
		static unuseDynamicBone(t, e) {
			let a = this.dynamicBoneInfos[e];
			if (!a) return !1;
			for (let e = 0; e < a.length; e++) {
				const i = a[e];
				let s = UiHelper.getChild(t, i.route);
				if (!s) continue;
				let n = s.getComponent(BoneManager);
				n && n.destroy()
			}
		}
		static setDrawShader(t) {
			if (!t) return [];
			for (var e = UiHelper.findAllSkinnedMeshRenderers(t), a = [], i = 0; i < e.length; i++) a = a.concat(this.__setDrawMaterial(e[i]));
			if (a.length > 0) return a;
			e = UiHelper.findAllMeshRenderers(t);
			for (i = 0; i < e.length; i++) a = a.concat(this.__setDrawMaterial(e[i]));
			return a
		}
		static __setDrawMaterial(t) {
			let e = [],
				a = t.sharedMaterials;
			for (let t = a.length - 1; t >= 0; t--) {
				const i = a[t];
				let s = this.createPaintShader(i);
				e[t] = s
			}
			return t.sharedMaterials = e, e
		}
		static createPaintShader(t) {
			let e = new PaintMaterialTest;
			return e.name = t.name, e.albedoTexture = t.albedoTexture, e.albedoColor = t.albedoColor, e.depthWrite = t.depthWrite, e.depthTest = t.depthTest, e.cull = t.cull, e.blend = t.blend, e.blendSrc = t.blendSrc, e.blendDst = t.blendDst, e.renderQueue = t.renderQueue, e.alphaTest = t.alphaTest, e.alphaTestValue = t.alphaTestValue, e.maskTexture = this.EMPTY_TEX2D, e.setScreenSize(_G.canvasWidth, _G.canvasHeight), e.setToNormal(), e
		}
		static precompileshader(t) {
			mgrRes.loadRes("res/cfg/shaderCompile.txt", Laya.Loader.TEXT, e => {
				if (e) {
					let a, i = Tools.decompressFromBase64(e);
					if (!i) return void(t && t());
					try {
						a = JSON.parse(i)
					} catch (e) {
						return Logger.catchError("precompileshader:", e), void(t && t())
					}
					if (!a || 0 == a.length) return void(t && t());
					const s = 5;
					! function compile() {
						for (let e = 0; e < s; e++) {
							let e = a.pop();
							if (!e) return void(t && t());
							Laya.Shader3D.compileShaderByDefineNames(e.shaderName, e.subShaderIndex, e.passIndex, e.defineNames)
						}
						Laya.timer.frameOnce(1, this, compile)
					}()
				}
			})
		}
		static enableShaderDebugMode() {
			Laya.Shader3D.debugMode = !0
		}
		static disableShaderDebugMode() {
			Laya.Shader3D.debugMode = !1
		}
		static recordShaderCompileInfo() {
			if (GameRemoteRouter.instance) {
				_G.sendMsg(BASE_MSG.UI_SHOW_TIP, "shader 预编译信息存档!");
				let t = [];
				for (let e = 0; e < Laya.Shader3D.debugShaderVariantCollection.variantCount; e++) {
					let a = Laya.Shader3D.debugShaderVariantCollection.getByIndex(e),
						i = a.shader.name,
						s = {};
					s.shaderName = i, s.defineNames = a.defineNames, s.passIndex = a.passIndex, s.subShaderIndex = a.subShaderIndex, t.push(s)
				}
				console.log("shader存档数据!"), console.log(t);
				let e = JSON.stringify(t),
					a = Tools.compressToBase64(e);
				GameRemoteRouter.instance.sendMsgToServer({
					route: "keepInFile",
					data: {
						filePath: "res/cfg/shaderCompile.txt",
						data: a
					}
				})
			} else _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "未链接存档服务器,尝试重新连接!")
		}
	}
	mgrMaterial.materialInfos = {}, mgrMaterial.lightRotation = [], mgrMaterial.editorConfig = {
		camera: {}
	};
	class BoneBinder {
		constructor() {
			this.bBind = !1
		}
		rebindBone(t, e, a) {
			if (!this.bBind) {
				this.newBuildBones = [], this.boneMap = Object.create(null), this.meshRenders = a, this.buildBone(t, e);
				for (let t = 0; t < a.length; t++) this.syncBones(a[t]);
				this.bBind = !0
			}
		}
		unbindBone() {
			if (this.bBind) {
				this.bBind = !1;
				for (let t = this.meshRenders.length - 1; t >= 0; t--) this.meshRenders[t]._bones = this.meshRenders[t]._origin_bones;
				for (let t = this.newBuildBones.length - 1; t >= 0; t--) this.newBuildBones[t].destroy();
				this.newBuildBones = null, this.boneMap = null
			}
		}
		buildBone(t, e) {
			let a = this.boneMap;
			for (var i = 0; i < e.numChildren; i++) {
				var s = e.getChildAt(i),
					n = t.getChildByName(s.name);
				let o = !1;
				n || (s.particleSystem ? (BoneBinder.particleSystemSeriverNumber++, (n = Laya.ShuriKenParticle3D.instantiate(s)).name = `_auto_create_particle${BoneBinder.particleSystemSeriverNumber}`, s.particleSystem.stop(), o = !0) : n = new Laya.Sprite3D(s.name), t.addChild(n), n.transform.localPosition = s.transform.localPosition, n.transform.localRotation = s.transform.localRotation, this.newBuildBones.push(n)), a[n.name] ? console.warn("骨骼重名.", n.name) : a[n.name] = n, o || this.buildBone(n, s)
			}
		}
		syncBones(t) {
			let e = t.bones,
				a = [];
			for (var i = 0; i < e.length; i++) {
				var s = e[i];
				this.boneMap[s.name] ? a.push(this.boneMap[s.name]) : console.error("找不到骨骼:", s.name)
			}
			e.length == a.length ? (t._bones = a, t._origin_bones = e) : console.error("骨骼数不一致.")
		}
		useDyBone(t, e) {
			this.dyModel = t, this.modelId = e, mgrMaterial.useDynamicBone(t, e)
		}
		unuseDyBone() {
			this.dyModel && (mgrMaterial.unuseDynamicBone(this.dyModel, this.modelId), this.dyModel = null, this.modelId = null)
		}
		hasDyBone() {
			return null != this.dyModel
		}
	}
	let bone_index_map;
	BoneBinder.particleSystemSeriverNumber = 0;
	let bone_count = 0;
	class GModel extends Model {
		constructor() {
			super(...arguments), this._bInit = !1
		}
		get sharedMaterial() {
			return this._bInit ? this.sharedMaterials[0] : null
		}
		dispose() {
			super.dispose()
		}
		unuse() {
			this.boneBinder && (this.boneBinder.unbindBone(), this.boneBinder.unuseDyBone(), this.boneBinder = null), super.unuse()
		}
		initBody() {
			if (this.callable) {
				if (this._bInit) return;
				if (!bone_index_map) {
					let t = Object.create(null);
					! function setChildIndex(e) {
						for (let a = 0; a < e.numChildren; a++) {
							let i = e.getChildAt(a);
							null != t[i.name] && console.error("骨骼重复!", i.name), t[i.name] = bone_count++, setChildIndex(i)
						}
					}(this.getChildAt(0)), bone_index_map = t
				}
				this.initPart(!0)
			} else this.safeCall(this.initBody)
		}
		initPart(t = !1, e) {
			if (this.callable) {
				if (this.initBone(t, e), this._bInit) return;
				return this._bInit = !0, void this.initCartoon()
			}
			this.safeCall(this.initPart, t)
		}
		initFace() {
			if (!this.callable) return this.safeCall(this.initFace);
			if (this._bInit) return;
			this._bInit = !0;
			let t = this.getChild("ty_lian00");
			this.skinnedMeshSprite = t;
			let e = t.skinnedMeshRenderer,
				a = e.sharedMaterials,
				i = [];
			for (let e = 0; e <= 10; e++)
				if (8 == e) {
					let s = mgrMaterial.getMaterial(this.modelId, t.name, e, !0);
					i[e] = mgrMaterial.createCartoonShader(s, a[e])
				} else i[e] = mgrMaterial.createPaintShader(a[e]);
			e.sharedMaterials = i, this.sharedMaterials = i
		}
		initPaint() {
			if (!this.callable) return this.safeCall(this.initPaint);
			this._bInit || (this._bInit = !0, this.skinnedMeshSprite = UiHelper.findSkinnedMeshSprite(this.resNode, !0), this.sharedMaterials = mgrMaterial.setDrawShader(this.resNode))
		}
		initCartoon() {
			this.skinnedMeshSprite = UiHelper.findSkinnedMeshSprite(this.resNode, !0), this.sharedMaterials = mgrMaterial.setCartonShader(this.resNode, this.modelId), mgrMaterial.useDynamicBone(this.resNode, this.modelId)
		}
		initBone(t = !1, e) {
			if (t && e) {
				if (this.boneBinder) return;
				let t = e.resNode.getChildByName("Bip001"),
					a = this.resNode.getChildByName("Bip001"),
					i = UiHelper.findAllSkinnedMeshRenderers(this.resNode);
				i.length && (this.boneBinder = new BoneBinder, this.boneBinder.rebindBone(t, a, i), this.boneBinder.useDyBone(e.resNode, this.modelId))
			}
		}
		_initBoneTransform(t, e) {
			let a = bone_index_map[t.name];
			null != a && (e[a] = t.transform);
			for (let a = 0; a < t.numChildren; a++) this._initBoneTransform(t.getChildAt(a), e)
		}
		debug_reset_shader() {
			this.callable ? mgrMaterial.setCartonShader(this.resNode, this.modelId, !1) : this.safeCall(this.debug_reset_shader)
		}
		static syncNodeA2NodeB(t, e, a) {
			if (t.name != e.name) {
				if (!a.test(t.name)) {
					let a = t.clone();
					e.parent.addChild(a)
				}
			} else
				for (let i = 0; i < t.numChildren; i++) {
					let s = t.getChildAt(i),
						n = e.getChildByName(s.name);
					n ? this.syncNodeA2NodeB(s, n, a) : a.test(s.name) || (n = s.clone(), e.addChild(n))
				}
		}
		addToChild(t, e) {
			if (this.callable) {
				let a = UiHelper.findChild(this.resNode, t);
				a ? e instanceof Model ? e.setParent(a) : a.addChild(e) : (Logger.error("找不到子节点：", t), e instanceof Model ? e.setParent(this.resNode) : this.addChild(e))
			} else this.safeCall(this.addToChild, t, e)
		}
		get node() {
			return this.resNode
		}
		get renderer() {
			for (let t = 0; t < this.resNode.numChildren; t++) {
				let e = this.resNode.getChildAt(t),
					a = e.skinnedMeshRenderer || e.meshRenderer;
				if (a) return a
			}
		}
	}
	GModel.debugShader = !0;
	let KEY_SSZ_DATA = "KEY_SSZ_DATA";
	class mgrSzz extends _mgrBase {
		static onload() {
			if (this.szzData = FileRecord.getData(KEY_SSZ_DATA), this.szzData) {
				var t = (Timer.time - this.szzData.lastTime) / 3600,
					e = Math.floor(5 * t + Mathf.random(10, 30));
				this.szzData.renqi += e, this.saveData()
			} else this.szzData = {
				like: db.game_cnf.like_lottery_count - 1,
				renqi: 15,
				awardIndex: 0,
				lastTime: Timer.time,
				parts: null
			}, this.saveData();
			let a = db.get_item_db_map(),
				i = this._allParts;
			Tools.forEachMap(a, function(t, e) {
				2 == e.type && 1 == e.subType && e.gid <= 14 && (i[e.gid] || (i[e.gid] = []), i[e.gid].push(t))
			}), this._allParts = i
		}
		static start() {
			mgrRank.commit(this.szzData.renqi, 2)
		}
		static saveData() {
			FileRecord.setData(KEY_SSZ_DATA, this.szzData)
		}
		static getNextSzz(t) {
			return {
				parts: this.getOtherParts(t),
				renqi: 0,
				name: mgrRank.getRandomName()
			}
		}
		static get awardIndex() {
			return this.szzData.awardIndex
		}
		static get likeCount() {
			return this.szzData.like
		}
		static getMyParts() {
			return this.szzData.parts
		}
		static setMyParts(t) {
			this.szzData.parts = t, this.saveData(), _G.sendMsg("SZZ_PARTS_CHANGE")
		}
		static getOtherParts(t, e = 0) {
			let a = [];
			for (let t = 0; t <= 14; t++) this._getRandomPart(t, 12 != t, a);
			return t && e < 15 && this._equalsParts(t, a) ? this.getOtherParts(t, e + 1) : a = mgrPart.checkDefaultParts(a)
		}
		static _getRandomPart(t, e, a) {
			let i = this._loadedParts[t];
			if (i)
				if (e) {
					let t = i[Mathf.random(0, i.length)];
					t && a.push(t)
				} else a.push(i[Mathf.random(0, i.length - 1)])
		}
		static _equalsParts(t, e) {
			if (t.length == e.length)
				for (let a = t.length - 1; a >= 0; a--)
					if (t[a] != e[a]) return !1;
			return !1
		}
		static setLoadedParts(t) {
			for (const i in t) {
				var e = db.get_item_db(t[i]);
				if (2 == e.type) {
					var a = this._loadedParts[e.gid];
					if (a || (a = [], this._loadedParts[e.gid] = a), a.indexOf(e.id) < 0) {
						a.push(e.id);
						let t = this._allParts[e.gid];
						if (t) {
							let a = t.indexOf(e.id);
							a >= 0 && t.splice(a, 1)
						}
					}
				}
			}
		}
		static randomLoad(t) {
			let e = this.getRandomUnloadedPart();
			if (e) {
				let s = db.get_item_db(e).viewList,
					n = new ResLoader;
				for (var a = 0; a < s.length; a++) {
					var i = db.get_model_db(s[a]);
					0 == i.type ? n.add(i.resPath, RES_TYPE.PREFAB3D) : n.add(i.resPath, RES_TYPE.TEXTURE2D)
				}
				n.setLoadingCallback(() => {
					this.setLoadedParts([e]), t && t()
				}), n.loadAll()
			} else t && t()
		}
		static getRandomUnloadedPart(t = 0) {
			if (t > 10) return null;
			if (this._allParts.length > 0) {
				let a = Mathf.arrCircleRandom(this.part_load_weight);
				if (a < 0) return;
				var e = this._allParts[a];
				return e && e.length > 0 ? e[Mathf.random(0, e.length - 1)] : (this.part_load_weight[a] = 0, this.getRandomUnloadedPart(t + 1))
			}
			return null
		}
		static addLike() {
			this.szzData.like = Math.min(db.game_cnf.like_lottery_count, this.szzData.like + 1), BaseFacade.mGoal.commit(ACTION_ID.ADD_LIKE), this.likedCount++, this.saveData()
		}
		static canLottery(t = !1) {
			return !!t || this.likeCount >= db.game_cnf.like_lottery_count
		}
		static getAwardItems() {
			let t = BaseFacade.mDrop.getAllDropItems(db.game_cnf.szz_lottery_drop_id),
				e = this.lottery_each_count,
				a = this.szzData.awardIndex;
			return a = this.szzData.awardIndex < t.length ? (a / e | 0) * e : ((t.length - e) / e | 0) * e, t.slice(a, a + this.lottery_each_count)
		}
		static makeLottery(t = !1) {
			if (t || this.canLottery(t)) {
				let t, e = BaseFacade.mDrop.getAllDropItems(db.game_cnf.szz_lottery_drop_id),
					a = this.lottery_each_count;
				if (this.szzData.awardIndex < e.length)(t = e[this.szzData.awardIndex]).index = this.szzData.awardIndex % a;
				else {
					let i = this.szzData.awardIndex % a;
					(t = e[i = ((e.length - a) / a | 0) * a + i]).index = i
				}
				return BaseFacade.mGoal.commit(ACTION_ID.LOTTERY), this.szzData.awardIndex++, this.szzData.like = 0, this.saveData(), t
			}
		}
	}
	mgrSzz._allParts = [], mgrSzz.likedCount = 0, mgrSzz._loadedParts = Object.create(null), mgrSzz.part_load_weight = [1, 1, 1, 1, 1, 2, 3, 3, 5, 2, 1, 1, 20, 0, 0], mgrSzz.lottery_each_count = 8;
	class GView {
		constructor() {
			this.isClear = !1
		}
		create(t, e, a) {
			this.partType = t, this.viewId = e, this.viewDb = db.get_model_db(e), this.avatar = a, this.isClear = !1, 0 == this.viewDb.type ? this.initSprite3D() : this.initTexture2D()
		}
		clear() {
			this.viewId = null, this.viewDb = null, this.avatar = null, this.model && (_G.poolManager.put(this.model), this.model = null), this.clearMaterialMask(), this.material = null, this.depModel = null, this.isClear = !0
		}
		get isLoaded() {
			if (this.model) return this.model.isLoaded
		}
		get isModelLoaded() {
			return this.model && this.model.isLoaded
		}
		initSprite3D() {
			if (this.model = _G.poolManager.get(GModel, this.viewId), this.model) {
				let t = this.viewDb.attachNode,
					e = db.get_part_type_db(this.partType);
				t || (t = e.attachNode), t ? (this.avatar.baseBody.addToChild(t, this.model), this.partType >= 14 ? this.model.initPaint() : this.model.initPart()) : (this.model.setParent(this.avatar), this.model.initPart(e.bBoneTransform, this.avatar.baseBody), this.model.initAnimator(!1))
			}
		}
		get boneTransforms() {
			return this.model && this.model.boneTransforms
		}
		initTexture2D() {
			if (this.viewDb.modelId == db.MODEL_DB_ID.face) this.material = this.avatar.baseFace.sharedMaterials[this.viewDb.matIndex], this.depModel = this.avatar.baseFace;
			else {
				let t = this.avatar.getView(this.viewDb.modelId);
				if (!t) return void console.error("找不到依赖的模型", this.viewId, this.viewDb.modelId);
				this.material = t.model.sharedMaterials[this.viewDb.matIndex], this.depModel = t.model
			}
			mgrRes.loadRes(this.viewDb.resPath, RES_TYPE.TEXTURE2D, t => {
				!this.isClear && this.material && (this.material.albedoTexture = t)
			})
		}
		clearMaterialMask() {
			this.material && (this.material.newTexture = null, this.material.transition = 0, this.material.setToNormal())
		}
		changeView() {
			this.material && (this.viewId = this.newViewId, this.viewDb = db.get_model_db(this.newViewId), this.newViewId = null, this.material.albedoTexture = this.material.newTexture, this.material.maskTexture = mgrMaterial.EMPTY_TEX2D, this.material.transition = 0)
		}
	}
	class AnimatorFixedPlayer extends Laya.EventDispatcher {
		constructor(t) {
			super(), this.destroyed = !1, this.duration = 0, this.modelsInfo = [], this.callbackList = [], this.setDt(t)
		}
		dispose() {
			this.destroyed = !0, this.clear()
		}
		clear() {
			return this.modelsInfo.length = 0, this.duration = 0, this.offAll(), this.clearTimeCallbacks(), Laya.timer.clearAll(this), this
		}
		addModelAnim(t, e) {
			return this.modelsInfo.push([t, e, t.getAnimator().speed]), t.addAnimatorStateById(e), this.setDuration(Math.max(this.duration, t.getAnimationDuration(e))), this
		}
		setDuration(t) {
			return this.duration = t, t || console.error("AnimatorFixedPlayer duration <= 0."), this
		}
		setDt(t) {
			return this.dt = t, this
		}
		addTimeCallback(t, e) {
			return this.callbackList.push([t, e]), this
		}
		clearTimeCallbacks() {
			this.callbackList.length = 0
		}
		play(t = !1) {
			this.loop = t, this.curTime = 0, this.curCallbackIndex = 0, this.callbackList.length && this.callbackList.sort(function(t, e) {
				return t[0] - e[0]
			}), this.simulate(0), Laya.timer.frameLoop(1, this, this.update)
		}
		stop() {
			for (var t = this.modelsInfo.length - 1; t >= 0; t--) {
				var e = this.modelsInfo[t];
				e[0].getAnimator().speed = e[2]
			}
			Laya.timer.clearAll(this)
		}
		update() {
			if (this.destroyed) return;
			let t = null == this.dt ? Laya.timer.delta / 1e3 : this.dt;
			this.curTime += t;
			let e = this.curTime / this.duration;
			this.simulate(e), e >= 1 && (this.loop ? (this.curTime -= this.duration, this.curCallbackIndex = 0) : (this.stop(), this.event(Laya.Event.COMPLETE))), this.callbackList.length && this.curCallbackIndex < this.callbackList.length && e >= this.callbackList[this.curCallbackIndex][0] && this.callbackList[this.curCallbackIndex++][1]()
		}
		simulate(t) {
			for (var e = this.modelsInfo.length - 1; e >= 0; e--) {
				var a = this.modelsInfo[e],
					i = a[0].getAnimator();
				i.speed = 1e-6, i.play(a[1], 0, t)
			}
		}
	}
	var CLASS_ROLE_STATE;
	! function(t) {
		t[t.LOCKED = 0] = "LOCKED", t[t.FREE = 1] = "FREE", t[t.WAIT = 2] = "WAIT", t[t.STUDY = 3] = "STUDY", t[t.STAND = 4] = "STAND"
	}(CLASS_ROLE_STATE || (CLASS_ROLE_STATE = {}));
	const STUDENT_READY_TIME = 300;
	class mgrClassRoom extends _mgrBase {
		static onload() {
			if (this.usedNewRole = FileRecord.getData("KEY_CLASS_ROOM_USED_NEW_ROLE") || {}, this.studentOrder = FileRecord.getData("KEY_CLASS_ROOM_STUDENT_ORDER") || 0, this.standDatas = FileRecord.getData("KEY_CLASS_ROOM_STAND_DATA") || [], this.roleLevelData = FileRecord.getData("KEY_CLASS_ROOM_ROLE_LEVEL_DATA") || {}, this.seatDatas = FileRecord.getData("KEY_CLASS_ROOM_SEATS_DATA"), !this.seatDatas) {
				this.seatDatas = {};
				for (let t = 0; t < 3; t++) this.randomStudent(t, !0)
			}
			let t = !1,
				e = db.get_class_room_role_db_map();
			for (const a in e) {
				let i = e[a];
				i && !this.roleLevelData[i.id] && (this.roleLevelData[i.id] = {
					level: 0,
					flowerCount: 0
				}, t = !0)
			}
			t && FileRecord.setData("KEY_CLASS_ROOM_ROLE_LEVEL_DATA", this.roleLevelData), Timer.callLoop(1, this.onTimer.bind(this))
		}
		static saveData() {
			FileRecord.setData("KEY_CLASS_ROOM_USED_NEW_ROLE", this.usedNewRole), FileRecord.setData("KEY_CLASS_ROOM_STUDENT_ORDER", this.studentOrder), FileRecord.setData("KEY_CLASS_ROOM_STAND_DATA", this.standDatas), FileRecord.setData("KEY_CLASS_ROOM_SEATS_DATA", this.seatDatas), FileRecord.setData("KEY_CLASS_ROOM_ROLE_LEVEL_DATA", this.roleLevelData)
		}
		static onTimer() {
			let t = mgrClassRoom.getEmptySeatIndex();
			if (null == t) return;
			let e = this.seatDatas;
			for (let t = 0; t < 3; t++) {
				let a = e[t];
				if (a && a.startTime > Timer.time) return
			}
			mgrClassRoom.randomStudent(t)
		}
		static getEmptySeatIndex() {
			for (let t = 0; t < 3; t++)
				if (!this.seatDatas[t]) return t;
			return null
		}
		static randomStudent(t, e = !1) {
			let a = db.get_class_room_seat_db(t);
			if (!a) return;
			let i = a.roleIds,
				s = {},
				n = this.seatDatas;
			for (let t in n) {
				let e = n[t];
				e && null != e.roleId && (s[e.roleId] = !0)
			}
			let o = [];
			for (let t = 0; t < i.length; t++) {
				let e = db.get_class_room_role_db(i[t]);
				if (e) {
					let a = !0;
					if (e.unlockQuestId)
						if (a = BaseFacade.mQuest.isCommitable(e.unlockQuestId)) {
							if (!this.usedNewRole[i[t]]) {
								(o = []).push(i[t]), this.usedNewRole[i[t]] = !0, console.log("优先使用新解锁的角色", i[t]);
								break
							}
						} else;
					!s[i[t]] && a && o.push(i[t])
				}
			}
			if (o.length <= 0) return;
			console.log("可用的角色", o);
			let r = o[Mathf.random(o.length) - 1];
			this.seatDatas[t] = {
				roleId: r,
				order: this.studentOrder,
				startTime: e ? Timer.time : Timer.time + STUDENT_READY_TIME
			};
			for (let t = 0; t < this.standDatas.length; t++) {
				let e = this.standDatas[t];
				e && e.roleId == r && (this.standDatas.splice(t, 1), t -= 1)
			}
			this.studentOrder++, this.saveData()
		}
		static summonStudent(t) {
			let e = this.seatDatas;
			for (let a = 0; a < 3; a++) {
				let i = e[a];
				if (i && i.roleId == t) return void(i.startTime > Timer.time ? i.startTime = Timer.time : console.log("教室中已有召唤角色"))
			}
			let a = null,
				i = null,
				s = null,
				n = -1;
			for (let e = 0; e < 3; e++) {
				if (db.get_class_room_seat_db(e).roleIds.indexOf(t) >= 0) {
					let t = this.seatDatas[e];
					if (!t) {
						a = e;
						break
					}(n < 0 || t.order < n) && (n = t.order, i = e), t.startTime > Timer.time && (s = e)
				}
			}
			null != a ? this.seatDatas[a] = {
				roleId: t,
				order: this.studentOrder,
				startTime: Timer.time
			} : null != s ? this.seatDatas[s] = {
				roleId: t,
				order: this.studentOrder,
				startTime: Timer.time
			} : null != i && (this.seatDatas[i] = {
				roleId: t,
				order: this.studentOrder,
				startTime: Timer.time
			}, _G.sendMsg("STUDENT_SEAT_DATA_REPLACE", {
				seatIdx: i
			}));
			for (let e = 0; e < this.standDatas.length; e++) {
				let a = this.standDatas[e];
				a && a.roleId == t && (this.standDatas.splice(e, 1), e -= 1)
			}
			this.studentOrder++, this.saveData()
		}
		static getOperateSeatIdx() {
			let t = null;
			for (let e in this.seatDatas) {
				let a = this.seatDatas[e];
				a && a.startTime <= Timer.time && (null == t || this.seatDatas[t].order > a.order) && (t = parseInt(e))
			}
			return t
		}
		static getSeatDatas() {
			return this.seatDatas
		}
		static setStudentStand(t) {
			let e = this.seatDatas[t];
			if (e) {
				for (let t = 0; t < this.standDatas.length; t++) this.standDatas[t] || (this.standDatas.splice(t, 1), t -= 1);
				this.standDatas.push(e), this.standDatas.length > 3 && this.standDatas.splice(0, 1), this.seatDatas[t] = null, this.saveData()
			} else console.warn("该座位上没有数据 seatIdx = ", t)
		}
		static clearStandData(t) {
			this.standDatas.splice(t, 1), this.saveData()
		}
		static hasStandPos() {
			let t = this.standDatas;
			for (let e = 0; e < 3; e++) {
				if (!t[e]) return !0
			}
			return !1
		}
		static setStandLeave(t) {
			this.standDatas[t] = null, this.saveData()
		}
		static getStandDatas() {
			return this.standDatas
		}
		static setStudentLeave(t) {
			this.seatDatas[t] ? (this.seatDatas[t] = null, this.saveData()) : console.warn("该座位上没有数据 seatIdx = ", t)
		}
		static hasStudentReady() {
			let t = this.seatDatas;
			for (let e = 0; e < 3; e++) {
				let a = t[e];
				if (a && a.startTime > Timer.time) return !0
			}
			return !1
		}
		static setStudentFinishReady() {
			let t = this.seatDatas;
			for (let e = 0; e < 3; e++) {
				let a = t[e];
				a && a.startTime > Timer.time && (a.startTime = Timer.time)
			}
		}
		static calcRating(t) {
			let e = db.get_student_stage_score_mapping_db_arr();
			for (let a = e.length - 1; a >= 0; a--) {
				let i = e[a];
				if (i.score <= t) return i.rating
			}
			return e[0].rating
		}
		static getRoleState(t) {
			let e = db.get_class_room_role_db(t);
			if (e && e.unlockQuestId) {
				if (!BaseFacade.mQuest.isCommitable(e.unlockQuestId)) return CLASS_ROLE_STATE.LOCKED
			}
			let a = this.seatDatas;
			for (let e in a) {
				let i = a[e];
				if (i && i.roleId == t) return i.startTime > Timer.time ? CLASS_ROLE_STATE.WAIT : CLASS_ROLE_STATE.STUDY
			}
			let i = this.standDatas;
			for (let e in i) {
				let a = i[e];
				if (a && a.roleId == t) return CLASS_ROLE_STATE.STAND
			}
			return CLASS_ROLE_STATE.FREE
		}
		static getRoleLevel(t) {
			return this.roleLevelData[t].level || 0
		}
		static upgradeLevel(t) {
			let e = this.getRoleLevel(t);
			e < 4 && GameStatistics.statisCommonEvent(2562 + e, t), this.roleLevelData[t].level = Math.min(e + 1, 4), _G.sendMsg("CLASS_ROLE_LEVEL_CHANGE"), this.saveData()
		}
		static getRoleFlowerCount(t) {
			return this.roleLevelData[t].flowerCount || 0
		}
		static addRoleFlowerCount(t) {
			this.roleLevelData[t].flowerCount = Math.min(this.getRoleFlowerCount(t) + 1, 5), this.saveData()
		}
		static getXiuBiaoModelData() {
			let t = null,
				e = db.get_class_room_role_db_map();
			for (const a in e) {
				let i = e[a];
				if (i && i.contractIdx == mgrGame.contractIndex) {
					t = i.id;
					break
				}
			}
			if (null == t) return console.log("当前角色没有对应的课堂角色，不佩戴袖标！！！"), {
				bYouXiu: null,
				wxModelId: null,
				yxModelId: null
			};
			let a = mgrPart.partsWear,
				i = {};
			for (const t in a) a[t] && (i[a[t]] = !0);
			console.log("已穿戴的部件", i);
			let s = this.getRoleLevel(t),
				n = db.get_class_room_level_db(s);
			if (!n) return console.warn("课堂角色等级错误 roleId = ", t, "level = ", s), {
				bYouXiu: null,
				wxModelId: null,
				yxModelId: null
			};
			let o = !1,
				r = n.yxPartIds;
			for (let t = 0; t < r.length; t++) {
				if (i[r[t]]) {
					o = !0;
					break
				}
			}
			return {
				bYouXiu: o,
				wxModelId: n.wxModelId,
				yxModelId: n.yxModelId
			}
		}
		static getJiangZhuangModelId() {
			let t = null,
				e = db.get_class_room_role_db_map();
			for (const a in e) {
				let i = e[a];
				if (i && i.contractIdx == mgrGame.contractIndex) {
					t = i.id;
					break
				}
			}
			if (null == t) return console.log("当前角色没有对应的课堂角色，不显示奖状！！！"), null;
			let a = this.getRoleLevel(t),
				i = db.get_class_room_level_db(a);
			if (i) return i.jzModelId;
			console.warn("课堂角色等级错误 roleId = ", t, "level = ", a)
		}
	}
	mgrClassRoom.seatDatas = {}, mgrClassRoom.standDatas = [], mgrClassRoom.studentOrder = 0, mgrClassRoom.usedNewRole = {}, mgrClassRoom.roleLevelData = {};
	class RoleAvatar extends Laya.Sprite3D {
		constructor(t, e) {
			super(), this.fingernails = {}, this.isInit = !1, this._bHuDongAnim = !1, this._hudongIdx = 0, this._loop = !1, this._bShowXiuBiao = !1, this.viewMap = {}, this.init(t, e)
		}
		destroy() {
			this.clearJingZi(), this.clearHuDie();
			for (const t in this.viewMap) {
				let e = this.viewMap[t];
				if (e) {
					let t = e.views;
					for (let e = 0; e < t.length; e++) {
						let a = t[e];
						a.clear(), _G.pool.put(a)
					}
				}
			}
			this.viewMap = null;
			for (let t in this.fingernails) this.fingernails[t] && _G.poolManager.put(this.fingernails[t]);
			this.fingernails = [], this.baseBody && (_G.poolManager.put(this.baseBody), this.baseBody.off("Enter", this, this._onBodyAnimEnter), this.baseBody.off("Exit", this, this._onBodyAnimExit), this.baseBody = null), this.baseFace && (_G.poolManager.put(this.baseFace), this.baseFace.off("Exit", this, this._onFaceAnimExit), this.baseFace = null), this.xiubiao_wuxiu && (_G.poolManager.put(this.xiubiao_wuxiu), this.xiubiao_wuxiu = null), this.xiubiao_xiuzi && (_G.poolManager.put(this.xiubiao_xiuzi), this.xiubiao_xiuzi = null), this._resLoader && this._resLoader.dispose(), super.destroy(!1)
		}
		onDisable() {
			this._bHuDongAnim = !1
		}
		init(t, e) {
			let a = new ResLoader;
			this._resLoader = a, t = mgrPart.checkDefaultParts(t || mgrPart.partsWear), mgrPart.addPartResList(t, a, !0), a.setLoadingCallback(a => {
				this.destroyed || a && this.loadParts(t, (t, a) => {
					this.destroyed || (this.baseBody = _G.poolManager.get(GModel, db.MODEL_DB_ID.body), this.baseBody.initBody(), this.baseBody.setParent(this), this.baseBody.on("Enter", this, this._onBodyAnimEnter), this.baseBody.on("Exit", this, this._onBodyAnimExit), this.baseBody.getAnimator().getControllerLayer(0).playOnWake = !1, this.baseFace = _G.poolManager.get(GModel, db.MODEL_DB_ID.face), this.baseBody.addToChild("Guadian_toufa", this.baseFace), this.baseFace.on("Exit", this, this._onFaceAnimExit), this.baseFace.getAnimator().getControllerLayer(0).playOnWake = !1, this.baseFace.initFace(), this._setPartsOnloaded(t, !1), this.isInit = !0, this._animationId && (this.playAnimation(this._animationId, this._loop), this._animationId = null), this._bShowXiuBiao && this.tryShowXiuBiao(), this.refreshFingernails(), e && e(), this.event(Laya.Event.LOADED))
				})
			}), a.loadAll()
		}
		removePart(t) {
			let e = db.get_item_db(t);
			e && this.removePartType(e.gid)
		}
		removePartType(t) {
			let e = this.viewMap[t];
			if (e) {
				let a = e.views;
				for (let t = 0; t < a.length; t++) {
					let e = a[t];
					e.clear(), _G.pool.put(e), Logger.debug(`移除部件: ${e.viewId}`)
				}
				delete this.viewMap[t]
			}
		}
		clearAll(t) {
			let e = this.viewMap;
			Tools.forEachMap(e, function(a, i) {
				if (~t.indexOf(i.partId))
					for (let t = 0; t < i.views.length; t++) {
						i.views[t].clearMaterialMask()
					} else {
						for (let t = 0; t < i.views.length; t++) {
							let e = i.views[t];
							e.clear(), _G.pool.put(e)
						}
						delete e[a]
					}
			})
		}
		setParts(t, e, a, i = !1) {
			this.isInit ? this.loadParts(t, (t, s) => {
				if (i) {
					this.clearAll(t);
					for (let t = 0; t < s.length; t++) this.removePartType(s[t])
				}
				this._setPartsOnloaded(t, e), a && a()
			}) : Logger.error("Avatar尚未加载完成.")
		}
		setPart(t, e) {
			this.setParts([t], e)
		}
		loadParts(t, e) {
			this._resLoader && (this._resLoader.dispose(), this._resLoader = null), mgrPanel.openPanelWithSingleton(PanelWait);
			let a, i = new ResLoader;
			this._resLoader = i;
			let s = [];
			if (t instanceof Array) a = t;
			else {
				a = [];
				let e = Object.keys(t);
				for (let i = 0; i < e.length; i++) t[e[i]] ? a.push(t[e[i]]) : s.push(parseInt(e[i]))
			}
			mgrPart.addPartResList(a, i), a.sort(function(t, e) {
				let a = db.get_item_db(t).viewList,
					i = db.get_item_db(e).viewList,
					s = db.get_model_db(a[0]),
					n = db.get_model_db(i[0]);
				return s.type == n.type ? s.id > n.id ? 1 : -1 : 0 == s.type ? -1 : 1
			}), i.setLoadingCallback(t => {
				this._resLoader.dispose(), this._resLoader = null, _G.sendMsg(BASE_MSG.RES_LOAD_END), t && (mgrSzz.setLoadedParts(a), e(a, s))
			}), i.loadAll()
		}
		_setPartsOnloaded(t, e) {
			for (var a = 0; a < t.length; a++) this._setPartOnloaded(t[a]);
			e && this._playAutoAnim(t)
		}
		_setPartOnloaded(t) {
			let e = db.get_item_db(t),
				a = e.gid,
				i = this.viewMap[a];
			if (!i || i.partId != t) {
				i && this.removePart(i.partId);
				let s = [];
				i = {
					partId: t,
					views: s
				}, this.viewMap[a] = i;
				let n = e.viewList;
				for (let t = 0; t < n.length; t++) {
					let e = _G.pool.get(GView);
					e.create(a, n[t], this), s.push(e)
				}
			}
		}
		_playAutoAnim(t) {
			if (t)
				for (var e = 0; e < t.length; e++) {
					var a = db.get_item_db(t[0]),
						i = db.get_part_type_db(a.gid).changeAnimId;
					if (i) {
						this.playAnimation(i, !1, MODEL_ANIM.MAIN_IDLE);
						break
					}
				} else this.playAnimation(MODEL_ANIM.IDLE1)
		}
		playIdle() {
			if (this.isInit) {
				let t = this.baseBody.lastAnimationId;
				switch (t) {
					case MODEL_ANIM.IDLE1:
						t = MODEL_ANIM.IDLE_T1;
						break;
					case MODEL_ANIM.IDLE2:
						t = MODEL_ANIM.IDLE_T2;
						break;
					default:
						t = Math.random() > .5 ? MODEL_ANIM.IDLE_T1 : MODEL_ANIM.IDLE_T2
				}
				t = MODEL_ANIM.MAIN_IDLE, this.playAnimation(t, !1)
			} else this._loop = !1, this._animationId = MODEL_ANIM.MAIN_IDLE
		}
		playHuDong() {
			if (this._bHuDongAnim) return;
			let t;
			switch (this._bHuDongAnim = !0, this._hudongIdx = (this._hudongIdx + Mathf.random(2)) % 3, this._hudongIdx) {
				case 0:
					t = MODEL_ANIM.MAIN_HUDONG1;
					break;
				case 1:
					t = MODEL_ANIM.MAIN_HUDONG2;
					break;
				case 2:
					t = MODEL_ANIM.MAIN_HUDONG3
			}
			this.playAnimation(t, !1, MODEL_ANIM.MAIN_IDLE)
		}
		playPiJuan(t = !0) {
			if (this._bHuDongAnim) return;
			if (this._bHuDongAnim = !0, t) var e = Mathf.arrCircleRandom(RoleAvatar.pijuanAnimWeight);
			else e = 0;
			let a;
			switch (e) {
				case 0:
					a = MODEL_ANIM.PIJUAN01;
					break;
				case 1:
					a = MODEL_ANIM.PIJUAN02;
					break;
				case 2:
					a = MODEL_ANIM.PIJUAN03
			}
			this.playAnimation(a, !1, MODEL_ANIM.PIJUAN_IDLE)
		}
		playBodyAnim(t, e, a) {
			this.baseBody.playAnim(t, e, a), this.clearAllTimer()
		}
		stopAnimation() {
			this.clearAllTimer()
		}
		playAnimation(t, e, a, i) {
			if (this._loop = e, !this.isInit) return this._animationId = t, !1;
			if (this.baseBody.curAnimationId == t) return;
			if (this.clearAllTimer(), Logger.debug(`RoleAvatar playAnimation: ${t}`), a) {
				let e = [t, a];
				this.baseBody.playAnims(i, e, !1)
			} else this.baseBody.playAnim(t, i, e);
			let s = db.get_animation_face_db_map()[t];
			return s && s.faceAnims.length > 0 && (this._faceAnimDb = s, this._syncFaceAnim(e)), !0
		}
		playAnimations(t, e, a) {
			if (!t) return !1;
			if (this._loop = e, !this.isInit) return this._animationId = t[0], !1;
			if (this.baseBody.curAnimationId == t[0]) return;
			this.clearAllTimer(), Logger.debug(`RoleAvatar playAnimations: ${t.join(",")}`);
			let i = t[0];
			this.baseBody.playAnims(a, t, e);
			let s = db.get_animation_face_db_map()[i];
			return s && s.faceAnims.length > 0 && (this._faceAnimDb = s, this._syncFaceAnim(e)), !0
		}
		tryShowXiuBiao(t = !1) {
			if (!this.isInit) return void(this._bShowXiuBiao = !0);
			let e = mgrClassRoom.getXiuBiaoModelData() || {},
				a = e.bYouXiu,
				i = e.yxModelId,
				s = e.wxModelId;
			t && (this.xiubiao_wuxiu && (_G.poolManager.put(this.xiubiao_wuxiu), this.xiubiao_wuxiu = null), this.xiubiao_xiuzi && (_G.poolManager.put(this.xiubiao_xiuzi), this.xiubiao_xiuzi = null)), a && i && !this.xiubiao_xiuzi ? (this.xiubiao_xiuzi = _G.poolManager.get(GModel, i), this.baseBody.addToChild("Guadian_zuobi1", this.xiubiao_xiuzi)) : a || !s || this.xiubiao_wuxiu || (this.xiubiao_wuxiu = _G.poolManager.get(GModel, s), this.baseBody.addToChild("Guadian_zuobi1", this.xiubiao_wuxiu)), a ? (this.xiubiao_xiuzi && this.xiubiao_xiuzi.show(), this.xiubiao_wuxiu && this.xiubiao_wuxiu.hide()) : (this.xiubiao_xiuzi && this.xiubiao_xiuzi.hide(), this.xiubiao_wuxiu && this.xiubiao_wuxiu.show())
		}
		hideXiuBiao() {
			this.xiubiao_wuxiu && this.xiubiao_wuxiu.hide(), this.xiubiao_xiuzi && this.xiubiao_xiuzi.hide()
		}
		refreshFingernails() {
			if (!this.isInit) return;
			let t = mgrGame.getUsedManicureStageData();
			if (t) {
				let e = db.get_manicure_model_db_map();
				for (let a in e) {
					let i = this.fingernails[e[a].id];
					if (!i) {
						let t = db.get_model_db(e[a].modelId);
						i = _G.poolManager.get(GModel, e[a].modelId), this.baseBody.addToChild(t.attachNode, i), i.initPart(), this.fingernails[e[a].id] = i
					}
					i.callIfLoaded(() => {
						mgrRes.loadTexture2D(t.modelMaps[e[a].modelId], t => {
							i.sharedMaterial.albedoTexture = t
						})
					})
				}
			}
		}
		get curBodyAnim() {
			return this.baseBody.curAnimationId
		}
		get lastBodyAnim() {
			return this.baseBody.lastAnimationId
		}
		_syncFaceAnim(t) {
			let e = this._faceAnimDb;
			if (e) {
				e.faceAnims.length;
				let a = e.faceAnims[Mathf.random(e.faceAnims.length) - 1];
				this.playFaceAnim(a, .1, t)
			}
		}
		clearAllTimer() {
			Laya.timer.clearAll(this)
		}
		playFaceAnim(t, e, a) {
			Logger.debug("play face anim:", t), this.clearAllTimer(), this.baseFace.playAnim(t, e, a)
		}
		get curFaceAnim() {
			return this.baseFace.curAnimationId
		}
		get lastFaceAnim() {
			return this.baseFace.lastAnimationId
		}
		playFaceAnims(t, e, a, i) {
			this.baseFace.playAnims(a, [t, e], i), this._faceAnimDb = null, this.clearAllTimer()
		}
		playZaYang() {
			this.baseFace.playAnim(MODEL_ANIM.FACE_ZHAYAN, 0, !1)
		}
		_onBodyAnimEnter(t) {
			this.destroyed || this.event("Enter", t)
		}
		_onBodyAnimExit(t) {
			if (!this.destroyed)
				if (this._bHuDongAnim = !1, t == this.lastBodyAnim) {
					switch (t) {
						case MODEL_ANIM.IDLE1:
						case MODEL_ANIM.IDLE2:
							this.playIdle();
							break;
						case MODEL_ANIM.IDLE_T1:
							this.playAnimation(MODEL_ANIM.IDLE2);
							break;
						case MODEL_ANIM.IDLE_T2:
							this.playAnimation(MODEL_ANIM.IDLE1);
							break;
						case MODEL_ANIM.LAOYU_IDLE:
							this.baseBody.playAnim(MODEL_ANIM.LAOYU_IDLE, 0, !1), this.lastFaceAnim != MODEL_ANIM.FACE_ZHAYAN && Laya.timer.once(Mathf.random(1800), this, this.playZaYang);
							break;
						case MODEL_ANIM.MAIN_IDLE:
							this.baseBody.playAnim(MODEL_ANIM.MAIN_IDLE, 0, !1), this.lastFaceAnim != MODEL_ANIM.FACE_ZHAYAN && Laya.timer.once(Mathf.random(1500), this, this.playZaYang);
							break;
						case MODEL_ANIM.HUFU_IDLE:
							this.baseBody.playAnim(MODEL_ANIM.HUFU_IDLE, 1, !1), this.lastFaceAnim != MODEL_ANIM.FACE_ZHAYAN && Laya.timer.once(Mathf.random(2800), this, this.playZaYang);
							break;
						case MODEL_ANIM.HUFU_ZANTONG1:
						case MODEL_ANIM.HUFU_ZANTONG2:
						case MODEL_ANIM.HUFU_ZANTONG3:
						case MODEL_ANIM.HUFU_WANCHENG:
						case MODEL_ANIM.HUFU_ZAMAO_L:
						case MODEL_ANIM.HUFU_ZAMAO_R:
							this.playAnimation(MODEL_ANIM.HUFU_IDLE);
							break;
						case MODEL_ANIM.MAIN_HUDONG1:
						case MODEL_ANIM.MAIN_HUDONG2:
						case MODEL_ANIM.MAIN_HUDONG3:
						case MODEL_ANIM.LAJI_CUO:
							break;
						case MODEL_ANIM.PIJUAN01:
						case MODEL_ANIM.PIJUAN02:
						case MODEL_ANIM.PIJUAN03:
							Laya.timer.once(Mathf.random(3e3, 6e3), this, () => {
								this.playPiJuan()
							});
							break;
						case MODEL_ANIM.PIJUAN_IDLE:
							break;
						case MODEL_ANIM.ZJZ:
						case MODEL_ANIM.SHOW01:
							this.playIdle()
					}
					this.event("Exit", t)
				} else this.event("Exit", t)
		}
		_onFaceAnimExit(t) {
			if (!this.destroyed && t == this.lastFaceAnim) {
				if (this._faceAnimDb) {
					let t = this._faceAnimDb.deltaTime;
					if (t) return void Laya.timer.once(Mathf.random(500 * t, 1500 * t), this, this._syncFaceAnim);
					this._faceAnimDb = null
				}
				switch (t) {
					case MODEL_ANIM.FACE_ZHAYAN:
						this.baseFace.playAnim(MODEL_ANIM.FACE_IDLE01, .3, !1);
						break;
					case MODEL_ANIM.FACE_IDLE02:
						this.baseFace.playAnim(MODEL_ANIM.FACE_IDLE01)
				}
			}
		}
		pauseAnim() {
			this.isInit && (this.baseFace.getAnimator().speed = 0, this.baseBody.getAnimator().speed = 0)
		}
		resumeAnim() {
			this.isInit && (this.baseFace.getAnimator().speed = 1, this.baseBody.getAnimator().speed = 1)
		}
		getPartByType(t) {
			return this.viewMap[t]
		}
		getModelByModelId(t) {
			for (var e in this.viewMap) {
				var a = this.viewMap[e];
				if (a)
					for (let e = 0; e < a.views.length; e++)
						if (a.views[e].viewId == t) return a.views[e].model
			}
			return null
		}
		getWearParts() {
			let t = {};
			for (var e in this.viewMap) {
				var a = this.viewMap[e];
				a && (t[e] = a.partId)
			}
			return t
		}
		getView(t) {
			for (const a in this.viewMap) {
				var e = this.viewMap[a];
				if (e)
					for (let a = 0; a < e.views.length; a++)
						if (e.views[a].viewId == t) return e.views[a]
			}
			return null
		}
		debug_add_model(t, e) {
			let a = db.get_model_db(t);
			mgrRes.loadRes(a.resPath, RES_TYPE.PREFAB3D, () => {
				for (var i in this.viewMap) {
					var s = this.viewMap[i];
					if (s)
						for (let o = 0; o < s.views.length; o++) {
							var n = s.views[o];
							if (n.viewDb.editType == a.editType) return n.clear(), n.create(parseInt(i), t, this), void(e && e(n.model))
						}
				}
				let o;
				Tools.forEachMap(db.get_item_db_map(), function(e, a) {
					if (~a.viewList.indexOf(t)) return o = e, !0
				}), o && this.setParts([o], !1, () => {
					let a = this.getModelByModelId(t);
					e && e(a)
				})
			})
		}
		clearJingZi() {
			this.jingZi && (_G.poolManager.put(this.jingZi), this.jingZi = null, this.jingziPlayer.dispose(), this.jingziPlayer = null)
		}
		playJingZi() {
			if (!this.jingZi) {
				this.jingZi = _G.poolManager.get(GModel, db.MODEL_DB_ID.jingzi), this.jingziPlayer = new AnimatorFixedPlayer;
				let t = () => {
					RoleAvatar.jingziLoaded = !0, this.destroyed || (this.jingZi.initPaint(), this.jingZi.hide(), this.baseBody.callIfLoaded(() => {
						this.jingZi.setParent(this.baseBody.findChild("Guadian_jingzi"))
					}), this.jingziPlayer.addModelAnim(this.baseBody, MODEL_ANIM.ZJZ), this.jingziPlayer.addModelAnim(this.baseFace, MODEL_ANIM.FACE_ZJZ), this.jingziPlayer.addTimeCallback(8 / 150, () => {
						this.jingZi.show(), this.jingZi.callIfLoaded(() => {
							this.jingZi.sharedMaterial.playDissolveIn(.5)
						})
					}), this.jingziPlayer.addTimeCallback(143 / 150, () => {
						this.jingZi.callIfLoaded(() => {
							this.jingZi.sharedMaterial.playDissolveOut(.5)
						})
					}), this.jingziPlayer.addTimeCallback(1, () => {
						this.playAnimation(MODEL_ANIM.ZJZ, !1), this.playIdle()
					}))
				};
				RoleAvatar.jingziLoaded ? t() : mgrRes.loadRes(db.get_animation_db(MODEL_ANIM.ZJZ).path, RES_TYPE.ANIMATIONCLIP, () => {
					mgrRes.loadRes(db.get_animation_db(MODEL_ANIM.FACE_ZJZ).path, RES_TYPE.ANIMATIONCLIP, t)
				})
			}
			RoleAvatar.jingziLoaded ? this.jingziPlayer.play() : this.playIdle()
		}
		stopJingZi() {
			this.jingziPlayer && (this.jingziPlayer.stop(), this.jingZi.hide())
		}
		playShowXiuBiao() {
			this.playAnimation(MODEL_ANIM.MAIN_XIUBIAO, !1, MODEL_ANIM.MAIN_IDLE)
		}
		playWantXiuBiao() {
			this.playAnimation(MODEL_ANIM.MAIN_XIUBIAO, !1, MODEL_ANIM.MAIN_IDLE)
		}
		playWantZhiJia() {
			let t = MODEL_ANIM.MAIN_MEIJIA_SHOW2;
			this.playAnimation(t, !1, MODEL_ANIM.MAIN_IDLE), mgrSound.playTalk("mj_04")
		}
		playShowZhiJia() {
			let t = MODEL_ANIM.MAIN_MEIJIA_SHOW1;
			this.playAnimation(t, !1, MODEL_ANIM.MAIN_IDLE), mgrSound.playTalk("mj_03")
		}
		clearHuDie() {
			this.huDie && (this.huDie.off("Exit", this, this.onHuDieAnimFinish), _G.poolManager.put(this.huDie), this.huDie = null)
		}
		playHuDie() {
			this.huDie ? this.huDie.show() : (this.huDie = _G.poolManager.get(GModel, db.MODEL_DB_ID.hudie), this.huDie.setParent(this), this.huDie.on("Exit", this, this.onHuDieAnimFinish), this.huDie.setPosition(0, 0, 0)), this.playAnimation(MODEL_ANIM.SHOW01, !1), this.huDie.playAnim(MODEL_ANIM.HUDIE_SHOW, 0, !1)
		}
		onHuDieAnimFinish(t) {
			this.huDie && this.huDie.hide()
		}
		stopHuDie() {
			this.huDie && this.huDie.hide()
		}
	}
	RoleAvatar.pijuanAnimWeight = [5, 0, 3], RoleAvatar.jingziLoaded = !1;
	class PanelRoleLvupShow extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "", this._exportNodeInfo = {}
		}
		static openPanel(t) {
			let e = new ResLoader;
			e.add("res/ui/bg/dream_bg2.jpg", RES_TYPE.IMAGE), e.add(db.get_animation_db(MODEL_ANIM.SHENGJI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_SHENGJI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_effect_db("143").res, RES_TYPE.PREFAB3D), e.add(db.get_effect_db("136").res, RES_TYPE.PREFAB3D), mgrAlert.openWait(e, () => {
				mgrPanel.openPanel(PanelRoleLvupShow, t)
			})
		}
		create(t) {
			t && t(!0);
			let e = (new Laya.Sprite).size(_G.canvasFitWidth, _G.canvasFitHeight),
				a = e.addChild(new Laya.Image);
			a.centerX = 0, a.centerY = 0, a.skin = "res/ui/bg/dream_bg2.jpg", this.heart = e.addChild(new Laya.Sprite).loadImage("res/ui/pnl_main/lv_bg.png").pivot(53, 55).pos(_G.canvasFitWidth / 2, 100), this.heart.addChild(new Laya.Sprite).loadImage("res/ui/pnl_main/lv_bar.png").pos(6, 28, !0), this.level = this.heart.addChild(new Laya.Label), this.level.anchorX = .5, this.level.pos(55, 53), this.level.fontSize = 24, this.level.color = "#ffffff", this.level.strokeColor = "#ff1cc2", this.level.stroke = 2, this.level.text = mgrGame.getRoleLevel() - 1 + mgrI18n.getText("panelRoleLvupShow.1"), this.createFromNode(e)
		}
		buildUi() {
			this.createScene3DBack(1, 30), this.camera.transform.localPosition = new Laya.Vector3(0, 1.29, 4.12), this.camera.transform.localRotationEuler = new Laya.Vector3(-4, 0, 0), this.avatar = new RoleAvatar, this.scene3DBack.addChild(this.avatar), this.effect = _G.poolManager.get(Particle, "143"), this.effect.setParent(this.camera), this.effect.play(), this.effect2 = _G.poolManager.get(Particle, "136"), this.effect2.setParent(this.avatar.baseBody.findChild("Guadian_handr")), this.effect2.play(), this.avatar.playAnimation(MODEL_ANIM.SHENGJI, !1), this.avatar.once("Exit", this, this.onAnimFinish)
		}
		dispose() {
			this.effect2 && _G.poolManager.put(this.effect2), this.effect && _G.poolManager.put(this.effect), this.avatar && this.avatar.destroy(), super.dispose()
		}
		onAnimFinish(t) {
			this.destroyed || cc.tween(this.heart).to(.2, cc.PROP.SCALE0).call(() => {
				this.level.text = mgrGame.getRoleLevel() + mgrI18n.getText("panelRoleLvupShow.1")
			}).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).delay(.5).call(() => {
				this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelRoleLvup, this.context)
			}).start()
		}
	}
	const KEY_PREVIEW_DATA = "KEY_PREVIEW_DATA",
		SHARE_AWARD_SUIT_ID = "33",
		DANCE_ANSWER_ANIM_ID = "kongquewu-kongquewu",
		DANCE_UNLOCK_CONTRACT_IDX = 9,
		CLASS_UNLOCK_CONTRACT_IDX = 10,
		CLASS_UNLOCK_ROLE_ID = 10,
		TEST_ROLE_ID = "r27",
		ROLE_TEST_UNLOCK_CONTRACT_IDXS = [7, 8],
		SHOE_UNLOCK_CONTRACT_IDX = 11;
	class mgrGame extends _mgrBase {
		static onload() {
			BaseFacade.mSwitch.dailyActive && BaseFacade.mItem.setItem("1010", 3), this.initRole(), this.initRank(), this.initDance(), this.initManicure()
		}
		static start() {
			BaseFacade.mSwitch.dailyActive && (this.resetLotteryCount(), this.resetOpenReview(), FileRecord.setData("notice_opened", !1), FileRecord.setData("findme_opened", !1), FileRecord.setData("SHARE_AWARD_COUNT", 0), FileRecord.setData("VIDEO_SHARE_AWARD_COUNT", 0), FileRecord.setData("RANK_TIP_SHOW_LAST_TIME", 0));
			let t = new Date,
				e = FileRecord.getData("SUBSCRIBE_OUT_TIME") || 0;
			(!e || t.getTime() > e) && FileRecord.setData("SUBSCRIBE_COUNT", 1), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				[BASE_MSG.UP_STATE_CHANGE]: this.onMsgUpStateChange.bind(this),
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this),
				GUIDE_SKIP: this.onMsgGuideSkip.bind(this),
				[BASE_MSG.SDK_SHARE_SUC]: this.onMsgShareSuc.bind(this),
				[BASE_MSG.SDK_SHARE_FAIL]: this.onMsgShareFail.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onMsgVideoShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_FAIL]: this.onMsgShareFail.bind(this),
				[BASE_MSG.MSG_ON_ADD_SUBSCRIBE_RESULT]: this.onMsgSdkAddSubscribeResult.bind(this)
			})
		}
		static initRank() {
			mgrRank.getPlayerScore(1) < 0 && mgrRank.commit(this.getRoleLevel(), 1)
		}
		static onMsgItemChange(t) {
			"1005" == t.itemId && t.changeCount > 0 && BaseFacade.mUp.lvupAttr("role_level")
		}
		static onMsgUpStateChange(t) {
			if ("role_level" == t.itemId) {
				mgrRank.commit(t.level, 1);
				let e = BaseFacade.mUp.getUpDb(t.itemId, t.level);
				if (this.curRoleUpDb = e, BaseFacade.mItem.setItem("1025", e.playMax), t.level > 1) {
					let t = {
						itemId: e.itemId,
						count: e.itemCount
					};
					BaseFacade.mItem.addItem(t.itemId, t.count, 21), Laya.timer.once(200, this, function() {
						PanelRoleLvupShow.openPanel(t)
					})
				}
			}
		}
		static onMsgCopChange() {
			mgrSdk.h5_channel
		}
		static onMsgGuideSkip() {
			null == this.contractIndex && (this.contractIndex = 1)
		}
		static onMsgShareSuc() {
			this.getShareAward()
		}
		static onMsgShareFail() {}
		static onMsgVideoShareSuc() {
			this.getShareAward(!0)
		}
		static onMsgSdkAddSubscribeResult(t) {
			if (console.log("查看订阅回调", t), !FileRecord.getData("SUBSCRIBE_COUNT")) return;
			[
				["1000", 10],
				["1001", 2e3]
			].forEach(t => {
				let e = t[0],
					a = t[1];
				BaseFacade.mItem.addItem(e, a, null), mgrAlert.alertSingleItem({
					itemId: e,
					count: a
				})
			}), GameStatistics.statisCommonEvent(2505, 1);
			let e = new Date;
			e.setDate(e.getDate() + 1), e.setHours(18), e.setMinutes(0), e.setSeconds(0), e.setMilliseconds(0);
			let a = e.getTime();
			FileRecord.setData("SUBSCRIBE_OUT_TIME", a), FileRecord.setData("SUBSCRIBE_COUNT", 0), _G.sendMsg("SUBSCRIBE_SUCCESS")
		}
		static isSupportSubscribe() {
			return !1
		}
		static isSubScrbeCd() {
			let t = FileRecord.getData("SUBSCRIBE_LAST_SHOW_TIME") || 0;
			return console.log("查看剩余cd", t + db.cop.subscribe_cd - Timer.time), Timer.time > t + db.cop.subscribe_cd && (FileRecord.setData("SUBSCRIBE_LAST_SHOW_TIME", Timer.time), !0)
		}
		static tryOpenPanelRankVideoTips(t, e) {
			return !1
		}
		static tryShowPanelFollow() {
			let t = FileRecord.getData("showPanelFollow"),
				e = Tools.isOneDay(t, Timer.time);
			if (db.cop.isSupportFollowOfficialAccount && 1 == db.cop.b_open_follow && 2 == mgrSdk.followState && !e) {
				mgrSdk.getFollowOfficialAccountState();
				let t = Timer.time;
				FileRecord.setData("showPanelFollow", t), mgrAlert.openPanelLoading(UI_NAME.PanelFollow)
			}
		}
		static tryOpenAdvertisingTips() {
			if (_G.isGuiding) return !1;
			if (!db.cop.alert_hud_prompt_list_v2) return !1;
			let t = [UI_NAME.PanelActiveClass, UI_NAME.PanelActiveTest, UI_NAME.PanelActiveDance, UI_NAME.PanelActiveCp, UI_NAME.PanelActiveCpTestPreview, UI_NAME.PanelActiveDanceNew];
			for (let e = 0; e < db.cop.alert_hud_prompt_list_v2.length; e++) {
				let a = db.cop.alert_hud_prompt_list_v2[e];
				if (null != a && t[a]) {
					let e = this.alertPromptCd[a] || 0,
						i = db.cop.alert_hud_prompt_cds_v2[a] || 0,
						s = db.cop.alert_hud_prompt_ratios_v2[a] || 0;
					if (console.log("宣传图数据", a, "lastTime = ", e + i - Timer.time, "cd = ", i, "ratio = ", s), Timer.time > e + i && Mathf.randomEnable(s)) return console.log("弹出宣传图数据", a), this.alertPromptCd[a] = Timer.time, mgrAlert.openPanelLoading(t[a]), !0
				}
			}
			return console.log("没有宣传图可以弹出"), !1
		}
		static initRole() {
			this.roleData = FileRecord.getData("KEY_ROLE_DATA");
			let t = BaseFacade.mUp.getUpDb("role_level");
			this.curRoleUpDb = t, this.roleData ? (this.roleData.unlockContracts || (this.roleData.unlockContracts = {
				[this.roleData.contract]: !0
			}), 1 == this.roleData.state && (this.roleData.state = 0)) : (this.roleData = {
				contract: null,
				state: 2,
				lastWakupTime: Timer.time,
				unlockContracts: {},
				usedManicureStageData: null
			}, this.saveData(), BaseFacade.mItem.setItem("1025", t.playMax), BaseFacade.mItem.setItem("1024", t.playMax), BaseFacade.mItem.setItem("1022", t.playMax), BaseFacade.mItem.setItem("1020", .5 * t.xinQingMax | 0))
		}
		static saveData() {
			FileRecord.setData("KEY_ROLE_DATA", this.roleData)
		}
		static getUsedManicureStageData() {
			return this.roleData.usedManicureStageData
		}
		static setUsedManicureStageData(t) {
			this.roleData.usedManicureStageData = t, this.saveData()
		}
		static get contractIndex() {
			return this.roleData.contract
		}
		static isContractUnlock(t) {
			return this.roleData.unlockContracts[t]
		}
		static contractUnlock(t) {
			this.roleData.unlockContracts[t] = !0
		}
		static set contractIndex(t) {
			this.roleData.contract = t, this.roleData.unlockContracts[t] = !0;
			let e = db.game_cnf["default_parts" + (t + 1)],
				a = {};
			for (let t = 0; t < e.length; t++) a[db.get_item_db(e[t]).gid] = e[t];
			mgrPart.setSelectParts(a), this.saveData()
		}
		static set roleState(t) {
			switch (this.roleData.state = t, t) {
				case 1:
				case 0:
					break;
				case 2:
				case 3:
					this.roleData.lastWakupTime = Timer.time
			}
			this.saveData()
		}
		static get roleState() {
			return this.roleData.state
		}
		static isNeedSleep() {
			Timer.time, this.roleData.lastWakupTime
		}
		static get isPiJuan() {
			return BaseFacade.mItem.getItemCount("1020") <= .3 * mgrGame.curRoleUpDb.xinQingMax
		}
		static playRandomAnim(t, e) {
			let a = db.get_ui_role_anim_db_map()[e];
			if (a) {
				var i = a.slice();
				for (let e = i.length - 1; e >= 0; e--) {
					let a = i[e];
					if (!(t[a.animFuncName] instanceof Function)) {
						i.splice(e, 1);
						continue
					}
					if (a.checkFunName && this[a.checkFunName] && !this[a.checkFunName]()) {
						i.splice(e, 1);
						continue
					}
					let s = a.animId || a.animFuncName;
					if (a.cd && this.getPanelMainRoleAnimLastPlayTime(s) + a.cd >= Timer.time) {
						console.warn("PanelMain cd中:", s), i.splice(e, 1);
						continue
					}
					let n = Tools.calcWheelTarget(i, "weight");
					n && (n.animId ? t.playAnimation(n.animId, !1, MODEL_ANIM.MAIN_IDLE) : n.animFuncName && t[n.animFuncName] && t[n.animFuncName](), n.soundId && mgrSound.playSound(n.soundId), mgrGame.markPanelMainRoleAnimPlayed(s))
				}
			}
		}
		static tryEnterMain(t) {
			mgrPanel.findViewByName(UI_NAME.PanelMain) ? mgrPanel.openPanelWithSingleton(UI_NAME.PanelMain, null, t) : mgrAlert.openGameLoading(UI_NAME.PanelMain, null, t)
		}
		static getPanelMainRoleAnimLastPlayTime(t) {
			return this.panelMainLastPlayAnimTimeLog[t] || 0
		}
		static markPanelMainRoleAnimPlayed(t) {
			this.panelMainLastPlayAnimTimeLog[t] = Timer.time
		}
		static checkShowZhiJia() {
			return !!this.getUsedManicureStageData()
		}
		static checkWantXiuBiao() {
			let t = null,
				e = db.get_class_room_role_db_map();
			for (let a in e) {
				let i = e[a];
				if (i && i.contractIdx == this.contractIndex) {
					t = i.id;
					break
				}
			}
			return !!t
		}
		static checkShowXiuBiao() {
			let t = null,
				e = db.get_class_room_role_db_map();
			for (let a in e) {
				let i = e[a];
				if (i && i.contractIdx == this.contractIndex) {
					t = i.id;
					break
				}
			}
			return !!(t && mgrClassRoom.getRoleLevel(t) >= 2)
		}
		static getRoleLevel() {
			return BaseFacade.mUp.getLevel("role_level")
		}
		static getRoleProgress() {
			return BaseFacade.mUp.isMax("role_level") ? 1 : BaseFacade.mItem.getItemCount("1005") / BaseFacade.mUp.getUpDb("role_level").reqCnt1
		}
		static resetLotteryCount() {
			FileRecord.setData("free_lottery", !1)
		}
		static get isFreeLottery() {
			return !FileRecord.getData("free_lottery")
		}
		static setLottery() {
			FileRecord.setData("free_lottery", !0)
		}
		static resetOpenReview() {
			let t = FileRecord.getData(KEY_PREVIEW_DATA) || {
				enabled: !0,
				today: !0
			};
			t.today = !0, FileRecord.setData(KEY_PREVIEW_DATA, t)
		}
		static tryOpenReview() {
			if (Laya.Browser.onLayaRuntime && Laya.Browser.onIOS && db.cop.pop_review_ratio) {
				let t = FileRecord.getData(KEY_PREVIEW_DATA) || {};
				if (t.enabled && t.today) return t.today = !1, FileRecord.setData(KEY_PREVIEW_DATA, t), mgrAlert.alertDialog("喜欢我们的游戏吗？喜欢就给游戏5星好评吧！", "温馨提示", function() {
					t.enabled = !1, FileRecord.setData(KEY_PREVIEW_DATA, t), mgrSdk.openReview()
				}, function() {}, "好的", "以后"), !0
			}
			return !1
		}
		static get shareAwardCount() {
			return FileRecord.getData("SHARE_AWARD_COUNT") || 0
		}
		static set shareAwardCount(t) {
			FileRecord.setData("SHARE_AWARD_COUNT", t)
		}
		static get videoShareAwardCount() {
			return FileRecord.getData("VIDEO_SHARE_AWARD_COUNT") || 0
		}
		static set videoShareAwardCount(t) {
			FileRecord.setData("VIDEO_SHARE_AWARD_COUNT", t)
		}
		static getShareAward(t = !1) {
			if (db.get_suit_db(SHARE_AWARD_SUIT_ID) && t && (this.videoShareAwardCount < 1 || mgrAdv.checkActive("share_part")) && !mgrSuit.hasSuit(SHARE_AWARD_SUIT_ID)) mgrPanel.openPanel(UI_NAME.PanelVideoShareReward);
			else if (this.shareAwardCount < 3) {
				let t = {
					itemId: "1000",
					count: 10
				};
				mgrAlert.addAndAlert(t, 43), this.shareAwardCount++
			}
		}
		static tryGetShareAward() {
			if (this.shareAwardCount < 3) {
				let t = {
					itemId: "1000",
					count: 10
				};
				mgrAlert.addAndAlert(t, 43), this.shareAwardCount++
			}
		}
		static tryGetSharePartAward(t = !1) {
			let e = SHARE_AWARD_SUIT_ID,
				a = db.get_suit_db(e);
			if (!a) return void console.warn("套装不存在 suitId = ", e);
			let i = mgrSuit.hasSuit(e),
				s = 0;
			if ((this.videoShareAwardCount < 1 || t) && !i) {
				let e = null,
					i = a.parts;
				for (let t = 0; t < i.length; t++) {
					if (!BaseFacade.mItem.isOwned(i[t])) {
						e = i[t];
						break
					}
					s++
				}
				if (e) {
					let a = {
						itemId: e,
						count: 1
					};
					mgrAlert.addAndAlert(a, 43), this.videoShareAwardCount++, GameStatistics.statisCommonEvent(9308 + s, t ? 2 : 1)
				}
			}
		}
		static initDance() {
			this.danceTestedData = FileRecord.getData("DANCE_TESTED_DATA") || {}
		}
		static checkDanceIsTested(t) {
			return !!this.danceTestedData[t]
		}
		static markDanceTested(t) {
			this.danceTestedData[t] = !0, FileRecord.setData("DANCE_TESTED_DATA", this.danceTestedData)
		}
		static addRecordDanceCount(t) {
			let e = FileRecord.getData("DANCE_COUNT_DATA") || {};
			e[t] ? e[t]++ : e[t] = 1, FileRecord.setData("DANCE_COUNT_DATA", e), _G.sendMsg("DANCE_COUNT_CHANGED")
		}
		static getRecordDanceCount(t) {
			return (FileRecord.getData("DANCE_COUNT_DATA") || {})[t] || 0
		}
		static addRecordAdDanceAnswer(t) {
			let e = FileRecord.getData("AD_DANCE_ANSWER_DATA") || {};
			e[t] = !0, FileRecord.setData("AD_DANCE_ANSWER_DATA", e)
		}
		static getRecordAdDanceAnswer(t) {
			return (FileRecord.getData("AD_DANCE_ANSWER_DATA") || {})[t] || !1
		}
		static initManicure() {
			if (!FileRecord.getData("MANICURE_STAGE_DATA")) {
				let t = [],
					e = db.get_manicure_stage_db_map();
				for (let a in e) e[a] && t.push(e[a]);
				let a = t[Mathf.random(t.length) - 1];
				FileRecord.setData("MANICURE_STAGE_DATA", a)
			}
		}
		static debugInfo() {}
	}
	mgrGame.panelMainLastPlayAnimTimeLog = {}, mgrGame.alertPromptCd = {}, mgrGame.danceTestedData = {};
	class mgrOutside extends _mgrBase {
		static onload() {}
		static getGameLevel(t) {
			let e = mgrGame.getRoleLevel(),
				a = Mathf.random(t.length);
			for (var i = 0; i < t.length; i++) {
				var s = (i + a) % t.length,
					n = t[s];
				if (e >= n.levelLimit[0] && e <= n.levelLimit[1]) break
			}
			return s
		}
		static getGameAwardCount(t) {
			return t >= 150 ? 3 : t >= 100 ? 2 : t >= 50 ? 1 : 0
		}
		static getGameAward(t, e) {
			let a = [],
				i = this.getGameAwardCount(e);
			for (let e = 0; e < i; e++) {
				let i = t.items[e];
				a.push({
					itemId: i[0],
					count: i[1]
				})
			}
			return a
		}
		static checkGamePlayable(t, e, a, i) {
			if (BaseFacade.mItem.enoughItem("1020", t))
				if (Timer.time >= this.timeData[e]) {
					mgrAdv.checkActive("one_click_interact") ? (mgrAdv.statisVideoShow("one_click_interact"), mgrAlert.alertAdvDialog(String.format(mgrI18n.getText("mgrOutside.1"), a.toString()), mgrI18n.getText("schoolYearbookItem.2"), () => {
						mgrAdv.statisVideoClick("one_click_interact"), mgrAdv.dispatchAdv("one_click_interact", {
							gameName: a
						}, !0)
					}, mgrI18n.getText("mgrOutside.2"), () => {
						mgrAlert.alertDialog(`${mgrI18n.getText("mgrOutside.3")}${a}?`, mgrI18n.getText("schoolYearbookItem.2"), () => {
							i && i()
						}, function() {})
					})) : mgrAlert.alertDialog(`${mgrI18n.getText("mgrOutside.3")}${a}?`, mgrI18n.getText("schoolYearbookItem.2"), () => {
						i && i()
					}, function() {})
				} else mgrAlert.alertDialog(mgrI18n.getText("mgrOutside.4"));
			else mgrAlert.alertDialog(mgrI18n.getText("mgrOutside.5"))
		}
		static checkLingGanPlayable(t) {
			this.checkGamePlayable(db.game_cnf.butterfly_cost[1], "lingGan", mgrI18n.getText("panelOutside.4"), t)
		}
		static get leftLingGanTime() {
			return this.timeData.lingGan - Timer.time
		}
		static loadLingGanRes(t) {
			this.lingGanScore = 0;
			let e = new ResLoader;
			e.add("res/texture/sf_noise_clouds_01.png", RES_TYPE.TEXTURE2D), e.add(db.get_model_db("mofabang").resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.hudie).resPath, RES_TYPE.PREFAB3D), e.add(db.get_animation_db("mozhang_anim-mz_idle").path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db("mozhang_anim-mz_atk01").path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db("mozhang_anim-mz_atk02").path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.ZHUAN_SHEN).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_effect_db("109").res, RES_TYPE.PREFAB3D), e.add(db.get_effect_db("110").res, RES_TYPE.PREFAB3D), e.add(db.get_effect_db("111").res, RES_TYPE.PREFAB3D), e.add(db.get_effect_db("112").res, RES_TYPE.PREFAB3D), mgrAlert.openWait(e, t)
		}
		static startLingGan() {
			this.lingGanScore = 0, this.curLingGanIndex = this.getGameLevel(db.get_linggan_db_arr()), this.curLingGanDb = db.get_linggan_db(this.curLingGanIndex), BaseFacade.mGoal.commit(ACTION_ID.PLAY_GAME, 1, "linggan"), mgrSdk.tryStartRecord(), GameStatistics.statisOnStageStart(7511)
		}
		static addButterflyScore() {
			this.lingGanScore += this.curLingGanDb.butterflyScore
		}
		static calcSuitShiShangZhi(t) {
			let e = db.get_linggan_db(this.curLingGanIndex),
				a = db.get_suit_db(t).parts,
				i = 0;
			for (let t = a.length - 1; t >= 0; t--) BaseFacade.mItem.isOwned(a[t]) && (i += mgrPart.calcPartScore(a[t], e));
			if (0 == i)
				for (let t = a.length - 1; t >= 0; t--) i += mgrPart.calcPartScore(a[t], e);
			return 0 | i
		}
		static getLingGanSuits(t, e) {
			let a = mgrSuit.getAllSuits();
			for (var i = a.length - 1; i >= 0; i--)
				for (var s = db.get_suit_db(a[i]).parts, n = s.length - 1; n >= 0; n--)
					if (BaseFacade.mItem.isOwned(s[n])) {
						t.push(a[i]), a.splice(i, 1);
						break
					} e.push(...a)
		}
		static finishLingGan(t) {
			if (GameStatistics.statisCommonEvent(3054), GameStatistics.statisOnStageEnd(7511), BaseFacade.mItem.addItem("1005", 5, null), BaseFacade.mItem.subItem("1020", db.game_cnf.butterfly_cost[1], null), this.timeData.lingGan = Timer.time + this.playDeltaTime, t) {
				let t = this.getGameLevel(db.get_linggan_db_arr()),
					e = db.get_linggan_db(t);
				return this.getGameAward(e, 100)
			}
			return this.getGameAward(this.curLingGanDb, this.lingGanScore)
		}
		static checkLaJiPlayable(t) {
			this.checkGamePlayable(db.game_cnf.garbage_cost[1], "laJi", mgrI18n.getText("panelOutside.5"), t)
		}
		static get leftLaJiTime() {
			return this.timeData.laJi - Timer.time
		}
		static loadLajiGame(t) {
			let e = new ResLoader;
			e.add(db.get_animation_db(MODEL_ANIM.LAJI_1).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.LAJI_2).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.LAJI_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.LAJI_CUO).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.LAJI_WANCHENG).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_LAJI_DIU01).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_LAJI_DIU02).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_LAJI_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_LAJI_CUO).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_LAJI_WANCHENG).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_spine_db("lajitong1").skeletonData, RES_TYPE.BUFFER), e.add(db.get_spine_db("lajitong2").skeletonData, RES_TYPE.BUFFER), mgrAlert.openWait(e, t)
		}
		static startLaJi() {
			this.lajiScore = 0, this.curLajiIndex = this.getGameLevel(db.get_laji_level_db_arr()), this.curLajiLevelDb = db.get_laji_level_db(this.curLajiIndex), BaseFacade.mGoal.commit(ACTION_ID.PLAY_GAME, 1, "laji"), mgrSdk.tryStartRecord(), GameStatistics.statisOnStageStart(7512)
		}
		static createLaJi() {
			let t = [],
				e = db.get_laji_db_arr(),
				a = e.length;

			function getLaji(i) {
				let s = Mathf.random(a);
				for (var n = 0; n < a; n++) {
					var o = (n + s) % a;
					if (e[o].bSpe == i) {
						t.push(o);
						break
					}
				}
			}
			for (let t = this.curLajiLevelDb.speLajiCount; t > 0; t--) getLaji(!0);
			for (let t = this.curLajiLevelDb.lajiCount - this.curLajiLevelDb.speLajiCount; t > 0; t--) getLaji(!1);
			return Mathf.shuffle(t), t
		}
		static addLajiScore(t) {
			t.bSpe ? this.lajiScore += this.curLajiLevelDb.speLajiScore : this.lajiScore += this.curLajiLevelDb.lajiScore
		}
		static finishLaJi(t) {
			if (GameStatistics.statisCommonEvent(3043), GameStatistics.statisOnStageEnd(7512), BaseFacade.mItem.addItem("1005", 5, null), BaseFacade.mItem.subItem("1020", db.game_cnf.garbage_cost[1], null), this.timeData.laJi = Timer.time + this.playDeltaTime, t) {
				let t = this.getGameLevel(db.get_laji_level_db_arr()),
					e = db.get_laji_level_db(t);
				return this.getGameAward(e, 100)
			}
			return this.getGameAward(this.curLajiLevelDb, this.lajiScore)
		}
	}
	mgrOutside.timeData = {
		lingGan: 0,
		laJi: 0,
		paiShou: 0,
		cztg: 0
	}, mgrOutside.playDeltaTime = 20, mgrOutside.curLingGanIndex = 0, mgrOutside.lingGanScore = 0, mgrOutside.chooseSuitIndex = 0;
	class mgrSkincare extends _mgrBase {
		static onload() {}
		static checkPlayable(t) {
			if (this.isXinQingFull) mgrAlert.alertDialog(mgrI18n.getText("mgrSkincare.1"));
			else {
				mgrAdv.checkActive("one_click_interact") ? (mgrAdv.statisVideoShow("one_click_interact"), mgrAlert.alertAdvDialog(mgrI18n.getText("mgrSkincare.2"), mgrI18n.getText("schoolYearbookItem.2"), () => {
					mgrAdv.statisVideoClick("one_click_interact"), mgrAdv.dispatchAdv("one_click_interact", {
						gameName: mgrI18n.getText("mgrSkincare.3")
					}, !0)
				}, mgrI18n.getText("mgrOutside.2"), () => {
					mgrAlert.alertDialog(mgrI18n.getText("mgrSkincare.4"), mgrI18n.getText("schoolYearbookItem.2"), () => {
						t && t(), mgrSdk.startRecordVideo()
					}, function() {})
				})) : mgrAlert.alertDialog(mgrI18n.getText("mgrSkincare.4"), mgrI18n.getText("schoolYearbookItem.2"), () => {
					t && t(), mgrSdk.startRecordVideo()
				}, function() {})
			}
		}
		static startSkincare() {
			this.skincareScore = 0;
			let t = mgrOutside.getGameLevel(db.get_skincare_db_arr());
			this.curSkincareDb = db.get_skincare_db(t), mgrSdk.tryStartRecord(), GameStatistics.statisOnStageStart(7508)
		}
		static finishOpt(t) {
			BaseFacade.mItem.subItem(t, 1, null);
			let e = db.get_item_db(t);
			this.skincareScore += DbExt.getSkincareScore(e)
		}
		static finishOptAll(t) {
			BaseFacade.mItem.setItem(t, 0);
			let e = db.get_item_db(t);
			this.skincareScore += DbExt.getSkincareScore(e)
		}
		static finishSkincare(t) {
			GameStatistics.statisOnStageEnd(7508), BaseFacade.mGoal.commit(ACTION_ID.SKINCARE);
			let e = mgrGame.curRoleUpDb.xinQingAddition;
			switch (mgrOutside.getGameAwardCount(t ? 100 : this.skincareScore)) {
				case 3:
					break;
				case 2:
					e *= .75;
					break;
				case 1:
					e *= .5;
					break;
				case 0:
					e = 0
			}
			e |= 0;
			let a = BaseFacade.mItem.getItemCount("1020");
			return a >= mgrGame.curRoleUpDb.xinQingMax ? 0 : (a + e > mgrGame.curRoleUpDb.xinQingMax && (e = mgrGame.curRoleUpDb.xinQingMax - a), BaseFacade.mItem.addItem("1020", e, null), e)
		}
		static get isXinQingFull() {
			return BaseFacade.mItem.getItemCount("1020") >= .7 * mgrGame.curRoleUpDb.xinQingMax
		}
		static getItemPrice(t) {
			let e = mgrGame.curRoleUpDb[t];
			return e || db.get_item_db(t).num1
		}
	}
	class SkincareItem extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/SkincareItem.json", this._exportNodeInfo = {
				cc_normalNode: "Laya.Sprite",
				cc_itemCount: "Laya.Label",
				cc_priceNode: "Laya.Sprite",
				cc_costIcon: "Laya.Sprite",
				cc_costCount: "Laya.Label",
				cc_advNode: "Laya.Sprite",
				cc_score: "Laya.Label"
			}, this.create()
		}
		onCreateComplete() {
			this.addComponent(UIButton), UiHelper.addUIButtonClick(this.resNode, this.onClick.bind(this)), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgItemChange(t) {
			this.itemDb && this.itemDb.id == t.itemId && this.setItem(t.itemId)
		}
		onMsgAdvShowSuc(t) {
			"skincare_item" == t.advName && t.params == this.itemDb.id && (BaseFacade.mItem.addItem(t.params, 1, null), this.setItem(this.itemDb.id), SkincareItem.advCount++, _G.sendMsg("UI_SELECT_OPT_ITEM", {
				itemDb: this.itemDb,
				optType: this.optType,
				item: this
			}))
		}
		setItem(t) {
			if (!this.callable) return this.safeCall(this.setItem, t), this;
			let e = db.get_item_db(t);
			this.itemDb = e, this.resNode.loadImage(e.icon), this.score.text = mgrI18n.getText("skincareItem.1") + "+" + DbExt.getSkincareScore(e);
			var a = BaseFacade.mItem.getItemCount(t);
			if (a > 0) this.normalNode.visible = !0, this.priceNode.visible = !1, this.advNode.visible = !1, this.itemCount.text = a + "", this.resNode.setVisible(!0);
			else switch (e.order) {
				case 0:
				case 1:
					this.normalNode.visible = !1, this.priceNode.visible = !0, this.advNode.visible = !1;
					var i = 0 == e.order ? "1001" : "1000";
					this.costIcon.loadImage(db.get_item_db(i).icon), this._costCount = mgrSkincare.getItemPrice(t), this.costCount.text = this._costCount + "", this._costItem = i;
					break;
				case 2:
					SkincareItem.advCount < 1 && mgrAdv.getActive("skincare_item") ? (this.resNode.setVisible(!0), mgrAdv.statisVideoShow("skincare_item")) : this.resNode.setVisible(!1), this.normalNode.visible = !1, this.priceNode.visible = !1, this.advNode.visible = !0, this._costItem = null
			}
			return this
		}
		setOptType(t) {
			return this.optType = t, this
		}
		getIconPos() {
			return UiHelper.getSelfGlobalPos(this.resNode)
		}
		onClick() {
			_G.isGuiding || BaseFacade.mItem.isOwned(this.itemDb.id) ? _G.sendMsg("UI_SELECT_OPT_ITEM", {
				itemDb: this.itemDb,
				optType: this.optType,
				item: this
			}) : 2 == this.itemDb.order ? (mgrAdv.statisVideoClick("skincare_item"), mgrAdv.dispatchAdv("skincare_item", this.itemDb.id, !0)) : BaseFacade.mItem.subItem(this._costItem, this._costCount, 27) ? (BaseFacade.mItem.addItem(this.itemDb.id, 1, null), this.setItem(this.itemDb.id), _G.sendMsg("UI_SELECT_OPT_ITEM", {
				itemDb: this.itemDb,
				optType: this.optType,
				item: this
			})) : mgrAlert.alertNotEnough(this._costItem)
		}
	}
	SkincareItem.advCount = 0;
	class FillRecoreder {
		constructor(t, e, a = 1) {
			if (this.destroyed = !1, this.checkArr = [], this.fillCount = 0, this.leftFillCount = 0, this.rightFillCount = 0, this.totalCount = 0, this.width = t, this.height = e, a instanceof Array) {
				this.fillData = a, this.scaleX = a.length / t, this.scaleY = a[0].length / e, this.dataWidth = a.length, this.dataHeight = a[0].length;
				for (var i = 0, s = this.dataWidth; i < s; i++)
					for (var n = 0, o = this.dataHeight; n < o; n++) a[i][n] && this.totalCount++
			} else this.scaleX = a, this.scaleY = a, this.dataWidth = Math.floor(t * a), this.dataHeight = Math.floor(e * a), this.totalCount = this.dataWidth * this.dataHeight;
			this.halfWidth = this.dataWidth / 2;
			for (s = 0; s < this.dataWidth; s++) this.checkArr.push(new Array(this.dataHeight))
		}
		dispose() {
			this.destroyed = !0, this.checkArr = null
		}
		fillUV(t, e, a) {
			let i = t.x * this.width,
				s = t.y * this.height;
			this.fill(i, s, e, a)
		}
		fill(t, e, a, i) {
			t = Math.round(t * this.scaleX), e = Math.round(e * this.scaleY), a = Math.ceil(a * this.scaleX), i = Math.ceil(i * this.scaleY);
			let s = Math.max(t - a, 0),
				n = Math.max(e - i, 0),
				o = Math.min(t + a, this.dataWidth),
				r = Math.min(e + i, this.dataHeight);
			for (let t = s; t < o; t++)
				for (let e = n; e < r; e++) this.checkArr[t][e] || (this.checkArr[t][e] = !0, this.fillData ? this.fillData[t][e] && this.onDataChange(t, e) : this.onDataChange(t, e))
		}
		onDataChange(t, e) {
			this.fillCount++, t < this.halfWidth ? this.leftFillCount++ : this.rightFillCount++
		}
		check(t, e) {
			return t = Math.round(t * this.scaleX), e = Math.round(e * this.scaleY), this.checkArr[t][e]
		}
		get percent() {
			return this.fillCount / this.totalCount
		}
		get leftPercent() {
			return this.leftFillCount / (this.totalCount / 2)
		}
		get rightPercet() {
			return this.rightFillCount / (this.totalCount / 2)
		}
	}
	class MeshPicker {
		static pick(t, e, a) {
			let i = e.origin.clone(),
				s = e.direction.clone();
			if (t instanceof Laya.MeshSprite3D) {
				let e = this._temp_mat4;
				t.transform.worldMatrix.invert(e), Laya.Vector3.transformCoordinate(i, e, i), Laya.Vector3.TransformNormal(L, e, L);
				var n = this.getVerts(t)
			} else {
				this.calcSkinnedMeshVerts(t, a);
				n = this.getVertsWorldLocationCache(t)
			}
			let o = t.meshFilter.sharedMesh.subMeshCount,
				r = {};
			for (var l = 0; l < o; l++)
				if (null == a || ~a.indexOf(l))
					for (var c = this.getIndicesInSubMesh(t, l), h = 0, d = c.length; h < d; h += 3) {
						if (this.intersectTriangle(i, s, n[c[h]], n[c[h + 1]], n[c[h + 2]], r)) {
							var _ = c[h],
								g = c[h + 1],
								u = c[h + 2],
								m = this.getUVs(t),
								p = m[_],
								S = m[g],
								b = m[u],
								L = r.u,
								I = r.v,
								A = 1 - L - I,
								E = p.x * A + S.x * L + b.x * I,
								f = p.y * A + S.y * L + b.y * I;
							let e = new Laya.Vector2(E, f);
							return t instanceof Laya.MeshSprite3D && Laya.Vector3.transformCoordinate(r.p, t.transform.worldMatrix, r.p), {
								uv: e,
								point: r.p
							}
						}
						break
					}
			return null
		}
		static pickUVInDistance(t, e, a = .1, i) {
			let s = e.origin.clone(),
				n = e.direction.clone();
			if (t instanceof Laya.MeshSprite3D) {
				let l = this._temp_mat4;
				t.transform.worldMatrix.invert(l), Laya.Vector3.transformCoordinate(s, l, s), Laya.Vector3.TransformNormal(n, l, n);
				var o = this.getMeshNearestVertInfo(t, e, a, i),
					r = this.getVerts(t)
			} else o = this.getSkinnedMeshNearestVertInfo(t, e, a, i), r = this.getVertsWorldLocationCache(t);
			if (o) {
				let e = t.meshFilter.sharedMesh.subMeshCount,
					a = o.index,
					y = {};
				for (var l = 0; l < e; l++)
					if (null == i || ~i.indexOf(l))
						for (var c = this.getIndicesInSubMesh(t, l), h = 0, d = c.length; h < d; h += 3)
							for (var _ = 0; _ < 3; _++)
								if (c[h + _] == a) {
									if (this.intersectTriangle(s, n, r[c[h]], r[c[h + 1]], r[c[h + 2]], y)) {
										var g = c[h],
											u = c[h + 1],
											m = c[h + 2],
											p = this.getUVs(t),
											S = p[g],
											b = p[u],
											L = p[m],
											I = y.u,
											A = y.v,
											E = 1 - I - A,
											f = S.x * E + b.x * I + L.x * A,
											C = S.y * E + b.y * I + L.y * A;
										return new Laya.Vector2(f, C)
									}
									break
								} let T = this.getUVs(t)[a];
				if (T) return T.clone()
			}
		}
		static getMeshNearestVertInfo(t, e, a = .1, i) {
			let s = e.origin.clone(),
				n = e.direction.clone();
			Laya.Vector3.add(s, n, n);
			let o = this._temp_mat4;
			t.transform.worldMatrix.invert(o), Laya.Vector3.transformCoordinate(s, o, s), Laya.Vector3.transformCoordinate(n, o, n);
			let r = t.meshFilter.sharedMesh.subMeshCount;
			var l;
			for (let e = 0; e < r; e++)
				if (null == i || ~i.indexOf(e)) {
					var c = this.getVertsInSubMesh(t, e);
					for (let t = c.length - 1; t >= 0; t--) {
						var h = this.point2line(s, n, c[t].pos);
						h > a || (a = h, l = c[t])
					}
				} if (l) {
				let e = new Laya.Vector3;
				return Laya.Vector3.transformCoordinate(l.pos, t.transform.worldMatrix, e), {
					index: l.index,
					pos: e
				}
			}
		}
		static calcSkinnedMeshVerts(t, e, a = !1) {
			if (!(a || this._lastWorldPosCalcTime <= Date.now())) return;

			function addDataToMatrix(t, e, a, i) {
				for (var s = 0; s < 16; s++) i.elements[s] += t[e + s] * a
			}
			let i = ["x", "y", "z", "w"],
				s = this._temp_mat4;
			var n = this.getBoneIndices(t),
				o = this.getBoneWeights(t),
				r = this.getVerts(t),
				l = this.getVertsWorldLocationCache(t);

			function calcWorldPos(t, e) {
				var a = r[t],
					c = function(t, e) {
						! function(t) {
							for (var e = 0; e < 16; e++) t.elements[e] = 0
						}(s);
						for (var a = n[t], r = o[t], l = 0; l < 4; l++) {
							var c = i[l];
							addDataToMatrix(e, 16 * a[c], r[c], s)
						}
						return s
					}(t, e);
				Laya.Vector3.transformCoordinate(a, c, l[t])
			}
			let c = t.meshFilter.sharedMesh.subMeshCount;
			for (let a = 0; a < c; a++)
				if (null == e || ~e.indexOf(a))
					for (var h = t.meshFilter.sharedMesh.getSubMesh(a)._boneIndicesList, d = t.skinnedMeshRenderer._skinnedData[a], _ = 0; _ < h.length; _++)
						for (var g = this.getSkinnedMeshSubMeshSubVertIndices(t, a, _), u = d[_], m = 0, p = g.length; m < p; m++) {
							calcWorldPos(g[m], u)
						}
			this._lastWorldPosCalcTime = Date.now() + 1e3 * this.skinnedVertsWorldPosCalcDeltaTime
		}
		static getSkinnedMeshNearestVertInfo(t, e, a = .1, i) {
			let s = e.origin.clone(),
				n = e.direction.clone();
			Laya.Vector3.add(s, n, n), this.calcSkinnedMeshVerts(t, i);
			var o = this.getVertsWorldLocationCache(t);
			let r = t.meshFilter.sharedMesh.subMeshCount;
			var l = new Laya.Vector3,
				c = new Laya.Vector3(0, 0, 0),
				h = -1;
			for (let e = 0; e < r; e++)
				if (null == i || ~i.indexOf(e))
					for (var d = t.meshFilter.sharedMesh.getSubMesh(e)._boneIndicesList, _ = 0; _ < d.length; _++)
						for (var g = this.getSkinnedMeshSubMeshSubVertIndices(t, e, _), u = 0, m = g.length; u < m; u++) {
							var p = g[u];
							o[p].cloneTo(l);
							var S = this.point2line(s, n, l);
							S > a || (a = S, h = p, l.cloneTo(c))
						}
			return h < 0 ? null : {
				pos: c,
				index: h
			}
		}
		static getSkinnedMeshSubMeshSubVertIndices(t, e, a) {
			var i = t._all_mesh_vert;
			i || (i = [], t._all_mesh_vert = i);
			var s = i[e];
			if (!s) {
				s = [], i[e] = s;
				let a = t.meshFilter.sharedMesh.getSubMesh(e);
				for (var n = a._boneIndicesList, o = a._subIndexBufferCount, r = this.getIndicesInSubMesh(t, e), l = 0; l < n.length; l++) {
					for (var c = {}, h = 0 == l ? 0 : d, d = h + o[l], _ = h; _ < d; _ += 3) c[r[_]] = !0, c[r[_ + 1]] = !0, c[r[_ + 2]] = !0;
					var g = Object.keys(c),
						u = [];
					for (_ = g.length - 1; _ >= 0; _--) u.push(parseInt(g[_]));
					s[l] = u
				}
			}
			return s[a]
		}
		static getVerts(t) {
			if (t._vert_key) return t._vert_key; {
				let e = [];
				return t.meshFilter.sharedMesh.getPositions(e), t._vert_key = e, e
			}
		}
		static getVertsWorldLocationCache(t) {
			if (t._vert_world_key) return t._vert_world_key; {
				let e = [];
				return t.meshFilter.sharedMesh.getPositions(e), t._vert_world_key = e, e
			}
		}
		static getUVs(t) {
			if (t._uv_key) return t._uv_key; {
				let e = [];
				return t.meshFilter.sharedMesh.getUVs(e), t._uv_key = e, e
			}
		}
		static getBoneIndices(t) {
			if (t._bone_indices) return t._bone_indices; {
				let e = [];
				return t.meshFilter.sharedMesh.getBoneIndices(e), t._bone_indices = e, e
			}
		}
		static getBoneWeights(t) {
			if (t._bone_weights) return t._bone_weights; {
				let e = [];
				return t.meshFilter.sharedMesh.getBoneWeights(e), t._bone_weights = e, e
			}
		}
		static getVertsInSubMesh(t, e) {
			let a = t._vert_group;
			if (a || (a = [], t._vert_group = a), a[e]) return a[e]; {
				let n = this.getVerts(t),
					o = this.getIndicesInSubMesh(t, e),
					r = {};
				for (var i = 0; i < o.length; i++) r[o[i]] = !0;
				let l = Object.keys(r),
					c = [];
				for (i = 0; i < l.length; i++) {
					var s = parseInt(l[i]);
					c.push({
						pos: n[s],
						index: s
					})
				}
				return a[e] = c, c
			}
		}
		static getIndicesInSubMesh(t, e) {
			let a = t._indices_group;
			if (a || (a = [], t._indices_group = a), a[e]) return a[e]; {
				let i = t.meshFilter.sharedMesh.getSubMesh(e).getIndices();
				return a[e] = i, i
			}
		}
		static point2line(t, e, a) {
			let i = Math.sqrt,
				s = Math.pow,
				n = i(s(t.x - e.x, 2) + s(t.y - e.y, 2) + s(t.z - e.z, 2)),
				o = i(s(t.x - a.x, 2) + s(t.y - a.y, 2) + s(t.z - a.z, 2)),
				r = i(s(a.x - e.x, 2) + s(a.y - e.y, 2) + s(a.z - e.z, 2)),
				l = (s(o, 2) + s(n, 2) - s(r, 2)) / (2 * n * o);
			return o * i(1 - s(l, 2))
		}
		static intersectTriangle(t, e, a, i, s, n) {
			let o = 0,
				r = 0,
				l = 0,
				c = this.TEMP_VEC3S[0];
			Laya.Vector3.subtract(i, a, c);
			let h = this.TEMP_VEC3S[1];
			Laya.Vector3.subtract(s, a, h);
			let d = this.TEMP_VEC3S[2];
			Laya.Vector3.cross(e, h, d);
			let _ = Laya.Vector3.dot(c, d),
				g = this.TEMP_VEC3S[3];
			if (_ > 0 ? Laya.Vector3.subtract(t, a, g) : (Laya.Vector3.subtract(a, t, g), _ = -_), _ < 1e-8) return !1;
			if ((r = Laya.Vector3.dot(g, d)) < 0 || r > _) return !1;
			let u = this.TEMP_VEC3S[4];
			if (Laya.Vector3.cross(g, c, u), (l = Laya.Vector3.dot(e, u)) < 0 || r + l > _) return !1;
			if (o = Laya.Vector3.dot(h, u), n) {
				let a = 1 / _;
				o *= a, r *= a, l *= a, n.t = o, n.u = r, n.v = l;
				let i = e.clone();
				Laya.Vector3.scale(i, o, i), Laya.Vector3.add(t, i, i), n.p = i
			}
			return !0
		}
		static debugSkinnedMesh(t, e, a) {
			this.calcSkinnedMeshVerts(t, a, !0);
			let i = t.meshFilter.sharedMesh.subMeshCount;
			this.temp_lineSprite && !this.temp_lineSprite.destroyed && this.temp_lineSprite.destroy(), this.temp_lineSprite = t.scene.addChild(new Laya.PixelLineSprite3D(65536));
			let s = this.getVertsWorldLocationCache(t);
			for (let u = 0; u < i; u++)
				if (null == a || ~a.indexOf(u))
					for (var n = t.meshFilter.sharedMesh.getSubMesh(u), o = n._boneIndicesList, r = t.skinnedMeshRenderer._skinnedData[u], l = n._subIndexBufferCount, c = this.getIndicesInSubMesh(t, u), h = 0; h < o.length; h++) {
						r[h];
						for (var d = 0 == h ? 0 : _, _ = d + l[h], g = d; g < _; g += 3) s[c[g]].cloneTo(this.temp_pos1), s[c[g + 1]].cloneTo(this.temp_pos2), s[c[g + 2]].cloneTo(this.temp_pos3), this.temp_lineSprite.addLine(this.temp_pos1, this.temp_pos2, e, e), this.temp_lineSprite.addLine(this.temp_pos2, this.temp_pos3, e, e), this.temp_lineSprite.addLine(this.temp_pos3, this.temp_pos1, e, e)
					}
		}
	}
	MeshPicker.skinnedVertsWorldPosCalcDeltaTime = .1, MeshPicker._lastWorldPosCalcTime = 0, MeshPicker._temp_mat4 = new Laya.Matrix4x4, MeshPicker.TEMP_VEC3S = [new Laya.Vector3, new Laya.Vector3, new Laya.Vector3, new Laya.Vector3, new Laya.Vector3], MeshPicker.temp_pos1 = new Laya.Vector3, MeshPicker.temp_pos2 = new Laya.Vector3, MeshPicker.temp_pos3 = new Laya.Vector3;
	class RenderMask {
		constructor(t) {
			this.destroyed = !1, this.screenPos = new Laya.Vector2, this.outRay = new Laya.Ray(new Laya.Vector3, new Laya.Vector3), this.bDirty = !1, this.nextTouchTime = 0, this.startPos = new Laya.Vector2, this.startUV = new Laya.Vector2, RenderMask.bWorlking && console.warn("RenderMask is working."), RenderMask.bWorlking = !0, this.brushOffset = new Laya.Vector2, this.init(t)
		}
		dispose() {
			this.destroyed = !0, this.clear(), this.camera && (this.camera.renderTarget = null, this.camera.destroy(), this.camera = null), this.cameraRenderTarget && this.cameraRenderTarget.destroy(), this.fillChecker && (this.fillChecker.dispose(), this.fillChecker = null), this.normalCamera = null, RenderMask.bWorlking = !1
		}
		clear() {
			this.model && (this.model.setLayer(0), this.model = null), this.paintMat && (this.paintMat.maskTexture = mgrMaterial.EMPTY_TEX2D, this.paintMat.newTexture = null, this.paintMat.setState(32), this.paintMat = null), this.clearMask(), this.clearBrush()
		}
		clearMask() {
			RenderMask.CONTEXT && RenderMask.CONTEXT.clear(), this.maskSprite && (this.maskSprite.destroy(), this.maskSprite = null, this.maskRtx.destroy(), this.maskRtx = null)
		}
		clearBrush() {
			this.brushId = null, this.brush && (this.brush.destroy(), this.brush = null)
		}
		init(t) {
			this.normalCamera = t;
			let e = new Laya.Camera(t.aspectRatio, -50, 50);
			e.orthographic = !0, e.orthographicVerticalSize = .001, this.camera = e, e.active = !1, e.clearFlag = Laya.Camera.CLEARFLAG_SOLIDCOLOR, e.clearColor = new Laya.Vector4(0, 0, 0, 0), e.cullingMask = t.cullingMask, t.parent.addChild(e), this.syncCamera(), e.removeAllLayers(), e.addLayer(2), this.cameraRenderTarget = new Laya.RenderTexture(1, 1, Laya.RenderTexture.FORMAT_R8G8B8A8), RenderMask.CONTEXT || (RenderMask.CONTEXT = new Laya.Context);
			let a = this.cameraRenderTarget;
			e.renderTarget = a;
			RenderMask.OUT_BITMAP || (RenderMask.OUT_BITMAP = new Uint8Array(4), RenderMask.EMPTY_SPRITE = (new Laya.Sprite).loadImage(GConfig.img_alpha_mask))
		}
		setBrush(t) {
			if (this.clearBrush(), this.brushId = t, t) {
				let e = db.get_brush_db(t);
				e && e.resPath && mgrRes.loadRes(e.resPath, RES_TYPE.IMAGE, e => {
					this.brushId == t && (this.brush = new Laya.Sprite, this.brush.texture = e)
				})
			} else this.paintMat && this.paintMat.setToNormal()
		}
		setPaintMaterail(t, e, a, i = .5) {
			mgrRes.loadTexture2D(a, s => {
				if (t && !t.destroyed && t.sharedMaterials) {
					this.model = t, t.setLayer(2), this.matIndex = e, this.paintMat = t.sharedMaterials[e], this.paintMat.newTexture = s, this.meshSprite = t.skinnedMeshSprite || UiHelper.findSkinnedMeshSprite(t.resNode, !0), this.clearMask();
					let n = Math.floor(s.width * i),
						o = Math.floor(s.height * i);
					this.maskSprite = (new Laya.Sprite).size(n, o), this.maskRtx = new Laya.RenderTexture2D(n, o, Laya.RenderTexture2D.FORMAT_R8G8B8A8), this.maskRtx.clear(0, 0, 0, 0), RenderMask.CONTEXT.clear(), RenderMask.CONTEXT.size(n, o), this.renderToMask(RenderMask.EMPTY_SPRITE, -1, -1);
					let r = mgrPart.getPaintData(a);
					this.fillChecker = new FillRecoreder(n, o, r || .3), this.maskWidth = n, this.maskHeight = o, this.paintMat.maskTexture = this.maskRtx, this.paintMat.setState(4)
				}
			})
		}
		refreshBrushOffset(t) {
			if (t && this.brushId) {
				let e = db.get_brush_db(this.brushId);
				if (e && e.anchor.length >= 2) {
					let a = Laya.Point.TEMP.setTo(e.anchor[0], e.anchor[1]);
					return t.localToGlobal(a, !1), void this.brushOffset.setValue(a.x - Laya.stage.mouseX, a.y - Laya.stage.mouseY)
				}
			}
			this.brushOffset.setValue(0, 0)
		}
		drawBrush() {
			if (this.brush) {
				if (this.bDirty) return;
				this.bDirty = !0, this.tryRender()
			}
		}
		endDraw() {
			this.startPos = null
		}
		tryRender() {
			if (this.destroyed) return;
			let t = this.pickUVFromPicker();
			if (t) {
				var e = [];
				if (this.startPos) {
					let a = this.startPos.subSelf(this.screenPos).mag(),
						i = t.sub(this.startUV).divSelf(a / 10);
					for (let t = 10; t < a; t += 10) e.push(this.startUV.add(i));
					e.push(t), this.startPos.set(this.screenPos), this.startUV.set(t)
				} else this.startPos = this.screenPos.clone(), this.startUV.set(t), e.push(t);
				Laya.timer.frameOnce(1, this, this.render, [e], !1)
			}
		}
		pickUVFromPicker() {
			let t = (Laya.stage.mouseX + this.brushOffset.x) * Laya.stage.clientScaleX,
				e = (Laya.stage.mouseY + this.brushOffset.y) * Laya.stage.clientScaleY;
			this.screenPos.setValue(t, e), this.normalCamera.viewportPointToRay(this.screenPos, this.outRay);
			let a = MeshPicker.pickUVInDistance(this.meshSprite, this.outRay, .3, [this.matIndex]);
			return a && (a.x *= this.maskWidth, a.y *= this.maskHeight), a
		}
		pickUVFromCamera() {
			let t = (Laya.stage.mouseX + this.brushOffset.x) * Laya.stage.clientScaleX,
				e = (Laya.stage.mouseY + this.brushOffset.y) * Laya.stage.clientScaleY;
			this.screenPos.setValue(t, e), this.normalCamera.viewportPointToRay(this.screenPos, this.outRay), Laya.Vector3.add(this.outRay.origin, this.outRay.direction, this.outRay.direction), this.camera.transform.position = this.outRay.origin, this.camera.transform.lookAt(this.outRay.direction, RenderMask.up), this.renderBefore(), this.camera.render(), this.renderAfter();
			let a = this.cameraRenderTarget,
				i = RenderMask.OUT_BITMAP;
			a.getData(0, 0, 1, 1, i);
			var s = 0,
				n = 0;
			t: for (var o = 0; o < 1; o++)
				for (var r = 0; r < 1; r++) {
					if (n = i[s]) {
						var l = i[s + 1] / 255 * this.maskWidth | 0,
							c = i[s + 2] / 255 * this.maskHeight | 0;
						break t
					}
					s += 4
				}
			if (n) return RenderMask.debug && UiHelper.debug_sprite(a), new Laya.Vector2(l, c)
		}
		render(t) {
			if (this.bDirty = !1, !this.destroyed && this.brush)
				for (var e = 0; e < t.length; e++) {
					var a = t[e];
					this.fillChecker.fill(a.x, a.y, this.brush.width / 2, this.brush.height / 2), this.renderToMask(this.brush, a.x - this.brush.width / 2, a.y - this.brush.height / 2)
				}
		}
		renderToMask(t, e, a) {
			this.maskRtx && t && (UiHelper.drawToRtx(t, e, a, this.maskRtx, RenderMask.CONTEXT), RenderMask.CONTEXT.clear())
		}
		syncCamera() {
			this.camera.fieldOfView = this.normalCamera.fieldOfView, this.camera.transform.position = this.normalCamera.transform.position, this.camera.transform.rotation = this.normalCamera.transform.rotation
		}
		checkPercent(t, e) {
			if (this.fillChecker) {
				let a = 0;
				return this.fillChecker.leftPercent > t && (a += 1), this.fillChecker.rightPercet > e && (a += 2), a
			}
			return 0
		}
		get fillPercent() {
			return this.fillChecker ? this.fillChecker.percent : 0
		}
		fillMask(t) {
			if (this.maskSprite) {
				let e = this.maskWidth,
					a = this.maskHeight,
					i = t ? 0 : e / 2;
				this.maskSprite.graphics.clear(), this.maskSprite.graphics.drawRect(i, 0, e / 2, a, "#ffffff");
				let s = (t ? .25 : .75) * e | 0;
				this.fillChecker.fill(s, a / 2, e / 4, a / 4), this.renderToMask(this.maskSprite, 0, 0)
			}
		}
		renderBefore() {
			if (this.model && this.model.sharedMaterials) {
				let t = this.model.sharedMaterials;
				for (let e = 0; e < t.length; e++) t[e].setState(2);
				this.paintMat.setState(1), this.camera.active = !0
			}
		}
		renderAfter() {
			if (this.model && this.model.sharedMaterials) {
				let t = this.model.sharedMaterials;
				for (let e = 0; e < t.length; e++) t[e].setState(32);
				this.paintMat.setState(4), this.camera.active = !1
			}
		}
		debugMesh() {
			this.meshSprite && MeshPicker.debugSkinnedMesh(this.meshSprite, Laya.Color.RED, [this.matIndex])
		}
	}
	RenderMask.debug = !1, RenderMask.bWorlking = !1, RenderMask.up = new Laya.Vector3(0, 1, 0);
	class OperateBase {
		constructor(t, e, a) {
			this.destroyed = !1, this.isHold = !1, this.isTouched = !1, this.isFinish = !1, this.lockRight = !1, this.brushRadius = 0, this.avatar = t, this.scene = e, this.camera = a, OperateBase.renderMask || (OperateBase.renderMask = new RenderMask(a)), this.onCreate()
		}
		dispose() {
			this.destroyed = !0, this.scene = null, this.camera = null, OperateBase.renderMask && (OperateBase.renderMask.dispose(), OperateBase.renderMask = null), this.faceAttachNodes = null
		}
		finish() {
			this.isFinish || (this.isFinish = !0, OperateBase.renderMask && OperateBase.renderMask.clear(), this.onFinish(), _G.sendMsg("OPT_FINISH"))
		}
		setHoldState(t) {
			this.isHold = t
		}
		touchDown() {
			this.isTouched = !0, this.synchMousePoint(), this.onTouchDown()
		}
		touchMove() {
			if (this.isTouched) {
				if (this.synchMousePoint(), this.lockRight && OperateBase.anchorPos.x > _G.canvasWidth / 2) return;
				OperateBase.renderMask && this.brushDb && OperateBase.renderMask.drawBrush(), this.onTouchMove()
			}
		}
		touchUp() {
			this.isTouched && (this.isTouched = !1, OperateBase.renderMask && OperateBase.renderMask.endDraw(), this.onTouchUp())
		}
		setBrush(t) {
			if (t) {
				let e = db.get_brush_db(t);
				this.brushDb = e
			} else this.brushDb = null;
			OperateBase.renderMask && OperateBase.renderMask.setBrush(t)
		}
		refreshBrushOffset(t) {
			OperateBase.renderMask && OperateBase.renderMask.refreshBrushOffset(t)
		}
		getBrushOffset() {
			if (OperateBase.renderMask) return OperateBase.renderMask.brushOffset
		}
		checkHold() {
			this.isHold || (this.isTouched = !1)
		}
		checkEmpty() {
			this.isHold && (this.isTouched = !1)
		}
		synchMousePoint() {
			OperateBase.anchorPos.setValue(Laya.stage.mouseX + OperateBase.renderMask.brushOffset.x, Laya.stage.mouseY + OperateBase.renderMask.brushOffset.y);
			let t = OperateBase.touchRay;
			UiHelper.screenToRay(OperateBase.anchorPos, this.camera, t), t.origin.cloneTo(OperateBase.rayStart), Laya.Vector3.add(t.origin, t.direction, OperateBase.rayEnd)
		}
		convertWorldToScreen(t, e) {
			UiHelper.worldToScreen(this.camera, t, e)
		}
		testFaceNode(t, e, a) {
			if (!this.faceAttachNodes) {
				let t = [];
				for (var i = 0; i < OperateBase.FACE_ATTACH_NODE.length; i++) t.push(this.avatar.baseFace.findChild(OperateBase.FACE_ATTACH_NODE[i]).transform);
				this.faceAttachNodes = t
			}
			let s = [];
			a = a || this.faceAttachNodes.length;
			let n = OperateBase.rayStart,
				o = OperateBase.rayEnd;
			for (i = e; i < a; i++) Mathf.point2line(n, o, this.faceAttachNodes[i].position) <= t && s.push(OperateBase.FACE_ATTACH_NODE[i]);
			return s
		}
	}
	OperateBase.VEC2_TEMP = new Laya.Vector2, OperateBase.VEC3_TEMP = new Laya.Vector3, OperateBase.vec2 = new Laya.Vector2, OperateBase.FACE_RADIUS = .053, OperateBase.FACE_SCREEN_RADIUS = 150, OperateBase.FACE_ATTACH_NODE = ["doudou_bizi01", "doudou_bizi02", "doudou_bizi03", "doudou_etou01", "doudou_etou02", "doudou_etou03", "doudou_etou04", "doudou_etou05", "doudou_meigong01", "doudou_meigong02", "doudou_youtaiyangxue01", "doudou_youtaiyangxue02", "doudou_zuotaiyangxue01", "doudou_zuotaiyangxue02", "doudou_zuolianjia01", "doudou_youlianjia01", "doudou_zuolianjia02", "doudou_youlianjia02", "doudou_xiaba01", "doudou_xiaba02", "doudou_xiaba03"], OperateBase.anchorPos = new Laya.Vector2, OperateBase.touchRay = new Laya.Ray(new Laya.Vector3, new Laya.Vector3), OperateBase.rayStart = new Laya.Vector3, OperateBase.rayEnd = new Laya.Vector3;
	const FINISH_CHECK_COUNT = 20,
		EFFECT_CHECK_GAP2 = 6400;
	class FeiZaoEffect {
		constructor(t, e, a) {
			this._model = _G.poolManager.get(GModel, "paopao"), this._model.setParent(t), this._model.setPosition(e), this._model.setRotation(0, Mathf.random(-20, 20), Mathf.random(360)), this._model.setScale(0, 0, 0);
			let i = .1 * Mathf.random(5, 8);
			cc.tween(this._model.transform).to(.2, {
				localScaleX: i,
				localScaleY: i,
				localScaleZ: i
			}).start();
			let s = _G.pool.get(Laya.Vector2);
			s.setValue(a.x, a.y), this.pos = s
		}
		get isClear() {
			return null == this._model
		}
		dispose() {
			this._model && (cc.clearTween(this._model.transform), _G.poolManager.put(this._model), this._model = null), _G.pool.put(this.pos)
		}
		clear() {
			if (this._model) {
				let t = this._model;
				this._model = null, cc.tween(t.transform).to(.2, {
					localScaleX: 0,
					localScaleY: 0,
					localScaleZ: 0
				}).call(() => {
					_G.poolManager.put(t)
				}).start()
			}
		}
	}
	class OptFeiZao extends OperateBase {
		constructor() {
			super(...arguments), this.lastSoundTime = 0
		}
		dispose() {
			if (this.centerNode = null, this.centerPoint && (_G.pool.put(this.centerPoint), this.centerPoint = null), this.effects) {
				for (var t = 0; t < this.effects.length; t++) this.effects[t].dispose();
				this.effects = null
			}
			super.dispose()
		}
		onCreate() {
			this.centerNode = this.avatar.baseFace.findChild("c_center"), this.centerPoint = _G.pool.get(Laya.Vector3), this.effects = [];
			let t = this.avatar.baseFace.findChild("face_side");
			this.convertWorldToScreen(t.transform.position, OperateBase.VEC2_TEMP), OperateBase.FACE_RADIUS = Math.abs(t.transform.localPositionX), OperateBase.FACE_SCREEN_RADIUS = Math.max(OperateBase.FACE_SCREEN_RADIUS, Math.abs(OperateBase.VEC2_TEMP.x - _G.canvasWidth / 2)), this.avatar.playAnimation(MODEL_ANIM.HUFU_KAISHI);
			let e = this.avatar.baseFace.findChild("cc_paopao");
			this.paopaoNode = e
		}
		onFinish() {}
		onTouchDown() {
			this.checkHold()
		}
		onTouchMove() {
			if (!this.isTouched) return;
			if (PaoPaoEffect.create(), this.lastSoundTime < Timer.time && (this.lastSoundTime = Timer.time + .2, mgrSound.playTalk("yllsd_04")), Mathf.point2line(OperateBase.rayStart, OperateBase.rayEnd, this.centerNode.transform.position) > .077) return;
			let t = [{
				x: 0,
				y: 0
			}, {
				x: -Mathf.random(70, 100),
				y: Mathf.random(70, 100)
			}, {
				x: -Mathf.random(70, 100),
				y: 0
			}, {
				x: -Mathf.random(70, 100),
				y: -Mathf.random(70, 100)
			}, {
				x: 0,
				y: Mathf.random(70, 100)
			}, {
				x: 0,
				y: -Mathf.random(70, 100)
			}, {
				x: Mathf.random(70, 100),
				y: Mathf.random(70, 100)
			}, {
				x: Mathf.random(70, 100),
				y: 0
			}, {
				x: Mathf.random(70, 100),
				y: -Mathf.random(70, 100)
			}];
			for (let e = 0; e < t.length; e++) {
				const a = t[e];
				this.tryAddEffect(new Laya.Vector2(OperateBase.anchorPos.x + a.x, OperateBase.anchorPos.y + a.y))
			}
		}
		onTouchUp() {}
		getFeiZaoData() {
			return this.effects
		}
		tryAddEffect(t) {
			for (var e = 0; e < this.effects.length; e++) {
				var a = this.effects[e].pos;
				if (Mathf.distanceSqr(t, a) < EFFECT_CHECK_GAP2) return
			}
			console.log("feizao add", t);
			let i = OperateBase.VEC2_TEMP;
			this.convertWorldToScreen(this.paopaoNode.transform.position, i), t.sub(i, i), i.mulSelf(OperateBase.FACE_RADIUS / OperateBase.FACE_SCREEN_RADIUS);
			let s = OperateBase.VEC3_TEMP;
			s.setValue(i.x, -i.y, .14), Laya.Vector3.normalize(s, s), Laya.Vector3.scale(s, Mathf.lerpFromInverseLerp(.14, .11, 0, .46, Math.abs(s.x)), s);
			let n = new FeiZaoEffect(this.paopaoNode, s, t);
			this.effects.push(n), this.effects.length >= FINISH_CHECK_COUNT && this.finish()
		}
	}
	class PaoPaoEffect {
		constructor() {
			this.paopaoSprite = (new Laya.Sprite).loadImage("res/ui/pnl_skincare/eff_qipao_01.png")
		}
		static create() {
			if (this._lastTime > Timer.time) return;
			this._lastTime = Timer.time + Mathf.random(10, 30) / 10, _G.pool.get(PaoPaoEffect).random()
		}
		boom() {
			_G.pool.put(this), mgrAlert.playParticleEffect("108", this.paopaoSprite.localToGlobal(Laya.Point.TEMP.setTo(0, 0), !1), 1, 1), this.paopaoSprite.removeSelf()
		}
		random() {
			mgrPanel.getLayerNode(PANEL_LAYER.TIP).addChild(this.paopaoSprite), this.paopaoSprite.pos(_G.canvasWidth / 2 + Mathf.random(-230, 230), _G.canvasHeight / 2 + Mathf.random(-150, 0), !0);
			let t = Mathf.random(150, 400),
				e = Mathf.lerpFromInverseLerp(.3, .7, 400, 150, t);
			this.paopaoSprite.scale(e, e, !0);
			let a = Mathf.random(20, 25) / 10;
			cc.tween(this.paopaoSprite).to(a, {
				y: this.paopaoSprite.y - t
			}).call(this.boom.bind(this)).start()
		}
	}
	PaoPaoEffect._lastTime = 0;
	let MOVE_DELTA = .02;
	class UIDrag extends Laya.Script {
		constructor() {
			super(...arguments), this.touchStart = new Vec2, this.curLocalPosition = new Vec2, this.lerpRatio = 1, this.inertia = !1, this.userData = null, this.movable = !0, this.isTouched = !1, this.lastTouchPosition = new Vec2, this._deltaMoves = []
		}
		onStart() {
			this.dragTarget || this.setDragTarget(this.owner), Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.onMouseUp)
		}
		onDestroy() {
			this.onTouchEndCallback = null, Laya.timer.clearAll(this), Laya.stage.offAllCaller(this), this.isTouched = !1
		}
		setDragTarget(t) {
			this.dragTarget = t
		}
		setBoundary(t, e) {
			this.maxBoundary = t, this.minBoundary = e
		}
		backToOrigin() {
			this.originLocalPosition && (this.dragTarget.pos(this.originLocalPosition.x, this.originLocalPosition.y, !0), this.originLocalPosition = null)
		}
		get velocity() {
			let t = this._deltaMoves.length,
				e = new Vec2(0, 0);
			if (0 == t) return e;
			for (let a = 0; a < t; a++) e.addSelf(this._deltaMoves[a]);
			return e.divSelf(t * MOVE_DELTA)
		}
		setOffset(t, e) {
			this.offset || (this.offset = new Vec2, this.afterOffset = new Vec2), this.offset.setValue(t, e)
		}
		onMouseDown(t) {
			if (!this.isTouched) {
				this.isTouched = !0, this.touchStart.setValue(Laya.stage.mouseX, Laya.stage.mouseY);
				let t = this.dragTarget;
				if (this.originLocalPosition = new Vec2(t.x, t.y), this.offset) {
					let e = Laya.Point.TEMP.setTo(this.touchStart.x, this.touchStart.y);
					e.x += this.offset.x, e.y += this.offset.y, t.parent.globalToLocal(e, !1), this.afterOffset.set(e).subSelf(this.touchStart), t.pos(e.x, e.y, !0), this.curLocalPosition.set(t)
				}
				if (cc.clearTween(t), this.inertia && (this.lastTouchPosition.set(this.touchStart), this._deltaMoves.length = 0), this.onTouchStartCallback && this.onTouchStartCallback(this, this.userData)) return void(this.originLocalPosition = null);
				Laya.timer.loop(1e3 * MOVE_DELTA, this, this._updateMove)
			}
		}
		_updateMove() {
			if (this.isTouched && this.movable && this.originLocalPosition) {
				let t = Vec2.TEMP;
				if (t.setValue(Laya.stage.mouseX, Laya.stage.mouseY), this.inertia) {
					if (this._deltaMoves.length >= 5) {
						let e = this._deltaMoves.shift();
						e.set(t).subSelf(this.lastTouchPosition), this._deltaMoves.push(e)
					} else {
						let e = t.sub(this.lastTouchPosition);
						this._deltaMoves.push(e)
					}
					this.lastTouchPosition.set(t)
				}
				this.offset ? t.addSelf(this.afterOffset) : t.subSelf(this.touchStart).addSelf(this.originLocalPosition), this.curLocalPosition.lerp(t, this.lerpRatio, this.curLocalPosition), this.setPosition(this.curLocalPosition)
			}
		}
		setPosition(t) {
			this.minBoundary && t.clampf(this.minBoundary, this.maxBoundary), this.dragTarget.pos(t.x, t.y, !0)
		}
		onMouseUp(t) {
			Laya.timer.clear(this, this._updateMove), this.isTouched && (this.isTouched = !1, this.onTouchEndCallback && !this.onTouchEndCallback(this, this.userData) && this.movable ? this.backToOrigin() : this.movable && this.inertia ? this._startAutoScroll() : this.backToOrigin())
		}
		_startAutoScroll() {
			let t = this.velocity,
				e = t.mag(),
				a = Mathf.lerpFromInverseLerp(.5, 1, 100, 3e3, e),
				i = t.mulSelf(.5 * a * a),
				s = Vec2.TEMP;
			s.setValue(this.dragTarget.x, this.dragTarget.y), s.addSelf(i), this.scrollTo(s, a)
		}
		scrollTo(t, e, a) {
			this.minBoundary && t.clampf(this.minBoundary, this.maxBoundary);
			let i = cc.tween(this.dragTarget, !0).to(e, {
				x: t.x,
				y: t.y
			}, {
				easing: cc.Ease.expoOut
			});
			a && (i = i.call(a)), i.start()
		}
		lerpTo(t, e = .02) {
			let a = Vec2.TEMP;
			a.setValue(this.dragTarget.x, this.dragTarget.y), a.lerp(t, e, a), this.setPosition(a)
		}
		onStageMouseUp(t) {
			this.onMouseUp(t)
		}
		cancelDrag() {
			this.onMouseUp(null)
		}
	}
	class ShuiDiEffect {
		constructor(t, e, a) {
			this.model = _G.poolManager.get(GModel, "ty_shuidi"), this.model.setParent(t), this.model.initPaint(), this.model.setRotation(0, 90, 0), this.name = e;
			let i = _G.pool.get(Laya.Vector2);
			a.convertWorldToScreen(t.transform.position, i), this.pos = i
		}
		dispose() {
			this.model && (this.model.sharedMaterial && (cc.clearTween(this.model.sharedMaterial), this.model.sharedMaterial.setState(32), this.model.sharedMaterial.transition = 0), _G.poolManager.put(this.model), this.model = null), _G.pool.put(this.pos)
		}
		clear() {
			this.isClear || (this.isClear = !0, this.model && this.model.sharedMaterial && (this.model.sharedMaterial.setState(16), this.model.sharedMaterial.newTexture = mgrMaterial.EMPTY_TEX2D, cc.tween(this.model.sharedMaterial).to(.5, {}, {
				onUpdate: (t, e) => {
					t.transition = e
				}
			}).start()))
		}
	}
	class OptShuiXi extends OperateBase {
		constructor() {
			super(...arguments), this.curTransition = 0, this.transition = 0
		}
		dispose() {
			this._touchEffect && (this._touchEffect.dispose(), this._touchEffect = null), this.paopaoEffects = null;
			for (var t = 0; t < this.shuidiEffects.length; t++) this.shuidiEffects[t].dispose();
			Laya.timer.clearAll(this)
		}
		onCreate() {
			this._touchEffect = _G.poolManager.get(Particle, "101"), this._touchEffect.setParent(mgrAlert.scene3dfont), this.shuidiEffects = [], this.view = this.avatar.getView(db.MODEL_DB_ID.mianwen_zang), this.view.material.setState(16), this.view.material.transition = 0, Laya.timer.loop(100, this, this.update)
		}
		update() {
			let t = Mathf.lerp(this.view.material.transition, this.transition, .05);
			Mathf.fuzzyEquals(t, 1) ? (Laya.timer.clearAll(this), this.view.material.transition = 1) : this.view.material.transition = t
		}
		onFinish() {
			for (var t = 0; t < this.paopaoEffects.length; t++) this.paopaoEffects[t].clear();
			this._touchEffect && (_G.poolManager.put(this._touchEffect), this._touchEffect = null), this.avatar.playAnimation(MODEL_ANIM.HUFU_ZANTONG1), Timer.callLater(.5, function() {
				mgrAlert.playParticleEffect("104", {
					x: _G.canvasWidth / 2,
					y: _G.canvasHeight / 2 - 60
				}, 1, .5), mgrSound.playSound("yllsd_06")
			})
		}
		onTouchDown() {
			this.isHold ? (this._touchEffect && (this._touchEffect.play(), this._touchEffect.followTarget(this.itemIcon, mgrAlert.camerafont)), this.avatar.playFaceAnim(MODEL_ANIM.FACE_BIYAN_01, .3, !0)) : this.isTouched = !1
		}
		onTouchMove() {
			let t = 0;
			for (var e = .7 * this.paopaoEffects.length, a = 0; a < this.paopaoEffects.length; a++) {
				var i = this.paopaoEffects[a];
				if (i.isClear) t++;
				else if (Mathf.distance(i.pos, OperateBase.anchorPos) < 60) {
					i.clear();
					let t = this.testFaceNode(.03, 3);
					t: for (a = t.length - 1; a >= 0; a--) {
						for (var s = this.shuidiEffects.length - 1; s >= 0; s--)
							if (this.shuidiEffects[s].name == t[a]) continue t;
						var n = new ShuiDiEffect(this.avatar.baseFace.findChild(t[a]), t[a], this);
						this.shuidiEffects.push(n)
					}
					break
				}
				if (this.transition = Mathf.clamp01(t / e), t >= e) {
					this.finish();
					break
				}
			}
		}
		onTouchUp() {
			this._touchEffect && (this._touchEffect.stopFollow(), this._touchEffect.stop()), this.avatar.playFaceAnim(MODEL_ANIM.FACE_IDLE01, .3, !0)
		}
		setFeiZaoData(t) {
			return this.paopaoEffects = t, this
		}
		getShuiDiEffects() {
			return this.shuidiEffects
		}
		setItemIcon(t) {
			return this.itemIcon = t, this
		}
	}
	OptShuiXi.CLEAR_TRANSITION = .4;
	class OptHeiTouTie extends OperateBase {
		onCreate() {
			this.view = this.avatar.getView(db.MODEL_DB_ID.heitou);
			let t = db.get_model_db(db.MODEL_DB_ID.heitoutie);
			mgrRes.loadRes(t.resPath, RES_TYPE.TEXTURE2D, e => {
				this.view && OperateBase.renderMask.setPaintMaterail(this.view.depModel, this.view.viewDb.matIndex, t.resPath)
			})
		}
		dispose() {
			this.view = null, super.dispose()
		}
		onFinish() {
			this.avatar.setPart("heitoutie", !1), this.avatar.playAnimation(MODEL_ANIM.HUFU_ZANTONG1), OperateBase.renderMask.clear()
		}
		onTouchDown() {
			this.checkHold()
		}
		onTouchMove() {
			OperateBase.renderMask.fillPercent > .6 && this.finish()
		}
		onTouchUp() {}
	}
	class OptSiHeiTouTie extends OperateBase {
		constructor() {
			super(...arguments), this._touchDown = new Laya.Vector2, this.normallizeTime = 0
		}
		onCreate() {
			this.heiTou = this.avatar.getView(db.MODEL_DB_ID.ty_heitou);
			let t = this.heiTou.model.getAnimator();
			t.speed = 1e-5, t.play(null, 0, 0), this.animator = t
		}
		onFinish() {
			this.avatar.removePart("ty_heitou"), this.avatar.playAnimation(MODEL_ANIM.HUFU_ZANTONG3)
		}
		onTouchDown() {
			this.checkEmpty(), this._touchDown.setValue(Laya.stage.mouseX, Laya.stage.mouseY)
		}
		onTouchMove() {
			let t = Laya.stage.mouseX - this._touchDown.x,
				e = Mathf.distance2(t, Laya.stage.mouseY - this._touchDown.y);
			this._touchDown.setValue(Laya.stage.mouseX, Laya.stage.mouseY);
			let a = Mathf.lerpFromInverseLerp(0, 1, 0, 200, e);
			this.normallizeTime = t <= 0 ? Mathf.clamp01(this.normallizeTime + a) : Mathf.clamp01(this.normallizeTime - a), this.animator.play(null, 0, this.normallizeTime), this.normallizeTime >= .95 && this.finish()
		}
		onTouchUp() {}
	}
	class OptFuMianMo extends OperateBase {
		onCreate() {
			this.view = this.avatar.getView(db.MODEL_DB_ID.mianmo_empty);
			let t = db.get_model_db(db.MODEL_DB_ID.mianmo_fill);
			mgrRes.loadRes(t.resPath, RES_TYPE.TEXTURE2D, e => {
				this.view && OperateBase.renderMask.setPaintMaterail(this.view.depModel, this.view.viewDb.matIndex, t.resPath, .7)
			})
		}
		dispose() {
			this.view = null, super.dispose()
		}
		onFinish() {
			this.avatar.setPart("mianmo", !1), this.avatar.playAnimation(MODEL_ANIM.HUFU_ZANTONG2), OperateBase.renderMask.clear()
		}
		onTouchDown() {
			this.checkHold()
		}
		onTouchMove() {
			OperateBase.renderMask.fillPercent > .6 && this.finish()
		}
		onTouchUp() {}
	}
	class OptSiMianMo extends OperateBase {
		constructor() {
			super(...arguments), this._touchDown = new Laya.Vector2, this.normallizeTime = 0, this.lastSoundTIme = 0
		}
		onCreate() {
			this.mianMo = this.avatar.getView(db.MODEL_DB_ID.ty_mianmo);
			let t = this.mianMo.model.getAnimator();
			t.speed = 1e-5, t.play(null, 0, 0), this.animator = t
		}
		dispose() {
			let t = this.avatar.getView(db.MODEL_DB_ID.mianmo_fill);
			cc.clearTween(t.material), t.material.setState(32), super.dispose()
		}
		onFinish() {
			let t = this.avatar.getView(db.MODEL_DB_ID.mianmo_fill);
			t.material.setState(16), cc.tween(t.material).to(.5, {}, {
				onUpdate: (t, e) => {
					t.transition = e
				}
			}).start(), this.avatar.playAnimation(MODEL_ANIM.HUFU_ZANTONG3), Timer.callLater(.5, function() {
				mgrAlert.playParticleEffect("104", {
					x: _G.canvasWidth / 2,
					y: _G.canvasHeight / 2 - 60
				}, 1, .5)
			})
		}
		onTouchDown() {
			this.checkEmpty(), this._touchDown.setValue(Laya.stage.mouseX, Laya.stage.mouseY)
		}
		onTouchMove() {
			this.lastSoundTIme < Timer.time && (this.lastSoundTIme = Timer.time + 2, mgrSound.playSound("yllsd_08"));
			let t = Laya.stage.mouseX - this._touchDown.x,
				e = Mathf.distance2(t, Laya.stage.mouseY - this._touchDown.y);
			this._touchDown.setValue(Laya.stage.mouseX, Laya.stage.mouseY);
			let a = Mathf.lerpFromInverseLerp(0, 1, 0, 300, e);
			this.normallizeTime = t <= 0 ? Mathf.clamp01(this.normallizeTime + a) : Mathf.clamp01(this.normallizeTime - a), this.animator.play(null, 0, this.normallizeTime), this.normallizeTime >= 1 && this.finish()
		}
		onTouchUp() {}
	}
	const FINISH_CHECK_RATIO = .6;
	class OptCaGan extends OperateBase {
		onCreate() {
			this.avatar.playFaceAnim(MODEL_ANIM.FACE_IDLE01, .3, !0)
		}
		onFinish() {
			for (var t = 0; t < this.shuiDiEffects.length; t++) this.shuiDiEffects[t].clear();
			this.avatar.playAnimation(MODEL_ANIM.HUFU_ZANTONG2), Timer.callLater(.5, function() {
				mgrAlert.playParticleEffect("104", {
					x: _G.canvasWidth / 2,
					y: _G.canvasHeight / 2 - 60
				}, 1, .5)
			})
		}
		onTouchDown() {
			this.checkHold(), this.isTouched && this.avatar.playFaceAnim(MODEL_ANIM.FACE_BIYAN_01, .3, !0)
		}
		onTouchMove() {
			let t = 0;
			for (var e = 0; e < this.shuiDiEffects.length; e++) {
				var a = this.shuiDiEffects[e];
				if (a.isClear) t++;
				else if (Mathf.distance(a.pos, OperateBase.anchorPos) < 60) {
					a.clear();
					break
				}
				if (t >= this.shuiDiEffects.length * FINISH_CHECK_RATIO) {
					this.finish();
					break
				}
			}
		}
		onTouchUp() {
			this.avatar.playFaceAnim(MODEL_ANIM.FACE_IDLE01, .3, !0)
		}
		setShuiDiEffects(t) {
			return this.shuiDiEffects = t, this
		}
	}
	class DouYinEffect {
		constructor(t, e) {
			this.progress = 0, this.lastTime = 0, this.lastDir = 0, this.model = _G.poolManager.get(GModel, db.MODEL_DB_ID.ty_douyin), this.model.setParent(t), this.model.initPaint(), this.model.setRotation(0, 90, 0), this.name = e
		}
		get isClear() {
			return this.progress >= 1
		}
		dispose() {
			this.model && (this.model.sharedMaterial && (this.model.sharedMaterial.setState(16), this.model.sharedMaterial.transition = 0), _G.poolManager.put(this.model), this.model = null)
		}
		clear(t) {
			this.progress < 1 && (this.progress += t, this.model.sharedMaterial && (this.model.sharedMaterial.setState(16), this.model.sharedMaterial.transition = Mathf.clamp01(this.progress)))
		}
	}
	class OptQuDouYin extends OperateBase {
		onCreate() {}
		onFinish() {
			this.avatar.playAnimation(MODEL_ANIM.HUFU_WANCHENG), Timer.callLater(.5, function() {
				mgrAlert.playParticleEffect("105", {
					x: _G.canvasWidth / 2,
					y: _G.canvasHeight / 2
				}, 5, 1)
			})
		}
		onTouchDown() {
			this.checkHold()
		}
		onTouchMove() {
			let t = this.testFaceNode(.022, 0, 3);
			if (t.length > 0)
				for (var e = 0; e < this.douYinList.length; e++) {
					var a = this.douYinList[e];
					if (a.name == t[0]) {
						if (!a.isClear) {
							var i = Mathf.sign(OperateBase.anchorPos.x);
							(Timer.time - a.lastTime > .2 || a.lastDir != i) && (a.lastDir = i, a.lastTime = Timer.time, a.clear(.35), this.checkFinish())
						}
						break
					}
				}
		}
		onTouchUp() {}
		checkFinish() {
			for (var t = 0; t < this.douYinList.length; t++)
				if (!this.douYinList[t].isClear) return;
			this.finish()
		}
		setDouYin(t) {
			return this.douYinList = t, this
		}
	}
	class ZaMaoEffect {
		constructor(t, e) {
			this.isClear = !1, this.model = _G.poolManager.get(GModel, e), this.model.setParent(t), this.model.initPaint()
		}
		dispose() {
			this.model && (_G.poolManager.put(this.model), this.model = null), this.checkTransform = null
		}
		clear() {
			this.isClear || (this.isClear = !0, this.model && (_G.poolManager.put(this.model), this.model = null))
		}
		initPos() {
			this.checkTransform = this.model.getChildAt(0).transform
		}
	}
	class OptXiuMeiMao extends OperateBase {
		constructor() {
			super(...arguments), this.lastSoundTime = 0
		}
		onCreate() {}
		onFinish() {
			this.avatar.playAnimation(MODEL_ANIM.HUFU_ZANTONG3)
		}
		onTouchDown() {
			this.checkHold()
		}
		onTouchMove() {
			let t = OperateBase.rayStart,
				e = OperateBase.rayEnd;
			for (var a = 0; a < this.zaMaoList.length; a++)
				if (Mathf.point2line(t, e, this.zaMaoList[a].checkTransform.position) < .015 && !this.zaMaoList[a].isClear) return this.zaMaoList[a].clear(), this.checkZaMao(), OperateBase.anchorPos.x > _G.canvasWidth / 2 ? this.avatar.playAnimation(MODEL_ANIM.HUFU_ZAMAO_L) : this.avatar.playAnimation(MODEL_ANIM.HUFU_ZAMAO_R), void(this.lastSoundTime < Timer.time && (this.lastSoundTime = Timer.time + 1))
		}
		onTouchUp() {}
		setZaMao(t) {
			this.zaMaoList = t;
			for (var e = 0; e < t.length; e++) t[e].initPos();
			return this
		}
		checkZaMao() {
			for (var t = 0; t < this.zaMaoList.length; t++)
				if (!this.zaMaoList[t].isClear) return;
			this.finish()
		}
	}
	class RoomBase {
		load(t) {
			Laya.Scene3D.load(this.resourceName, Laya.Handler.create(this, this._onSceneLoaded, [t]))
		}
		dispose() {
			this.destroyed = !0, this.camera && (cc.clearTween(this.camera), cc.clearTween(this.camera.transform), this.camera.destroy(), this.camera = null), this.root && (cc.clearTween(this.root.transform), this.root.destroy(), this.root = null), this.scene && (this.scene.removeSelf(), this.scene.active = !1, this.scene = null)
		}
		_onSceneLoaded(t, e) {
			this.destroyed || (this.scene = e, this.scene.active = !0, this.onSceneLoaded(e), t && t())
		}
		createCamera(t) {
			let e = t.parent.addChild(new Laya.Camera(0, .01, 100));
			e.transform.position = t.transform.position, e.transform.rotation = t.transform.rotation, e.fieldOfView = t.fieldOfView;
			let a = e.addChild(new Laya.DirectionLight);
			a.transform.localRotationEuler = PanelBase3D.defaultLightEular, a.color = new Laya.Vector3(1, 1, 1), this.camera = e
		}
		createRoot(t) {
			let e = Laya.Sprite3D.instantiate(t, t.parent, !0);
			this.root = e
		}
	}
	class RoomBath extends RoomBase {
		constructor() {
			super(...arguments), this.resourceName = "res/unity/Conventional/map_01.ls", this.cameraIndex = -1, this.bNight = !1
		}
		onSceneLoaded(t) {
			this.resetMat(t)
		}
		resetMat(t) {
			if (t.allMaterial) return;
			let e = UiHelper.findAllMeshRenderers(t.getChildByName("map_01"), null, !0);
			if (e) {
				let l = [];
				t.allMaterial = l;
				t: for (var a = 0; a < e.length; a++) {
					for (var i = e[a], s = i.sharedMaterials, n = [], o = 0; o < s.length; o++) {
						var r = s[o];
						if (!(r instanceof Laya.BlinnPhongMaterial)) {
							l.push(r);
							continue t
						} {
							let t = new LightMapMaterial;
							t.albedoTexture = r.albedoTexture, t.tilingOffset = r.tilingOffset, "map_01_02" == r.name ? t.renderMode = LightMapMaterial.RENDERMODE_CUTOUT : t.renderMode = LightMapMaterial.RENDERMODE_OPAQUE, n.push(t), l.push(t)
						}
					}
					i.sharedMaterials = n
				}
			}
		}
		dispose() {
			this.clearAlpha(), this.scene && (this.switchToDay(!0), this.mapNode.active = !0, UiHelper.setTransformVec3Prop(this.mapNode.transform, "localScale", 1, 1, 1)), this.effectJZ && _G.poolManager.put(this.effectJZ), this.jiangzhuang && (_G.poolManager.put(this.jiangzhuang), this.jiangzhuang = null), super.dispose()
		}
		changeToMain() {
			this.camera || (this.createCamera(this.mainCamera), this.createRoot(this.mainNode), this.mainCamera.active = !1, this.skincareCamera.active = !1, this.roomCameraMid.active = !1, this.roomCameraFar.active = !1, this.skybox.active = !1, this.butteryCurve.active = !1)
		}
		changeToSkincare() {
			this.camera || (this.createCamera(this.skincareCamera), this.createRoot(this.skincareNode), this.mainCamera.active = !1, this.skincareCamera.active = !1, this.roomCameraMid.active = !1, this.roomCameraFar.active = !1, this.skybox.active = !1, this.butteryCurve.active = !1, this.playMoveIn())
		}
		chagneToRoom() {
			this.camera ? this.playMoveIn() : (this.createCamera(this.skincareCamera), this.createRoot(this.skincareNode), this.mainCamera.active = !1, this.skincareCamera.active = !1, this.roomCameraMid.active = !1, this.roomCameraFar.active = !1, this.cameraIndex = 0, this.skybox.active = !1, this.butteryCurve.active = !1, this.playMoveIn())
		}
		playMoveIn() {
			let t = this.camera.transform.localPositionZ;
			this.camera.transform.localPositionZ = t + 1, cc.tween(this.camera.transform).delay(.8).to(1, {
				localPositionZ: t
			}, cc.OPTION.SINE_OUT).start()
		}
		initSkyboxMat() {
			this.skybox.paint_shader || (this.skybox.paint_shader = mgrMaterial.setDrawShader(this.skybox)[0]), this.skyboxMat = this.skybox.paint_shader
		}
		moveCamerToNear(t, e = !0) {
			if (0 != this.cameraIndex) {
				if (this.cameraIndex = 0, this.moveCamerTo(this.skincareCamera, cc.Ease.sineInOut, t), e) {
					let t = this.root.transform.position.clone(),
						e = this.skincareNode.transform.position.clone(),
						a = this.root.transform.rotation.clone(),
						i = this.skincareNode.transform.rotation.clone();
					cc.tween(this.root.transform, !0).to(.7, cc.PROP.EMPTY, {
						easing: cc.Ease.sineInOut,
						onUpdate: function(s, n) {
							Laya.Vector3.lerp(t, e, n, s.position), Laya.Quaternion.lerp(a, i, n, s.rotation), s.position = s.position, s.rotation = s.rotation
						}
					}).start()
				}
			} else t && t()
		}
		moveCamerToMid(t) {
			if (1 == this.cameraIndex) return void(t && t());
			this.cameraIndex = 1, this.moveCamerTo(this.roomCameraMid, cc.Ease.sineInOut, t);
			let e = this.root.transform.position.clone(),
				a = this.roomNode.transform.position.clone(),
				i = this.root.transform.rotation.clone(),
				s = this.roomNode.transform.rotation.clone();
			cc.tween(this.root.transform, !0).to(.7, cc.PROP.EMPTY, {
				easing: cc.Ease.sineInOut,
				onUpdate: function(t, n) {
					Laya.Vector3.lerp(e, a, n, t.position), Laya.Quaternion.lerp(i, s, n, t.rotation), t.position = t.position, t.rotation = t.rotation
				}
			}).start()
		}
		moveCamerToFar(t) {
			if (2 == this.cameraIndex) return void(t && t());
			this.cameraIndex = 2, this.moveCamerTo(this.roomCameraFar, cc.Ease.sineInOut, t);
			let e = this.root.transform.position.clone(),
				a = this.roomNode.transform.position.clone(),
				i = this.root.transform.rotation.clone(),
				s = this.roomNode.transform.rotation.clone();
			cc.tween(this.root.transform, !0).to(.7, cc.PROP.EMPTY, {
				easing: cc.Ease.sineInOut,
				onUpdate: function(t, n) {
					Laya.Vector3.lerp(e, a, n, t.position), Laya.Quaternion.lerp(i, s, n, t.rotation), t.position = t.position, t.rotation = t.rotation
				}
			}).start()
		}
		moveCamerToMain(t) {
			3 != this.cameraIndex ? (this.cameraIndex = 3, this.moveCamerTo(this.mainCamera, cc.Ease.sineInOut, t)) : t && t()
		}
		moveCamerTo(t, e, a) {
			UiHelper.tweenCamera(this.camera, .7, t.transform.localPosition, t.transform.localRotation, t.fieldOfView, e, a)
		}
		switchToNight(t = !1) {
			this.bNight = !0;
			let e = this.scene.allMaterial;
			for (var a = 0; a < e.length; a++) {
				var i = e[a];
				t ? i.albedoIntensity = .2 : cc.tween(i, !0).to(1.5, {}, {
					onUpdate: function(t, e) {
						var a = Mathf.lerp(1, .2, e);
						t.albedoIntensity = a
					}
				}).start()
			}
		}
		switchToDay(t = !1) {
			this.bNight = !1;
			let e = this.scene.allMaterial;
			for (var a = 0; a < e.length; a++) {
				var i = e[a];
				t ? (i.albedoIntensity = 1, cc.clearTween(i)) : cc.tween(i, !0).to(1.5, {}, {
					onUpdate: function(t, e) {
						var a = Mathf.lerp(.2, 1, e);
						t.albedoIntensity = a
					}
				}).start()
			}
		}
		playFadeout(t) {
			this.initSkyboxMat(), this.skyboxMat.playDissolveOut(2, 0, t)
		}
		clearAlpha() {
			cc.clearTween(this);
			let t = this.scene.allMaterial;
			for (var e = 0; e < t.length; e++) {
				t[e].alpha = null
			}
		}
		playChuEffect() {
			let t = UiHelper.findChild(this.mapNode, "menEffect"),
				e = _G.poolManager.get(Particle, "119");
			e.setParent(t), e.play(null, 5, .5)
		}
		playJinEffect() {
			let t = UiHelper.findChild(this.mapNode, "menEffect"),
				e = _G.poolManager.get(Particle, "120");
			e.setParent(t), e.play(null, 5, .5)
		}
		tryShowJiangZhuang() {
			let t = mgrClassRoom.getJiangZhuangModelId();
			if (t && !this.jiangzhuang) {
				let e = UiHelper.findChild(this.mapNode, "guadian_jiangzhuang");
				this.jiangzhuang = _G.poolManager.get(GModel, t), this.jiangzhuang.initPart(), this.jiangzhuang.setParent(e), this.jiangzhuang.callIfLoaded(() => {
					let t = this.scene.allMaterial; - 1 == t.indexOf(this.jiangzhuang.sharedMaterial) && t.push(this.jiangzhuang.sharedMaterial);
					let e = this.jiangzhuang.sharedMaterial;
					e.baseAlbedoIntensity = e.albedoIdentity, e.albedoIntensity = this.bNight ? .2 : 1, this.tryPlayJiangZhuangEffect()
				})
			}
			this.jiangzhuang && this.jiangzhuang.show()
		}
		hideJiangZhuang() {
			this.jiangzhuang && this.jiangzhuang.hide()
		}
		tryPlayJiangZhuangEffect() {
			if (this.jiangzhuang) {
				let t = _G.poolManager.get(Particle, "184");
				t.setParent(this.jiangzhuang.node), t.play(), this.effectJZ = t
			}
		}
		get mainCamera() {
			return this.scene.getChildByName("MainCamera")
		}
		get skincareCamera() {
			return this.scene.getChildByName("SkincareCamera")
		}
		get roomCameraMid() {
			return this.scene.getChildByName("RoomCameraMid")
		}
		get roomCameraFar() {
			return this.scene.getChildByName("RoomCameraFar")
		}
		get mainNode() {
			return this.scene.getChildByName("MainNode")
		}
		get skincareNode() {
			return this.scene.getChildByName("SkincareNode")
		}
		get roomNode() {
			return this.scene.getChildByName("RoomNode")
		}
		get gemstoneNode() {
			return this.scene.getChildByName("gemstone")
		}
		get mapNode() {
			return this.scene.getChildByName("map_01")
		}
		get skybox() {
			return this.scene.getChildByName("skybox")
		}
		get butteryCurve() {
			return this.scene.getChildByName("ButterflyCurve")
		}
	}
	class ScoreBar extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/ScoreBar.json", this._exportNodeInfo = {
				cc_barMask: "UIBarMask",
				cc_box0: "Laya.Sprite",
				cc_text0: "Laya.Label",
				cc_box1: "Laya.Sprite",
				cc_text1: "Laya.Label",
				cc_box2: "Laya.Sprite",
				cc_text2: "Laya.Label",
				cc_icon0: "Laya.Sprite",
				cc_icon1: "Laya.Sprite",
				cc_icon2: "Laya.Sprite",
				cc_colorEggMianJu: "Laya.Sprite"
			}, this.btouch = !1, this.create()
		}
		onCreateComplete() {
			this.colorEggMianJu.on(Laya.Event.CLICK, this, () => {
				this.onClickButtonColorEggMianJu()
			}), this.colorEggMianJu.visible = !1
		}
		setValue(t, e, a) {
			this.value != t && (this.value = t, this.unscheduleAllCallbacks(), 0 != t ? e ? this.scheduleOnce(e, () => {
				a ? this.playAnim(a) : this.setProgress(t / db.game_cnf.game_bar_max_score, !0)
			}) : a ? this.playAnim(a) : this.setProgress(t / db.game_cnf.game_bar_max_score, !0) : this.setProgress(0, !1))
		}
		playAnim(t) {
			let e = this.value / db.game_cnf.game_bar_max_score,
				a = ScoreBar.temp_point.setTo(this.barMask.node.width / 2, this.barMask.getProgressPosition(e));
			this.barMask.node.localToGlobal(a, !1);
			for (let e = 0; e < 6; e++) UiHelper.playBezierTo("res/icon/star.png", t, a, .7 + .05 * e);
			this.scheduleOnce(.7, () => {
				this.setProgress(e, !0)
			})
		}
		setProgress(t, e) {
			if (!this.callable) return this.safeCall(this.setProgress, t, e);
			e ? this.barMask.progressTo(t, this.showBox.bind(this)) : this.barMask.progress = 0
		}
		showBox() {
			let t = mgrOutside.getGameAwardCount(this.value);
			for (let e = 0; e < t; e++)
				if (1 == this["box" + e].alpha) {
					cc.tween(this["box" + e]).to(.1, cc.PROP.ALPHA0).start();
					let t = this["icon" + e];
					UiHelper.playRotShake(t, .5), cc.tween(t).to(.5, cc.PROP.SCALE1_2, cc.OPTION.BACK_OUT).to(.1, cc.PROP.ALPHA0).start();
					let a = UiHelper.getSelfGlobalPos(t);
					mgrAlert.playParticleEffect("115", a, 2, 1, .4)
				}
		}
		getProgress() {
			return this.callable ? this.barMask.progress : 0
		}
		moveIn() {
			if (!this.callable) return this.safeCall(this.moveIn);
			cc.tween(this.resNode).show().to(.3, {
				x: 0
			}, cc.OPTION.SINE_IN).start();
			for (let t = 0; t < 3; t++) this["box" + t].alpha = 1, this["icon" + t].scale(1, 1).alpha = 1
		}
		moveOut() {
			this.callable ? cc.tween(this.resNode).to(.3, {
				x: -100
			}, cc.OPTION.SINE_OUT).hide().start() : this.safeCall(this.moveOut)
		}
		checkColorEggMianJu() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.MIAN_JU, EGGS_STEP.FIRST) ? this.colorEggMianJu.visible = !0 : this.colorEggMianJu.visible = !1
		}
		onClickButtonColorEggMianJu() {
			if (this.btouch) return;
			this.btouch = !0;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.colorEggMianJu.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.colorEggMianJu, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.mian_ju)
		}
	}
	ScoreBar.temp_point = new Laya.Point;
	class UIBarMask extends Laya.Script {
		constructor() {
			super(...arguments), this._progress = 1, this.style = "horizon", this.reverse = !1, this._originWidth = 0, this._originHeight = 0, this.progressPosition = 0, this._startAngle = -90
		}
		get progress() {
			return this._progress
		}
		set progress(t) {
			t = Math.max(0, Math.min(1, t)), this._progress != t && (this._progress = t, this.refresh())
		}
		get node() {
			return this.owner
		}
		onAwake() {
			this.bar = this.owner, 0 == this.bar.get_width() || 0 == this.bar.get_height() ? this.bar.texture.getIsReady() ? this.init() : this.bar.texture.once(Laya.Event.READY, this, this.init) : this.init()
		}
		onDestroy() {
			this.bar && (this.bar.mask && (this.bar.mask.destroy(), this.bar.mask = null), this.bar = null), cc.clearTween(this)
		}
		init() {
			this.bar && (this._originWidth = this.bar.width, this._originHeight = this.bar.height, this.mask || (this.mask = new Laya.Sprite, this.bar.mask = this.mask), this.refresh())
		}
		setStartAngle(t) {
			this._startAngle = t
		}
		getProgressPosition(t) {
			t = Mathf.clamp01(t);
			let e = 1,
				a = 1;
			if ("horizon" == this.style) e = t;
			else {
				if ("vertical" != this.style) return 0;
				a = t
			}
			let i = this._originWidth * e,
				s = this._originHeight * a,
				n = this._originHeight - s;
			return this.reverse ? "horizon" == this.style ? this._originWidth - i : s : "horizon" == this.style ? i : n
		}
		progressTo(t, e, a = .3) {
			cc.tween(this, !0).to(a, {
				progress: t
			}).call(e).start()
		}
		refresh() {
			if (!this.bar || 0 == this._originWidth || 0 == this._originWidth) return;
			let t = 1,
				e = 1;
			if ("horizon" == this.style ? t = this._progress : "vertical" == this.style && (e = this._progress), this.mask.graphics.clear(), 0 == this._progress) return this.mask.graphics.drawRect(0, 0, 1, 1, "#ffffff"), void(this.progressPosition = this.getProgressPosition(this._progress));
			if ("radial" == this.style) this.mask.graphics.drawPie(this._originWidth / 2, this._originHeight / 2, this._originWidth / 2, this._startAngle, this._startAngle + 360 * this._progress, "#ffffff");
			else {
				let a = this._originWidth * t,
					i = this._originHeight * e,
					s = 0,
					n = this._originHeight - i;
				this.reverse ? (s = this._originWidth - a, n = 0, "horizon" == this.style ? this.progressPosition = s : this.progressPosition = i) : "horizon" == this.style ? this.progressPosition = a : this.progressPosition = n, this.mask.graphics.drawRect(s, n, a + 1, i, "#ffffff")
			}
		}
	}
	UIBarMask.STYLE_HORIZON = "horizon", UIBarMask.STYLE_VERTICAL = "vertical", UIBarMask.STYLE_RADIAL = "radial";
	class PlayBottomNode extends ViewBase {
		constructor(t) {
			super(t), this.resourceName = "res/prefab/PlayBottomNode.json", this._exportNodeInfo = {
				cc_skincareNode: "Laya.Sprite",
				cc_sprite01: "Laya.Sprite",
				cc_insideNode: "Laya.Sprite",
				cc_sprite02: "Laya.Sprite",
				cc_outsideNode: "Laya.Sprite",
				cc_sprite03: "Laya.Sprite",
				cc_restNode: "Laya.Sprite"
			}, this.touchEnable = !0, this._states = [], this.create()
		}
		dispose() {
			this.touchEnable = !1, this.stopProcMsg();
			for (let t = 0; t < this._states.length; t++) this._states[t].dispose();
			super.dispose(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PLAY_NODE_BUTTONOUT), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PLAY_NODE_BUTTONSKINCARE)
		}
		onCreateComplete() {
			let t = this.context.onOpenCallback,
				e = this.context.curIndex;
			mgrI18n.trySetI18nImage(this.sprite01, "pnl_play_03.png"), mgrI18n.trySetI18nImage(this.sprite02, "pnl_play_01.png"), mgrI18n.trySetI18nImage(this.sprite03, "pnl_play_02.png"), this.y = 200, this._states.push(new ButtonState(this.skincareNode, () => {
				this.touchEnable && mgrAlert.openGameLoading(UI_NAME.PanelSkincare, null, t)
			}, function() {
				return BaseFacade.mItem.getItemCount("1020") / mgrGame.curRoleUpDb.xinQingMax
			}, 0 == e, !1)), this._states.push(new ButtonState(this.insideNode, () => {
				this.touchEnable && mgrAlert.openGameLoading(UI_NAME.PanelInside, null, t)
			}, function() {
				return 1
			}, 1 == e, !0)), this._states.push(new ButtonState(this.outsideNode, () => {
				this.touchEnable && mgrAlert.openGameLoading(UI_NAME.PanelOutside, null, t)
			}, function() {
				return 1
			}, 2 == e, !0)), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this)
			}), this.startProcMsg()
		}
		onMsgItemChange() {
			this.updateState()
		}
		fadeOut(t) {
			this.callable ? (this.touchEnable = !1, cc.tween(this.resNode, !0).to(.3, {
				y: 200
			}, cc.OPTION.SINE_OUT).hide().call(t).start()) : this.safeCall(this.fadeOut, t)
		}
		fadeIn(t, e = .5) {
			this.callable ? cc.tween(this.resNode, !0).show().to(.3, {
				y: 0
			}, cc.OPTION.BACK_OUT).delay(e).call(() => {
				this.touchEnable = !0, t && t(), mgrGuide.registerGuideNode(GUD_REG_NODE.PLAY_NODE_BUTTONOUT, this.outsideNode), mgrGuide.registerGuideNode(GUD_REG_NODE.PLAY_NODE_BUTTONSKINCARE, this.skincareNode)
			}).start() : this.safeCall(this.fadeIn, t, e)
		}
		flyXinQingTo() {
			new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			for (var t = 0; t < 6; t++);
		}
		updateState() {
			for (let t = 0; t < this._states.length; t++) this._states[t].update()
		}
	}
	class ButtonState {
		constructor(t, e, a, i, s) {
			s ? (this.barMask = t.getChildByName("on").addComponent(UIBarMask), this.barMask.style = UIBarMask.STYLE_VERTICAL, t.getChildByName("off").visible = !1) : (this.barMask = t.getChildByName("off").addComponent(UIBarMask), this.barMask.style = UIBarMask.STYLE_VERTICAL, t.getChildByName("on").visible = !1), this._focus = t.getChildByName("focus"), this._onClick = e, this._checker = a, this._focus.visible = i, UiHelper.addClickEvent(t, this.onClick.bind(this), void 0, .5), this.update()
		}
		dispose() {}
		update() {
			let t = this._checker();
			this.barMask.progress = t
		}
		onClick() {
			this._focus.visible || this._onClick && this._onClick(this.barMask.progress)
		}
	}
	class RoleLevel extends MsgHandler {
		constructor(t, e) {
			super(), this.destroyed = !1, this.bar = t, this.label = e, this.registerListeners({
				[BASE_MSG.UP_STATE_CHANGE]: this.onMsgUpStateChange.bind(this)
			}), this.startProcMsg(), this.updateLevel()
		}
		dispose() {
			this.destroyed = !0, this.stopProcMsg()
		}
		onMsgUpStateChange(t) {
			"role_level" == t.itemId && this.updateLevel()
		}
		updateLevel() {
			this.label.text = mgrGame.getRoleLevel() + "", this.bar.progress = mgrGame.getRoleProgress()
		}
	}
	class AdvInstOrBanner extends MsgHandler {
		constructor(t, e) {
			super(), this.bBanner = !1, this.bFocus = !0, this.bFirst = !0, this.mode = 0, this.instAdvName = t, this.bannerAdvName = e, this.registerListeners({
				[BASE_MSG.READY_OPEN_NEW_BANNER]: this.onMsgReadyOpenNewBanner.bind(this)
			}), _G.isGuiding && (db.cop.b_inst_in_guide ? this.mode = 1 : this.mode = 2)
		}
		onMsgAdvShowFail(t) {
			t.advName == this.instAdvName && (this.bBanner = !0, this.bFocus && mgrAdv.dispatchAdv(this.bannerAdvName))
		}
		onMsgVideoVisible(t) {
			this.bFocus && this.bBanner && (t ? mgrAdv.closeAdv(this.bannerAdvName) : mgrAdv.dispatchAdv(this.bannerAdvName))
		}
		onMsgReadyOpenNewBanner(t) {
			if (t.bannerAdvName != this.bannerAdvName) switch (this.bFocus = !1, this.mode) {
				case 0:
					this.checkInstOrBanner();
					break;
				case 1:
					this.checkInst()
			}
		}
		onFocus(t) {
			switch (this.bFocus = t, this.mode) {
				case 0:
					this.checkInstOrBanner();
					break;
				case 1:
					this.checkInst()
			}
		}
		dispose() {
			this.stopProcMsg()
		}
		checkInstOrBanner() {
			this.bFirst ? (this.bFirst = !1, mgrAdv.dispatchAdv(this.instAdvName) && db.cop.b_inst_or_banner ? (this.registerListeners({
				[BASE_MSG.ADV_SHOW_FAIL]: this.onMsgAdvShowFail.bind(this)
			}), this.startProcMsg()) : (this.bBanner = !0, this.sendMsg(BASE_MSG.READY_OPEN_NEW_BANNER, {
				bannerAdvName: this.bannerAdvName
			}), mgrAdv.dispatchAdv(this.bannerAdvName), this.registerListeners({
				[BASE_MSG.SDK_VIDEO_VISIBLE]: this.onMsgVideoVisible.bind(this)
			}), this.startProcMsg())) : this.bBanner && (this.bFocus ? mgrAdv.dispatchAdv(this.bannerAdvName) : mgrAdv.closeAdv(this.bannerAdvName))
		}
		checkInst() {
			this.bFirst && (this.bFirst = !1, mgrAdv.dispatchAdv(this.instAdvName))
		}
	}
	let move_forward = new Vec2(0, 1),
		NUMBER_STR = ["", "K", "M", "B", "B", "B"],
		NUMBER_BMF = ["", "a", "b", "c", "d", "d"],
		NUMBER_RATE = [1, 1e3, 1e6, 1e9, 1e12, 1e15],
		NUMBER_DIGIT = [2, 1, 0, 0];
	class GameUtility {
		static lerpPath(t, e, a) {
			if (0 != t.length) {
				if (e = Mathf.clamp01(e), null == a && (a = new Vec2(0, 0)), 1 == t.length) a.set(t[0]);
				else if (0 == e) a.set(t[0]);
				else if (1 == e) a.set(t[t.length - 1]);
				else {
					let i = (t.length - 1) * e,
						s = 0 | i,
						n = Math.ceil(i);
					s != n ? t[s].lerp(t[n], i - s, a) : a.set(t[n])
				}
				return a
			}
			Logger.error("GameUtility.LerpPath can't find point.")
		}
		static convertGridXToUiX(t) {
			return (t + .5) * GConfig.tile_width
		}
		static convertGridYToUiY(t) {
			return -(t + .5) * GConfig.tile_height
		}
		static convertGridToUi(t, e) {
			return e || (e = new Laya.Vector2), e.x = this.convertGridXToUiX(t.x), e.y = this.convertGridYToUiY(t.y), e
		}
		static convertUiToGrid(t, e) {
			return null == e && (e = new Laya.Vector2), e.x = 0 | t.x / GConfig.tile_width, e.y = 0 | -t.y / GConfig.tile_height, e
		}
		static getPriceString(t, e) {
			return e + db.get_item_db(t).name
		}
		static convertCoinString(t, e) {
			let a = e ? NUMBER_BMF : NUMBER_STR;
			if (t < 1e3) return (0 | t).toString(); {
				let e, i, s = 0 | Mathf.log(t),
					n = 0 | s / 3,
					o = NUMBER_DIGIT[s % 3];
				return e = a[n], i = NUMBER_RATE[n], Mathf.round(t / i, o) + e
			}
		}
		static convertCoinValue(t) {
			if (t < 1e3) return 0 | t; {
				let e = 0 | Mathf.log(t),
					a = 0 | e / 4,
					i = NUMBER_DIGIT[e % 4],
					s = NUMBER_RATE[a];
				return Mathf.round(t / s, i) * s
			}
		}
		static convertRot2Dir(t, e) {
			return null == e && (e = new Laya.Vector2), e.x = Math.sin(t * Mathf.Deg2Rad), e.y = -Math.cos(t * Mathf.Deg2Rad), e
		}
		static convertDir2Rot(t) {
			return move_forward.signAngle(t) * Mathf.Rad2Deg
		}
		static isIntervalOverlap(t, e, a, i) {
			return t > e && ([t, e] = [e, t]), a > i && ([a, i] = [i, a]), !(a > e || i < t)
		}
		static isLineRectInstersection(t, e, a) {
			if (t.y == e.y) return t.y <= a.bottom && t.y >= a.y && this.isIntervalOverlap(a.x, a.right, t.x, e.x);
			t.y > e.y && ([t, e] = [e, t]);
			let i, s, n, o, r = (e.x - t.x) / (e.y - t.y);
			return t.y < a.y ? i = r * ((s = a.y) - t.y) + t.x : (i = t.x, s = t.y), e.y > a.bottom ? n = r * ((o = a.bottom) - t.y) + t.x : (n = e.x, o = e.y), o >= s && this.isIntervalOverlap(a.x, a.right, n, i)
		}
		static isLineCanWalkable(t, e, a, i, s) {
			let n = Math.min(t, a),
				o = Math.max(t, a),
				r = Math.min(e, i),
				l = Math.max(e, i),
				c = Vec2.TEMPS[0];
			c.setValue(t + .5, e + .5);
			let h = Vec2.TEMPS[1];
			h.setValue(a + .5, i + .5);
			let d = Mathf.TempRect;
			for (let t = n; t <= o; t++)
				for (let e = r; e <= l; e++)
					if (d.setTo(t + .05, e + .05, .9, .9), this.isLineRectInstersection(c, h, d) && !s.isWalkable(t, e)) return !1;
			return !0
		}
		static optimizePath(t, e) {
			let a = [],
				i = null;
			for (let s = 0; s < t.length; s++) {
				let n = t[s],
					o = a[a.length - 1];
				o ? this.isLineCanWalkable(o.x, o.y, n.x, n.y, e) ? i = n : i ? (a.push(i), i = n) : a.push(n) : a.push(n)
			}
			return i && (a.push(i), i = null), a
		}
		static getPointInPath(t, e, a = !1, i) {
			if (0 != t.length) {
				if (null == i && (i = new Vec2(0, 0)), 1 == t.length) i.set(t[0]);
				else if (e <= 0) a ? i.set(t[t.length - 1]) : i.set(t[0]);
				else {
					let s, n, o;
					a ? (s = t.length - 1, n = 0, o = -1) : (s = 0, n = t.length - 1, o = 1);
					let r = Vec2.TEMP;
					do {
						let a = t[s],
							n = t[s += o];
						r.set(a);
						let l = r.subSelf(n).mag();
						if (e <= l) return a.lerp(n, e / l, i), i;
						e -= l
					} while (s != n);
					i.set(t[n])
				}
				return i
			}
			Logger.error("GameUtility.pointInDistance can't find point.")
		}
		static getTimeStr(t) {
			t = Math.ceil(t);
			let e = Math.floor(t / 60);
			if (e <= 60) return e > 0 ? 0 == (t -= 60 * e) ? `${e}分钟` : `${e}分钟${t}秒` : t + "秒"; {
				let t = Math.floor(e / 60);
				return (e -= 60 * t) > 0 ? `${t}小时${e}分钟` : t + "小时"
			}
		}
	}
	class CurrencyBar extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/CurrencyBar.json", this._exportNodeInfo = {
				cc_buttonCoin: "UIButton",
				cc_coinIcon: "Laya.Sprite",
				cc_coinCount: "Laya.Label",
				cc_coinAdd: "Laya.Sprite",
				cc_buttonDiamon: "UIButton",
				cc_diamondIcon: "Laya.Sprite",
				cc_diamondCount: "Laya.Label",
				cc_diamondAdd: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			mgrAlert.uiCoinPos || (this.tryRefreshIconPos(), this.scheduleOnce(2.5, this.tryRefreshIconPos)), this.context, this.refreshCoin(), this.refreshDiamond(), this.onMsgCopChange(), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemchange.bind(this),
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgItemchange(t) {
			switch (t.itemId) {
				case "1001":
					this.refreshCoin();
					break;
				case "1000":
					this.refreshDiamond()
			}
		}
		onMsgCopChange() {
			this.coinAdd.visible = mgrAlert.isCoinGiftEnable, this.diamondAdd.visible = mgrAlert.isDiamondGiftEnable
		}
		tryRefreshIconPos() {
			if (!this.callable) return this.safeCall(this.tryRefreshIconPos);
			let t = mgrPanel.getLayerNode(PANEL_LAYER.UI),
				e = this.coinIcon.localToGlobal(new Laya.Point(22, 22), !1, t),
				a = this.diamondIcon.localToGlobal(new Laya.Point(22, 22), !1, t);
			mgrAlert.initCurrencyIconPosition(e, a, null)
		}
		moveIn(t) {
			if (!this.callable) return this.safeCall(this.moveIn, t);
			cc.tween(this.resNode).to(.3, {
				y: 0
			}, cc.OPTION.BACK_OUT).call(() => {
				this.tryRefreshIconPos(), t && t()
			}).start()
		}
		moveOut() {
			if (!this.callable) return this.safeCall(this.moveOut);
			cc.tween(this.resNode).to(.3, {
				y: -150
			}, cc.OPTION.SINE_OUT).start()
		}
		refreshCoin() {
			let t = Math.floor(BaseFacade.mItem.getItemCount("1001"));
			console.log("物品数量", t), this.coinCount.text = GameUtility.convertCoinString(t, !1)
		}
		refreshDiamond() {
			this.diamondCount.text = GameUtility.convertCoinString(BaseFacade.mItem.getItemCount("1000"), !1)
		}
		on_click_buttonCoin() {
			mgrAlert.alertNotEnough("1001", !1)
		}
		on_click_buttonDiamon() {
			mgrAlert.alertNotEnough("1000", !1)
		}
	}
	class EggButterfly extends GModel {
		constructor(t, e = 15) {
			super(db.MODEL_DB_ID.hudie2), this.isDead = !1, this.curve = t, this.leftTime = e, this.lifeTime = e, this.initPaint(), this.playAnim(MODEL_ANIM.HUDIE_IDLE, 0, !0), this.setScale(.5, .5, .5), this.callIfLoaded(() => {
				Timer.callLoopFrame(1, this.update.bind(this), this)
			}), this.create()
		}
		update() {
			let t = Timer.deltaTime,
				e = 1 - this.leftTime / this.lifeTime;
			if (this.curve.getPosition(e, Mathf.TEMP_VEC3, !0), this.setWorldPosition(Mathf.TEMP_VEC3), this.isLoaded) {
				let t = this.transform.localPositionX,
					e = t - this.lastX;
				this.lastX = t;
				let a = e > 0 ? -20 : 20;
				this.eulerY != a && (this.eulerY = a, this.transform.localRotationEulerY = a)
			}
			this.leftTime -= t, this.leftTime < 0 && (this.leftTime += this.lifeTime)
		}
		kill(t) {
			if (this.isDead) return;
			this.isDead = !0, this.sharedMaterial.playDissolveOut(.5, .75, () => {
				this.destroyed || (this.hide(), t && t())
			});
			let e = _G.poolManager.get(Particle, "109");
			e.setParent(this.getParent()), e.setWorldPosition(this.transform.position), e.setScale(.5, .5, .5), e.play(null, 1, 1)
		}
	}
	var Vector3$1 = Laya.Vector3,
		OPT_TYPE;
	class Curve {
		constructor(t) {
			this.points = t, this.points.unshift(t[0]), this.points.push(t[t.length - 1])
		}
		getPosition(t, e, a) {
			t = Mathf.clamp01(t);
			let i = this.points.length - 3;
			if (i <= 0) {
				let t = this.getPointPosition(0, a);
				return void e.setValue(t.x, t.y, t.z)
			}
			let s = Math.min(Math.floor(t * i), i - 1),
				n = t * i - s,
				o = this.getPointPosition(s, a),
				r = this.getPointPosition(s + 1, a),
				l = this.getPointPosition(s + 2, a),
				c = this.getPointPosition(s + 3, a);
			e.x = Curve.interpolate(n, o.x, r.x, l.x, c.x), e.y = Curve.interpolate(n, o.y, r.y, l.y, c.y), e.z = Curve.interpolate(n, o.z, r.z, l.z, c.z)
		}
		static interpolate(t, e, a, i, s) {
			return .5 * ((3 * a - e - 3 * i + s) * (t * t * t) + t * t * (2 * e - 5 * a + 4 * i - s) + (-e + i) * t + 2 * a)
		}
		getPointPosition(t, e) {
			return e ? this.points[t].position : this.points[t].localPosition
		}
		getLength(t) {
			let e = this.points;
			if (e.length < 3) return 0;
			let a = 0;
			for (var i = 1; i < e.length - 2; i++) {
				if (!e[1] || !e[i + 1]) return 0;
				a += t ? Vector3$1.distance(e[i].position, e[i + 1].position) : Vector3$1.distance(e[i].localPosition, e[i + 1].localPosition)
			}
			return a
		}
	}! function(t) {
		t[t.TU_FEI_ZAO = 0] = "TU_FEI_ZAO", t[t.SHUI_XI = 1] = "SHUI_XI", t[t.CA_GAN = 2] = "CA_GAN", t[t.HEI_TOU_TIE = 3] = "HEI_TOU_TIE", t[t.SI_HEI_TOU_TIE = 4] = "SI_HEI_TOU_TIE", t[t.FU_MIAN_MO = 5] = "FU_MIAN_MO", t[t.SI_MIAN_MO = 6] = "SI_MIAN_MO", t[t.XIU_MEI_MAO = 7] = "XIU_MEI_MAO", t[t.QU_DOU_YIN = 8] = "QU_DOU_YIN", t[t.SUCCESS = 9] = "SUCCESS"
	}(OPT_TYPE || (OPT_TYPE = {}));
	class PanelSkincare extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelSkincare.json", this._exportNodeInfo = {
				cc_topNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_levelNode: "Laya.Sprite",
				cc_barLevel: "UIBarMask",
				cc_labelLevel: "Laya.Label",
				cc_buttonFree: "UIButton",
				cc_bottomNode: "Laya.Sprite",
				cc_skincareBottomNode: "Laya.Sprite",
				cc_skincareLayout: "UIHVLayout",
				cc_bottomLeftNode: "Laya.Sprite",
				cc_buttonStartSkincare: "UIButton",
				cc_spriteStartSkincare: "Laya.Sprite",
				cc_optItemNode: "Laya.Sprite",
				cc_itemIcon: "Laya.Image",
				cc_lockNode: "Laya.Image",
				cc_buttonEmpty1: "UIButton",
				cc_buttonEmpty2: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_enter_play", ""), this.opts = [], this.bNeedItem = !1, this._optValue = [OPT_TYPE.TU_FEI_ZAO, OPT_TYPE.SHUI_XI, OPT_TYPE.CA_GAN, OPT_TYPE.HEI_TOU_TIE, OPT_TYPE.SI_HEI_TOU_TIE, OPT_TYPE.FU_MIAN_MO, OPT_TYPE.SI_MIAN_MO, OPT_TYPE.XIU_MEI_MAO, OPT_TYPE.QU_DOU_YIN, OPT_TYPE.SUCCESS], this.bFinishSkincare = !1, this._bHold = !1
		}
		addPreloadRes(t) {
			t.addPrefab2D("res/prefab/SkincareItem.json"), t.addModel("res/unity/Conventional/map_01.ls"), t.addModel(db.get_model_db("paopao").resPath), t.addModel(db.get_effect_db("101").res), t.addModel(db.get_effect_db("104").res), t.addModel(db.get_effect_db("105").res)
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonFree.node, "pnl_main_13.png"), mgrI18n.trySetI18nImage(this.spriteStartSkincare, "pnl_play_08.png"), this.roleLevel = new RoleLevel(this.barLevel, this.labelLevel), this.lockNode.visible = mgrGuide.dispatchGuide(GUD_EVENT.ENTER_SKINCARE), mgrGame.tryOpenPanelRankVideoTips(3), this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this)), this.scoreBar = new ScoreBar, this.scoreBar.setParent(this.topLeftNode), this.scoreBar.x = -100, this.scoreBar.hide(), this.skincareBottomNode.visible = !1, this.optItemNode.visible = !1, this.optItemNode.x = 100, this.bottomLeftNode.x = -150, this.topLeftNode.x = -150, this.playButtons = new PlayBottomNode({
				onOpenCallback: this.close.bind(this),
				curIndex: 0
			}), this.playButtons.setParent(this.bottomNode), this.playButtons.y = 200, this.currencyBar = new CurrencyBar, this.currencyBar.setParent(this.topNode), this.scheduleOnce(1.2, () => {
				this.playButtons.fadeIn(), UiHelper.playMoveIn(this.bottomLeftNode), UiHelper.playMoveIn(this.topLeftNode)
			}), UiHelper.registerTouchEvent(this.resNode, this.onTouchDown.bind(this), this.onTouchMove.bind(this), this.onTouchUp.bind(this)), this.optItemNode.on(Laya.Event.MOUSE_DOWN, this, this.onOptTouchDown), this.registerMsg({
				OPT_FINISH: this.onMsgOptFinish.bind(this),
				UI_SELECT_OPT_ITEM: this.onMsgSelectSkincareItem.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			if (this.stopProcMsg(), this.skincareItems)
				for (let t = 0; t < this.skincareItems.length; t++) this.skincareItems[t].dispose();
			if (this.opts) {
				for (let t = 0; t < this.opts.length; t++) this.opts[t] && this.opts[t].dispose();
				this.opts = null
			}
			if (this.douYinList)
				for (var t = 0; t < this.douYinList.length; t++) this.douYinList[t].dispose();
			if (this.zaMaoList) {
				for (t = 0; t < this.zaMaoList.length; t++) this.zaMaoList[t].dispose();
				this.zaMaoList = null
			}
			this.butterfly && this.butterfly.dispose(), this.playButtons && this.playButtons.dispose(), this.avatar && this.avatar.destroy(), this.room && this.room.dispose(), this.scoreBar && this.scoreBar.dispose(), this.roleLevel && this.roleLevel.dispose(), this.currencyBar && this.currencyBar.dispose(), this.instOrBanner.dispose(), mgrSdk.resetRecordState(), super.dispose(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELSKINCARE_BUTTONSTART), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELSKINCARE_BRUSH), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELSKINCARE_BUTTONCLOSE), mgrGuide.sendMsgKey("OPT_FINISH")
		}
		regGuide() {
			mgrGuide.registerGuideNode(GUD_REG_NODE.PANELSKINCARE_BUTTONSTART, this.buttonStartSkincare.node, !0), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELSKINCARE_BRUSH, this.itemIcon, !0), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELSKINCARE_BUTTONCLOSE, this.buttonClose.node, !0)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgOptFinish() {
			switch (console.log("onMsgOptFinish"), this.curSelectItemId ? (mgrSkincare.finishOpt(this.curSelectItemId), this.curSelectItemId = null) : mgrSkincare.skincareScore += 20, this.optType) {
				case OPT_TYPE.TU_FEI_ZAO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2207, 1);
					break;
				case OPT_TYPE.SHUI_XI:
					_G.isGuiding || GameStatistics.statisCommonEvent(2208, 1);
					break;
				case OPT_TYPE.CA_GAN:
					_G.isGuiding || GameStatistics.statisCommonEvent(2209, 1);
					break;
				case OPT_TYPE.HEI_TOU_TIE:
					_G.isGuiding || GameStatistics.statisCommonEvent(2220, 1);
					break;
				case OPT_TYPE.SI_HEI_TOU_TIE:
					_G.isGuiding || GameStatistics.statisCommonEvent(2230, 1);
					break;
				case OPT_TYPE.FU_MIAN_MO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2210, 1);
					break;
				case OPT_TYPE.SI_MIAN_MO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2231, 1);
					break;
				case OPT_TYPE.XIU_MEI_MAO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2232, 1);
					break;
				case OPT_TYPE.QU_DOU_YIN:
					_G.isGuiding || GameStatistics.statisCommonEvent(2221, 1)
			}
			this.scoreBar.setValue(mgrSkincare.skincareScore, 0, new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2)), this.curOpt && (this.itemIcon.getComponent(UIDrag).cancelDrag(), this.onTouchUp(), this.switchOpt(), mgrGuide.sendMsgKey("OPT_FINISH"))
		}
		onMsgSelectSkincareItem(t) {
			if (t.optType == this.curOptType) {
				if (this.curSelectItemId == t.itemDb.id) return;
				let e = DbExt.getBrushId(t.itemDb);
				this.curOpt && this.curOpt.setBrush(e);
				let a = db.get_brush_db(e);
				if (this._brushDb = a, a) {
					a.holdOffset.length >= 2 && this.itemIcon.getComponent(UIDrag).setOffset(a.holdOffset[0], a.holdOffset[1]);
					let e = t.item.getIconPos(),
						i = UiHelper.getSelfGlobalPos(this.itemIcon);
					mgrAlert.openResWait(a.icon, RES_TYPE.IMAGE, () => {
						this.destroyed || UiHelper.playImageScaleAndJump(a.icon, e, i, null, () => {
							this.destroyed || (this.itemIcon.skin = a.icon)
						})
					})
				}
				this.curSelectItemId = t.itemDb.id;
				let i = null;
				switch (this.curOptType) {
					case OPT_TYPE.TU_FEI_ZAO:
						_G.isGuiding || GameStatistics.statisCommonEvent(2207, 0), i = GUD_EVENT.OPT_IDLE_TU_LIAN;
						break;
					case OPT_TYPE.SHUI_XI:
						_G.isGuiding || GameStatistics.statisCommonEvent(2208, 0), i = GUD_EVENT.OPT_IDLE_TU_LIAN;
						break;
					case OPT_TYPE.CA_GAN:
						_G.isGuiding || GameStatistics.statisCommonEvent(2209, 0), i = GUD_EVENT.OPT_IDLE_TU_LIAN;
						break;
					case OPT_TYPE.HEI_TOU_TIE:
						_G.isGuiding || GameStatistics.statisCommonEvent(2220, 0), i = GUD_EVENT.OPT_IDLE_TU_BI_ZI;
						break;
					case OPT_TYPE.SI_HEI_TOU_TIE:
						_G.isGuiding || GameStatistics.statisCommonEvent(2230, 0);
						break;
					case OPT_TYPE.FU_MIAN_MO:
						_G.isGuiding || GameStatistics.statisCommonEvent(2210, 0), i = GUD_EVENT.OPT_IDLE_TU_LIAN;
						break;
					case OPT_TYPE.SI_MIAN_MO:
						_G.isGuiding || GameStatistics.statisCommonEvent(2231, 0);
						break;
					case OPT_TYPE.XIU_MEI_MAO:
						_G.isGuiding || GameStatistics.statisCommonEvent(2232, 0), i = GUD_EVENT.OPT_IDLE_XIU_MEI_MAO;
						break;
					case OPT_TYPE.QU_DOU_YIN:
						_G.isGuiding || GameStatistics.statisCommonEvent(2221, 0), i = GUD_EVENT.OPT_IDLE_TU_LIAN
				}
				i && this.scheduleOnce(.05, function() {
					mgrGuide.dispatchGuide(i)
				})
			}
		}
		onMsgAdvShowSuc(t) {
			if ("one_click_interact" == t.advName) {
				let a = ["ty_douyin", "ty_heitou", "ty_mianmo", "ty_shuidi", "mianwen_zang", "heitoutie", "mianmo", "hf_toushi", "hf_taozhuang"];
				if (t.params.gameName == mgrI18n.getText("panelSkincare.1")) {
					for (let t = 0; t < a.length; ++t) mgrSkincare.finishOptAll(a[t]);
					if (this.skincareItems)
						for (let t = 0; t < this.skincareItems.length; t++) this.skincareItems[t].dispose();
					if (this.opts) {
						for (let t = 0; t < this.opts.length; t++) this.opts[t] && this.opts[t].dispose();
						this.opts = null
					}
					if (this.douYinList)
						for (var e = 0; e < this.douYinList.length; e++) this.douYinList[e].dispose();
					if (this.zaMaoList) {
						for (e = 0; e < this.zaMaoList.length; e++) this.zaMaoList[e].dispose();
						this.zaMaoList = null
					}
					this.avatar.setParts(mgrPart.partsWear, !1, null, !0), GameStatistics.statisCommonEvent(2213);
					let t = mgrSkincare.finishSkincare(!0);
					t && mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
						score: 100,
						xinQing: t
					})
				}
			}
		}
		onSceneLoaded() {
			if (this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToSkincare(), mgrSkincare.isXinQingFull) {
				var t = mgrPart.partsWear;
				this.avatar = new RoleAvatar(t, () => {
					Laya.timer.frameOnce(1, this, this.initNormal)
				})
			} else {
				if (_G.isGuiding) t = ["mianwen_zang", "ty_mianmo", "hf_taozhuang", "hf_toushi"];
				else t = ["mianwen_zang", "ty_heitou", "ty_mianmo", "hf_taozhuang", "hf_toushi"];
				this.avatar = new RoleAvatar(t, () => {
					Laya.timer.frameOnce(1, this, this.initHuFu)
				})
			}
			this.room.root.addChild(this.avatar)
		}
		initNormal() {
			this.avatar.playAnimation(MODEL_ANIM.HUFU_IDLE)
		}
		initHuFu() {
			this.avatar.playAnimation(MODEL_ANIM.HUFU_IDLE);
			let t = this.avatar.getView(db.MODEL_DB_ID.ty_heitou);
			if (t) {
				var e = t.model.getAnimator();
				e.speed = 1e-5, e.play(null, 0, 0)
			}
			let a = this.avatar.getView(db.MODEL_DB_ID.ty_mianmo).model.getAnimator();
			if (a.speed = 1e-5, a.play(null, 0, 0), Laya.timer.frameOnce(1, this, () => {
					e && (e.speed = 0), a.speed = 0
				}), _G.isGuiding) return;
			let i = [],
				s = OperateBase.FACE_ATTACH_NODE;
			Mathf.shuffle(s);
			for (var n = 0; n < 3; n++) {
				var o = new DouYinEffect(this.avatar.baseFace.findChild(s[n]), s[n]);
				i.push(o)
			}
			this.douYinList = i;
			let r = [];
			for (n = 1; n <= 12; n++) {
				var l = "ty_zamao" + String.format("%02d", n),
					c = db.get_model_db(l),
					h = new ZaMaoEffect(this.avatar.baseFace.findChild(c.attachNode), l);
				r.push(h)
			}
			this.zaMaoList = r
		}
		switchToSkincare() {
			cc.tween(this.levelNode).to(.3, {
				x: -120
			}).hide().start(), cc.tween(this.buttonStartSkincare.node).to(.3, {
				x: -150
			}).hide().start(), this.buttonFree.node.visible = !1, this.playButtons.fadeOut(() => {
				_G.isGuiding ? this._optSequence = [OPT_TYPE.TU_FEI_ZAO, OPT_TYPE.SHUI_XI, OPT_TYPE.CA_GAN, OPT_TYPE.FU_MIAN_MO, OPT_TYPE.SI_MIAN_MO, OPT_TYPE.SUCCESS] : (this._optSequence = this._optValue.slice(), this.checkColorEggs()), this.opts = [], SkincareItem.advCount = 0, this.switchOpt(), this.scoreBar.moveIn(), this.scoreBar.setValue(0), cc.tween(this.optItemNode).show().to(.3, {
					x: -139
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.skincareBottomNode).set({
					y: 50
				}).show().to(.3, {
					y: -155
				}).start()
			})
		}
		switchToMain() {
			this.buttonFree.node.visible = !0, cc.tween(this.levelNode).show().to(.3, {
				x: 5
			}).start(), cc.tween(this.buttonStartSkincare.node).show().to(.3, {
				x: 63
			}).start(), cc.tween(this.optItemNode).to(.3, {
				x: 100
			}, cc.OPTION.SINE_OUT).hide().start(), this.playButtons.fadeIn(() => {}, 2.5), this.scoreBar.moveOut(), cc.tween(this.skincareBottomNode).to(.3, {
				y: -155
			}).hide().start()
		}
		onTouchDown(t) {
			if (this.curOpt) {
				if (this.bNeedItem && !this.curSelectItemId && UiHelper.isTouched(this.itemIcon, 100)) return void mgrAlert.alertDialog(mgrI18n.getText("panelSkincare.2"));
				this.bNeedItem && UiHelper.isTouched(this.itemIcon, 100) && mgrGuide.sendMsgKey("TOUCH_DOWN_BRUSH"), this.curOpt.setHoldState(this._bHold), this._brushDb ? this.curOpt.refreshBrushOffset(this.itemIcon) : this.curOpt.refreshBrushOffset(null), this.curOpt.touchDown(), t.stopPropagation()
			}
		}
		onTouchMove() {
			this.curOpt && this.curOpt.touchMove()
		}
		onTouchUp() {
			this._bHold = !1, this.curOpt && this.curOpt.touchUp()
		}
		onOptTouchDown() {
			this._bHold = !0
		}
		switchOpt() {
			let t = this._optSequence.shift();
			this.optType = t, null != t && (this.curOpt = null, this.itemIcon.getComponent(UIDrag).cancelDrag(), this.createOpt(t))
		}
		createOpt(t) {
			if (!this.curOpt) {
				if (this.opts[t]) return void console.error("重复操作:" + t);
				switch (t) {
					case OPT_TYPE.TU_FEI_ZAO:
						this.curOpt = new OptFeiZao(this.avatar, this.room.scene, this.room.camera);
						break;
					case OPT_TYPE.SHUI_XI:
						let e = this.opts[OPT_TYPE.TU_FEI_ZAO].getFeiZaoData();
						this.curOpt = new OptShuiXi(this.avatar, this.room.scene, this.room.camera).setFeiZaoData(e).setItemIcon(this.itemIcon);
						break;
					case OPT_TYPE.CA_GAN:
						let a = this.opts[OPT_TYPE.SHUI_XI].getShuiDiEffects();
						this.curOpt = new OptCaGan(this.avatar, this.room.scene, this.room.camera).setShuiDiEffects(a);
						break;
					case OPT_TYPE.HEI_TOU_TIE:
						this.curOpt = new OptHeiTouTie(this.avatar, this.room.scene, this.room.camera);
						break;
					case OPT_TYPE.SI_HEI_TOU_TIE:
						this.curOpt = new OptSiHeiTouTie(this.avatar, this.room.scene, this.room.camera), this.scheduleOnce(.05, function() {
							mgrGuide.dispatchGuide(GUD_EVENT.OPT_IDLE_SI_MIAN_MO)
						});
						break;
					case OPT_TYPE.FU_MIAN_MO:
						this.curOpt = new OptFuMianMo(this.avatar, this.room.scene, this.room.camera);
						break;
					case OPT_TYPE.SI_MIAN_MO:
						this.curOpt = new OptSiMianMo(this.avatar, this.room.scene, this.room.camera), this.scheduleOnce(.05, function() {
							mgrGuide.dispatchGuide(GUD_EVENT.OPT_IDLE_SI_MIAN_MO)
						});
						break;
					case OPT_TYPE.XIU_MEI_MAO:
						this.curOpt = new OptXiuMeiMao(this.avatar, this.room.scene, this.room.camera).setZaMao(this.zaMaoList);
						break;
					case OPT_TYPE.QU_DOU_YIN:
						this.curOpt = new OptQuDouYin(this.avatar, this.room.scene, this.room.camera).setDouYin(this.douYinList);
						break;
					case OPT_TYPE.SUCCESS:
						return void this.onSkincareOver();
					default:
						return
				}
				this.curOptType = t, this.opts[t] = this.curOpt, this.updateSkincareItems()
			}
		}
		updateSkincareItems() {
			if (this.curSelectItemId = null, this.bNeedItem = !1, !this.skincareItems) {
				this.skincareItems = [];
				for (let t = 0; t < 3; t++) this.skincareItems[t] = new SkincareItem, this.skincareItems[t].setParent(this.skincareLayout);
				this.skincareLayout.updateLayout()
			}
			let t = mItem.getAllItem(2, 0, this.curOptType);
			if (3 != t.length) return this.optItemNode.visible = !1, void cc.tween(this.skincareLayout.node, !0).to(.2, cc.PROP.ALPHA0).hide().start();
			this.bNeedItem = !0, t.sort(sort_item_id_by_order);
			for (let e = 0; e < 3; e++) this.skincareItems[e].setItem(t[e]).setOptType(this.curOptType), this.skincareItems[e].setScale(0, 0), this.skincareItems[e].runTween(cc.tween().delay(.2 * e).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT));
			this.optItemNode.visible = !0, this.itemIcon.skin = null, mgrGuide.registerGuideNode(GUD_REG_NODE.PANELSKINCARE_ITEM0, this.skincareItems[0].node, !0), cc.tween(this.skincareLayout.node, !0).show().to(.2, cc.PROP.ALPHA1).start()
		}
		onSkincareOver() {
			this.bFinishSkincare = !0, mgrGuide.sendMsgKey("OPT_FINISH"), this.scheduleOnce(2.5, () => {
				let t = mgrSkincare.finishSkincare();
				t && mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
					score: mgrSkincare.skincareScore,
					xinQing: t
				})
			}), this.switchToMain(), mgrSound.playTalk("yllsd_07")
		}
		checkColorEggs() {
			if (mgrColorEggs.isEnable(COLOR_EGGS_QUEST.CLICK_BUTTERFLY) && !this.butterfly) {
				let t = this.room.butteryCurve,
					e = [];
				for (let a = 0; a < t.numChildren; a++) e.push(t.getChildAt(a).transform);
				let a = new Curve(e);
				this.butterfly = new EggButterfly(a), this.butterfly.setParent(this.room.scene), this.resNode.on(Laya.Event.MOUSE_DOWN, this, () => {
					if (this.butterfly.isLoaded && !this.butterfly.isDead) {
						let t = new Laya.Vector2(Laya.stage.mouseX, Laya.stage.mouseY),
							e = UiHelper.screenToRay(t, this.room.camera);
						Mathf.point2Ray(e.origin, e.direction, this.butterfly.transform.position) < .05 && (this.butterfly.kill(function() {
							mgrAlert.alertColorEggTip(EGGS_TYPE.CLASS)
						}), BaseFacade.mGoal.commit(ACTION_ID.EGG_CLICK_BUTTERFLY))
					}
				})
			}
		}
		static getBrushPos() {
			let t = new Laya.Point,
				e = mgrPanel.findPanel(PanelSkincare);
			return e ? UiHelper.getSelfGlobalPos(e.itemIcon, t) : t
		}
		static set lockTouch(t) {
			let e = mgrPanel.findPanel(PanelSkincare);
			e && (e.lockNode.visible = t)
		}
		static set lockTouch1(t) {
			let e = mgrPanel.findPanel(PanelSkincare);
			e && (e.buttonEmpty1.node.visible = t)
		}
		on_click_buttonClose() {
			switch (this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelMain), this.curOpt && GameStatistics.statisOnStageEnd(7508), this.optType) {
				case OPT_TYPE.TU_FEI_ZAO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2207, 2);
					break;
				case OPT_TYPE.SHUI_XI:
					_G.isGuiding || GameStatistics.statisCommonEvent(2208, 2);
					break;
				case OPT_TYPE.CA_GAN:
					_G.isGuiding || GameStatistics.statisCommonEvent(2209, 2);
					break;
				case OPT_TYPE.HEI_TOU_TIE:
					_G.isGuiding || GameStatistics.statisCommonEvent(2220, 2);
					break;
				case OPT_TYPE.SI_HEI_TOU_TIE:
					_G.isGuiding || GameStatistics.statisCommonEvent(2230, 2);
					break;
				case OPT_TYPE.FU_MIAN_MO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2210, 2);
					break;
				case OPT_TYPE.SI_MIAN_MO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2231, 2);
					break;
				case OPT_TYPE.XIU_MEI_MAO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2232, 2);
					break;
				case OPT_TYPE.QU_DOU_YIN:
					_G.isGuiding || GameStatistics.statisCommonEvent(2221, 2)
			}
		}
		on_click_buttonStartSkincare() {
			_G.isGuiding || GameStatistics.statisCommonEvent(2206), _G.isGuiding ? (this.switchToSkincare(), mgrSkincare.startSkincare()) : this.bFinishSkincare ? mgrAlert.alertDialog(mgrI18n.getText("panelSkincare.3")) : mgrSkincare.checkPlayable(() => {
				this.switchToSkincare(), mgrSkincare.startSkincare()
			})
		}
		on_click_buttonFree() {
			mgrPart.openPanelRoom(ROOM_TYPE.NORMAL, null, this.close.bind(this))
		}
		on_click_buttonEmpty1() {}
		on_click_buttonEmpty2() {}
	}
	class Fish extends Laya.Sprite {
		constructor(t) {
			super(), this.speed = 100, this.dir = 1, this.isBlack = t, this.view = _G.poolManager.get(Spine, t ? db.SPINE_DB_ID.cj_jinyuhei : db.SPINE_DB_ID.jinyu), this.view.setParent(this), this.view.playDefaultAnim(), this.originAlpha = Mathf.random(2, 6) / 10, this.alpha = this.originAlpha, this.catchTime = Mathf.lerpFromInverseLerp(.1, .2, .6, .2, this.originAlpha), this.curTime = 0, this.bCatch = !1, this.startMove()
		}
		dispose() {
			this.view && (_G.poolManager.put(this.view), this.view = null), this.state = 0, this.destroy()
		}
		update() {
			0 == this.state && (this.bCatch || (this.curTime = 0, this.updateAttr()))
		}
		updateAttr() {
			this.curTime = Mathf.clamp(this.curTime, 0, this.catchTime), this.alpha = Mathf.lerp(this.originAlpha, 1, this.curTime / this.catchTime);
			let t = Mathf.lerpFromInverseLerp(.9, 1.2, .2, 1, this.alpha);
			this.scale(t, t, !0)
		}
		tryCol(t, e) {
			let a = !1;
			return 0 == this.state && (Mathf.distanceSqr2(this.x - t, this.y - e) < 8100 ? (this.curTime += Timer.deltaTime, a = !0) : this.curTime -= Timer.deltaTime, this.updateAttr(), this.curTime >= this.catchTime && this.dead()), a
		}
		randomMoveImm() {
			this.randomMove(!0)
		}
		get isDead() {
			return 1 == this.state
		}
		startMove() {
			this.state = 0;
			let t = this.randomPos();
			this.pos(t.x, t.y, !0), this.randomMove()
		}
		randomMove(t = !1) {
			let e = this.randomPos(),
				a = e.distance(this.x, this.y),
				i = Mathf.lerpFromInverseLerp(1, 2, 0, 450, a) + Mathf.random(20, 50) / 100;
			t && (i *= .7), Vec2.TEMP.setValue(e.x - this.x, e.y - this.y);
			let s = GameUtility.convertDir2Rot(Vec2.TEMP) + 180;
			cc.tween(this, !0).parallel(cc.tween().to(.1 * i, {
				rotation: s
			}), cc.tween().to(i, {
				x: e.x,
				y: e.y
			}, t ? cc.OPTION.SINE_OUT : cc.OPTION.SINE_IN_OUT)).delay(Mathf.random(10, 30) / 10).call(this.moveFinish.bind(this)).start()
		}
		moveFinish() {
			0 == this.state && this.randomMove()
		}
		randomPos(t) {
			return t || (t = new Laya.Point), t.setTo(Mathf.random(-180, 180), Mathf.random(-90, 90))
		}
		fadin() {}
		dead() {
			this.state = 1, this.view.setTimeScale(5);
			let t = UiHelper.getSelfGlobalPos(this, new Laya.Point);
			mgrAlert.playParticleEffect("139", t, 2, .5), _G.sendMsg("CATCH_FISH_START", this), Laya.timer.once(1e3, this, () => {
				this.destroyed || (_G.sendMsg("CATCH_FISH", this), this.visible = !1)
			})
		}
	}
	class FishGame extends MsgHandler {
		constructor(t, e, a) {
			super(), this.destroyed = !1, this.bTouched = !1, this.fishs = [], this.fishCenter = t, this.headUp = e, this.headDown = a, this.headState = 2, a.alpha = 0, this.fishCenter.zOrder = -1, this.registerListeners({
				CATCH_FISH: this.onMsgCatchFish.bind(this),
				CATCH_FISH_START: this.onMsgCatchStart.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.destroyed = !0, Laya.timer.clearAll(this), this.stopProcMsg();
			for (let t = this.fishs.length - 1; t >= 0; t--) this.fishs[t].dispose();
			this.fishs.length = 0
		}
		onMsgCatchFish(t) {
			this.createNormal()
		}
		onMsgCatchStart() {
			this.onTouchEnd()
		}
		update() {
			switch (this.headState) {
				case 1:
					this.headDown.alpha = Mathf.clamp01(this.headDown.alpha + .05), this.headUp.alpha = 1 - this.headDown.alpha, this.headDown.alpha >= 1 && (this.headState = 3);
					break;
				case 0:
					this.headUp.alpha = Mathf.clamp01(this.headUp.alpha + .05), this.headDown.alpha = 1 - this.headUp.alpha, this.headUp.alpha >= 1 && (this.headState = 2)
			}
			for (let t = this.fishs.length - 1; t >= 0; t--) this.fishs[t].update()
		}
		createNormal() {
			let t = new Fish(!1);
			this.fishCenter.addChild(t), this.fishs.push(t)
		}
		createBlack() {
			let t = new Fish(!0);
			this.fishCenter.addChild(t), this.fishs.push(t)
		}
		hasBlackFish() {
			for (let t = 0; t < this.fishs.length; t++)
				if (!this.fishs[t].isDead && this.fishs[t].isBlack) return !0;
			return !1
		}
		onTouchStart() {
			this.bTouched = !0, Laya.timer.loop(.1, this, this.onTouchMove);
			for (let t = this.fishs.length - 1; t >= 0; t--) this.fishs[t].randomMoveImm();
			_G.sendMsg("CATCH_FISH_TOUCH")
		}
		setLocalPos(t, e) {
			this.touchX = t, this.touchY = e
		}
		onTouchMove() {
			let t = this.touchX,
				e = this.touchY;
			if (this.bTouched) {
				if (Mathf.distance2(t, e) > 150 ? this.fadeUp() : this.fadeDown(), 3 == this.headState) {
					for (let t = this.fishs.length - 1; t >= 0; t--) this.fishs[t].bCatch = !1;
					let a = !1;
					for (let i = this.fishs.length - 1; i >= 0; i--)
						if (this.fishs[i].isBlack) {
							this.fishs[i].tryCol(t, e) && (this.fishs[i].bCatch = !0, a = !0);
							break
						} for (let i = this.fishs.length - 1; i >= 0; i--)
						if (!a && this.fishs[i].tryCol(t, e)) {
							this.fishs[i].bCatch = !0, a = !0;
							break
						}
				} else
					for (let t = this.fishs.length - 1; t >= 0; t--) this.fishs[t].bCatch = !1
			}
		}
		onTouchEnd() {
			Laya.timer.clear(this, this.onTouchMove), this.bTouched = !1;
			for (let t = this.fishs.length - 1; t >= 0; t--) this.fishs[t].bCatch = !1;
			this.fadeUp()
		}
		fadeDown() {
			1 != this.headState && 3 != this.headState && (this.headState = 1, this.fishCenter.zOrder = 1)
		}
		fadeUp() {
			0 != this.headState && 2 != this.headState && (this.headState = 0, this.fishCenter.zOrder = -1)
		}
	}
	const KEY_DREAM_DATA = "KEY_DREAM_DATA",
		KEY_DREAM_STORY_DATA = "KEY_DREAM_STORY_DATA";

	function sort_role_id_by_order(t, e) {
		return Tools.sort_db_by_order(db.get_role_db(t), db.get_role_db(e))
	}
	class mgrDream extends _mgrBase {
		static onload() {
			this.storyAdvUnlock = FileRecord.getData(KEY_DREAM_DATA), this.storyAdvUnlock || (this.storyAdvUnlock = {}), this._storyWatch = FileRecord.getData(KEY_DREAM_STORY_DATA), this._storyWatch || (this._storyWatch = {})
		}
		static saveData() {
			FileRecord.setData(KEY_DREAM_DATA, this.storyAdvUnlock), FileRecord.setData(KEY_DREAM_STORY_DATA, this._storyWatch)
		}
		static getAllRole() {
			let t = db.get_role_db_map(),
				e = Object.keys(t);
			for (let t = e.length - 1; t >= 0; t--) {
				0 == db.get_role_db(e[t]).suits.length && e.splice(t, 1)
			}
			return e
		}
		static randomNextPart(t) {
			let e = db.get_suit_db(t).lotteryParts,
				a = Mathf.random(e.length);
			for (let t = 0; t < e.length; t++) {
				let i = (t + a) % e.length;
				if (!BaseFacade.mItem.isOwned(e[i])) return e[i]
			}
			return null
		}
		static getRoleIdFromSuit(t) {
			let e = db.get_role_db_map(),
				a = null;
			return Tools.forEachMap(e, function(e, i) {
				for (let s = i.suits.length - 1; s >= 0; s--)
					if (i.suits[s] == t) return a = e, !0
			}), a
		}
		static canGetPart(t) {
			if (!t) return !1;
			let e = db.get_suit_db(t).lotteryParts;
			for (let t = e.length - 1; t >= 0; t--)
				if (!BaseFacade.mItem.isOwned(e[t])) return !0;
			return !1
		}
		static isUnlockSuit(t) {
			let e = this.getRoleIdFromSuit(t),
				a = db.get_role_db(e);
			a.suits.indexOf(t);
			return 0
		}
		static hasPartCount(t) {
			if (!t) return 0;
			let e = 0,
				a = db.get_suit_db(t).lotteryParts;
			for (let t = a.length - 1; t >= 0; t--) BaseFacade.mItem.isOwned(a[t]) && e++;
			return e
		}
		static getNextPrice(t) {
			let e = this.hasPartCount(t),
				a = db.get_suit_db(t);
			return e >= a.prices.length ? a.prices[0] : a.prices[e]
		}
		static getAllPartCount(t) {
			let e = db.get_role_db(t),
				a = 0;
			for (let t = 0; t < e.suits.length; t++) {
				a += db.get_suit_db(e.suits[t]).lotteryParts.length
			}
			return a
		}
		static getRoleHeard(t) {
			let e = db.get_role_db(t),
				a = 0;
			for (let t = 0; t < e.suits.length; t++) a += this.hasPartCount(e.suits[t]);
			return a
		}
		static get isTip() {
			let t = this.getAllRole();
			for (var e = 0; e < t.length; e++)
				if (this.checkRoleTip(t[e])) return !0;
			return !1
		}
		static checkRoleTip(t) {
			let e = db.get_role_db(t);
			for (var a = 0; a < e.suits.length; a++)
				if (this.checkSuitTip(e.suits[a])) return !0;
			return !1
		}
		static checkSuitTip(t) {
			if (0 == this.isUnlockSuit(t))
				if (this.canGetPart(t)) {
					if (BaseFacade.mItem.enoughItem("1001", this.getNextPrice(t))) return !0
				} else {
					let e = db.get_suit_db(t);
					if (!this.isWatchedStroy(e.talkId)) return !0
				} return !1
		}
		static hasSuit(t) {
			return !this.canGetPart(t)
		}
		static isAdvUnlockStory(t) {
			return !!mgrAdv.getActive("unlock_story") && !!this.storyAdvUnlock[t]
		}
		static unlockStoryByAdv(t) {
			this.storyAdvUnlock[t] = 1, this.saveData()
		}
		static isWatchedStroy(t) {
			return !!(this._storyWatch[t] && this._storyWatch[t] > 0)
		}
		static WatchStory(t) {
			this._storyWatch[t] = 1, this.saveData()
		}
	}
	class PanelFishGame extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelFishGame.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_listNode: "Laya.Image",
				cc_template: "Laya.Sprite",
				cc_scrollView: "ReuseScrollList",
				cc_gameNode: "Laya.Sprite",
				cc_touchNode: "Laya.Sprite",
				cc_circleDownNode: "Laya.Sprite",
				cc_circleUpNode: "Laya.Sprite",
				cc_gameCenter: "Laya.Sprite",
				cc_finishNode: "Laya.Label",
				cc_buttonFind: "UIButton",
				cc_priceLabel: "Laya.Label",
				cc_labelUnlock: "Laya.Label",
				cc_buttonPre: "UIButton",
				cc_buttonNext: "UIButton",
				cc_topNode: "Laya.Sprite",
				cc_rightNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_fish_game", ""), this.suitIds = [], this.guideFinger = null, this.lastTouchTime = 0, this.moveCommonEvent = !1
		}
		addPreloadRes(t) {
			let e = this.context,
				a = db.get_suit_db(e);
			mgrPart.addPartResList(a.parts, t)
		}
		buildUi() {
			this.currencyBar = new CurrencyBar, this.currencyBar.setParent(this.topNode), this.currencyBar.y = -150, this.topLeftNode.x = -150, this.listNode.x = 400;
			for (let t in db.get_role_db_map()) {
				let e = db.get_role_db_map()[t];
				e.suits.length > 0 && (this.suitIds = this.suitIds.concat(e.suits))
			}
			let t = this.context,
				e = db.get_suit_db(t);
			if (e.fromDreamStatistics && GameStatistics.statisCommonEvent(e.fromDreamStatistics), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_FISH)) {
				let e = mgrDream.getNextPrice(t),
					a = BaseFacade.mItem.getItemCount("1001");
				a < e && BaseFacade.mItem.addItem("1001", e - a, null)
			}
			this.scrollView.onItemCreate = (() => {
				let t = new FishPartItem;
				return t.createFromNode(UiHelper.cloneSprite(this.template)), t
			}), this.scrollView.onItemChange = ((t, a) => {
				t.setData(e.lotteryParts[a])
			}), this.scrollView.updateList(e.lotteryParts.length), this.init3D(e.parts), this.refreshButton(), this.registerMsg({
				CATCH_FISH: this.onMsgCatchFish.bind(this),
				CATCH_FISH_TOUCH: this.onMsgCatchFishTouch.bind(this),
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.currencyBar && this.currencyBar.dispose(), this.scrollView && this.scrollView.clearAllItems(), this.fishGame && this.fishGame.dispose(), mgrSdk.resetRecordState(), this.storyTip && this.storyTip.dispose(), super.dispose(), mgrGuide.getCurGuideId() == GUD_EVENT.ENTER_FISH && _G.sendMsg("GUIDE_FORCE_CLOSE")
		}
		onDialogOpenAnim(t) {
			UiHelper.playMoveIn(this.topLeftNode, 0, .3, 1), cc.tween(this.listNode).delay(1).call(() => {
				this.currencyBar.moveIn(), t && t()
			}).to(.4, {
				x: 18
			}, cc.OPTION.BACK_OUT).start()
		}
		update() {
			this.fishGame && this.fishGame.update()
		}
		regGuide() {
			mgrGuide.registerGuideNode(GUD_REG_NODE.PANELFISH_BUTTONFIND, this.buttonFind.node, !0), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELFISH_TOUCHNODE, this.touchNode, !0)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgCatchFish(t) {
			this.guideFinger && this.guideFinger.hide(), cc.tween(this.touchNode).to(.2, cc.PROP.ALPHA0).hide().start(), t.isBlack ? (BaseFacade.mGoal.commit(ACTION_ID.EGG_GET_FISH), mgrAlert.alertColorEggTip(EGGS_TYPE.CLASS), BaseFacade.mItem.subItem("1001", this.curPrice, 31)) : mgrDream.canGetPart(this.context) ? mgrAlert.openPanelLoading(UI_NAME.PanelFishGet, this.context) : this.fishGame.hasBlackFish() && (BaseFacade.mItem.subItem("1001", this.curPrice, 31), mgrAlert.addAndAlert({
				itemId: "1001",
				count: Math.floor(this.curPrice / 2)
			}, 31)), this.refreshButton(), mgrGuide.sendMsgKey("CATCH_FISH"), GameStatistics.statisCommonEvent(3025)
		}
		onMsgCatchFishTouch() {
			this.avatar.playAnimation(MODEL_ANIM.LAOYU_LOOK, !1, MODEL_ANIM.LAOYU_IDLE)
		}
		onMsgItemChange(t) {
			2 == t.itemDb.type && 1 == t.itemDb.subType && (cc.clearTween(this.buttonFind.node), this.refreshButton(), this.scrollView.foreachItems(function(t) {
				t.refreshState()
			}), this.storyTip && this.storyTip.updateTip())
		}
		onMsgAdvShowSuc(t) {
			"unlock_story" == t.advName && (mgrDream.unlockStoryByAdv(t.params), mgrAlert.openGameLoading(UI_NAME.PanelStory, t.params))
		}
		fillData() {
			let t = this.context,
				e = db.get_suit_db(t);
			e.fromDreamStatistics && GameStatistics.statisCommonEvent(e.fromDreamStatistics), this.scrollView.onItemChange = ((t, a) => {
				t.setData(e.lotteryParts[a])
			}), this.storyTip && this.storyTip.setChecker(function() {
				return mgrDream.hasSuit(t) && !mgrDream.isWatchedStroy(e.talkId) ? 0 : -1
			}), this.scrollView.updateList(e.lotteryParts.length), this.avatar.setParts(e.parts, !1, null, !0), this.refreshButton()
		}
		init3D(t) {
			this.createScene3DBack(1, 35), this.camera.transform.localPosition = new Laya.Vector3(.22, 1.45, 3.2), this.camera.transform.localRotationEuler = new Laya.Vector3(-10, 0, 0), this.avatar = new RoleAvatar(t), this.avatar.transform.localPosition = new Laya.Vector3(0, 0, 0), this.avatar.transform.localRotationEuler = new Laya.Vector3(0, 15, 0), this.scene3DBack.addChild(this.avatar), this.avatar.playAnimation(MODEL_ANIM.LAOYU_IDLE);
			let e = this.addEffect("144"),
				a = this.node2Camera(this.centerNode);
			e.play(a);
			let i = this.addEffect("135");
			i.setScale(1, 1, 1), i.followTarget(this.touchNode, this.cameraEffect, 110, 40), i.play(), i.hide(), this.guideFinger = i, this.lastTouchTime = Timer.time, Timer.callLoop(1, t => {
				this.guideFinger && (_G.isGuiding || (this.destroyed || this.touchNode.destroyed ? t.stop() : this.touchNode.visible && Timer.time - this.lastTouchTime >= 5 ? this.guideFinger.show() : (this.touchNode.visible || (this.lastTouchTime = Timer.time), this.guideFinger.hide())))
			}, this), this.initTouch()
		}
		initTouch() {
			var t = () => {
				let t = Laya.Point.TEMP;
				UiHelper.getSelfGlobalPos(this.circleDownNode, t), this.gameCenter.globalToLocal(t, !1), this.fishGame.setLocalPos(t.x, t.y)
			};
			UiHelper.registerTouchEvent(this.touchNode, () => {
				this.lastTouchTime = Timer.time, this.guideFinger.hide(), cc.clearTween(this.touchNode), this.fishGame.onTouchStart(), t(), mgrGuide.sendMsgKey("TOUCH_DOWN_FISH")
			}, () => {
				this.fishGame.bTouched && (t(), this.moveCommonEvent || (this.moveCommonEvent = !0, GameStatistics.statisCommonEvent(3024))), this.lastTouchTime = Timer.time
			}, () => {
				this.fishGame.onTouchEnd(), this.lastTouchTime = Timer.time
			}), this.fishGame = new FishGame(this.gameCenter, this.circleUpNode, this.circleDownNode), this.fishGame.createNormal(), this.fishGame.createNormal(), this.fishGame.createNormal(), mgrColorEggs.isEnable(COLOR_EGGS_QUEST.GET_FISH) ? (this.fishGame.createBlack(), this.refreshButton()) : this.fishGame.createNormal(), this.touchNode.alpha = 0, this.touchNode.visible = !1
		}
		refreshButton() {
			mgrDream.canGetPart(this.context) || this.fishGame.hasBlackFish() ? (this.buttonFind.node.visible = !0, this.curPrice = mgrDream.getNextPrice(this.context), this.priceLabel.text = this.curPrice + "", this.finishNode.visible = !1, cc.tween(this.buttonFind.node, !0).show().to(.1, cc.PROP.ALPHA1).start(), UiHelper.playBreathe(this.buttonFind.node)) : (this.buttonFind.node.visible = !1, this.finishNode.visible = !0), this.labelUnlock.visible = !1
		}
		static getTouchPos() {
			let t = new Laya.Point(40, 60),
				e = mgrPanel.findPanel(PanelFishGame);
			return e ? e.touchNode.localToGlobal(t, !1) : t
		}
		static getGameCenterPos() {
			let t = new Laya.Point,
				e = mgrPanel.findPanel(PanelFishGame);
			return e ? UiHelper.getSelfGlobalPos(e.gameCenter, t) : t
		}
		static getFishSprite() {
			let t = mgrPanel.findPanel(PanelFishGame);
			if (t) return t.fishGame.fishs[0]
		}
		on_click_buttonFind() {
			GameStatistics.statisCommonEvent(3023), this.moveCommonEvent = !1, BaseFacade.mItem.enoughItem("1001", this.curPrice) ? (cc.tween(this.touchNode).show().to(.3, cc.PROP.ALPHA1).call(() => {
				UiHelper.playRotCycle(this.touchNode)
			}).start(), cc.tween(this.buttonFind.node, !0).to(.1, cc.PROP.ALPHA0).hide().start(), mgrSdk.tryStartRecord()) : mgrAlert.alertNotEnough("1001")
		}
		on_click_buttonClose() {
			_G.isGuiding || this.close()
		}
		on_click_buttonPre() {
			if (this.suitIds && this.suitIds.length > 0) {
				let t = this.suitIds.indexOf(this.context);
				(t = (t - 1) % this.suitIds.length) < 0 && (t += this.suitIds.length), this.context = this.suitIds[t], this.fillData()
			}
		}
		on_click_buttonNext() {
			if (this.suitIds && this.suitIds.length > 0) {
				let t = this.suitIds.indexOf(this.context);
				t = (t + 1) % this.suitIds.length, this.context = this.suitIds[t], this.fillData()
			}
		}
	}
	class FishPartItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "FishPartItem"
		}
		onCreateComplete() {
			this.getted = this.getChildSprite("getted"), this.icon = this.getChildSprite("icon"), this.stars = this.getChildSprite("stars").addComponent(UIHVLayout), this.stars.itemSize = 28, this.resNode.alpha = 0, UiHelper.playFadein(this.resNode)
		}
		setData(t) {
			this.partId = t;
			let e = db.get_item_db(t);
			this.icon.loadImage(e.icon), UiHelper.setStars(this.stars, e.quality, 5), this.refreshState()
		}
		refreshState() {
			this.partId && (this.getted.visible = BaseFacade.mItem.isOwned(this.partId))
		}
	}
	class mgrMangHe extends _mgrBase {
		static onload() {
			this.mangHeData = FileRecord.getData("KEY_MANG_HE_DATA") || {}, this.mangHeData && Tools.isOneDay(Timer.now, this.mangHeData.time) || (this.mangHeData = {
				count: 0,
				indexs: [],
				time: Timer.now
			}, this.saveData())
		}
		static saveData() {
			FileRecord.setData("KEY_MANG_HE_DATA", this.mangHeData)
		}
		static get maxCount() {
			return mgrAdv.getActive("open_manghe") ? mgrAdv.getMaxCount("open_manghe") + 1 : 1
		}
		static get showMaxCount() {
			return mgrAdv.getMaxCount("open_manghe") + 1
		}
		static get count() {
			return this.mangHeData.count
		}
		static set count(t) {
			this.mangHeData.count = t, this.saveData()
		}
		static isOpened(t) {
			return !this.mangHeData.indexs[t]
		}
		static openIndex(t) {
			this.mangHeData.indexs[t] = 1, this.count++
		}
		static getRandomItem() {
			let t = db.game_cnf.mang_he_show_suits.length,
				e = Mathf.random(t);
			for (var a = 0; a < t; a++)
				for (var i = (a + e) % t, s = db.get_suit_db(db.game_cnf.mang_he_show_suits[i]).lotteryParts, n = s.length, o = Mathf.random(n), r = 0; r < s.length; r++) {
					var l = (r + o) % n;
					if (!BaseFacade.mItem.isOwned(s[l])) return {
						itemId: s[l],
						count: 1
					}
				}
			return null
		}
		static canGetItem() {
			for (let t = 0; t < db.game_cnf.mang_he_show_suits.length; t++) {
				let e = db.get_suit_db(db.game_cnf.mang_he_show_suits[t]).lotteryParts;
				for (let t = 0; t < e.length; t++)
					if (!BaseFacade.mItem.isOwned(e[t])) return !0
			}
			return !1
		}
	}
	class PanelMangHe extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelMangHe.json", this._exportNodeInfo = {
				cc_topNode: "Laya.Sprite",
				cc_sprite01: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_leftSprite: "Laya.Image",
				cc_buttonLeftSee: "UIButton",
				cc_buttonClose: "UIButton",
				cc_topRightNode: "Laya.Sprite",
				cc_rightSprite: "Laya.Image",
				cc_buttonRightSee: "UIButton",
				cc_buttonColorEggClock: "UIButton",
				cc_labelReward: "Laya.Label",
				cc_labelRewardTip: "Laya.Label",
				cc_labelRewardMax: "Laya.Label",
				cc_labelRewardCount: "Laya.Label"
			}, this.instOrBanner = new AdvInstOrBanner("enter_mohe", ""), this.enterMainWhenClose = !0
		}
		addPreloadRes(t) {
			t.addModel("res/unity/Conventional/manghe.ls"), t.addPrefab2D("res/ui/PanelMangHe.json"), t.addPrefab2D("res/ui/PanelMangHeOpen.json"), t.addModel(db.get_model_db(db.MODEL_DB_ID.manghe).resPath), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.MH_IDLE1).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.MH_IDLE2).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.MH_OPEN).path)
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.sprite01, "pnl_manghe_01.png"), 0 == mgrMangHe.count && mgrGuide.dispatchGuide(GUD_EVENT.ENTER_MANGHE) || GameStatistics.statisCommonEvent(3080), mgrGame.tryOpenPanelRankVideoTips(1), GameStatistics.statisOnStageStart(7501), this.updateSuitInfo(), Laya.Scene3D.load("res/unity/Conventional/manghe.ls", Laya.Handler.create(this, this.onSceneLoaded)), this.RewardText(), this.checkColorEgg(), this.registerMsg({
				OPEN_MANG_HE_SUC: this.onMsgOpenMangHeSuc.bind(this),
				OPEN_MANG_HE_FINISH: this.onMsgOpenMangHeFinish.bind(this),
				MANG_HE_RESET: this.onMsgMangheReset.bind(this),
				JUMP_PANEL_BEFORE: this.onMsgJumpPanelBefore.bind(this)
			}), this.startProcMsg(), this.labelRewardMax.visible = !1, this.labelRewardCount.visible = !1
		}
		RewardText() {
			let t = mgrAdv.getLeftCount("open_manghe");
			0 == mgrMangHe.count && t++, t = Mathf.clamp(t, 0, mgrMangHe.showMaxCount), this.labelRewardTip.text = String.format(mgrI18n.getText("panelMangHe.1"), `${t}/${mgrMangHe.showMaxCount}`), console.log("this.labelRewardTip.text", this.labelRewardTip.text)
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.scene && this.scene.destroy(), super.dispose(), mgrSdk.resetRecordState(), this.enterMainWhenClose && mgrGame.tryEnterMain(), GameStatistics.statisOnStageEnd(7501)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgOpenMangHeSuc() {
			null != this.curSelectBoxIndex && (mgrMangHe.openIndex(this.curSelectBoxIndex), this.curSelectBoxIndex = null), this.RewardText()
		}
		onMsgOpenMangHeFinish() {
			this.curSelectBoxIndex, this.RewardText()
		}
		onMsgMangheReset() {
			if (null != this.curSelectBoxIndex) {
				this.scene.getChildByName("manghe" + this.curSelectBoxIndex).active = !0
			}
			this.RewardText()
		}
		onMsgJumpPanelBefore() {
			this.enterMainWhenClose = !1
		}
		updateSuitInfo() {}
		onSceneLoaded(t) {
			if (this.isDisposed) return void t.destroy();
			this.scene = t, this.resNode.addChildAt(t, 4), this.camera = this.scene.getChildByName("MainCamera"), this.camera.clearFlag = 2, this.camera.enableHDR = !1;
			let e = this.scene.getChildByName("col1");
			this.col1 = new Laya.Point, UiHelper.worldToScreen(this.camera, e.transform.position, this.col1), e = this.scene.getChildByName("col2"), this.col2 = new Laya.Point, UiHelper.worldToScreen(this.camera, e.transform.position, this.col2), UiHelper.addClickEvent(this.resNode, this.onClickBg.bind(this));
			let a = this.scene.getChildByName("label"),
				i = new Laya.Point;
			UiHelper.worldToScreen(this.camera, a.transform.position, i), this.resNode.globalToLocal(i, !1), this.labelReward.y = i.y + 5, this.labelReward.x = i.x, console.log("QT_onSceneLoaded", screen.height, screen.availHeight, screen.width, screen.availWidth), console.log("QT_onSceneLoaded", this.labelReward.y, this.labelReward.x);
			for (let t = 0; t < 6; t++) {
				this.scene.getChildByName("manghe" + t).active = mgrMangHe.isOpened(t)
			}
		}
		onClickBg() {
			let t = Laya.stage.mouseX,
				e = Laya.stage.mouseY,
				a = 0,
				i = 0;
			if (a = t < this.col1.x ? 0 : t < this.col2.x ? 1 : 2, e > this.col1.y) i = 1;
			else {
				if (!(e > this.col1.y - 240)) return;
				i = 0
			}
			if (!mgrMangHe.canGetItem()) return void mgrAlert.alertDialog(mgrI18n.getText("panelMangHe.3"));
			let s = 3 * i + a;
			if (!mgrMangHe.isOpened(s)) return;
			if (mgrMangHe.count >= mgrMangHe.maxCount) return void mgrAlert.alertDialog(mgrI18n.getText("panelMangHe.4"));
			let n = this.scene.getChildByName("manghe" + s);
			this.curSelectBoxIndex = s, n.active = !1;
			let o = this.scene.getChildByName("destPos");
			console.log("click ", s), mgrGuide.sendMsgKey("CLICK_MANG_HE"), mgrAlert.openPanelLoading(UI_NAME.PanelMangHeOpen, {
				from: n.transform.position,
				to: o.transform.position,
				camera: this.camera
			}), mgrSdk.tryStartRecord()
		}
		checkColorEgg() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.HUAI_BIAO, EGGS_STEP.SECOND) || (this.buttonColorEggClock.node.visible = !1)
		}
		static getBoxPos() {
			let t = new Laya.Point,
				e = mgrPanel.findPanel(PanelMangHe);
			if (e) {
				let a = e.scene.getChildByName("manghe1");
				UiHelper.worldToScreen(e.camera, a.transform.position, t)
			}
			return t
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonLeftSee() {
			mgrPart.openPanelSuitDetal(db.game_cnf.mang_he_show_suits[0]), GameStatistics.statisCommonEvent(3076)
		}
		on_click_buttonRightSee() {
			mgrPart.openPanelSuitDetal(db.game_cnf.mang_he_show_suits[1]), GameStatistics.statisCommonEvent(3077)
		}
		on_click_buttonColorEggClock() {
			this.buttonColorEggClock.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggClock.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggClock.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.huai_biao)
		}
	}
	class RoomOutside extends RoomBase {
		constructor() {
			super(...arguments), this.resourceName = "res/unity/Conventional/map_02.ls", this.hudieFov = 45
		}
		onSceneLoaded(t) {
			this.lingGanCamera.getComponent(Laya.Animator).speed = 0, this.resetMat(t);
			let e = t.getChildByName("map_02").getChildByName("skybox");
			e.transform.localRotationEulerY = 0, this.skyBoxTween = cc.tween(e.transform).by(360, {
				localRotationEulerY: 360
			}).start()
		}
		resetMat(t) {
			if (t.allMaterial) return;
			let e = UiHelper.findAllMeshRenderers(t, null, !0);
			if (e) {
				let l = [];
				t.allMaterial = l, this.lingGanCamera.getComponent(Laya.Animator).getControllerLayer(0).playOnWake = !1;
				for (var a = 0; a < e.length; a++) {
					for (var i = e[a], s = i.sharedMaterials, n = [], o = 0; o < s.length; o++) {
						var r = s[o];
						if (r instanceof Laya.BlinnPhongMaterial) {
							let t = new LightMapMaterial;
							t.albedoTexture = r.albedoTexture, t.tilingOffset = r.tilingOffset, "map_02_06" == r.name ? t.renderMode = LightMapMaterial.RENDERMODE_CUTOUT : t.renderMode = LightMapMaterial.RENDERMODE_OPAQUE, n.push(t), l.push(t)
						} else n.push(r), l.push(r)
					}
					i.sharedMaterials = n
				}
			}
		}
		dispose() {
			if (this.skyBoxTween && this.skyBoxTween.stop(), this.scene) {
				this.switchToDay(!0);
				let t = this.lingGanCamera.getComponent(Laya.Animator);
				cc.clearTween(t)
			}
			this.mainPos && (_G.pool.put(this.mainPos), _G.pool.put(this.mainRot), this.mainPos = null, this.mainRot = null), super.dispose()
		}
		changeToMain() {
			this.camera || (this.createCamera(this.mainCamera), this.createRoot(this.mainNode), this.mainCamera.active = !1, this.lajiCamera.active = !1, this.lingGanCamera.active = !1, this.mainPos = _G.pool.get(Laya.Vector3), this.mainCamera.transform.localPosition.cloneTo(this.mainPos), this.mainRot = _G.pool.get(Laya.Quaternion), this.mainCamera.transform.localRotation.cloneTo(this.mainRot), this.mainFov = this.mainCamera.fieldOfView)
		}
		moveToLaji(t) {
			UiHelper.tweenCamera(this.camera, 1, this.lajiCamera.transform.localPosition, this.lajiCamera.transform.localRotation, this.lajiCamera.fieldOfView, cc.Ease.sineIn, t)
		}
		moveToMain(t) {
			UiHelper.tweenCamera(this.camera, 1, this.mainPos, this.mainRot, this.mainFov, cc.Ease.sineIn, t)
		}
		mainToLingGan(t, e, a) {
			this.camera.active = !1, this.lingGanCamera.active = !0;
			e.playDissolveIn(.3333, .5);
			let i = this.lingGanCamera.getComponent(Laya.Animator);
			i.speed = 1e-5, i.play(null, 0, 0), cc.tween(i).to(2.833, {}, {
				onStart: function() {
					t.baseBody.setSpeed(1e-5), t.playAnimation(MODEL_ANIM.ZHUAN_SHEN)
				},
				onUpdate: (e, a) => {
					this.destroyed ? cc.clearTween(i) : (e.play(null, 0, .99 * a), t.baseBody.getAnimator().play(MODEL_ANIM.ZHUAN_SHEN, 0, a))
				},
				onComplete: function(e) {
					t.baseBody.setSpeed(1)
				}
			}).delay(1.2).call(function() {
				a && a()
			}).start()
		}
		lingGanToMain() {
			this.lingGanCamera.getComponent(Laya.Animator).speed = 0, this.lingGanCamera.active = !1, this.camera.active = !0
		}
		switchToNight() {
			let t = this.scene.allMaterial;
			for (var e = 0; e < t.length; e++) {
				var a = t[e];
				cc.tween(a, !0).to(.5, {}, {
					onUpdate: function(t, e) {
						var a = Mathf.lerp(t.albedoIntensity, .2, e);
						t.albedoIntensity = a
					}
				}).start()
			}
		}
		switchToDay(t = !1) {
			let e = this.scene.allMaterial;
			for (var a = 0; a < e.length; a++) {
				var i = e[a];
				t ? (i.albedoIntensity = 1, cc.clearTween(i)) : cc.tween(i, !0).to(.5, {}, {
					onUpdate: function(t, e) {
						var a = Mathf.lerp(t.albedoIntensity, 1, e);
						t.albedoIntensity = a
					}
				}).start()
			}
		}
		get hudieNode() {
			return this.scene.getChildByName("HuDieNode")
		}
		get mainCamera() {
			return this.scene.getChildByName("MainCamera")
		}
		get mainNode() {
			return this.scene.getChildByName("MainNode")
		}
		get lajiCamera() {
			return this.scene.getChildByName("LaJiCamera")
		}
		get lingGanCamera() {
			return this.scene.getChildByName("LingGanCamera1")
		}
	}
	class Butterfly {
		constructor(t, e) {
			this.destroyed = !1, this.lastX = 0, this.eulerY = 0, this.curve = t, this.view = _G.poolManager.get(GModel, db.MODEL_DB_ID.hudie), this.view.initPaint(), this.view.playAnim(MODEL_ANIM.HUDIE_IDLE, 0, !0), this.lifeTime = e, this.leftTime = this.lifeTime, this.startMove()
		}
		dispose() {
			this.destroyed = !0, this.view.sharedMaterial.setToNormal(), _G.poolManager.put(this.view), this.view = null
		}
		setParent(t) {
			this.view.setParent(t)
		}
		update(t) {
			if ((1 == this.state || 2 == this.state || 3 == this.state) && this.leftTime > 0) {
				let e = 1 - this.leftTime / this.lifeTime;
				if (this.curve.getPosition(e, Mathf.TEMP_VEC3, !0), this.view.setWorldPosition(Mathf.TEMP_VEC3), this.view.isLoaded) {
					let t = this.view.transform.localPositionX,
						e = t - this.lastX;
					this.lastX = t;
					let a = e > 0 ? -20 : 20;
					this.eulerY != a && (this.eulerY = a, this.view.transform.localRotationEulerY = a)
				}
				if (this.bLingGan && e > .5) return;
				this.leftTime -= t, this.leftTime <= 0 && 3 != this.state && this.fadeoutMove()
			}
		}
		tryCol(t) {
			if (this.touchabel && this.view && this.view.isLoaded) {
				let e = Laya.Point.TEMP;
				if (UiHelper.worldToScreen(t, this.view.node.transform.position, e), Mathf.distanceSqr2(e.x - Laya.stage.mouseX, e.y - Laya.stage.mouseY) < 3600) return this.kill(), !0
			}
			return !1
		}
		get position() {
			return this.view.resNode.transform.position
		}
		get isDead() {
			return 4 == this.state
		}
		get touchabel() {
			return 1 == this.state
		}
		startMove() {
			this.state = 1
		}
		kill() {
			1 == this.state && (this.fadeoutDead(), mgrOutside.addButterflyScore(), _G.sendMsg("CLICK_BUTTERFLY", this))
		}
		fadeoutDead() {
			this.state = 3, this.view.sharedMaterial.playDissolveOut(.5, .75, this.dead.bind(this)), Laya.timer.once(750, this, function() {
				mgrSound.playTalk("yllsd_12")
			})
		}
		fadeoutMove() {
			this.state = 2, cc.tween(this, !0).delay(.5).call(this.dead.bind(this)).start()
		}
		dead() {
			this.state = 4, this.view && this.view.removeFromParent()
		}
	}
	class ButterflyMaker extends MsgHandler {
		constructor(t, e, a) {
			super(), this.destroyed = !1, this.isDone = !1, this.isStart = !1, this.commonEvent = !1, this.butterflyRoot = t, this.camera = e, this.mobang = a, this.count = mgrOutside.curLingGanDb.butterflyCount, this.deltaTime = mgrOutside.curLingGanDb.butterflyDeltaTime, this.lifeTime = mgrOutside.curLingGanDb.butterflyLifeTime, this.leftMakeTime = 0, this.butterflys = [], this.effects = [], this.initCurve(t), this.registerListeners({
				CLICK_BUTTERFLY: this.onMsgClickButterfly.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.destroyed = !0, this.stopProcMsg(), cc.clearTween(this.mobang.transform), cc.clearTween(this);
			for (var t = 0; t < this.effects.length; t++) {
				var e = this.effects[t];
				e.isLoaded && cc.clearTween(e.resNode.transform), _G.poolManager.put(e)
			}
			this.effects.length = 0;
			for (t = 0; t < this.butterflys.length; t++) this.butterflys[t].dispose();
			this.butterflys = null
		}
		start() {
			this.isStart = !0
		}
		update(t) {
			if (this.isStart) {
				this.tryMake(t);
				for (var e = !0, a = this.butterflys.length - 1; a >= 0; a--) {
					var i = this.butterflys[a];
					i.update(t), i.isDead || (e = !1)
				}
				this.count <= 0 && e && (this.isDone = !0)
			}
		}
		onTouchDown() {
			for (var t = this.butterflys.length - 1; t >= 0; t--) this.butterflys[t].tryCol(this.camera) && (console.log("--------- ok"), this.commonEvent || (this.commonEvent = !0, GameStatistics.statisCommonEvent(3052)))
		}
		initCurve(t) {
			this.curves = [];
			for (let n = 0; n < t.numChildren; n++) {
				var e = [],
					a = t.getChildAt(n);
				if (~a.name.indexOf("curve")) {
					var i = a.numChildren;
					for (let t = 0; t < i; t++) e.push(a.getChildAt(t).transform);
					var s = new Curve(e);
					this.curves.push(s)
				}
			}
		}
		tryMake(t) {
			if (this.leftMakeTime -= t, this.leftMakeTime <= 0 && (this.leftMakeTime = this.deltaTime * Mathf.random(8, 12) / 10, this.count > 0)) {
				this.count--;
				let t = new Butterfly(this.curves[Mathf.random(this.curves.length) - 1], this.lifeTime);
				t.setParent(this.butterflyRoot), t.bLingGan = 0 == this.count, this.butterflys.push(t)
			}
		}
		onMsgClickButterfly(t) {
			this.mobang.playAnim("mozhang_anim-mz_atk0" + Mathf.random(2), 0, !1), this.mobang.playAnim("mozhang_anim-mz_atk0" + Mathf.random(2), 0, !1), cc.tween(this).delay(.45).call(() => {
				let e = _G.poolManager.get(Particle, "110");
				e.setParent(this.butterflyRoot);
				let a = UiHelper.findChild(this.mobang.node, "effect"),
					i = a.transform.position.clone();
				e.setPosition(i);
				let s = _G.poolManager.get(Particle, "111");
				s.setParent(a), s.play(), e.isLoaded ? (this.effects.push(e), e.play(null, .4, .5), cc.tween(e.resNode.transform, !0).to(.3, {}, {
					easing: cc.Ease.sineOut,
					onUpdate: function(e, a) {
						Laya.Vector3.lerp(i, t.position, a, Mathf.TEMP_VEC3), e.position = Mathf.TEMP_VEC3
					}
				}).call(() => {
					let a = _G.poolManager.get(Particle, "109");
					a.setParent(this.butterflyRoot), a.setWorldPosition(t.position), a.setScale(1, 1, 1), a.play(null, 1, 1);
					let i = this.effects.indexOf(e);
					~i && (e.stopAndPutback(), this.effects.splice(i, 1))
				}).delay(.3).call(function() {
					t.bLingGan && mgrAlert.openPanelLoading(UI_NAME.PanelLingGan)
				}).start()) : _G.poolManager.put(e)
			}).delay(.55).call(() => {
				this.mobang.playAnim("mozhang_anim-mz_idle")
			}).start()
		}
	}
	ButterflyMaker.MAP_WIDTH = 400;
	class LaJiMaker {
		constructor(t, e) {
			this.destroyed = !1, this.commonEvent = !1, this.bClicked = !1, this.root = new Laya.Sprite, this.avatar = t, this.followTransform = t.baseBody.findChild("Guadian_handr").transform, this.camera = e, t.on("Exit", this, this.onAnimExit);
			let a = this.root.addChild(new Laya.Sprite);
			this.animPlayer = new AnimatorFixedPlayer;
			let i = LaJiMaker.WIDTH / 4;
			this.laJiTongs = [], this.laJiTongViews = [];
			for (var s = 0; s < 4; s++) {
				var n = _G.poolManager.get(Spine, s < 2 ? db.SPINE_DB_ID.lajitong1 : db.SPINE_DB_ID.lajitong2);
				n.setParent(a), n.setPosition(2 * i, -12), n.setScale(s < 2 ? 1 : -1, 1), n.play("idle_0" + (s + 1)), n.setAlpha(0), n.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), this.laJiTongViews.push(n);
				var o = a.addChild(new Laya.Sprite);
				o.size(i, 250), o.pos(s * i, -250, !0), o.on(Laya.Event.CLICK, this, this.onClickTong, [o, n, s]), this.laJiTongs.push(o)
			}
			this.laJiTongViews[3].setBottom(), this.lajiRoot = this.root.addChild(new Laya.Sprite), this.root.addChild(new Laya.Sprite).loadImage("res/ui/pnl_outside/laji_front.png").pos(0, -267), this.leftTime = mgrOutside.curLajiLevelDb.eachTime, this.allLaJi = mgrOutside.createLaJi(), this.state = 1;
			let r = this.root.addChild(new Laya.Sprite),
				l = [mgrI18n.getText("laJiMaker.1"), mgrI18n.getText("laJiMaker.2"), mgrI18n.getText("laJiMaker.3"), mgrI18n.getText("laJiMaker.4")];
			for (s = 0; s < 4; s++) {
				let t = r.addChild(new Laya.Label);
				t.anchorX = .5, t.fontSize = 13, t.color = "#ffffff", t.text = l[s], t.pos((s + .5) * i, -110)
			}
		}
		dispose() {
			this.destroyed = !0, this.followTransform = null, this.avatar.offAllCaller(this), this.avatar = null, this.camera = null, this.animPlayer.dispose(), this.animPlayer = null, Laya.timer.clearAll(this);
			for (let t = 0; t < this.laJiTongViews.length; t++) _G.poolManager.put(this.laJiTongViews[t]);
			this.laJiTongViews = null, this.root.destroy(), this.root = null
		}
		updateTime(t) {
			return this.leftTime > 0 && (0 == this.state && (this.leftTime -= t), this.leftTime <= 0 && (this.leftTime = 0, this.onClickTong(null, null, -1))), this.leftTime
		}
		create(t) {
			if (!this.curLaJi) {
				if (0 == this.allLaJi.length) return this.avatar.playAnimation(MODEL_ANIM.LAJI_WANCHENG), void _G.sendMsg("LAJI_OVER", t);
				this.avatar.playAnimation(MODEL_ANIM.LAJI_IDLE, !0);
				let e = this.allLaJi.pop(),
					a = db.get_laji_db(e);
				this.curLaJiDb = a;
				let i = this.lajiRoot.addChild(new Laya.Sprite).loadImage(a.icon).scale(0, 0, !0).pivot(60, 60);
				if (i.alpha = 0, this.curLaJi = i, cc.tween(i).to(.3, {
						alpha: 1,
						scaleX: .65,
						scaleY: .65
					}, cc.OPTION.BACK_OUT).start(), this.leftTime = mgrOutside.curLajiLevelDb.eachTime, Laya.timer.frameLoop(1, this, this.updateLaJiPos, [i]), this.state = 0, _G.isGuiding) {
					this.leftTime = 1e5, mgrGuide.sendMsgKey("LAJI_CREATE");
					let t = this.laJiTongs[this.curLaJiDb.type];
					mgrGuide.registerGuideNode(GUD_REG_NODE.PANELOUT_LAJITONG, t)
				}
			}
		}
		updateLaJiPos(t) {
			if (t.destroyed) return;
			let e = Laya.Point.TEMP;
			UiHelper.worldToScreen(this.camera, this.followTransform.position, e), this.root.globalToLocal(e, !1), t.pos(e.x, e.y - 50)
		}
		onAnimExit(t) {
			switch (t) {
				case MODEL_ANIM.LAJI_CUO:
					this.bClicked ? (this.bClicked = !1, mgrAlert.alertDialog(mgrI18n.getText(this.curLaJiDb.tlite), mgrI18n.getText("laJiMaker.5"), () => {
						this.create(!1)
					})) : this.create(!1)
			}
		}
		onClickTong(t, e, a) {
			let i = this.curLaJi;
			if (i)
				if (this.commonEvent || (this.commonEvent = !0, GameStatistics.statisCommonEvent(3042)), this.state = 1, this.curLaJi = null, this.curLaJiDb.type == a) {
					e.play("open_0" + (a + 1), !1);
					let s = Mathf.random(2);
					this.animPlayer.clear(), this.animPlayer.addModelAnim(this.avatar.baseBody, "ljxyx-laji_diu0" + s), this.animPlayer.addModelAnim(this.avatar.baseFace, "face_ljxyx-face_laji_diu0" + s), this.animPlayer.addTimeCallback(15 / 39, () => {
						this.playLajiFly(i, t, e, s, a)
					}), this.animPlayer.once(Laya.Event.COMPLETE, this, this.onPlayAnimFinish), this.animPlayer.play()
				} else cc.tween(i).to(.2, cc.PROP.ALPHA0).start(), this.avatar.playAnimation(MODEL_ANIM.LAJI_CUO), this.bClicked = -1 != a
		}
		playLajiFly(t, e, a, i, s) {
			Laya.timer.clearAll(this);
			let n = e.x + 73.5,
				o = e.y + 70;
			if (2 == i) var r = cc.tween(t).parallel(cc.tween().to(.2, cc.PROP.SCALE1_2).delay(.5).to(.2, {
				scaleX: .5,
				scaleY: .5
			}), cc.tween().then(cc.jumpTo(1, n, o, 300, 1)));
			else {
				let e = s < 2 ? t.x + 300 : t.x - 300,
					a = t.y - 150,
					i = [t.x, t.y, e, a, n, o];
				r = cc.tween(t).parallel(cc.tween().to(.2, cc.PROP.SCALE1_2).delay(.5).to(.2, {
					scaleX: .5,
					scaleY: .5
				}), cc.tween().then(cc.bezierTo(1, i, 10)))
			}
			r.call(() => {
				a.play("close_0" + (s + 1), !1), mgrOutside.addLajiScore(this.curLaJiDb);
				let e = new Laya.Point;
				UiHelper.getSelfGlobalPos(t, e), _G.sendMsg("COLLECT_LAJI", e), this.create(!0)
			}).delay(.5).call(() => {
				t.destroy()
			}).start()
		}
		onPlayAnimFinish() {
			this.animPlayer.clear()
		}
	}
	LaJiMaker.WIDTH = 588;
	class PanelOutside extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelOutside.json", this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_otherDialog: "Laya.Image",
				cc_otherText: "Laya.Label",
				cc_buttonMyDialog: "UIButton",
				cc_clickArrow: "Laya.Sprite",
				cc_myText: "Laya.Label",
				cc_spriteCountdown: "Laya.Sprite",
				cc_timeCountdown: "Laya.Label",
				cc_topNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_buttonFree: "UIButton",
				cc_bottomLeftNode: "Laya.Sprite",
				cc_buttonStartLingGan: "UIButton",
				cc_spriteStartLingGan: "Laya.Sprite",
				cc_lingGanLeftTime: "Laya.Label",
				cc_bottomRightNode: "Laya.Sprite",
				cc_buttonStartLaJi: "UIButton",
				cc_spriteStartLaJi: "Laya.Sprite",
				cc_lajiLeftTime: "Laya.Label",
				cc_bottomNode: "Laya.Sprite",
				cc_buttonColorEggMianJu: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_enter_play", ""), this._dialogIdx = 0
		}
		addPreloadRes(t) {
			t.addModel("res/unity/Conventional/map_02.ls"), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.ZHUAN_SHEN).path)
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonFree.node, "pnl_main_13.png"), mgrI18n.trySetI18nImage(this.spriteStartLingGan, "pnl_play_06.png"), mgrI18n.trySetI18nImage(this.spriteStartLaJi, "pnl_play_05.png"), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_PLAY), this.currencyBar = new CurrencyBar, this.currencyBar.setParent(this.topNode), this.room = new RoomOutside, this.room.load(this.onSceneLoaded.bind(this)), this.otherDialog.visible = !1, this.buttonMyDialog.node.visible = !1, this.buttonMyDialog.transition = UIButton.TRANSITION_NONE, this.scoreBar = new ScoreBar, this.scoreBar.setParent(this.topLeftNode), this.scoreBar.x = -100, this.scoreBar.hide(), this.bottomLeftNode.x = -200, this.bottomRightNode.x = 200, this.buttonClose.node.x = -120, this.buttonFree.node.x = -120, this.buttonColorEggMianJu.node.visible = !1, this.onMsgCopChange(), this.playButtons = new PlayBottomNode({
				onOpenCallback: this.close.bind(this),
				curIndex: 2
			}), this.playButtons.setParent(this.bottomNode), this.initTouch(), this.switchToOutside(), this.registerMsg({
				CLICK_BUTTERFLY: this.onMsgClickButterfly.bind(this),
				ADD_SCORE: this.onMsgAddScore.bind(this),
				COLLECT_LAJI: this.onMsgCollectLaJi.bind(this),
				LAJI_OVER: this.onMsgLaJiOver.bind(this),
				SHOW_YINDAO_EFFECT: this.onMsgShowYinDao.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this)
			}), this.startProcMsg(), this.addEffect("192").play()
		}
		dispose() {
			this.stopProcMsg(), this.clearButterfly(), this.playButtons && this.playButtons.dispose(), this.avatar && this.avatar.destroy(), this.room && this.room.dispose(), this.scoreBar && (this.scoreBar.dispose(), this.scoreBar = null), this.currencyBar && this.currencyBar.dispose(), this.instOrBanner.dispose(), mgrSdk.resetRecordState(), super.dispose()
		}
		clearButterfly() {
			this.butterflyMaker && (this.butterflyMaker.dispose(), this.butterflyMaker = null), this.moFaBang && (_G.poolManager.put(this.moFaBang), this.moFaBang = null), this.moFaBang2 && (_G.poolManager.put(this.moFaBang2), this.moFaBang2 = null)
		}
		clearLajiMaker() {
			this.laJiMaker && (this.laJiMaker.dispose(), this.laJiMaker = null)
		}
		update() {
			let t = Timer.deltaTime;
			if (this.isFocus && (this.butterflyMaker && this.butterflyMaker.update(t), this.laJiMaker)) {
				let e = this.laJiMaker.updateTime(t);
				_G.isGuiding || e > 100 ? this.timeCountdown.text = "" : this.timeCountdown.text = `${Math.ceil(e)}`
			}
			let e = mgrOutside.leftLingGanTime;
			this.lingGanLeftTime.text = e > 0 ? Tools.formatTime(e) : "";
			let a = mgrOutside.leftLaJiTime;
			this.lajiLeftTime.text = a > 0 ? Tools.formatTime(a) : ""
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgClickButterfly(t) {
			this.scheduleOnce(.75, () => {
				if (!t.destroyed) {
					let e = new Laya.Point;
					UiHelper.worldToScreen(this.room.camera, t.position, e), this.scoreBar.setValue(mgrOutside.lingGanScore, 0, e)
				}
			})
		}
		onMsgAddScore(t) {
			this.scoreBar.setValue(mgrOutside.lingGanScore, 0, t), this.scheduleOnce(2, this.onLingGanFinish)
		}
		onMsgCollectLaJi(t) {
			this.scoreBar.setValue(mgrOutside.lajiScore, 0, t)
		}
		onMsgLaJiOver(t) {
			this.onLaJiFinish(t)
		}
		onMsgShowYinDao() {
			let t = this.addEffect("149");
			t.followTarget(this.buttonStartLaJi.node, this.cameraEffect), t.play(), (t = this.addEffect("149")).followTarget(this.buttonStartLingGan.node, this.cameraEffect), t.play()
		}
		onMsgAdvShowSuc(t) {
			if ("one_click_interact" == t.advName) {
				let e, a = t.params.gameName;
				a == mgrI18n.getText("panelOutside.4") ? (GameStatistics.statisCommonEvent(2214), e = mgrOutside.finishLingGan(!0)) : a == mgrI18n.getText("panelOutside.5") && (GameStatistics.statisCommonEvent(2215), e = mgrOutside.finishLaJi(!0)), mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
					score: 100,
					items: e
				})
			}
		}
		onMsgCopChange() {}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToMain(), this.avatar = new RoleAvatar, this.room.root.addChild(this.avatar), this.avatar.playIdle(), this.avatar.on("Exit", this, t => {
				this.destroyed || t == MODEL_ANIM.MAIN_IDLE && this.avatar.playHuDie()
			})
		}
		initTouch() {
			this.resNode.on(Laya.Event.CLICK, this, t => {
				t.stopPropagation(), this.butterflyMaker && this.butterflyMaker.onTouchDown()
			})
		}
		clearEffect() {
			this.removeEffect("149"), this.removeEffect("149")
		}
		switchToOutside() {
			this.scoreBar.moveOut(), this.playButtons.fadeIn(), UiHelper.playMoveIn(this.bottomLeftNode), UiHelper.playMoveIn(this.bottomRightNode), UiHelper.playMoveIn(this.buttonClose.node), UiHelper.playMoveIn(this.buttonFree.node, 41), this.timeCountdown.visible = !1, this.spriteCountdown.visible = !1, this.avatar && this.avatar.playIdle(), this.clearEffect()
		}
		switchToLingGan() {
			this.scoreBar.moveIn(), this.scoreBar.setValue(0), this.playButtons.fadeOut(), UiHelper.playMoveOut(this.bottomLeftNode, -200), cc.tween(this.bottomRightNode).to(.3, {
				x: 200
			}, cc.OPTION.SINE_OUT).call(this.showDialog.bind(this)).start(), UiHelper.playMoveOut(this.buttonClose.node, -120), UiHelper.playMoveOut(this.buttonFree.node, -120), this._dialogIdx = 0, this.clearEffect()
		}
		switchToLaJi() {
			this.scoreBar.moveIn(), this.scoreBar.setValue(0), this.playButtons.fadeOut(), UiHelper.playMoveOut(this.buttonClose.node, -120), UiHelper.playMoveOut(this.buttonFree.node, -120), cc.tween(this.bottomLeftNode).to(.3, {
				x: -200
			}, cc.OPTION.SINE_OUT).start(), cc.tween(this.bottomRightNode).to(.3, {
				x: 200
			}, cc.OPTION.SINE_OUT).call(this.startLaJi.bind(this)).start(), this.timeCountdown.text = "", this.timeCountdown.font = GConfig.bmf_laji, this.timeCountdown.visible = !0, this.spriteCountdown.visible = !0, this.avatar.playAnimation(MODEL_ANIM.LAJI_IDLE, !0), this.room.moveToLaji()
		}
		showDialog() {
			this._dialogIdx % 2 == 0 ? (this.otherDialog.scale(0, 0, !0).visible = !0, this.otherDialog.alpha = 0, cc.tween(this.otherDialog, !0).to(.5, cc.PROP.SCALE_ALPHA1, cc.OPTION.BACK_OUT).start(), this.buttonMyDialog.interactable = !1, cc.tween(this.buttonMyDialog.node, !0).to(.3, {
				alpha: 0
			}).start(), this.otherText.changeText(""), this.showDialog.bind(this), Timer.callLater(.5, () => {
				this.showDialog()
			})) : (this.buttonMyDialog.interactable = !0, this.buttonMyDialog.node.scale(0, 0, !0).visible = !0, this.buttonMyDialog.node.alpha = 0, cc.tween(this.buttonMyDialog.node, !0).to(.5, cc.PROP.SCALE_ALPHA1, cc.OPTION.BACK_OUT).start(), cc.tween(this.otherDialog, !0).to(.3, {
				alpha: 0
			}).start(), this.myText.changeText(""), Timer.callLater(.5, () => {
				mgrGuide.registerGuideNode(GUD_REG_NODE.PANELOUT_DIALOG, this.buttonMyDialog.node, !0)
			})), this._dialogIdx++
		}
		startLingGan() {
			mgrOutside.startLingGan(), cc.tween(this.otherDialog).to(.2, {
				alpha: 0
			}).hide().start(), cc.tween(this.buttonMyDialog.node).to(.2, {
				alpha: 0
			}).hide().start(), this.clearButterfly(), this.moFaBang = _G.poolManager.get(GModel, "mofabang"), this.moFaBang.setParent(this.avatar.baseBody.findChild("Guadian_mofabang")), this.moFaBang.initPaint(), this.moFaBang.setPosition(0, 0, 0), this.moFaBang.setRotation(0, 0, 0);
			let t = _G.poolManager.get(Particle, "112");
			t.setParent(this.room.root), t.play(null, 5, 1), this.moFaBang2 = _G.poolManager.get(GModel, "mofabang_anim");
			let e = this.room.hudieNode.getChildByName("MoFaBang");
			this.moFaBang2.setParent(e), this.moFaBang2.initAnimator(), this.moFaBang2.hide(), this.butterflyMaker = new ButterflyMaker(this.room.hudieNode, this.room.camera, this.moFaBang2);
			let a = this.moFaBang.sharedMaterial;
			this.room.mainToLingGan(this.avatar, a, () => {
				this.avatar.transform.localPositionX = 100, this.avatar.playIdle(), this.room.lingGanToMain(), a.setState(32), this.moFaBang.hide(), this.moFaBang2.show(), this.moFaBang2.playAnim("mozhang_anim-mz_idle"), _G.isGuiding ? mgrGuide.sendMsgKey("START_BUTTERFLY") : this.butterflyMaker.start()
			}), this.room.switchToNight()
		}
		onButterflyFinish() {}
		onLingGanFinish() {
			this.clearButterfly(), this.switchToOutside(), this.room.moveToMain(), this.room.switchToDay(), this.avatar.transform.localPositionX = 0;
			let t = mgrOutside.finishLingGan();
			mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
				score: mgrOutside.lingGanScore,
				items: t
			})
		}
		startLaJi() {
			this.clearLajiMaker(), mgrOutside.startLaJi(), mgrOutside.loadLajiGame(() => {
				this.laJiMaker = new LaJiMaker(this.avatar, this.room.camera), this.bottomNode.parent.addChild(this.laJiMaker.root).pos(-LaJiMaker.WIDTH / 2, 0), this.laJiMaker.create(!1), this.checkColorEggMianJu()
			})
		}
		onLaJiFinish(t) {
			this.scheduleOnce(t ? 3.3 : 0, () => {
				this.buttonColorEggMianJu.node.visible = !1, this.clearLajiMaker(), this.switchToOutside(), this.room.moveToMain();
				let t = mgrOutside.finishLaJi();
				mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
					score: mgrOutside.lajiScore,
					items: t
				})
			})
		}
		static startButteryfly() {
			let t = mgrPanel.findPanel(PanelOutside);
			t && t.butterflyMaker.start()
		}
		checkColorEggMianJu() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.MIAN_JU, EGGS_STEP.SECOND) && (this.buttonColorEggMianJu.node.visible = !0)
		}
		on_click_buttonMyDialog() {
			this._dialogIdx >= 2 ? mgrOutside.loadLingGanRes(this.startLingGan.bind(this)) : this.showDialog()
		}
		on_click_buttonClose() {
			mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_buttonStartLingGan() {
			GameStatistics.statisCommonEvent(3051), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_HUDIE) ? this.switchToLingGan() : mgrOutside.checkLingGanPlayable(() => {
				this.switchToLingGan()
			})
		}
		on_click_buttonStartLaJi() {
			GameStatistics.statisCommonEvent(3041), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_LAJI) ? this.switchToLaJi() : mgrOutside.checkLaJiPlayable(() => {
				this.switchToLaJi()
			})
		}
		on_click_buttonFree() {
			mgrPart.openPanelRoom(ROOM_TYPE.NORMAL, null, this.close.bind(this))
		}
		on_click_buttonColorEggMianJu() {
			this.buttonColorEggMianJu.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggMianJu.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggMianJu.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.mian_ju)
		}
	}
	class PanelMangHeOpen extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelMangHeOpen.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_centerNode: "Laya.Sprite",
				cc_circleNode: "Laya.Sprite",
				cc_topNode: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_buttonOpenBox: "UIButton",
				cc_spriteButtonOpenBoxAdFlag: "Laya.Sprite",
				cc_textButtonOpenBoxText: "Laya.Label",
				cc_buttonAdvThank: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_mohe_open", "banner_mohe_open"), this.points = [], this.localTouchPos = new Laya.Point
		}
		buildUi() {
			if (this.circleNode.visible = !1, this.buttonAdvThank.node.visible = !1, 0 == mgrMangHe.count || mgrGuide.isGuiding) this.buttonOpenBox.node.getChildAt(0).visible = !1, this.buttonOpenBox.node.getChildAt(1).x = 70;
			else if (mgrAdv.statisVideoShow("open_manghe"), 0 != db.cop.b_adv_delay) {
				this.buttonClose.node.visible = !1;
				let t = db.cop.adv_thank_delay_time || .1;
				cc.tween(this.buttonAdvThank.node).delay(t).show().start()
			}
			UiHelper.playScaleOnce(this.buttonOpenBox.node, .5), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), Mathf.randomEnable(db.cop.ad_flag_hide_ratios[2] || 0) || 0 == mgrMangHe.count || mgrGuide.isGuiding ? (this.spriteButtonOpenBoxAdFlag.visible = !1, this.textButtonOpenBoxText.x -= 12) : this.spriteButtonOpenBoxAdFlag.visible = !0
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.effectOpen && (_G.poolManager.put(this.effectOpen), this.effectOpen = null), this.effectFaZhen && (_G.poolManager.put(this.effectFaZhen), this.effectFaZhen = null), this.clearMangHe(), super.dispose(), _G.sendMsg("OPEN_MANG_HE_FINISH")
		}
		onDialogOpenAnim(t) {
			let e = this.context.camera;
			this.createScene3DBack(1, e.fieldOfView), this.camera.transform.position = e.transform.position, this.camera.transform.rotation = e.transform.rotation, this.mangHe = _G.poolManager.get(GModel, db.MODEL_DB_ID.manghe), this.mangHe.setParent(this.scene3DBack), this.mangHe.setWorldPosition(this.context.from), this.mask.alpha = 0, cc.tween(this.mask).to(.3, cc.PROP.ALPHA1).start();
			let a = this.context.to,
				i = new Laya.Vector3,
				s = {
					x: this.mangHe.transform.position.x,
					y: this.mangHe.transform.position.y,
					pos: (t, e) => {
						i.x = t, i.y = e, this.mangHe.transform.position = i
					}
				};
			cc.tween(this.mangHe.node.transform).delay(.1).call(() => {
				cc.tween(s).then(cc.jumpTo(.5, a.x, a.y, -.1, 1)).start()
			}).to(.5, cc.PROP.EMPTY, {
				onUpdate: (t, e) => {
					i.z = Mathf.lerp(.1, a.z, e), this.mangHe.transform.localRotationEulerX = Mathf.lerp(0, 15, e)
				}
			}).call(() => {
				this.effectFaZhen = _G.poolManager.get(Particle, "133"), this.effectFaZhen.setParent(this.scene3DBack), this.effectFaZhen.setWorldPosition(a.x, a.y - .02, a.z - .07), this.effectFaZhen.setRotation(10, 0, 0), this.effectFaZhen.play(), t && t()
			}).start()
		}
		regGuide() {
			mgrGuide.dispatchGuide(GUD_EVENT.ENTER_MANGHE_OPEN) && mgrGuide.registerGuideNode(GUD_REG_NODE.PANELMANGHE_BUTTONOPEN, this.buttonOpenBox.node)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			"open_manghe" == t.advName && this.startAnim()
		}
		startAnim() {
			this.buttonOpenBox.interactable = !1, this.buttonClose.interactable = !1, this.buttonAdvThank.node.visible = !1, cc.tween(this.buttonOpenBox.node).to(.1, cc.PROP.ALPHA0).start(), this.showFaZhen()
		}
		showFaZhen() {
			this.circleNode.visible = !0, UiHelper.playStampEffect(this.circleNode), Timer.callLater(.4, () => {
				cc.tween(this.circleNode).by(15, {
					rotation: 360
				}).repeatForever().start(), this.createPoint(), mgrGuide.sendMsgKey("SHOW_FAZHEN")
			}, this)
		}
		clearMangHe() {
			this.mangHe && (this.mangHe.setScale(1, 1, 1), this.mangHe.setRotation(0, 0, 0), _G.poolManager.put(this.mangHe), this.mangHe = null)
		}
		createPoint() {
			this.buttonClose.interactable = !0, UiHelper.registerTouchEvent(this.resNode, this.onTouchStart.bind(this), this.onTouchMove.bind(this), this.onTouchEnd.bind(this));
			let t = [],
				e = Math.PI / 3;
			for (let a = 0; a < 6; a++) t.push([120 * Math.cos(e * a) | 0, 120 * Math.sin(e * a) | 0]);
			for (let e = 0; e < t.length; e++) {
				let a = t[e];
				this.centerNode.addChild(new Laya.Sprite).loadImage("res/ui/pnl_manghe/point.png").pivot(30, 30).size(60, 60).pos(a[0], a[1]), this.points.push({
					x: a[0],
					y: a[1],
					connect: 0
				})
			}
		}
		onTouchStart() {
			0 != this.points.length && this.checkFirst()
		}
		onTouchMove() {
			this.checkPoint()
		}
		onTouchEnd() {
			this.curLine && (this.curLine.destroy(), this.curLine = null, this.curCol.connect--, this.curCol = null);
			let t = 0;
			for (let e = 0; e < this.points.length; e++) t += this.points[e].connect;
			t >= 2 && this.onLineSuc()
		}
		checkFirst() {
			let t = this.testPoint();
			t && t.connect < 2 && (this.createLine(t.x, t.y), t.connect++, this.curCol = t)
		}
		checkPoint() {
			if (this.curLine) {
				let t = this.testPoint();
				if (t)
					if (t.connect > 1 || t == this.curCol) this.lineTo(this.localTouchPos);
					else {
						this.lineTo(t), this.createLine(t.x, t.y), t.connect += 2, this.curCol = t;
						let e = this.centerNode.localToGlobal(new Laya.Point(t.x, t.y), !1);
						mgrAlert.playParticleEffect("132", e, 1, .5), mgrSound.playSound("yllsd_02"), mgrGuide.sendMsgKey("LINE_SUC")
					}
				else this.lineTo(this.localTouchPos)
			} else this.checkFirst()
		}
		lineTo(t) {
			let e = Mathf.distance(this.curLine, t) + 20;
			this.curLine.height = e, Vec2.TEMP.setValue(t.x - this.curLine.x, t.y - this.curLine.y);
			var a = GameUtility.convertDir2Rot(Vec2.TEMP);
			this.curLine.rotation = a
		}
		createLine(t, e) {
			this.curLine = this.centerNode.addChild(new Laya.Image("res/ui/pnl_manghe/line.png")), this.curLine.sizeGrid = "18,0,18,0", this.curLine.pivot(15, 15), this.curLine.pos(t, e, !0), this.curLine.height = 0, this.lineTo(this.localTouchPos), GameStatistics.statisCommonEventOnce(3074)
		}
		testPoint() {
			let t = this.localTouchPos;
			t.setTo(Laya.stage.mouseX, Laya.stage.mouseY), this.centerNode.globalToLocal(t, !1);
			for (var e = 0; e < this.points.length; e++) {
				if (Mathf.distance(t, this.points[e]) <= 30) return this.points[e]
			}
			return null
		}
		onLineSuc() {
			UiHelper.unregisterTouchEvent(this.resNode), cc.tween(this.centerNode).to(.3, {
				scaleX: 2,
				scaleY: 2,
				alpha: 0
			}).start(), this.openBox(), this.buttonClose.interactable = !1
		}
		openBox() {
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.mangHe, MODEL_ANIM.MH_OPEN), t.on(Laya.Event.COMPLETE, this, this.alertItem), t.play();
			let e = this.mangHe.findChild("itemNode");
			this.effectOpen = _G.poolManager.get(Particle, "134"), this.effectOpen.setParent(this.scene3DBack), this.effectOpen.setWorldPosition(e.transform.position), this.effectOpen.play(), BaseFacade.mGoal.commit(ACTION_ID.OPEN_BOX)
		}
		alertItem() {
			let t = this.mangHe.findChild("itemNode");
			UiHelper.worldToScreen(this.camera, t.transform.position, Laya.Point.TEMP);
			let e = mgrMangHe.getRandomItem();
			UiHelper.playItemJumpFromTo(e.itemId, Laya.Point.TEMP, {
				x: _G.canvasWidth / 2,
				y: _G.canvasHeight / 2 + 100
			}, () => {
				_G.sendMsg("OPEN_MANG_HE_SUC"), mgrAlert.addAndAlert(e, null, null, !0, 0), this.close(!0)
			})
		}
		static getPointPos(t) {
			let e = new Laya.Point,
				a = mgrPanel.findPanel(PanelMangHeOpen);
			return a && (e.setTo(a.points[t].x, a.points[t].y), a.centerNode.localToGlobal(e, !1)), e
		}
		on_click_buttonClose() {
			_G.isGuiding || (_G.sendMsg("MANG_HE_RESET"), this.close())
		}
		on_click_buttonOpenBox() {
			if (mgrMangHe.canGetItem())
				if (mgrMangHe.count > 0) {
					if (mgrAdv.statisVideoClick("open_manghe"), GameStatistics.statisCommonEvent(3081, 1), !mgrAdv.dispatchAdv("open_manghe")) return
				} else this.startAnim(), _G.isGuiding || GameStatistics.statisCommonEvent(3081, 0);
			else mgrAlert.alertDialog(mgrI18n.getText("panelMangHe.3"))
		}
		on_click_buttonAdvThank() {
			1 == db.cop.b_adv_thank_prompt ? 1 == db.cop.b_adv_thank_prompt_tag ? mgrAlert.alertAdvDialog({
				desc: mgrI18n.getText("panelMangHeOpen.1"),
				confirm: () => {
					this.on_click_buttonOpenBox(), this.buttonAdvThank.node.visible = !1, this.buttonClose.node.visible = !0
				},
				confirmText: mgrI18n.getText("panelMangHeOpen.2"),
				cancel: () => {
					this.on_click_buttonClose()
				}
			}) : mgrAlert.alertDialog({
				desc: mgrI18n.getText("panelMangHeOpen.1"),
				confirm: () => {
					this.on_click_buttonOpenBox(), this.buttonAdvThank.node.visible = !1, this.buttonClose.node.visible = !0
				},
				confirmText: mgrI18n.getText("panelMangHeOpen.2"),
				close: () => {
					this.on_click_buttonClose()
				}
			}) : this.on_click_buttonClose()
		}
	}
	class PanelDanceRoleGet extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelDanceRoleGet.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeAll: "Laya.Box",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_spriteRole: "Laya.Sprite",
				cc_roleName: "Laya.Label",
				cc_buttonOk: "UIButton",
				cc_sprite1: "Laya.Sprite",
				cc_buttonCircle: "UIButton",
				cc_buttonBox: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.oldContractIdx = null, this.loadState = 0
		}
		static getResLoader() {
			let t = new ResLoader;
			return t.add(db.get_animation_db(MODEL_ANIM.SHENTI_COME).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_COME).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHENTI_IDLE).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_IDLE).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_COME).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_IDLE).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_come).resPath, RES_TYPE.PREFAB3D), t.add(db.get_model_db(db.MODEL_DB_ID.come).resPath, RES_TYPE.PREFAB3D), t.add(db.get_model_db(db.MODEL_DB_ID.wawahe).resPath, RES_TYPE.PREFAB3D), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME01).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME02).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME03).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME01).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME02).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME03).path, RES_TYPE.ANIMATIONCLIP), mgrGame.contractIndex != DANCE_UNLOCK_CONTRACT_IDX && (t.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_jiechu).resPath, RES_TYPE.PREFAB3D), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHENTI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_JIECHU).path, RES_TYPE.ANIMATIONCLIP)), t.add("res/ui/PanelDanceRoleGet.json", RES_TYPE.PREFAB2D), t
		}
		static openPanel(t) {
			let e = this.getResLoader();
			mgrAlert.openWait(e, () => {
				mgrPanel.openPanelWithSingleton(UI_NAME.PanelDanceRoleGet, {}, t)
			})
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.sprite1, "pnl_dance_contract_01.png"), this.buttonCircle.node.visible = !1, this.buttonBox.node.visible = !1, mgrGame.contractUnlock(DANCE_UNLOCK_CONTRACT_IDX), this.oldContractIdx = mgrGame.contractIndex, mgrGame.contractIndex != DANCE_UNLOCK_CONTRACT_IDX && (this.oldParts = Tools.deepCopy(mgrPart.partsWear));
			let t = new Laya.Sprite,
				e = new Laya.Point;
			UiHelper.local2local(this.spriteMaskBg, this.spriteRole, e), t.graphics.drawImage(this.spriteMaskBg.texture, e.x, e.y), this.spriteRole.mask = t, GameStatistics.statisCommonEvent(2545)
		}
		dispose() {
			this.clearWawahe(), this.clearOld(), super.dispose()
		}
		clearWawahe() {
			this.wawahe && (this.wawahe.dispose(), this.wawahe = null)
		}
		clearOld() {
			this.oldAvatar && (this.oldAvatar.destroy(), this.oldAvatar = null), this.oldShexiangji && (this.oldShexiangji.dispose(), this.oldShexiangji = null), this.oldWawahe && (this.oldWawahe.dispose(), this.oldWawahe = null), this.oldGemstone && (_G.poolManager.put(this.oldGemstone), this.oldGemstone = null), this.oldRoom && (this.oldRoom.dispose(), this.oldRoom = null)
		}
		startLoad() {
			_G.sendMsg("DANCE_ROLE_START_ANIM");
			let t = new ResLoader;
			mgrPart.addPartResList(mgrPart.partsWear, t, !0), t.setLoadingCallback(this.onButtonAnimFinish.bind(this));
			let e = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			if (t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D), null != this.oldContractIdx && mgrGame.contractIndex != this.oldContractIdx) {
				let e = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
				t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D)
			}
			t.loadAll()
		}
		onButtonAnimFinish() {
			this.loadState++, 1 == this.loadState && (cc.tween(this.mask).to(.1, cc.PROP.ALPHA0).hide().start(), this.nodeAll.visible = !1, this.buttonClose.node.visible = !1, this.oldContractIdx == mgrGame.contractIndex ? (this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))) : (this.oldRoom = new RoomBath, this.oldRoom.load(this.onOldSceneLoaded.bind(this))))
		}
		onOldSceneLoaded() {
			this.addChild(this.oldRoom.scene), this.resNode.setChildIndex(this.oldRoom.scene, 0), this.oldRoom.changeToMain(), this.oldRoom.skybox.active = !0, this.oldRoom.camera.active = !1, this.oldRoom.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.oldRoom.mapNode.transform, "localScale", 3, 3, 3), this.oldAvatar = new RoleAvatar(this.oldParts), this.oldRoom.root.addChild(this.oldAvatar), this.oldWawahe = new GModel(db.MODEL_DB_ID.wawahe), this.oldWawahe.create(), this.oldWawahe.initAnimator(), this.oldWawahe.setParent(this.oldRoom.root), this.oldWawahe.hide(), this.oldShexiangji = new GModel(db.MODEL_DB_ID.shexiangji_jiechu), this.oldShexiangji.create(), this.oldShexiangji.setParent(this.oldRoom.root), this.oldShexiangji.callIfLoaded(() => {
				let t = this.oldShexiangji.findChild("camera");
				t.nearPlane = .01, t.fieldOfView = 60;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular
			});
			let t = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
			this.oldGemstone = _G.poolManager.get(GModel, t), this.oldGemstone.initAnimator(), this.oldGemstone.getAnimator().cullingMode = Laya.Animator.CULLINGMODE_ALWAYSANIMATE, this.oldGemstone.setParent(this.oldRoom.root);
			let e = new AnimatorFixedPlayer;
			e.addModelAnim(this.oldWawahe, MODEL_ANIM.WAWAHE_JIECHU), e.addModelAnim(this.oldShexiangji, MODEL_ANIM.SHEXIANGJI_JIECHU), e.addModelAnim(this.oldAvatar.baseBody, MODEL_ANIM.SHENTI_JIECHU), e.addModelAnim(this.oldAvatar.baseFace, MODEL_ANIM.FACE_JIECHU), e.addTimeCallback(110 / 30 / e.duration, () => {
				this.oldWawahe.show()
			}), e.addTimeCallback(.78, () => {
				this.onSwitchComplete(() => {
					this.clearOld(), e.dispose()
				})
			}), e.addTimeCallback(1, () => {}), e.play();
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.oldGemstone, MODEL_ANIM.GEMSTONE_JIECHU), a.addTimeCallback(80 / 30 / a.duration, () => {
				this.oldGemstone.hide()
			}), a.play()
		}
		onSwitchComplete(t) {
			UiHelper.playBlackFlash(1, () => {
				t(), this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))
			})
		}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToMain(), this.room.skybox.active = !0, this.room.camera.active = !1, this.room.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 3, 3, 3), this.wawahe = new GModel(db.MODEL_DB_ID.wawahe), this.wawahe.create(), this.wawahe.initAnimator(), this.wawahe.setParent(this.room.root), this.shexiangji = new GModel(db.MODEL_DB_ID.shexiangji_come), this.shexiangji.create(), this.shexiangji.setParent(this.room.root), this.shexiangji.callIfLoaded(() => {
				let t = this.shexiangji.findChild("camera");
				t.nearPlane = .01;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular, this.shexiangji_effect = this.shexiangji.findChild("e_wawahe_come"), this.shexiangji_effect && (this.shexiangji_effect.active = !1)
			});
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME01), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME01), t.addTimeCallback(1, () => {
				let t = new AnimatorFixedPlayer;
				t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME02), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME02), t.addTimeCallback(1, () => {
					this.buttonBox.node.visible = !0, mgrGuide.dispatchGuide(GUD_EVENT.START_CONTRACT), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX, this.buttonBox.node)
				}), t.play()
			}), t.play()
		}
		playRoleAnim() {
			this.avatar = new RoleAvatar, this.room.root.addChild(this.avatar);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.avatar.baseBody, MODEL_ANIM.SHENTI_COME), t.addModelAnim(this.avatar.baseFace, MODEL_ANIM.FACE_COME), t.addTimeCallback(1, this.onRoleAnimFinish.bind(this)), t.play()
		}
		playGemstone() {
			let t = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			this.gemstone = _G.poolManager.get(GModel, t), this.gemstone.initAnimator(), this.gemstone.setParent(this.room.root), this.gemstone.setPosition(0, .05, 0), this.gemstone.playAnims(0, [MODEL_ANIM.GEMSTONE_COME, MODEL_ANIM.GEMSTONE_ZHANSHI], !0), this.gemstone.initPaint(), this.gemstone.callIfLoaded(() => {
				let t = this.gemstone.getChildAt(0);
				cc.tween(this).to(1.3, cc.PROP.EMPTY, {
					onUpdate(e, a) {
						t.transform.scale = t.transform.scale
					}
				}).start()
			})
		}
		onWawaheAnimFinish() {
			this.clearWawahe()
		}
		onRoleAnimFinish() {
			this.avatar.playAnimation(MODEL_ANIM.SHENTI_IDLE), this.buttonCircle.node.visible = !0, mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE, this.buttonCircle.node)
		}
		playGotoRoom() {
			this.shexiangji && (this.shexiangji.findChild("e_wawahe_come").active = !1, _G.isGuiding = !0, mgrPanel.openPanel(UI_NAME.PanelMain, {
				type: ROOM_TYPE.NORMAL,
				parts: null,
				data: {
					room: this.room,
					avatar: this.avatar,
					shexiangji: this.shexiangji,
					gemstone: this.gemstone
				},
				bSwitch: !0
			}, !1, () => {
				this.room.scene.removeSelf(), this.close()
			}))
		}
		on_click_buttonOk() {
			mgrGame.contractIndex == DANCE_UNLOCK_CONTRACT_IDX ? mgrAlert.alertDialog(mgrI18n.getText("panelContract.11"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				GameStatistics.statisCommonEvent(2546, 1), this.startLoad()
			}, () => {}) : mgrAlert.alertDialog(mgrI18n.getText("panelContract.12"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				GameStatistics.statisCommonEvent(2546, 1), mgrGame.contractIndex = DANCE_UNLOCK_CONTRACT_IDX, this.startLoad()
			}, () => {})
		}
		on_click_buttonClose() {
			GameStatistics.statisCommonEvent(2546, 0), this.close()
		}
		on_click_buttonCircle() {
			this.shexiangji ? (this.buttonCircle.interactable = !1, cc.tween(this.buttonCircle.node, !0).to(.2, cc.PROP.ALPHA0).call(this.playGotoRoom.bind(this)).start()) : console.log("没有摄像机")
		}
		on_click_buttonBox() {
			this.buttonBox.node.visible = !1, this.shexiangji_effect && (this.shexiangji_effect.active = !0);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME03), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME03), t.addTimeCallback(3 / t.duration, this.playGemstone.bind(this)), t.addTimeCallback(1, this.onWawaheAnimFinish.bind(this)), t.play(), this.playRoleAnim()
		}
	}
	const LINE_WIDTH = 10;
	class PanelDanceDraw extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelDanceDraw.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_nodeNpc: "Laya.Box",
				cc_nodeNpcSpine: "Laya.Box",
				cc_nodeNpcTalkBubble: "Laya.Box",
				cc_nodeEffectDrawNodeRoot: "Laya.Box",
				cc_nodeResultPanel: "Laya.Box",
				cc_nodeLayoutRoleName: "Laya.Box",
				cc_labelRoleNameCankao: "Laya.Label",
				cc_spriteDanceAnimIconBg: "Laya.Sprite",
				cc_spriteDanceAnimIcon: "Laya.Sprite",
				cc_nodeLayoutDanceAnimName: "Laya.Box",
				cc_labelDanceAnimNameCankao: "Laya.Label",
				cc_buttonDance: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_labelDebugInput: "Laya.TextInput",
				cc_buttonDebugDance: "UIButton",
				cc_nodeDrawPanel: "Laya.Box",
				cc_buttonColor0: "UIButton",
				cc_buttonColor1: "UIButton",
				cc_buttonColor2: "UIButton",
				cc_buttonColor3: "UIButton",
				cc_buttonColor4: "UIButton",
				cc_buttonColor5: "UIButton",
				cc_buttonColor6: "UIButton",
				cc_nodeSelected: "Laya.Sprite",
				cc_drawNode: "Laya.Sprite",
				cc_buttonOk: "UIButton",
				cc_nodeRecordVideo: "Laya.Box",
				cc_nodeDrawPanelCenter: "Laya.Box",
				cc_nodeButtonsInteraction: "Laya.Box",
				cc_buttonInteraction1: "UIButton",
				cc_buttonInteraction2: "UIButton",
				cc_buttonInteraction3: "UIButton"
			}, this.selectedBoxIndexs = [], this.selectedColorIds = [], this.bTouchDown = !1, this.bAdLockedDanceEnabled = !1, this.worldPos = new Laya.Vector3, this.danceFinishTime = 0, this.randomColorIndex = 0, this.instOrBanner = new AdvInstOrBanner("enter_dance_draw", ""), this.p0 = new Laya.Point, this.p1 = new Laya.Point, this.interactionEffect = [], this.nextInteractionTime = 0
		}
		static getDrawPanelCenterPos() {
			let t = new Laya.Point(0, 0),
				e = mgrPanel.findPanel(PanelDanceDraw);
			return e ? e.nodeDrawPanelCenter.localToGlobal(t, !1) : t
		}
		static getButtonOkPos() {
			let t = new Laya.Point(0, 0),
				e = mgrPanel.findPanel(PanelDanceDraw);
			return e ? (t.x = e.buttonOk.node.pivotX, t.y = e.buttonOk.node.pivotY, e.buttonOk.node.localToGlobal(t, !1)) : t
		}
		buildUi() {
			Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.touchDown), Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.touchMove), Laya.stage.on(Laya.Event.MOUSE_UP, this, this.touchUp), Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.touchUp);
			let t = _G.poolManager.get(Spine, db.SPINE_DB_ID.role_yanjue);
			this.spine = t, t.setParent(this.nodeNpcSpine), t.setPosition(-50, 500), t.play("yihuo"), this.soundId = mgrSound.getPlayingMusicSoundId(), this.nodeRecordVideo.visible = !1, this.nodeSelected.visible = !1, this.labelDebugInput.visible = !1, this.buttonDebugDance.node.visible = !1, this.buttonOk.node.visible = !1, this.nodeResultPanel.visible = !1, this.nodeButtonsInteraction.visible = !1, UiHelper.registerTouchEvent(this.drawNode, this.onTouchStart.bind(this), this.onTouchMove.bind(this), null), Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onTouchEnd), Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.onTouchEnd), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELDANCEDRAW_BUTTONOK, this.buttonOk.node);
			let e = [this.buttonColor0, this.buttonColor1, this.buttonColor2, this.buttonColor3, this.buttonColor4, this.buttonColor5, this.buttonColor6];
			this.randomColorIndex = Mathf.random(e.length) - 1;
			let a = e[this.randomColorIndex];
			mgrGuide.registerGuideNode(GUD_REG_NODE.PANELDANCEDRAW_BUTTONCOLOR0, a.node), this.playDrawPanelUiAnim(), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), mgrSdk.startRecordVideo(), Laya.timer.frameLoop(10, this, this.onTimerLoop.bind(this)), mgrSdk.closeCrossRecommend()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), Laya.stage.offAllCaller(this), this.avatar && this.avatar.destroy(), this.timer1 && this.timer1.stop(), this.timer2 && this.timer2.stop(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELDANCEDRAW_BUTTONOK), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELDANCEDRAW_BUTTONCOLOR0), mgrGuide.sendMsgKey("PANEL_DANCE_ANY_OPT"), this.soundId && mgrSound.playMusic(this.soundId, !0), _G.poolManager.put(this.spine), this.clearEffect(), this.clearInteractionEffect(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		touchDown() {
			this.enable && this.createEffect()
		}
		createEffect() {
			this.clearEffect(), this.clickEffect = _G.poolManager.get(Particle, "156"), this.clickEffect.setParent(mgrAlert.scene3dfont), this.clickEffect.play(), this.worldPos.setValue(Laya.stage.mouseX, Laya.stage.mouseY, 0), mgrAlert.global2camera(this.worldPos, this.worldPos), this.clickEffect.setPosition(this.worldPos)
		}
		onTimerLoop() {
			this.nodeRecordVideo.visible = mgrSdk.isVideoRecording
		}
		touchUp() {
			this.clearEffect()
		}
		touchMove() {
			if (this.enable && this.clickEffect) {
				let t = this.worldPos;
				t.setValue(Laya.stage.mouseX, Laya.stage.mouseY, 0), mgrAlert.global2camera(t, t), this.clickEffect.setPosition(t)
			}
		}
		clearEffect() {
			this.clickEffect && (this.clickEffect.stopAndPutback(1), this.clickEffect = null), Laya.timer.clear(this, this.clearEffect)
		}
		playDrawPanelUiAnim() {
			let t = this.nodeNpc,
				e = t.x;
			t.x += 500, cc.tween(t).to(.5, {
				x: e
			}, {
				easing: cc.Ease.backOut
			}).start(), (t = this.nodeNpcTalkBubble).scaleX = 0, t.scaleY = 0, cc.tween(t).delay(.5).to(.5, {
				scaleX: 1,
				scaleY: 1
			}, {
				easing: cc.Ease.backOut
			}).start();
			let a = (t = this.nodeDrawPanel).y;
			t.y += 700, cc.tween(t).delay(.6).to(.5, {
				y: a
			}, {
				easing: cc.Ease.sineIn
			}).call(() => {
				this.scheduleOnce(.05, function() {
					mgrGuide.dispatchGuide(GUD_EVENT.PANEL_DANCE_DRAW), this.selectColor(this.randomColorIndex)
				})
			}).start()
		}
		updateDraw() {
			let t = db.get_dance_draw_color(this.selectedColorId);
			if (!t) return;
			let e = t.color;
			for (let t = 0; t < 9; t++) {
				let e = Math.floor(t % 3),
					a = e * this.drawNode.width / 3,
					i = (e + 1) * this.drawNode.width / 3,
					s = Math.floor(t / 3),
					n = s * this.drawNode.height / 3,
					o = (s + 1) * this.drawNode.height / 3;
				if (this.p1.x > a && this.p1.x <= i && this.p1.y > n && this.p1.y <= o) {
					this.selectedBoxIndexs.indexOf(t) < 0 && this.selectedBoxIndexs.push(t);
					break
				}
			}
			this.selectedColorIds.indexOf(this.selectedColorId) < 0 && this.selectedColorIds.push(this.selectedColorId), this.drawNode.graphics.drawCircle(this.p1.x, this.p1.y, LINE_WIDTH / 2, e, null, 0), this.drawNode.graphics.drawLine(this.p0.x, this.p0.y, this.p1.x, this.p1.y, e, LINE_WIDTH), this.p0.x = this.p1.x, this.p0.y = this.p1.y
		}
		isDrawSomething() {
			return !(this.selectedBoxIndexs.length <= 0) && !(this.selectedColorIds.length <= 0)
		}
		showResultPanel() {
			let t = UiHelper.getSelfGlobalPos(this.drawNode);
			this.drawNode.removeSelf(), this.nodeEffectDrawNodeRoot.addChild(this.drawNode), this.nodeEffectDrawNodeRoot.globalToLocal(t, !1), this.drawNode.pos(t.x, t.y), cc.tween(this.drawNode).to(1.8, {
				x: 0,
				y: 0
			}, {
				easing: cc.Ease.sineInOut
			}).delay(.5).to(.8, {
				scaleX: 1.5,
				scaleY: 1.5,
				alpha: 0
			}).delay(.7).call(() => {}).call(() => {
				this.nodeResultPanel.visible = !0, this.fillDanceInfo(), this.createRole(), this.buttonDance.node.scaleX = 0, this.buttonDance.node.scaleY = 0;
				let t = this.nodeResultPanel;
				t.scaleY = 0, cc.tween(t).to(.5, {
					scaleY: 1
				}, {
					easing: cc.Ease.backOut
				}).start()
			}).delay(.5).call(() => {
				cc.tween(this.buttonDance.node).to(1, {
					scaleY: 1,
					scaleX: 1
				}, {
					easing: cc.Ease.backOut
				}).start()
			}).delay(.1).hide().start();
			let e = this.nodeDrawPanel,
				a = e.y;
			cc.tween(e).to(.5, {
				y: a + 700
			}, {
				easing: cc.Ease.sineOut
			}).hide().start();
			let i = (e = this.nodeNpc).x;
			cc.tween(e).to(.5, {
				x: i + 500
			}, {
				easing: cc.Ease.sineOut
			}).hide().start()
		}
		createRole() {
			let t = this.contractIndex;
			this.createScene3DBack(1, 25), this.camera.transform.localPosition = new Laya.Vector3(0, 1.35, 3.34), this.camera.transform.localRotationEuler = new Laya.Vector3(-5, 0, 0);
			let e = db.game_cnf["dance_default_parts" + (t + 1)] || [];
			t == mgrGame.contractIndex && (e = mgrPart.partsWear), this.avatar = new RoleAvatar(e), this.avatar.transform.localPosition = new Laya.Vector3(0, 0, 0), this.avatar.transform.localRotationEuler = new Laya.Vector3(0, 0, 0), this.scene3DBack.addChild(this.avatar), this.avatar.playIdle(), this.avatar.playZaYang()
		}
		fillDanceInfo() {
			this.contractIndex;
			let t = db.get_role_contract_db(this.contractIndex).roleId,
				e = this.danceAnimId,
				a = (db.get_role_db(t), db.get_dance_anim_db(e));
			this.labelRoleNameCankao.visible = !1, this.labelDanceAnimNameCankao.visible = !1, this.spriteDanceAnimIcon.loadImage(a.iconTexture), this.spriteDanceAnimIconBg.loadImage(a.bgTexture)
		}
		selectColor(t) {
			if (mgrGuide.sendMsgKey("PANEL_DANCE_ANY_OPT"), this.selectedColorId == t) return;
			this.selectedColorId = t, this["buttonColor" + this.selectedColorId.toString()].node.addChild(this.nodeSelected), this.nodeSelected.pos(25, 27), this.nodeSelected.visible = !0, mgrGuide.dispatchGuide(GUD_EVENT.PANEL_DANCE_DRAW_IDLE_DRAW)
		}
		calcRoleAndAnim() {
			let t = [];
			t.push({
				contractIndex: mgrGame.contractIndex,
				weight: 10
			});
			for (let e = 0; e < this.selectedColorIds.length; e++) {
				let a = db.get_dance_draw_color(this.selectedColorIds[e]);
				if (a) {
					let e = .9 / this.selectedColorIds.length * 100,
						i = a.contractIndexs.length;
					for (let s = 0; s < i; s++) t.push({
						contractIndex: a.contractIndexs[s],
						weight: e / i
					})
				}
			}
			console.log("角色随机权重", t);
			let e = Tools.calcWheelTarget(t, "weight");
			console.log("角色随机结果", e);
			let a = e ? e.contractIndex : mgrGame.contractIndex,
				i = [];
			for (let t = 0; t < this.selectedBoxIndexs.length; t++) {
				let e = db.get_dance_box_animation(this.selectedBoxIndexs[t]);
				e && (i = i.concat(e.animationIds))
			}
			if (i.length <= 0) {
				let t = db.get_dance_box_animation(Mathf.random(9) - 1);
				t && (i = i.concat(t.animationIds))
			}
			return {
				contractIndex: a,
				animId: i[Mathf.random(i.length) - 1]
			}
		}
		showDance() {
			this.contractIndex;
			let t = this.danceAnimId;
			t == DANCE_ANSWER_ANIM_ID && mgrGame.addRecordDanceCount(DANCE_ANSWER_ANIM_ID), BaseFacade.mGoal.commit(ACTION_ID.PLAY_DANCE, 1), this.labelDebugInput.visible = !1, this.buttonDebugDance.node.visible = !1, this.nodeNpc.visible = !1, this.nodeDrawPanel.visible = !1, this.nodeResultPanel.visible = !1, this.nodeButtonsInteraction.visible = !0, this.nodeButtonsInteraction.y += 300, cc.tween(this.nodeButtonsInteraction).to(.3, {
				y: -100
			}, cc.OPTION.BACK_OUT).start();
			let e = BaseFacade.mItem.addWrapItemToList("1032", 1, 11);
			this.items = e;
			for (let t = 0; t < e.length; t++) {
				const a = e[t];
				a.itemId, a.count, BaseFacade.mItem.addItem(a.itemId, a.count, 998)
			}
			this.avatar.playAnimations([t, t, t, MODEL_ANIM.MAIN_IDLE], !1, 0);
			let a = db.get_dance_anim_db(t);
			a && a.faceAnimId ? this.avatar.playFaceAnim(a.faceAnimId, 0, !0) : this.avatar.playFaceAnim("face_zjm-face_dianji03", 0, !0);
			let i = this.getEffect("159");
			i.setScale(.8, .8, .8), i.play(), this.danceFinishTime = Timer.time + 10, this.timer1 = Timer.callLater(8, t => {
				this.destroyed || (console.log("PanelDanceDraw.showDance timer1 onLoop"), mgrSdk.stopRecordVideo())
			}), this.timer2 = Timer.callLater(10, a => {
				this.destroyed || (this.danceFinishTime = 0, console.log("PanelDanceDraw.showDance timer2 onLoop"), mgrSdk.isVideoShareable ? mgrAlert.openPanelLoading(UI_NAME.PanelShare, {
					shareIdx: 9,
					desc: "哇，跳得好棒！把你的舞蹈分享给朋友们看看吧！",
					descWithoutShare: "哇，跳得好棒！",
					closeCallback: () => {
						Timer.callLater(.1, () => {
							t == DANCE_ANSWER_ANIM_ID && mgrGame.getRecordDanceCount(DANCE_ANSWER_ANIM_ID) >= 3 && !mgrGame.isContractUnlock(DANCE_UNLOCK_CONTRACT_IDX) && PanelDanceRoleGet.openPanel(), mgrAlert.alertItems(e, !0), this.close()
						})
					},
					shareSucCallback: () => {
						Timer.callLater(.1, () => {
							t == DANCE_ANSWER_ANIM_ID && mgrGame.getRecordDanceCount(DANCE_ANSWER_ANIM_ID) >= 3 && !mgrGame.isContractUnlock(DANCE_UNLOCK_CONTRACT_IDX) && PanelDanceRoleGet.openPanel(), mgrAlert.alertItems(e, !0), this.close()
						})
					}
				}) : (t == DANCE_ANSWER_ANIM_ID && mgrGame.getRecordDanceCount(DANCE_ANSWER_ANIM_ID) >= 3 && !mgrGame.isContractUnlock(DANCE_UNLOCK_CONTRACT_IDX) && PanelDanceRoleGet.openPanel(), mgrAlert.alertItems(e, !0), this.close()))
			})
		}
		onTouchStart() {
			this.bTouchDown = !0, this.p0.x = this.drawNode.mouseX, this.p0.y = this.drawNode.mouseY, this.p1.x = this.drawNode.mouseX, this.p1.y = this.drawNode.mouseY, mgrGuide.sendMsgKey("PANEL_DANCE_ANY_OPT")
		}
		onTouchMove() {
			if (!this.bTouchDown) return;
			this.p0.x || this.p0.y || (this.p0.x = this.drawNode.mouseX, this.p0.y = this.drawNode.mouseY), this.p1.x = this.drawNode.mouseX, this.p1.y = this.drawNode.mouseY, Mathf.distanceSqr(this.p0, this.p1) >= LINE_WIDTH * LINE_WIDTH / 2 && this.updateDraw()
		}
		onTouchEnd() {
			this.bTouchDown && (this.p0.x = 0, this.p0.y = 0, this.bTouchDown = !1, this.isDrawSomething() ? (mgrGuide.sendMsgKey("OPT_FINISH"), this.buttonOk.node.visible = !0, mgrGuide.dispatchGuide(GUD_EVENT.PANEL_DANCE_DRAW_IDLE_OK)) : mgrGuide.dispatchGuide(GUD_EVENT.PANEL_DANCE_DRAW_IDLE_DRAW))
		}
		playUpEffect() {
			let t = _G.poolManager.get(Particle, "157");
			t.setParent(mgrAlert.scene3dfont), t.play(null, 10, 1), t.followTarget(this.drawNode, mgrAlert.camerafont, 0, -280)
		}
		clearInteractionEffect() {
			for (let t = 0; t < this.interactionEffect.length; t++) {
				let e = this.interactionEffect[t];
				e && _G.poolManager.put(e)
			}
		}
		playInteractionEffect(t) {
			if (this.destroyed || this.scene3DBack.destroyed) return;
			let e = _G.poolManager.get(Particle, t);
			e.setParent(this.scene3DBack), e.play(), this.interactionEffect.push(e)
		}
		showDrawResult() {
			Laya.stage.offAllCaller(this), UiHelper.unregisterTouchEvent(this.drawNode), this.playUpEffect();
			let t = this.calcRoleAndAnim();
			this.contractIndex = t.contractIndex, this.danceAnimId = t.animId, mgrGame.markDanceTested(t.animId), BaseFacade.mGoal.commit(ACTION_ID.DANCE_DRAW, 1);
			let e = db.game_cnf["dance_default_parts" + (t.contractIndex + 1)] || [];
			t.contractIndex == mgrGame.contractIndex && (e = mgrPart.partsWear);
			let a = new ResLoader;
			mgrPart.addPartResList(e, a), a.add(db.get_animation_db(this.danceAnimId).path, RES_TYPE.ANIMATIONCLIP), a.add(db.get_animation_db("face_zjm-face_dianji03").path, RES_TYPE.ANIMATIONCLIP), a.add(db.get_effect_db("174").res, RES_TYPE.PREFAB3D), a.add(db.get_effect_db("175").res, RES_TYPE.PREFAB3D), a.add(db.get_effect_db("176").res, RES_TYPE.PREFAB3D), mgrAlert.openWait(a, () => {
				this.showResultPanel()
			})
		}
		on_click_buttonClose() {
			mgrGuide.sendMsgKey("PANEL_DANCE_ANY_OPT"), this.danceFinishTime >= Timer.time ? _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelCpTest.5")) : this.close()
		}
		on_click_buttonColor0() {
			this.selectColor(0)
		}
		on_click_buttonColor1() {
			this.selectColor(1)
		}
		on_click_buttonColor2() {
			this.selectColor(2)
		}
		on_click_buttonColor3() {
			this.selectColor(3)
		}
		on_click_buttonColor4() {
			this.selectColor(4)
		}
		on_click_buttonColor5() {
			this.selectColor(5)
		}
		on_click_buttonColor6() {
			this.selectColor(6)
		}
		on_click_buttonOk() {
			mgrGuide.sendMsgKey("PANEL_DANCE_ANY_OPT"), GameStatistics.statisCommonEvent(2103), mgrAdv.statisVideoShow("draw_dance"), 1 == db.cop.b_show_adv_cost ? mgrAlert.openPanelLoading(UI_NAME.PanelAdvCostDialog, {
				desc: mgrI18n.getText("panelDanceDraw.6"),
				costText: mgrI18n.getText("panelDanceDraw.7"),
				advText: mgrI18n.getText("panelDanceDraw.8"),
				fOnClickCost: () => {
					BaseFacade.mItem.subItem("1000", 300, null) ? (GameStatistics.statisCommonEvent(2556, 1), this.showDrawResult()) : (GameStatistics.statisCommonEvent(2556, 0), mgrAlert.alertNotEnough("1000"))
				},
				fOnClickAdv: () => {
					mgrAdv.statisVideoClick("draw_dance"), mgrAdv.dispatchAdv("draw_dance", {}, !0)
				}
			}) : mgrAlert.alertAdvDialog(mgrI18n.getText("panelDanceDraw.6"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				mgrAdv.statisVideoClick("draw_dance"), mgrAdv.dispatchAdv("draw_dance", {}, !0)
			}, mgrI18n.getText("panelDanceDraw.7"), () => {})
		}
		on_click_buttonDance() {
			GameStatistics.statisCommonEvent(2104), this.showDance()
		}
		on_click_buttonDebugDance() {
			if (this.avatar) {
				let t = this.labelDebugInput.text;
				this.avatar.playAnimation(t, !1, MODEL_ANIM.MAIN_IDLE)
			}
		}
		on_click_buttonInteraction1() {
			Timer.time < this.nextInteractionTime || (this.nextInteractionTime = Timer.time + 1, mgrSound.playSound("yllsd_24"), this.playInteractionEffect("175"))
		}
		on_click_buttonInteraction2() {
			Timer.time < this.nextInteractionTime || (this.nextInteractionTime = Timer.time + 1, mgrSound.playSound("yllsd_25"), this.playInteractionEffect("174"))
		}
		on_click_buttonInteraction3() {
			Timer.time < this.nextInteractionTime || (this.nextInteractionTime = Timer.time + 1, mgrSound.playSound("yllsd_26"), this.playInteractionEffect("176"))
		}
		onMsgAdvShowSuc(t) {
			"draw_dance" == t.advName && this.showDrawResult()
		}
	}
	class PanelClassStudentStage extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassStudentStage.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_spriteRoleIcon: "Laya.Sprite",
				cc_labelTitle: "Laya.Label",
				cc_nodePhotos: "Laya.Box",
				cc_spritePhoto0: "Laya.Sprite",
				cc_spritePhoto1: "Laya.Sprite",
				cc_spritePhoto2: "Laya.Sprite",
				cc_spritePhoto3: "Laya.Sprite",
				cc_spriteTimePa: "Laya.Sprite",
				cc_barMaskTime: "UIBarMask",
				cc_labelTip: "Laya.Label",
				cc_nodeSprites: "Laya.Box",
				cc_sprite1: "Laya.Sprite",
				cc_sprite2: "Laya.Sprite",
				cc_sprite3: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.selectedPhotoIdx = 0, this.instOrBanner = new AdvInstOrBanner("enter_student_stage", "banner_student_stage"), this.bAction = !1, this.startPos = new Laya.Point, this.curPos = new Laya.Point, this.bTouched = !1
		}
		static getCenterPos() {
			let t = new Laya.Point(0, 0),
				e = mgrPanel.findPanel(PanelClassStudentStage);
			return e ? e.nodePhotos.localToGlobal(t, !1) : t
		}
		buildUi() {
			let t = db.get_student_stage_db_map(),
				e = [];
			for (let a in t) t[a] && e.push(t[a]);
			let a = e[Mathf.random(e.length) - 1];
			if (!a) return;
			this.stageData = a;
			let i = this.context && this.context.seatIdx,
				s = mgrClassRoom.getSeatDatas()[i];
			if (!s) return;
			let n = db.get_class_room_role_db(s.roleId);
			n && (this.spriteRoleIcon.loadImage(n.iconUrl), this.labelTitle.text = `${mgrI18n.getText(n.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`), this.sprite1.loadImage(a.pictureUrl1), this.sprite1.pos(a.picturePos1[0], a.picturePos1[1]), this.sprite2.loadImage(a.pictureUrl2), this.sprite2.pos(a.picturePos2[0], a.picturePos2[1]), this.sprite3.loadImage(a.pictureUrl3), this.sprite3.pos(a.picturePos3[0], a.picturePos3[1]), this.spritePhoto0.loadImage(a.pictureUrl1), this.spritePhoto0.pos(0, 0), this.spritePhoto1.loadImage(a.pictureUrl1), this.spritePhoto1.pos(Mathf.random(100) <= 50 ? 650 : -650, -650), UiHelper.registerTouchEvent(this.spritePhoto1, this.onTouchStart.bind(this), this.onTouchMove.bind(this), null), this.spritePhoto1.visible = !1, this.spritePhoto2.loadImage(a.pictureUrl2), this.spritePhoto2.pos(Mathf.random(100) <= 50 ? 650 : -650, -650), UiHelper.registerTouchEvent(this.spritePhoto2, this.onTouchStart.bind(this), this.onTouchMove.bind(this), null), this.spritePhoto2.visible = !1, this.spritePhoto3.loadImage(a.pictureUrl3), this.spritePhoto3.pos(Mathf.random(100) <= 50 ? 650 : -650, -650), UiHelper.registerTouchEvent(this.spritePhoto3, this.onTouchStart.bind(this), this.onTouchMove.bind(this), null), this.spritePhoto3.visible = !1, Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onTouchEnd), Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.onTouchOut), this.barMaskTime.style = UIBarMask.STYLE_RADIAL, this.barMaskTime.progress = 0, this.selectedPhotoIdx = 1, this.spritePhoto1.addChild(this.spriteTimePa), this.spriteTimePa.pos(300, 250), this.spritePhoto1.visible = !0, this.bAction = !0, cc.tween(this.spritePhoto1).to(.5, {
				x: 125,
				y: 125
			}).call(() => {
				this.destroyed || (this.bAction = !1)
			}).start(), Laya.timer.frameOnce(1, this, () => {
				mgrGuide.dispatchGuide(GUD_EVENT.ENTER_STUDENT_STAGE) || mgrGuide.dispatchGuide(GUD_EVENT.PANEL_STUDENT_STAGE_ENTER_IDLE)
			}), mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13102)
		}
		dispose() {
			this.instOrBanner.dispose(), _G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.ENTER_STUDENT_STAGE), _G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.PANEL_STUDENT_STAGE_ENTER_IDLE), _G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.PANEL_STUDENT_STAGE_MOVE_IDLE), this.timer && this.timer.stop(), Laya.stage.offAllCaller(this), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onTouchStart() {
			this.bAction || (this.bTouched = !0, this.spriteTimePa.visible = !0, Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onTouchEnd), this.startPos.x = this["spritePhoto" + this.selectedPhotoIdx.toString()].mouseX, this.startPos.y = this["spritePhoto" + this.selectedPhotoIdx.toString()].mouseY, this.barMaskTime.progress = 0, this.timer ? this.timer.start() : this.timer = Timer.callLoop(.1, t => {
				this.destroyed ? t.stop() : (this.barMaskTime.progress += .025, this.barMaskTime.progress >= 1 && (this.barMaskTime.progress = 1, this.nextAction(), t.stop()))
			}, this), mgrGuide.sendMsgKey("PANEL_STUDENT_STAGE_START"))
		}
		onTouchMove() {
			this.bAction || this.bTouched && (this.curPos.x = this["spritePhoto" + this.selectedPhotoIdx.toString()].mouseX, this.curPos.y = this["spritePhoto" + this.selectedPhotoIdx.toString()].mouseY, this["spritePhoto" + this.selectedPhotoIdx.toString()].x += this.curPos.x - this.startPos.x, this["spritePhoto" + this.selectedPhotoIdx.toString()].y += this.curPos.y - this.startPos.y, this.timer && !this.timer.isRunning() && this.timer.start(), this.spriteTimePa.visible = !0)
		}
		onTouchEnd() {
			if (this.bAction) return;
			this.bTouched = !1, Laya.stage.off(Laya.Event.MOUSE_UP, this, this.onTouchEnd), this.timer && this.timer.stop(), this.spriteTimePa.visible = !1, this["spritePhoto" + this.selectedPhotoIdx.toString()] && mgrGuide.dispatchGuide(GUD_EVENT.PANEL_STUDENT_STAGE_MOVE_IDLE)
		}
		onTouchOut() {
			if (this.bAction) return;
			this.onTouchEnd();
			let t = this["spritePhoto" + this.selectedPhotoIdx.toString()];
			t && (this.bAction = !0, cc.tween(t).to(.3, {
				x: 125,
				y: 125
			}).call(() => {
				this.destroyed || (this.startPos.x = t.mouseX, this.startPos.y = t.mouseY, this.bAction = !1)
			}).start())
		}
		gameResult() {
			let t = [];
			for (let e = 1; e <= 3; e++) {
				let a = this["spritePhoto" + e.toString()];
				t.push([a.x, a.y])
			}
			mgrAlert.openPanelLoading(UI_NAME.PanelClassStudenStageResult, {
				stageId: this.stageData.id,
				seatIdx: this.context.seatIdx,
				photoPos: t
			}), this.close()
		}
		nextAction() {
			GameStatistics.statisCommonEvent(2547 + this.selectedPhotoIdx), mgrGuide.sendMsgKey("STUDENT_STAGE_NEXT");
			let t = this["spritePhoto" + this.selectedPhotoIdx.toString()];
			mgrAlert.playParticleEffect("177", t.localToGlobal(new Laya.Point(t.width / 2, t.height / 2)), 1, .5), UiHelper.unregisterTouchEvent(t), this.timer && this.timer.stop(), this.barMaskTime.progress = 0, this.spriteTimePa.visible = !1, this.spritePhoto0.alpha = 0, this.labelTip.visible = !1, this.selectedPhotoIdx++;
			let e = this["spritePhoto" + this.selectedPhotoIdx.toString()];
			e ? (e.addChild(this.spriteTimePa), e.visible = !0, this.bAction = !0, cc.tween(e).to(.5, {
				x: 125,
				y: 125
			}).call(() => {
				this.destroyed || (this.startPos.x = e.mouseX, this.startPos.y = e.mouseY, this.bAction = !1)
			}).start(), this.selectedPhotoIdx, this.spriteTimePa.pos(300, 0), mgrGuide.dispatchGuide(GUD_EVENT.PANEL_STUDENT_STAGE_ENTER_IDLE)) : this.gameResult()
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisOnStageEnd(13102, 0, 1), this.close()
		}
	}
	class PanelClassTeacherChangeScore extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelClassTeacherChangeScore.json", this.openAndCloseAnimEnabled = !1, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_labelScore: "Laya.Label",
				cc_nodeScore: "Laya.Image",
				cc_nodeSlidingBlock: "Laya.Box",
				cc_buttonSure: "UIButton"
			}, this.startX = 0, this.curX = 0, this.bTouched = !1
		}
		static getCenterPos() {
			let t = new Laya.Point(0, 0),
				e = mgrPanel.findPanel(PanelClassTeacherChangeScore);
			return e ? e.nodeScore.localToGlobal(t, !1) : t
		}
		buildUi() {
			let t = this.context && this.context.score || 0;
			this.labelScore.font = GConfig.bmf_class, this.labelScore.text = t.toString(), this.nodeSlidingBlock.x = t / 100 * this.nodeScore.width, UiHelper.registerTouchEvent(this.nodeSlidingBlock, this.onTouchStart.bind(this), this.onTouchMove.bind(this), null), Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onTouchEnd), this.bg.scale(0, 0), cc.tween(this.bg).to(.3, cc.PROP.SCALE1).call(() => {
				mgrGuide.dispatchGuide(GUD_EVENT.PANEL_TEACHER_CHANGE_SCORE_IDLE)
			}).start()
		}
		dispose() {
			_G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.PANEL_TEACHER_CHANGE_SCORE_IDLE), Laya.stage.offAllCaller(this), super.dispose()
		}
		onTouchStart() {
			this.bTouched = !0, this.startX = this.nodeSlidingBlock.mouseX, mgrGuide.sendMsgKey("PANEL_TEACHER_SCORE_CHANGE")
		}
		onTouchMove() {
			this.bTouched && (this.curX = this.nodeSlidingBlock.mouseX, this.nodeSlidingBlock.x += this.curX - this.startX, this.nodeSlidingBlock.x < 0 && (this.nodeSlidingBlock.x = 0), this.nodeSlidingBlock.x > this.nodeScore.width && (this.nodeSlidingBlock.x = this.nodeScore.width), this.refreshScore())
		}
		onTouchEnd() {
			this.bTouched = !1
		}
		refreshScore() {
			this.labelScore.text = Math.ceil(this.nodeSlidingBlock.x / this.nodeScore.width * 100).toString()
		}
		on_click_buttonSure() {
			this.context && this.context.fOnChange && this.context.fOnChange(parseInt(this.labelScore.text)), this.close()
		}
	}
	const OPT_IDLE_DELAY_TIME = 2;
	var GuideScript = {};

	function TAG_1() {}

	function TAG_2() {}

	function TAG_END() {}
	let tags = {};

	function TAG(t) {
		if (tags[t]) return tags[t];
		let e = function() {};
		return tags[t] = e, e
	}

	function AddGuide(t, e) {
		let a = GuideScript[t];
		a || (a = [], GuideScript[t] = a), a.push(e)
	}

	function initGuideScript() {
		AddGuide(GUD_EVENT.START_GAME, [GUD.hideAll(), GUD.waitNode(GUD_REG_NODE.PANELCONTRACT_BUTTONOK), GUD.pointEvent(2001), GUD.callFunc(function() {
			GameStatistics.statisOnStageStart(2038), GameStatistics.statisOnStageStart(10001)
		}), GUD.pointEvent(2002), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10001), GameStatistics.statisOnStageStart(10002)
		}), GUD.hideMsg(), GUD.setBlockEnabled(!1), GUD.hideAll(), GUD.sendMsg("GUIDE_SELECT_ROLE"), GUD.waitNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX), GUD.setBlockEnabled(!0), GUD.click(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX), GUD.pointEvent(2041), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10003), GameStatistics.statisOnStageStart(10004)
		}), GUD.hideAll(), GUD.waitNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE), GUD.setBlockEnabled(!0), GUD.waitTime(.3), GUD.click(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE), GUD.pointEvent(2008), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10004), GameStatistics.statisOnStageStart(10005)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.START_CONTRACT, [GUD.hideAll(), GUD.waitNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX), GUD.setBlockEnabled(!0), GUD.click(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX), GUD.hideAll(), GUD.waitNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE), GUD.setBlockEnabled(!0), GUD.waitTime(.3), GUD.click(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE), GUD.close()]), AddGuide(GUD_EVENT.START_CONTRACT2, [GUD.hideAll(), GUD.setBlockEnabled(!1), GUD.waitForMsg("CLICK_CONTRACT_CIRCLE"), GUD.close()]), AddGuide(GUD_EVENT.ENTER_MAIN, [GUD.setJumpEnable(!0), GUD.hideAll(), GUD.setBlockEnabled(!1), GUD.waitForMsg("START_MAIN"), GUD.setBlockEnabled(!0), GUD.waitTime(1.3), GUD.waitAndClick(GUD_REG_NODE.PANELMAIN_BUTTONPLAY), GUD.pointEvent(2009), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10005), GameStatistics.statisOnStageStart(10006)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_SKINCARE, [GUD.hideAll(), GUD.callFunc(function(t) {
			switch (t.params) {
				case "shui_xi":
					t.gotoTag(TAG("sx_finish"));
					break;
				case "ca_gan":
					t.gotoTag(TAG("cg_finish"));
					break;
				case "mianmo":
					t.gotoTag(TAG("mm_finish"))
			}
		}), GUD.waitTime(2), GUD.click(GUD_REG_NODE.PANELSKINCARE_BUTTONSTART), GUD.pointEvent(2010), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10006), GameStatistics.statisOnStageStart(10007)
		}), GUD.hideAll(), GUD.waitTime(1), GUD.click(GUD_REG_NODE.PANELSKINCARE_ITEM0), GUD.pointEvent(2011), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10007), GameStatistics.statisOnStageStart(10008)
		}), GUD.moveMaskTo(GUD_REG_NODE.PANELSKINCARE_BRUSH), GUD.setBlockEnabled(!1), GUD.setMaskVisible(!1), GUD.callFunc(function(t) {
			let e = PanelSkincare.getBrushPos(),
				a = GUDHelper.getPosByCenterOffset(0, 0);
			t.showFingerMoveAnim(e, a, !1, 1.5)
		}), GUD.waitForMsg("TOUCH_DOWN_BRUSH"), GUD.pointEvent(2012), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10008), GameStatistics.statisOnStageStart(10009)
		}), GUD.hideAll(), GUD.callFunc(function(t) {
			let e = [PanelSkincare.getBrushPos(), GUDHelper.getPosByCenterOffset(-150, 0), GUDHelper.getPosByCenterOffset(150, 0), GUDHelper.getPosByCenterOffset(-150, 0), GUDHelper.getPosByCenterOffset(150, 0)];
			t.showFingerMovePathAnim(e)
		}), GUD.waitForMsg("OPT_FINISH"), GUD.pointEvent(2013), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10009), GameStatistics.statisOnStageStart(10010)
		}), GUD.callFunc(function(t) {
			t.stop(), t.closeGuide(!1), PanelSkincare.lockTouch1 = !1, mgrGuide.dispatchGuide("wait_then_select_item_and_move_to", "shui_xi")
		}), TAG("sx_finish"), GUD.pointEvent(2016), GUD.callFunc(function(t) {
			GameStatistics.statisOnStageEnd(10012), GameStatistics.statisOnStageStart(10013), t.stop(), t.closeGuide(!1), PanelSkincare.lockTouch1 = !1, mgrGuide.dispatchGuide("wait_then_select_item_and_move_to", "ca_gan")
		}), TAG("cg_finish"), GUD.pointEvent(2019), GUD.callFunc(function(t) {
			GameStatistics.statisOnStageEnd(10015), GameStatistics.statisOnStageStart(10016), t.stop(), t.closeGuide(!1), PanelSkincare.lockTouch1 = !1, mgrGuide.dispatchGuide("wait_then_select_item_and_move_to", "mianmo")
		}), TAG("mm_finish"), GUD.pointEvent(2022), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10018), GameStatistics.statisOnStageStart(10019)
		}), GUD.setBlockEnabled(!1), GUD.showMaskNone(), GUD.callFunc(function(t) {
			let e = GUDHelper.getPosByCenterOffset(200, -200),
				a = GUDHelper.getPosByCenterOffset(-200, 200);
			t.showFingerMoveAnim(e, a, !1, 1.5)
		}), GUD.pointEvent(2023), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10019), GameStatistics.statisOnStageStart(10020)
		}), GUD.waitForMsg("OPT_FINISH"), GUD.pointEvent(2024), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10020), GameStatistics.statisOnStageStart(10021)
		}), GUD.setBlockEnabled(!0), GUD.callFunc(function() {
			PanelSkincare.lockTouch1 = !0
		}), GUD.hideMoveFinger(), GUD.hideAll(), GUD.waitForMsg("SKINCARE_OVER"), GUD.pointEvent(2025), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10021), GameStatistics.statisOnStageStart(10022)
		}), GUD.waitAndClick(GUD_REG_NODE.PANELSKINCARE_BUTTONCLOSE), GUD.pointEvent(2026), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10022), GameStatistics.statisOnStageStart(10023), PanelSkincare.lockTouch = !1
		}), GUD.closeAndSave()]), AddGuide("wait_then_select_item_and_move_to", [GUD.hideAll(), GUD.setBlockEnabled(!1), GUD.callFunc(function(t) {
			t.params
		}), GUD.click(GUD_REG_NODE.PANELSKINCARE_ITEM0), GUD.moveMaskTo(GUD_REG_NODE.PANELSKINCARE_BRUSH), GUD.showMaskExceptCenter(), GUD.callFunc(function(t) {
			switch (t.params) {
				case "shui_xi":
					GUD.pointEvent(2014)(), GameStatistics.statisOnStageEnd(10010), GameStatistics.statisOnStageStart(10011);
					break;
				case "ca_gan":
					GUD.pointEvent(2017)(), GameStatistics.statisOnStageEnd(10013), GameStatistics.statisOnStageStart(10014);
					break;
				case "mianmo":
					GUD.pointEvent(2020)(), GameStatistics.statisOnStageEnd(10016), GameStatistics.statisOnStageStart(10017)
			}
			let e = PanelSkincare.getBrushPos(),
				a = GUDHelper.getPosByCenterOffset(0, 0);
			t.showFingerMoveAnim(e, a, !1, 1.5)
		}), GUD.waitForMsg("TOUCH_DOWN_BRUSH"), GUD.hideAll(), GUD.callFunc(function(t) {
			let e = [PanelSkincare.getBrushPos(), GUDHelper.getPosByCenterOffset(-150, 0), GUDHelper.getPosByCenterOffset(150, 0), GUDHelper.getPosByCenterOffset(-150, 0), GUDHelper.getPosByCenterOffset(150, 0)];
			switch (t.showFingerMovePathAnim(e), t.params) {
				case "shui_xi":
					GUD.pointEvent(2015)(), GameStatistics.statisOnStageEnd(10011), GameStatistics.statisOnStageStart(10012);
					break;
				case "ca_gan":
					GUD.pointEvent(2018)(), GameStatistics.statisOnStageEnd(10014), GameStatistics.statisOnStageStart(10015);
					break;
				case "mianmo":
					GUD.pointEvent(2021)(), GameStatistics.statisOnStageEnd(10017), GameStatistics.statisOnStageStart(10018)
			}
		}), GUD.waitForMsg("OPT_FINISH"), GUD.close(), GUD.callFunc(function(t) {
			t.params && mgrGuide.dispatchGuide(GUD_EVENT.ENTER_SKINCARE, t.params)
		})]), AddGuide(GUD_EVENT.ENTER_MAIN, [GUD.waitTime(1.5), GUD.waitAndClick(GUD_REG_NODE.PANELMAIN_BUTTONWEITUO), GUD.pointEvent(2027), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10023), GameStatistics.statisOnStageStart(10024)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_PHONE, [GUD.waitTime(.5), GUD.waitAndClick(GUD_REG_NODE.PANELPHONE_BUTTONYES), GUD.pointEvent(2028), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10024), GameStatistics.statisOnStageStart(10025)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_TALK, [GUD.waitTime(.5), GUD.waitAndClick(GUD_REG_NODE.PANELTALK_BUTTONSTART), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_ROOM, [GUD.pointEvent(2029), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10025), GameStatistics.statisOnStageStart(10026)
		}), GUD.hideAll(), GUD.waitTime(2.5), GUD.waitTime(.5), GUD.waitAndClick(GUD_REG_NODE.PANELROOM_PART_18024, new Vec2(60, 90)), GUD.pointEvent(2030), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10026), GameStatistics.statisOnStageStart(10027)
		}), GUD.hideAll(), GUD.waitNode(GUD_REG_NODE.PANELROOM_BRUSH), GUD.waitTime(.4), GUD.moveMaskTo(GUD_REG_NODE.PANELROOM_BRUSH, new Vec2(100, 100)), GUD.setBlockEnabled(!1), GUD.setMaskVisible(!0), GUD.showMaskExceptCenter(), GUD.callFunc(function(t) {
			let e = PanelRoom.getBrushPos(),
				a = PanelRoom.getZuoMeiMao();
			t.showFingerMoveAnim(e, a, !1, 1.5)
		}), GUD.waitForMsg("TOUCH_DOWN_BRUSH"), GUD.pointEvent(2031), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10027), GameStatistics.statisOnStageStart(10028)
		}), GUD.hideAll(), GUD.callFunc(function(t) {
			PanelRoom.lockRight = !0;
			let e = PanelRoom.getZuoMeiMao();
			e.y += 10;
			let a = [PanelRoom.getBrushPos(), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 - 200, e.y), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 - 200, e.y)];
			t.showFingerMovePathAnim(a, 600)
		}), GUD.waitForMsg("PAINT_FINISH_L"), GUD.callFunc(function(t) {
			PanelRoom.lockRight = !1;
			let e = PanelRoom.getYouMeiMao(),
				a = [PanelRoom.getBrushPos(), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 + 200, e.y), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 + 200, e.y)];
			t.showFingerMovePathAnim(a, 600)
		}), GUD.waitForMsg("PAINT_FINISH_A"), GUD.pointEvent(2032), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10028), GameStatistics.statisOnStageStart(10029)
		}), GUD.click(GUD_REG_NODE.PANELROOM_YANYING, new Vec2(43, 43)), GUD.pointEvent(2033), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10029), GameStatistics.statisOnStageStart(10030)
		}), GUD.waitAndClick(GUD_REG_NODE.PANELROOM_PART_19011, new Vec2(60, 90)), GUD.pointEvent(2034), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10030), GameStatistics.statisOnStageStart(10031)
		}), GUD.waitNode(GUD_REG_NODE.PANELROOM_BRUSH), GUD.waitTime(.4), GUD.moveMaskTo(GUD_REG_NODE.PANELROOM_BRUSH, new Vec2(100, 100)), GUD.setMaskVisible(!0), GUD.showMaskExceptCenter(), GUD.callFunc(function(t) {
			let e = PanelRoom.getBrushPos(),
				a = PanelRoom.getZuoMeiMao();
			a.y += 30, t.showFingerMoveAnim(e, a, !1, 1.5)
		}), GUD.waitForMsg("TOUCH_DOWN_BRUSH"), GUD.pointEvent(2035), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10031), GameStatistics.statisOnStageStart(10032)
		}), GUD.hideAll(), GUD.callFunc(function(t) {
			PanelRoom.lockRight = !0;
			let e = PanelRoom.getZuoMeiMao();
			e.y += 60;
			let a = [PanelRoom.getBrushPos(), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 - 200, e.y), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 - 200, e.y)];
			t.showFingerMovePathAnim(a, 600)
		}), GUD.waitForMsg("PAINT_FINISH_L"), GUD.waitTime(.3), GUD.callFunc(function(t) {
			PanelRoom.lockRight = !1;
			let e = PanelRoom.getYouMeiMao();
			e.y += 60;
			let a = [PanelRoom.getBrushPos(), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 + 200, e.y), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 + 200, e.y)];
			t.showFingerMovePathAnim(a, 600)
		}), GUD.waitForMsg("PAINT_FINISH_A"), GUD.pointEvent(2036), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10032), GameStatistics.statisOnStageStart(10033)
		}), GUD.hideMoveFinger(), GUD.waitTime(.3), GUD.pointEvent(2037), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10033), GameStatistics.statisOnStageStart(10034)
		}), GUD.closeAndSave(), GUD.callFunc(function() {
			PanelRoom.lockRight = !1, PanelRoom.lockTouch = !1, PanelRoom.resetMenu(), GameStatistics.statisOnStageEnd(2038), GameStatistics.statisOnStageEnd(10034)
		})]), AddGuide(GUD_EVENT.GOTO_CAT_COIN, [GUD.waitTime(.5), GUD.waitAndClick(GUD_REG_NODE.PANELMAIN_BUTTONCOIN), GUD.pointEvent(3001), GUD.hideAll(), GUD.waitTime(.3), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_DREAM, [GUD.pointEvent(3021), GUD.waitAndClick(GUD_REG_NODE.PANELDREAM_SUITITEM0, new Vec2(129, 170)), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_FISH, [GUD.waitTime(.5), GUD.waitAndClick(GUD_REG_NODE.PANELFISH_BUTTONFIND, new Vec2(0, 20)), GUD.hideAll(), GUD.waitNode(GUD_REG_NODE.PANELFISH_TOUCHNODE), GUD.moveMaskTo(GUD_REG_NODE.PANELFISH_TOUCHNODE, new Vec2(40, 60)), GUD.setBlockEnabled(!1), GUD.setMaskVisible(!0), GUD.showMaskExceptCenter(), GUD.callFunc(function(t) {
			let e = PanelFishGame.getTouchPos(),
				a = PanelFishGame.getGameCenterPos();
			t.showFingerMoveAnim(e, a, !1, 1.5)
		}), GUD.waitForMsg("TOUCH_DOWN_FISH"), GUD.hideAll(), GUD.callFunc(function(t) {
			let e = PanelFishGame.getFishSprite();
			e ? t.followSprite(e) : t.closeGuide(!0)
		}), GUD.waitForMsg("CATCH_FISH"), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_SZZ, [GUD.pointEvent(3011), GUD.waitAndClick(GUD_REG_NODE.PANELSZZ_BUTTONYES), GUD.hideAll(), GUD.waitTime(3.5), GUD.click(GUD_REG_NODE.PANELSZZ_BUTTONAWARD), GUD.hideAll(), GUD.waitTime(.3), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_MANGHE, [GUD.pointEvent(3071), GUD.setMaskVisible(!0), GUD.showMaskNone(), GUD.setBlockEnabled(!1), GUD.callFunc(function(t) {
			let e = PanelMangHe.getBoxPos();
			e.y -= 50, GUD.moveFingerTo(e)(t)
		}), GUD.waitForMsg("CLICK_MANG_HE"), GUD.pointEvent(3072), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_MANGHE_OPEN, [GUD.waitNode(GUD_REG_NODE.PANELMANGHE_BUTTONOPEN), GUD.waitTime(.2), GUD.click(GUD_REG_NODE.PANELMANGHE_BUTTONOPEN), GUD.pointEvent(3073), GUD.waitForMsg("SHOW_FAZHEN"), GUD.hideAll(), GUD.setBlockEnabled(!1), GUD.callFunc(function(t) {
			let e = PanelMangHeOpen.getPointPos(0),
				a = PanelMangHeOpen.getPointPos(3);
			t.showFingerMoveAnim(e, a, !0, 1.5)
		}), GUD.waitForMsg("LINE_SUC"), GUD.pointEvent(3075), GUD.hideAll(), GUD.waitTime(.3), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_PLAY, [GUD.waitTime(.1), GUD.sendMsg("SHOW_YINDAO_EFFECT"), GUD.hideAll(), GUD.waitTime(.2), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_LAJI, [GUD.waitForMsg("LAJI_CREATE"), GUD.waitTime(.5), GUD.waitAndClick(GUD_REG_NODE.PANELOUT_LAJITONG, new Vec2(73, 20)), GUD.hideAll(), GUD.waitForMsg("LAJI_CREATE"), GUD.waitTime(.5), GUD.waitAndClick(GUD_REG_NODE.PANELOUT_LAJITONG, new Vec2(73, 20)), GUD.hideAll(), GUD.waitTime(.2), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_PAISHOU, [GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_HUDIE, [GUD.waitAndClick(GUD_REG_NODE.PANELOUT_DIALOG, new Vec2(300, 100)), GUD.hideAll(), GUD.waitForMsg("START_BUTTERFLY"), GUD.callFunc(function(t) {
			PanelOutside.startButteryfly()
		}), GUD.hideAll(), GUD.waitTime(.3), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_LINGGAN, [GUD.hideAll(), GUD.waitTime(.3), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_CZTG, [GUD.waitNode(GUD_REG_NODE.PANELIN_ORDER), GUD.callFunc(function(t) {
			t.setTop()
		}), GUD.waitAndClick(GUD_REG_NODE.PANELIN_ORDER, new Vec2(200, 50)), GUD.hideAll(), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_ORDER, [GUD.waitAndClick(GUD_REG_NODE.PANELORDER_ITEM, new Vec2(0, 100)), GUD.hideAll(), GUD.waitTime(.3), GUD.waitAndClick(GUD_REG_NODE.PANELORDER_BUTTONOK), GUD.hideAll(), GUD.waitTime(.3), GUD.closeAndSave()]), AddGuide(GUD_EVENT.OPT_IDLE_SI_MIAN_MO, [GUD.setBlockEnabled(!1), GUD.waitForMsg("OPT_FINISH", OPT_IDLE_DELAY_TIME, TAG_END), GUD.callFunc(function(t) {
			let e = GUDHelper.getPosByCenterOffset(200, -200),
				a = GUDHelper.getPosByCenterOffset(-200, 200);
			t.showFingerMoveAnim(e, a, !1, 1.5)
		}), GUD.waitForMsg("OPT_FINISH"), TAG_END, GUD.close()]), AddGuide(GUD_EVENT.OPT_IDLE_TU_LIAN, [GUD.setBlockEnabled(!1), GUD.waitForMsg("OPT_FINISH", OPT_IDLE_DELAY_TIME, TAG_END), GUD.callFunc(function(t) {
			let e = [PanelSkincare.getBrushPos(), GUDHelper.getPosByCenterOffset(-150, -100), GUDHelper.getPosByCenterOffset(150, -100), GUDHelper.getPosByCenterOffset(-150, 0), GUDHelper.getPosByCenterOffset(150, 0), GUDHelper.getPosByCenterOffset(-150, 100), GUDHelper.getPosByCenterOffset(150, 100)];
			t.showFingerMovePathAnim(e, 600)
		}), GUD.waitForMsg("OPT_FINISH"), TAG_END, GUD.close()]), AddGuide(GUD_EVENT.OPT_IDLE_TU_BI_ZI, [GUD.setBlockEnabled(!1), GUD.waitForMsg("OPT_FINISH", OPT_IDLE_DELAY_TIME, TAG_END), GUD.callFunc(function(t) {
			let e = [PanelSkincare.getBrushPos(), GUDHelper.getPosByCenterOffset(-50, 0), GUDHelper.getPosByCenterOffset(50, 0), GUDHelper.getPosByCenterOffset(-50, 0), GUDHelper.getPosByCenterOffset(50, 0)];
			t.showFingerMovePathAnim(e, 600)
		}), GUD.waitForMsg("OPT_FINISH"), TAG_END, GUD.close()]), AddGuide(GUD_EVENT.OPT_IDLE_XIU_MEI_MAO, [GUD.setBlockEnabled(!1), GUD.waitForMsg("OPT_FINISH", OPT_IDLE_DELAY_TIME, TAG_END), GUD.callFunc(function(t) {
			let e = GUDHelper.getPosByCenterOffset(-75, -130),
				a = GUDHelper.getPosByCenterOffset(75, -130),
				i = [PanelSkincare.getBrushPos(), new Vec2(e.x - 70, e.y + 10), new Vec2(e.x + 70, e.y + 10), new Vec2(e.x - 70, e.y + 10), new Vec2(a.x + 70, a.y + 10), new Vec2(a.x - 70, a.y + 10), new Vec2(a.x + 70, a.y + 10)];
			t.showFingerMovePathAnim(i, 600)
		}), GUD.waitForMsg("OPT_FINISH"), TAG_END, GUD.close()]), AddGuide(GUD_EVENT.PANEL_DANCE_PREVIEW, [GUD.setBlockEnabled(!1), GUD.callFunc(() => {
			GameStatistics.statisOnStageStart(2041, 0)
		}), GUD.click(GUD_REG_NODE.PANELDANCEPREVIEW_BUTTONTODANCEDRAW), GUD.hideAll(), GUD.callFunc(() => {
			GameStatistics.statisOnStageEnd(2041, 1, 0), GameStatistics.statisOnStageStart(2042, 0)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.PANEL_DANCE_DRAW, [GUD.setBlockEnabled(!1), GUD.click(GUD_REG_NODE.PANELDANCEDRAW_BUTTONCOLOR0), GUD.hideAll(), GUD.callFunc(() => {
			GameStatistics.statisOnStageEnd(2042, 1, 0), GameStatistics.statisOnStageStart(2043, 0)
		}), GUD.callFunc(function(t) {
			let e = PanelDanceDraw.getDrawPanelCenterPos();
			console.log("centerPoint", e);
			let a = [];
			for (let t = 0; t < 360; t += 10) {
				let [i, s] = Mathf.calcPointOnArc(e.x, e.y, 100, t);
				a.push(new Vec2(i - 65, s - 65))
			}
			console.log("path", a), t.showFingerMovePathAnim(a, 400, 2)
		}), GUD.waitForMsg("OPT_FINISH"), GUD.hideAll(), GUD.callFunc(() => {
			GameStatistics.statisOnStageEnd(2043, 1, 0), GameStatistics.statisOnStageStart(2044, 0)
		}), GUD.click(GUD_REG_NODE.PANELDANCEDRAW_BUTTONOK), GUD.hideAll(), GUD.callFunc(() => {
			GameStatistics.statisOnStageEnd(2044, 1, 0)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.PANEL_DANCE_DRAW_IDLE_DRAW, [GUD.setBlockEnabled(!1), GUD.waitForMsg("PANEL_DANCE_ANY_OPT", OPT_IDLE_DELAY_TIME, TAG_END), GUD.callFunc(function(t) {
			let e = PanelDanceDraw.getDrawPanelCenterPos();
			console.log("centerPoint", e);
			let a = [];
			for (let t = 0; t < 360; t += 10) {
				let [i, s] = Mathf.calcPointOnArc(e.x, e.y, 100, t);
				a.push(new Vec2(i, s))
			}
			console.log("path", a), t.showFingerMovePathAnim(a, 400, 2)
		}), GUD.waitForMsg("PANEL_DANCE_ANY_OPT"), GUD.hideAll(), TAG_END, GUD.close()]), AddGuide(GUD_EVENT.PANEL_DANCE_DRAW_IDLE_OK, [GUD.setBlockEnabled(!1), GUD.waitForMsg("PANEL_DANCE_ANY_OPT", OPT_IDLE_DELAY_TIME, TAG_END), GUD.callFunc(function(t) {
			let e = PanelDanceDraw.getButtonOkPos();
			console.log("centerPoint", e), t.moveTo(e), t.showFingerClickAnim()
		}), GUD.waitForMsg("PANEL_DANCE_ANY_OPT"), GUD.hideAll(), TAG_END, GUD.close()]), AddGuide(GUD_EVENT.ENTER_CP_TEST, [GUD.setBlockEnabled(!1), GUD.click(GUD_REG_NODE.PANELCPTEST_BUTTONGUIDE), GUD.hideAll(), GUD.waitForMsg("CP_CLICK_ITEM"), GUD.hideAll(), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_CLASS_ROOM, [GUD.setBlockEnabled(!1), GUD.click(GUD_REG_NODE.PANELCLASSROOM_BUTTONSTUDENT), GUD.hideAll(), GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2516)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_STUDENT_STAGE, [GUD.setBlockEnabled(!1), GUD.callFunc(function(t) {
			let e = PanelClassStudentStage.getCenterPos();
			console.log("中心点位置", e);
			let a = new Laya.Point(e.x + 150, e.y + 150),
				i = [];
			i.push(a), i.push(e), t.showFingerMovePathAnim(i, 400, 2)
		}), GUD.waitForMsg("PANEL_STUDENT_STAGE_START"), GUD.hideMsg(), GUD.hideMoveFinger(), GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2517)
		}), GUD.waitForMsg("STUDENT_STAGE_NEXT", 6, TAG_1), GUD.waitForMsg("STUDENT_STAGE_NEXT"), GUD.hideAll(), TAG_1, GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2518)
		}), GUD.callFunc(function(t) {
			let e = PanelClassStudentStage.getCenterPos(),
				a = new Laya.Point(e.x + 150, e.y + 150),
				i = [];
			i.push(a), i.push(e), t.showFingerMovePathAnim(i, 400, 2)
		}), GUD.waitForMsg("PANEL_STUDENT_STAGE_START"), GUD.hideMsg(), GUD.hideMoveFinger(), GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2519)
		}), GUD.waitForMsg("STUDENT_STAGE_NEXT", 6, TAG_END), GUD.waitForMsg("STUDENT_STAGE_NEXT"), GUD.hideAll(), TAG_END, GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2520)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.PANEL_STUDENT_STAGE_ENTER_IDLE, [GUD.setBlockEnabled(!1), GUD.waitForMsg("PANEL_STUDENT_STAGE_START", 3, TAG_END), GUD.callFunc(function(t) {
			let e = PanelClassStudentStage.getCenterPos();
			console.log("中心点位置", e);
			let a = new Laya.Point(e.x + 150, e.y + 150),
				i = [];
			i.push(a), i.push(e), t.showFingerMovePathAnim(i, 400, 2)
		}), GUD.waitForMsg("PANEL_STUDENT_STAGE_START"), GUD.hideAll(), TAG_END, GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2521)
		}), GUD.close()]), AddGuide(GUD_EVENT.PANEL_STUDENT_STAGE_MOVE_IDLE, [GUD.setBlockEnabled(!1), GUD.waitForMsg("PANEL_STUDENT_STAGE_START", 3, TAG_END), GUD.waitForMsg("STUDENT_STAGE_NEXT"), GUD.hideAll(), TAG_END, GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2522)
		}), GUD.close()]), AddGuide(GUD_EVENT.PANEL_TEACHER_CHANGE_SCORE_IDLE, [GUD.setBlockEnabled(!1), GUD.waitForMsg("PANEL_TEACHER_SCORE_CHANGE", 3, TAG_END), GUD.callFunc(function(t) {
			let e = PanelClassTeacherChangeScore.getCenterPos();
			console.log("中心点位置", e);
			let a = new Laya.Point(e.x + 83, e.y),
				i = new Laya.Point(e.x + 183, e.y),
				s = [];
			s.push(a), s.push(i), t.showFingerMovePathAnim(s, 400, 2)
		}), GUD.waitForMsg("PANEL_TEACHER_SCORE_CHANGE"), GUD.hideAll(), TAG_END, GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2523)
		}), GUD.close()]), AddGuide(GUD_EVENT.PANEL_TEACHER_STAGE_IDLE, [GUD.setBlockEnabled(!1), GUD.waitForMsg("PANEL_TEACHER_STAGE_CLICK", 3, TAG_END), GUD.waitForMsg("PANEL_TEACHER_STAGE_CLICK"), GUD.hideAll(), TAG_END, GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2524)
		}), GUD.close()]), AddGuide("GuideTest0", [GUD.setMsgMaskVisible(!0), GUD.showClickMsg("11111111111"), GUD.showClickMsg("222222222222"), GUD.showClickMsg("333333333333333"), GUD.showClickMsg("44444444444"), GUD.waitTime(.5), GUD.close()]), AddGuide("GuideTest1", [GUD.setMsgMaskVisible(!0), GUD.showClickMsg("11111111111"), GUD.hideMsg(), GUD.setMaskVisible(!0), GUD.click("PanelMain.btnQuest"), GUD.close()])
	}
	class mgrGuide extends _mgrBase {
		static onload() {
			this.guideData = FileRecord.getData("key_guide_data") || {
				steps: {},
				unlocks: {},
				skipAll: this.bSkipGuide
			}, this.registerMsg({
				[BASE_MSG.QUEST_STATE_CHANGE]: this.onMsgQuestStateChange.bind(this)
			})
		}
		static start() {
			initGuideScript()
		}
		static saveData() {
			FileRecord.setData("key_guide_data", this.guideData)
		}
		static onMsgQuestStateChange(t) {}
		static isGuided(t, e) {
			let a = this.guideData.steps[t];
			return null != a && !(a < e)
		}
		static get isGuiding() {
			return null != this.curGuideId
		}
		static getCurGuideId() {
			return this.curGuideId
		}
		static dispatchGuide(t, e) {
			if (!t) return Logger.error("无效guideid"), !1;
			if (GuideScript[t]) {
				if (this.isGuiding) return Logger.isDebugLevel && Logger.debug(`触发[${t}]失败，正在引导[${this.curGuideId}]`), !1;
				let a = this.guideData.steps[t];
				if (null == a ? a = 0 : a++, this.isGuided(t, a)) return !1;
				if (this.guideData.skipAll) return void console.log("跳过引导:", t);
				let i = GuideScript[t][a];
				if (i) return Logger.isDebugLevel && Logger.debug(`触发引导:${t}, ${a}`), this.curGuideId = t, this.curGuideIndex = a, _G.isGuiding = !0, mgrPanel.openPanel(UI_NAME.PanelGuide, {
					script: i,
					context: e
				}), !0
			}
			return !1
		}
		static sendMsgKey(t) {
			_G.isGuiding && _G.sendMsg("GUD_COMPLETE_KEY", t)
		}
		static finish(t) {
			Logger.isDebugLevel && Logger.debug(`引导结束:${this.curGuideId}`), t && this.curGuideId && this.saveGuideStep(this.curGuideId, this.curGuideIndex), this.curGuideId = null, _G.isGuiding = !1
		}
		static saveGuideStep(t, e) {
			if (!this.isGuided(t, e)) {
				let a = this.guideData.steps;
				null == a[t] ? 0 == e && (a[t] = 0) : a[t] + 1 == e && (a[t] = e), this.saveData()
			}
		}
		static registerGuideNode(t, e, a = !1) {
			a && !_G.isGuiding || (this.bindedGuideNode[t] = e, this.sendMsgKey(t))
		}
		static unregisterGuideNode(t) {
			delete this.bindedGuideNode[t]
		}
		static getRegisterNode(t) {
			let e = this.bindedGuideNode[t];
			return e && !e.destroyed ? e : null
		}
		static skipAll() {
			this.guideData.skipAll = !0, this.saveData(), _G.sendMsg("GUIDE_SKIP"), _G.sendMsg("GUIDE_ALL_FINISH")
		}
		static removeGuide(t) {
			let e = this.guideData.steps[t];
			e ? this.guideData.steps[t] = e - 1 : delete this.guideData.steps[t]
		}
	}
	mgrGuide.curGuideId = null, mgrGuide.curGuideIndex = 0, mgrGuide.bSkipGuide = !1, mgrGuide.bindedGuideNode = Object.create(null);
	class RoomPartItem extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/RoomPartItem.json", this._exportNodeInfo = {
				cc_icon: "Laya.Sprite",
				cc_used: "Laya.Sprite",
				cc_lock: "Laya.Sprite",
				cc_tag1: "Laya.Sprite",
				cc_tag2: "Laya.Sprite",
				cc_stars: "UIHVLayout",
				cc_adv: "Laya.Sprite",
				cc_spritetest: "Laya.Sprite",
				cc_tuijian: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this)), this.registerMsg({
				UI_SELECT_PART: this.onSelectPart.bind(this),
				PAINT_FINISH: this.onMsgPaintFinish.bind(this),
				UPDATE_UNUSED: this.onMsgUpdateUnused.bind(this)
			}), this.startProcMsg(), this.used.visible = !1, mgrI18n.trySetI18nImage(this.spritetest, "pnl_room_02.png"), mgrI18n.trySetI18nImage(this.tuijian, "pnl_room_03.png")
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onSelectPart(t) {
			this.updateState(t)
		}
		onMsgPaintFinish(t) {
			t == this.partId && (_G.sendMsg("PLAY_ZANTONG_ANIM"), 1 == this.state && _G.sendMsg("REMOVE_BRUSH"), this.used.visible = !0, this.state = 0, _G.sendMsg("SET_PART", this))
		}
		onMsgUpdateUnused() {
			this.menu && 2 == this.state && this.menu.data.defaultParts[this.partDb.gid] == this.partId && (this.used.visible = !0, this.state = 0)
		}
		setData(t) {
			if (!this.callable) return void this.safeCall(this.setData, t);
			this.menu = t;
			let e = t.data,
				a = e.partId;
			this.partId = a;
			let i = db.get_item_db(a);
			this.partDb = i, this.icon.loadImage(i.icon), this.lock.visible = !e.owned, this.tuijian.visible = e.bTuiJian, this.resetState(), UiHelper.loadTagIconWithPart(a, this.tag1, this.tag2), UiHelper.setStars(this.stars, i.quality, 5), _G.isGuiding && ("18024" == a ? mgrGuide.registerGuideNode(GUD_REG_NODE.PANELROOM_PART_18024, this.resNode) : "19011" == a ? mgrGuide.registerGuideNode(GUD_REG_NODE.PANELROOM_PART_19011, this.resNode) : "23003" == a && mgrGuide.registerGuideNode(GUD_REG_NODE.PANELROOM_PART_23003, this.resNode))
		}
		resetState() {
			this.menu && (1 == this.state && _G.sendMsg("REMOVE_BRUSH"), this.used.visible = this.menu.data.parts[this.partDb.gid] == this.partId, this.state = this.used.visible ? 0 : 2, this.adv.visible = !this.menu.data.owned && this.menu.data.bAdv)
		}
		updateState(t) {
			let e = this.menu;
			if (e)
				if (this.partId == t) switch (this.state) {
					case 0:
						e.data.defaultParts[this.partDb.gid] == this.partId || (this.used.visible = !1, this.state = 2, _G.sendMsg("REMOVE_PART", this), Laya.timer.callLater(this, function() {
							_G.sendMsg("UPDATE_UNUSED")
						}));
						break;
					case 1:
						e.data.defaultParts[this.partDb.gid] == this.partId || (this.used.visible = !1, this.state = 2, _G.sendMsg("REMOVE_BRUSH"));
						break;
					case 2:
						db.get_part_type_db(this.partDb.gid).paintable ? (this.used.visible = !0, this.state = 1, _G.sendMsg("SET_BRUSH", this)) : (this.used.visible = !0, this.state = 0, _G.sendMsg("SET_PART", this)), this.adv.visible = !1, this.lock.visible = !1
				} else switch (this.state) {
					case 0:
					case 1:
						this.used.visible = !1, this.state = 2
				}
		}
		onClick() {
			let t = this.menu;
			if (t) {
				let e = t.data;
				e.owned ? _G.sendMsg("UI_SELECT_PART", this.partId) : e.bAdv ? (mgrAdv.statisVideoClick("try_part"), mgrAdv.checkActive("try_part") ? mgrAdv.dispatchAdv("try_part", this.partId, !0) : mgrAlert.alertText(mgrI18n.getText("roomPartItem.1"))) : mgrAlert.alertText(mgrI18n.getText("roomPartItem.2"))
			}
		}
	}
	class RoomMenuItem extends ViewBase {
		constructor() {
			super(), this.create()
		}
		create() {
			let t = (new Laya.Sprite).loadImage("res/ui/pnl_room/toggle.png");
			this.icon = t.addChild((new Laya.Sprite).pos(10, 14, !0)), this.focus = t.addChild((new Laya.Sprite).loadImage("res/ui/pnl_room/toggle_on.png")), this.gou = t.addChild(new Laya.Sprite).loadImage("res/ui/pnl_common/gou.png").pos(60, 0), this.createFromNode(t)
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this)), this.registerMsg({
				UI_SELECT_MENU: this.onMsgSelectMenu.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose(), RoomMenuItem.selectType = null
		}
		onMsgSelectMenu(t) {
			t != this.menu && this.focus.visible && (this.focus.visible = !1)
		}
		setData(t) {
			this.menu = t;
			let e = t.data.type;
			this.partType = e;
			let a = db.get_part_type_db(e);
			this.icon.loadImage(a.icon), this.focus.visible = e == RoomMenuItem.selectType, _G.isGuiding && (2 == e ? mgrGuide.registerGuideNode(GUD_REG_NODE.PANELROOM_YANYING, this.resNode) : 5 == e && mgrGuide.registerGuideNode(GUD_REG_NODE.PANELROOM_CHUNCAI, this.resNode))
		}
		updateWearState(t) {
			this.gou.visible = t
		}
		onClick() {
			this.menu && (this.focus.visible = !0, RoomMenuItem.selectType = this.menu.data.type, _G.sendMsg("UI_SELECT_MENU", this.menu))
		}
	}
	class NestedMenu {
		constructor(t, e) {
			this.parent = null, this.children = [], this.name = t, this.data = e
		}
		addMenu(t, e) {
			let a = new NestedMenu(t, e);
			return a.parent = this, this.children.push(a), a
		}
		removeAt(t) {
			this.children.splice(t, 1)[0].parent = null
		}
		getMenu(t) {
			for (let e = 0; e < this.children.length; e++)
				if (this.children[e].name == t) return this.children[e];
			return null
		}
		getMenuAt(t) {
			return -1 == t ? this.parent : t >= 0 && t < this.children.length ? this.children[t] : null
		}
		indexOf(t) {
			return this.children.indexOf(t)
		}
		get menuCount() {
			return this.children.length
		}
	}
	class OptPaintPart extends OperateBase {
		constructor() {
			super(...arguments), this._checkTime = 0
		}
		setPaintPart(t) {
			if (t) {
				this.isFinish = !1, OperateBase.renderMask.clear(), this.partDb = db.get_item_db(t), this.setBrush(DbExt.getBrushId(this.partDb));
				let e = this.avatar.getPartByType(this.partDb.gid);
				if (e && e.views[0]) {
					let a = e.views[0],
						i = db.get_model_db(this.partDb.viewList[0]);
					mgrAlert.openResWait(i.resPath, RES_TYPE.TEXTURE2D, e => {
						OperateBase.renderMask && this.partDb && this.partDb.id == t && OperateBase.renderMask.setPaintMaterail(a.depModel, a.viewDb.matIndex, i.resPath)
					})
				}
				this.checkState = 0
			} else this.partDb = null, this.setBrush(null)
		}
		syncCamera() {
			OperateBase.renderMask.syncCamera()
		}
		dispose() {
			this.partDb = null, super.dispose()
		}
		onCreate() {}
		onFinish() {
			_G.sendMsg("PAINT_FINISH", this.partDb.id), this.partDb = null
		}
		onTouchDown() {
			this.checkHold(), this.isTouched = !!this.partDb
		}
		onTouchMove() {
			this.checkArea()
		}
		onTouchUp() {}
		checkArea() {
			if (this.partDb && this._checkTime < Timer.time) {
				this._checkTime += .1;
				let t = OperateBase.renderMask.checkPercent(this.partDb.checkLeft, this.partDb.checkRight);
				if (t == this.checkState) return;
				let e = this.checkState;
				switch (this.checkState = t, t) {
					case 1:
						0 != this.partDb.checkRight && (OperateBase.renderMask.fillMask(!0), this.playLeftEffect()), _G.isGuiding && mgrGuide.sendMsgKey("PAINT_FINISH_L");
						break;
					case 2:
						0 != this.partDb.checkRight && (OperateBase.renderMask.fillMask(!1), this.playRightEffect());
						break;
					case 3:
						this.playFinishEffect(e), this.finish(), _G.isGuiding && mgrGuide.sendMsgKey("PAINT_FINISH_A")
				}
			}
		}
		playLeftEffect() {
			if (this.partDb) {
				let t, e;
				switch (this.partDb.gid) {
					case 0:
						t = _G.canvasWidth / 2 - 90, e = _G.canvasHeight / 2 - 80;
						break;
					case 1:
					case 2:
						t = _G.canvasWidth / 2 - 90, e = _G.canvasHeight / 2 - 60;
						break;
					case 4:
						t = _G.canvasWidth / 2 - 50, e = _G.canvasHeight / 2;
						break;
					case 5:
						return
				}
				mgrAlert.playParticleEffect("104", {
					x: t,
					y: e
				}, 1, .5)
			}
		}
		playRightEffect() {
			if (this.partDb) {
				let t, e;
				switch (this.partDb.gid) {
					case 0:
						t = _G.canvasWidth / 2 + 90, e = _G.canvasHeight / 2 - 80;
						break;
					case 1:
					case 2:
						t = _G.canvasWidth / 2 + 90, e = _G.canvasHeight / 2 - 60;
						break;
					case 4:
						t = _G.canvasWidth / 2 + 50, e = _G.canvasHeight / 2;
						break;
					case 5:
						return
				}
				mgrAlert.playParticleEffect("104", {
					x: t,
					y: e
				}, 1, .5)
			}
		}
		playFinishEffect(t) {
			if (this.partDb) {
				let e, a;
				switch (this.partDb.gid) {
					case 0:
					case 1:
					case 2:
					case 4:
						return void(1 == t ? this.playRightEffect() : 2 == t && this.playLeftEffect());
					case 5:
						e = _G.canvasWidth / 2, a = _G.canvasHeight / 2 + 80
				}
				mgrAlert.playParticleEffect("104", {
					x: e,
					y: a
				}, 1, .5)
			}
		}
	}
	class RoleOperate {
		constructor(t, e, a = !0) {
			this.destroyed = !1, this._enable = !0, this.bTouched = !1, this.bRot = !1, this.rot = 0, this.touchX = 0, this.touchY = 0, this.avatar = e, this.autoRot = a, UiHelper.registerTouchEvent(t, this.onTouchStart.bind(this), this.onTouchMove.bind(this), this.onTouchEnd.bind(this))
		}
		set enable(t) {
			this.destroyed || (this._enable = t, t || this.onTouchEnd())
		}
		get enable() {
			return this._enable
		}
		dispose() {
			this.destroyed = !0, this._enable = !1
		}
		onTouchStart() {
			this._enable && (this.touchX = Laya.stage.mouseX, this.touchY = Laya.stage.mouseY, this.bTouched = !0, this.bRot = !1, this.rot = this.avatar.transform.localRotationEulerY)
		}
		onTouchMove() {
			if (!this._enable) return;
			if (!this.avatar || this.avatar.destroyed) return;
			if (!this.bTouched) return;
			let t = Laya.stage.mouseX,
				e = Laya.stage.mouseY;
			Mathf.distanceSqr2(t - this.touchX, e - this.touchY) > 4 && (this.bRot = !0), this.bRot && (this.rot += (t - this.touchX) / 260 * 360, this.avatar.transform.localRotationEulerY = this.rot % 360), this.touchX = t, this.touchY = e
		}
		onTouchEnd() {
			this.bTouched && (this.bRot || (this.bRot = !1), this.bTouched = !1, this.autoRot && cc.tween(this.avatar.transform, !0).to(.6, {
				localRotationEulerY: 0
			}, cc.OPTION.SINE_IN_OUT).start())
		}
	}
	const KEY_LAST_LEVEL = "KEY_LAST_LEVEL";
	class mgrLevel extends _mgrBase {
		static onload() {
			let t = this.getData();
			if (!t) {
				let e = db.get_level_db_arr();
				t = {};
				let a = 0;
				for (let i = 0, s = e.length; i < s; i++) e[i].gid == a && (t[a++] = {
					index: i,
					bPass: !1
				});
				this.saveData(t);
				for (let t = 0; t < e.length; t++) e[t].unlockGoalId && BaseFacade.mGoal.register(e[t].unlockGoalId)
			}
		}
		static getData() {
			return FileRecord.getData(KEY_LAST_LEVEL)
		}
		static saveData(t) {
			FileRecord.setData(KEY_LAST_LEVEL, t)
		}
		static startLevel(t) {
			this.curLevelIdx = t, this.curLevelDb = db.get_level_db(t)
		}
		static endLevel(t) {
			let e = db.get_level_db(this.curLevelIdx);
			if (e && e.statistics && GameStatistics.statisCommonEvent(e.statistics), t) {
				this.failCount = 0;
				let t = this.getData(),
					a = t[e.gid],
					i = this.getMaxLevelIndex(e.gid),
					s = this.getMinLevelIndex(e.gid);
				BaseFacade.mGoal.commit(ACTION_ID.LEVEL_FINISH, this.curLevelIdx - s + 1, e.gid, 2);
				let n = this.curLevelIdx + 1;
				a.index < n && n <= i ? (a.index = n, this.saveData(t)) : n > i && (a.bPass = !0, this.saveData(t))
			} else this.failCount++, this.failCount
		}
		static getLastLevelData(t = 0) {
			return this.getData()[t]
		}
		static getLastLevel(t = 0) {
			return this.getLastLevelData(t).index
		}
		static setLastLevel(t = 0, e) {
			this.getLastLevelData(t).index = e
		}
		static getMinLevelIndex(t = 0) {
			let e = db.get_level_db_arr();
			for (let a = 0, i = e.length; a < i; a++)
				if (e[a].gid == t) return a;
			return -1
		}
		static getMaxLevelIndex(t = 0) {
			let e = db.get_level_db_arr();
			for (let a = e.length - 1; a >= 0; a--)
				if (e[a].gid == t) return a;
			return -1
		}
		static isUnlock(t) {
			let e = db.get_level_db(t);
			return BaseFacade.mSwitch.check(e.switchId)
		}
		static isGroupUnlock(t = 0) {
			let e = this.getMinLevelIndex(t);
			return this.isUnlock(e)
		}
	}
	mgrLevel.curLevelIdx = null, mgrLevel.curLevelDb = null, mgrLevel.failCount = 0;
	class mgrPvp extends _mgrBase {
		static onload() {
			let t = db.get_pvp_part_award_db_map();
			if (this.allPvpPartAward = Object.keys(t), this.allPvpPartAward.sort((t, e) => Tools.sort_db_by_order(db.get_pvp_part_award_db(t), db.get_pvp_part_award_db(e))), this.pvpData = FileRecord.getData("KEY_PVP"), !this.pvpData) {
				let t = [];
				for (let e = 0; e < 14; e++) {
					let a = mItem.getAllItem(2, 1, e);
					for (let e = 0; e < a.length; e++)
						if (5 == db.get_item_db(a[e]).quality) {
							t.push(a[e]);
							break
						}
				}
				this.pvpData = {
					bJoin: !1,
					winCount: 0,
					star: 1,
					levelStates: [1],
					award: [],
					sucCount: 0,
					rankParts: t
				}, this.saveData(), mgrRank.commit(1, 0);
				for (let t = 0; t < this.allPvpPartAward.length; t++) BaseFacade.mGoal.register(db.get_pvp_part_award_db(this.allPvpPartAward[t]).goalId)
			}
			BaseFacade.mSwitch.dailyActive && (BaseFacade.mItem.setItem("1011", 2), this.saveData())
		}
		static start() {
			BaseFacade.mGoal.commit(ACTION_ID.JIN_JI, 1, void 0, 2)
		}
		static saveData() {
			FileRecord.setData("KEY_PVP", this.pvpData)
		}
		static get isJoin() {
			return this.pvpData.bJoin
		}
		static join() {
			this.pvpData.bJoin = !0, this.saveData()
		}
		static calcRealDuamwei(t) {
			return Math.floor((t - 1) / 5)
		}
		static calcGameDuamwei(t) {
			return Math.min(this.calcRealDuamwei(t), 4)
		}
		static calcGameStar(t) {
			let e = t % 5;
			return 0 == e ? 5 : e
		}
		static get duanwei() {
			return this.calcGameDuamwei(this.totalStar)
		}
		static get star() {
			return this.calcGameStar(this.totalStar)
		}
		static get totalStar() {
			return this.pvpData.star
		}
		static isAwarded(t) {
			return this.pvpData.award[t]
		}
		static hasAward() {
			for (var t = this.totalStar; t > 0; t--)
				if (!this.isAwarded(t)) return !0;
			return !1
		}
		static get curLevelIdx() {
			let t = this.curLevelStates;
			for (let e = 0; e < t.length; e++)
				if (1 == t[e]) return e;
			return -1
		}
		static get curLevelDb() {
			return db.get_pvp_db(this.duanwei, this.curLevelIdx)
		}
		static get curLevels() {
			let t = this.duanwei;
			return db.get_pvp_db_map()[t]
		}
		static get curLevelStates() {
			return this.pvpData.levelStates
		}
		static randomPlayer() {
			let t = this.randomParts(this.duanwei, this.curLevelIdx);
			this.otherData = {
				parts: t,
				name: mgrRank.getRandomName(),
				headIdx: Mathf.random(5) - 1,
				declare: mgrI18n.getText("game_cnf.3")[Mathf.random(db.game_cnf.pvp_texts.length) - 1]
			}
		}
		static randomParts(t, e) {
			let a = db.get_pvp_db(t, e),
				i = {
					0: !0,
					8: !0,
					12: !0,
					1: !0
				},
				s = a.score,
				n = [];

			function randPart(t) {
				let e = mItem.getAllItem(2, 1, t),
					i = e.length,
					o = Mathf.random(i);
				for (var r = 0; r < i; r++) {
					var l = (r + o) % i,
						c = db.get_item_db(e[l]);
					if (c.quality >= a.qualityMin && c.quality <= a.qualityMax) {
						n.push(c.id), s -= mgrPart.calcPartScore(c.id, a);
						break
					}
				}
			}
			Tools.forEachMap(i, function(t, e) {
				randPart(parseInt(t))
			});
			let o = Mathf.random(13);
			for (var r = 0; r < 13 && !(s <= 0); r++) {
				var l = (r + o) % 13;
				i[l] || randPart(l)
			}
			return n = mgrPart.checkDefaultParts(n)
		}
		static get rankParts() {
			return this.pvpData.rankParts
		}
		static get curFreeTicket() {
			return BaseFacade.mItem.getItemCount("1011")
		}
		static get curTicket() {
			let t = 0;
			return mgrAdv.checkActive("pvp_count") && (t = mgrAdv.getLeftCount("pvp_count")), this.curFreeTicket + t
		}
		static startPvp() {
			this.saveData()
		}
		static finishPvp(t) {
			let e = this.curLevelStates,
				a = this.curLevelIdx;
			e[a] = t ? 2 : 3, e[a + 1] = 1;
			let i = 0;
			for (let t = 0; t < e.length; t++) 2 == e[t] && i++;
			let s = this.duanwei;
			i >= 5 ? (this.pvpData.star += 5, this.pvpData.levelStates = [1]) : e.length > 9 && (this.pvpData.levelStates = [1]);
			let n = this.duanwei,
				o = n + 1;
			return t ? (this.pvpData.sucCount++, this.pvpData.winCount++, BaseFacade.mGoal.commit(ACTION_ID.PVP_SUC, 1, o), BaseFacade.mGoal.commit(ACTION_ID.PVP_ALWAYS_SUC, this.pvpData.sucCount, o, 2), this.getWinAward()) : this.pvpData.sucCount = 0, mgrPvp.randomPlayer(), this.saveData(), BaseFacade.mGoal.commit(ACTION_ID.JIN_JI, o, void 0, 2), mgrRank.commit(this.pvpData.star, 0), _G.sendMsg("PVP_STAR_UPDATE"), n > s
		}
		static getWinAward() {
			let t = db.get_pvp_base_award_db(this.duanwei);
			Laya.timer.once(2e3, this, function() {
				mgrAlert.addAndAlertItems(t.items, 32)
			})
		}
		static getPartFrom(t) {
			let e = db.get_pvp_part_award_db(t);
			if (!BaseFacade.mGoal.isDone(e.goalId)) {
				return mgrI18n.getText(db.get_goal_db(e.goalId).tlite)
			}
			return null
		}
		static get isAllPartsGetted() {
			for (let t = this.allPvpPartAward.length - 1; t >= 0; t--)
				if (!BaseFacade.mItem.isOwned(this.allPvpPartAward[t])) return !1;
			return !0
		}
		static openPanelPvpAward() {
			mgrAlert.openPanelLoading(UI_NAME.PanelPvpReward)
		}
		static isPvpAwardCanReceive() {
			let t = !1;
			for (let e = 0; e < this.allPvpPartAward.length; e++) {
				let a = this.allPvpPartAward[e];
				if (!BaseFacade.mItem.isOwned(a) && !mgrPvp.getPartFrom(a)) {
					t = !0;
					break
				}
			}
			return t
		}
	}
	mgrPvp.nextChangeTime = 0;
	class PanelPvpOverReady extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = ""
		}
		static openPanel(t, e) {
			let a = new ResLoader;
			a.add("res/ui/bg/pvp_over1.jpg", RES_TYPE.TEXTURE2D), a.add("res/ui/bg/pvp_over2.jpg", RES_TYPE.TEXTURE2D), mgrAlert.openWait(a, () => {
				mgrPanel.openPanelWithSingleton(PanelPvpOverReady, t, e)
			})
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), this.createFromNode(e)
		}
		buildUi() {
			this.init3D()
		}
		dispose() {
			this.avatar && this.avatar.destroy(), super.dispose(), this.context && this.context.onFinish && this.context.onFinish()
		}
		init3D() {
			this.createScene3DBack(0, 60), this.camera.transform.localPosition = new Laya.Vector3(0, 1.45, .75), this.camera.transform.localRotationEuler = new Laya.Vector3(-3, 0, 0), this.avatar = new RoleAvatar(mgrPvp.myParts), this.scene3DBack.addChild(this.avatar), this.bgPlan = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createPlane(2.16, 3.6, 10, 10)), this.bgPlan.transform.localPositionZ = -3, this.bgPlan.transform.localRotationEulerX = 90, this.camera.addChild(this.bgPlan);
			let t = mgrRes.tryLoadRes("res/ui/bg/pvp_over2.jpg");
			var e = new Laya.UnlitMaterial;
			e.albedoTexture = t, this.bgPlan.meshRenderer.sharedMaterial = e, this.resNode.visible = !1, this.avatar.playAnimation("zbs-xuanze0" + Mathf.random(3), !0), this.scheduleOnce(.1, () => {
				let a = UiHelper.screenShot(this.camera, _G.canvasWidth, _G.canvasHeight),
					i = Laya.Texture.create(a, 0, 0, _G.canvasWidth, _G.canvasHeight);
				t = mgrRes.tryLoadRes("res/ui/bg/pvp_over1.jpg"), (e = new Laya.UnlitMaterial).albedoTexture = t, this.bgPlan.meshRenderer.sharedMaterial = e, this.avatar.setParts(mgrPvp.otherData.parts, !1, null, !0), this.avatar.playAnimation("zbs-xuanze0" + Mathf.random(3), !0), this.scheduleOnce(.1, () => {
					let t = UiHelper.screenShot(this.camera, _G.canvasWidth, _G.canvasHeight),
						e = Laya.Texture.create(t, 0, 0, _G.canvasWidth, _G.canvasHeight);
					this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelPvpOver, {
						text: this.context.text,
						selfTex: i,
						otherTex: e
					})
				})
			})
		}
	}
	var ROOM_TYPE;
	let _nestedMenu;

	function _init_menu(t) {
		if (_nestedMenu) return _nestedMenu;

		function addPartsTo(t, e) {
			let a = mItem.getAllItem(2, 1, t);
			a.sort(sort_item_id_by_order);
			for (let t = 0; t < a.length; t++) e.addMenu(a[t], {
				partId: a[t]
			})
		}
		let e = new NestedMenu("root");
		if (t) {
			for (let a = 0; a < t.length; a++) {
				let i = t[a],
					s = db.get_part_type_db(i);
				addPartsTo(i, e.addMenu(s.name, {
					type: i
				}))
			}
			return e
		}
		for (let t = 0; t <= 14; t++) {
			let a = db.get_part_type_db(t);
			addPartsTo(t, e.addMenu(a.name, {
				type: t
			}))
		}
		return _nestedMenu = e
	}! function(t) {
		t[t.NORMAL = 0] = "NORMAL", t[t.LEVEL = 1] = "LEVEL", t[t.PVP = 2] = "PVP", t[t.SZZ = 3] = "SZZ"
	}(ROOM_TYPE || (ROOM_TYPE = {}));
	class PanelRoom extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelRoom.json", this._exportNodeInfo = {
				cc_touchNode: "Laya.Box",
				cc_topNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_btnBack: "UIButton",
				cc_scoreNode: "Laya.Sprite",
				cc_barScore: "UIBarMask",
				cc_tag1: "Laya.Sprite",
				cc_tag2: "Laya.Sprite",
				cc_scoreLabel: "Laya.Label",
				cc_topRightNode: "Laya.Image",
				cc_buttonShopLvup: "UIButton",
				cc_buttonShop: "UIButton",
				cc_buttonColorEggClock: "UIButton",
				cc_leftNode: "Laya.Sprite",
				cc_btnReset: "UIButton",
				cc_btnOk: "UIButton",
				cc_rightNode: "Laya.Sprite",
				cc_brushAnimNode: "Laya.Sprite",
				cc_brushIcon: "Laya.Sprite",
				cc_brushHead: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_menuBg: "Laya.Sprite",
				cc_scrollMenu: "ReuseScrollList",
				cc_scrollBg: "Laya.Image",
				cc_scrollPart: "ReuseScrollList",
				cc_lockToucNode: "Laya.Box",
				cc_buttonEmpty1: "UIButton",
				cc_buttonEmpty2: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_room", ""), this.curTryParts = Object.create(null), this.originPars = null, this.wearParts = null, this.bFaceAnim = !1, this.bLeft = !1, this.resetFlag = {}, this._advCount = 0
		}
		addPreloadRes(t) {
			let e = this.context.parts;
			mgrPart.addPartResList(e, t, !0)
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonShopLvup.node, "pnl_main_22.png"), this.buttonShop.node.visible = !1, this.lockToucNode.visible = mgrGuide.dispatchGuide(GUD_EVENT.ENTER_ROOM), this.topNode.y = -200, this.topLeftNode.x = -120, this.topRightNode.x = 150, this.leftNode.x = -120, this.rightNode.x = 120, this.bottomNode.y = 360, this.scrollMenu.node.y = 240, this.scrollPart.onItemCreate = function() {
				return new RoomPartItem
			}, this.scrollPart.onItemChange = ((t, e) => {
				t.setData(this.subMenu.getMenuAt(e))
			}), this.scrollMenu.onItemCreate = function() {
				return new RoomMenuItem
			}, this.scrollMenu.onItemChange = ((t, e) => {
				let a = this.curMenu.getMenuAt(e);
				t.setData(a), t.updateWearState(this.checkPartTypeUsed(t.partType))
			});
			let t = _G.canvasFitWidth - 576;
			this.scrollBg.width += t, this.scrollBg.x -= t / 2, this.scrollPart.width = this.scrollBg.width - 40, this.scrollMenu.width = _G.canvasFitWidth, this.scrollMenu.node.x = (768 - _G.canvasFitWidth) / 2, this.roomType = this.context.type;
			let e = this.context.parts;
			if (this.roomType == ROOM_TYPE.NORMAL && e) {
				mgrGame.tryOpenPanelRankVideoTips(2), e = Tools.deepCopy(mgrPart.partsWear);
				for (const t in e) {
					let a = e[t];
					a && (BaseFacade.mItem.getItemCount(a) <= 0 && (console.log("PanelRoom.buildUi 自由换装模式，移除未拥有部件", a), delete e[t]))
				}
			}
			if (e) {
				let t = {};
				for (const a in e) {
					t[db.get_item_db(e[a]).gid] = e[a]
				}
				e = t
			} else e = mgrPart.partsWear;
			this.wearParts = Tools.deepCopy(e), this.originPars = mgrPart.defaultParts, this.lastAdvActive = this.checkAdv(), this.lastAdvActive && mgrAdv.statisVideoShow("try_part"), this.fillTag(), this.context.data && this.context.data.room ? (this.room = this.context.data.room, this.onSceneLoaded()) : (this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))), this.checkColorEggClock(), this.onMsgCopChange(), this.registerMsg({
				UI_SELECT_MENU: this.onMsgSelectMenu.bind(this),
				SET_PART: this.onMsgSetPart.bind(this),
				REMOVE_PART: this.onMSgRemovePart.bind(this),
				SET_BRUSH: this.onMsgSetBrush.bind(this),
				REMOVE_BRUSH: this.onMsgRemoveBrush.bind(this),
				CLOSE_ROOM: this.close.bind(this),
				PLAY_ZANTONG_ANIM: this.onMsgPlayZantongAnim.bind(this),
				GM_LEVEL_SUC: this.onMsgGmLevelSuc.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this)
			}), this.startProcMsg(), mgrSdk.tryStartRecord()
		}
		dispose() {
			this.stopProcMsg(), this.operatePaint && (this.operatePaint.dispose(), this.operatePaint = null), this.cleawrEffectRoot(), this.clearShexiangji(), Laya.stage.offAllCaller(this), this.avatar && this.avatar.destroy(), this.room && this.room.dispose(), this.scrollPart && this.scrollPart.clearAllItems(), this.scrollMenu && this.scrollMenu.clearAllItems(), this.instOrBanner.dispose(), super.dispose(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELROOM_BTNOK)
		}
		regGuide() {
			mgrGuide.registerGuideNode(GUD_REG_NODE.PANELROOM_BTNOK, this.btnOk.node)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		close(t) {
			switch (this.stopProcMsg(), super.close(t), this.roomType) {
				case ROOM_TYPE.NORMAL:
					GameStatistics.statisOnStageEnd(7502);
					break;
				case ROOM_TYPE.PVP:
				case ROOM_TYPE.LEVEL:
				case ROOM_TYPE.SZZ:
			}
		}
		initTouch() {
			this.brushIcon.visible = !1, this.roleOpt = new RoleOperate(this.touchNode, this.avatar);
			let t = () => {
				this.roleOpt.enable = !0, this.operatePaint && this.operatePaint.touchUp(), _G.isGuiding || (this.lockToucNode.visible = !1), this.checkUpAnim()
			};
			UiHelper.registerTouchEvent(this.brushIcon, t => {
				this.roleOpt.enable = !1, this.operatePaint && (this.brushDb ? this.operatePaint.refreshBrushOffset(this.brushIcon) : this.operatePaint.refreshBrushOffset(null), this.operatePaint.touchDown(), t.stopPropagation(), this.checkDownAnim(), _G.isGuiding ? mgrGuide.sendMsgKey("TOUCH_DOWN_BRUSH") : this.lockToucNode.visible = !0)
			}, () => {
				this.operatePaint && (this.operatePaint.touchMove(), this.checkMoveAnim())
			}, t), Laya.stage.on(Laya.Event.MOUSE_UP, this, t), this.resNode.on(Laya.Event.MOUSE_OUT, this, () => {
				let e = Laya.stage.mouseX,
					a = Laya.stage.mouseY;
				e > 10 && e < UIRoot.canvasWidth - 10 && a > 50 && a < UIRoot.canvasHeight - 50 || t()
			})
		}
		checkDownAnim() {
			let t = this.subMenu.data.type,
				e = db.get_part_type_db(t);
			if (0 == e.cameraIdx && (this.bFaceAnim = !(!e.leftAnim.length && !e.rightAnim.length), this.bFaceAnim)) {
				this.bLeft = !1;
				let t = e.leftAnim;
				this.avatar.playBodyAnim(t[0], .1, !1), this.avatar.playFaceAnim(t[1], .1, !0)
			}
		}
		checkMoveAnim() {
			if (this.bFaceAnim) {
				let t = Laya.stage.mouseX + this.operatePaint.getBrushOffset().x;
				if (Math.abs(t - _G.canvasWidth / 2) > 60) {
					let e = t <= _G.canvasWidth / 2,
						a = this.subMenu.data.type,
						i = db.get_part_type_db(a),
						s = e ? i.leftAnim : i.rightAnim;
					0 == s.length && (s = i.leftAnim), s.length && this.avatar.lastBodyAnim != s[0] && (this.avatar.playBodyAnim(s[0], .1, !1), this.avatar.playFaceAnim(s[1], .1, !0))
				}
			}
		}
		checkUpAnim() {
			this.bFaceAnim && (this.bFaceAnim = !1, this.avatar.playAnimation(MODEL_ANIM.HUFU_IDLE))
		}
		onMsgSelectMenu(t) {
			this.subMenu != t && (this.operatePaint && this.operatePaint.setPaintPart(null), this.setBrush(null), this.fillMenu(this.curMenu.indexOf(t)))
		}
		onMsgSetPart(t) {
			this.setPart(t.partId)
		}
		onMSgRemovePart(t) {
			this.removePart(t.partId)
		}
		onMsgSetBrush(t) {
			this.setBrush(t.partId)
		}
		onMsgRemoveBrush() {
			this.setBrush(null)
		}
		onMsgPlayZantongAnim() {
			this.bFaceAnim && (this.bFaceAnim = !1, this.avatar.playAnimation("hufu-zantong0" + Mathf.random(2)), _G.isGuiding || (this.lockToucNode.visible = !1))
		}
		onMsgGmLevelSuc() {
			let t = db.get_level_db(mgrLevel.getLastLevel());
			mgrPart.calcLevelScore(this.wearParts, t), mgrPart.partsLevel = this.wearParts, mgrPart.partScoreResult.suc = !0, mgrLevel.endLevel(mgrPart.partScoreResult.suc), mgrAlert.openPanelLoading(UI_NAME.PanelOver), BaseFacade.mItem.subItem("1010", 1, null)
		}
		onMsgAdvShowSuc(t) {
			"try_part" == t.advName && t.params && (this._advCount++, this.tryPart(t.params))
		}
		onMsgCopChange() {}
		fillTag() {
			switch (this.scoreLabel.font = GConfig.bmf_score, this.roomType) {
				case ROOM_TYPE.NORMAL:
					this.scoreNode.visible = !1, GameStatistics.statisCommonEventOnce(7011), GameStatistics.statisOnStageStart(7502);
					break;
				case ROOM_TYPE.PVP:
					mgrPvp.startPvp(), this.partWeight = mgrPvp.curLevelDb, UiHelper.loadTagIconWithData(mgrPvp.curLevelDb, this.tag1, this.tag2), this.onPartStateChange(), mgrSound.playMusic("bj_002", !0);
					break;
				case ROOM_TYPE.LEVEL:
					mgrLevel.startLevel(mgrLevel.getLastLevel()), this.partWeight = mgrLevel.curLevelDb, UiHelper.loadTagIconWithData(mgrLevel.curLevelDb, this.tag1, this.tag2), this.onPartStateChange();
					break;
				default:
					console.log("未知房间类型:", this.roomType)
			}
		}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.chagneToRoom();
			let t = this.context.data;
			if (t) {
				let e = t.avatar,
					a = t.shexiangji;
				this.avatar = e, this.shexiangji = a;
				let i = new AnimatorFixedPlayer,
					s = db.get_role_contract_db(mgrGame.contractIndex);
				i.addModelAnim(e.baseBody, s.bodyAnimationId), i.addModelAnim(e.baseFace, s.faceAnimationId), i.addModelAnim(a, s.shexiangjiAnimationId), i.addTimeCallback(161 / 180, () => {
					this.operatePaint = new OptPaintPart(this.avatar, this.room.scene, this.room.camera);
					let t = this.shexiangji.findChild("camera");
					this.room.camera.transform.position = t.transform.position, this.room.camera.transform.rotation = t.transform.rotation, this.room.camera.fieldOfView = t.fieldOfView, t.active = !1, this.room.camera.active = !0;
					let e = UiHelper.findAllShurikenParticleSystem(this.shexiangji.findChild("e_sky"));
					for (let t = 0; t < e.length; t++) e[t].stop();
					this.room.cameraIndex = -1, this.room.moveCamerToNear(() => {
						this.room.mapNode.active = !0, this.room.playFadeout(() => {
							UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 1, 1, 1)
						}), this.fillMenu(), this.setUiVisible(!0, 1)
					}, !1)
				}), i.addTimeCallback(1, () => {
					this.cleawrEffectRoot(), this.clearShexiangji()
				}), i.play(), this.effectRoot = new GModel(db.MODEL_DB_ID.come), this.effectRoot.create(), this.effectRoot.callIfLoaded(() => {
					let t = db.get_role_contract_db(mgrGame.contractIndex),
						e = _G.poolManager.get(Particle, t.effectId);
					e.setParent(this.effectRoot.node), e.play(), this.effectCome = e
				}), this.effectRoot.setParent(this.room.root)
			} else this.avatar = new RoleAvatar(this.wearParts), this.room.root.addChild(this.avatar), this.avatar.playIdle(), this.operatePaint = new OptPaintPart(this.avatar, this.room.scene, this.room.camera), this.fillMenu(), this.setUiVisible(!0, 2);
			this.initTouch()
		}
		clearShexiangji() {
			this.shexiangji && (this.shexiangji.dispose(), this.shexiangji = null)
		}
		cleawrEffectRoot() {
			this.effectRoot && (this.effectRoot.dispose(), this.effectRoot = null), this.effectCome && (_G.poolManager.put(this.effectCome), this.effectCome = null)
		}
		resetMenu() {
			this.resetFlag = {}, this.subMenu && (this.lastAdvActive = this.checkAdv(), this.lastAdvActive && mgrAdv.statisVideoShow("try_part"), this.resetPartsMenu(this.subMenu), this.scrollPart.updateList(this.subMenu.data.count))
		}
		resetPartsMenu(t) {
			if (null == t.data.type) return;
			if (this.resetFlag[t.data.type]) return;
			this.resetFlag[t.data.type] = !0;
			let e = BaseFacade.mItem,
				a = this.curTryParts,
				i = this.wearParts,
				s = this.originPars,
				n = this.partWeight;
			if (t.children.forEach(function(t) {
					let o = t.data.partId;
					if (!_G.isGuiding && n) var r = mgrPart.calcPartScore(o, n);
					else r = db.get_item_db(o).quality;
					t.data.score = r, t.data.owned = e.isOwned(o) || a[o], t.data.parts = i, t.data.defaultParts = s, t.data.bAdv = !1, t.data.bTuiJian = !1
				}), this.lastAdvActive && this.checkAdv()) switch (this.roomType) {
				case ROOM_TYPE.LEVEL:
				case ROOM_TYPE.PVP:
					this.randomMatchParts(t);
					break;
				case ROOM_TYPE.SZZ:
				case ROOM_TYPE.NORMAL:
					this.randomHighQualityParts(t)
			}
			this.sortMenuItem(t), this.resetMenuPartCount(t)
		}
		randomMatchParts(t) {
			Mathf.shuffle(t.children);
			let e = 3,
				a = this.getTuiJianMenu(t);
			a.data.bTuiJian = !0, a.data.owned || (a.data.bAdv = !0, e = 2), t.children.some(function(t) {
				return t.data.owned || t == a || (e--, t.data.bAdv = !0), e <= 0
			})
		}
		getTuiJianMenu(t) {
			let e, a = 0;
			return t.children.forEach(function(t) {
				a < t.data.score && (a = t.data.score, e = t)
			}), e
		}
		randomHighQualityParts(t) {
			Mathf.shuffle(t.children);
			let e = 3;
			t.children.some(function(t) {
				if (!t.data.owned) {
					5 == db.get_item_db(t.data.partId).quality && (e--, t.data.bAdv = !0)
				}
				return e <= 0
			})
		}
		sortMenuItem(t) {
			t.children.sort(function(t, e) {
				let a = t.data.owned;
				return a == e.data.owned ? _G.isGuiding ? t.data.score - e.data.score : e.data.score - t.data.score : a ? -1 : 1
			});
			let e = t.menuCount,
				a = 0;
			for (var i = 0; i < e; i++) {
				let e = t.children[i];
				e.data.bAdv && (t.children.splice(i, 1), t.children.splice(a++, 0, e))
			}
		}
		resetMenuPartCount(t) {
			let e = 0;
			t.children.forEach(function(t) {
				e += t.data.owned || t.data.bAdv ? 1 : 0
			}), t.data.count = e
		}
		clearAllAdv() {
			let t = t => {
				for (let e = 2; e >= 0; e--) {
					let a = t.getMenuAt(e);
					a.data.bAdv && (a.data.bAdv = !1, t.data.count--, t.children.splice(e, 1), t.children.push(a))
				}
				this.resetMenuPartCount(t)
			};
			for (let e = 0; e < this.curMenu.menuCount; e++) t(this.curMenu.getMenuAt(e))
		}
		checkPartTypeUsed(t) {
			if (!this.curMenu) return !1;
			let e = this.curMenu.getMenuAt(t);
			if (!e) return !1;
			let a = this.wearParts[t];
			if (!a) return !1;
			for (var i = 0; i < e.menuCount; i++) {
				if (e.getMenuAt(i).data.partId == a) return !0
			}
			return !1
		}
		fillMenu(t = -1) {
			null == this.curMenu ? (RoomMenuItem.selectType = 0, this.curMenu = _init_menu(), this.subMenu = this.curMenu.getMenuAt(0), this.resetPartsMenu(this.subMenu), this.scrollMenu.updateList(this.curMenu.menuCount), this.scrollPart.updateList(this.subMenu.data.count)) : (this.scrollPart.isAutoScrolling && this.scrollPart.stopAutoScroll(), this.subMenu = this.curMenu.getMenuAt(t), this.resetPartsMenu(this.subMenu), this.scrollPart.updateList(this.subMenu.data.count, 0));
			let e = this.subMenu.data.type;
			switch (db.get_part_type_db(e).cameraIdx) {
				case 0:
					this.room.moveCamerToNear(() => {
						this.operatePaint.syncCamera(), this.avatar.playAnimation(MODEL_ANIM.HUFU_IDLE)
					});
					break;
				case 1:
					this.room.moveCamerToMid(() => {
						this.operatePaint.syncCamera(), this.avatar.playIdle()
					});
					break;
				case 2:
					this.room.moveCamerToFar(() => {
						this.operatePaint.syncCamera(), this.avatar.playIdle()
					})
			}
		}
		setBrush(t) {
			if (t) {
				let e = db.get_item_db(t),
					a = db.get_part_type_db(e.gid),
					i = DbExt.getBrushId(e);
				if (a.paintable && i) return this.brushIcon.visible = !0, this.brushDb = db.get_brush_db(i), this.brushIcon.loadImage(this.brushDb.icon), this.brushAnimNode.x = 260, this.brushAnimNode.rotation = 40, cc.tween(this.brushAnimNode, !0).to(.4, {
					x: -39,
					rotation: 0
				}, cc.OPTION.BACK_OUT).start(), this.brushDb.head ? this.brushHead.loadImage(this.brushDb.head) : this.brushHead.texture = null, this.brushDb.holdOffset.length >= 2 && this.brushIcon.getComponent(UIDrag).setOffset(this.brushDb.holdOffset[0], this.brushDb.holdOffset[1]), this.operatePaint.setPaintPart(t), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELROOM_BRUSH, this.brushIcon, !0), !0
			}
			return this.brushIcon.event(Laya.Event.MOUSE_UP), this.brushIcon.visible = !1, this.operatePaint.setPaintPart(null), !1
		}
		setUiVisible(t, e) {
			this._uiVisible !== t && (this._uiVisible = t, t ? this.scheduleOnce(e, () => {
				cc.tween(this.topNode).to(.3, {
					y: 0
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.topLeftNode).to(.3, {
					x: 0
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.topRightNode).to(.3, {
					x: 0
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.leftNode).to(.3, {
					x: 0
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.rightNode).to(.3, {
					x: 0
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.bottomNode).to(.3, {
					y: 0
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.scrollMenu.node).to(.3, {
					y: 68
				}, cc.OPTION.BACK_OUT).start()
			}) : this.scheduleOnce(e, () => {
				cc.tween(this.topNode).to(.3, {
					y: -200
				}, cc.OPTION.SINE_OUT).start(), cc.tween(this.topLeftNode).to(.3, {
					x: -120
				}, cc.OPTION.SINE_OUT).start(), cc.tween(this.topRightNode).to(.3, {
					x: 150
				}, cc.OPTION.SINE_OUT).start(), cc.tween(this.leftNode).to(.3, {
					x: -120
				}, cc.OPTION.SINE_OUT).start(), cc.tween(this.rightNode).to(.3, {
					x: 120
				}, cc.OPTION.SINE_OUT).start(), cc.tween(this.bottomNode).to(.3, {
					y: 200
				}, cc.OPTION.SINE_OUT).start(), cc.tween(this.scrollMenu.node).to(.3, {
					y: 238
				}, cc.OPTION.SINE_OUT).start()
			}))
		}
		setPart(t) {
			if (this.avatar.isInit) {
				let e = db.get_item_db(t);
				switch (this.avatar.setPart(t, !1), this.wearParts[e.gid] = t, this.onPartStateChange(), e.gid) {
					case 6:
					case 3:
						mgrAlert.playParticleEffect("104", {
							x: _G.canvasWidth / 2,
							y: _G.canvasHeight / 2 - 60
						}, 1, .5)
				}
				switch (this.roomType) {
					case ROOM_TYPE.LEVEL:
				}
			}
		}
		removePart(t) {
			if (this.avatar.isInit) {
				let e = db.get_item_db(t),
					a = this.originPars[e.gid];
				a ? this.setPart(a) : (this.avatar.removePart(t), delete this.wearParts[e.gid], this.onPartStateChange())
			}
		}
		tryPart(t) {
			if (this.subMenu) {
				let e = this.subMenu.getMenu(t);
				if (e) {
					this.curTryParts[t] = !0, e.data.owned = !0, e.data.bAdv = !1, !this.checkAdv() && this.lastAdvActive && (this.lastAdvActive = !1, this.clearAllAdv(), this.scrollPart.updateList(this.subMenu.data.count)), _G.sendMsg("UI_SELECT_PART", t)
				}
			}
		}
		onPartStateChange() {
			this.refreshScore(), this.scrollMenu.foreachItems(t => {
				t.updateWearState(this.checkPartTypeUsed(t.partType))
			})
		}
		refreshScore() {
			switch (this.roomType) {
				case ROOM_TYPE.NORMAL:
					break;
				case ROOM_TYPE.PVP:
					var t = mgrPart.calcLevelScore(this.wearParts, mgrPvp.curLevelDb);
					this.scoreLabel.text = (0 | t.totalScore) + "", this.barScore.progress = t.totalScore / mgrPvp.curLevelDb.score;
					break;
				case ROOM_TYPE.LEVEL:
					t = mgrPart.calcLevelScore(this.wearParts, mgrLevel.curLevelDb);
					this.scoreLabel.text = (0 | t.totalScore) + "", this.barScore.progress = t.totalScore / mgrLevel.curLevelDb.score
			}
		}
		checkAdv() {
			return !_G.isGuiding && (!(this._advCount >= 3) && mgrAdv.getActive("try_part"))
		}
		commitParts() {
			let t = this.wearParts;
			switch (this.roomType) {
				case ROOM_TYPE.NORMAL:
					mgrPart.setWearPart(t), mgrSdk.resetRecordState(), mgrGame.tryEnterMain(this.close.bind(this)), GameStatistics.statisCommonEventOnce(7012);
					break;
				case ROOM_TYPE.LEVEL:
					mgrAlert.openPanelLoading(UI_NAME.PanelOver, {
						fOnClick: e => {
							let a = db.get_level_db(mgrLevel.getLastLevel());
							if (mgrPart.calcLevelScore(t, a), mgrPart.partsLevel = t, e) {
								let t = mgrLevel.curLevelDb;
								mgrPart.partScoreResult.totalScore += 10, mgrPart.partScoreResult.suc = mgrPart.partScoreResult.totalScore >= t.score
							}
							mgrLevel.endLevel(mgrPart.partScoreResult.suc), BaseFacade.mItem.subItem("1010", 1, null)
						}
					});
					break;
				case ROOM_TYPE.SZZ:
					mgrSzz.setMyParts(t), mgrAlert.openPanelLoading(UI_NAME.PanelSzzShow, null, this.close.bind(this)), GameStatistics.statisCommonEvent(7022);
					break;
				case ROOM_TYPE.PVP:
					GameStatistics.statisCommonEvent(6005);
					let e = db.get_pvp_db(mgrPvp.duanwei, mgrPvp.curLevelIdx);
					mgrPvp.myParts = t, mgrPart.calcLevelScore(t, e), PanelPvpOverReady.openPanel({
						text: "",
						onFinish: () => {
							this.close()
						}
					}), BaseFacade.mGoal.commit(ACTION_ID.PVP_FINISH), BaseFacade.mItem.subItem("1011", 1, null)
			}
		}
		checkColorEggClock() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.HUAI_BIAO, EGGS_STEP.FIRST) || (this.buttonColorEggClock.node.visible = !1)
		}
		static getBrushPos() {
			let t = new Laya.Point(100, 100),
				e = mgrPanel.findPanel(PanelRoom);
			return e ? e.brushIcon.localToGlobal(t, !1) : t
		}
		static getZuoMeiMao() {
			let t = new Laya.Point,
				e = mgrPanel.findPanel(PanelRoom);
			if (e) {
				let a = e.avatar.baseFace.findChild("mei_r_03");
				a && UiHelper.worldToScreen(e.room.camera, a.transform.position, t)
			}
			return t
		}
		static getYouMeiMao() {
			let t = new Laya.Point,
				e = mgrPanel.findPanel(PanelRoom);
			if (e) {
				let a = e.avatar.baseFace.findChild("mei_l_03");
				a && UiHelper.worldToScreen(e.room.camera, a.transform.position, t)
			}
			return t
		}
		static getXiaZuiChun() {
			let t = new Laya.Point,
				e = mgrPanel.findPanel(PanelRoom);
			if (e) {
				let a = e.avatar.baseFace.findChild("xzc_m");
				a && UiHelper.worldToScreen(e.room.camera, a.transform.position, t)
			}
			return t
		}
		static set lockRight(t) {
			let e = mgrPanel.findPanel(PanelRoom);
			e && (e.operatePaint.lockRight = t)
		}
		static set lockTouch(t) {
			let e = mgrPanel.findPanel(PanelRoom);
			e && (e.lockToucNode.visible = t)
		}
		static resetMenu() {
			let t = mgrPanel.findPanel(PanelRoom);
			t && t.resetMenu()
		}
		on_click_btnBack() {
			switch (mgrSdk.resetRecordState(), this.roomType) {
				case ROOM_TYPE.NORMAL:
					mgrGame.tryEnterMain(this.close.bind(this));
					break;
				case ROOM_TYPE.LEVEL:
					mgrGame.tryEnterMain(this.close.bind(this)), GameStatistics.statisOnStageEnd(7507);
					let t = mgrLevel.getLastLevel();
					t > 0 && GameStatistics.statisOnStageEnd(12e3 + t, 0, 1);
					break;
				case ROOM_TYPE.SZZ:
					this.close();
					break;
				case ROOM_TYPE.PVP:
					mgrGame.tryEnterMain(this.close.bind(this)), _G.sendMsg("CLOSE_PVP");
					break;
				default:
					this.close()
			}
		}
		on_click_btnReset() {
			if (!this.avatar) return;
			let t = mgrPart.getSelectParts();
			this.avatar.setParts(t, !1, null, !0), this.setBrush(null);
			let e = Object.keys(this.wearParts);
			for (let t = 0; t < e.length; t++) delete this.wearParts[e[t]];
			for (var a in t) this.wearParts[a] = t[a];
			this.onPartStateChange()
		}
		on_click_btnOk() {
			_G.isGuiding ? this.scheduleOnce(.1, this.commitParts) : mgrAlert.alertDialog(mgrI18n.getText("panelRoom.1"), mgrI18n.getText("schoolYearbookItem.2"), this.commitParts.bind(this), function() {}, mgrI18n.getText("panelAdvCostDialog.2"), mgrI18n.getText("panelAdvCostDialog.3"))
		}
		on_click_buttonEmpty1() {}
		on_click_buttonEmpty2() {}
		on_click_buttonShopLvup() {
			mgrAlert.openPanelLoading(UI_NAME.PanelShopLvup)
		}
		on_click_buttonShop() {
			mgrAlert.openPanelLoading(UI_NAME.PanelShop, {
				curToggle: 2
			})
		}
		on_click_buttonColorEggClock() {
			this.buttonColorEggClock.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggClock.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggClock.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.huai_biao)
		}
	}
	class mgrJumpPanel extends _mgrBase {
		static onload() {}
		static jumpTo(t, e, a) {
			let i = this._onOpenBefore.bind(this, e);
			switch (t) {
				case JUMP_PANEL.SKINCARE:
					mgrAlert.openGameLoading(UI_NAME.PanelSkincare, null, i);
					break;
				case JUMP_PANEL.DREAM:
					mgrAlert.openGameLoading(UI_NAME.PanelDream, null, i);
					break;
				case JUMP_PANEL.ENTRUST:
					console.error("mgrJumpPanel.jumpTo 暂未实现跳转:", t);
					break;
				case JUMP_PANEL.PVP:
					mgrAlert.openGameLoading(UI_NAME.PanelPvp, null, i);
					break;
				case JUMP_PANEL.MANG_HE:
					mgrAlert.openGameLoading(UI_NAME.PanelMangHe, null, i);
					break;
				case JUMP_PANEL.INSIDE:
					mgrAlert.openGameLoading(UI_NAME.PanelInside, null, i);
					break;
				case JUMP_PANEL.SWITCH_ROLE:
					console.error("mgrJumpPanel.jumpTo 暂未实现跳转:", t);
					break;
				case JUMP_PANEL.ROLE_TEST:
					mgrAlert.openPanelLoading(UI_NAME.PanelRoleTest, null, i);
					break;
				case JUMP_PANEL.DANCE_DRAW:
					mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, null, i);
					break;
				case JUMP_PANEL.CP_TEST:
					mgrAlert.openPanelLoading(UI_NAME.PanelCpTestPreview, null, i);
					break;
				case JUMP_PANEL.CLASS_ROOM:
					mgrAlert.openPanelLoading(UI_NAME.PanelClassRoom, null, i);
					break;
				case JUMP_PANEL.ROOM:
					mgrPart.openPanelRoom(ROOM_TYPE.NORMAL, null, i);
					break;
				case JUMP_PANEL.OUTSIDE:
					mgrAlert.openGameLoading(UI_NAME.PanelOutside, null, i);
					break;
				case JUMP_PANEL.SZZ:
					mgrAlert.openGameLoading(UI_NAME.PanelSzz, null, i)
			}
		}
		static _onOpenBefore(t) {
			_G.sendMsg("JUMP_PANEL_BEFORE"), mgrPanel.closeLayer(PANEL_LAYER.UI), t && t()
		}
	}
	var COLOR_EGGS_QUEST, EGGS_TYPE, EGGS_STATE, EGGS_STEP;
	! function(t) {
		t.CLICK_BUTTERFLY = "6000", t.GET_FISH = "6001", t.CLEAR_TUYA = "6002", t.HUAI_BIAO = "6010", t.MIAN_JU = "6011", t.MAN_DUO_LA = "6012"
	}(COLOR_EGGS_QUEST || (COLOR_EGGS_QUEST = {})),
	function(t) {
		t[t.CLASS = 0] = "CLASS", t[t.SHOE = 1] = "SHOE"
	}(EGGS_TYPE || (EGGS_TYPE = {})),
	function(t) {
		t[t.NEW = 0] = "NEW", t[t.OPENED = 1] = "OPENED", t[t.AWARD = 2] = "AWARD", t[t.FINISHED = 3] = "FINISHED"
	}(EGGS_STATE || (EGGS_STATE = {})),
	function(t) {
		t[t.FIRST = 0] = "FIRST", t[t.SECOND = 1] = "SECOND", t[t.THIRD = 2] = "THIRD", t[t.FOURTH = 3] = "FOURTH"
	}(EGGS_STEP || (EGGS_STEP = {}));
	class mgrColorEggs extends _mgrBase {
		static onload() {
			this.eggData = FileRecord.getData("egg_data") || {}, this.registerMsg({
				[BASE_MSG.QUEST_STATE_CHANGE]: this.onMsgQuestStateChange.bind(this),
				[BASE_MSG.GOAL_VALUE_CHANGE]: this.onMsgGoalValueChange.bind(this)
			}), Timer.callLoop(1, this.updateLeftTime.bind(this))
		}
		static saveData() {
			FileRecord.setData("egg_data", this.eggData)
		}
		static onMsgQuestStateChange(t) {
			11 == t.questDb.type && t.questDb.gid == EGGS_TYPE.SHOE && this.onShoeColorEggStateChange(t)
		}
		static onMsgGoalValueChange(t) {
			if (t.userData.type != GOAL_TYPE.QUEST) return;
			let e = t.userData.data,
				a = db.get_quest_db(e);
			11 == a.type && a.gid == EGGS_TYPE.SHOE && this.onShoeColorEggStepChange(e, t.commits)
		}
		static getAllQuest(t) {
			return mQuest.getAllQuest(11, t)
		}
		static accept(t) {
			BaseFacade.mQuest.isAccept(t) || BaseFacade.mQuest.accept(t)
		}
		static commit(t, e = !1) {
			let a = BaseFacade.mQuest.commit(t, e);
			return a && mgrAlert.alertItems(a), a
		}
		static getState(t) {
			switch (BaseFacade.mQuest.getState(t)) {
				case QUEST_STATE.NONE:
					return EGGS_STATE.NEW;
				case QUEST_STATE.UPDATABLE:
					return EGGS_STATE.OPENED;
				case QUEST_STATE.COMMITABLE:
					return EGGS_STATE.AWARD;
				case QUEST_STATE.FINISHED:
					return EGGS_STATE.FINISHED;
				case QUEST_STATE.FAIL:
					console.error("彩蛋任务怎么可能失败?!", t)
			}
		}
		static isNew(t) {
			return this.getState(t) == EGGS_STATE.NEW
		}
		static isEnable(t) {
			if (this.isOpened(t)) {
				let e = db.get_color_egg_db(t);
				return Mathf.randomEnable(e.colorEggRate)
			}
			return !1
		}
		static isOpened(t) {
			return this.getState(t) == EGGS_STATE.OPENED
		}
		static isAward(t) {
			return this.getState(t) == EGGS_STATE.AWARD
		}
		static isFinished(t) {
			return this.getState(t) == EGGS_STATE.FINISHED
		}
		static hasAwardEgg(t) {
			let e = this.getAllQuest(t);
			for (let t = 0; t < e.length; t++)
				if (this.isAward(e[t])) return !0;
			switch (t) {
				case EGGS_TYPE.CLASS:
					return !1;
				case EGGS_TYPE.SHOE:
			}
		}
		static isStepEnable(t, e) {
			return !!this.isEnable(t) && BaseFacade.mQuest.getCurValue(t) == e
		}
		static isShoeColorEggEnable() {
			let t = [COLOR_EGGS_QUEST.HUAI_BIAO, COLOR_EGGS_QUEST.MIAN_JU, COLOR_EGGS_QUEST.MAN_DUO_LA];
			for (let e = 0; e < t.length; e++)
				if (!this.isNew(t[e])) return !0;
			return !1
		}
		static startTimer(t) {
			let e = db.get_color_egg_db(t);
			this.eggData[t] = {
				nextTime: Timer.time + e.colorEggGetTime
			}, this.saveData()
		}
		static getLeftTime(t) {
			let e = this.eggData[t];
			return e ? Math.max(0, (e.nextTime || 0) - Timer.time) : 0
		}
		static getTotalTime(t) {
			let e = db.get_color_egg_db(t);
			return e ? e.colorEggGetTime : 0
		}
		static finishColorEgg(t) {
			this.isOpened(t) && BaseFacade.mQuest.finishQuest(t)
		}
		static updateLeftTime() {
			Tools.forEachMap(this.eggData, (t, e) => {
				e.nextTime && e.nextTime <= Timer.time && (delete e.nextTime, this.finishColorEgg(t), this.saveData())
			})
		}
		static onShoeColorEggStepChange(t, e) {
			this.isOpened(t) && (e > 0 && e < 3 ? Timer.callLater(.6, function() {
				mgrAlert.openPanelLoading(UI_NAME.PanelShoeColorEggTip, {
					questId: t,
					stepIdx: e
				})
			}) : 3 == e && (this.startTimer(t), Timer.callLater(.6, function() {
				mgrAlert.openPanelLoading(UI_NAME.PanelColorEggGet, t)
			})))
		}
		static onShoeColorEggStateChange(t) {}
		static tryJumpToColorEgg(t, e) {
			switch (t) {
				case COLOR_EGGS_QUEST.HUAI_BIAO:
					switch (e) {
						case 0:
							mgrJumpPanel.jumpTo(JUMP_PANEL.ROOM);
							break;
						case 1:
							mgrJumpPanel.jumpTo(JUMP_PANEL.MANG_HE);
							break;
						case 2:
							mgrJumpPanel.jumpTo(JUMP_PANEL.PVP)
					}
					break;
				case COLOR_EGGS_QUEST.MIAN_JU:
					switch (e) {
						case 0:
							mgrJumpPanel.jumpTo(JUMP_PANEL.INSIDE);
							break;
						case 1:
							mgrJumpPanel.jumpTo(JUMP_PANEL.OUTSIDE);
							break;
						case 2:
							mgrJumpPanel.jumpTo(JUMP_PANEL.ROLE_TEST)
					}
					break;
				case COLOR_EGGS_QUEST.MAN_DUO_LA:
					switch (e) {
						case 0:
							mgrJumpPanel.jumpTo(JUMP_PANEL.SZZ);
							break;
						case 1:
							mgrJumpPanel.jumpTo(JUMP_PANEL.DREAM);
							break;
						case 2:
							mgrJumpPanel.jumpTo(JUMP_PANEL.CP_TEST)
					}
			}
		}
	}
	let HIT_EFFECT = ["2d/anim_node/68_bubble_lemon/68_bubble_lemon", "2d/anim_node/68_bubble_green/68_bubble_green", "2d/anim_node/68_bubble_blue/68_bubble_blue", "2d/anim_node/68_bubble_purple/68_bubble_purple", "2d/anim_node/68_bubble_orange/68_bubble_orange"];
	class mgrAlert extends _mgrBase {
		static onload() {
			let t = new Laya.Scene3D;
			this.scene3dfont = t, mgrPanel.getLayerNode(PANEL_LAYER.TOP).addChild(t);
			var e = t.addChild(new Laya.Camera(0, .1, 10));
			this.camerafont = e, e.transform.position = new Laya.Vector3(0, 0, 1), e.clearFlag = 3, e.orthographic = !0, _G.effectScene = t, _G.effectCamera = e, Laya.timer.loop(1, this, function() {})
		}
		static saveRecord() {}
		static alertDialog(t, e, a, i, s, n, o) {
			let r;
			r = "string" == typeof t ? {
				desc: t,
				title: e,
				confirm: a,
				cancel: i,
				confirmText: s,
				cancelText: n,
				closeMsg: o
			} : t, this.openPanelLoading(UI_NAME.PanelDialog, r)
		}
		static alertAdvDialog(t, e, a, i, s) {
			let n;
			n = "string" == typeof t ? {
				desc: t,
				title: e,
				confirm: a,
				cancel: s || function() {},
				confirmText: i
			} : t, this.openPanelLoading(UI_NAME.PanelAdvDialog, n)
		}
		static alertColorEggTip(t) {
			mgrAlert.alertDialog(mgrI18n.getText("mgrAlert.1"), mgrI18n.getText("schoolYearbookItem.2"), function() {
				switch (t) {
					case EGGS_TYPE.CLASS:
						mgrAlert.openPanelLoading(UI_NAME.PanelClassColorEggs)
				}
			})
		}
		static alertFadeIn(t, e, a, i, s, n) {
			let o = {
				panelClass: t,
				callbackBeforOpen: e,
				context: a,
				tip: i,
				maskColor: s,
				fadinTime: n
			};
			mgrPanel.openPanel(PanelFadeIn, o)
		}
		static openPanelLoading(t, e, a) {
			mgrPanel.openPanel(PanelPanelLoading, {
				panelClass: t,
				context: e,
				callback: a
			})
		}
		static openCustLoading(t, e, a, i, s, n) {
			mgrPanel.openPanel(t, {
				loader: e,
				panel: a,
				context: i,
				onOpenBefore: n
			}, !1, s)
		}
		static openGameLoading(t, e, a) {
			this.openCustLoading(PanelGameLoading1, null, t, e, null, a)
		}
		static openSPELoading(t, e, a, i) {
			this.openCustLoading(PanelSPELoading, t, e, a, i)
		}
		static openWait(t, e) {
			mgrPanel.openPanelWithSingleton(PanelWait), t.setLoadingCallback(function() {
				_G.sendMsg(BASE_MSG.RES_LOAD_END), e && e()
			}), t.loadAll()
		}
		static openResWait(t, e, a) {
			mgrPanel.openPanelWithSingleton(PanelWait), mgrRes.loadRes(t, e, function(t) {
				_G.sendMsg(BASE_MSG.RES_LOAD_END), a && a(t)
			})
		}
		static alertText(t) {
			Logger.debug("alert:", t), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, t)
		}
		static alertItemFromBtn(t, e) {
			let a;
			if (t instanceof Array) {
				if (0 == t.length) return;
				if (1 != t.length) return;
				a = t[0]
			} else a = t;
			let i = UiHelper.getSelfGlobalPos(e, Laya.Point.TEMP);
			return this.playItemToCurrency(a.itemId, i, 10)
		}
		static alertItems(t, e = !0, a) {
			let i;
			if (t instanceof Array) {
				if (0 == t.length) return;
				if (1 != t.length) {
					let i = 0;
					var s = () => {
						this.alertSingleItem(t[i++], e, function() {
							i < t.length ? s() : a && a()
						})
					};
					return void s()
				}
				i = t[0]
			} else i = t;
			let n = db.get_item_db(i.itemId);
			switch (n.type) {
				case 2:
					if (1 != n.subType) return void this.alertSingleItem(i, e, a);
				case 1:
					this.alertSingleItem(i, e, a);
					break;
				default:
					this.alertItemsByText(i, a)
			}
		}
		static alertItemsByText(t, e) {
			let a = "";
			if (t instanceof Array)
				for (let e = 0; e < t.length; e++) {
					const i = t[e];
					let s = db.get_item_db(i.itemId);
					a = 0 == e ? `${mgrI18n.getText("mgrAlert.2")}${s.name}x${i.count}` : `${a}, ${mgrI18n.getText("mgrAlert.2")}${s.name}x${i.count}`
				} else {
					let e = db.get_item_db(t.itemId);
					a = `${mgrI18n.getText("mgrAlert.2")}${e.name}x${t.count}`
				}
			this.alertText(a), e && e()
		}
		static alertSingleItem(t, e = !0, a, i, s) {
			this.openPanelLoading(UI_NAME.PanelItemGet, {
				item: t,
				bAdv: e,
				onClose: a,
				shareIdx: i,
				count: s
			})
		}
		static addAndAlertItems(t, e, a) {
			if (0 == t.length) return;
			let i = 0;
			var s = () => {
				this.addAndAlert(t[i++], e, function() {
					i < t.length ? s() : a && a()
				})
			};
			s()
		}
		static addAndAlert(t, e, a, i = !0, s) {
			let n, o = db.get_item_db(t.itemId);
			2 == o.type && 1 == o.subType && (n = BaseFacade.mItem.isOwned(t.itemId) || t.count > 1), BaseFacade.mItem.addItem(t.itemId, t.count, e), this.alertSingleItem(t, i, a, s)
		}
		static alertNotEnough(t, e = !0) {
			if (e) {
				let e = db.get_item_db(t);
				this.alertText(`${mgrI18n.getText(e.tlite)} ${mgrI18n.getText("mgrAlert.3")} `)
			}
			switch (t) {
				case "1001":
					this.isCoinGiftEnable && mgrAlert.openPanelLoading(UI_NAME.PanelCoinGift);
					break;
				case "1002":
					break;
				case "1000":
					this.isDiamondGiftEnable && mgrAlert.openPanelLoading(UI_NAME.PanelDiamondGift)
			}
		}
		static get isCoinGiftEnable() {
			return !0
		}
		static get isDiamondGiftEnable() {
			return mgrAdv.getActive("shop_item")
		}
		static alertQuickBuy(t, e, a, i, s) {
			let n = db.get_item_db(t),
				o = db.get_item_db(a);
			this.alertDialog(`${mgrI18n.getText("mgrAlert.4")} ${i} ${o.name} ${String.format(mgrI18n.getText("mgrAlert.5"),e)} ${n.name} `, mgrI18n.getText("schoolYearbookItem.2"), function() {
				BaseFacade.mItem.subItem(a, i, null) ? s() : mgrAlert.alertNotEnough(a)
			}, function() {})
		}
		static alertInput(t, e, a) {}
		static global2camera(t, e) {
			return e = e || new Laya.Vector3, this.camerafont.convertScreenCoordToOrthographicCoord(t, e), e
		}
		static playParticleEffect(t, e, a, i, s) {
			let n = _G.poolManager.get(Particle, t);
			if (n) {
				let t;
				if (e) {
					let a = Mathf.TEMP_VEC3;
					a.setValue(e.x, e.y, 0), t = this.global2camera(a, new Laya.Vector3)
				}
				s && n.setScale(s, s, s), n.play(t, a, i, this.scene3dfont)
			}
			return n
		}
		static playPlistEffect(t, e, a, i, s) {}
		static playAnimationEffect(t, e, a, i) {}
		static playEffect(t, e, a, i, s) {}
		static playEffectId(t, e, a, i) {
			let s = db.get_effect_db(t);
			switch (s.type) {
				case 1:
					return this.playPlistEffect(s.res, e, a, i);
				case 0:
					return this.playParticleEffect(s.res, e, a, i);
				case 2:
					return this.playAnimationEffect(s.res, e, a);
				case 3:
					return this.playEffect(s.res, e, a, i);
				case 4:
					return null
			}
		}
		static initCurrencyIconPosition(t, e, a) {
			this.uiCoinPos = t, this.uiVitPos = a, this.uiDiamondPos = e
		}
		static playIconTo(t, e = 2, a, i, s = .5, n = !1) {
			if (!i) return;
			let o;
			for (var r = 0; r < e; r++) {
				let e = _G.poolManager.get(DropIcon);
				if (e) {
					o = e, mgrPanel.getLayerNode(PANEL_LAYER.DIALOG).addChild(e), e.setIcon(a).burstOutAndJumpTo(t, i, s)
				}
			}
			return o
		}
		static playItemToCurrency(t, e, a) {
			let i = db.get_item_db(t);
			switch (t) {
				case "1001":
					return this.playIconTo(e, a, i.icon, this.uiCoinPos, .42, !0);
				case "1000":
					return this.playIconTo(e, a, i.icon, this.uiDiamondPos, .42, !0);
				case "1005":
					return this.playIconTo(e, a, i.icon, this.uiVitPos, .42, !0);
				case "1006":
					return this.playIconTo(e, a, i.icon, this.uiShuijingPos, .5, !0)
			}
		}
		static playCoinCount(t, e) {
			let a = _G.poolManager.get(CoinCount);
			mgrPanel.getLayerNode(PANEL_LAYER.DIALOG).addChild(a), a.setCount(e).play(t)
		}
		static tryOpenInstall() {
			db.cop.isSupportInstallShortcut && !mgrSdk.isInstallShortcut && (mgrSdk.isInstallShortcutHasPrompt ? mgrSdk.installShortcut() : this.openPanelLoading(UI_NAME.PanelInstall))
		}
		static playHitEffect(t, e = 1) {
			let a = HIT_EFFECT[e - 1];
			a && this.playParticleEffect(a, t, .3, .4)
		}
	}
	const RECORD_VIDEO_KEY = "RecordVideioEnabled",
		RECORD_ADD_GAME = "RecordAddGame",
		RECORD_INSTALL_SHORTCUT = "RecordShortcut";
	let DEBUG_MODE = !1;
	class mgrSdk extends _mgrBase {
		static get isUrlNotice() {
			return !!db.cop.url_notice
		}
		static onload() {
			switch (Logger.log(`---\x3e _G.SDK_VERSION: [${_G.SDK_VERSION}]`), _G.SDK_VERSION) {
				case SDK_VERSIONS_VALUE.V6:
					SDKBridge.registerCmd("/c/channelInfoResult", this.onChannelInfoResult_V6.bind(this)), SDKBridge.registerCmd("/c/copInfoResult", this.onCopInfoResult.bind(this)), SDKBridge.registerCmd("/c/payResult", this.onPayResult.bind(this)), SDKBridge.registerCmd("/c/prePayResult", this.onBeforePayResult.bind(this)), SDKBridge.registerCmd("/c/shareResult", this.onShareResult.bind(this)), SDKBridge.registerCmd("/c/appShareResult", this.onAppShareResult.bind(this)), SDKBridge.registerCmd("/c/exitGame", this.onExitGame.bind(this)), SDKBridge.registerCmd("/c/useCdkey", this.onUseCDKResult.bind(this)), SDKBridge.registerCmd("/c/lifeCycle", this.onLifeCycle.bind(this)), SDKBridge.registerCmd("/c/getClipboardDataResult", this.onGetClipboardDataResult.bind(this)), SDKBridge.registerCmd("/c/extraBonus", this.onExtraBonus.bind(this)), SDKBridge.registerCmd("/c/openJumpResult", this.onOpenJumpResult.bind(this)), SDKBridge.registerCmd("/c/addSubscribeResult", this.onAddSubscribeResult.bind(this)), SDKBridge.registerCmd("/c/jumpOtherGameResult", this.onJumpOtherGameResult.bind(this)), SDKBridge.registerCmd("/c/jumpOtherGameRewardResult", this.onJumpOtherGameRewardResult.bind(this)), SDKBridge.registerCmd("/c/addGameToMyFavoriteResult", this.onAddGameToMyFavoriteResult.bind(this)), SDKBridge.registerCmd("/c/installShortcutResult", this.onInstallShortcutResult.bind(this)), SDKBridge.registerCmd("/c/getShortcutStateResult", this.onGetShortcutStateResult.bind(this)), SDKBridge.registerCmd("/c/getUserDataResult", this.onGetUserDataResult.bind(this)), SDKBridge.registerCmd("/c/recorderGameVideoResult", this.onRecorderGameVideoResult.bind(this)), SDKBridge.registerCmd("/c/shareGameVideoResult", this.onShareGameVideoResult.bind(this)), SDKBridge.registerCmd("/c/userIsLoginResult", this.onUserIsLoginResult.bind(this)), SDKBridge.registerCmd("/c/userLoginResult", this.onUserLoginResult.bind(this)), SDKBridge.registerCmd("/c/followOfficialAccountResult", this.onFollowOfficialAccountResult.bind(this)), SDKBridge.registerCmd("/c/getFollowOfficialAccountStateResult", this.onGetFollowOfficialAccountStateResult.bind(this)), SDKBridge.registerCmd("/c/getRankDataResult", this.onGetRankDataResult.bind(this)), SDKBridge.registerCmd("/c/jumpToVideoViewResult", this.onJumpToVideoViewResult.bind(this)), this.isAutoRecordVideo = FileRecord.getData(RECORD_VIDEO_KEY), null == this.isAutoRecordVideo && (this.isAutoRecordVideo = !0);
					break;
				case SDK_VERSIONS_VALUE.V5:
					SDKBridge.registerCmd("/c/channelInfoResult", this.onChannelInfoResult_V5.bind(this)), SDKBridge.registerCmd("/c/payResult", this.onPayResult.bind(this)), SDKBridge.registerCmd("/c/exitGame", this.onExitGame.bind(this)), SDKBridge.registerCmd("/cdk/useCdkey", this.onUseCDKResult.bind(this))
			}
			this.registerMsg({
				[BASE_MSG.SYS_KEY_DOWN]: t => {
					t.keyCode, Laya.Keyboard.ESCAPE
				},
				[BASE_MSG.SYS_SHOW]: () => {
					this.tryGetShareAward(!1)
				},
				[BASE_MSG.BASE_MGR_LOADED]: this.onMsgBaseMgrLoaded.bind(this)
			}), this.registerKeyboardListener(), DEBUG_MODE && Logger.error("SDK debug开启，如果了解请忽略。")
		}
		static start() {}
		static setVersion(t) {
			if (_G.H5_TEST || DEBUG_MODE) switch (Logger.setLogLevel(3), _G.SDK_VERSION) {
				case SDK_VERSIONS_VALUE.V6:
					this.onChannelInfoResult_V6(t);
					break;
				case SDK_VERSIONS_VALUE.V5:
			} else switch (Logger.setLogLevel(2), _G.SDK_VERSION) {
				case SDK_VERSIONS_VALUE.V5:
					SDKBridge.sendToSdk("setVersion", {});
					break;
				case SDK_VERSIONS_VALUE.V6:
					SDKBridge.sendToSdk("/c/setVersion", {})
			}
		}
		static registerKeyboardListener() {
			window.conch && window.conch.setOnBackPressedFunction(() => {
				this.exitGame()
			})
		}
		static onMsgBaseMgrLoaded() {
			for (let t = this.allMgrLoadedMsgs.length - 1; t >= 0; t--) {
				let t = this.allMgrLoadedMsgs.shift();
				_G.sendMsg(t.msg, t.data)
			}
		}
		static getSubCop(t) {
			let e = db.get_sub_cop_map()[t];
			if (!e) return 0;
			let a = db.cop[e.copKey];
			return a ? a[e.idx] : 0
		}
		static tryAddItem(t, e, a) {
			let i = {
				itemId: t,
				count: e,
				reason: a
			};
			BaseFacade.isLoaded ? _G.sendMsg(BASE_MSG.ITEM_ADD, i) : this.allMgrLoadedMsgs.push({
				msg: BASE_MSG.ITEM_ADD,
				data: i
			})
		}
		static onChannelInfoResult_V6(t) {
			if (console.log("-- > onChannelInfoResult_V6"), console.log("lfy", t), !t) return;
			t.payInfo, parseInt(t.cardType);
			db.cop.isAbout = !!t.isAbout, db.cop.isThirdExit = !!t.isThirdExit, db.cop.isShareEnabled = !!t.isShareEnabled, db.cop.isPayEnabled = !!t.isPayEnabled, db.cop.isULMoreGame = !!t.isULMoreGame, db.cop.isUseSdkRank = !!t.isUseSdkRank, db.cop.isWebView = !!t.isWebView, db.cop.isShowUrlAdIcon = !!t.isShowUrlAdIcon, db.cop.isSupportRecordShare = !!t.isSupportRecordShare, db.cop.isSupportInstallShortcut = !!t.isSupportInstallShortcut, db.cop.isSupportFindMinigames = !!t.isSupportFindMinigames, db.cop.isSupportRecommendationBtn = !!t.isSupportRecommendationBtn, db.cop.is4399Watermark = !!t.is4399Watermark, db.cop.isJumpLeisureEnabled = !!t.isJumpLeisureEnabled, db.cop.isSupportFollowOfficialAccount = !!t.isSupportFollowOfficialAccount, db.cop.isSupportFavoriteGuide = !!t.isSupportFavoriteGuide, db.cop.isSupportVideoRank = !!t.isSupportVideoRank, db.cop.isSupportSubscribe = !!t.isSupportSubscribe, db.cop.isSupportChannelMoreGameBox = !!t.isSupportChannelMoreGameBox, db.cop.pop_review_ratio = Tools.safeParseInt(t.pop_review_ratio, 0), this._testJumpInfo = t.jumpInfo, t.appName && (this.h5_channel = t.appName.toString().toLowerCase()), "vivo" == this.h5_channel && (console.error = console.warn, Logger.error = Logger.warn), this.findmeImageUrl = t.findMinigamesImageUrl, this.ulsdkVersion = t.ulsdkVersion, this.packageVersion = t.packageVersion, this.uuid = t.uuid, mgrI18n.setSdkLanguage(t.gameLanguage), this.hotfixCop_V6(t.copInfo), this.isChnResult = !0
		}
		static onCopInfoResult(t) {
			this.hotfixCop_V6(t.copInfo)
		}
		static hotfixCop_V6(t) {
			let e;
			this.COP_INFO = t;
			try {
				e = JSON.parse(t)
			} catch (e) {
				return void Logger.error(`hot fix cop [${t}] error:`, e)
			}
			let a = db.cop,
				i = Object.keys(a);
			for (let t = 0; t < i.length; t++) {
				let s = i[t],
					n = e[s];
				if (null != n) switch (typeof a[s]) {
					case "number":
						a[s] = Tools.safeParseInt(n, 0);
						break;
					case "boolean":
						a[s] = Tools.safeParseBool(n);
						break;
					case "string":
						a[s] = n.toString();
						break;
					case "object":
						"string" == typeof a[s][0] ? a[s] = n.toString().split(";") : a[s] = Tools.splitToNumber(n, ";")
				}
			}
			mgrAdv.hotfixCop(), _G.sendMsg(BASE_MSG.SDK_COP_CHANGED, e), console.log("mgrSdk.hotfixCop_V6")
		}
		static openPay(t, e, a, i) {
			let s = {
				payId: e,
				reason: i
			};
			switch (this.payCallback = a, _G.SDK_VERSION) {
				case SDK_VERSIONS_VALUE.V6:
					SDKBridge.sendToSdk("/c/openPay", {
						payId: t,
						userData: JSON.stringify(s)
					});
					break;
				case SDK_VERSIONS_VALUE.V5:
					let e = {
						payId: t
					};
					SDKBridge.sendToSdk("/c/openPay", {
						payInfo: e,
						userInfo: JSON.stringify(s)
					})
			}(_G.H5_TEST || DEBUG_MODE) && this.onPayResult({
				code: 1,
				msg: ""
			})
		}
		static onPayResult(t) {
			Logger.log("onPayResult", t.code), this.payCallback && this.payCallback(1 == t.code, t.msg, 2 == t.code)
		}
		static onBeforePayResult(t) {
			if (1 != t.code) return;
			let e = JSON.parse(t.userData).payId;
			console.log("onBeforePayResult payId: ", e), e && (BaseFacade.isLoaded ? _G.sendMsg(BASE_MSG.SDK_PRE_PAY, e) : this.allMgrLoadedMsgs.push({
				msg: BASE_MSG.SDK_PRE_PAY,
				data: e
			}), console.log("已恢复购买payId:", e))
		}
		static share(t = "none") {
			this._lastShareData = {
				userData: t,
				time: Timer.time
			};
			let e = JSON.stringify(this._lastShareData);
			SDKBridge.sendToSdk("/c/openShare", {
				title: "",
				content: "",
				imagePath: "",
				url: "",
				userData: e
			}), (_G.H5_TEST || DEBUG_MODE) && Timer.callLater(.5, () => {
				this.onShareResult({
					code: 1,
					userData: e
				})
			})
		}
		static onShareResult(t) {
			let e = JSON.parse(t.userData);
			1 == t.code ? this.tryGetShareAward(!0) : (this._lastShareData = null, _G.sendMsg(BASE_MSG.SDK_SHARE_FAIL, e.userData))
		}
		static tryGetShareAward(t) {
			let e = this._lastShareData;
			e && (t || e.time + 4 < Timer.time) && (_G.sendMsg(BASE_MSG.SDK_SHARE_SUC, e.userData), _G.H5_TEST && _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "[debug]:分享成功"), this._lastShareData = null)
		}
		static onAppShareResult(t) {}
		static exitGame() {
			db.cop.isThirdExit ? this.thirdExitGame() : this._exitGame()
		}
		static thirdExitGame() {
			SDKBridge.sendToSdk("/c/exitGame", {})
		}
		static _exitGame() {
			_G.sendMsg(BASE_MSG.SDK_EXIT_GAME)
		}
		static onExitGame(t) {
			this._exitGame()
		}
		static sendCDK(t) {
			if (Logger.log("请求验证码:", t), !t) return void _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "请输入兑换码!");
			let e = {
				userId: this.uuid,
				cdkStr: t,
				channelId: "0"
			};
			SDKBridge.sendToSdk("/c/useCdkey", e), (_G.H5_TEST || DEBUG_MODE) && Timer.callLater(1, () => {
				this.onUseCDKResult({
					code: "1",
					data: [{
						goodsid: "1001",
						count: 1
					}, {
						goodsid: "1000",
						count: 1
					}]
				})
			})
		}
		static onUseCDKResult(t) {
			if ("1" == t.code) {
				_G.sendMsg(BASE_MSG.UI_SHOW_TIP, "兑换码兑换成功！");
				for (const e in t.data) {
					let a = t.data[e],
						i = a.goodsid.toString(),
						s = a.count,
						n = BaseFacade.mItem.addWrapItemToList(i, s, 3);
					_G.sendMsg(BASE_MSG.UI_SHOW_ITEMS, n)
				}
			} else if ("-1" == t.code) {
				let e = t.data;
				"兑换码不在有效使用期" == e && (e = "兑换码兑换失败"), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, e)
			} else _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "兑换码兑换失败")
		}
		static onLifeCycle(t) {
			switch (t.lifeCycle || "") {
				case "onBackPressed":
					this.exitGame()
			}
		}
		static setClipboardData(t, e = "") {
			SDKBridge.sendToSdk("/c/setClipboardData", {
				clipboardData: t,
				userData: e
			})
		}
		static getClipboardData(t = "") {
			SDKBridge.sendToSdk("/c/getClipboardData", {
				userData: t
			})
		}
		static onGetClipboardDataResult(t) {
			if (1 == t.code) {
				t.clipboardData, t.userData, t.msg
			}
		}
		static openMoreGame() {
			SDKBridge.sendToSdk("/c/openMoreGame", {})
		}
		static openUlMoreGame() {
			console.log("openUlMoreGame"), SDKBridge.sendToSdk("/c/openUlMoreGame", {})
		}
		static openJf() {
			SDKBridge.sendToSdk("/c/openJf", {})
		}
		static callPhone(t) {
			SDKBridge.sendToSdk("/c/callPhon", {
				phoneNum: t
			})
		}
		static openWebView(t) {
			SDKBridge.sendToSdk("/c/ulWebView", {
				url: t
			})
		}
		static openReview() {
			SDKBridge.sendToSdk("/c/openInviteComment", {})
		}
		static openUrlNotice() {
			db.cop.url_notice && this.openWebView(db.cop.url_notice)
		}
		static openMoreWonderful() {
			SDKBridge.sendToSdk("/c/jumpLeisureSubject", {})
		}
		static opentChannelMoreGameBox() {
			SDKBridge.sendToSdk("/c/openChannelMoreGameBox", {})
		}
		static onExtraBonus(t) {
			t && 1 == t.code && (FileRecord.getData("extraBonusReward") || (console.log(`msg:${t.msg}  isInitGame:${t.isInitGame}`), this.tryAddItem("1000", 40, 4), FileRecord.setData("extraBonusReward", !0)))
		}
		static openJump(t, e = 0) {
			SDKBridge.sendToSdk("/c/openJump", {
				gameIndex: 0,
				type: t,
				count: e
			}), (_G.H5_TEST || DEBUG_MODE) && Timer.callLater(1, () => {
				"single" == t ? this.onOpenJumpResult({
					code: 1,
					jumpInfo: [this._testJumpInfo[Mathf.random(this._testJumpInfo.length) - 1]],
					type: t
				}) : this.onOpenJumpResult({
					code: 1,
					jumpInfo: this._testJumpInfo,
					type: t
				})
			})
		}
		static onOpenJumpResult(t) {
			1 == t.code ? _G.sendMsg(BASE_MSG.SDK_OPEN_JUMP_RESULT, {
				jumpInfo: t.jumpInfo,
				type: t.type
			}) : console.warn("互推列表获取失败：", t.type, t.msg)
		}
		static addSubscribe(t, e = !1) {
			Logger.log("mgrSdk addSubscribe"), SDKBridge.sendToSdk("/c/addSubscribe", {
				userData: "",
				templateIds: t,
				isNotFromClick: e
			})
		}
		static onAddSubscribeResult(t) {
			1 == t.code ? (console.log("onAddSubscribeResult:", t.code), _G.sendMsg(BASE_MSG.MSG_ON_ADD_SUBSCRIBE_RESULT, {
				successTempleteIds: t.successTempleteIds,
				msg: t.msg
			})) : (_G.sendMsg(BASE_MSG.UI_SHOW_TIP, "订阅失败"), console.error("订阅失败", t.msg))
		}
		static jumpOtherGame(t, e, a = "") {
			Logger.log("jumpOtherGame:", t), SDKBridge.sendToSdk("/c/jumpOtherGame", {
				gameIndex: t,
				type: e,
				userData: a
			}), (_G.H5_TEST || DEBUG_MODE) && Timer.callLater(1, () => {
				if (this.onJumpOtherGameResult({
						code: 1,
						userData: a
					}), "reward" == e)
					for (var i = 0; i < this._testJumpInfo.length; i++) {
						var s = this._testJumpInfo[i];
						if (s.index == t) {
							s.bReceived = !0, this.onJumpOtherGameRewardResult({
								code: 1,
								rewards: s.rewards,
								userData: a
							});
							break
						}
					}
			})
		}
		static onJumpOtherGameResult(t) {
			if (1 == t.code) {
				let e = t.userData;
				_G.sendMsg(BASE_MSG.SDK_JUMP_GAME_SUC, e)
			} else Logger.log(t.msg)
		}
		static onJumpOtherGameRewardResult(t) {
			if (console.log("onJumpOtherGameRewardResult:", t.userData), 1 == t.code) {
				let e = t.rewards;
				e && e.length && this.tryAddItem("1000", e[0][1], 5), _G.sendMsg(BASE_MSG.SDK_JUMP_GAME_REWARD, t.userData)
			} else console.warn("onJumpOtherGameRewardResult no reward:", t.msg)
		}
		static addGameToMyFavorite(t = 0, e = "一键添加到我的小程序", a = "") {
			console.log("mgrSdk addGameToMyFavorite."), SDKBridge.sendToSdk("/c/addGameToMyFavorite", {
				typeId: t,
				content: e,
				userData: a
			})
		}
		static hasAddGameToMyFavorite() {
			return !!FileRecord.getData(RECORD_ADD_GAME)
		}
		static onAddGameToMyFavoriteResult(t) {
			FileRecord.setData(RECORD_ADD_GAME, !0), t && t.code
		}
		static installShortcut(t = "") {
			console.log("mgrSdk installShortcut."), SDKBridge.sendToSdk("/c/installShortcut", {
				userData: t
			}), _G.H5_TEST && Timer.callLater(.5, () => {
				this.onInstallShortcutResult({
					code: 1,
					userData: t
				}), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "[debug]:添加到桌面成功")
			})
		}
		static getShortcutState(t = "") {
			console.log("mgrSdk getShortcutState"), SDKBridge.sendToSdk("/c/getShortcutState", {
				userData: t
			})
		}
		static onInstallShortcutResult(t) {
			let e = t.userData,
				a = t.msg;
			1 == t.code ? (FileRecord.setData(RECORD_INSTALL_SHORTCUT, !0), _G.sendMsg(BASE_MSG.SDK_INSTALL_SHORTCUT_SUC, e)) : Logger.warn(a)
		}
		static onGetShortcutStateResult(t) {
			t.code;
			let e = t.state,
				a = !!t.bHasPrompt,
				i = t.userData;
			db.cop.isSupportInstallShortcut = 1 == e, this.isInstallShortcutHasPrompt = a, _G.sendMsg(BASE_MSG.SDK_GET_SHORTCUT_STATE_SUC, {
				state: e,
				bHasPrompt: a,
				userData: i
			})
		}
		static getRankData(t, e, a, i, s = "") {
			SDKBridge.sendToSdk("/c/getRankData", {
				dataNum: t,
				rankName: e,
				order: a,
				rankType: i,
				videoTag: s
			})
		}
		static onGetRankDataResult(t) {
			let e = t.code;
			1 == e ? (_G.sendMsg(BASE_MSG.SDK_GET_RANK_DATA_RESULT, {
				rankType: t.rankType,
				videoTag: t.videoTag,
				list: t.list
			}), console.log("排行榜数据获取成功", e, t.rankType, t.videoTag, t.list)) : console.warn("排行榜数据获取失败", e, t.rankType, t.videoTag, t.list)
		}
		static jumpToVideoView(t, e = "") {
			Logger.log("jumpToVideoView:", t), SDKBridge.sendToSdk("/c/jumpToVideoView", {
				videoId: t,
				userData: e
			})
		}
		static onJumpToVideoViewResult(t) {
			if (1 == t.code) {
				let e = t.userData;
				_G.sendMsg(BASE_MSG.SDK_JUMP_TO_VIDEO_VIEW_SUC, e)
			} else Logger.log(t.msg)
		}
		static get isInstallShortcut() {
			return !!FileRecord.getData(RECORD_INSTALL_SHORTCUT)
		}
		static saveUserData(t) {
			SDKBridge.sendToSdk("/c/saveUserData", {
				userData: t
			})
		}
		static getUserData() {
			SDKBridge.sendToSdk("/c/getUserData", {})
		}
		static onGetUserDataResult(t) {
			if (1 == t.code) {
				t.userData
			}
		}
		static tryStartRecord() {
			db.cop.isSupportRecordShare && this.isAutoRecordVideo && this.startRecordVideo()
		}
		static resetRecordState() {
			db.cop.isSupportRecordShare && (this.stopRecordVideo(), this.clearShareVideo())
		}
		static startRecordVideo() {
			db.cop.isSupportRecordShare && (this._isVideoRecording && this.stopRecordVideo(), this._isVideoRecording = !0, this._videoRecordTime = Timer.time, SDKBridge.sendToSdk("/c/recorderGameVideo", {
				action: "start",
				durationTime: 120
			}))
		}
		static pauseRecordVideo() {
			SDKBridge.sendToSdk("/c/recorderGameVideo", {
				action: "pause",
				durationTime: 120
			})
		}
		static resumeRecordVideo() {
			SDKBridge.sendToSdk("/c/recorderGameVideo", {
				action: "resume",
				durationTime: 120
			})
		}
		static stopRecordVideo() {
			db.cop.isSupportRecordShare && this._isVideoRecording && (this._isVideoRecording = !1, this._videoRecordTime = Timer.time - this._videoRecordTime, SDKBridge.sendToSdk("/c/recorderGameVideo", {
				action: "stop",
				durationTime: 120
			}))
		}
		static setAutoRecordVideo(t) {
			FileRecord.setData(RECORD_VIDEO_KEY, t), t || this.stopRecordVideo(), this.isAutoRecordVideo = t
		}
		static onRecorderGameVideoResult(t) {
			if (t) {
				switch (t.code) {
					case 0:
					case 1:
					case 2:
					case 3:
					case 4:
						break;
					default:
						return
				}
			}
		}
		static get isVideoAutoRecordable() {
			return db.cop.isSupportRecordShare && this.isAutoRecordVideo && !this._isVideoRecording
		}
		static get isVideoShareable() {
			return db.cop.isSupportRecordShare && !this._isVideoRecording && this._videoRecordTime > this.min_record_time
		}
		static get isVideoRecording() {
			return db.cop.isSupportRecordShare && this._isVideoRecording
		}
		static shareVideo(t = "", e = "") {
			this._isVideoRecording || (this._videoRecordTime > this.min_record_time ? (SDKBridge.sendToSdk("/c/shareGameVideo", {
				userData: t,
				videoTag: e
			}), (_G.H5_TEST || DEBUG_MODE) && Timer.callLater(1, () => {
				this.onShareGameVideoResult({
					code: 1,
					userData: t
				}), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "[debug]:视频分享成功")
			})) : (_G.sendMsg(BASE_MSG.UI_SHOW_TIP, "视频分享失败"), console.log("录屏时长不够!")))
		}
		static clearShareVideo() {
			this._videoRecordTime = 0
		}
		static onShareGameVideoResult(t) {
			t && (1 == t.code ? (console.log("分享视频成功"), _G.sendMsg(BASE_MSG.SDK_VIDEO_SHARE_SUC)) : (console.log("分享视频失败"), _G.sendMsg(BASE_MSG.SDK_VIDEO_SHARE_FAIL)))
		}
		static checkLoginState() {
			SDKBridge.sendToSdk("/c/userIsLogin", {}), _G.H5_TEST && Timer.callLater(.5, () => {
				this.onUserIsLoginResult({
					loginStatus: !1
				})
			})
		}
		static onUserIsLoginResult(t) {
			this.isUserLogin = 1 == t.code, _G.sendMsg(BASE_MSG.SDK_LOGIN_STATE, this.isUserLogin)
		}
		static login(t = "") {
			SDKBridge.sendToSdk("/c/userLogin", {
				userData: t
			}), _G.H5_TEST && Timer.callLater(.5, () => {
				this.onUserLoginResult({
					code: 1,
					userData: t
				})
			})
		}
		static onUserLoginResult(t) {
			this.isUserLogin = 1 == t.code, _G.sendMsg(BASE_MSG.SDK_LOGIN_RESULT, this.isUserLogin)
		}
		static openCrossRecommend(t, e, a = 0) {
			console.log("mgrSdk openCrossRecommend"), SDKBridge.sendToSdk("/c/openRecommendation", {
				typeId: a,
				style: {
					left: t,
					top: e
				}
			})
		}
		static closeCrossRecommend() {
			console.log("mgrSdk closeCrossRecommend"), SDKBridge.sendToSdk("/c/closeRecommendation", {})
		}
		static followOfficialAccount() {
			console.log("mgrSdk followOfficialAccount"), SDKBridge.sendToSdk("/c/followOfficialAccount", {})
		}
		static getFollowOfficialAccountState() {
			console.log("mgrSdk getFollowOfficialAccountState"), SDKBridge.sendToSdk("/c/getFollowOfficialAccountState", {})
		}
		static onFollowOfficialAccountResult(t) {
			1 == t.code ? (this.followState = 1, _G.sendMsg(BASE_MSG.SDK_FOLLOW_OFFICIAL_ACCOUNT_SUC, t)) : mgrAlert.alertText(t.msg || "暂时无法跳转，请重试")
		}
		static onGetFollowOfficialAccountStateResult(t) {
			let e = t.code,
				a = t.state;
			1 == e && (this.followState = a, console.log("关注状态", this.followState), _G.sendMsg(BASE_MSG.SDK_GET_FOLLOW_OFFICIAL_ACCOUNT_STATE_SUC, t))
		}
		static onChannelInfoResult_V5(t) {
			if (console.log("-- > onChannelInfoResult_V5"), !t) return;
			t.payInfo, parseInt(t.cardType);
			this.hotFixCop_V5(t.configInfo)
		}
		static hotFixCop_V5(t) {
			let e;
			this.COP_INFO = t;
			try {
				e = JSON.parse(t)
			} catch (e) {
				return void Logger.error(`hot fix cop [${t}] error:`, e)
			}
			e.url_ad_h5 && (db.cop.isShowUrlAdIcon = !0), this.hotfixCop_V6(t)
		}
	}

	function sort_pay_db_by_switch(t, e) {
		let a = BaseFacade.mSwitch.check(t.switchId);
		return a == BaseFacade.mSwitch.check(e.switchId) ? Tools.sort_db_by_order(t, e) : a ? -1 : 1
	}

	function sort_pay_id_by_switch(t, e) {
		return sort_pay_db_by_switch(db.get_pay_db(t), db.get_pay_db(e))
	}

	function sort_pay_id_by_order(t, e) {
		return Tools.sort_db_by_order(db.get_pay_db(t), db.get_pay_db(e))
	}
	mgrSdk.COP_INFO = "", mgrSdk.isChnResult = !1, mgrSdk.isAutoRecordVideo = !0, mgrSdk.isInstallShortcutHasPrompt = !1, mgrSdk.isSupportJumpList = !1, mgrSdk.isUserLogin = !1, mgrSdk.h5_channel = "", mgrSdk.packageVersion = "0", mgrSdk.ulsdkVersion = "0", mgrSdk.isMusicEnable = !1, mgrSdk.findmeImageUrl = "", mgrSdk.followState = 1, mgrSdk.uuid = "0", mgrSdk.allMgrLoadedMsgs = [], mgrSdk._testJumpInfo = [], mgrSdk._isVideoRecording = !1, mgrSdk._videoRecordTime = 0, mgrSdk.min_record_time = 3;
	class mPay extends _mBase {
		onload() {
			this.registerMsg({
				[BASE_MSG.SDK_PRE_PAY]: this.onMsgPrePay.bind(this)
			})
		}
		loadData() {}
		saveData() {}
		onMsgPrePay(t) {
			this._onGetGoods(t, 9)
		}
		getActive(t) {
			let e = db.get_pay_db(t);
			return !!e && BaseFacade.mSwitch.check(e.switchId)
		}
		buyGoods(t, e, a = null, i = !1) {
			let s = db.get_pay_db(t);
			if (e = e || _G.EMPTY_FUN, !s) return void e(!1, null);
			let n = !1;
			if (i) n = !0;
			else if (s.firstCostItemId && (n = BaseFacade.mItem.subItem(s.firstCostItemId, s.firstCostCount, a)), !n) {
				if ("1003" == s.costItemId) return void mgrSdk.openPay(s.payCode, t, (a, i, s) => {
					let n;
					a ? n = this._onGetGoods(t, void 0, !0) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, i), e(a, n)
				});
				n = BaseFacade.mItem.subItem(s.costItemId, s.costCount, a)
			}
			if (n) {
				let i = this._onGetGoods(t, a);
				e(!0, i)
			} else e(!1, null)
		}
		_onGetGoods(t, e = null, a = !1) {
			let i = db.get_pay_db(t);
			if (BaseFacade.mSwitch.active(i.switchId), i.getItemId) {
				i.statistics && GameStatistics.statisOnItemBought(i.statistics, 1);
				let a = BaseFacade.mItem.addWrapItemToList(i.getItemId, i.getCount, e);
				return BaseFacade.mGoal.commit(BASE_ACTION_ID.PAY_SUC, 1, t), _G.sendMsg(BASE_MSG.PAY_SUC, t), a
			}
			return null
		}
		isCostEnough(t) {
			let e = db.get_pay_db(t);
			return !!e && ("1003" == e.costItemId || (e.firstCostItemId ? BaseFacade.mItem.enoughItem(e.firstCostItemId, e.firstCostCount) : BaseFacade.mItem.enoughItem(e.costItemId, e.costCount)))
		}
		getPays(t) {
			let e = db.get_pay_db_map(),
				a = [];
			return Tools.forEachMap(e, function(e, i) {
				i.gid == t && BaseFacade.mSwitch.check(i.switchId) && a.push(e)
			}), a.sort(sort_pay_id_by_order), a
		}
		getAllPays(t) {
			let e = db.get_pay_db_map(),
				a = [];
			return Tools.forEachMap(e, function(e, i) {
				i.gid == t && a.push(e)
			}), a
		}
	}
	class BaseFacade {
		static get isLoaded() {
			return this._isLoaded
		}
		static onLoad() {
			this.mGoal = this.createMgr(mGoal), this.mUp = this.createMgr(mUp), this.mItem = this.createMgr(mItem), this.mAutoIncreaseItem = this.createMgr(mAutoIncreaseItem), this.mDrop = this.createMgr(mDrop), this.mSwitch = this.createMgr(mSwitch), this.mQuest = this.createMgr(mQuest), this.mPay = this.createMgr(mPay), this.mUp.setDbs(0, db.get_attr_up_db_map()), this.mUp.setDbs(1, db.get_role_up_db_map()), this.initAll(), this._isLoaded = !0, _G.sendMsg(BASE_MSG.BASE_MGR_LOADED)
		}
		static createMgr(t) {
			let e = new t(new MsgHandler);
			return this._mgrs.push(e), e
		}
		static initAll() {
			for (let t = 0; t < this._mgrs.length; t++) this._mgrs[t].onload();
			for (let t = 0; t < this._mgrs.length; t++) this._mgrs[t].start()
		}
	}
	BaseFacade._isLoaded = !1, BaseFacade._mgrs = [];
	class DebugBanner extends PanelBase {
		constructor() {
			super(), this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.resourceName = "DebugBanner", this.bResetRootNode = !1;
			let t = new Laya.Sprite;
			t.size(_G.canvasWidth, 200), t.pos(0, _G.canvasHeight - 200), t.texture = UiHelper.WHITE_TEXTURE, UiHelper.addClickEvent(t, this.close.bind(this)), this.createFromNode(t)
		}
		buildUi() {
			this.registerMsg({
				[BASE_MSG.ADV_CLOSE_NATIVE_BANNER]: this.close.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
	}
	const DEFAULT_ADV_SHOW_DELTA_TIME = .5,
		KEY_NO_ADS = "KEY_NO_ADS",
		DEBUG_MODE$1 = !1;
	class mgrAdv extends _mgrBase {
		static onload() {
			switch (_G.SDK_VERSION) {
				case SDK_VERSIONS_VALUE.V6:
					SDKBridge.registerCmd("/c/openAdvResult", this.onAdvShowResult_V6.bind(this)), SDKBridge.registerCmd("/c/openNativeAdvResult", this.openNativeAdvResult.bind(this)), SDKBridge.registerCmd("/c/clickNativeAdvResult", this.clickNativeAdvResult_V6.bind(this)), SDKBridge.registerCmd("/c/clickAdvResult", this.clickAdvResult_V6.bind(this)), SDKBridge.registerCmd("/c/advValidCountResult", this.onAdvVoidCount_V6.bind(this));
					break;
				case SDK_VERSIONS_VALUE.V5:
					SDKBridge.registerCmd("/adv/advShowResult", this.onAdvShowResult_V5.bind(this))
			}
			this.advData = FileRecord.getData("KEY_ADV_DATA") || {}, this.registerMsg({
				[BASE_MSG.DAILY_SWITCH_ACTIVE]: this.onMsgDailySwitchActive.bind(this)
			}), DEBUG_MODE$1 && Logger.error("广告debug开启，如果了解请忽略。")
		}
		static saveData() {
			FileRecord.setData("KEY_ADV_DATA", this.advData)
		}
		static onMsgDailySwitchActive() {
			this.resetAllCount()
		}
		static setNativeUi(t, e, a) {
			this.panelNativeAdv = t, this.panelAdvLoading = e, this.panelNativeBanner = a
		}
		static getAdvDb(t) {
			return db.get_adv_db_map()[t]
		}
		static hasAdv(t) {
			return !!this.getAdvDb(t)
		}
		static setNoAds() {
			FileRecord.setData(KEY_NO_ADS, !0)
		}
		static get isNoAds() {
			return !!FileRecord.getData(KEY_NO_ADS)
		}
		static hotfixCop() {
			let t = db.get_adv_db_map(),
				e = {},
				a = {},
				i = {};
			for (let s in t) {
				let n = t[s];
				"" != n.copKey && (e[n.copKey] = !0), "" != n.copCdKey && (a[n.copCdKey] = !0), "" != n.copCountKey && (i[n.copCountKey] = !0)
			}
			for (let t in e) this.COP_RATIOS[t] = db.cop[t];
			let s = {};
			for (let t in a) s[t] = db.cop[t];
			let n = {};
			for (let t in i) n[t] = db.cop[t];
			this.hotfixAdvPointCnf(s, n), this.advCnf.video.deltaTime = DEFAULT_ADV_SHOW_DELTA_TIME, this.advCnf.interstitial.deltaTime = db.cop.ad_inst_cd, this.advCnf.banner.deltaTime = 0
		}
		static hotfixAdvPointCnf(t, e) {
			let a = db.get_adv_db_map(),
				i = {};
			for (let s in a) {
				let n = a[s],
					o = t[n.copCdKey],
					r = 0;
				o && (r = o[n.copCdIndex] || 0);
				let l = e[n.copCountKey],
					c = 0;
				l && (c = l[n.copCountIndex] || 0), i[s] = {
					enable: !0,
					nextTime: 0,
					deltaTime: r,
					maxCount: c
				}
			}
			this.advPointCnf = i
		}
		static getActive(t) {
			if (DEBUG_MODE$1) return !0;
			let e = this.getAdvDb(t);
			return e ? this.checkTypeActive(e.advType) ? this.checkCount(t) ? 0 !== this.getCopRatByKey(e.copKey, e.copIndex, e.defaultRate) || (console.log("广告概率关闭"), !1) : (console.log("广告点无次数"), !1) : (console.log("广告无次数或广告类型CD中"), !1) : (console.log("广告db无效"), !1)
		}
		static checkTypeActive(t) {
			let e = this.advCnf[t];
			return !!e && (e.enable && e.nextTime <= Timer.time)
		}
		static checkCount(t) {
			let e = this.getMaxCount(t);
			return (this.advData[t] || 0) < e
		}
		static getMaxCount(t) {
			let e = this.getAdvDb(t);
			if (!e) return 0;
			if ("" == e.copCountKey) return 1e4;
			let a = this.advPointCnf[t];
			if (!a) return 0;
			let i = a.maxCount;
			return i || 1e4
		}
		static getLeftCount(t) {
			let e = this.advData[t] || 0;
			return this.getMaxCount(t) - e
		}
		static checkCd(t) {
			var e = this.advPointCnf[t];
			return !e || e.nextTime <= Timer.time
		}
		static getCopRatByKey(t, e, a) {
			return this.COP_RATIOS[t] && e >= 0 && e < this.COP_RATIOS[t].length ? this.COP_RATIOS[t][e] || 0 : a
		}
		static checkActive(t, e = !1) {
			if (e && _G.isGuiding) return !1;
			if (DEBUG_MODE$1) return !0;
			if (!this.getActive(t)) return !1;
			let a = this.getAdvDb(t);
			if (!Mathf.randomEnable(this.getCopRatByKey(a.copKey, a.copIndex, a.defaultRate))) return console.log("广告概率无效"), !1;
			if (!this.checkCd(t)) return console.log("广告点CD中"), !1;
			let i = this.advPointCnf[t];
			return i && (i.nextTime = Timer.time + i.deltaTime), !0
		}
		static addCount(t) {
			let e = this.getAdvDb(t);
			e && e.copCountKey && (this.advData[t] ? this.advData[t]++ : this.advData[t] = 1, this.saveData())
		}
		static resetCount(t) {
			this.getAdvDb(t) && (this.advData[t] = 0, this.saveData())
		}
		static resetAllCount() {
			let t = Object.keys(this.advData);
			for (let e = 0; e < t.length; e++) this.resetCount(t[e])
		}
		static updateCdByType(t) {
			let e = this.getAdvDb(t);
			if (!e) return;
			let a = this.advCnf[e.advType];
			a && (a.nextTime = Timer.time + a.deltaTime)
		}
		static dispatchAdv(t, e = null, a = !1, i = !1) {
			if (!t) return !1;
			if (!this.hasAdv(t)) return !1;
			if (console.log("调用广告", t), !a && !this.checkActive(t)) return !1;
			i && (this.panelAdvLoading ? mgrPanel.openPanel(this.panelAdvLoading, {
				advName: t,
				params: e
			}) : Logger.error("mgrAdv.dispatchAdv 找不到panelAdvLoading."));
			let s = this.getAdvDb(t);
			s.pauseSound && mgrSound.musicEnabled && (this.bSoundPaused = !0, mgrSound.pauseSound());
			let n = this.advCnf[s.advType];
			switch (n && (n.nextTime = Timer.time + n.deltaTime), console.log("触发广告", t), _G.SDK_VERSION) {
				case SDK_VERSIONS_VALUE.V6:
					this.dispatchToSdk_V6(t, e);
					break;
				case SDK_VERSIONS_VALUE.V5:
					this.dispatchToSdk_V5(t, e)
			}
			return !0
		}
		static closeAdv(t) {
			switch (_G.SDK_VERSION) {
				case SDK_VERSIONS_VALUE.V6:
					this.closeAdv_V6(t);
					break;
				case SDK_VERSIONS_VALUE.V5:
					Logger.error("关闭广告未接入..")
			}
		}
		static closeNativeAdv(t, e) {
			if (!t) return;
			let a = this.getAdvDb(t);
			if (!a) return;
			let i = e ? 1 : 0,
				s = JSON.stringify({
					advName: t
				});
			SDKBridge.sendToSdk("/c/closeNativeAdv", {
				advId: a.advId,
				closeType: i,
				userData: s
			})
		}
		static statisVideoShow(t) {
			let e = this.getAdvDb(t);
			e && e.tag && GameStatistics.statisVideoPointEvent(e.tag, 1)
		}
		static statisVideoClick(t) {
			let e = this.getAdvDb(t);
			e && e.tag && GameStatistics.statisVideoPointEvent(e.tag, 2)
		}
		static dispatchToSdk_V5(t, e) {
			let a = this.getAdvDb(t),
				i = JSON.stringify({
					advName: t,
					params: e
				}),
				s = a.advId;
			this.isNoAds ? Timer.callLater(.1, () => {
				this.onAdvShowResult_V5({
					code: 1,
					userData: i,
					message: "no ads."
				})
			}) : (SDKBridge.sendToSdk("/adv/openAdv", {
				advId: s,
				type: a.advType,
				userData: i
			}), (_G.H5_TEST || DEBUG_MODE$1) && Timer.callLater(1, () => {
				this.onAdvShowResult_V5({
					code: 1,
					userData: i,
					message: "test adv v5 msg suc"
				}), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `[debug]:弹出[${a.desc}]成功`)
			}))
		}
		static onAdvShowResult_V5(t) {
			let e = t.code.toString(),
				a = t.message,
				i = JSON.parse(t.userData);
			this.getAdvDb(i.advName);
			switch (e) {
				case "0":
					this.onAdvFail(i, a);
					break;
				case "1":
					this.onAdvSuc(i);
					break;
				case "2":
				case "3":
				case "4":
					break;
				case "5":
					this.onAdvClick(i);
					break;
				case "6":
				case "7":
					break;
				default:
					Logger.error(`adv unkown code:${e}`)
			}
		}
		static dispatchToSdk_V6(t, e) {
			let a = this.getAdvDb(t),
				i = JSON.stringify({
					advName: t,
					params: e
				}),
				s = a.advId;
			switch (a.advType) {
				case "video":
					_G.sendMsg(BASE_MSG.SDK_VIDEO_VISIBLE, !0), this.video_mode.bVideo || (s = "1");
					break;
				case "banner":
					this._openBannerNativeAdv({
						advName: t,
						params: e
					})
			}
			this.isNoAds ? Timer.callLater(.1, () => {
				this.onAdvShowResult_V6({
					code: 1,
					userData: i,
					msg: "no ads."
				})
			}) : (SDKBridge.sendToSdk("/c/openAdv", {
				advId: s,
				userData: i,
				tag: a.tag
			}), (_G.H5_TEST || DEBUG_MODE$1) && Timer.callLater(1, () => {
				this.onAdvShowResult_V6({
					code: 1,
					userData: i,
					msg: "test adv v6 msg suc"
				}), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `[debug]:弹出[${a.desc}]成功`);
				let t = ["http://imgwsdl.vivo.com.cn/appstore/developer/icon/20180807/20180807121104553016.png", "http://imgwsdl.vivo.com.cn/appstore/developer/icon/20180321/201803211747514635890.jpg"],
					e = ["这里是广告描述", "这里是广告描述这里是广告描述这里是广告描述这里是广告描述", "这里是广告描述这里是广告描述这里是广告描述这里是广告描述这里是广告描述这里是广告描述这里是广告描述这里是广告描述"],
					s = ["广告标题", "这里是广告标题"];
				this.openNativeAdvResult({
					code: 1,
					userData: i,
					msg: "test adv v6 native msg suc",
					nativeData: {
						url: t[Mathf.random(t.length) - 1],
						desc: e[Mathf.random(e.length) - 1],
						title: s[Mathf.random(s.length) - 1],
						targetTitle: "查看详情"
					}
				})
			}))
		}
		static closeAdv_V6(t) {
			if (!t) return;
			let e = this.getAdvDb(t);
			if (!e) return;
			Logger.log("mgrAdv.closeAdv", t), "banner" == e.advType && this._closeBannerNativeAdv();
			let a = JSON.stringify({
				advName: t
			});
			SDKBridge.sendToSdk("/c/closeAdv", {
				advId: e.advId,
				userData: a
			})
		}
		static _openBannerNativeAdv(t) {
			_G.H5_TEST && mgrPanel.openPanel(DebugBanner), this.panelNativeBanner ? mgrPanel.openPanelWithSingleton(this.panelNativeBanner, {
				userData: t
			}) : Logger.warn("mgrAdv._openBannerNativeAdv 找不到panelNativeBanner.")
		}
		static _closeBannerNativeAdv() {
			_G.sendMsg(BASE_MSG.ADV_CLOSE_NATIVE_BANNER)
		}
		static onAdvShowResult_V6(t) {
			let e = t.code.toString(),
				a = JSON.parse(t.userData || "{}");
			"1" == e ? this.onAdvSuc(a) : "0" == e ? this.onAdvFail(a, t.msg) : Logger.log("广告未知code:", e)
		}
		static onAdvSuc(t) {
			let e = this.getAdvDb(t.advName);
			e.pauseSound && this.bSoundPaused && (this.bSoundPaused = !1, mgrSound.resumeSound()), this.addCount(e.advName), "video" == e.advType && (_G.sendMsg(BASE_MSG.SDK_VIDEO_VISIBLE, !1), BaseFacade.mGoal.commit(BASE_ACTION_ID.VIDEO_SHOW_SUC, 1, e.advName)), ("video" != e.advType || this.video_mode.bWatch) && _G.sendMsg(BASE_MSG.ADV_SHOW_SUC, t), Logger.log("广告弹出成功:", t.advName)
		}
		static onAdvFail(t, e) {
			let a = this.getAdvDb(t.advName);
			a.pauseSound && this.bSoundPaused && (this.bSoundPaused = !1, mgrSound.resumeSound()), "video" == a.advType && (_G.sendMsg(BASE_MSG.SDK_VIDEO_VISIBLE, !1), 1 == db.cop.b_ad_video_replay_prompt && mgrAlert.alertDialog("需要观看完整视频才能获得奖励", "提示", () => {
				mgrAdv.dispatchAdv(t.advName, t, !0, !0)
			}, () => {}, "确定", "取消", "UI_CLOSE_DIALOG")), _G.sendMsg(BASE_MSG.ADV_SHOW_FAIL, t), "video" == a.advType && e && _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "no ads"), Logger.log("广告弹出失败:", t.advName)
		}
		static openNativeAdvResult(t) {
			let e = t.code.toString();
			if (Logger.log("mgrAdv:openNativeAdvResult code:", e), "1" == e) {
				let e = JSON.parse(t.userData || "{}"),
					a = this.getAdvDb(e.advName);
				a ? "interstitial" == a.advType ? this._openInstNativeAdv(t.nativeData, e) : _G.sendMsg(BASE_MSG.NATIVE_ADV_LOADED, {
					nativeData: t.nativeData,
					userData: e
				}) : Logger.error("mgrAdv.openNativeAdvResult userData数据异常")
			} else Logger.log("打开原生广告失败:", t.msg)
		}
		static _openInstNativeAdv(t, e) {
			this.panelNativeAdv ? mgrPanel.openPanelWithSingleton(this.panelNativeAdv, {
				nativeData: t,
				userData: e
			}) : Logger.warn("mgrAdv._openInstNativeAdv 找不到panelNativeAdv.")
		}
		static clickNativeAdvResult_V6(t) {
			Logger.warn("这个消息好像没有作用")
		}
		static onNativeAdvClick(t, e) {
			let a = this.getAdvDb(t);
			if (!a) return;
			e && (e.bClick = !0);
			let i = JSON.stringify(e);
			SDKBridge.sendToSdk("/c/clickNativeAdv", {
				advId: a.advId,
				userData: i,
				tag: a.tag
			}), (_G.H5_TEST || DEBUG_MODE$1) && Timer.callLater(1, () => {
				this.clickAdvResult_V6({
					code: 1,
					userData: i,
					msg: "test native msg click"
				})
			})
		}
		static clickAdvResult_V6(t) {
			let e = t.code;
			if (Logger.log("mgrAdv:clickAdvResult code:", e), "1" == e) {
				let e = JSON.parse(t.userData || "{}");
				this.onAdvClick(e)
			}
		}
		static onAdvClick(t) {
			"video" != this.getAdvDb(t.advName).advType || this.video_mode.bWatch || _G.sendMsg(BASE_MSG.ADV_SHOW_SUC, t), _G.sendMsg(BASE_MSG.ADV_CLICK_SUC, t)
		}
		static onAdvVoidCount_V6(t) {
			t && (this.advCnf.video.enable = !!t.video, this.advCnf.interstitial.enable = !!t.interstitial, this.advCnf.banner.enable = !!t.banner, this.advCnf.embedded.enable = !!t.native), _G.sendMsg(BASE_MSG.SDK_COP_CHANGED)
		}
	}
	mgrAdv.COP_RATIOS = {}, mgrAdv.video_mode = {
		bVideo: !0,
		bWatch: !0
	}, mgrAdv.advCnf = {
		video: {
			enable: !0,
			deltaTime: DEFAULT_ADV_SHOW_DELTA_TIME,
			nextTime: 0,
			maxCount: 0
		},
		interstitial: {
			enable: !0,
			deltaTime: DEFAULT_ADV_SHOW_DELTA_TIME,
			nextTime: 0,
			maxCount: 0
		},
		banner: {
			enable: !0,
			deltaTime: DEFAULT_ADV_SHOW_DELTA_TIME,
			nextTime: 0,
			maxCount: 0
		},
		embedded: {
			enable: !0,
			deltaTime: DEFAULT_ADV_SHOW_DELTA_TIME,
			nextTime: 0,
			maxCount: 0
		},
		url: {
			enable: !0,
			deltaTime: DEFAULT_ADV_SHOW_DELTA_TIME,
			nextTime: 0,
			maxCount: 0
		}
	}, mgrAdv.advPointCnf = {}, mgrAdv.bSoundPaused = !1;
	class mgrWordFilter extends _mgrBase {
		static onload() {
			this._loadWords()
		}
		static _loadWords() {
			if (!this.badwords)
				if (db.get_badword_db_arr) {
					let t = db.get_badword_db_arr();
					for (let e = 0; e < t.length; e++) t[e] = t[e].word;
					this.badwords = t
				} else this.badwords = []
		}
		static checkStr(t) {
			if (!t) return !0;
			let e = this.badwords;
			for (let a = 0; a < e.length; a++)
				if (t.indexOf(e[a]) >= 0) return !1;
			return !0
		}
		static filterStr(t, e) {
			e = e || this.REP_STR;
			let a = this.badwords;
			for (let i = 0; i < a.length; i++) t = t.replace(a[i], e);
			return t
		}
		static hasSymbol(t) {
			return !!t.match(this.REP_NO_SYMBOL)
		}
		static filterSymbol(t) {
			return t ? t = t.replace(this.REP_NO_SYMBOL, "") : ""
		}
	}
	mgrWordFilter.REP_STR = "**", mgrWordFilter.REP_NO_SYMBOL = /[\!\@\#\$\%\^\&\*\(\)\`\~\<\>\,\.\/\?\;\:\'\"\[\]\{\}\\\|\-\=\_\+\n\r\t\b ]/g;
	class mgrInside extends _mgrBase {
		static onload() {}
		static getGameAward(t, e) {
			return mgrOutside.getGameAward(t, e)
		}
		static checkCztgPlayable(t) {
			mgrOutside.checkGamePlayable(db.game_cnf.cztg_cost[1], "cztg", mgrI18n.getText("panelInside.2"), t)
		}
		static get leftCztgTime() {
			return mgrOutside.timeData.cztg - Timer.time
		}
		static loadCaiZhuangTuiGuang(t) {
			let e = new ResLoader;
			e.add(db.get_model_db(db.MODEL_DB_ID.xinfeng).resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.lihe).resPath, RES_TYPE.PREFAB3D), e.add(db.get_animation_db(MODEL_ANIM.LIHE_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.LIHE_CLOSE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.P_LIHE_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.P_LIHE_CLOSE).path, RES_TYPE.ANIMATIONCLIP), mgrAlert.openWait(e, t)
		}
		static startCztg() {
			this.curOrders = null, this.caiZhuangScore = 0;
			let t = mgrOutside.getGameLevel(db.get_caizhuang_db_arr()),
				e = db.get_caizhuang_db(t);
			if (this.curCztgDb = e, !e) return;
			let a = [];
			for (let t = 0; t < e.partsCount.length; t++) {
				let n = e.partsCount[t];
				for (let o = 0; o < n; o++) {
					let n = t + 1,
						o = [];
					for (let t = 0; t < n; t++) {
						var i = Mathf.random(15) - 1,
							s = Mathf.random(db.get_tag_type_db_arr().length);
						o.push({
							partType: i,
							tag: s
						})
					}
					a.push({
						czDb: e,
						parts: o,
						roleId: this.getRandomRole()
					})
				}
			}
			if (_G.isGuiding) {
				let t = BaseFacade.mItem.getItemByType(2, 1, 0)[0],
					e = db.get_item_db(t);
				a[0].parts[0].partType = 0, a[0].parts[0].tag = DbExt.getTag1(e), t = BaseFacade.mItem.getItemByType(2, 1, 5)[0], e = db.get_item_db(t), a[1].parts[0].partType = 5, a[1].parts[0].tag = DbExt.getTag1(e)
			}
			this.curOrders = a, BaseFacade.mGoal.commit(ACTION_ID.PLAY_GAME, 1, "cztg"), mgrSdk.tryStartRecord(), GameStatistics.statisOnStageStart(7510)
		}
		static calcStar(t, e) {
			let a = Math.abs((t - e) / t);
			return Mathf.clamp(5 - (10 * a | 0), 0, 5)
		}
		static finishOrder(t, e) {
			e = Mathf.clamp(e, 0, db.game_cnf.order_star_rate.length - 1);
			let a = t.czDb;
			this.caiZhuangScore += a.partsScore[t.parts.length - 1] * db.game_cnf.order_star_rate[e] | 0
		}
		static finishCztg(t) {
			if (GameStatistics.statisCommonEvent(3065), GameStatistics.statisOnStageEnd(7510), BaseFacade.mItem.addItem("1005", 5, null), BaseFacade.mItem.subItem("1020", db.game_cnf.cztg_cost[1], null), mgrOutside.timeData.cztg = Timer.time + mgrOutside.playDeltaTime, t) {
				let t = mgrOutside.getGameLevel(db.get_caizhuang_db_arr()),
					e = db.get_caizhuang_db(t);
				return this.getGameAward(e, 100)
			}
			return this.getGameAward(this.curCztgDb, this.caiZhuangScore)
		}
		static getRandomRole() {
			let t, e = Object.keys(db.get_role_db_map());
			for (;
				"main" == (t = e[Mathf.random(e.length) - 1]););
			return t
		}
		static checkPaiShouPlayable(t) {
			mgrOutside.checkGamePlayable(db.game_cnf.pai_shou_cost[1], "paiShou", mgrI18n.getText("panelInside.1"), t)
		}
		static get leftPaiShouTime() {
			return mgrOutside.timeData.paiShou - Timer.time
		}
		static loadPaiShou(t) {
			let e = new ResLoader;
			e.add(db.get_animation_db(MODEL_ANIM.PAISHOU_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_PAISHOU_IDLE).path, RES_TYPE.ANIMATIONCLIP), mgrAlert.openWait(e, t)
		}
		static startPaiShou() {
			this.paiShouScore = 0;
			let t = mgrOutside.getGameLevel(db.get_paishou_db_arr());
			this.curPaiShouDb = db.get_paishou_db(t), BaseFacade.mGoal.commit(ACTION_ID.PLAY_GAME, 1, "paishou"), mgrSdk.tryStartRecord(), GameStatistics.statisOnStageStart(7509)
		}
		static addPaiShouScore(t) {
			return t <= .25 || t >= .75 ? (this.paiShouScore += .5 * this.curPaiShouDb.score | 0, 1) : (this.paiShouScore += this.curPaiShouDb.score, 2)
		}
		static finishPaiShou(t) {
			if (GameStatistics.statisCommonEvent(3034), GameStatistics.statisOnStageEnd(7509), BaseFacade.mItem.addItem("1005", 5, null), BaseFacade.mItem.subItem("1020", db.game_cnf.pai_shou_cost[1], null), mgrOutside.timeData.paiShou = Timer.time + mgrOutside.playDeltaTime, t) {
				let t = mgrOutside.getGameLevel(db.get_paishou_db_arr()),
					e = db.get_paishou_db(t);
				return this.getGameAward(e, 100)
			}
			return this.getGameAward(this.curPaiShouDb, this.paiShouScore)
		}
	}
	class mgrRankHuDong extends _mgrBase {
		static onload() {
			BaseFacade.mSwitch.dailyActive && (FileRecord.setData("gift_count", db.game_cnf.gift_count), FileRecord.setData("gift_time", Timer.time + db.game_cnf.gift_delta_time))
		}
		static get giftCount() {
			return FileRecord.getData("gift_count") || db.game_cnf.gift_count
		}
		static get nextGiftTime() {
			return FileRecord.getData("gift_time")
		}
		static giftFinish() {
			FileRecord.setData("gift_count", this.giftCount - 1), FileRecord.setData("gift_time", Timer.time + db.game_cnf.gift_delta_time), _G.sendMsg("EGG_FINISH")
		}
	}
	const DAILY_QUEST_AWARD = "DAILY_QUEST_AWARD";
	class mgrDailyQuest extends _mgrBase {
		static onload() {
			let t = mQuest.getAllQuest(8, 1),
				e = mQuest.getAllQuest(8, 2),
				a = BaseFacade.mQuest;
			if (BaseFacade.mSwitch.dailyActive) {
				FileRecord.setData(DAILY_QUEST_AWARD, !1);
				let s = a.getQuestByType(8);
				for (var i = 0; i < s.length; i++) a.cancel(s[i]);
				for (let i = 0; i < db.game_cnf.daily_quest_count; i++) {
					let s = i < 4 ? t : e,
						n = s.splice(Mathf.random(s.length) - 1, 1);
					n && 1 == n.length ? a.accept(n[0]) : console.error("日常任务不足!!")
				}
			}
		}
		static start() {}
		static getCurQuests() {
			return BaseFacade.mQuest.getQuestByType(8)
		}
		static hasCommitQuest() {
			let t = BaseFacade.mQuest.getQuestByType(8);
			for (var e = 0; e < t.length; e++)
				if (BaseFacade.mQuest.isCommitable(t[e])) return !0;
			return !1
		}
		static getCompleteCount() {
			let t = 0,
				e = BaseFacade.mQuest.getQuestByType(8);
			for (var a = 0; a < e.length; a++) BaseFacade.mQuest.query(e[a]).state >= QUEST_STATE.COMMITABLE && t++;
			return t
		}
		static get isDailyAward() {
			return FileRecord.getData(DAILY_QUEST_AWARD) || !1
		}
		static getDailyAward(t) {
			if (this.isDailyAward) return !1;
			FileRecord.setData(DAILY_QUEST_AWARD, !0);
			let e = {
				itemId: "1000",
				count: db.game_cnf.daily_quest_dianmond_count
			};
			t ? (e.count *= 3, GameStatistics.statisCommonEvent(7008, 1)) : GameStatistics.statisCommonEvent(7008, 0), mgrAlert.addAndAlert(e, t ? 37 : 36);
			let a = mgrDailyQuest.getCurQuests()[0],
				i = {
					state: QUEST_STATE.FINISHED,
					questDb: db.get_quest_db(a)
				};
			return _G.sendMsg(BASE_MSG.QUEST_STATE_CHANGE, i), !0
		}
	}
	class mgrSign extends _mgrBase {
		static onload() {
			this.updateDay(), this.registerMsg({
				[BASE_MSG.DAILY_SWITCH_ACTIVE]: this.onDailySwitchActive.bind(this)
			})
		}
		static saveData() {
			FileRecord.setData("KEY_SIGN_DATA", this.signData)
		}
		static onDailySwitchActive() {
			this.updateDay()
		}
		static updateDay() {
			this.signData = FileRecord.getData("KEY_SIGN_DATA"), this.signData ? BaseFacade.mSwitch.dailyActive && this.signData.index > 0 && (this.signData.day++, this.signData.index = 0, this.signData.nextTime = 0) : (this.signData = {
				day: 0,
				index: 0,
				nextTime: 0
			}, this.saveData())
		}
		static dayToIndex() {
			let t = this.signData.day,
				e = db.get_sign_db_arr().length - 3;
			return t >= e ? (t - e) % 3 + e : t
		}
		static getDailyItems() {
			return db.get_sign_db(this.dayToIndex()).items
		}
		static get isTodayFinish() {
			return this.signData.index > 4
		}
		static canGetAward() {
			return !(this.signData.index > 4 || this.signData.nextTime > Timer.time)
		}
		static getAward(t) {
			let e = 7302 + this.signData.index;
			if (t) {
				let t = [];
				for (let e = this.signData.index; e < 5; e++) {
					let a = this.getDailyItems()[e];
					a && (t.push({
						itemId: a[0],
						count: a[1]
					}), this.signData.index++)
				}
				t.length && (GameStatistics.statisCommonEvent(e, 1), this.saveData(), mgrAlert.addAndAlertItems(t, 34), _G.sendMsg("SIGN_UPDATE"))
			} else {
				let t = this.getDailyItems()[this.signData.index];
				if (t) {
					GameStatistics.statisCommonEvent(e, 0);
					let a = db.game_cnf.sign_award_delta_time[this.signData.index];
					a && (this.signData.nextTime = Timer.time + a), this.signData.index++, this.saveData(), mgrAlert.addAndAlert({
						itemId: t[0],
						count: t[1]
					}, 33), _G.sendMsg("SIGN_UPDATE")
				}
			}
		}
	}
	class mgrCat extends _mgrBase {
		static onload() {
			this.lastCoinTime = FileRecord.getData("KEY_CAT_COIN_TIME"), this.lastCoinTime || (this.lastCoinTime = Timer.time, this.saveData())
		}
		static start() {
			this.updateCoin()
		}
		static saveData() {
			FileRecord.setData("KEY_CAT_COIN_TIME", this.lastCoinTime)
		}
		static updateCoin() {
			let t = Timer.time - this.lastCoinTime;
			if (t < 5) return;
			let e = BaseFacade.mUp.getUpDb("cat"),
				a = e.coinPerMin;
			this.curCoinCount = Math.min(a * (t / 60) | 0, e.catCoinMax)
		}
		static addExp() {
			BaseFacade.mItem.addItem("cat_exp", 1, null)
		}
		static getPays() {
			let t = this.catLevel,
				e = BaseFacade.mUp.getAllUp("cat"),
				a = 0;
			for (let i = 1; i < t; i++) a += e[i].reqCnt1;
			let i = BaseFacade.mPay.getAllPays(3);
			return i.sort(sort_pay_id_by_order), (i = i.slice(a, a + e[t].reqCnt1)).sort(sort_pay_id_by_switch), i
		}
		static get catLevel() {
			return BaseFacade.mUp.getLevel("cat")
		}
		static getCoinPercent() {
			this.updateCoin();
			let t = BaseFacade.mUp.getUpDb("cat");
			return this.curCoinCount / t.catCoinMax
		}
		static get isMax() {
			return BaseFacade.mUp.isMax("cat")
		}
		static get limitLevel() {
			let t = BaseFacade.mUp.getUpDb("cat");
			return t.roleLvLimit > mgrGame.getRoleLevel() ? t.roleLvLimit : 0
		}
		static getProgressStr() {
			let t = BaseFacade.mUp.getUpDb("cat");
			return `${BaseFacade.mItem.getItemCount("cat_exp")}/${t.reqCnt1}`
		}
		static getCoin() {
			BaseFacade.mItem.addItem("1001", this.curCoinCount, 20), this.lastCoinTime = Timer.time, this.curCoinCount = 0, this.saveData()
		}
		static lvup() {
			BaseFacade.mUp.lvupAttr("cat")
		}
	}
	mgrCat.curCoinCount = 0, mgrCat.lastCoinTime = 0;
	class mgrOffline extends _mgrBase {
		static onload() {
			this.offlineData = FileRecord.getData("KEY_OFFLINE_DATA"), this.offlineData || this.resetOfflineTime()
		}
		static saveData() {
			FileRecord.setData("KEY_OFFLINE_DATA", this.offlineData)
		}
		static resetOfflineTime() {
			this.offlineData ? this.offlineData.lastTime = Timer.time : this.offlineData = {
				lastTime: Timer.time
			}, this.saveData()
		}
		static get offlineTime() {
			return Math.min(this.MAX_OFFLINE_TIME, Timer.time - this.offlineData.lastTime)
		}
		static get offlinePerSecond() {
			return mgrGame.curRoleUpDb ? mgrGame.curRoleUpDb.offlineProfit : 0
		}
		static get offlineProfit() {
			let t = this.offlineTime;
			if (t > 1800) {
				return Math.floor(t * this.offlinePerSecond)
			}
			return 0
		}
		static tryGetOfflineProfit(t = !1) {
			let e = this.offlineData;
			if (this.offlineProfit <= 0) return mgrAlert.alertText(mgrI18n.getText("mgrOffline.1")), null; {
				let a = this.offlineProfit * (t ? 3 : 1);
				return BaseFacade.mItem.addItem("1001", a, t ? 23 : 22), e.lastTime = Timer.time, GameStatistics.statisCommonEvent(7061, t ? 1 : 0), this.saveData(), {
					itemId: "1001",
					count: a
				}
			}
		}
	}
	mgrOffline.firstPlayGame = !1, mgrOffline.MAX_OFFLINE_TIME = 9e3;
	class mgrRoleTest extends _mgrBase {
		static onload() {
			this.roleTestMap = db.get_role_test_map(), this.initTestedRoleData()
		}
		static initTestedRoleData() {
			this.roleData = FileRecord.getData("TESTED_ROLE_DATA") || {}
		}
		static checkIsTested(t) {
			return !!this.roleData[t]
		}
		static markRoleTested(t) {
			this.roleData[t] = !0, FileRecord.setData("TESTED_ROLE_DATA", this.roleData)
		}
		static addRecordTestCount(t) {
			let e = FileRecord.getData("TEST_COUNT") || {};
			e[t] ? e[t]++ : e[t] = 1, FileRecord.setData("TEST_COUNT", e)
		}
		static getRecordTestCount(t) {
			let e = FileRecord.getData("TEST_COUNT") || {};
			return console.log("查看次数", e[t]), e[t] || 0
		}
		static addRecordAdTest(t) {
			let e = FileRecord.getData("TEST_AD") || {};
			e[t] = !0, FileRecord.setData("TEST_AD", e)
		}
		static getRecordTestAd(t) {
			let e = FileRecord.getData("TEST_AD") || {};
			return console.log("查看是否解锁缘分测试密码", e[t]), e[t] || !1
		}
		static finishTest(t) {
			if (6 != t.length) return void console.warn("颜色数据出错，需要6个颜色数据", t);
			let e = {};
			for (let a = 0; a < t.length; a++) {
				let i = t[a];
				e[i] ? e[i]++ : e[i] = 1
			}
			let a = 0;
			for (let t in e) {
				let i = e[t];
				i >= a && (a = i)
			}
			let i = [];
			for (let t in e) {
				e[t] == a && i.push(parseInt(t))
			}
			let s = [];
			for (let t in this.roleTestMap) {
				let e = this.roleTestMap[t];
				e && e.colorMaxRatio.indexOf(a) >= 0 && s.push(e)
			}
			let n = null;
			for (let t = 0; t < s.length; t++) {
				let e = s[t];
				this.isArrDataEqual(e.maxColorIds, i) && (n = e)
			}
			return n
		}
		static isArrDataEqual(t, e) {
			if (t.length != e.length) return !1;
			t = t.sort(), e = e.sort();
			let a = !0;
			for (let i = 0; i < t.length; i++)
				if (t[i] != e[i]) {
					a = !1;
					break
				} return a
		}
	}
	mgrRoleTest.roleTestMap = {};
	class mgrDebug extends _mgrBase {
		static onload() {
			CrashReporter.getInstance().setDataHook(function() {
				return {
					uid: mgrSdk.uuid,
					channelName: mgrSdk.h5_channel,
					gameVersion: _G.GAME_VERSION
				}
			})
		}
	}
	class mgrManicure extends _mgrBase {
		static onload() {
			this.loadManicureLayout(() => {})
		}
		static loadManicureLayout(t) {
			let e = db.get_manicure_part_db_map();
			for (let t in e) {
				let a = e[t];
				a.typeData = db.get_manicure_part_type_db(a.type)
			}
			let a = [],
				i = db.get_manicure_part_type_db_map(),
				s = [];
			for (let t in i) s.push(i[t]);
			s = Tools.sortArrayByField(s, "-removeOrder");
			for (let t = 0; t < s.length; t++) {
				let e = s[t];
				0 != e.removeOrder && a.push(e.id)
			}
			this.AVATAR_REMOVABLE_PART_TYPES = a;
			for (let t in i) {
				let e = i[t],
					a = {};
				for (let t = 0; t < e.banSlotIndexes.length; t++) {
					a[e.banSlotIndexes[t]] = !0
				}
				e.banSlotIndexes = a
			}
			let n = 0;
			n++, mgrRes.loadRes("res/cfg/mpart/container_layout.json", Laya.Loader.JSON, e => {
				let a = e,
					i = db.get_manicure_part_container_db_map();
				for (let t in i) {
					let e = i[t],
						s = e.id,
						n = a[s];
					n || console.log("mgrCfg.loadManicureLayout container layouts not found! containerId = %d", s), e.layouts = n
				}--n <= 0 && t(!!e)
			}), n++, mgrRes.loadRes("res/cfg/mpart/part_layout.json", Laya.Loader.JSON, a => {
				let i = a;
				for (let t in e) {
					let a = e[t],
						s = i[a.id] || {};
					for (let t = 1; t <= a.typeData.slotCount; t++)
						if (!s[t]) {
							let e = {
								apx: 0,
								apy: 0,
								parentApx: 0,
								parentApy: 0,
								rotate: 0,
								scaleX: 1,
								scaleY: 1,
								x: 0,
								y: 0,
								order: 0
							};
							for (let t in a.typeData.defaultLayout) {
								let i = a.typeData.defaultLayout[t];
								e[t] = i
							}
							s[t] = e
						} a.layouts = s
				}
				this.RING_SCHEMATIC_LAYOUTS = i[this.RING_SCHEMATIC_PART_ID] || {}, --n <= 0 && t(!!a)
			}), n++, mgrRes.loadRes("res/cfg/mpart/part_grid.json", Laya.Loader.JSON, a => {
				for (let t in e) {
					let i = e[t],
						s = a[i.id] || {},
						n = 0;
					for (let t in s) s[t] && n++;
					let o = {};
					for (let t = 1; t <= Math.max(i.typeData.slotCount, n); t++) {
						s[t]
					}
					i.grids = o
				}--n <= 0 && t(!!a)
			}), n++, mgrRes.loadRes("res/cfg/mpart/part_special_resources.json", Laya.Loader.JSON, e => {
				for (let t in e) {
					let a = e[t],
						i = parseInt(t),
						s = db.get_manicure_part_db(i);
					s && (s.resources = [
						[a[1][1], a[1][2]]
					])
				}--n <= 0 && t(!!e)
			})
		}
		static createResNode(t, e) {
			let a = new Laya.Image;
			return 1 == t && (a.skin = e, a.anchorX = .5, a.anchorY = .5, a.pos(0, 0)), a
		}
		static removeResNode(t) {
			t.destroy()
		}
		static createPartCursor(t) {
			let e = db.get_manicure_part_db(t);
			if (!e) return void console.warn("mgrManicure.createPartCursor partData not found! partId = %d", t);
			let a = new Laya.Box,
				i = [];
			for (let t in e.resources) {
				let s = e.resources[t],
					[n, o] = s,
					r = this.createResNode(n, o);
				a.addChild(r), i.push(r)
			}
			let s = [],
				n = i[0];
			n && e.effectResources;
			for (let t in e.effectResources) {
				let a = e.effectResources[t],
					i = mgrManicure.createResNode(a.resType, a.id);
				n.addChild(i), n.zOrder = a.order, i.pos(a.pos.x, a.pos.y), i.scale(a.scaleX, a.scaleY), i.rotation = a.rotate, s.push(i)
			}
			return a
		}
	}
	mgrManicure.RING_SCHEMATIC_PART_ID = 10000001, mgrManicure.MANICURE_AVATAR_GRID_SIZE = 10;
	class mgrCp extends _mgrBase {
		static onload() {
			this.npcData = FileRecord.getData("npc_data") || {
				npc: {},
				cp: {},
				testCount: 0
			}
		}
		static saveData() {
			FileRecord.setData("npc_data", this.npcData)
		}
		static unlockNpc(t) {
			this.npcData.npc[t] = !0, this.saveData()
		}
		static unlockCp(t) {
			this.npcData.cp[t] = !0, this.saveData()
		}
		static isNpcLock(t) {
			return !this.npcData.npc[t]
		}
		static isCpLock(t) {
			return !this.npcData.cp[t]
		}
		static getTestCount() {
			return this.npcData.testCount || 0
		}
		static addTestCount() {
			this.npcData.testCount++, this.npcData.testCount <= 3 && GameStatistics.statisCommonEvent(2592, this.npcData.testCount - 1), _G.sendMsg("MANICURE_HEART_CHANGE", {
				bAdd: !0
			}), this.saveData()
		}
		static resetTestCount() {
			this.npcData.testCount = 0, _G.sendMsg("MANICURE_HEART_CHANGE"), this.saveData()
		}
	}
	class mgrShoe extends _mgrBase {
		static onload() {
			this.shoeData = FileRecord.getData("shoe_data") || {
				pieces: []
			}
		}
		static saveData() {
			FileRecord.setData("shoe_data", this.shoeData)
		}
		static randomShoeSuits() {
			let t = Object.keys(db.get_shoe_suit_db_map());
			Mathf.shuffle(t);
			let e = t.slice(0, 4),
				a = t.slice(0, 4),
				i = t.slice(0, 4),
				s = t.slice(0, 4);
			return Mathf.shuffle(e), Mathf.shuffle(a), Mathf.shuffle(i), Mathf.shuffle(s), {
				1: e,
				2: a,
				3: i,
				0: s
			}
		}
		static openWaitRes(t, e) {
			let a = [];
			for (let e = 0; e < t.length; e++) {
				let i = db.get_shoe_part_db(t[e]);
				a = a.concat(i.viewList)
			}
			let i = new ResLoader("mgrShoe");
			for (let t = 0; t < a.length; t++) {
				let e = a[t];
				e && (e.endsWith(".png") ? i.addImage(e) : i.addBuffer(db.get_spine_db(e).skeletonData))
			}
			mgrAlert.openWait(i, e)
		}
		static randomAddPiece() {
			let t = Mathf.random(this.totalPieceCount);
			for (let a = 0; a < this.totalPieceCount; a++) {
				var e = (a + t) % this.totalPieceCount;
				if (!this.shoeData.pieces[e]) {
					this.shoeData.pieces[e] = !0, this.saveData();
					let t = 0;
					for (let e = 0; e < this.shoeData.pieces.length; e++) this.shoeData.pieces[e] && t++;
					return GameStatistics.statisCommonEvent(2616 + t), t >= this.totalPieceCount && !mgrGame.isContractUnlock(SHOE_UNLOCK_CONTRACT_IDX) && mgrGame.contractUnlock(SHOE_UNLOCK_CONTRACT_IDX), _G.sendMsg("UNLOCK_SHOE_PIECES"), e
				}
			}
			return -1
		}
		static checkPieceUnlock(t) {
			if (null != t) return !!this.shoeData.pieces[t];
			for (let t = 0; t < this.totalPieceCount; t++)
				if (!this.shoeData.pieces[t]) return !1;
			return !0
		}
		static debug_resetPieces() {
			this.shoeData.pieces = []
		}
	}
	mgrShoe.totalPieceCount = 4;
	class mgrLoader {
		static get isLoading() {
			return 1 == this.state
		}
		static get isComplete() {
			return 2 == this.state
		}
		static onload(t) {
			0 == this.state && (this.state = 1, this.loadAllMgr(t))
		}
		static loadAllMgr(t) {
			let e = [mgrPanel, mgrWordFilter, mgrAdv, mgrAlert, mgrSound, mgrDebug];
			this.loadMgrs(e), BaseFacade.onLoad();
			let a = [mgrRank, mgrGuide, mgrMaterial, mgrLevel, mgrSign, mgrDailyQuest, mgrGame, mgrSkincare, mgrInside, mgrOutside, mgrPart, mgrRankHuDong, mgrSzz, mgrMangHe, mgrSuit, mgrPvp, mgrDream, mgrCat, mgrOffline, mgrRoleTest, mgrClassRoom, mgrColorEggs, mgrManicure, mgrCp, mgrShoe, mgrI18n];
			this.loadMgrs(a), this.state = 2, t && t(!0)
		}
		static loadMgrs(t) {
			for (let e = 0; e < t.length; e++) {
				t[e].onload()
			}
			for (let e = 0; e < t.length; e++) {
				t[e].start()
			}
		}
	}
	mgrLoader.state = 0;
	class AStarNode {
		constructor(t, e) {
			this.walkable = !0, this.costMultiplier = 1, this.x = t, this.y = e
		}
	}
	class AStarGrid {
		constructor(t, e) {
			this._height = e, this._width = t, this._nodes = [];
			for (let a = 0; a < e; a++) {
				this._nodes[a] = [];
				for (let e = 0; e < t; e++) this._nodes[a][e] = new AStarNode(e, a)
			}
		}
		getNode(t, e) {
			return this._nodes[e][t]
		}
		setEndNode(t, e) {
			return this._endNode = this._nodes[e][t], !!this._endNode || (console.error("setEndNode error:", t, e), !1)
		}
		setStartNode(t, e) {
			return this._startNode = this._nodes[e][t], !!this._startNode || (console.error("setStartNode error:", t, e), !1)
		}
		setWalkable(t, e, a) {
			this._nodes[e][t].walkable = a
		}
		isWalkable(t, e) {
			return this._nodes[e][t].walkable
		}
		get endNode() {
			return this._endNode
		}
		get height() {
			return this._height
		}
		get width() {
			return this._width
		}
		get startNode() {
			return this._startNode
		}
	}
	class AStar {
		constructor(t, e = !1) {
			this._straightCost = 1, this._diagCost = Math.SQRT2, this._diagEnabled = !1, this._grid = null, this._grid = t, this._diagEnabled = e, this._heuristic = this.diagonal
		}
		setGrid(t) {
			this._grid = t
		}
		getGrid() {
			return this._grid
		}
		searchPath(t, e) {
			let a = this._grid;
			return !!(a && a.setStartNode(t.x, t.y) && a.setEndNode(e.x, e.y)) && this.search()
		}
		search() {
			if (null == this._grid) return !1;
			this._open = [], this._closed = [];
			var t = this._grid.startNode;
			t.g = 0, t.h = this._heuristic(t), t.f = t.g + t.h;
			let e = this._grid.endNode,
				a = t;
			for (; a != e;) {
				let t = Math.max(0, a.y - 1),
					e = Math.min(this._grid.height - 1, a.y + 1),
					r = Math.max(0, a.x - 1),
					l = Math.min(this._grid.width - 1, a.x + 1);
				for (let c = t; c <= e; c++)
					for (let t = r; t <= l; t++) {
						var i;
						if (this._diagEnabled) {
							if ((i = this._grid.getNode(t, c)) == a || !i.walkable) continue
						} else {
							if (t != a.x && c != a.y) continue;
							if ((i = this._grid.getNode(t, c)) == a || !i.walkable || !this._grid.getNode(i.x, a.y).walkable || !this._grid.getNode(a.x, i.y).walkable) continue
						}
						let e = this._straightCost;
						a.x != i.x && a.y != i.y && (e = this._diagCost);
						var s = a.g + e * i.costMultiplier,
							n = this._heuristic(i),
							o = s + n;
						this.isOpen(i) || this.isClosed(i) ? i.f > o && (i.f = o, i.g = s, i.h = n, i.parent = a) : (i.f = o, i.g = s, i.h = n, i.parent = a, this._open.push(i))
					}
				if (this._closed.push(a), 0 == this._open.length) return !1;
				let c = this._open.length;
				for (let t = 0; t < c; t++)
					for (let e = t + 1; e < c; e++)
						if (this._open[t].f > this._open[e].f) {
							let a = this._open[t];
							this._open[t] = this._open[e], this._open[e] = a
						} a = this._open.shift()
			}
			return this.buildPath(), !0
		}
		buildPath() {
			let t = 1,
				e = this._grid,
				a = e.endNode;
			for (; a != e.startNode;) a = a.parent, t++;
			let i = new Array(t);
			for (a = e.endNode, i[--t] = a; a != e.startNode;) a = a.parent, i[--t] = a;
			this._path = i
		}
		get path() {
			return this._path
		}
		isOpen(t) {
			for (var e = 0; e < this._open.length; e++)
				if (this._open[e] == t) return !0;
			return !1
		}
		isClosed(t) {
			for (var e = 0; e < this._closed.length; e++)
				if (this._closed[e] == t) return !0;
			return !1
		}
		manhattan(t) {
			return Math.abs(t.x - this._grid.endNode.x) * this._straightCost + Math.abs(t.y + this._grid.endNode.y) * this._straightCost
		}
		euclidian(t) {
			var e = t.x - this._grid.endNode.x,
				a = t.y - this._grid.endNode.y;
			return Math.sqrt(e * e + a * a) * this._straightCost
		}
		diagonal(t) {
			var e = Math.abs(t.x - this._grid.endNode.x),
				a = Math.abs(t.y - this._grid.endNode.y),
				i = Math.min(e, a),
				s = e + a;
			return this._diagCost * i + this._straightCost * (s - 2 * i)
		}
		get visited() {
			return this._closed.concat(this._open)
		}
		searchPathWithViaPoints(t, e, ...a) {
			let i = this._grid;
			if (i) {
				let s = {
						x: t.x,
						y: t.y
					},
					n = [];
				for (let t = 0; t < a.length; t++) {
					let e = a[t];
					if (i.setStartNode(s.x, s.y), i.setEndNode(e.x, e.y), !this.search()) return null;
					(n = n.concat(this.path)).length > 0 && n.pop(), s = e
				}
				if (i.setStartNode(s.x, s.y), i.setEndNode(e.x, e.y), this.search()) return n.concat(this.path)
			}
			return null
		}
	}
	class UUID {
		constructor(t, e, a) {
			this.indexMax = t || 1e12, this.indexMin = e || 0, this.curIndex = a || this.indexMin
		}
		static nextId() {
			return this.globalUUID.next()
		}
		next() {
			return ++this.curIndex >= this.indexMax && (this.curIndex = this.indexMin + 1), this.curIndex % this.indexMax
		}
		getCurIndex() {
			return this.curIndex
		}
	}
	UUID.globalUUID = new UUID;
	class PartGetter {
		static getPartJumpType(t) {
			return null != this.cacheData[t] ? this.cacheData[t] : this.checkDream(t) ? 0 : this.checkBox(t) ? 1 : this.checkSzz(t) ? 2 : this.checkPvp(t) ? 3 : this.checkSign(t) ? 4 : this.checkLvup(t) ? 5 : this.checkLevel(t) ? 6 : this.checkShop(t) ? 7 : this.checkVideoShare(t) ? 8 : this.checkByDropIds(t, ["31", "32", "33"]) ? 15 : this.checkByDropIds(t, ["34", "35", "36"]) ? 16 : this.checkByDropIds(t, ["22", "23", "24"]) ? 9 : this.checkRoleLink(t, 8) ? 10 : this.checkRoleLink(t, 9) ? 11 : this.checkRoleLink(t, 10) ? 12 : this.checkRoleLink(t, 11) ? 13 : this.checkRoleLink(t, 12) ? 14 : this.checkCanNotGet(t) ? 17 : -1
		}
		static checkDream(t) {
			let e = mgrDream.getAllRole();
			for (var a = 0; a < e.length; a++)
				for (var i = db.get_role_db(e[a]).suits, s = 0; s < i.length; s++) {
					let e = db.get_suit_db(i[s]).lotteryParts;
					for (var n = 0; n < e.length; n++)
						if (this.cacheData[e[n]] = 0, e[n] == t) return !0
				}
			return !1
		}
		static checkBox(t) {
			for (var e = 0; e < db.game_cnf.mang_he_show_suits.length; e++) {
				var a = db.get_suit_db(db.game_cnf.mang_he_show_suits[e]).lotteryParts;
				for (let e = 0; e < a.length; e++)
					if (this.cacheData[a[e]] = 1, a[e] == t) return !0
			}
			return !1
		}
		static checkSzz(t) {
			let e = BaseFacade.mDrop.getAllDropItems(db.game_cnf.szz_lottery_drop_id);
			for (var a = 0; a < e.length; a++)
				if (this.cacheData[e[a].itemId] = 2, e[a].itemId == t) return !0;
			return !1
		}
		static checkPvp(t) {
			let e = mgrPvp.allPvpPartAward;
			for (var a = 0; a < e.length; a++)
				if (this.cacheData[e[a]] = 3, e[a] == t) return !0;
			return !1
		}
		static checkSign(t) {
			let e = db.get_sign_db_arr();
			for (var a = 0; a < e.length; a++)
				for (var i = e[a].items, s = 0; s < i.length; s++)
					if (this.cacheData[i[s][0]] = 4, i[s][0] == t) return !0;
			return !1
		}
		static checkLvup(t) {
			let e = !1;
			return Tools.forEachMap(db.get_role_up_db_map(), (a, i) => {
				for (var s = 0; s < i.length; s++)
					if (this.cacheData[i[s].itemId] = 5, i[s].itemId == t) return e = !0, !0
			}), e
		}
		static checkLevel(t) {
			let e = db.get_level_db_arr();
			for (var a = 0; a < e.length; a++) {
				var i = e[a];
				if (this.cacheData[i.itemId] = 6, i.itemId == t) return !0
			}
			return !1
		}
		static checkShop(t) {
			let e = !1;
			return Tools.forEachMap(db.get_pay_db_map(), (a, i) => {
				if (this.cacheData[i.getItemId] = 7, i.getItemId == t) return e = !0, !0
			}), e
		}
		static checkVideoShare(t) {
			let e = SHARE_AWARD_SUIT_ID,
				a = db.get_suit_db(e).parts || [];
			for (let e = 0; e <= a.length; e++)
				if (t == a[e]) return !0;
			return !1
		}
		static checkByDropIds(t, e) {
			for (let a = 0; a < e.length; a++) {
				let i = e[a],
					s = db.get_drop_db(i);
				if (s)
					for (let e = 0; e < s.items.length; e++) {
						if (t == s.items[e].id) return !0
					}
			}
			return !1
		}
		static checkRoleLink(t, e) {
			let a = `default_parts${e}`,
				i = db.game_cnf[a] || [];
			for (let e = 0; e < i.length; e++) {
				if (i[e] == t) return !0
			}
			return !1
		}
		static checkCanNotGet(t) {
			let e = ["14037", "17021", "19037", "21037", "22025", "23037", "24037", "13038", "18038", "20038", "19038", "21038", "22026", "23038"];
			for (let a = 0; a < e.length; a++) {
				if (e[a] == t) return !0
			}
			return !1
		}
	}
	PartGetter.cacheData = Object.create(null);
	class VerifyCfg {
		static verifyAll() {
			console.log("------ 验证开始 ------"), this.questDb(), this.nameDb(), this.itemDb(), this.testJump(), this.suitDb(), this.talkDb(), this.switchDb(), this.matConfig(), this.testOrder(), this.testPaintData(), console.log("------ 证完结束 ------")
		}
		static questDb() {
			let t = db.get_quest_db_map();
			Tools.forEachMap(t, function(t, e) {
				let a = e.goals[0];
				if (a) {
					let i = db.get_goal_db(a);
					e.desc && e.desc.indexOf(i.value + "") < 0 && console.error(`任务描述[${t}]可能与目标值不相等.`)
				}
			}), console.log("验证任务配置表结束!!!")
		}
		static nameDb() {
			let t = db.get_name_db_arr();
			for (let e = 0; e < t.length; e++) mgrWordFilter.checkStr(t[e].name) && mgrWordFilter.checkStr(t[e].name1) || console.error("非法名字:", t[e].name);
			console.log("验证名字配置表结束!!!")
		}
		static itemDb() {
			let t = db.get_item_db_map(),
				e = db.get_model_db_map(),
				a = [];
			Tools.forEachMap(t, (t, i) => {
				if (2 == i.type && 1 == i.subType) {
					a.push(t);
					let s = i.viewList;
					for (let a = 0; a < s.length; a++) e[s[a]] || console.error(`部件[${t}]外观[${s[a]}]丢失.`)
				}
			}), console.log("验证物品配置表结束!!!");
			let i = new ResLoader;
			mgrPart.addPartResList(a, i), i.setLoadingCallback(function() {
				console.log("加载所有模型完成!!!")
			}), Laya.timer.once(500, this, function() {
				i.loadAll()
			})
		}
		static suitDb() {
			let t = db.get_suit_db_map(),
				e = db.get_item_db_map();
			Tools.forEachMap(t, (t, a) => {
				let i = a.parts;
				for (let a = 0; a < i.length; a++)[e[i[a]]] || console.error(`套装[${t}]部件[${i[a]}]丢失.`)
			}), console.log("验证套装配置表结束!!!")
		}
		static testJump() {
			Tools.forEachMap(db.get_item_db_map(), function(t, e) {
				if (2 == e.type && 1 == e.subType) {
					-1 == PartGetter.getPartJumpType(t) && console.error("部件跳转异常", t)
				}
			}), console.log("部件跳转验证结束!!!")
		}
		static talkDb() {
			let t = db.get_suit_db_map(),
				e = db.get_talk_db_map();
			Tools.forEachMap(t, function(t, a) {
				a.talkId && a.talkId && !e[a.talkId] && console.error(`套装[${t}]对话[${a.talkId}]丢失.`)
			});
			let a = db.get_level_db_arr();
			for (let t = 0; t < a.length; t++) a[t].talkId && !e[a[t].talkId] && console.error(`关卡[${t}]对话[${a[t].talkId}]丢失.`);
			console.log("验证对话配置表结束!!!")
		}
		static switchDb() {
			let t = db.get_switch_db_map();
			Tools.forEachMap(t, (t, e) => {
				if (0 === e.type) {
					let t = Tools.splitToNumber(e.params, ":");
					2 != t.length && 5 != t.length && console.error("周期开关起始时间有问题:", e.params), e.delta <= 0 && console.error("周期开关间隔有问题:", e.delta), e.delta < e.duration && console.error("周期开关间隔小于有效时间:", e.delta)
				}
			}), console.log("验证开关配置表结束!!!")
		}
		static matConfig() {
			let t = mgrMaterial.dynamicBoneInfos;
			for (const e in t) {
				let a = t[e].concat();
				a.sort(function(t, e) {
					return t.route.length - e.route.length
				});
				for (let t = 0; t < a.length - 1; t++) {
					let i = a[t].route;
					for (let s = t + 1; s < a.length; s++) a[s].route.startsWith(i) && console.error(`模型[${e}]动态骨骼[${t}:${a[s].route}]包含[${s}:${i}]!`)
				}
			}
			console.log("验证动态骨骼配置结束!!!")
		}
		static testOrder() {
			function testPartType(t, e) {
				let a = mItem.getAllItem(2, 1, t),
					i = 0;
				for (let t = 0; t < a.length; t++) {
					let s = a[t],
						n = db.get_item_db(s);
					mgrPart.isMatchTag(e, DbExt.getTag1(n), DbExt.getTag2(n)) && i++
				}
				return i
			}
			for (let t = 0; t <= 14; t++) {
				let e = [];
				for (let a = 1; a <= db.get_tag_type_db_arr().length; a++) e.push(testPartType(t, a));
				console.log(`type:${t}  match count:`, e.join(", "))
			}
			console.log("验证订单匹配结束!!!")
		}
		static testPaintData() {
			Tools.forEachMap(db.get_item_db_map(), (t, e) => {
				if (2 == e.type && 1 == e.subType && db.get_part_type_db(e.gid).paintable) {
					let a = e.viewList;
					for (let e = 0; e < a.length; e++) {
						let i = db.get_model_db(a[e]);
						mgrPart.getPaintData(i.resPath) || console.error(`找不到部件[${t}][${a[e]}]的涂抹区域数据，请重新执行脚本[tools/_auto_export_part_paint_area.bat]`)
					}
				}
			}), console.log("验证模型涂抹区域数据结束!!!")
		}
	}
	const NUMBER_OF_GATHERED_TOUCHES_FOR_MOVE_SPEED = 5,
		OUT_OF_BOUNDARY_BREAKING_FACTOR = .05,
		EPSILON = 1e-4,
		MOVEMENT_FACTOR = .7;
	let quintEaseOut = function(t) {
			return (t -= 1) * t * t * t * t + 1
		},
		getTimeInMilliseconds = function() {
			return (new Date).getMilliseconds()
		},
		v2_helper1 = new Vec2,
		v2_helper2 = new Vec2,
		v2_content_pos = new Vec2,
		v2_content_move = new Vec2;
	class ScrollView extends Laya.Script {
		constructor() {
			super(...arguments), this._topBoundary = 0, this._bottomBoundary = 0, this._leftBoundary = 0, this._rightBoundary = 0, this._touchMoveDisplacements = [], this._touchMoveTimeDeltas = [], this._touchMovePreviousTimestamp = 0, this._touched = !1, this._touchMoved = !1, this._autoScrolling = !1, this._autoScrollAttenuate = !1, this._autoScrollStartPosition = new Vec2(0, 0), this._autoScrollTargetDelta = new Vec2(0, 0), this._autoScrollTotalTime = 0, this._autoScrollAccumulatedTime = 0, this._autoScrollCurrentlyOutOfBoundary = !1, this._autoScrollBraking = !1, this._autoScrollBrakingStartPosition = new Vec2(0, 0), this._outOfBoundaryAmount = new Vec2(0, 0), this._outOfBoundaryAmountDirty = !0, this._isScrollEndedWithThresholdEventFired = !1, this._scrollEventEmitMask = 0, this._isBouncing = !1, this._scrolling = !1, this._touchStartX = 0, this._touchStartY = 0, this._touchX = 0, this._touchY = 0, this.horizontal = !1, this.vertical = !0, this.inertia = !0, this.brake = .5, this.elastic = !0, this.bounceDuration = 1, this.cancelInnerEvents = !0
		}
		get content() {
			return this._content
		}
		set content(t) {
			this._content = t, this.calculateBoundary()
		}
		get node() {
			return this.owner
		}
		scrollToBottom(t = 0, e = !0) {
			let a = this._calculateMovePercentDelta({
				anchor: new Vec2(0, 1),
				applyToHorizontal: !1,
				applyToVertical: !0
			});
			t ? this._startAutoScroll(a, t, !1 !== e) : this._moveContent(a, !0)
		}
		scrollToTop(t = 0, e = !0) {
			let a = this._calculateMovePercentDelta({
				anchor: new Vec2(0, 0),
				applyToHorizontal: !1,
				applyToVertical: !0
			});
			t ? this._startAutoScroll(a, t, !1 !== e) : this._moveContent(a)
		}
		scrollToLeft(t = 0, e = !0) {
			let a = this._calculateMovePercentDelta({
				anchor: new Vec2(0, 0),
				applyToHorizontal: !0,
				applyToVertical: !1
			});
			t ? this._startAutoScroll(a, t, !1 !== e) : this._moveContent(a)
		}
		scrollToRight(t = 0, e = !0) {
			let a = this._calculateMovePercentDelta({
				anchor: new Vec2(1, 0),
				applyToHorizontal: !0,
				applyToVertical: !1
			});
			t ? this._startAutoScroll(a, t, !1 !== e) : this._moveContent(a)
		}
		scrollToPercentHorizontal(t, e = 0, a = !0) {
			let i = this._calculateMovePercentDelta({
				anchor: new Vec2(t, 0),
				applyToHorizontal: !0,
				applyToVertical: !1
			});
			e ? this._startAutoScroll(i, e, !1 !== a) : this._moveContent(i)
		}
		scrollTo(t, e = 0, a = !0) {
			let i = this._calculateMovePercentDelta({
				anchor: new Vec2(t.x, t.y),
				applyToHorizontal: !0,
				applyToVertical: !0
			});
			e ? this._startAutoScroll(i, e, !1 !== a) : this._moveContent(i)
		}
		scrollToPercentVertical(t, e = 0, a = !0) {
			let i = this._calculateMovePercentDelta({
				anchor: new Vec2(0, t),
				applyToHorizontal: !1,
				applyToVertical: !0
			});
			e ? this._startAutoScroll(i, e, !1 !== a) : this._moveContent(i)
		}
		stopAutoScroll() {
			this._autoScrolling = !1, this._autoScrollAccumulatedTime = this._autoScrollTotalTime
		}
		setContentPosition(t) {
			t.fuzzyEquals(this.getContentPosition(v2_content_move), EPSILON) || (this.content.pos(t.x, t.y, !0), this._outOfBoundaryAmountDirty = !0)
		}
		getContentPosition(t) {
			return t || (t = new Vec2), t.setValue(this.content.x, this.content.y), t
		}
		get isScrolling() {
			return this._scrolling
		}
		get isAutoScrolling() {
			return this._autoScrolling
		}
		_registerEvent() {
			this.owner.on(Laya.Event.CLICK, this, this._onClick)
		}
		_unregisterEvent() {
			this.owner.off(Laya.Event.CLICK, this, this._onClick)
		}
		_calculateMovePercentDelta(t) {
			let e = t.anchor,
				a = t.applyToHorizontal,
				i = t.applyToVertical;
			this.calculateBoundary(), e.x = Mathf.clamp01(e.x), e.y = Mathf.clamp01(e.y);
			let s = new Vec2(0, 0),
				n = 0;
			if (a) {
				let t = this._getContentLeftBoundary() - this._leftBoundary;
				t = -t, n = this.content.width - this.node.width, s.x = t - n * e.x
			}
			if (i) {
				let t = this._getContentBottomBoundary() - this._bottomBoundary;
				n = this.content.height - this.node.height, s.y = n * (1 - e.y) - t
			}
			return s
		}
		_moveContentToTopLeft(t, e) {
			let a = new Vec2(0, 0),
				i = 0;
			if (this.content.height < e) {
				let t = this._getContentBottomBoundary() - this._bottomBoundary;
				i = this.content.height - e, a.y = i - t
			}
			if (this.content.width < t) {
				let e = this._getContentLeftBoundary() - this._leftBoundary;
				e = -e, i = this.content.width - t, a.x = e
			}
			this._moveContent(a), this._adjustContentOutOfBoundary()
		}
		calculateBoundary() {
			this.content && (this._leftBoundary = 0, this._bottomBoundary = this.node.height, this._rightBoundary = this.node.width, this._topBoundary = 0, this._moveContentToTopLeft(this.node.width, this.node.height))
		}
		_stopPropagationIfTargetIsMe(t) {
			t && (t.target, this.owner)
		}
		onMouseDown(t) {
			this.owner.activeInHierarchy && this.enabled && (this.content && this._handlePressLogic(), this._touched = !0, this._touchMoved = !1, this._touchStartX = this._touchX = Laya.stage.mouseX, this._touchStartY = this._touchY = Laya.stage.mouseY, this._stopPropagationIfTargetIsMe(t))
		}
		onMouseMove(t) {
			if (!this.owner.activeInHierarchy || !this.enabled) return;
			if (!this._touched) return;
			if (this.content && this._handleMoveLogic(), this._touchX = Laya.stage.mouseX, this._touchY = Laya.stage.mouseY, !this.cancelInnerEvents) return;
			let e = this._touchX - this._touchStartX,
				a = this._touchY - this._touchStartY;
			e * e + a * a > 49 && !this._touchMoved && t && t.target !== this.owner && (this._touchMoved = !0), this._stopPropagationIfTargetIsMe(t)
		}
		onMouseUp(t) {
			this._touched && (this._touched = !1, this.owner.activeInHierarchy && (this.content && this._handleReleaseLogic(), this._touchMoved || this._stopPropagationIfTargetIsMe(t)))
		}
		onMouseOut(t) {
			this.owner.activeInHierarchy && this.enabled && this._touched && Laya.timer.loop(30, this, this._onSimulateMouseMove)
		}
		onMouseOver(t) {
			Laya.timer.clear(this, this._onSimulateMouseMove)
		}
		_onClick(t) {}
		onStageMouseUp() {
			Laya.timer.clear(this, this._onSimulateMouseMove), this._touched && this.onMouseUp(null)
		}
		_onSimulateMouseMove() {
			this._touched ? this.onMouseMove(null) : Laya.timer.clear(this, this._onSimulateMouseMove)
		}
		_processDeltaMove(t) {
			this._scrollChildren(t), this._gatherTouchMove(t)
		}
		_handleMoveLogic() {
			let t = new Vec2(Laya.stage.mouseX - this._touchX, Laya.stage.mouseY - this._touchY);
			this._processDeltaMove(t)
		}
		_scrollChildren(t) {
			let e, a = t = this._clampDelta(t);
			this.elastic ? (e = this._getHowMuchOutOfBoundary(), a.x *= 0 === e.x ? 1 : .5, a.y *= 0 === e.y ? 1 : .5) : (e = this._getHowMuchOutOfBoundary(a), a.addSelf(e)), this._moveContent(a, !1), 0 === a.x && 0 === a.y || (this._scrolling || (this._scrolling = !0), this._onScrolling())
		}
		_handlePressLogic() {
			this._autoScrolling = !1, this._isBouncing = !1, this._touchMovePreviousTimestamp = getTimeInMilliseconds(), this._touchMoveDisplacements.length = 0, this._touchMoveTimeDeltas.length = 0
		}
		_clampDelta(t) {
			return this.content.width < this.node.width && (t.x = 0), this.content.height < this.node.height && (t.y = 0), t
		}
		_gatherTouchMove(t) {
			for (t = this._clampDelta(t); this._touchMoveDisplacements.length >= NUMBER_OF_GATHERED_TOUCHES_FOR_MOVE_SPEED;) this._touchMoveDisplacements.shift(), this._touchMoveTimeDeltas.shift();
			this._touchMoveDisplacements.push(t);
			let e = getTimeInMilliseconds();
			this._touchMoveTimeDeltas.push((e - this._touchMovePreviousTimestamp) / 1e3), this._touchMovePreviousTimestamp = e
		}
		_startBounceBackIfNeeded() {
			if (!this.elastic) return !1;
			let t = this._getHowMuchOutOfBoundary();
			if ((t = this._clampDelta(t)).fuzzyEquals(Vec2.ZERO, EPSILON)) return !1;
			let e = Math.max(this.bounceDuration, 0);
			return this._startAutoScroll(t, e, !0), this._isBouncing || (this._isBouncing = !0), !0
		}
		_processInertiaScroll() {
			if (!this._startBounceBackIfNeeded() && this.inertia) {
				let t = this._calculateTouchMoveVelocity();
				!t.fuzzyEquals(Vec2.ZERO, EPSILON) && this.brake < 1 && this._startInertiaScroll(t)
			}
		}
		_handleReleaseLogic() {
			let t = new Vec2(Laya.stage.mouseX - this._touchX, Laya.stage.mouseY - this._touchY);
			this._gatherTouchMove(t), this._processInertiaScroll(), this._scrolling && (this._scrolling = !1)
		}
		_isOutOfBoundary() {
			return !this._getHowMuchOutOfBoundary().fuzzyEquals(Vec2.ZERO, EPSILON)
		}
		_isNecessaryAutoScrollBrake() {
			if (this._autoScrollBraking) return !0;
			if (this._isOutOfBoundary()) {
				if (!this._autoScrollCurrentlyOutOfBoundary) return this._autoScrollCurrentlyOutOfBoundary = !0, this._autoScrollBraking = !0, this._autoScrollBrakingStartPosition = this.getContentPosition(this._autoScrollBrakingStartPosition), !0
			} else this._autoScrollCurrentlyOutOfBoundary = !1;
			return !1
		}
		getScrollEndedEventTiming() {
			return EPSILON
		}
		_processAutoScrolling(t) {
			let e = this._isNecessaryAutoScrollBrake(),
				a = e ? OUT_OF_BOUNDARY_BREAKING_FACTOR : 1;
			this._autoScrollAccumulatedTime += t * (1 / a);
			let i = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);
			this._autoScrollAttenuate && (i = quintEaseOut(i));
			let s = this._autoScrollStartPosition.add(this._autoScrollTargetDelta.mul(i, v2_helper1), v2_helper1),
				n = Math.abs(i - 1) <= EPSILON;
			if (Math.abs(i - 1) <= this.getScrollEndedEventTiming() && !this._isScrollEndedWithThresholdEventFired && (this._isScrollEndedWithThresholdEventFired = !0), this.elastic) {
				let t = s.sub(this._autoScrollBrakingStartPosition, v2_helper2);
				e && t.mulSelf(a), s = this._autoScrollBrakingStartPosition.add(t, v2_helper1)
			} else {
				let t = s.sub(this.getContentPosition(v2_content_pos), v2_helper2),
					e = this._getHowMuchOutOfBoundary(t);
				e.fuzzyEquals(Vec2.ZERO, EPSILON) || (s.addSelf(e), n = !0)
			}
			n && (this._autoScrolling = !1);
			let o = s.subSelf(this.getContentPosition(v2_content_pos));
			this._moveContent(this._clampDelta(o), n), this._onScrolling(), this._autoScrolling || (this._isBouncing = !1, this._scrolling = !1)
		}
		_startInertiaScroll(t) {
			let e = t.mul(MOVEMENT_FACTOR);
			this._startAttenuatingAutoScroll(e, t)
		}
		_calculateAttenuatedFactor(t) {
			return this.brake <= 0 ? 1 - this.brake : (1 - this.brake) * (1 / (1 + 14e-6 * t + t * t * 8e-9))
		}
		_startAttenuatingAutoScroll(t, e) {
			let a = this._calculateAutoScrollTimeByInitalSpeed(e.mag()),
				i = new Vec2;
			t.normalize(i);
			let s = this.content.width - this.node.width,
				n = this.content.height - this.node.height,
				o = this._calculateAttenuatedFactor(s),
				r = this._calculateAttenuatedFactor(n);
			i = new Vec2(i.x * s * (1 - this.brake) * o, i.y * n * r * (1 - this.brake));
			let l = t.mag(),
				c = i.mag() / l;
			i.addSelf(t), this.brake > 0 && c > 7 && (c = Math.sqrt(c), t.mul(c, i).addSelf(t)), this.brake > 0 && c > 3 && (a *= c = 3), 0 === this.brake && c > 1 && (a *= c), this._startAutoScroll(i, a, !0)
		}
		_calculateAutoScrollTimeByInitalSpeed(t) {
			return Math.sqrt(Math.sqrt(t / 5))
		}
		_startAutoScroll(t, e, a) {
			let i = this._flattenVectorByDirection(t);
			this._autoScrolling = !0, this._autoScrollTargetDelta = i, this._autoScrollAttenuate = a, this._autoScrollStartPosition = this.getContentPosition(this._autoScrollStartPosition), this._autoScrollTotalTime = e, this._autoScrollAccumulatedTime = 0, this._autoScrollBraking = !1, this._isScrollEndedWithThresholdEventFired = !1, this._autoScrollBrakingStartPosition = new Vec2(0, 0), this._getHowMuchOutOfBoundary().fuzzyEquals(Vec2.ZERO, EPSILON) || (this._autoScrollCurrentlyOutOfBoundary = !0)
		}
		_calculateTouchMoveVelocity() {
			let t = 0;
			if ((t = this._touchMoveTimeDeltas.reduce(function(t, e) {
					return t + e
				}, t)) <= 0 || t >= .5) return new Vec2(0, 0);
			let e = new Vec2(0, 0);
			return this._touchMoveDisplacements.reduce(function(t, a) {
				return t.add(a, e)
			}, e), e.mulSelf((1 - this.brake) / t)
		}
		_flattenVectorByDirection(t) {
			return t.x = this.horizontal ? t.x : 0, t.y = this.vertical ? t.y : 0, t
		}
		_moveContent(t, e) {
			let a = this._flattenVectorByDirection(t),
				i = this.getContentPosition(v2_content_pos).add(a, v2_helper2);
			this.setContentPosition(i), this.elastic && e && this._startBounceBackIfNeeded()
		}
		_getContentLeftBoundary() {
			return this.content.x
		}
		_getContentRightBoundary() {
			return this._getContentLeftBoundary() + this.content.width
		}
		_getContentTopBoundary() {
			return this._getContentBottomBoundary() - this.content.height
		}
		_getContentBottomBoundary() {
			return this.content.y + this.content.height
		}
		_getHowMuchOutOfBoundary(t = Vec2.ZERO) {
			if (t.fuzzyEquals(Vec2.ZERO, EPSILON) && !this._outOfBoundaryAmountDirty) return this._outOfBoundaryAmount;
			let e = new Vec2(0, 0);
			return this._getContentLeftBoundary() + t.x > this._leftBoundary ? e.x = this._leftBoundary - (this._getContentLeftBoundary() + t.x) : this._getContentRightBoundary() + t.x < this._rightBoundary && (e.x = this._rightBoundary - (this._getContentRightBoundary() + t.x)), this._getContentTopBoundary() + t.y > this._topBoundary ? e.y = this._topBoundary - (this._getContentTopBoundary() + t.y) : this._getContentBottomBoundary() + t.y < this._bottomBoundary && (e.y = this._bottomBoundary - (this._getContentBottomBoundary() + t.y)), t.fuzzyEquals(Vec2.ZERO, EPSILON) && (this._outOfBoundaryAmount = e, this._outOfBoundaryAmountDirty = !1), e = this._clampDelta(e)
		}
		_adjustContentOutOfBoundary() {
			if (this._outOfBoundaryAmountDirty = !0, this._isOutOfBoundary()) {
				let t = this._getHowMuchOutOfBoundary(),
					e = this.getContentPosition(v2_content_pos).addSelf(t);
				this.content && this.content.pos(e.x, e.y, !0)
			}
		}
		_onScrolling() {}
		set height(t) {
			this.node.height = t, this.resetScrollRect()
		}
		get height() {
			return this.node.height
		}
		set width(t) {
			this.node.width = t, this.resetScrollRect()
		}
		get width() {
			return this.node.width
		}
		resetScrollRect() {
			this.node.scrollRect || (this.node.scrollRect = Laya.Rectangle.create()), this.node.scrollRect.setTo(0, 0, this.node.width, this.node.height)
		}
		onAwake() {
			let t = this.owner.getChildAt(0);
			t instanceof Laya.Sprite ? this.content = t : (this.content = new Laya.Sprite, this.owner.addChild(this.content)), this.resetScrollRect()
		}
		onStart() {
			this.calculateBoundary(), this.content && this._adjustContentOutOfBoundary(), this._registerEvent(), this.content && this.content.on(Laya.Event.RESIZE, this, this.calculateBoundary)
		}
		onDestroy() {
			this._unregisterEvent(), this.content && this.content.off(Laya.Event.RESIZE, this, this.calculateBoundary), this.stopAutoScroll(), Laya.timer.clear(this, this._onSimulateMouseMove), this.node.scrollRect && (this.node.scrollRect.recover(), this.node.scrollRect = null)
		}
		onUpdate() {
			this._autoScrolling && this._processAutoScrolling(Laya.timer.delta / 1e3)
		}
	}
	const DEFAULT_CLEAR_CALLBACK = function(t) {
			t.dispose()
		},
		EMPTY_FUNC = function() {};
	class ReuseScrollList extends ScrollView {
		constructor() {
			super(...arguments), this.eachCount = 1, this.itemWidth = 100, this.itemHeight = 100, this.itemAnchorX = 0, this.itemAnchorY = 0, this.itemCreateDeltaFrame = 0, this.itemCreatePerCount = 1, this.sectionRes = "", this.sectionSize = 0, this.sectionSpace = 100, this.sectionOffsetX = 0, this.sectionOffsetY = 0, this.onItemClear = DEFAULT_CLEAR_CALLBACK, this.onItemScroll = EMPTY_FUNC, this._bCreating = !1, this.m_bInit = !1, this.m_items = [], this.m_totalCount = 0, this.m_itemCount = 0, this.m_topIndex = 0, this.m_sectionCount = 0, this.m_sectionTotalCount = 0, this.m_sectionTopIndex = 0
		}
		onAwake() {
			super.onAwake(), this.horizontal = !this.vertical
		}
		onDestroy() {
			this.onItemCreate = null, this.onItemChange = null, this.onItemClear = null, this.onItemScroll = null, this.onItemCreateComplete = null, super.onDestroy(), this.m_items.length > 0 && Logger.error("ReuseScrollList.onDestroy: 必须主动清理items!")
		}
		setVerticle(t) {
			this.vertical = t, this.horizontal = !t
		}
		clearAllItems() {
			if (this.onItemClear) {
				let e = this.m_items.length;
				for (var t = 0; t < e; t++) this.m_items[t].tryClear();
				this.m_items.length = 0
			}
		}
		foreachItems(t) {
			let e = this.m_items.length;
			for (var a = 0; a < e && !t(this.m_items[a].item); a++);
		}
		foreachItemsByOrder(t) {
			for (var e = 0; e < this.m_itemCount; e++) {
				var a = this.getItem(this.m_topIndex + e);
				if (!a || t(a)) break
			}
		}
		getItem(t) {
			return t >= this.m_topIndex && t < this.m_totalCount ? this.m_items[t % this.m_itemCount].item : null
		}
		onUpdate() {
			if (super.onUpdate(), this.m_bInit && this._bCreating) {
				let e = !0,
					a = this.itemCreatePerCount,
					i = this.m_items.length,
					s = 0;
				t: for (; s < i;) {
					for (var t = 0; t < a; t++)
						if (this.m_items[s].isLoaded || (this.m_items[s].tryCreate(), e = !1), ++s >= i) break t;
					if (!e) break
				}
				this._onScrolling(), e && (this._bCreating = !1, this.onItemCreateComplete && this.onItemCreateComplete())
			}
		}
		init() {
			if (this.m_bInit) return;
			if (this.m_bInit = !0, this.vertical && this.horizontal && console.error("ReuseScrollList不支持同时在垂直和水平方向移动"), this.vertical) {
				if (this.m_itemCount = (Math.ceil(this.node.height / this.itemHeight) + 1) * this.eachCount, this.sectionRes) {
					0 == this.sectionSpace && Logger.error("ReuseScrollList init: [sectionSpace] can't be 0."), this.m_sectionCount = Math.ceil(this.node.height / this.sectionSpace) + 1;
					let e = [],
						a = Vec2.TEMP;
					for (var t = 0; t < this.m_sectionCount; t++) {
						let i = new Laya.Sprite;
						this.sectionSize && (i.width = this.sectionSize), i.loadImage(this.sectionRes), this.content.addChild(i), this.getSectionPositionByIndex(t, a), i.pos(a.x, a.y, !0), e.push(i)
					}
					this.m_sections = e
				}
			} else this.m_itemCount = (Math.ceil(this.node.width / this.itemWidth) + 1) * this.eachCount;
			this._bCreating = !0;
			let e = 0 == this.itemCreateDeltaFrame;
			for (t = 0; t < this.m_itemCount; t++) {
				let a = new ReuseItem(this, this.itemCreateDeltaFrame);
				e && a.tryCreate(), a.setParent(this.content), a.setPosition(this.getItemPositionByIndex(t, Vec2.TEMP)), this.m_items.push(a)
			}
			e || (this.itemCreatePerCount = Math.max(1, this.itemCreatePerCount))
		}
		getItemPositionByIndex(t, e) {
			let a, i;
			return this.vertical ? (a = t % this.eachCount, i = 0 | t / this.eachCount) : (i = t % this.eachCount, a = 0 | t / this.eachCount), e.x = a * this.itemWidth + this.itemWidth * this.itemAnchorX, e.y = i * this.itemHeight + this.itemHeight * this.itemAnchorY, e
		}
		getSectionPositionByIndex(t, e) {
			return e.x = this.sectionOffsetX, e.y = this.sectionOffsetY + t * this.sectionSpace, e
		}
		updateList(t, e, a, i = !0) {
			if (this.init(), this.stopAutoScroll(), null != t && (this.m_totalCount = t), null == e && (e = this.m_topIndex), e >= this.m_totalCount && (e = this.m_totalCount - 1), e < 0 && (e = 0), this.updateSize(), this.sectionRes && this.vertical && (this.m_sectionTotalCount = Math.ceil(this.content.height / this.sectionSpace)), e >= 0) {
				let t = this.getPercent(e);
				this.vertical ? this.scrollToPercentVertical(t, a) : this.scrollToPercentHorizontal(t, a), a || this._onScrolling()
			}
			for (var s = 0; s < this.m_itemCount; s++) {
				let t = this.m_topIndex + s,
					e = this.m_items[t % this.m_itemCount];
				t < this.m_totalCount ? (e.setPosition(this.getItemPositionByIndex(t, Vec2.TEMP)), e.show(), e.tryChange(t, i)) : e.hide()
			}
		}
		centerTo(t, e) {
			let a = this.vertical ? this.node.height / this.itemHeight : this.node.width / this.itemWidth,
				i = this.getPercent(t - (a - 1) / 2);
			this._bCreating && Logger.warn("如果有异步创建动画，这个方法可能会造成动画异常."), this.vertical ? this.scrollToPercentVertical(i, e) : this.scrollToPercentHorizontal(i, e), null == e && this._onScrolling()
		}
		getPercent(t) {
			let e, a, i;
			if (this.vertical ? (e = this.content.height, a = this.node.height, i = this.itemHeight) : (e = this.content.width, a = this.node.width, i = this.itemWidth), e - a <= 0) return 0;
			let s = Math.floor(t / this.eachCount) * i;
			return Mathf.clamp01(s / (e - a))
		}
		updateSize() {
			let t, e;
			this.vertical ? (t = this.eachCount * this.itemWidth, e = Math.ceil(this.m_totalCount / this.eachCount) * this.itemHeight) : (t = Math.ceil(this.m_totalCount / this.eachCount) * this.itemWidth, e = this.eachCount * this.itemHeight), this.content.width = t, this.content.height = e
		}
		_onScrolling() {
			if (!this.m_bInit) return;
			let t, e;
			this.vertical ? (t = (this.m_topIndex / this.eachCount | 0) * this.itemHeight, (e = -this.content.y) < t ? this.tailToHead(Math.ceil((t - e) / this.itemHeight)) : e > t + this.itemHeight && this.headToTail(Math.ceil((e - t - this.itemHeight) / this.itemHeight)), this.sectionRes && (e < (t = this.m_sectionTopIndex * this.sectionSpace + this.sectionOffsetY) ? this.sectionTailToHead(Math.ceil((t - e) / this.itemHeight)) : e > t + this.sectionSpace && this.sectionHeadToTail(Math.ceil((e - t - this.sectionSpace) / this.sectionSpace)))) : (t = (this.m_topIndex / this.eachCount | 0) * this.itemWidth, (e = -this.content.x) < t ? this.tailToHead(Math.ceil((t - e) / this.itemWidth)) : e > t + this.itemWidth && this.headToTail(Math.ceil((e - t - this.itemWidth) / this.itemWidth))), this.onItemScroll()
		}
		tailToHead(t) {
			let e, a, i, s = t * this.eachCount;
			for (var n = 0; n < s; n++) {
				if (e = (this.m_topIndex + this.m_itemCount - 1) % this.m_itemCount, (a = this.m_topIndex - 1) < 0) return;
				a >= this.m_totalCount ? this.m_items[e].hide() : ((i = this.m_items[e]).show(), i.setPosition(this.getItemPositionByIndex(a, Vec2.TEMP)), i.tryChange(a, !0)), this.m_topIndex--
			}
		}
		headToTail(t) {
			let e, a, i, s = t * this.eachCount;
			for (var n = 0; n < s; n++) e = this.m_topIndex % this.m_itemCount, (a = this.m_topIndex + this.m_itemCount) < this.m_totalCount ? ((i = this.m_items[e]).show(), i.setPosition(this.getItemPositionByIndex(a, Vec2.TEMP)), i.tryChange(a, !0)) : this.m_items[e].hide(), this.m_topIndex++
		}
		sectionTailToHead(t) {
			let e, a, i, s = Vec2.TEMP;
			for (var n = 0; n < t; n++) {
				if (e = (this.m_sectionTopIndex + this.m_sectionCount - 1) % this.m_sectionCount, (a = this.m_sectionTopIndex - 1) < 0) return;
				a >= this.m_sectionTotalCount ? this.m_sections[e].visible = !1 : ((i = this.m_sections[e]).visible = !0, this.getSectionPositionByIndex(a, s), i.pos(s.x, s.y, !0)), this.m_sectionTopIndex--
			}
		}
		sectionHeadToTail(t) {
			let e, a, i, s = Vec2.TEMP;
			for (var n = 0; n < t; n++) e = this.m_sectionTopIndex % this.m_sectionCount, (a = this.m_sectionTopIndex + this.m_sectionCount) < this.m_sectionTotalCount ? ((i = this.m_sections[e]).visible = !0, this.getSectionPositionByIndex(a, s), i.pos(s.x, s.y, !0)) : this.m_sections[e].visible = !1, this.m_sectionTopIndex++
		}
	}
	class ReuseItem {
		constructor(t, e) {
			this.isDisposed = !1, this.scrollor = t, this.deltaFrame = e
		}
		tryCreate() {
			if (!this.isDisposed)
				if (this.deltaFrame <= 0) {
					if (!this.item) {
						let t = this.scrollor.onItemCreate();
						this.item = t, this.parent && t.setParent(this.parent), this.position && t.setPosition(this.position.x, this.position.y), null != this.width && t.setSize(this.width, this.height), null != this.visible && (t.enable = this.visible), null != this.index && this.scrollor.onItemChange(t, this.index)
					}
				} else this.deltaFrame--
		}
		tryChange(t, e) {
			(this.index != t || e) && (this.index = t, this.item && this.scrollor.onItemChange(this.item, t))
		}
		tryClear() {
			this.isDisposed = !0, this.item && (this.scrollor.onItemClear(this.item), this.item = null)
		}
		get isLoaded() {
			return !!this.item && (!(this.item instanceof AsyncObject) || this.item.isLoaded)
		}
		setParent(t) {
			this.item ? this.item.setParent(t) : this.parent = t
		}
		setPosition(t) {
			this.item ? this.item.setPosition(t.x, t.y) : this.position ? this.position.set(t) : this.position = t.clone()
		}
		setSize(t, e) {
			this.width = t, this.height = e
		}
		show() {
			this.item ? this.item.enable = !0 : this.visible = !0
		}
		hide() {
			this.item ? this.item.enable = !1 : this.visible = !1
		}
	}
	class DebugColorSelector extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "DebugColorSelector", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0
		}
		buildUi() {
			this.__fillSideColor(), this.mainColor = this.__getSideColorByPos(0, 0), this.curColor = this.mainColor, this.__fillMainColor(), this.__fillCurColor(), this.registerTouch()
		}
		registerTouch() {
			this.spriteSide.on(Laya.Event.CLICK, this, t => {
				t.stopPropagation();
				let e = this.spriteSide.globalToLocal(new Laya.Point(Laya.stage.mouseX, Laya.stage.mouseY));
				this.mainColor = this.__getSideColorByPos(e.x, e.y), this.__fillMainColor()
			}), this.spriteMain.on(Laya.Event.CLICK, this, t => {
				t.stopPropagation();
				let e = this.spriteMain.globalToLocal(new Laya.Point(Laya.stage.mouseX, Laya.stage.mouseY));
				this.curColor = this.__getMainColorByPos(e.x, e.y), this.__fillCurColor(), this.context.colorChange && this.context.colorChange(this.curColor)
			})
		}
		__fillSideColor() {
			this.spriteSide.graphics.clear(!0);
			for (let t = 0; t <= this.spriteSide.width; t++)
				for (let e = 0; e <= this.spriteSide.height; e++) {
					let a = this.__getSideColorByPos(t, e),
						i = `#${this.__toHex(a.r)}${this.__toHex(a.g)}${this.__toHex(a.b)}`;
					this.spriteSide.graphics.drawRect(t, e, 1, 1, i)
				}
		}
		__fillMainColor() {
			this.spriteMain.graphics.clear(!0);
			for (let t = 0; t <= this.spriteMain.width; t++)
				for (let e = 0; e <= this.spriteMain.height; e++) {
					let a = this.__getMainColorByPos(t, e),
						i = `#${this.__toHex(a.r)}${this.__toHex(a.g)}${this.__toHex(a.b)}`;
					this.spriteMain.graphics.drawRect(t, e, 1, 1, i)
				}
		}
		__fillCurColor() {
			let t = this.__colorToHex(this.curColor);
			this.labelInput.text = t, this.spriteColor.graphics.clear(!0), this.spriteColor.graphics.drawRect(0, 0, 30, 30, t)
		}
		__getSideColorByPos(t, e) {
			let a = this.spriteSide.height;
			if (e < 0 || e > a) return new Laya.Color(0, 0, 0, 0);
			let i = [255, 255, 0, 0, 0, 255, 255],
				s = [0, 255, 255, 255, 0, 0, 0],
				n = [0, 0, 0, 255, 255, 255, 0],
				o = e / a;
			for (let t = 1; t <= 6; t++)
				if (o <= t / 6) {
					let e = (o - (t - 1) / 6) / (1 / 6);
					return new Laya.Color(Math.floor(i[t - 1] * (1 - e) + i[t] * e), Math.floor(s[t - 1] * (1 - e) + s[t] * e), Math.floor(n[t - 1] * (1 - e) + n[t] * e))
				}
		}
		__getMainColorByPos(t, e) {
			let a = t / this.spriteMain.width,
				i = e / this.spriteMain.height,
				s = 255 * (1 - a) + this.mainColor.r * a,
				n = 255 * (1 - a) + this.mainColor.g * a,
				o = 255 * (1 - a) + this.mainColor.b * a;
			return s = s * (1 - i) + 0 * i, n = n * (1 - i) + 0 * i, o = o * (1 - i) + 0 * i, s = Math.floor(s), n = Math.floor(n), o = Math.floor(o), new Laya.Color(s, n, o)
		}
		__colorToHex(t) {
			return `#${this.__toHex(t.r)}${this.__toHex(t.g)}${this.__toHex(t.b)}`
		}
		__toHex(t) {
			let e = 0;
			for (; t >= 16;) e++, t -= 16;
			let a = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
			return a[e] + a[t]
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), e.on(Laya.Event.CLICK, this, this.close);
			let a = (new Laya.Sprite).size(400, 400).pos(0, _G.canvasHeight - 400);
			e.addChild(a), a.on(Laya.Event.CLICK, this, function(t) {
				t.stopPropagation()
			}), this.spriteMain = new Laya.Sprite, e.addChild(this.spriteMain), this.spriteMain.size(200, 200), this.spriteMain.pos(10, _G.canvasHeight - 260, !0), this.spriteSide = new Laya.Sprite, e.addChild(this.spriteSide), this.spriteSide.size(40, 200), this.spriteSide.pos(220, _G.canvasHeight - 260, !0), this.spriteColor = new Laya.Sprite, e.addChild(this.spriteColor), this.spriteColor.size(30, 30), this.spriteColor.pos(30, _G.canvasHeight - 40, !0), this.labelInput = debug_ui.create_input("颜色", 80, _G.canvasHeight - 50, 150), e.addChild(this.labelInput), this.createFromNode(e)
		}
	}
	const ITEM_WIDTH = 180,
		SLIDER_WIDTH = 160,
		SLIDER_HEIGHT = 20;
	var debug_ui;
	! function(t) {
		t.DebugBase = class extends PanelBase3D {
			constructor() {
				super(...arguments), this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.bResetRootNode = !1
			}
			create(e) {
				e && e(!0);
				let a = (new Laya.Sprite).size(_G.canvasWidth, _G.canvasHeight).loadImage("res/alpha_mask.png");
				a.addChild(t.create_btn("X", this, this.close, 80, 80).pos(10, 10)), this.createFromNode(a)
			}
		};
		t.scroll_item = class extends ViewBase {
			constructor(t, e, a) {
				super(), this.resourceName = "scroll_item";
				let i = new Laya.Sprite;
				i.size(t, e), UiHelper.addScrollViewClick(i, () => {
					a(this.idx, this)
				});
				let s = create_label(t / 2, e / 2, t, 24);
				s.anchorX = .5, s.anchorY = .5, i.addChild(s), this.label = s, this.createFromNode(i)
			}
			onCreateComplete() {}
			setData(t, e) {
				this.label.text = t, this.idx = e
			}
		};

		function create_label(t = 0, e = 0, a, i = 20, s = "#ffffff") {
			let n = new Laya.Label;
			return null != a ? (n.width = a, n.wordWrap = !0) : n.wordWrap = !1, n.fontSize = i, n.color = s, n.pos(t, e, !0), n
		}

		function create_tab(t, e, a, i) {
			var s = new Laya.Tab;
			s.skin = GConfig.img_single_color;
			let n = i.join(",");
			s.labels = n, s.labelSize = 20, s.selectHandler = new Laya.Handler(e, a);
			for (let e = s.numChildren - 1; e >= 0; e--) s.getChildAt(e).size(t || 80, 50);
			return s.space = 5, s
		}

		function create_slider(t, e, a, i, s, n, o) {
			let r = new(t ? Laya.HSlider : Laya.VSlider)("res/debug/hslider.png");
			return t ? r.width = s : r.height = s, o && (t ? r.getChildAt(0).height = o : r.getChildAt(0).width = o), r.min = e, r.max = a, r.value = 0, r.tick = i, r.changeHandler = new Laya.Handler(r, n), r
		}

		function create_checkbox(t, e = "") {
			var a = new Laya.CheckBox("res/debug/checkbox.png");
			return a.labelSize = 20, a.labelPadding = "3,0,0,5", a.label = e, a.on(Laya.Event.CHANGE, a, t), a
		}
		t.scroll_toggle_item = class extends ViewBase {
			constructor(t, e, a, i) {
				super(), this.resourceName = "scroll_toggle_item";
				let s = new Laya.Sprite;
				s.size(t, e), UiHelper.addScrollViewClick(s, () => {
					a(this.idx, this)
				});
				let n = create_checkbox(() => {
					i(this.idx, n.selected, this)
				});
				s.addChild(n), this.checkbox = n;
				let o = create_label(32, 0, t - 32, 24);
				s.addChild(o), this.label = o, this.createFromNode(s)
			}
			onCreateComplete() {}
			setData(t, e, a) {
				this.label.text = t, this.idx = e, this.checkbox.selected = a
			}
		}, t.create_btn = function(t, e, a, i, s) {
			let n = new Laya.Button(GConfig.img_single_color, t);
			return n.labelSize = 20, n.size(i || 100, s || 50), n.clickHandler = Laya.Handler.create(e, a, null, !1), n
		}, t.create_label = create_label, t.create_click_label = function(t, e, a, i, s, n, o) {
			let r = create_label(e, a, n, o);
			return r.text = t, UiHelper.addScrollViewClick(r, s.bind(i)), r
		}, t.create_input = function(t, e, a, i) {
			let s = new Laya.TextInput(t);
			return s.fontSize = 30, s.size(i || 80, 50), s.skin = GConfig.img_single_color, s.pos(e, a, !0), s
		}, t.create_tab = create_tab, t.create_slider = create_slider, t.create_checkbox = create_checkbox;
		class e extends Laya.Label {
			constructor(t, e) {
				super(t), this.fontSize = 20, this.color = "#ffffff", this.wordWrap = !1, this.propName = e, UiHelper.addScrollViewClick(this, this.onClick.bind(this))
			}
			setObject(t, e) {
				this.object = t, this.objectData = e, this.onRefresh()
			}
		}
		t.PropEditorBase = e;
		t.ColorEditor = class extends e {
			constructor(t, e) {
				super(t, e), this.size(SLIDER_WIDTH, SLIDER_HEIGHT), this.colorSprite = this.addChild(new Laya.Sprite).pos(150, 0, !0)
			}
			onClick() {
				mgrPanel.openPanelWithFadeIn(DebugColorSelector, {
					colorChange: this.onColorChange.bind(this)
				})
			}
			onRefresh() {
				this.colorSprite.graphics.drawRect(0, 0, 20, 20, this.convertVecToColor(this.object[this.propName]))
			}
			onColorChange(t) {
				let e = new Laya.Vector4(t.r / 255, t.g / 255, t.b / 255, 1);
				this.object[this.propName] = e, this.objectData[this.propName] = this.convertColorToArr(e), this.onRefresh()
			}
			convertColorToArr(t) {
				return [Mathf.round(t.x, 2), Mathf.round(t.y, 2), Mathf.round(t.z, 2), Mathf.round(t.w, 2)]
			}
			convertVecToColor(t) {
				return Tools.toHexColor(new Laya.Color(Math.floor(255 * t.x), Math.floor(255 * t.y), Math.floor(255 * t.z)))
			}
		};
		t.SliderEditor = class extends e {
			constructor(t, e, a = [0, 1, 2]) {
				super(t, e), this.nameString = t, this.size(SLIDER_WIDTH, 2 * SLIDER_HEIGHT + 5);
				let i = a[0],
					s = a[1],
					n = Math.pow(.1, a[2]);
				this.digits = a[2], this.slider = this.addChild(create_slider(!0, i, s, n, SLIDER_WIDTH, this.onSliderChange.bind(this), SLIDER_HEIGHT)), this.slider.pos(0, SLIDER_HEIGHT + 5)
			}
			onClick() {}
			onRefresh() {
				let t = Mathf.round(this.object[this.propName], this.digits);
				this.text = `${this.nameString}[${t}]`, this.slider.value = t
			}
			onSliderChange(t) {
				t = Mathf.round(t, 2), this.object[this.propName] = t, this.objectData[this.propName] = t, this.onRefresh()
			}
		};
		t.TabEditor = class extends e {
			constructor(t, e, a) {
				super("", e), this.size(SLIDER_WIDTH, SLIDER_HEIGHT), this.tab = this.addChild(create_tab(80, this, this.onToggle.bind(this), a))
			}
			onClick() {}
			onRefresh() {
				this.tab.selectedIndex = this.object[this.propName]
			}
			onToggle(t) {
				this.object[this.propName] = t, this.objectData[this.propName] = t, this.onRefresh()
			}
		};
		t.PropEditorGroup = class extends Laya.Sprite {
			constructor(t) {
				super(), this.propEditors = [];
				let e = this.addComponent(UIHVLayout);
				e.align = "head", e.horizon = !1, e.space = 5, this.editLayout = e;
				for (let e = 0; e < t.length; e++) this.createPropItem(t[e])
			}
			createPropItem(t) {
				let e = t[0],
					a = t[1],
					i = t[2],
					s = t[3];
				s ? this.propEditors.push(this.editLayout.addChild(new e(a, i, s))) : this.propEditors.push(this.editLayout.addChild(new e(a, i)))
			}
			setObject(t, e) {
				for (let a = 0; a < this.propEditors.length; a++) this.propEditors[a].setObject(t, e)
			}
		}
	}(debug_ui || (debug_ui = {}));
	const spine_w = 240,
		anim_w = 100,
		item_h = 50;
	class DebugSpine extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "DebugMain", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.curFrame = 0, this.totalFrame = 0, this.loop = !0
		}
		buildUi() {
			let t = [],
				e = 0;
			this.spineScroll.onItemCreate = (() => new debug_ui.scroll_item(spine_w, item_h, a => {
				e = a;
				let i = t[a];
				this.animScroll.updateList(i.anims.length), this._timer && (this._timer.stop(), this._timer = null), this._spriteXiuBiao && (this._spriteXiuBiao.destroy(), this._spriteXiuBiao = null), this.clearSpine(), this._spine = _G.poolManager.get(Spine, i.spineId), this._spine.setParent(this.animNode), this._spine.setScale(2, 2), 0 == i.anims.length && this._spine.callIfLoaded(() => {
					let t = this._spine.getSkeleton(),
						e = t.getAnimNum();
					for (let a = 0; a < e; a++) i.anims.push(t.getAniNameByIndex(a));
					this.animScroll.updateList(i.anims.length)
				}), this.animInfo.text = `[${i.spineId}]`, this.totalFrame = 0, this.curFrame = 0, this.refreshFrameInfo()
			})), this.spineScroll.onItemChange = ((e, a) => {
				e.setData(t[a].spineId, a)
			}), this.spineScroll.onItemClear = function(t) {
				t.dispose()
			}, this.animScroll.onItemCreate = (() => new debug_ui.scroll_item(anim_w, item_h, a => {
				if (this._spine) {
					let i = t[e];
					this._spine.play(i.anims[a], this.loop), this.animInfo.text = `[${i.spineId}] [${i.anims[a]}]`;
					let s = this._spine.getSkeleton();
					this.totalFrame = s.total, this.curFrame = 0, this.refreshFrameInfo()
				}
			})), this.animScroll.onItemChange = ((a, i) => {
				let s = t[e];
				a.setData(s.anims[i], i)
			});
			let a = db.get_spine_db_map();
			for (const e in a) {
				let a = {
					spineId: e,
					anims: []
				};
				t.push(a)
			}
			this.spineScroll.updateList(t.length)
		}
		dispose() {
			this.clearSpine(), this.spineScroll && this.spineScroll.clearAllItems(), this.animScroll && this.animScroll.clearAllItems(), super.dispose()
		}
		clearSpine() {
			this._spine && (_G.poolManager.put(this._spine), this._spine = null)
		}
		onClickPreFrame() {
			this.totalFrame > 0 ? (this.curFrame--, this.curFrame < 0 && (this.curFrame = this.totalFrame), this._spine.getSkeleton().index = this.curFrame, this.refreshFrameInfo()) : this.frameInfo.text = "帧数异常."
		}
		onClickNextFrame() {
			this.totalFrame > 0 ? (this.curFrame++, this.curFrame > this.totalFrame && (this.curFrame = 0), this._spine.getSkeleton().index = this.curFrame, this.refreshFrameInfo()) : this.frameInfo.text = "帧数异常."
		}
		onClickLoop() {
			this.loop = !this.loop, console.log("loop:", this.loop)
		}
		onClickCreateXiuBiao() {
			if (this._spine && !this._spriteXiuBiao) {
				let t = this._spine.getSkeleton().templet.mBoneArr,
					e = new Laya.Sprite;
				e.size(26, 33), e.pivot(e.width / 2, e.height / 2), this._spine.addChild(e), e.loadImage(`res/icon_class_level/icon_0${Mathf.random(3)}.png`), this._spriteXiuBiao = e, this._timer = Timer.callLoopFrame(1, () => {
					for (let i = 0; i < t.length; i++) {
						const s = t[i];
						if (s && "xiubiao" == s.name) {
							e.x = s.resultMatrix.tx, e.y = s.resultMatrix.ty;
							var a = 180 * Math.atan2(s.resultMatrix.b, s.resultMatrix.a) / Math.PI;
							e.rotation = a - 90
						}
					}
				}, this)
			}
		}
		refreshFrameInfo() {
			this.frameInfo.text = `${this.curFrame}/${this.totalFrame}`
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight);
			let a = new Laya.Image("res/alpha_mask.png");
			a.size(_G.canvasWidth, _G.canvasHeight), e.addChild(a);
			let i = new Laya.Sprite;
			i.size(spine_w, 500), i.pos(100, 50), e.addChild(i);
			let s = i.addComponent(ReuseScrollList);
			s.vertical = !0, s.itemWidth = spine_w, s.itemHeight = item_h, this.spineScroll = s;
			let n = new Laya.Sprite;
			n.size(anim_w, 300), n.pos(360, 50), e.addChild(n);
			let o = n.addComponent(ReuseScrollList);
			o.vertical = !0, o.itemWidth = anim_w, o.itemHeight = item_h, this.animScroll = o;
			let r = debug_ui.create_btn("X", this, this.close, 80, 80).pos(10, 10);
			e.addChild(r), this.animNode = new Laya.Sprite, this.animNode.texture = UiHelper.WHITE_TEXTURE, this.animNode.size(2, 2), this.animNode.pos(_G.canvasWidth / 2, _G.canvasHeight - 100), e.addChild(this.animNode);
			let l = debug_ui.create_label(_G.canvasWidth / 2, 600, _G.canvasWidth, 30);
			l.anchorX = .5, l.anchorY = .5, l.align = "center", e.addChild(l), this.animInfo = l;
			let c = debug_ui.create_label(_G.canvasWidth / 2 - 150, _G.canvasHeight - 150, null, 30);
			c.anchorX = .5, c.anchorY = .5, e.addChild(c), this.frameInfo = c, e.addChild(debug_ui.create_btn("前一帧", this, this.onClickPreFrame).pos(_G.canvasWidth / 2 - 150, _G.canvasHeight - 150)), e.addChild(debug_ui.create_btn("后一帧", this, this.onClickNextFrame).pos(_G.canvasWidth / 2, _G.canvasHeight - 150)), e.addChild(debug_ui.create_btn("循环", this, this.onClickLoop).pos(_G.canvasWidth / 2 + 150, _G.canvasHeight - 150)), e.addChild(debug_ui.create_btn("创建袖标", this, this.onClickCreateXiuBiao).pos(_G.canvasWidth / 2 + 150, _G.canvasHeight - 250)), this.createFromNode(e)
		}
	}
	class DebugQuest extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "DebugQuest", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.curSelectQuest = ""
		}
		buildUi() {
			this.questScroll.onItemCreate = (() => new debug_ui.scroll_item(400, 50, t => {
				this.curSelectQuest = this.allQuest[t], this.refreshCurQuestInfo()
			})), this.questScroll.onItemChange = ((t, e) => {
				let a = db.get_quest_db(this.allQuest[e]);
				t.setData(`[${a.id}]:[${a.name}]`, e)
			});
			let t = [];
			Tools.forEachMap(db.get_quest_db_map(), function(e, a) {
				t.push(e)
			}), this.allQuest = t, this.questScroll.updateList(t.length)
		}
		dispose() {
			this.questScroll.clearAllItems(), super.dispose()
		}
		onDoQuest() {
			if (!BaseFacade.mQuest.query(this.curSelectQuest)) return void _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `未接此任务[${this.curSelectQuest}]`);
			let t = db.get_quest_db(this.curSelectQuest),
				e = this.inputBox.text,
				a = parseInt(e);
			if (a) {
				for (let e = 0; e < t.goals.length; e++) {
					let i = db.get_goal_db(t.goals[e]);
					BaseFacade.mGoal.commit(i.actionId, a, i.targetId), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `完成目标[${i.id}][${a}]次.`)
				}
				this.refreshCurQuestInfo()
			}
		}
		onFinishQuest() {
			if (!BaseFacade.mQuest.query(this.curSelectQuest)) return void _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `未接此任务[${this.curSelectQuest}]`);
			let t = db.get_quest_db(this.curSelectQuest);
			for (let e = 0; e < t.goals.length; e++) {
				let a = db.get_goal_db(t.goals[e]),
					i = BaseFacade.mQuest.getDeltaValue(t.id, e);
				BaseFacade.mGoal.commit(a.actionId, i, a.targetId), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `完成目标[${a.id}][${i}]次.`)
			}
			this.refreshCurQuestInfo()
		}
		onCommitQuest() {
			if (!BaseFacade.mQuest.query(this.curSelectQuest)) return void _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `未接此任务[${this.curSelectQuest}]`);
			let t = BaseFacade.mQuest.commit(this.curSelectQuest);
			t && 0 != t.length || _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `没有奖励或者任务失败[${this.curSelectQuest}]`), this.refreshCurQuestInfo()
		}
		onCancelQuest() {
			BaseFacade.mQuest.query(this.curSelectQuest) ? (BaseFacade.mQuest.cancel(this.curSelectQuest), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `取消成功[${this.curSelectQuest}]`), this.refreshCurQuestInfo()) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `未接此任务[${this.curSelectQuest}]`)
		}
		onClickShow() {
			let t = db.get_quest_db_map();
			Tools.forEachMap(t, function(t, e) {
				let a = BaseFacade.mQuest.query(t);
				if (a) {
					let i = a.state,
						s = BaseFacade.mQuest.getCurValue(t),
						n = BaseFacade.mQuest.getDbValue(t);
					console.log(`[${t}][${e.name}] - [${QUEST_STATE[i]}][${s}/${n}]`)
				} else console.log(`[${t}][${e.name}] - [empty][empty]`)
			})
		}
		refreshCurQuestInfo() {
			let t = this.curSelectQuest,
				e = db.get_quest_db(t),
				a = BaseFacade.mQuest.query(t);
			if (a) {
				let i = a.state,
					s = BaseFacade.mQuest.getCurValue(t),
					n = BaseFacade.mQuest.getDbValue(t);
				this.questInfo.changeText(`[${t}][${e.name}] - [${QUEST_STATE[i]}][${s}/${n}]`)
			} else this.questInfo.changeText(`[${t}][${e.name}] - [empty][empty]`)
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight);
			let a = new Laya.Image("res/alpha_mask.png");
			a.size(_G.canvasWidth, _G.canvasHeight), e.addChild(a);
			let i = new Laya.Sprite;
			i.size(400, 700), i.pos(100, 50), e.addChild(i);
			let s = i.addComponent(ReuseScrollList);
			s.vertical = !0, s.itemWidth = 400, s.itemHeight = 50, this.questScroll = s;
			let n = debug_ui.create_btn("X", this, this.close, 80, 80).pos(10, 10);
			e.addChild(n);
			let o = debug_ui.create_label(10, 800, 500);
			e.addChild(o), this.questInfo = o, this.inputBox = debug_ui.create_input("1", 10, 850), e.addChild(this.inputBox);
			let r = debug_ui.create_btn("做任务", this, this.onDoQuest).pos(100, 850);
			e.addChild(r);
			let l = debug_ui.create_btn("直接完成", this, this.onFinishQuest).pos(210, 850);
			e.addChild(l);
			let c = debug_ui.create_btn("提交任务", this, this.onCommitQuest).pos(320, 850);
			e.addChild(c);
			let h = debug_ui.create_btn("取消任务", this, this.onCancelQuest).pos(430, 850);
			e.addChild(h);
			let d = debug_ui.create_btn("打印状态", this, this.onClickShow).pos(100, 910);
			e.addChild(d), this.createFromNode(e)
		}
	}
	class DebugItem extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "DebugItem", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0
		}
		buildUi() {
			this.itemScroll.onItemCreate = (() => new debug_ui.scroll_item(400, 50, (t, e) => {
				this._curSelectItem = this._allItems[t];
				let a = db.get_item_db(this._curSelectItem);
				e.setData(`[${a.id}]${a.name}    ${BaseFacade.mItem.getItemCount(a.id)}`, t), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `选中[${a.id}]`)
			})), this.itemScroll.onItemChange = ((t, e) => {
				let a = db.get_item_db(this._allItems[e]);
				t.setData(`[${a.id}]${a.name}    ${BaseFacade.mItem.getItemCount(a.id)}`, e)
			})
		}
		dispose() {
			this.itemScroll && this.itemScroll.clearAllItems(), super.dispose()
		}
		onSelectType(t) {
			this._selectIdx = t, this._curItemType = t + 1;
			let e = [],
				a = db.get_item_db_map();
			Tools.forEachMap(a, (t, a) => {
				a.type == this._curItemType && e.push(t)
			}), this._allItems = e, this.itemScroll.updateList(e.length)
		}
		onClickAddItem() {
			let t = parseInt(this.inputBox.text);
			this._curSelectItem && t && (t > 0 ? BaseFacade.mItem.addItem(this._curSelectItem, t, 2) : BaseFacade.mItem.subItem(this._curSelectItem, -t, 2), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `改变[${this._curSelectItem}]数量${t}`), this.onSelectType(this._selectIdx))
		}
		onClickLvup() {
			if (this._curSelectItem) {
				BaseFacade.mUp.lvupAttr(this._curSelectItem, UpAttrName.Base, !0);
				let t = db.get_item_db(this._curSelectItem);
				_G.sendMsg(BASE_MSG.UI_SHOW_TIP, `升级[${this._curSelectItem}]${t.name}`)
			}
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), this.mask = e.addChild((new Laya.Sprite).loadImage("res/alpha_mask.png"));
			let a = debug_ui.create_tab(80, this, this.onSelectType, ["货币", "物品", "掉落", "养成", "特殊"]);
			a.pos(100, 10, !0), e.addChild(a);
			let i = new Laya.Sprite;
			i.size(400, 700), i.pos(100, 100), e.addChild(i);
			let s = i.addComponent(ReuseScrollList);
			s.vertical = !0, s.itemWidth = 400, s.itemHeight = 50, this.itemScroll = s;
			let n = debug_ui.create_btn("X", this, this.close, 80, 80).pos(10, 10);
			e.addChild(n);
			let o = debug_ui.create_label(10, 850, 500);
			e.addChild(o), this.itemInfo = o, this.inputBox = debug_ui.create_input("1", 10, 900), e.addChild(this.inputBox);
			let r = debug_ui.create_btn("添加物品", this, this.onClickAddItem).pos(100, 900);
			e.addChild(r);
			let l = debug_ui.create_btn("升级", this, this.onClickLvup).pos(210, 900);
			e.addChild(l), this.createFromNode(e)
		}
	}
	class DebugLevel extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "DebugLevel", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0
		}
		buildUi() {
			let t = db.get_level_db_arr();
			this.levelScroll.onItemCreate = (() => new debug_ui.scroll_item(50, 50, t => {
				mgrLevel.setLastLevel(0, t), this.close()
			})), this.levelScroll.onItemChange = ((t, e) => {
				t.setData(e + 1 + "", e)
			}), this.levelScroll.updateList(t.length)
		}
		dispose() {
			this.levelScroll.clearAllItems(), super.dispose()
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight);
			let a = new Laya.Image("res/alpha_mask.png");
			a.size(_G.canvasWidth, _G.canvasHeight), e.addChild(a);
			let i = new Laya.Sprite;
			i.size(400, 700), i.pos(100, 100), e.addChild(i);
			let s = i.addComponent(ReuseScrollList);
			s.vertical = !0, s.eachCount = 8, s.itemWidth = 50, s.itemHeight = 50, this.levelScroll = s;
			let n = debug_ui.create_btn("X", this, this.close, 80, 80).pos(10, 10);
			e.addChild(n), this.createFromNode(e)
		}
	}
	class DebugDraw extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "DebugDraw", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0
		}
		buildUi() {
			this.createScene3DBack(2, 60), this.camera.transform.localPosition = new Laya.Vector3(0, 1.45, .5), this.camera.transform.localRotationEuler = new Laya.Vector3(2, 0, 0), this.init()
		}
		dispose() {
			this._renderMask && (this._renderMask.dispose(), this._renderMask = null), this._model && this._model.dispose(), super.dispose()
		}
		init() {
			console.log("---- init.");
			let t = new RenderMask(this.camera);
			this._renderMask = t;
			let e = !1;
			UiHelper.registerTouchEvent(this.resNode, () => {
				e = !0
			}, () => {
				e && t.drawBrush()
			}, function() {
				e = !1, t.endDraw()
			}), this._renderMask.setBrush("10"); {
				let t = new GModel("face");
				this._model = t, t.setParent(this.scene3DBack), t.create(), t.initPaint(), t.initAnimator(), t.setLayer(2), t.callIfLoaded(() => {
					let e = t.node;
					e.transform.localPosition = new Laya.Vector3(0, 0, 0), e.transform.localRotationEuler = new Laya.Vector3(0, 0, 0);
					let a = "res/ui/pnl_loading/loading_bg2.jpg";
					mgrRes.loadRes(a, RES_TYPE.TEXTURE2D, e => {
						if (!this._renderMask) return;
						this._renderMask.setPaintMaterail(t, 3, a)
					})
				})
			}
		}
		onClick1() {
			this._renderMask.fillMask(!0)
		}
		onClick2() {
			console.log(this._renderMask.checkPercent(.7, 0))
		}
		onClick3() {
			cc.tween(this._model.transform).to(1, {
				localRotationEulerY: -15
			}).to(1, {
				localRotationEulerY: 15
			}).call(this.onClick3.bind(this)).start()
		}
		onClick4() {
			cc.clearTween(this._model.transform)
		}
		onClick5() {
			let t = new Uint8Array(RenderMask.OUT_BITMAP.length),
				e = RenderMask.CAMERA_RENDER_TARGET;
			var a = Date.now() / 1e3;
			for (let a = 0; a < 1e3; a++) e.getData(0, 0, 1, 1, t);
			var i = Date.now() / 1e3;
			console.log("cost1:", i - a)
		}
		onClick6() {
			let t = new Uint8Array(RenderMask.OUT_BITMAP.length),
				e = RenderMask.CAMERA_RENDER_TARGET;
			var a = Date.now() / 1e3;
			for (let a = 0; a < 1e3; a++) e.getData(0, 0, e.width, e.height, t);
			var i = Date.now() / 1e3;
			console.log("cost2:", i - a)
		}
		onClick7() {
			mgrRes.loadRes("res/texture/sf_noise_clouds_01.png", RES_TYPE.TEXTURE2D, t => {
				for (let e = 0; e < this._model.sharedMaterials.length; e++) {
					let a = this._model.sharedMaterials[e];
					a.transition = 0, a.noiseTexture = t, a.setState(64), cc.tween(a).to(2, {
						transition: 1
					}).start()
				}
			})
		}
		onClick8() {
			mgrRes.loadRes("res/texture/sf_noise_clouds_01.png", RES_TYPE.TEXTURE2D, t => {
				for (let e = 0; e < this._model.sharedMaterials.length; e++) {
					let a = this._model.sharedMaterials[e];
					a.transition = 0, a.noiseTexture = t, a.setState(128), cc.tween(a).to(2, {
						transition: 1
					}).start()
				}
			})
		}
		onClick9() {
			this._renderMask.debugMesh()
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), this.mask = e.addChild((new Laya.Sprite).loadImage("res/alpha_mask.png")), e.addChild(debug_ui.create_btn("X", this, this.close, 50, 50).pos(10, 10));
			let a = e.addChild((new Laya.Sprite).pos(80, 10, !0)).addComponent(UIHVLayout);
			a.align = "head", a.horizon = !0, a.addChild(debug_ui.create_btn("btn1", this, this.onClick1, 50, 30)), a.addChild(debug_ui.create_btn("btn2", this, this.onClick2, 50, 30)), a.addChild(debug_ui.create_btn("btn3", this, this.onClick3, 50, 30)), a.addChild(debug_ui.create_btn("btn4", this, this.onClick4, 50, 30)), a.addChild(debug_ui.create_btn("btn5", this, this.onClick5, 50, 30)), a.addChild(debug_ui.create_btn("btn6", this, this.onClick6, 50, 30)), a.addChild(debug_ui.create_btn("btn7", this, this.onClick7, 50, 30)), a.addChild(debug_ui.create_btn("btn8", this, this.onClick8, 50, 30)), a.addChild(debug_ui.create_btn("btn9", this, this.onClick9, 50, 30)), this.createFromNode(e)
		}
	}
	class NodeOperate extends MsgHandler {
		constructor(t, e, a, i = .002) {
			super(), this.destroyed = !1, this._enable = !0, this.bTouched = !1, this.touchX = 0, this.touchY = 0, this.deltaX = 0, this.deltaY = 0, this.bRot = !1, this.rot = 0, this.x = 0, this.y = 0, this.z = 0, this.moveNode = e, this.rotNode = a, this.screenToWorldRate = i, UiHelper.registerTouchEvent(t, this.onTouchStart.bind(this), this.onTouchMove.bind(this), this.onTouchEnd.bind(this)), this.registerListeners({
				[BASE_MSG.SYS_KEY_DOWN]: this.onMsgSysKeyDown.bind(this),
				[BASE_MSG.SYS_KEY_UP]: this.onMsgSysKeyUp.bind(this)
			}), this.startProcMsg()
		}
		set enable(t) {
			this.destroyed || (this._enable = t, t || this.onTouchEnd())
		}
		get enable() {
			return this._enable
		}
		dispose() {
			this.destroyed = !0, this.stopProcMsg()
		}
		onMsgSysKeyDown(t) {
			this.isCtrl = t.ctrlKey, this.isAlt = t.altKey
		}
		onMsgSysKeyUp(t) {
			this.isCtrl = !1, this.isAlt = !1
		}
		onTouchStart() {
			this._enable && (this.touchX = Laya.stage.mouseX, this.touchY = Laya.stage.mouseY, this.bTouched = !0, this.isCtrl || this.isAlt || this.rotStart())
		}
		onTouchMove() {
			this._enable && this.bTouched && this.rotNode && !this.rotNode.destroyed && (this.deltaX = Laya.stage.mouseX - this.touchX, this.deltaY = Laya.stage.mouseY - this.touchY, this.touchX = Laya.stage.mouseX, this.touchY = Laya.stage.mouseY, this.isCtrl ? this.moveMove() : this.isAlt ? this.scaleMove() : this.rotMove())
		}
		onTouchEnd() {
			this.bTouched && (this.bTouched = !1, this.isCtrl || this.isAlt || this.rotEnd())
		}
		moveMove() {
			let t = this.deltaX * this.screenToWorldRate,
				e = -this.deltaY * this.screenToWorldRate;
			this.moveNode.transform.translate(new Laya.Vector3(t, e, 0), !0)
		}
		scaleMove() {
			let t = this.deltaX * this.screenToWorldRate * 2;
			this.moveNode.transform.translate(new Laya.Vector3(0, 0, t), !0)
		}
		rotStart() {
			this.bRot = !1, this.rot = this.rotNode.transform.localRotationEulerY
		}
		rotMove() {
			Mathf.distanceSqr2(this.deltaX, this.deltaY) > 4 && (this.bRot = !0), this.bRot && (this.rot += this.deltaX / 260 * 360, this.rotNode.transform.localRotationEulerY = this.rot % 360)
		}
		rotEnd() {
			this.bRot || (this.bRot = !1), this.autoRot && cc.tween(this.rotNode.transform, !0).to(.6, {
				localRotationEulerY: 0
			}, cc.OPTION.SINE_IN_OUT).start()
		}
	}
	var Keyboard$1 = Laya.Keyboard;
	const ITEM_WIDTH$1 = 180,
		SLIDER_WIDTH$1 = 160,
		SLIDER_HEIGHT$1 = 20;
	class DebugCartoonMat extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "DebugCartoonMat", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.bResetRootNode = !1, this.originAllModel = [], this.modelList = []
		}
		buildUi() {
			this.propGroup.visible = !1, this.createScene3DBack(1, 25), this.camera.transform.localPosition = new Laya.Vector3(0, 2, 2), this.camera.transform.localRotationEuler = new Laya.Vector3(0, 0, 0), 3 == mgrMaterial.lightRotation.length && (this.lightBack.transform.localRotationEuler = new Laya.Vector3(-10, -11, 25)), this.root = this.scene3DBack.addChild(new Laya.Sprite3D), this.roleRoot = this.root.addChild(new Laya.Sprite3D), Tools.forEachMap(db.get_model_db_map(), (t, e) => {
				0 == e.type && this.originAllModel.push(t)
			}), this.originAllModel.sort(), this.allModels = this.originAllModel.slice(), this.modelScroll.onItemCreate = (() => new debug_ui.scroll_item(ITEM_WIDTH$1, 50, (t, e) => {
				this._model = null;
				for (let e = 0; e < this.modelList.length; e++)
					if (this.modelList[e].modelId == this.allModels[t]) {
						this._model = this.modelList[e];
						break
					} this._modelId = this.allModels[t], this._model || (this._model = _G.poolManager.get(GModel, this.allModels[t]), this._model.setParent(this.roleRoot), this._model.debug_reset_shader()), this.propGroup.visible = !1, this.renderScroll.updateList(0), this.matScroll.updateList(0), this._renderName = null, this._matIndex = null, this._model.callIfLoaded(() => {
					this.refreshAllSkin(this._model.node)
				});
				let a = mgrMaterial.editorConfig.camera[this._modelId];
				a ? (this.root.transform.localPosition.setValue(a[0], a[1], a[2]), this.root.transform.localPosition = this.root.transform.localPosition, this.roleRoot.transform.localRotationEulerY = a[3]) : (this.root.transform.localPosition.setValue(0, 0, 0), this.root.transform.localPosition = this.root.transform.localPosition, this.roleRoot.transform.localRotationEulerY = 0), this.modelList.push(this._model)
			})), this.modelScroll.onItemChange = ((t, e) => {
				let a = db.get_model_db(this.allModels[e]);
				t.setData(a.id, e);
				let i = !!mgrMaterial.materialInfos[a.id];
				t.label.color = i ? "#00ff00" : "#ff0000"
			}), this.renderScroll.onItemCreate = (() => new debug_ui.scroll_item(ITEM_WIDTH$1, 50, (t, e) => {
				this.matScroll.updateList(0), this._matIndex = null, this.onSelectRender(this.allRender[t])
			})), this.renderScroll.onItemChange = ((t, e) => {
				t.setData(this.allRender[e], e);
				let a = !(!mgrMaterial.materialInfos[this._modelId] || !mgrMaterial.materialInfos[this._modelId][this.allRender[e]]);
				t.label.color = a ? "#00ff00" : "#ff0000"
			}), this.matScroll.onItemCreate = (() => new debug_ui.scroll_item(ITEM_WIDTH$1, 50, (t, e) => {
				this.propGroup.visible = !0, this.onSelectMat(t)
			})), this.matScroll.onItemChange = ((t, e) => {
				if (t.setData(this.allMat[e], e), this._model) {
					let a = mgrMaterial.materialInfos[this._modelId] && mgrMaterial.materialInfos[this._modelId][this._renderName] && mgrMaterial.materialInfos[this._modelId][this._renderName][e];
					t.label.color = a ? "#00ff00" : "#ff0000"
				}
			}), this.modelScroll.updateList(this.allModels.length), this.registerMsg({
				[BASE_MSG.SYS_KEY_DOWN]: t => {
					switch (t.ctrlKey ? Keyboard$1.CONTROL * t.keyCode : t.keyCode) {
						case Keyboard$1.LEFT:
							this.lightBack.transform.rotate(new Laya.Vector3(0, 3, 0), !1, !1);
							break;
						case Keyboard$1.RIGHT:
							this.lightBack.transform.rotate(new Laya.Vector3(0, -3, 0), !1, !1);
							break;
						case Keyboard$1.UP:
							this.lightBack.transform.rotate(new Laya.Vector3(3, 0, 0), !1, !1);
							break;
						case Keyboard$1.DOWN:
							this.lightBack.transform.rotate(new Laya.Vector3(-3, 0, 0), !1, !1);
							break;
						case Keyboard$1.NUMBER_8:
						case Keyboard$1.NUMBER_2:
						case Keyboard$1.NUMBER_1:
						case Keyboard$1.NUMBER_3:
							break;
						case Keyboard$1.CONTROL * Keyboard$1.NUMBER_2:
							let e = this.modelList[0];
							if (e) {
								this.root.transform.position = new Laya.Vector3;
								let t = UiHelper.findMeshSprite(e.resNode, !0),
									a = [];
								t.meshFilter.sharedMesh.getPositions(a), Laya.Vector3.transformCoordinate(a[0], t.transform.worldMatrix, a[0]);
								let i = this.root.transform.position.clone();
								i.x = -a[0].x, i.y = a[0].y, this.root.transform.position = i
							}
							break;
						case Keyboard$1.CONTROL * Keyboard$1.C:
							if (!this._modelId) return;
							if (!this._renderName) return;
							this.clipboard = Tools.deepCopy(mgrMaterial.getMaterial(this._modelId, this._renderName, this._matIndex)), mgrAlert.alertText("复制成功!");
							break;
						case Keyboard$1.CONTROL * Keyboard$1.V:
							if (!this._modelId) return;
							if (!this._renderName) return;
							if (!this.clipboard) return;
							mgrAlert.alertText("粘贴成功!"), mgrMaterial.setMaterial(this._modelId, this._renderName, this._matIndex, Tools.deepCopy(this.clipboard)), this.onSelectMat(this._matIndex);
							break;
						case Keyboard$1.CONTROL * Keyboard$1.NUMBER_1:
							let a = this.lightBack.transform.localRotationEuler;
							mgrMaterial.lightRotation[0] = Mathf.round(a.x, 2), mgrMaterial.lightRotation[1] = Mathf.round(a.y, 2), mgrMaterial.lightRotation[2] = Mathf.round(a.z, 2);
							let i = this.root.transform.localPosition;
							mgrMaterial.editorConfig.camera[this._modelId] = [i.x, i.y, i.z, this.roleRoot.transform.localRotationEulerY], mgrMaterial.saveToLocal();
							break;
						case Laya.Keyboard.NUMPAD_8:
							this.lightBack.transform.localRotationEulerX -= 1;
							break;
						case Laya.Keyboard.NUMPAD_2:
							this.lightBack.transform.localRotationEulerX += 1;
							break;
						case Laya.Keyboard.NUMPAD_4:
							this.lightBack.transform.localRotationEulerY -= 1;
							break;
						case Laya.Keyboard.NUMPAD_6:
							this.lightBack.transform.localRotationEulerY += 1;
							break;
						case Laya.Keyboard.ESCAPE:
							for (let t = 0; t < this.modelList.length; t++) _G.poolManager.put(this.modelList[t]);
							this.modelList.length = 0, this._model = null, this._modelId = null, this.propGroup.visible = !1, this.renderScroll.updateList(0), this.matScroll.updateList(0)
					}
				}
			}), this.startProcMsg(), this.initTouch()
		}
		initTouch() {
			this.nodeOpt = new NodeOperate(this.touchNode, this.root, this.roleRoot)
		}
		refreshAllSkin(t) {
			let e = [];
			for (let a = 0; a < t.numChildren; a++) {
				let i = t.getChildAt(a);
				(i.skinnedMeshRenderer || i.meshRenderer) && e.push(i.name)
			}
			this.allRender = e, this.renderScroll.updateList(e.length)
		}
		onSelectRender(t) {
			this._renderName = t;
			let e = this._model.node.getChildByName(t),
				a = (e.skinnedMeshRenderer || e.meshRenderer).sharedMaterials,
				i = [];
			for (let t = 0; t < a.length; t++) i.push(a[t].name);
			this.allMat = i, this.matScroll.updateList(i.length)
		}
		onSelectMat(t) {
			this._matIndex = t;
			let e = this._model.node.getChildByName(this._renderName),
				a = e.skinnedMeshRenderer || e.meshRenderer,
				i = (a.sharedMaterials, mgrMaterial.__setCartonMaterial(a, this._modelId, this._renderName, !0)[t]);
			this.operatingMaterialData = mgrMaterial.getMaterial(this._modelId, this._renderName, t, !0), this.operatingMaterial = i, this.propGroup.setObject(this.operatingMaterial, this.operatingMaterialData)
		}
		onInput(t) {
			let e = [],
				a = t.text;
			if (a) {
				for (let t = 0; t < this.originAllModel.length; t++) ~this.originAllModel[t].indexOf(a) && e.push(this.originAllModel[t]);
				this.allModels = e
			} else this.allModels = this.originAllModel.slice();
			this.modelScroll.updateList(this.allModels.length)
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), e.addChild(new Laya.Image("res/alpha_mask.png")).size(_G.canvasWidth, _G.canvasHeight), this.touchNode = e.addChild(new Laya.Sprite).size(_G.canvasWidth, _G.canvasHeight);
			let a = e.addChild(new Laya.Sprite),
				i = debug_ui.create_btn("X", this, this.close, 50, 50).pos(10, 10);
			a.addChild(i);
			let s = [
				[debug_ui.ColorEditor, "漫反射颜色", "albedoColor"],
				[debug_ui.SliderEditor, "漫反射亮度", "albedoIdentity"],
				[debug_ui.SliderEditor, "阴影范围", "shadowRange"],
				[debug_ui.SliderEditor, "阴影强度", "shadowIntensity"],
				[debug_ui.ColorEditor, "阴影颜色", "shadowColor"],
				[debug_ui.SliderEditor, "阴影边界", "shadowBoundary"],
				[debug_ui.SliderEditor, "高亮范围", "specularRange"],
				[debug_ui.SliderEditor, "高亮强度", "specularIntensity"],
				[debug_ui.ColorEditor, "高亮颜色", "specularColor"],
				[debug_ui.SliderEditor, "轮廓宽度", "outlineWidth"],
				[debug_ui.SliderEditor, "轮廓强度", "outlineLightness"],
				[debug_ui.ColorEditor, "轮廓颜色", "outlineColor"],
				[debug_ui.SliderEditor, "重影范围", "secondShadowRange"],
				[debug_ui.SliderEditor, "重影强度", "secondShadowIntensity"],
				[debug_ui.ColorEditor, "重影颜色", "secondShadowColor"],
				[debug_ui.SliderEditor, "重影边界", "secondShadowBoundary"],
				[debug_ui.SliderEditor, "边缘高光范围", "EdgeHightRange"],
				[debug_ui.SliderEditor, "边缘高光强度", "EdgeHightIntensity"],
				[debug_ui.ColorEditor, "边缘高光颜色", "EdgeHightColor"],
				[debug_ui.SliderEditor, "边缘高光边界", "EdgeHightBoundary"],
				[debug_ui.SliderEditor, "alphaTestValue", "alphaTestValue"],
				[debug_ui.TabEditor, "", "renderMode", ["不透", "不透双面", "裁剪单面", "裁剪双面", "半透", "半透双面"]]
			];
			this.propGroup = a.addChild(new debug_ui.PropEditorGroup(s)), this.propGroup.pos(10, 70, !0).size(ITEM_WIDTH$1, 1e3);
			let n = a.addChild(debug_ui.create_input("", _G.canvasWidth - ITEM_WIDTH$1 - 10, 10, ITEM_WIDTH$1));
			n.on(Laya.Event.INPUT, this, this.onInput, [n]);
			let o = a.addChild(new Laya.Sprite);
			o.pos(_G.canvasWidth - ITEM_WIDTH$1 - 10, 100, !0), o.size(ITEM_WIDTH$1, 500);
			let r = o.addComponent(ReuseScrollList);
			r.vertical = !0, r.itemWidth = ITEM_WIDTH$1, r.itemHeight = 50, this.modelScroll = r;
			let l = a.addChild(new Laya.Sprite);
			l.pos(_G.canvasWidth - ITEM_WIDTH$1 - 10, 650, !0), l.size(ITEM_WIDTH$1, 150);
			let c = l.addComponent(ReuseScrollList);
			c.vertical = !0, c.itemWidth = ITEM_WIDTH$1, c.itemHeight = 50, this.renderScroll = c;
			let h = a.addChild(new Laya.Sprite);
			h.pos(_G.canvasWidth - ITEM_WIDTH$1 - 10, 850, !0), h.size(ITEM_WIDTH$1, 150);
			let d = h.addComponent(ReuseScrollList);
			d.vertical = !0, d.itemWidth = ITEM_WIDTH$1, d.itemHeight = 50, this.matScroll = d, this.createFromNode(e)
		}
		dispose() {
			this.stopProcMsg(), this.nodeOpt && this.nodeOpt.dispose(), this.modelScroll && this.modelScroll.clearAllItems(), this.renderScroll && this.renderScroll.clearAllItems(), this.matScroll && this.matScroll.clearAllItems();
			for (let t = 0; t < this.modelList.length; t++) _G.poolManager.put(this.modelList[t]);
			this.modelList.length = 0, super.dispose()
		}
	}
	var Keyboard$2 = Laya.Keyboard;
	const SLIDER_WIDTH$2 = 180;
	class DebugDynamicBone extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "DebugCartoonMat", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.bResetRootNode = !1, this.originAllModels = []
		}
		buildUi() {
			GModel.debugShader = !0, this.propGroup.visible = !1, this.createScene3DBack(1, 25), this.camera.transform.localPosition = new Laya.Vector3(0, 2, 2), this.camera.transform.localRotationEuler = new Laya.Vector3(-15, 0, 0), this.root = this.scene3DBack.addChild(new Laya.Sprite3D), this.roleRoot = this.root.addChild(new Laya.Sprite3D), this._avatar = new RoleAvatar, this.roleRoot.addChild(this._avatar), this._avatar.transform.localPosition = new Laya.Vector3(0, .5, 0), this._avatar.transform.localRotationEuler = new Laya.Vector3(0, 10, 0), this.animScroll.onItemCreate = (() => new debug_ui.scroll_item(SLIDER_WIDTH$2, 50, (t, e) => {
				this._avatar && this._avatar.playAnimation(this._anims[t], !0)
			})), this.animScroll.onItemChange = ((t, e) => {
				t.setData(this._anims[e], e)
			}), this.partScroll.onItemCreate = (() => new debug_ui.scroll_item(SLIDER_WIDTH$2, 50, (t, e) => {
				this.onSelectModel(this.allModel[t])
			})), this.partScroll.onItemChange = ((t, e) => {
				let a = this.allModel[e];
				t.setData(a, e);
				let i = mgrMaterial.dynamicBoneInfos[a] && mgrMaterial.dynamicBoneInfos[a].length > 0;
				t.label.color = i ? "#00ff00" : "#ff0000"
			}), this.childScroll.onItemCreate = (() => new debug_ui.scroll_item(SLIDER_WIDTH$2, 50, (t, e) => {
				this._selectChild && this.onSelectChild(this._selectChild.getChildByName(this._children[t]))
			})), this.childScroll.onItemChange = ((t, e) => {
				if (t.setData(this._children[e], e), this._selectChild) {
					let a = this._selectChild.getChildByName(this._children[e]),
						i = this.generateRoute(a, this._selectRoot),
						s = mgrMaterial.hasDynamicBone(this._selectModelId, i);
					t.label.color = s ? "#00ff00" : "#ff0000"
				}
			}), this.registerMsg({
				[BASE_MSG.SYS_KEY_DOWN]: t => {
					switch (t.ctrlKey ? Keyboard$2.CONTROL * t.keyCode : t.keyCode) {
						case Keyboard$2.CONTROL * Keyboard$2.NUMBER_1:
							this.allModel && (mgrMaterial.saveToLocal(), this.partScroll.updateList(this.allModel.length))
					}
				}
			}), this.startProcMsg(), this.initAnim(), this.initParts(), this.initTouch()
		}
		initAnim() {
			this._anims = [], Tools.forEachMap(db.get_animation_face_db_map(), (t, e) => {
				this._anims.push(t)
			}), this.animScroll.updateList(this._anims.length)
		}
		initParts() {
			let t = [];
			Tools.forEachMap(db.get_model_db_map(), function(e, a) {
				a.editType > 0 && (t[a.editType] || (t[a.editType] = []), t[a.editType].push(e))
			});
			for (const e in t) t[e].sort();
			this.originAllModels = t
		}
		initTouch() {
			this.nodeOpt = new NodeOperate(this.touchNode, this.root, this.roleRoot)
		}
		onSelectType(t) {
			this.allModel = this.originAllModels[t + 1], this.allModel ? this.partScroll.updateList(this.allModel.length, 0) : this.partScroll.updateList(0), this.childScroll.updateList(0)
		}
		onSelectModel(t) {
			this.propGroup.visible = !1, this.childScroll.updateList(0), this._selectModelId = null, this._selectRoot = null, this._selectChild = null, this._selectSpeModel && (_G.poolManager.put(this._selectSpeModel), this._selectSpeModel = null), 11 == db.get_model_db(t).editType ? (this._avatar.active = !1, this._selectSpeModel = _G.poolManager.get(GModel, t), this._selectSpeModel.setParent(this.roleRoot), this._selectSpeModel.callIfLoaded(() => {
				this._selectSpeModel.initAnimator(), this._selectModelId = t, this._selectRoot = this._selectSpeModel.node, this.onSelectChild(this._selectRoot)
			})) : (this._avatar.active = !0, this._avatar.debug_add_model(t, e => {
				this._selectModelId = t, e.boneBinder ? this._selectRoot = this._avatar.baseBody.node : this._selectRoot = e.node, this.onSelectChild(this._selectRoot)
			}))
		}
		onSelectChild(t) {
			if (!t) return;
			this._selectChild = t;
			let e = [];
			for (let a = 0; a < t.numChildren; a++) e.push(t.getChildAt(a).name);
			this._children = e, this.childScroll.updateList(e.length);
			let a = this.generateRoute(this._selectChild, this._selectRoot);
			mgrMaterial.hasDynamicBone(this._selectModelId, a) && this.onClickApply()
		}
		onClickBackChild() {
			this._selectChild && (this._selectChild != this._selectRoot ? this.onSelectChild(this._selectChild.parent) : mgrAlert.alertText("已经在根节点了!"))
		}
		onClickIdle() {
			this._avatar && this._avatar.playIdle()
		}
		generateRoute(t, e) {
			if (t == e) return "/";
			let a = [];
			for (; a.unshift(t.name), (t = t.parent) != e;);
			return a.join("/")
		}
		onClickApply() {
			if (!this._selectChild) return;
			this.curBoneManager = this._selectChild.getComponent(BoneManager), this.curBoneManager || (this.curBoneManager = this._selectChild.addComponent(BoneManager));
			let t = this.generateRoute(this._selectChild, this._selectRoot);
			this.curBoneInfo = mgrMaterial.getDynamicBone(this._selectModelId, t), mgrAlert.alertText("应用成功!"), this.setBoneInfo()
		}
		setBoneInfo() {
			this.propGroup.visible = !0;
			let t = new BoneDao(this.curBoneManager, this.curBoneInfo);
			this.propGroup.setObject(t, this.curBoneInfo)
		}
		onClickRemove() {
			if (this._selectChild) {
				let t = this.generateRoute(this._selectChild, this._selectRoot);
				mgrMaterial.removeDynamicBone(this._selectModelId, t);
				let e = this._selectChild.getComponent(BoneManager);
				if (e) return e.destroy(), void mgrAlert.alertText("移除成功!")
			}
			mgrAlert.alertText("没有可移除的对象!")
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), e.addChild(new Laya.Image("res/alpha_mask.png")).size(_G.canvasWidth, _G.canvasHeight), this.touchNode = e.addChild(new Laya.Sprite).size(_G.canvasWidth, _G.canvasHeight), e.addChild(debug_ui.create_btn("X", this, this.close, 50, 50).pos(10, 10));
			let a = [
				[debug_ui.SliderEditor, "位移插值", "df"],
				[debug_ui.SliderEditor, "位移限制", "dl", [0, .1, 2]],
				[debug_ui.SliderEditor, "1级碰撞size", "c1s", [0, .2, 2]],
				[debug_ui.SliderEditor, "2级碰撞size", "c2s", [0, .2, 2]],
				[debug_ui.SliderEditor, "3级碰撞size", "c3s", [0, .2, 2]],
				[debug_ui.SliderEditor, "4级碰撞size", "c4s", [0, .2, 2]],
				[debug_ui.SliderEditor, "5级碰撞size", "c5s", [0, .2, 2]],
				[debug_ui.SliderEditor, "6级碰撞size", "c6s", [0, .2, 2]],
				[debug_ui.SliderEditor, "重力", "gravity", [0, .05, 2]]
			];
			this.propGroup = e.addChild(new debug_ui.PropEditorGroup(a)), this.propGroup.pos(10, 70, !0);
			let i = e.addChild(new Laya.Sprite).size(SLIDER_WIDTH$2, 300).pos(10, 560);
			this.animScroll = i.addComponent(ReuseScrollList), this.animScroll.vertical = !0, this.animScroll.itemWidth = SLIDER_WIDTH$2, this.animScroll.itemHeight = 50;
			let s = e.addChild(new Laya.Sprite).size(SLIDER_WIDTH$2, 600).pos(_G.canvasWidth - SLIDER_WIDTH$2 - 80, 50);
			this.partScroll = s.addComponent(ReuseScrollList), this.partScroll.vertical = !0, this.partScroll.itemWidth = SLIDER_WIDTH$2, this.partScroll.itemHeight = 50, e.addChild(debug_ui.create_btn("应用动态骨骼", this, this.onClickApply, 120, 50).pos(_G.canvasWidth - SLIDER_WIDTH$2 - 80, 660));
			let n = e.addChild(new Laya.Sprite).size(SLIDER_WIDTH$2, 300).pos(_G.canvasWidth - SLIDER_WIDTH$2 - 80, 720);
			this.childScroll = n.addComponent(ReuseScrollList), this.childScroll.vertical = !0, this.childScroll.itemWidth = SLIDER_WIDTH$2, this.childScroll.itemHeight = 50;
			e.addChild(debug_ui.create_tab(60, this, this.onSelectType, ["面饰", "头发", "头饰", "耳饰", "颈饰", "衣服", "鞋子", "袜子", "手饰", "背部", "NPC"]).pos(_G.canvasWidth - 70, 50)).direction = "vertical";
			let o = e.addChild(new Laya.Sprite).pos(10, _G.canvasHeight - 60, !0).addComponent(UIHVLayout);
			o.horizon = !0, o.align = "head", o.space = 5, o.addChild(debug_ui.create_btn("隐藏翅膀", this, () => {
				mgrAlert.alertText("暂无此功能")
			})), o.addChild(debug_ui.create_btn("显示翅膀", this, () => {
				mgrAlert.alertText("暂无此功能")
			})), o.addChild(debug_ui.create_btn("移除", this, this.onClickRemove)), o.addChild(debug_ui.create_btn("返回上一节点", this, this.onClickBackChild)), o.addChild(debug_ui.create_btn("idle", this, this.onClickIdle)), this.createFromNode(e)
		}
		dispose() {
			this.stopProcMsg(), this.nodeOpt && this.nodeOpt.dispose(), this.animScroll && this.animScroll.clearAllItems(), this.partScroll && this.partScroll.clearAllItems(), this.childScroll && this.childScroll.clearAllItems(), this._avatar && this._avatar.destroy(), super.dispose()
		}
	}
	class BoneDao {
		constructor(t, e) {
			this.boneManger = t, this.boneData = e
		}
		get df() {
			return this.boneData.df
		}
		get dl() {
			return this.boneData.dl
		}
		get c1s() {
			return this.boneData.c1s
		}
		get c2s() {
			return this.boneData.c2s
		}
		get c3s() {
			return this.boneData.c3s
		}
		get c4s() {
			return this.boneData.c4s
		}
		get c5s() {
			return this.boneData.c5s
		}
		get c6s() {
			return this.boneData.c6s
		}
		get gravity() {
			return this.boneData.gravity
		}
		set df(t) {
			this.boneManger.setDisplacementFactor(t)
		}
		set dl(t) {
			this.boneManger.setMaxDisplacement(t)
		}
		set c1s(t) {
			this.boneManger.setCollider1Size(t)
		}
		set c2s(t) {
			this.boneManger.setCollider2Size(t)
		}
		set c3s(t) {
			this.boneManger.setCollider3Size(t)
		}
		set c4s(t) {
			this.boneManger.setCollider4Size(t)
		}
		set c5s(t) {
			this.boneManger.setCollider5Size(t)
		}
		set c6s(t) {
			this.boneManger.setCollider6Size(t)
		}
		set gravity(t) {
			this.boneManger.setGravity({
				x: 0,
				y: -t,
				z: 0
			})
		}
	}
	class DebugGuide extends debug_ui.DebugBase {
		constructor() {
			super(...arguments), this.resourceName = "DebugGuide"
		}
		buildUi() {
			let t = new Laya.Sprite;
			t.size(400, 700), t.pos(100, 100), this.addChild(t);
			let e = t.addComponent(ReuseScrollList);
			e.vertical = !0, e.itemWidth = 400, e.itemHeight = 50, this.guideScroll = e;
			let a = debug_ui.create_label(10, 850, 500);
			this.addChild(a), this.guideInfo = a, this.addChild(debug_ui.create_btn("开始", this, this.startGuide)).pos(100, 900), this.addChild(debug_ui.create_btn("移除", this, this.removeGuide)).pos(220, 900);
			let i = [];
			for (const t in GUD_EVENT) i.push(t);
			this.guideScroll.onItemCreate = (() => new debug_ui.scroll_item(400, 50, (t, e) => {
				this._guideId = i[t], this.guideInfo.text = this._guideId
			})), this.guideScroll.onItemChange = ((t, e) => {
				t.setData(i[e], e)
			}), this.guideScroll.updateList(i.length)
		}
		dispose() {
			this.guideScroll.clearAllItems(), super.dispose()
		}
		startGuide() {
			this._guideId && (this.close(), mgrGuide.dispatchGuide(this._guideId))
		}
		removeGuide() {
			this._guideId && (mgrGuide.removeGuide(this._guideId), mgrAlert.alertText(`[${this._guideId}]移除成功`))
		}
		on_click_btnClose() {
			this.close()
		}
	}
	class DebugShader extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "DebugShader", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0
		}
		buildUi() {
			this.createScene3DBack(2, 60), this.camera.transform.localPosition = new Laya.Vector3(0, 0, 2.5), this.camera.transform.localRotationEuler = new Laya.Vector3(2, 0, 0), this.init()
		}
		dispose() {
			this._model && this._model.dispose(), super.dispose()
		}
		init() {
			console.log("---- init.");
			let t = _G.poolManager.get(GModel, db.MODEL_DB_ID.body);
			t.setParent(this.scene3DBack);
			let e = _G.poolManager.get(GModel, db.MODEL_DB_ID.face);
			t.addToChild("Guadian_toufa", e), _G.poolManager.get(GModel, "yll_ip001_yifu").setParent(this.scene3DBack)
		}
		onClick1() {}
		onClick2() {}
		onClick3() {}
		onClick4() {}
		onClick5() {}
		onClick6() {}
		onClick7() {}
		onClick8() {}
		onClick9() {}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight);
			let a = new Laya.Image("res/alpha_mask.png");
			a.size(_G.canvasWidth, _G.canvasHeight), e.addChild(a), e.addChild(debug_ui.create_btn("X", this, this.close, 50, 50).pos(10, 10));
			let i = e.addChild((new Laya.Sprite).pos(80, 10, !0)).addComponent(UIHVLayout);
			i.align = "head", i.horizon = !0, i.addChild(debug_ui.create_btn("btn1", this, this.onClick1, 50, 30)), i.addChild(debug_ui.create_btn("btn2", this, this.onClick2, 50, 30)), i.addChild(debug_ui.create_btn("btn3", this, this.onClick3, 50, 30)), i.addChild(debug_ui.create_btn("btn4", this, this.onClick4, 50, 30)), i.addChild(debug_ui.create_btn("btn5", this, this.onClick5, 50, 30)), i.addChild(debug_ui.create_btn("btn6", this, this.onClick6, 50, 30)), i.addChild(debug_ui.create_btn("btn7", this, this.onClick7, 50, 30)), i.addChild(debug_ui.create_btn("btn8", this, this.onClick8, 50, 30)), i.addChild(debug_ui.create_btn("btn9", this, this.onClick9, 50, 30)), this.createFromNode(e)
		}
	}
	class PanelContract extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelContract.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_contractNode: "UIToggleGroup",
				cc_toggleContract0: "UIToggle",
				cc_spriteContract0: "Laya.Sprite",
				cc_spriteLock0: "Laya.Sprite",
				cc_toggleContract1: "UIToggle",
				cc_spriteContract1: "Laya.Sprite",
				cc_spriteLock1: "Laya.Sprite",
				cc_toggleContract2: "UIToggle",
				cc_spriteContract2: "Laya.Sprite",
				cc_spriteLock2: "Laya.Sprite",
				cc_toggleContract3: "UIToggle",
				cc_spriteContract3: "Laya.Sprite",
				cc_spriteLock3: "Laya.Sprite",
				cc_toggleContract4: "UIToggle",
				cc_spriteContract4: "Laya.Sprite",
				cc_spriteLock4: "Laya.Sprite",
				cc_toggleContract5: "UIToggle",
				cc_spriteContract5: "Laya.Sprite",
				cc_spriteLock5: "Laya.Sprite",
				cc_toggleContract6: "UIToggle",
				cc_spriteContract6: "Laya.Sprite",
				cc_spriteLock6: "Laya.Sprite",
				cc_toggleContract7: "UIToggle",
				cc_toggleContract8: "UIToggle",
				cc_toggleContract9: "UIToggle",
				cc_toggleContract10: "UIToggle",
				cc_toggleContract11: "UIToggle",
				cc_buttonCircle: "UIButton",
				cc_buttonBox: "UIButton",
				cc_buttonOk: "UIButton",
				cc_layoutBtn: "UIHVLayout",
				cc_spriteBtnAdvFlag: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.selectIndex = 0, this.oldContractIdx = null, this.instOrBanner = new AdvInstOrBanner("enter_contract", ""), this.GUIDE_CONTRACT_POS = [{
				x: -168,
				y: -279
			}, {
				x: 0,
				y: -279
			}, {
				x: 168,
				y: -279
			}, {
				x: -168,
				y: -36.5
			}, {
				x: 0,
				y: -36.5
			}, {
				x: 168,
				y: -36.5
			}, {
				x: 0,
				y: 206
			}], this.SWITCH_CONTRACT_POS = [{
				x: -210,
				y: -265
			}, {
				x: -70,
				y: -265
			}, {
				x: 70,
				y: -265
			}, {
				x: 210,
				y: -265
			}, {
				x: -210,
				y: -30
			}, {
				x: -70,
				y: -30
			}, {
				x: 70,
				y: -30
			}, {
				x: 210,
				y: -30
			}, {
				x: -210,
				y: 205
			}, {
				x: -70,
				y: 205
			}, {
				x: 70,
				y: 205
			}, {
				x: 210,
				y: 205
			}], this.GUIDE_CONTRACT_SCALE = .8, this.SWITCH_CONTRACT_SCALE = .8, this.guideFinger = null, this.loadState = 0, this.bClickOk = !1
		}
		static getResLoader(t) {
			let e = new ResLoader;
			return e.add(db.get_animation_db(MODEL_ANIM.FACE_COME).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHENTI_COME).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHENTI_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_COME).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_come).resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.come).resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.wawahe).resPath, RES_TYPE.PREFAB3D), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME01).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME02).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME03).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME01).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME02).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME03).path, RES_TYPE.ANIMATIONCLIP), t && t.bSwitch && (e.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_jiechu).resPath, RES_TYPE.PREFAB3D), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHENTI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_JIECHU).path, RES_TYPE.ANIMATIONCLIP)), e.add("res/ui/PanelContract.json", RES_TYPE.PREFAB2D), e
		}
		static openPanel(t, e = {}) {
			let a = this.getResLoader(e);
			mgrAlert.openWait(a, function() {
				mgrPanel.openPanelWithSingleton(UI_NAME.PanelContract, e, t)
			})
		}
		buildUi() {
			FileRecord.getData("bNewRecord") || mgrAlert.openPanelLoading(UI_NAME.PanelLanguageDialog), this.buttonCircle.node.visible = !1, this.buttonOk.node.visible = !1, this.buttonBox.node.visible = !1, this.oldContractIdx = mgrGame.contractIndex;
			let t = mgrAdv.checkActive("switch_role"),
				e = !1,
				a = [0, 1, 2, 3, 4, 5, 6],
				i = [7, 8, 9, 10, 11];
			if (this.context && this.context.bSwitch) {
				for (let t = 0; t < a.length; t++) {
					let e = a[t],
						i = this["toggleContract" + e.toString()];
					i && (i.node.visible = !0, i.node.x = this.SWITCH_CONTRACT_POS[e].x, i.node.y = this.SWITCH_CONTRACT_POS[e].y, i.node.scaleX = this.SWITCH_CONTRACT_SCALE, i.node.scaleY = this.SWITCH_CONTRACT_SCALE)
				}
				for (let t = 0; t < i.length; t++) {
					let e = i[t],
						a = this["toggleContract" + e.toString()];
					if (a) {
						let t = mgrGame.isContractUnlock(e);
						a.node.getChildByName("spriteLockFateTest").visible = !t, a.node.getChildByName("spriteFateTest").visible = !t, a.node.visible = !0, a.node.x = this.SWITCH_CONTRACT_POS[e].x, a.node.y = this.SWITCH_CONTRACT_POS[e].y, a.node.scaleX = this.SWITCH_CONTRACT_SCALE, a.node.scaleY = this.SWITCH_CONTRACT_SCALE
					}
				}
				GameStatistics.statisOnStageStart(13001)
			} else {
				for (let t = 0; t < a.length; t++) {
					let e = a[t],
						i = this["toggleContract" + e.toString()];
					i && (i.node.visible = !0, i.node.x = this.GUIDE_CONTRACT_POS[e].x, i.node.y = this.GUIDE_CONTRACT_POS[e].y, i.node.scaleX = this.GUIDE_CONTRACT_SCALE, i.node.scaleY = this.GUIDE_CONTRACT_SCALE)
				}
				for (let t = 0; t < i.length; t++) {
					let e = this["toggleContract" + i[t].toString()];
					e && (e.node.visible = !1)
				}
			}
			this.buttonClose.node.visible = this.context && this.context.bSwitch;
			for (let a = 0; a <= 11; a++) {
				let i = this["spriteContract" + a];
				i && (i.visible = t && this.context && this.context.bSwitch && mgrGame.contractIndex != a && !mgrGame.isContractUnlock(a), i.visible && (e = !0));
				let s = this["spriteLock" + a];
				s && (s.visible = !t && this.context && this.context.bSwitch && mgrGame.contractIndex != a && !mgrGame.isContractUnlock(a))
			}
			let s = Mathf.TEMP_POINTS[0],
				n = Mathf.TEMP_POINTS[1],
				o = this.context && this.context.bSwitch ? this.SWITCH_CONTRACT_SCALE : this.GUIDE_CONTRACT_SCALE;
			for (let t = 0; t <= 11; t++) {
				let e = this["toggleContract" + t];
				e.enabled = !1;
				let a = e.node;
				s.setTo(520, -660), n.setTo(a.x, a.y), a.pos(s.x, s.y, !0).scale(0, 0, !0).alpha = 0, cc.tween(a).delay(.25 * t).parallel(cc.tween().to(1, {
					scaleX: o,
					scaleY: o,
					alpha: 1
				}), cc.tween().then(cc.bezierFromTo(1, s, n, .8))).start()
			}
			this.scheduleOnce(2.5, () => {
				for (let t = 0; t <= 11; t++) this["toggleContract" + t].enabled = !0;
				this.buttonOk.node.visible = !0, UiHelper.playFadein(this.buttonOk.node), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONOK, this.buttonOk.node), this.selectEffect = this.addEffect("146"), this.selectEffect.setScale(o, o, o);
				let t = Mathf.random(7) - 1;
				this["toggleContract" + t].check(), this.scheduleOnce(.1, () => {
					this["on_click_toggleContract" + t]()
				})
			}), mgrGuide.dispatchGuide(GUD_EVENT.START_GAME), mgrSound.playMusic("bj_002", !0);
			let r = new Laya.Vector3(_G.canvasWidth / 2, _G.canvasHeight / 2, 0),
				l = new Laya.Vector3,
				c = this.addEffect("141");
			this.global2camer(r, l), c.play(l), this.context && this.context.bSwitch ? (this.oldParts = Tools.deepCopy(mgrPart.partsWear), t && e && mgrAdv.statisVideoShow("switch_role"), mgrSdk.tryStartRecord(), GameStatistics.statisCommonEvent(9101)) : GameStatistics.statisCommonEvent(1003), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				GUIDE_SELECT_ROLE: this.onMsgGuideSelectRole.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.clearWawahe(), this.clearOld(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONOK), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX), this.context && this.context.bSwitch && GameStatistics.statisOnStageEnd(13001), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		clearWawahe() {
			this.wawahe && (this.wawahe.dispose(), this.wawahe = null)
		}
		clearOld() {
			this.oldAvatar && (this.oldAvatar.destroy(), this.oldAvatar = null), this.oldShexiangji && (this.oldShexiangji.dispose(), this.oldShexiangji = null), this.oldWawahe && (this.oldWawahe.dispose(), this.oldWawahe = null), this.oldGemstone && (_G.poolManager.put(this.oldGemstone), this.oldGemstone = null), this.oldRoom && (this.oldRoom.dispose(), this.oldRoom = null)
		}
		onMsgAdvShowSuc(t) {
			"switch_role" == t.advName && (this.onSelect(this.selectIndex), this.buttonOk.interactable = !1, cc.tween(this.buttonOk.node).to(.2, cc.PROP.ALPHA0).start())
		}
		onMsgGuideSelectRole(t) {
			Timer.callLater(5, () => {
				if (this.bClickOk) return;
				if (this.destroyed || !this.buttonOk || this.buttonOk.node.destroyed) return;
				let t = this.addEffect("135");
				t.setScale(1, 1, 1), t.followTarget(this.buttonOk.node, this.cameraEffect, 100), t.play(), this.guideFinger = t
			}, this)
		}
		onSelect(t) {
			this.context && this.context.bSwitch ? GameStatistics.statisCommonEvent(9102 + t, t == mgrGame.contractIndex ? 0 : 1) : (t <= 4 ? GameStatistics.statisCommonEvent(2003 + t) : t > 4 && GameStatistics.statisCommonEvent(2034 + t), GameStatistics.statisOnStageEnd(10002), GameStatistics.statisOnStageStart(10003)), this.selectEffect.stop(), this.selectEffect.hide(), mgrGame.contractIndex = t, this.startLoad();
			for (let e = 0; e <= 11; e++) {
				let a = this["toggleContract" + e],
					i = this["spriteContract" + e];
				i && (i.visible = !1), a.enabled = !1;
				let s = a.node;
				e != t ? cc.tween(s, !0).to(.3, {
					alpha: 0
				}).start() : cc.tween(s, !0).to(1, {
					scaleX: 1.5,
					scaleY: 1.5,
					x: 0,
					y: 0
				}).to(.2, cc.PROP.ALPHA0).call(this.onButtonAnimFinish.bind(this)).start()
			}
		}
		startLoad() {
			let t = new ResLoader;
			mgrPart.addPartResList(mgrPart.partsWear, t, !0), t.setLoadingCallback(this.onButtonAnimFinish.bind(this));
			let e = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			if (t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D), null != this.oldContractIdx && mgrGame.contractIndex != this.oldContractIdx) {
				let e = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
				t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D)
			}
			t.loadAll()
		}
		onButtonAnimFinish() {
			this.loadState++, 2 == this.loadState && (cc.tween(this.bg).to(.1, cc.PROP.ALPHA0).hide().start(), this.buttonClose.node.visible = !1, this.context && this.context.bSwitch && this.oldContractIdx != mgrGame.contractIndex ? (this.oldRoom = new RoomBath, this.oldRoom.load(this.onOldSceneLoaded.bind(this))) : (this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))))
		}
		onOldSceneLoaded() {
			this.addChild(this.oldRoom.scene), this.resNode.setChildIndex(this.oldRoom.scene, 0), this.oldRoom.changeToMain(), this.oldRoom.skybox.active = !0, this.oldRoom.camera.active = !1, this.oldRoom.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.oldRoom.mapNode.transform, "localScale", 3, 3, 3), this.oldAvatar = new RoleAvatar(this.oldParts), this.oldRoom.root.addChild(this.oldAvatar), this.oldWawahe = new GModel(db.MODEL_DB_ID.wawahe), this.oldWawahe.create(), this.oldWawahe.initAnimator(), this.oldWawahe.setParent(this.oldRoom.root), this.oldWawahe.hide(), this.oldShexiangji = new GModel(db.MODEL_DB_ID.shexiangji_jiechu), this.oldShexiangji.create(), this.oldShexiangji.setParent(this.oldRoom.root), this.oldShexiangji.callIfLoaded(() => {
				let t = this.oldShexiangji.findChild("camera");
				t.nearPlane = .01, t.fieldOfView = 60;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular
			});
			let t = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
			this.oldGemstone = _G.poolManager.get(GModel, t), this.oldGemstone.initAnimator(), this.oldGemstone.getAnimator().cullingMode = Laya.Animator.CULLINGMODE_ALWAYSANIMATE, this.oldGemstone.setParent(this.oldRoom.root);
			let e = new AnimatorFixedPlayer;
			e.addModelAnim(this.oldWawahe, MODEL_ANIM.WAWAHE_JIECHU), e.addModelAnim(this.oldShexiangji, MODEL_ANIM.SHEXIANGJI_JIECHU), e.addModelAnim(this.oldAvatar.baseBody, MODEL_ANIM.SHENTI_JIECHU), e.addModelAnim(this.oldAvatar.baseFace, MODEL_ANIM.FACE_JIECHU), e.addTimeCallback(110 / 30 / e.duration, () => {
				this.oldWawahe.show()
			}), e.addTimeCallback(.78, () => {
				this.onSwitchComplete(() => {
					this.clearOld(), e.dispose()
				})
			}), e.addTimeCallback(1, () => {}), e.play();
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.oldGemstone, MODEL_ANIM.GEMSTONE_JIECHU), a.addTimeCallback(80 / 30 / a.duration, () => {
				this.oldGemstone.hide()
			}), a.play()
		}
		onSwitchComplete(t) {
			UiHelper.playBlackFlash(1, () => {
				t(), this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))
			})
		}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToMain(), this.room.skybox.active = !0, this.room.camera.active = !1, this.room.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 3, 3, 3), this.wawahe = new GModel(db.MODEL_DB_ID.wawahe), this.wawahe.create(), this.wawahe.initAnimator(), this.wawahe.setParent(this.room.root), this.shexiangji = new GModel(db.MODEL_DB_ID.shexiangji_come), this.shexiangji.create(), this.shexiangji.setParent(this.room.root), this.shexiangji.callIfLoaded(() => {
				let t = this.shexiangji.findChild("camera");
				t.nearPlane = .01;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular, this.shexiangji_effect = this.shexiangji.findChild("e_wawahe_come"), this.shexiangji_effect && (this.shexiangji_effect.active = !1)
			});
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME01), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME01), t.addTimeCallback(1, () => {
				let t = new AnimatorFixedPlayer;
				t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME02), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME02), t.addTimeCallback(1, () => {
					this.buttonBox.node.visible = !0, mgrGuide.dispatchGuide(GUD_EVENT.START_CONTRACT), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX, this.buttonBox.node)
				}), t.play()
			}), t.play()
		}
		playRoleAnim() {
			this.avatar = new RoleAvatar, this.room.root.addChild(this.avatar);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.avatar.baseBody, MODEL_ANIM.SHENTI_COME), t.addModelAnim(this.avatar.baseFace, MODEL_ANIM.FACE_COME), t.addTimeCallback(1, this.onRoleAnimFinish.bind(this)), t.play()
		}
		playGemstone() {
			let t = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			this.gemstone = _G.poolManager.get(GModel, t), this.gemstone.initAnimator(), this.gemstone.setParent(this.room.root), this.gemstone.setPosition(0, .05, 0), this.gemstone.playAnims(0, [MODEL_ANIM.GEMSTONE_COME, MODEL_ANIM.GEMSTONE_ZHANSHI], !0), this.gemstone.initPaint(), this.gemstone.callIfLoaded(() => {
				let t = this.gemstone.getChildAt(0);
				cc.tween(this).to(1.3, cc.PROP.EMPTY, {
					onUpdate(e, a) {
						t.transform.scale = t.transform.scale
					}
				}).start()
			})
		}
		onWawaheAnimFinish() {
			this.clearWawahe()
		}
		onRoleAnimFinish() {
			this.avatar.playAnimation(MODEL_ANIM.SHENTI_IDLE), this.buttonCircle.node.visible = !0, mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE, this.buttonCircle.node)
		}
		playGotoRoom() {
			Logger.warn("---\x3e on_click_buttonCircle 2"), this.context && this.context.bSwitch && BaseFacade.mGoal.commit(ACTION_ID.SWITCH_ROLE, 1), Logger.warn("---\x3e on_click_buttonCircle 3"), this.shexiangji.findChild("e_wawahe_come").active = !1, _G.isGuiding = !0, Logger.warn("---\x3e on_click_buttonCircle 4"), mgrPanel.openPanel(UI_NAME.PanelMain, {
				type: ROOM_TYPE.NORMAL,
				parts: null,
				data: {
					room: this.room,
					avatar: this.avatar,
					shexiangji: this.shexiangji,
					gemstone: this.gemstone
				},
				bSwitch: this.context && this.context.bSwitch
			}, !1, () => {
				Logger.warn("---\x3e on_click_buttonCircle 5"), this.room.scene.removeSelf(), this.close(), Logger.warn("---\x3e on_click_buttonCircle 6")
			})
		}
		onClickContract(t) {
			this.selectIndex = t, this.spriteBtnAdvFlag.visible = this["spriteContract" + t] && this["spriteContract" + t].visible, this.layoutBtn.updateLayout(0, !0);
			let e = this.node2Camera(this["toggleContract" + t.toString()].node);
			if (this.selectEffect.show(), this.selectEffect.play(e), !mgrGame.isContractUnlock(t)) switch (t) {
				case 0:
				case 1:
				case 2:
				case 3:
				case 4:
				case 5:
				case 6:
					break;
				case 7:
					mgrAdv.checkActive("role_test") && mgrAlert.alertDialog({
						desc: mgrI18n.getText("panelContract.2"),
						confirmText: mgrI18n.getText("panelContract.7"),
						confirm: () => {
							mgrAlert.openPanelLoading(UI_NAME.PanelRoleTest, null, this.close.bind(this))
						},
						close: () => {}
					});
					break;
				case 8:
					mgrAdv.checkActive("role_test") && mgrAlert.alertDialog({
						desc: mgrI18n.getText("panelContract.3"),
						confirmText: mgrI18n.getText("panelContract.7"),
						confirm: () => {
							mgrAlert.openPanelLoading(UI_NAME.PanelRoleTest, null, this.close.bind(this))
						},
						close: () => {}
					});
					break;
				case 9:
					mgrAdv.checkActive("draw_dance") && mgrAlert.alertDialog({
						desc: mgrI18n.getText("panelContract.4"),
						confirmText: mgrI18n.getText("panelContract.8"),
						confirm: () => {
							mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, {}, this.close.bind(this))
						},
						close: () => {}
					});
					break;
				case 10:
					mgrAlert.alertDialog({
						desc: mgrI18n.getText("panelContract.5"),
						confirmText: mgrI18n.getText("panelContract.9"),
						confirm: () => {
							mgrAlert.openPanelLoading(UI_NAME.PanelClassRoom, {}, this.close.bind(this))
						},
						close: () => {}
					});
					break;
				case 11:
					mgrAlert.alertDialog({
						desc: mgrI18n.getText("panelContract.6"),
						confirmText: mgrI18n.getText("panelDancePreview.1"),
						confirm: () => {
							mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, {}, this.close.bind(this))
						},
						close: () => {}
					})
			}
		}
		on_click_buttonCircle() {
			Logger.warn("---\x3e on_click_buttonCircle 1"), this.buttonCircle.interactable = !1, cc.tween(this.buttonCircle.node, !0).to(.2, cc.PROP.ALPHA0).call(this.playGotoRoom.bind(this)).start(), Logger.warn("---\x3e on_click_buttonCircle 7")
		}
		on_click_buttonBox() {
			this.buttonBox.node.visible = !1, this.shexiangji_effect && (this.shexiangji_effect.active = !0);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME03), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME03), t.addTimeCallback(3 / t.duration, this.playGemstone.bind(this)), t.addTimeCallback(1, this.onWawaheAnimFinish.bind(this)), t.play(), this.playRoleAnim()
		}
		on_click_buttonOk() {
			this.guideFinger && !this.guideFinger.destroyed && this.guideFinger.hide(), this.bClickOk = !0, this.context && this.context.bSwitch ? this.selectIndex == mgrGame.contractIndex ? mgrAlert.alertDialog(mgrI18n.getText("panelContract.11"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				this.onSelect(this.selectIndex), this.buttonOk.interactable = !1, cc.tween(this.buttonOk.node).to(.2, cc.PROP.ALPHA0).start()
			}, () => {}) : mgrGame.isContractUnlock(this.selectIndex) ? mgrAlert.alertDialog(mgrI18n.getText("panelContract.12"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				this.onSelect(this.selectIndex), this.buttonOk.interactable = !1, cc.tween(this.buttonOk.node).to(.2, cc.PROP.ALPHA0).start()
			}, () => {}) : 7 == this.selectIndex ? mgrAdv.checkActive("role_test") ? mgrAlert.alertDialog({
				desc: mgrI18n.getText("panelContract.2"),
				confirmText: mgrI18n.getText("panelContract.7"),
				confirm: () => {
					mgrAlert.openPanelLoading(UI_NAME.PanelRoleTest, null, this.close.bind(this))
				},
				close: () => {}
			}) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelContract.13")) : 8 == this.selectIndex ? mgrAdv.checkActive("role_test") ? mgrAlert.alertDialog({
				desc: mgrI18n.getText("panelContract.3"),
				confirmText: mgrI18n.getText("panelContract.7"),
				confirm: () => {
					mgrAlert.openPanelLoading(UI_NAME.PanelRoleTest, null, this.close.bind(this))
				},
				close: () => {}
			}) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelContract.13")) : 9 == this.selectIndex ? mgrAdv.checkActive("draw_dance") ? mgrAlert.alertDialog({
				desc: mgrI18n.getText("panelContract.4"),
				confirmText: mgrI18n.getText("panelContract.8"),
				confirm: () => {
					mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, {}, this.close.bind(this))
				},
				close: () => {}
			}) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelContract.14")) : 10 == this.selectIndex ? mgrAlert.alertDialog({
				desc: mgrI18n.getText("panelContract.5"),
				confirmText: mgrI18n.getText("panelContract.9"),
				confirm: () => {
					mgrAlert.openPanelLoading(UI_NAME.PanelClassRoom, {}, this.close.bind(this))
				},
				close: () => {}
			}) : 11 == this.selectIndex ? mgrAlert.alertDialog({
				desc: mgrI18n.getText("panelContract.6"),
				confirmText: mgrI18n.getText("panelContract.10"),
				confirm: () => {
					mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, {}, this.close.bind(this))
				},
				close: () => {}
			}) : this["spriteContract" + this.selectIndex].visible ? (mgrAdv.statisVideoClick("switch_role"), mgrAdv.dispatchAdv("switch_role", {}, !0)) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelContract.15")) : (this.onSelect(this.selectIndex), this.buttonOk.interactable = !1, cc.tween(this.buttonOk.node).to(.2, cc.PROP.ALPHA0).start())
		}
		on_click_buttonClose() {
			mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_toggleContract0() {
			this.onClickContract(0)
		}
		on_click_toggleContract1() {
			this.onClickContract(1)
		}
		on_click_toggleContract2() {
			this.onClickContract(2)
		}
		on_click_toggleContract3() {
			this.onClickContract(3)
		}
		on_click_toggleContract4() {
			this.onClickContract(4)
		}
		on_click_toggleContract5() {
			this.onClickContract(5)
		}
		on_click_toggleContract6() {
			this.onClickContract(6)
		}
		on_click_toggleContract7() {
			this.onClickContract(7)
		}
		on_click_toggleContract8() {
			this.onClickContract(8)
		}
		on_click_toggleContract9() {
			this.onClickContract(9)
		}
		on_click_toggleContract10() {
			this.onClickContract(10)
		}
		on_click_toggleContract11() {
			this.onClickContract(11)
		}
	}
	class DebugBezier extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "bezier", this.sprites = [], this.spriteCount = 4
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			this.mask = e.addChild((new Laya.Sprite).loadImage(GConfig.img_alpha_mask)), this.drawNode = e.addChild(new Laya.Sprite).size(2e3, 2e3).pos(-_G.left, -_G.top, !0), this.moveSprite = this.drawNode.addChild(new Laya.Sprite).size(20, 20).pivot(10, 10), this.moveSprite.texture = UiHelper.WHITE_TEXTURE;
			for (let t = 0; t < 4; t++) {
				let e = this.drawNode.addChild(new Laya.Sprite).size(20, 20).pivot(10, 10);
				e.texture = UiHelper.WHITE_TEXTURE, e.pos(100 * t, 100 * t, !0), this.sprites.push(e)
			}
			e.addChild(debug_ui.create_btn("X", this, this.close, 50, 50).pos(10, 10)), e.addChild(debug_ui.create_btn("2次曲线", this, this.onClick2)).pos(80, 10, !0), e.addChild(debug_ui.create_btn("3次曲线", this, this.onClick3)).pos(190, 10, !0), this.createFromNode(e)
		}
		buildUi() {
			UiHelper.registerTouchEvent(this.drawNode, this.onTouchStart.bind(this), this.onTouchMove.bind(this), this.onTouchEnd.bind(this)), this.updateDraw()
		}
		updateDraw() {
			let t = new Laya.Bezier,
				e = [];
			for (let t = 0; t < this.spriteCount; t++) e.push(this.sprites[t].x, this.sprites[t].y);
			cc.tween(this.moveSprite, !0).then(cc.bezierTo(2, e, 10)).start();
			let a = t.getBezierPoints(e, 10, this.spriteCount - 1);
			this.drawNode.graphics.clear();
			for (let t = 0; t < a.length; t += 2) console.log(Mathf.round(a[t], 3), Mathf.round(a[t + 1], 3)), this.drawNode.graphics.drawCircle(a[t], a[t + 1], 3, "#0000ff");
			this.drawNode.graphics.drawLines(0, 0, a, "#ff0000", 2)
		}
		onTouchStart() {
			let t = Laya.Point.TEMP.setTo(Laya.stage.mouseX, Laya.stage.mouseY);
			for (let e = 0; e < this.spriteCount; e++) {
				let a = this.sprites[e];
				if (t.distance(a.x, a.y) < 50) return void(this.curNode = a)
			}
			this.curNode = null
		}
		onTouchMove() {
			if (this.curNode) {
				let t = Laya.Point.TEMP.setTo(Laya.stage.mouseX, Laya.stage.mouseY);
				this.curNode.pos(t.x, t.y, !0), this.updateDraw()
			}
		}
		onTouchEnd() {
			this.curNode = null
		}
		onClick2() {
			this.spriteCount = 3, this.sprites[3].visible = !1, this.updateDraw()
		}
		onClick3() {
			this.spriteCount = 4, this.sprites[3].visible = !0, this.updateDraw()
		}
	}
	class UIToggle extends Laya.Script {
		constructor() {
			super(...arguments), this._isChecked = !1, this.autoUpdateCheckMark = !0, this.stopPropagation = !0, this._pressed = !1, this._ignoreClickEvent = !1
		}
		get isChecked() {
			return this._isChecked
		}
		set isChecked(t) {
			if (t !== this._isChecked) {
				var e = this.toggleGroup;
				e && e.enabled && this._isChecked && !e.allowSwitchOff || (this._isChecked = t, this.autoUpdateCheckMark && this.updateCheckMark(), e && e.enabled && e.updateToggles(this), this._emitToggleEvents())
			}
		}
		get toggleGroup() {
			return this._toggleGroup || this.owner.parent && (this._toggleGroup = this.owner.parent.getComponent(UIToggleGroup)), this._toggleGroup
		}
		get node() {
			return this.owner
		}
		onAwake() {
			this.spriteOff || (this.spriteOff = this.owner.getChildByName("off")), this.spriteOn || (this.spriteOn = this.owner.getChildByName("on")), this._touchStart = _G.pool.get(Vec2), this.node.on("uibutton_click", this, t => {
				"dummy" == t && this.toggle()
			}), this.updateCheckMark()
		}
		onDestroy() {
			this._touchStart && (_G.pool.put(this._touchStart), this._touchStart = null)
		}
		onMouseDown(t) {
			this.enabled && (this._pressed = !0, this._touchStart.setValue(Laya.stage.mouseX, Laya.stage.mouseY))
		}
		onMouseMove(t) {
			if (this._pressed) {
				let t = Vec2.TEMP;
				t.setValue(Laya.stage.mouseX, Laya.stage.mouseY), t.subSelf(this._touchStart).magSqr() > 16 && (this._pressed = !1)
			}
		}
		onMouseOut(t) {
			this._pressed && (this._pressed = !1)
		}
		onClick(t) {
			this._pressed && this.toggle(), this._pressed = !1, t.stopPropagation()
		}
		_hideCheckMark(t) {
			t && this._isChecked && (this._ignoreClickEvent || this.owner.event("ui_toggle", !1)), this._isChecked = !1, this.updateCheckMark()
		}
		updateCheckMark() {
			this.spriteOff && (this.spriteOff.visible = !this._isChecked), this.spriteOn && (this.spriteOn.visible = this._isChecked)
		}
		toggle() {
			this.isChecked = !this.isChecked
		}
		_emitToggleEvents() {
			this._ignoreClickEvent || (this._isChecked && this.owner.event("uibutton_click"), this.owner.event("ui_toggle", this._isChecked))
		}
		check(t = !1) {
			this._ignoreClickEvent = t, this.isChecked = !0, this._ignoreClickEvent = !1
		}
		uncheck(t = !1) {
			this._ignoreClickEvent = t, this.isChecked = !1, this._ignoreClickEvent = !1
		}
		isAllSwitchOff() {
			return !!this.toggleGroup && this.toggleGroup.isAllSwitchOff
		}
	}
	class UIToggleGroup extends Laya.Script {
		constructor() {
			super(...arguments), this.allowSwitchOff = !1
		}
		get node() {
			return this.owner
		}
		onAwake() {
			this.refreshToggles()
		}
		refreshToggles() {
			this._toggles = [];
			for (let t = this.owner.numChildren - 1; t >= 0; t--) {
				let e = this.owner.getChildAt(t).getComponent(UIToggle);
				e && this._toggles.push(e)
			}
			this._makeAtLeastOneToggleChecked()
		}
		updateToggles(t) {
			this.enabled && (t.isChecked ? this._toggles.forEach(function(e) {
				e !== t && e.isChecked && e.enabled && e._hideCheckMark(!0)
			}) : this.isAllSwitchOff && this.owner.event("all_switch_off"))
		}
		_allowOnlyOneToggleChecked() {
			var t = !1;
			return this._toggles.forEach(function(e) {
				t ? e._hideCheckMark(!1) : e.isChecked && (t = !0)
			}), t
		}
		_makeAtLeastOneToggleChecked() {
			if (!this._allowOnlyOneToggleChecked() && !this.allowSwitchOff) {
				var t = this._toggles;
				t.length > 0 && t[0].check()
			}
		}
		get isAllSwitchOff() {
			for (var t = this._toggles.length - 1; t >= 0; t--)
				if (this._toggles[t].isChecked) return !1;
			return !0
		}
	}
	class PanelPhoto extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelPhoto.json", this._exportNodeInfo = {
				cc_bg: "Laya.Sprite",
				cc_buttonOk: "UIButton",
				cc_tip: "Laya.Label",
				cc_photoList: "UIHVLayout",
				cc_photo0: "UIToggle",
				cc_photo1: "UIToggle",
				cc_photo2: "UIToggle"
			}, this.btnsClickSound = {
				btnTakePhot: ""
			}, this._textures = [], this._texturesBg = []
		}
		static openPanel(t) {
			let e = new ResLoader;
			e.add(db.get_animation_db(MODEL_ANIM.GJ_JIESUAN).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_GJ_JIESUAN).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_GJ_JIESUAN).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SANLIANPAI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_SANLIANPAI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_GJ_JIESUAN).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_gj_jiesuan).resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.wawahe).resPath, RES_TYPE.PREFAB3D), e.add(db.get_effect_db("124").res, RES_TYPE.PREFAB3D), e.add("res/ui/PanelPhoto.json", RES_TYPE.PREFAB2D), e.add("res/ui/bg/over_bg.jpg", RES_TYPE.TEXTURE2D), mgrAlert.openWait(e, () => {
				mgrPanel.openPanelWithSingleton(UI_NAME.PanelPhoto, null, t)
			})
		}
		buildUi() {
			this.init3D(), this.buttonOk.node.visible = !1, this.tip.visible = !1;
			for (let t = 0; t < 3; t++) {
				this["photo" + t].enabled = !1
			}
		}
		dispose() {
			this.stopProcMsg(), this.player && this.player.dispose(), this.wawahe && _G.poolManager.put(this.wawahe), this.bianshenEffect && (_G.poolManager.put(this.bianshenEffect), this.bianshenEffect = null), this.avatar && this.avatar.destroy(), this.shexiangji && _G.poolManager.put(this.shexiangji), super.dispose();
			for (let t = 0; t < this._texturesBg.length; t++) this._texturesBg[t].destroy(!0);
			for (let t = 0; t < this._textures.length; t++) this._textures[t].destroy(!0)
		}
		regGuide() {}
		init3D() {
			this.createScene3DBack(0);
			let t = _G.poolManager.get(GModel, db.MODEL_DB_ID.shexiangji_gj_jiesuan);
			this.shexiangji = t, this.shexiangji.setParent(this.scene3DBack);
			let e = this.shexiangji.findChild("camera");
			this.sxjCamera = e, e.nearPlane = .01, e.farPlane = 30, this.wawahe = _G.poolManager.get(GModel, db.MODEL_DB_ID.wawahe), this.wawahe.setParent(this.scene3DBack), this.wawahe.initAnimator(), this.wawahe.playAnim(MODEL_ANIM.WAWAHE_GJ_JIESUAN), this.avatar = new RoleAvatar(mgrLevel.curLevelDb.parts.length ? mgrLevel.curLevelDb.parts : mgrPart.partsLevel), this.scene3DBack.addChild(this.avatar);
			let a = {};
			for (let t = 0; t <= 6; t++) mgrPart.partsLevel[t] ? a[t] = mgrPart.partsLevel[t] : a[t] = null;
			let i = {};
			for (let t = 7; t <= 11; t++) mgrPart.partsLevel[t] ? i[t] = mgrPart.partsLevel[t] : i[t] = null;
			let s = {};
			for (let t = 12; t <= 14; t++) mgrPart.partsLevel[t] ? s[t] = mgrPart.partsLevel[t] : s[t] = null;
			let n = new AnimatorFixedPlayer;
			this.player = n, n.addModelAnim(this.avatar.baseBody, MODEL_ANIM.GJ_JIESUAN), n.addModelAnim(this.avatar.baseFace, MODEL_ANIM.FACE_GJ_JIESUAN), n.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_GJ_JIESUAN), n.addTimeCallback(62 / 210, () => {
				this.avatar.setParts(a, !1)
			}), n.addTimeCallback(100 / 210, () => {
				this.avatar.setParts(i, !1), this.wawahe.hide()
			}), n.addTimeCallback(180 / 210, () => {
				this.avatar.setParts(s, !1)
			}), n.addTimeCallback(1, this.onAnimFinished.bind(this)), n.play();
			let o = _G.poolManager.get(Particle, "124");
			o.setParent(this.scene3DBack), o.play(), this.bianshenEffect = o
		}
		onAnimFinished() {
			let t = this.player;
			t.clear(), t.addModelAnim(this.avatar.baseBody, MODEL_ANIM.SANLIANPAI), t.addModelAnim(this.avatar.baseFace, MODEL_ANIM.FACE_SANLIANPAI), t.addTimeCallback(0, this.takePhoto.bind(this)), t.addTimeCallback(55 / 180, this.takePhoto.bind(this)), t.addTimeCallback(115 / 180, this.takePhoto.bind(this)), t.play(!0)
		}
		onClickPhoto(t) {
			if (this._texturesBg.length < 3) return;
			let e = this.photoList.node.getComponent(UIToggleGroup);
			e.allowSwitchOff && (e.allowSwitchOff = !1, this.avatar.active = !1, this.buttonOk.node.visible = !0, UiHelper.playScaleOneByOne(.2, .2, this.buttonOk.node), cc.clearTween(this.tip), this.tip.visible = !1), this.bg.texture = this._texturesBg[t], this._selectIdx = t
		}
		showResult() {
			for (let t = 0; t < 3; t++) this["photo" + t].enabled = !0;
			this.tip.visible = !0, cc.tween(this.tip).repeatForever(cc.tween().to(.5, cc.PROP.SCALE1).delay(.3).to(1, cc.PROP.SCALE1_2)).start(), this.avatar.playIdle(), cc.tween(this.photoList.node).to(.2, {
				y: 228
			}, {
				easing: cc.Ease.sineInOut
			}).start()
		}
		takePhoto() {
			let t = 5 * mgrPart.photoWidth,
				e = 5 * mgrPart.photoHeight,
				a = UiHelper.screenShot(this.sxjCamera, _G.canvasWidth, _G.canvasHeight),
				i = Laya.Texture.create(a, 0, 0, _G.canvasWidth, _G.canvasHeight);
			this._texturesBg.push(i);
			let s = Laya.Texture.create(a, (_G.canvasWidth - t) / 2, (_G.canvasHeight - e) / 2, t, e);
			this._textures.push(s), 3 == this._textures.length && (this.showResult(), this.player.clearTimeCallbacks());
			let n = new Laya.Sprite;
			n.size(t, e).pivot(t / 2, e / 2);
			let o = new Laya.Sprite;
			o.texture = s, o.size(1.5 * o.width, 1.5 * o.height);
			o.pivot(o.width / 2, o.height / 2 - 20).pos(t / 2, e / 2, !0), n.addChild(o);
			let r = this["photo" + (this._textures.length - 1)].node;
			r.visible = !0, this.photoList.updateLayout(.2, !0), this.scheduleOnce(.15, () => {
				let e = Mathf.TEMP_POINT.setTo(_G.canvasFitWidth / 2, _G.canvasFitHeight / 2 - 20);
				UiHelper.local2local(this.resNode, r, e);
				let a = {
						x: this.photo0.node.pivotX,
						y: this.photo0.node.pivotY
					},
					i = mgrPart.photoWidth / t;
				r.addChild(n), r.setChildIndex(n, 0), n.pos(e.x, e.y, !0), UiHelper.playMoveTo(n, a, i), UiHelper.playPhotoFlash()
			})
		}
		on_click_photo0() {
			this.onClickPhoto(0)
		}
		on_click_photo1() {
			this.onClickPhoto(1)
		}
		on_click_photo2() {
			this.onClickPhoto(2)
		}
		on_click_buttonOk() {
			if (null != this._selectIdx) {
				let t = 5 * mgrPart.photoWidth,
					e = 5 * mgrPart.photoHeight,
					a = this._textures[this._selectIdx].bitmap,
					i = Tools.getTex2dFromTex2d(a, 0, 0, a.width, a.height),
					s = Laya.Texture.create(i, (_G.canvasWidth - t) / 2, (_G.canvasHeight - e) / 2, t, e);
				mgrPart.setRolePhoto(s), this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelFriends, !0)
			} else mgrAlert.alertText(mgrI18n.getText("panelPhoto.1"))
		}
	}
	class DebugFSC extends debug_ui.DebugBase {
		constructor() {
			super(...arguments), this.resourceName = "DebugFSC"
		}
		buildUi() {
			this.createScene3DBack(0, 30), this.camera.transform.localPositionZ = 5;
			let t = 3 * Math.tan(15 * Mathf.Deg2Rad) * 2,
				e = _G.canvasWidth / _G.canvasHeight * t;
			this.bgPlan = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createPlane(e, t, 2, 2)), this.bgPlan.transform.localPositionZ = -3, this.bgPlan.transform.localRotationEulerX = 90, this.bgPlan.active = !1, this.camera.addChild(this.bgPlan);
			let a = new PaintMaterialTest;
			this.bgPlan.meshRenderer.sharedMaterial = a, this.avatar = new RoleAvatar(mgrPart.partsWear), this.scene3DBack.addChild(this.avatar);
			let i = this.resNode.addChild(new Laya.Sprite).pos(10, 100).addComponent(UIHVLayout);
			i.align = "head", i.horizon = !1, i.space = 5, i.addChild(debug_ui.create_btn("展示角色", this, this.onClickShowAvatar)), i.addChild(debug_ui.create_btn("隐藏角色", this, this.onClickHideAvatar)), i.addChild(debug_ui.create_btn("展示面板", this, this.onClickShowBgPlan))
		}
		dispose() {
			this.avatar && this.avatar.destroy(), super.dispose()
		}
		onClickShowAvatar() {
			this.avatar.active = !0
		}
		onClickHideAvatar() {
			this.avatar.active = !1
		}
		onClickShowBgPlan() {
			let t = UiHelper.screenShot(this.camera, _G.canvasWidth, _G.canvasHeight);
			this.avatar.active = !1, this.bgPlan.active = !0;
			let e = this.bgPlan.meshRenderer.sharedMaterial;
			e.albedoTexture = t, e.playDissolveOutFromCenter(2, 0, () => {
				this.scheduleOnce(.5, () => {
					this.avatar.active = !0, this.bgPlan.active = !1
				})
			})
		}
	}
	const LINE_WIDTH$1 = 10;
	class DebugDrawLine extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "draw_line", this.p0 = new Laya.Point, this.p1 = new Laya.Point
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			this.mask = e.addChild((new Laya.Sprite).loadImage(GConfig.img_alpha_mask)), this.drawNode = e.addChild(new Laya.Sprite).size(2e3, 2e3).pos(-_G.left, -_G.top, !0), e.addChild(debug_ui.create_btn("X", this, this.close, 50, 50).pos(10, 10)), this.createFromNode(e)
		}
		buildUi() {
			UiHelper.registerTouchEvent(this.drawNode, this.onTouchStart.bind(this), this.onTouchMove.bind(this), this.onTouchEnd.bind(this))
		}
		updateDraw() {
			console.log("DrawLine画线", this.p0, this.p1), this.drawNode.graphics.drawCircle(this.p1.x, this.p1.y, LINE_WIDTH$1 / 2, "#ff0000", null, 0), this.drawNode.graphics.drawLine(this.p0.x, this.p0.y, this.p1.x, this.p1.y, "#ff0000", LINE_WIDTH$1), this.p0.x = this.p1.x, this.p0.y = this.p1.y
		}
		onTouchStart() {
			this.p0.x = Laya.stage.mouseX, this.p0.y = Laya.stage.mouseY, this.p1.x = Laya.stage.mouseX, this.p1.y = Laya.stage.mouseY, console.log("DrawLine开始位置", this.p0, this.p1)
		}
		onTouchMove() {
			this.p1.x = Laya.stage.mouseX, this.p1.y = Laya.stage.mouseY;
			let t = this.p1.distance(this.p0.x, this.p0.y);
			console.log("移动距离", t), t >= LINE_WIDTH$1 / 2 && this.updateDraw()
		}
		onTouchEnd() {}
	}
	var Keyboard$3 = Laya.Keyboard;
	const ITEM_WIDTH$2 = 180;
	class DebugEffect extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "DebugEffect", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.bResetRootNode = !1, this.originAllModel = []
		}
		buildUi() {
			this.createScene3DBack(1, 25), this.camera.transform.localPosition = new Laya.Vector3(0, 2, 2), this.camera.transform.localRotationEuler = new Laya.Vector3(-15, 0, 0), 3 == mgrMaterial.lightRotation.length && (this.lightBack.transform.localRotationEuler = new Laya.Vector3(-10, -11, 25)), this.root = this.scene3DBack.addChild(new Laya.Sprite3D), this.roleRoot = this.root.addChild(new Laya.Sprite3D), Tools.forEachMap(db.get_effect_db_map(), (t, e) => {
				this.originAllModel.push(t)
			}), this.originAllModel.sort(), this.allEffect = this.originAllModel.slice(), this.effectScroll.onItemCreate = (() => new debug_ui.scroll_item(ITEM_WIDTH$2, 50, (t, e) => {
				if (this._effectId == this.allEffect[t]) {
					return void this.getEffect(this._effectId).play()
				}
				this.removeEffect(this._effectId), this._effectId = this.allEffect[t], this.effectIdLabel.text = this._effectId, this.getEffect(this._effectId).play()
			})), this.effectScroll.onItemChange = ((t, e) => {
				let a = db.get_effect_db(this.allEffect[e]);
				t.setData(a.res.substr(24), e)
			}), this.effectScroll.updateList(this.allEffect.length), this.registerMsg({
				[BASE_MSG.SYS_KEY_DOWN]: t => {
					switch (t.ctrlKey ? Keyboard$3.CONTROL * t.keyCode : t.keyCode) {
						case Keyboard$3.LEFT:
							this.lightBack.transform.rotate(new Laya.Vector3(0, 3, 0), !1, !1);
							break;
						case Keyboard$3.RIGHT:
							this.lightBack.transform.rotate(new Laya.Vector3(0, -3, 0), !1, !1);
							break;
						case Keyboard$3.UP:
							this.lightBack.transform.rotate(new Laya.Vector3(3, 0, 0), !1, !1);
							break;
						case Keyboard$3.DOWN:
							this.lightBack.transform.rotate(new Laya.Vector3(-3, 0, 0), !1, !1);
							break;
						case Laya.Keyboard.NUMPAD_8:
							this.lightBack.transform.localRotationEulerX -= 1;
							break;
						case Laya.Keyboard.NUMPAD_2:
							this.lightBack.transform.localRotationEulerX += 1;
							break;
						case Laya.Keyboard.NUMPAD_4:
							this.lightBack.transform.localRotationEulerY -= 1;
							break;
						case Laya.Keyboard.NUMPAD_6:
							this.lightBack.transform.localRotationEulerY += 1;
							break;
						case Laya.Keyboard.ESCAPE:
					}
				}
			}), this.startProcMsg(), this.initTouch()
		}
		initTouch() {
			this.nodeOpt = new NodeOperate(this.touchNode, this.root, this.roleRoot)
		}
		onInput(t) {
			let e = [],
				a = t.text;
			if (a) {
				for (let t = 0; t < this.originAllModel.length; t++) ~db.get_effect_db(this.originAllModel[t]).res.indexOf(a) && e.push(this.originAllModel[t]);
				this.allEffect = e
			} else this.allEffect = this.originAllModel.slice();
			this.effectScroll.updateList(this.allEffect.length)
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), e.addChild(new Laya.Image("res/alpha_mask.png")).size(_G.canvasWidth, _G.canvasHeight), this.touchNode = e.addChild(new Laya.Sprite).size(_G.canvasWidth, _G.canvasHeight);
			let a = e.addChild(new Laya.Sprite),
				i = debug_ui.create_btn("X", this, this.close, 50, 50).pos(10, 10);
			a.addChild(i), this.effectIdLabel = a.addChild(debug_ui.create_label(_G.canvasWidth - ITEM_WIDTH$2 - 220, 10)), this.effectIdLabel.text = "none";
			let s = a.addChild(debug_ui.create_input("", _G.canvasWidth - ITEM_WIDTH$2 - 10, 10, ITEM_WIDTH$2));
			s.on(Laya.Event.INPUT, this, this.onInput, [s]);
			let n = a.addChild(new Laya.Sprite);
			n.pos(_G.canvasWidth - ITEM_WIDTH$2 - 10, 100, !0), n.size(ITEM_WIDTH$2, 500);
			let o = n.addComponent(ReuseScrollList);
			o.vertical = !0, o.itemWidth = ITEM_WIDTH$2, o.itemHeight = 50, this.effectScroll = o, this.createFromNode(e)
		}
		dispose() {
			this.stopProcMsg(), this.nodeOpt && this.nodeOpt.dispose(), this.effectScroll && this.effectScroll.clearAllItems(), super.dispose()
		}
	}
	class DebugMain extends debug_ui.DebugBase {
		constructor() {
			super(...arguments), this.index = 0, this.resourceName = "DebugMain", this.textLabel = null, this.btnDatas = []
		}
		createBaseBtns() {
			this.addButton("Stat面板", () => {
				Laya.Stat.show()
			}, "#ff0000"), this.addButton("DebugPnl", () => {
				this.close(), Laya.enableDebugPanel()
			}, "#ff0000"), this.addButton("删除存档", () => {
				this.close(), FileRecord.deletAllData(!1)
			}, "#ff0000"), this.addButton("验证数据", () => {
				this.close(), VerifyCfg.verifyAll()
			}, "#ff0000"), this.addButton("spine动画", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugSpine)
			}, "#ff0000"), this.addButton("特效", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugEffect)
			}, "#ff0000"), this.addButton("加快一天", () => {
				this.close();
				let t = FileRecord.getData("key_time_offset") || 0;
				t += 86400, Timer.setTimeOffset(t), FileRecord.setData("key_time_offset", t), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "加快" + Math.round(t / 3600 / 24) + "天"), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "加快后时间计算不可逆，为避免错误，会强行清除存档!"), _G.sendMsg(BASE_MSG.DAILY_SWITCH_ACTIVE)
			}, "#ff0000"), this.addButton("任务", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugQuest)
			}, "#ff0000"), this.addButton("物品", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugItem)
			}, "#ff0000"), this.addButton("更新配置", () => {
				this.close(), this.updateCfg()
			}, "#ff0000"), this.addButton("重置广告次数", () => {
				this.close(), mgrAdv.resetAllCount()
			}, "#ff0000"), this.addButton("记录变体", () => {
				this.close(), mgrMaterial.recordShaderCompileInfo()
			}, "#ff0000"), this.addButton("bezier", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugBezier)
			}, "#ff0000"), this.addButton("DrawLine", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugDrawLine)
			}, "#ff0000")
		}
		createModuleBtns() {
			this.addButton("引导", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugGuide)
			}, "#0000ff"), this.addButton("跳过引导", () => {
				this.close();
				let t = mgrPanel.findPanel(PanelGuide);
				t && (t.forceClose(), mgrGuide.skipAll()), mgrPanel.closeLayer(PANEL_LAYER.UI), mgrGame.tryEnterMain()
			}, "#0000ff"), this.addButton("涂抹测试", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugDraw)
			}, "#0000ff"), this.addButton("涂抹DEBUG", () => {
				RenderMask.debug = !RenderMask.debug, _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `涂抹debug=${RenderMask.debug}`)
			}, "#0000ff"), this.addButton("编辑材质", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugCartoonMat)
			}, "#0000ff"), this.addButton("动态骨骼", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugDynamicBone)
			}, "#0000ff"), this.addButton("shader", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugShader)
			}, "#0000ff"), this.addButton("所有部件", () => {
				this.close(), Tools.forEachMap(db.get_item_db_map(), function(t, e) {
					2 == e.type && 1 == e.subType && (BaseFacade.mItem.isOwned(t) || BaseFacade.mItem.addItem(t, 1, null))
				})
			}, "#0000ff"), this.addButton("编shader", () => {
				this.close();
				let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
				Tools.forEachMap(db.get_effect_db_map(), function(e, a) {
					mgrAlert.playParticleEffect(e, t, 5, 1)
				}), Tools.forEachMap(db.get_model_db_map(), function(t, e) {
					if (0 == e.type) {
						let e = _G.poolManager.get(GModel, t);
						e.setParent(mgrAlert.scene3dfont), e.callIfLoaded(function() {
							Timer.callLater(1, function() {
								_G.poolManager.put(e)
							})
						})
					}
				})
			}, "#0000ff"), this.addButton("点赞", () => {
				mgrSzz.addLike(), mgrAlert.alertText("当前次数" + mgrSzz.likeCount)
			}, "#0000ff"), this.addButton("上传日志", () => {
				try {
					throw new Error("random error:" + Mathf.random(100, 999))
				} catch (t) {
					Logger.catchError("test err:", t), mgrAlert.alertText("上传成功.")
				}
			}, "#0000ff")
		}
		createGameBtns() {
			this.addButton("关卡", () => {
				mgrPanel.openPanelWithFadeIn(DebugLevel), this.close()
			}).size(60, 40), this.addButton("开始护肤", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelSkincare)
			}), this.addButton("护肤结算", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelOverCommon)
			}), this.addButton("掉落金币", () => {
				let t = _G.poolManager.get(DropIcon),
					e = db.get_item_db("1001");
				mgrPanel.getLayerNode(PANEL_LAYER.UI).addChild(t), t.setIcon(e.icon), t.playJumpFrom(300 + Mathf.random(-100, 100), 600 + Mathf.random(-100, 100))
			}), this.addButton("签到", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelSign)
			}), this.addButton("灵感", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelLingGan)
			}), this.addButton("恭喜获得", () => {
				this.close(), mgrAlert.alertSingleItem({
					itemId: "1001",
					count: 10
				})
			}), this.addButton("排行", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelRank)
			}), this.addButton("排行互动", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelRankHuDong)
			}), this.addButton("套装选择", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelSuitSelect)
			}), this.addButton("砸金蛋", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelEgg)
			}), this.addButton("每日任务", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelQuest)
			}), this.addButton("灵犀幻梦", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelDream)
			}), this.addButton("契约动画", () => {
				this.close(), PanelContract.openPanel()
			}), this.addButton("结算", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelOver)
			}), this.addButton("照相", () => {
				this.close(), PanelPhoto.openPanel()
			}), this.addButton("剧情对话", () => {
				this.close(), mgrAlert.openGameLoading(UI_NAME.PanelStory, "test0")
			}), this.addButton("时钟动画", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelWaitTime, 5)
			}), this.addButton("全屏图", () => {
				this.close(), mgrPanel.openPanel(DebugFSC)
			}), this.addButton("升级", () => {
				this.close(), PanelRoleLvupShow.openPanel()
			}), this.addButton("通关", () => {
				this.close(), _G.sendMsg("GM_LEVEL_SUC")
			}), this.addButton("更多游戏", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelTryGame)
			}), this.addButton("获得分享0", () => {
				this.close();
				mgrAlert.alertSingleItem({
					itemId: "1000",
					count: 10
				}, !1, null, 0)
			}), this.addButton("获得分享1", () => {
				this.close();
				mgrAlert.alertSingleItem({
					itemId: "1000",
					count: 10
				}, !1, null, 1)
			}), this.addButton("招财猫", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelCat)
			}), this.addButton("随机得到物品", () => {
				let t = db.get_suit_db("1"),
					e = t.lotteryParts[Math.floor(Math.random() * (t.lotteryParts.length - 1))];
				console.log("查看物品", t, e)
			}), this.addButton("神秘舞会", () => {
				let t = mgrPanel.findViewByName(UI_NAME.PanelDanceDraw);
				t && t.close(), mgrPanel.openPanel(UI_NAME.PanelDanceDraw), this.close()
			}), this.addButton("我的拍档", () => {
				let t = mgrPanel.findViewByName(UI_NAME.PanelCpTest);
				t && t.close(), mgrAlert.openGameLoading(UI_NAME.PanelCpTest), this.close()
			}), this.addButton("彩妆课堂", () => {
				let t = mgrPanel.findViewByName(UI_NAME.PanelClassRoom);
				t && t.close(), mgrPanel.openPanel(UI_NAME.PanelClassRoom), this.close()
			}), this.addButton("解锁孔雀", () => {
				PanelDanceRoleGet.openPanel(), this.close()
			}), this.addButton("解锁契约角色", () => {
				let t = db.get_role_contract_db_map();
				for (let e in t) mgrGame.contractUnlock(t[e].contractIdx);
				console.log("解锁成功"), this.close()
			}), this.addButton("水晶鞋", () => {
				this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelShoeSelect)
			}), this.addButton("美甲", () => {
				this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelManicurePreview)
			}), this.addButton("美甲加心", () => {
				mgrCp.addTestCount(), this.close()
			}), this.addButton("美甲心清空", () => {
				mgrCp.resetTestCount(), this.close()
			}), this.addButton("拍档图鉴", () => {
				this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelCpBooks)
			}), this.addButton("水晶鞋彩蛋", () => {
				this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelShoeColorEggs)
			})
		}
		addButton(t, e, a = "#000000") {
			let i = this.index % 5,
				s = Math.floor(this.index / 5);
			this.index++, i *= 105, s *= 45;
			let n = new Laya.Button(GConfig.img_single_color, t);
			return n.labelSize = 20, n.size(100, 40), n.pos(i, s), n.labelColors = `${a},${a},#7d7d7d`, this.addChild(n), UiHelper.addScrollViewClick(n, e), this.btnContent.addChild(n), n
		}
		update() {
			this.fpsText.text = _G.FPS + ""
		}
		showCopInfo() {
			try {
				let t = JSON.parse(mgrSdk.COP_INFO),
					e = "";
				for (const a in t) e += `${a}:${t[a]}\n\n`;
				this.textLabel.changeText(e)
			} catch (t) {
				this.textLabel.changeText("COP解析错误:" + Logger.getErrorStr(t))
			}
		}
		updateCfg() {
			if (!_G.H5_TEST) return;
			var t = function(t) {
				switch (t.type) {
					case "I":
						return Tools.safeParseInt(t.value, 0);
					case "S":
						return t.value;
					case "B":
						return Tools.safeParseBool(t.value);
					case "IT":
						return Tools.splitToNumber(t.value, ";");
					case "ST":
						return t.value.split(";")
				}
			};
			let e = db.getDb("game_cnf");
			for (var a = 0; a < e.length; a++) {
				var i = e[a];
				db.game_cnf[i.name] = t(i)
			}
			let s = db.getDb("cop");
			for (a = 0; a < s.length; a++) {
				i = s[a];
				db.cop[i.name] = t(i)
			}
		}
		on_click_btnClose() {
			this.close()
		}
		buildUi() {
			let t = this.resNode.addChild(new Laya.Sprite);
			t.size(450, 300), t.pos(100, 10), this.textLabel = debug_ui.create_label(0, 50, 450, 20), t.addChild(this.textLabel), t.addComponent(ScrollView).vertical = !0, this.fpsText = this.resNode.addChild(new Laya.Text), this.fpsText.color = "#ffffff", this.fpsText.fontSize = 20, this.fpsText.pos(10, 100);
			let e = this.resNode.addChild(new Laya.Sprite);
			e.pos(10, 330).size(520, 680), this.btnContent = e.addChild(new Laya.Sprite), e.addComponent(ScrollView).vertical = !0, this.showCopInfo(), this.createBaseBtns(), this.createModuleBtns(), this.createGameBtns();
			let a = Math.ceil(this.index / 5);
			this.btnContent.size(520, 45 * a - 5)
		}
	}
	var Keyboard$4 = Laya.Keyboard;
	let testVar = 1;
	class DebugKeyDown {
		constructor() {
			this.m = 3
		}
		static onKeyDown(t) {
			this.onKeyPress(t.keyCode *= t.ctrlKey ? Keyboard$4.CONTROL : 1)
		}
		static onKeyPress(t) {
			switch (t) {
				case Keyboard$4.C:
					let e = {
						desc: "是否清除存档?\n(下次启动有效)",
						confirm: () => {
							FileRecord.deletAllData(!1)
						},
						cancel: () => {}
					};
					mgrPanel.openPanel(UI_NAME.PanelDialog, e);
					break;
				case Keyboard$4.F * Keyboard$4.CONTROL:
					mgrPanel.closeTop();
					break;
				case Keyboard$4.D * Keyboard$4.CONTROL:
					mgrPanel.openPanel(DebugMain), this.debugGameInfo();
					break;
				case Keyboard$4.T:
					mgrI18n.setLanguage(E_LANGUAGE.zhcn), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW");
					break;
				case Keyboard$4.Y:
				case Keyboard$4.I:
					break;
				case Keyboard$4.J:
					this.testMath2();
					break;
				case Keyboard$4.Q:
					mgrI18n.setLanguage(E_LANGUAGE.en), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW");
					break;
				case Keyboard$4.W:
					mgrI18n.setLanguage(E_LANGUAGE.id), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW");
					break;
				case Keyboard$4.E:
					mgrI18n.setLanguage(E_LANGUAGE.vi), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW");
					break;
				case Keyboard$4.R:
					mgrI18n.setLanguage(E_LANGUAGE.pt), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW");
					break;
				case Keyboard$4.C:
					mgrClassRoom.upgradeLevel(1), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW");
					break;
				case Keyboard$4.LEFT:
				case Keyboard$4.UP:
				case Keyboard$4.RIGHT:
				case Keyboard$4.DOWN:
					break;
				default:
					console.log(`press keyCode:[${t}]`)
			}
		}
		static debugGameInfo() {
			console.log(`_G.canvasSize:${_G.canvasWidth}, ${_G.canvasHeight}`), console.log(`_G.canvasFitSize:${_G.canvasFitWidth}, ${_G.canvasFitHeight}`), mgrPanel.debugPanels(), _G.poolManager.debugInfo(), _G.pool.debugInfo(), GameStatistics.logAllData()
		}
		static astarTest() {
			let t = [
					["0", "0", "0", "1", "0", "0", "0", "0", "0", "0"],
					["0", "0", "0", "1", "0", "0", "0", "0", "0", "0"],
					["0", "0", "0", "0", "1", "0", "0", "0", "0", "0"],
					["0", "0", "0", "0", "1", "0", "0", "0", "0", "0"],
					["0", "0", "0", "0", "1", "0", "0", "0", "0", "0"],
					["0", "0", "0", "0", "1", "1", "1", "0", "0", "0"],
					["0", "0", "0", "0", "1", "0", "0", "0", "0", "0"],
					["0", "1", "1", "1", "1", "0", "0", "1", "1", "1"],
					["0", "1", "0", "0", "0", "1", "0", "1", "0", "0"],
					["0", "0", "0", "1", "0", "1", "0", "1", "0", "0"],
					["0", "0", "0", "1", "0", "0", "0", "0", "0", "0"]
				],
				e = new AStarGrid(t[0].length, t.length);
			for (let a = 0; a < t.length; a++) {
				const i = t[a];
				for (let t = 0; t < i.length; t++) {
					"1" == i[t] && e.setWalkable(t, a, !1)
				}
			}
			e.setStartNode(1, 1), e.setEndNode(1, 1);
			let a = new AStar(e, !0);
			if (a.search()) {
				console.log(t);
				let e = a.path;
				for (let a = 0; a < e.length; a++) {
					const i = e[a];
					t[i.y][i.x] = "2"
				}
				console.log(t)
			} else console.error("no path")
		}
		static md5Test() {
			let t = new UUID(100, 10);
			for (let e = 0; e < 105; e++) console.log(t.next());
			console.log("-----"), console.log(Tools.getMd5("日本")), console.log(Tools.getMd5("test111"))
		}
		static testPathLerp() {
			console.log("---------- test path lerp");
			let t = [new Laya.Vector2(0, 0), new Laya.Vector2(1, 1), new Laya.Vector2(1, 2), new Laya.Vector2(1, 3)],
				e = new Laya.Vector2;
			for (let a = 0; a <= 10; a++) console.log(GameUtility.lerpPath(t, .1 * a, e))
		}
		static testPointInPathDistance() {
			console.log("---------- test point in path distance.");
			let t = [new Laya.Vector2(0, 0), new Laya.Vector2(1, 1), new Laya.Vector2(3, 3), new Laya.Vector2(3, 0)],
				e = new Laya.Vector2;
			for (let a = 0; a <= 15; a++) console.log(GameUtility.getPointInPath(t, .5 * a, !1, e));
			console.log("");
			for (let a = 0; a <= 15; a++) console.log(GameUtility.getPointInPath(t, .5 * a, !0, e))
		}
		static testDecorector() {
			let t = new DebugKeyDown;
			new DebugKeyDown;
			t.m = 4;
			let e = t.testDec("gg1");
			console.log("--------- r:", e)
		}
		testDec(t) {
			console.log("test desc", t, this.m), console.log("laya编译不支持装饰器")
		}
		static testBuDingCanShu(...t) {
			console.log(t, t.length);
			let e = t;
			this.testFunc2(e), this.testFunc2(...t), this.testFunc2(...e)
		}
		static testFunc2(...t) {
			console.log(t, t.length)
		}
		static testSerializeObject() {
			class t {
				constructor() {
					this.a = 1, this.b = [3]
				}
				print() {
					console.log(this.a), console.log(this.b.length)
				}
			}
			class e extends t {
				printB() {
					console.log(this.a), console.log(this.b.length)
				}
			}
			let a = new e;
			a.a = 3, a.b = [1, 2];
			let i = Tools.serializeObject(a),
				s = new e;
			Tools.deserializeObject(i, s), s.print(), console.log("==="), s.printB()
		}
		static testNull() {
			let t = {};
			console.log(null == t.d), console.log(null == t.d), t = 0, console.log("" == t), console.log(null == t), t = "", console.log("" == t), console.log(null == t), console.log(0 == t), console.log(!0)
		}
		static testArray() {
			let t = new Array(3);
			console.log(t.length), console.log(t), console.log(t[2]), console.log("----");
			let e = t.indexOf(3);
			console.log(e), console.log("----");
			let a = t.slice();
			t[1] = 9, console.log(t), console.log(a), (t = [3, 4, 1]).sort(function(t, e) {
				return t > e ? 1 : t < e ? -1 : 0
			}), console.log("sort:", t), t = [1, 2, 3], this.testMerge(t, 4, 5, 6);
			let i = (t = [1, 2, 3]).concat(1, 2, a = [4, 5, 6]);
			console.log("concat"), console.log(t), console.log(a), console.log(i)
		}
		static testMerge(t, ...e) {
			let a = t.splice(t.length - 1, 0, ...e);
			console.log("merge result"), console.log(t), console.log(a)
		}
		static testThrow() {
			throw "tes tthrow error"
		}
		static testMath() {
			let t = 1e4,
				e = 0;
			for (let a = 0; a < 100; a++) {
				let a = Mathf.uniform2NormalDistribution();
				a = 20 * (a / 3 + 1), console.log(a), t = Math.min(t, a), e = Math.max(e, a)
			}
			console.log("-----min:", t, "max:", e), console.log(-80), console.log(-50.5)
		}
		static test3yuan(t) {
			t ? console.log("true") : console.log("false")
		}
		static testString() {
			let t = "abcde";
			console.log("---------"), console.log(t.indexOf("m")), console.log(t.indexOf("a")), console.log(t.charAt(0)), console.log(t.charAt(2)), console.log(t.length), t = "aabcdd", console.log("replace"), console.log(t.replace("a", "e")), console.log(t.replace("d", "e")), console.log(t.replace(/a/g, "e")), console.log(t.replace(/d/g, "e"))
		}
		static testWorldPos() {
			let t = mgrPanel.getLayerNode(PANEL_LAYER.BOTTOM);
			console.log(t.localToGlobal(new Laya.Point(0, 0)))
		}
		static debugDelete() {
			let t = {
				a: "1",
				b: "2"
			};
			console.log(delete t.a), console.log(delete t.a), console.log(delete t.c), console.log(delete t.b)
		}
		static testSound() {
			console.log("play sound"), mgrSound.playSound("loading1")
		}
		static testConvertCoin() {
			console.log("start convert"), console.log(GameUtility.convertCoinString(999, !1)), console.log(GameUtility.convertCoinString(1e3, !1)), console.log(GameUtility.convertCoinString(10421, !1)), console.log(GameUtility.convertCoinString(112456, !1)), console.log(GameUtility.convertCoinString(1234e3, !1)), console.log(GameUtility.convertCoinString(1234e4, !1)), console.log(GameUtility.convertCoinString(1234e5, !1)), console.log(GameUtility.convertCoinString(0xb3921510cd3, !1)), console.log(GameUtility.convertCoinString(Number.MAX_VALUE, !1)), console.log(Mathf.getDigits(.34)), console.log(Mathf.getDigits(1.34)), console.log(Mathf.getDigits(12.34)), console.log(Mathf.getDigits(-12.34))
		}
		static testImpl() {}
		static testImpl1(t) {}
		static testTouchRect() {}
		static testDump() {
			let t = db.get_item_db("1001");
			Tools.dump(t, "itemDb");
			let e = {
				obj: {
					a: "a",
					b: 2,
					c: {
						d: 3,
						n: ["2", 3, {
							x: 11,
							y: 22
						}]
					}
				},
				c: {
					m: "mmm",
					c: [2, 4, 6]
				}
			};
			console.log("dump:"), Tools.dump(e, "obj1"), console.log("dir:"), console.dir(e), console.log("log:"), console.log(e), console.log("table:"), console.table(e)
		}
		static testError() {
			let t = function(t) {
				console.log("type:", typeof t), console.log("error:", t), console.log("toString:", t.toString()), console.log("json:", JSON.stringify(t)), t instanceof Error ? console.log(t.message, t.stack) : console.log(JSON.stringify(t)), console.log("")
			};
			try {
				this.testError1()
			} catch (e) {
				t(e)
			}
			try {
				this.testError2()
			} catch (e) {
				t(e)
			}
			try {
				this.testError3()
			} catch (e) {
				t(e)
			}
			try {
				this.testError4()
			} catch (e) {
				t(e)
			}
		}
		static testError1() {
			throw "haha"
		}
		static testError2() {
			throw new Error("nono")
		}
		static testError3() {
			throw new Array(4)
		}
		static testError4() {
			throw {
				message: "yeye",
				stack: "sss"
			}
		}
		static testUtf8() {
			let t = "你好";
			console.log(t, Tools.utf8Len(t)), t = "你好，1", console.log(t, Tools.utf8Len(t)), t = "是a,的", console.log(t, Tools.utf8Len(t))
		}
		static testDir() {
			let t = Mathf.random(360);
			console.log("rot:", t);
			let e = GameUtility.convertRot2Dir(t);
			console.log("dir:", e), t = GameUtility.convertDir2Rot(e), console.log("cRot:", t), t = GameUtility.convertDir2Rot(new Laya.Vector2(-1, 1)), console.log("cRot:", t), t = GameUtility.convertDir2Rot(new Laya.Vector2(1, 1)), console.log("cRot:", t), t = GameUtility.convertDir2Rot(new Laya.Vector2(-1, -1)), console.log("cRot:", t)
		}
		static testVec() {}
		static testVar() {
			let t = {
					n: 1
				},
				e = t;
			t.x = t = {
				n: 2
			}, console.log(t.x), console.log(e.x), console.log(t), console.log(e)
		}
		static testJsClass() {
			let t = new DebugKeyDown;
			console.log(t.constructor);
			let e = new TestClass;
			try {
				e.testFun0(e.printFun)
			} catch (t) {
				console.error(t)
			}
			console.log("---");
			try {
				e.testFun1(e.printFun)
			} catch (t) {
				console.error(t)
			}
			console.log("---");
			try {
				e.testFun2()
			} catch (t) {
				console.error(t)
			}
		}
		static testDownload() {
			if (document) {
				var t = document.createElement("a");
				t.href = "data:text/txt;charset=utf-8,\ufeff" + encodeURIComponent("姓名,期中成绩,期末成绩\n张三,58,95\n李四,98,74"), t.download = "测试.csv", t.click()
			}
		}
		static testFormat() {
			console.log(String.format("[%2d]", 1.456)), console.log(String.format("%02d-%s", 1, "a")), console.log(String.format("%.2f", 1.456))
		}
		static testTween() {
			let t = (new Laya.Sprite).size(100, 100).pos(_G.canvasWidth / 2, _G.canvasHeight / 2, !0).scale(0, 0, !0);
			t.texture = UiHelper.WHITE_TEXTURE, t.alpha = 0, mgrPanel.getLayerNode(PANEL_LAYER.TOP).addChild(t);
			cc.tween(t).call(function() {
				console.log("start action")
			}).delay(1).to(1, {
				scaleX: 1,
				scaleY: 1,
				alpha: 1
			}).parallel(cc.tween().to(.5, {
				x: 200,
				y: 200
			}, {
				easing: cc.Ease.backOut
			}).call(function() {
				console.log("放大完毕")
			}), cc.tween().to(2, {
				rotation: 360
			}).call(function() {
				console.log("旋转完毕")
			})).repeat(3).call(function() {
				console.log("parallel完毕,开始位移")
			}).to(.1, {
				x: 100,
				y: 800
			}).then(cc.jumpTo(1, 500, 600, 200, 2)).sequence(cc.tween().call(function() {
				console.log("最后阶段开始，等待1秒")
			}).delay(1), cc.tween().call(function() {
				console.log("阶段2,等待一秒")
			}), cc.tween().delay(1), cc.tween().call(function() {
				console.log("完毕")
			})).to(2, {
				x: 150,
				y: 200
			}).call(function() {
				console.log("最终完毕")
			}).start()
		}
		static testMath2() {
			let t = new Laya.Vector3(0, 0, 0),
				e = new Laya.Vector3(0, -1, 0),
				a = new Laya.Vector3(0, 0, 0),
				i = new Laya.Vector3(0, 0, 1),
				s = new Laya.Vector3(1, 0, 0),
				n = Timer.now;
			for (var o, r = 0; r < 1e7; r++) o = Mathf.point2line(a, i, s);
			console.log("point2line:", Timer.now - n, o), Timer.callLater(1, function() {
				n = Timer.now;
				for (var r = 0; r < 1e7; r++) o = Mathf.intersectTriangle(t, e, a, i, s);
				console.log("intersectTriangle:", Timer.now - n, o)
			})
		}
	}

	function createFun() {
		return function(t) {
			console.log("create fun m :", this.m), (t = t.bind(this))(), console.log("fun 0 suc.")
		}
	}
	class TestBase {
		constructor() {
			this.n = 2
		}
		printFun() {
			console.log(this.n)
		}
	}
	class TestClass extends TestBase {
		constructor() {
			super(...arguments), this.m = 3, this.testFun0 = createFun()
		}
		testFun1(t) {
			(t = t.bind(this))(), console.log("fun 1 suc.")
		}
		testFun2() {
			this.testFun1(this.printFun), console.log("fun 2 suc.")
		}
		printFun() {
			console.log(this.m), super.printFun()
		}
	}
	let max_size = 4,
		start_y = -150,
		delta_y = -70,
		offset_y = -88,
		bg_skin = "res/ui/pnl_9s/pnl_tip.png";
	class PanelTip extends PanelBase {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.TOP, this.panelStyle = 0, this.resourceName = "PanelTip", this.textNode = null, this._exportNodeInfo = {}, this.itemList = []
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), e.name = "PanelTip", this.centerNode = new Laya.Sprite, e.addChild(this.centerNode), this.centerNode.pos(_G.canvasWidth / 2, _G.canvasHeight / 2), this.createFromNode(e)
		}
		buildUi() {
			this.registerMsg({
				[BASE_MSG.UI_SHOW_TIP]: this.onMsgShowTip.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgShowTip(t) {
			this.playItem(t + "")
		}
		playItem(t) {
			for (let e = 0; e < this.itemList.length; e++) {
				const a = this.itemList[e];
				if (!a.isDone && a.equals(t)) return void a.keepAnim()
			}
			let e;
			this.itemList.length >= max_size ? e = this.itemList.pop() : (e = new TextItem, this.centerNode.addChild(e)), this.itemList.unshift(e), e.setText(t), e.play();
			for (let t = 0; t < this.itemList.length; t++) {
				const e = this.itemList[t];
				if (e.isDone) break;
				e.y = start_y + t * delta_y
			}
		}
	}
	class TextItem extends Laya.Sprite {
		constructor() {
			super(), this.m_isDone = !0, this.m_text = "", this.m_count = 0, this.animNode = new Laya.Sprite, this.addChild(this.animNode);
			let t = new Laya.Image;
			t.skin = bg_skin, t.centerX = 0, t.centerY = 0, this.animNode.addChild(t), this.textLabel = new Laya.Label(""), this.textLabel.fontSize = 20, this.textLabel.color = "#ffffff", this.textLabel.centerX = 0, this.textLabel.centerY = 0, this.animNode.addChild(this.textLabel), this.createAction()
		}
		createAction() {
			this.normalTimeLine = Laya.TimeLine.to(this.animNode, {
				y: offset_y,
				alpha: 1
			}, 200).to(this.animNode, {
				alpha: 1
			}, 150, null, -200).to(this.animNode, {}, 2e3).to(this.animNode, {
				alpha: 0
			}, 200).on(Laya.Event.COMPLETE, this, this.onActionFinish)
		}
		onActionFinish() {
			this.visible = !1, this.m_isDone = !0, this.m_text = "", this.m_count = 0
		}
		resetNode() {
			this.animNode.pos(0, 0, !0), this.animNode.alpha = 0
		}
		setText(t) {
			this.textLabel.text = t, this.m_text = t
		}
		equals(t) {
			return this.m_text === t
		}
		keepAnim() {
			this.normalTimeLine.pause(), this.animNode.alpha = 1, this.animNode.y = offset_y, this.animNode.scale(0, 0, !0), this.keepTimeLine ? this.keepTimeLine.pause() : this.keepTimeLine = Laya.TimeLine.to(this.animNode, {
				scaleX: 1,
				scaleY: 1
			}, 200, Laya.Ease.backOut).to(this.animNode, {}, 2e3).to(this.animNode, {
				alpha: 0
			}, 200).on(Laya.Event.COMPLETE, this, this.onActionFinish), this.keepTimeLine.play(), this.textLabel.text = this.m_text
		}
		play() {
			this.m_isDone || (this.normalTimeLine.pause(), this.keepTimeLine && this.keepTimeLine.pause()), this.m_isDone = !1, this.visible = !0, this.resetNode(), this.normalTimeLine.play()
		}
		get isDone() {
			return this.m_isDone
		}
	}
	class SpriteSheet extends Laya.Sprite {
		constructor() {
			super(), this.fps = 30, this.loop = !1
		}
		loadTextures(t, e, a) {
			if (e > a) console.error("SpriteSheet size error.");
			else {
				this.textures = new Array(a - e + 1);
				for (let i = e; i <= a; i++) mgrRes.loadRes(String.format(t, i), RES_TYPE.IMAGE, t => {
					this.destroyed || (this.textures[i] = t)
				})
			}
		}
		dispose() {
			this.stop(), this.textures = null, this.destroy()
		}
		reuse() {
			this.enable = !0
		}
		unuse() {
			this.stop(), this.removeFromParent(), this.enable = !1
		}
		play(t, e, a, i) {
			i && i.addChild(this), t && this.setPosition(t), this.bStarted = !0, this.curIndex = 0, this.texture = this.textures[this.curIndex], Laya.timer.loop(1 / this.fps * 1e3, this, this.update), e && Laya.timer.once(1e3 * e, this, this.stopAndPutback, [a])
		}
		stopAndPutback(t) {
			this.stop(), t ? Laya.timer.once(1e3 * t, this, this.putBack) : this.putBack()
		}
		stop() {
			this.bStarted = !1, Laya.timer.clear(this, this.update)
		}
		putBack() {
			_G.poolManager.put(this)
		}
		update() {
			if (this.bStarted) {
				if (++this.curIndex >= this.textures.length) {
					if (!this.loop) return void this.stop();
					this.curIndex = 0
				}
				this.texture = this.textures[this.curIndex]
			}
		}
		get enable() {
			return this.active && this.visible
		}
		set enable(t) {
			this.active = t, this.visible = t
		}
		setName(t) {
			this.name = t
		}
		addNodeChild(t) {
			t.setParent(this)
		}
		getChild(t) {
			return UiHelper.getChild(this, t)
		}
		setParent(t) {
			t.addChild(this)
		}
		getParent() {
			return this.parent
		}
		removeFromParent() {
			this.removeSelf()
		}
		setSize(t, e) {
			this.size(t, e)
		}
		setPosition(t, e) {
			void 0 === e ? this.pos(t.x, t.y, !0) : this.pos(t, e, !0)
		}
		setScale(t, e) {
			void 0 === e ? this.scale(t.x, t.y, !0) : this.scale(t, e, !0)
		}
		setRotation(t) {
			this.rotation = t
		}
		setAlpha(t) {
			this.alpha = t
		}
		show() {
			this.enable = !0
		}
		hide() {
			this.enable = !1
		}
		setSiblingIndex(t) {
			this.parent && (-1 == t && (t = this.parent.numChildren - 1), this.parent.setChildIndex(this, t))
		}
		setTop() {
			this.setSiblingIndex(-1)
		}
		setBottom() {
			this.setSiblingIndex(0)
		}
		convertToWorldSpaceOut(t, e) {
			let a = Laya.Point.TEMP;
			return a.setTo(t.x, t.y), this.localToGlobal(a, !1), e || (e = new Laya.Vector2), e.x = a.x, e.y = a.y, e
		}
	}
	class ScreenTouchEffect {
		constructor(t, e) {
			this.enable = !0, this.effectId = t, this.bKeepWhenMove = e, Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.touchDown), Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.touchMove), Laya.stage.on(Laya.Event.MOUSE_UP, this, this.touchUp), this.worldPos = _G.pool.get(Laya.Vector3), this.offset = _G.pool.get(Laya.Vector2).setTo(0, 0)
		}
		dispose() {
			Laya.stage.offAllCaller(this), _G.pool.put(this.offset), _G.pool.put(this.worldPos), this.clearEffect()
		}
		touchDown() {
			this.enable && this.createEffect()
		}
		touchMove() {
			if (this.enable && this.clickEffect && this.bKeepWhenMove) {
				let t = this.worldPos;
				t.setValue(Laya.stage.mouseX + this.offset.x, Laya.stage.mouseY + this.offset.y, 0), mgrAlert.global2camera(t, t), this.clickEffect.setPosition(t)
			}
		}
		touchUp() {
			this.clearEffect()
		}
		createEffect() {
			this.clearEffect(), this.clickEffect = _G.poolManager.get(Particle, this.effectId), this.clickEffect.setParent(mgrAlert.scene3dfont), this.clickEffect.play(), this.worldPos.setValue(Laya.stage.mouseX + this.offset.x, Laya.stage.mouseY + this.offset.y, 0), mgrAlert.global2camera(this.worldPos, this.worldPos), this.clickEffect.setPosition(this.worldPos), this.bKeepWhenMove || Laya.timer.once(500, this, this.clearEffect)
		}
		clearEffect() {
			this.clickEffect && (this.clickEffect.stopAndPutback(1), this.clickEffect = null), Laya.timer.clear(this, this.clearEffect)
		}
		setOffset(t = 0, e = 0) {
			this.offset.setValue(t, e)
		}
	}
	class ResWatcher {
		constructor(t = 2) {
			this.bTipShowing = !1, this.showTipDeltaTime = t, Laya.loader.retryNum = 1e6, Laya.loader.retryDelay = 50, mgrNative.isHtml5Platform() && Laya.timer.loop(1e3 * t, this, this.checkFailRes)
		}
		checkFailRes() {
			if (this.bTipShowing) return;
			let t = Laya.loader._failRes;
			if (t) {
				let e = !1;
				Tools.forEachMap(t, (t, a) => {
					if (a > 10 && !t.startsWith("http")) return e = !0, !0
				}), e ? this.showReconnectDialog() : this.hideReconnectDialog()
			}
		}
		resetCheckState() {
			this.bTipShowing = !1, Laya.timer.loop(1e3 * this.showTipDeltaTime, this, this.checkFailRes, null, !0)
		}
		showReconnectDialog() {
			this.bTipShowing = !0, mgrPanel.openPanel(UI_NAME.PanelReconnectDialog, {
				clickCallback: this.resetCheckState.bind(this)
			})
		}
		hideReconnectDialog() {
			if (this.bTipShowing) {
				this.resetCheckState();
				let t = mgrPanel.findViewByName(UI_NAME.PanelReconnectDialog);
				t && t.close()
			}
		}
	}
	class SceneMain extends SceneBase {
		getResLoader() {
			let t = new ResLoader("SceneMain");
			return t.addCall(this.initNative), t.addCall(this.initMsg.bind(this)), t.addCall(this.initGameSetting), t.addCall(this.initGameCfg), t.addCall(this.initBaseModule), t.addCall(this.initSdk), t.addCall(this.initBaseRes.bind(this), 6), t.addCall(this.initManager), t.addCall(this.initPool), t.addCall(this.initShader), t.addCall(this.initRole), t.addCall(this.initWorld), t.addCall(this.openPanel.bind(this), 6), this.resLoader = t, t
		}
		initNative(t) {
			SDKBridge.init(), Timer.callLoop(.05, function(e) {
				mgrNative.isAllowStartGame() && (e.stop(), t())
			})
		}
		initMsg(t) {
			this.registerMsg({
				[BASE_MSG.SDK_EXIT_GAME]: this.onMsgExitGame,
				[BASE_MSG.UI_SHOW_ITEMS]: this.onMsgShowItems
			}), t()
		}
		onMsgExitGame() {
			if (mgrGuide.isGuiding) return;
			let t = {
				desc: "要离开游戏了吗？",
				title: "提示",
				confirm: function() {
					console.log("退出游戏"), window.conch && window.conch.exit()
				},
				cancel: function() {},
				confirmText: "离开",
				cancelText: "继续"
			};
			mgrPanel.openPanel(UI_NAME.PanelDialog, t)
		}
		onMsgShowItems(t) {
			mgrAlert.alertItems(t)
		}
		initGameSetting(t) {
			Laya.stage.on(Laya.Event.KEY_DOWN, this, function(t) {
				_G.sendMsg(BASE_MSG.SYS_KEY_DOWN, t), DebugKeyDown.onKeyDown(t)
			}), Laya.stage.on(Laya.Event.KEY_UP, this, function(t) {
				_G.sendMsg(BASE_MSG.SYS_KEY_UP, t)
			}), ViewBase.setClickSound("yllsd_01", "yllsd_01"), Laya.MouseManager.multiTouchEnabled = !1, t()
		}
		initGameCfg(t) {
			CfgLoader.init(function(e) {
				t()
			})
		}
		initBaseModule(t) {
			FileRecord.init(), GameStatistics.init(), t()
		}
		initSdk(t) {
			mgrAdv.setNativeUi(UI_NAME.PanelNativeAdv, null, UI_NAME.PanelNativeBanner), mgrSdk.onload(), mgrSdk.start(), mgrSdk.setVersion(GConfig.chn_data), Timer.callLoop(.05, function(e) {
				mgrSdk.isChnResult && (e.stop(), t())
			})
		}
		initBaseRes(t) {
			GameStatistics.statisCommonEvent(1001);
			let e = new ResLoader("BaseRes");
			e.add("res/singleColor.png", Laya.Loader.IMAGE), e.add("res/cfg/allCfgDb.txt", RES_TYPE.BUFFER), e.add("res/cfg/3dConfig.txt", RES_TYPE.TEXT), e.add("res/cfg/paintData.txt", RES_TYPE.BUFFER), e.add("res/cfg/shaderCompile.txt", RES_TYPE.TEXT), e.add("res/texture/sf_noise_clouds_01.png", RES_TYPE.TEXTURE2D), e.add("res/unity/Conventional/map_01.ls", RES_TYPE.PREFAB3D), Laya.loader.load("res/i18n/en_random_name_part1_db.json", Laya.Handler.create(this, () => {
				mgrI18n.en1 = Laya.loader.getRes("res/i18n/en_random_name_part1_db.json")
			})), Laya.loader.load("res/i18n/en_random_name_part2_db.json", Laya.Handler.create(this, () => {
				mgrI18n.en2 = Laya.loader.getRes("res/i18n/en_random_name_part2_db.json")
			})), Laya.loader.load("res/i18n/vi_random_name_part1_db.json", Laya.Handler.create(this, () => {
				mgrI18n.vi1 = Laya.loader.getRes("res/i18n/vi_random_name_part1_db.json")
			})), Laya.loader.load("res/i18n/vi_random_name_part2_db.json", Laya.Handler.create(this, () => {
				mgrI18n.vi2 = Laya.loader.getRes("res/i18n/vi_random_name_part2_db.json")
			})), Laya.loader.load("res/i18n/pt_random_name_part1_db.json", Laya.Handler.create(this, () => {
				mgrI18n.pt1 = Laya.loader.getRes("res/i18n/pt_random_name_part1_db.json")
			})), Laya.loader.load("res/i18n/pt_random_name_part2_db.json", Laya.Handler.create(this, () => {
				mgrI18n.pt2 = Laya.loader.getRes("res/i18n/pt_random_name_part2_db.json")
			})), Laya.loader.load("res/i18n/id_random_name_part1_db.json", Laya.Handler.create(this, () => {
				mgrI18n.id1 = Laya.loader.getRes("res/i18n/id_random_name_part1_db.json")
			})), Laya.loader.load("res/i18n/id_random_name_part2_db.json", Laya.Handler.create(this, () => {
				mgrI18n.id2 = Laya.loader.getRes("res/i18n/id_random_name_part2_db.json")
			})), Laya.loader.load("res/i18n/random_name_part1_db.json", Laya.Handler.create(this, () => {
				mgrI18n.zhcn1 = Laya.loader.getRes("res/i18n/random_name_part1_db.json")
			})), Laya.loader.load("res/i18n/random_name_part2_db.json", Laya.Handler.create(this, () => {
				mgrI18n.zhcn2 = Laya.loader.getRes("res/i18n/random_name_part2_db.json")
			})), e.add(SceneMain.MAIN_RES), e.setParent(this.resLoader), e.setLoadingCallback(t), e.loadAll()
		}
		initManager(t) {
			mgrLoader.onload(function(e) {
				t()
			})
		}
		initPool(t) {
			_G.poolManager.register(Model, 30), _G.poolManager.register(Spine, 50), _G.poolManager.register(Particle, 100), _G.poolManager.register(SpriteSheet, 10), _G.poolManager.register(GModel, 30), _G.poolManager.register(DropIcon, 20), _G.poolManager.register(CoinCount, 20), _G.poolManager.register(ReuseSprite, 20), t()
		}
		initShader(t) {
			mgrMaterial.precompileshader(t)
		}
		initRole(t) {
			if (null != mgrGame.contractIndex) {
				let e = new ResLoader("FirstGameRes");
				mgrPart.addPartResList(mgrPart.partsWear, e, !0), e.setLoadingCallback(t), e.loadAll()
			} else t()
		}
		initWorld(t) {
			t()
		}
		openPanel(t) {
			if (GameStatistics.statisCommonEvent(1002), null != mgrGame.contractIndex) mgrPanel.openPanel(UI_NAME.PanelMain, null, !1, function() {
				t(), GameStatistics.statisCommonEvent(1003, 1)
			});
			else {
				mgrOffline.firstPlayGame = !0;
				let e = PanelContract.getResLoader();
				e.setParent(this.resLoader), e.setLoadingCallback(function() {
					t(), mgrPanel.openPanel(UI_NAME.PanelContract)
				}), e.loadAll()
			}
		}
		onEnter(t) {
			SceneMain._started && Logger.error("SceneMain只能启动一次!"), SceneMain._started = !0, console.log("enter scene main"), _G.H5_TEST && GameRemoteRouter.create(), mgrPanel.openPanel(PanelTip), mgrRes.loadBmfontWithText(GConfig.bmf_score), mgrRes.loadBmfontWithText(GConfig.bmf_rank), mgrRes.loadBmfontWithText(GConfig.bmf_laji), mgrRes.loadBmfontWithText(GConfig.bmf_over), mgrRes.loadBmfontWithText(GConfig.bmf_class), mgrRes.loadBmfontWithText(GConfig.bmf_math), new ScreenTouchEffect("106"), new ResWatcher
		}
		onExit() {}
	}
	SceneMain._started = !1, SceneMain.MAIN_RES = ["res/ui/PanelNativeBanner.json", "res/ui/PanelMain.json", "res/ui/PanelGameLoading1.json", "res/ui/PanelGuide.json"];
	const B_SHOW_LICENCE_INFO_ON_LOADING = !1;
	class PanelLoading extends PanelLoadingBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelLoading.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_followTarget: "Laya.Sprite",
				cc_kouHong: "Laya.Sprite",
				cc_spriteLogo: "Laya.Sprite",
				cc_topNode: "Laya.Sprite",
				cc_nodetipsLabel: "Laya.Sprite",
				cc_licenceInfo: "Laya.Label",
				cc_progressLabel: "Laya.Label"
			}
		}
		buildUi() {
			this.nodetipsLabel.visible = !1, mgrI18n.trySetI18nImage(this.spriteLogo, "pnl_loading_01.png"), this.spriteLogo.y = 1200, cc.tween(this.spriteLogo).delay(.1).to(.5, {
				y: 723
			}, cc.OPTION.BACK_OUT).start(), this.onLoadProgress(this.curProgress)
		}
		update() {
			super.update();
			let t = Laya.Point.TEMP;
			UiHelper.getSelfGlobalPos(this.followTarget, t, this.bg), this.kouHong.pos(t.x, t.y, !0)
		}
		onLoadStart(t) {
			this.callable || this.safeCall(this.onLoadStart, t)
		}
		onLoadProgress(t) {
			if (!this.callable) return;
			let e = `${t=Math.round(100*t)}%`;
			this.progressLabel.text = e
		}
		onLoadComplete() {
			return !0
		}
	}
	class PanelActiveClass extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelActiveClass.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_buttonToGo: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(2513), UiHelper.addClickEvent(this.spriteBg, this.on_click_buttonToGo.bind(this), null, .5)
		}
		on_click_buttonToGo() {
			mgrJumpPanel.jumpTo(JUMP_PANEL.CLASS_ROOM)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelActiveCp extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelActiveCp.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_buttonToGo: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(2515), UiHelper.addClickEvent(this.spriteBg, this.on_click_buttonToGo.bind(this), null, .5)
		}
		on_click_buttonToGo() {
			mgrAlert.openPanelLoading(UI_NAME.PanelCpTestPreview), this.close()
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelActiveCpTestPreview extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelActiveCpTestPreview.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_buttonToGo: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(2517), UiHelper.addClickEvent(this.spriteBg, this.on_click_buttonToGo.bind(this), null, .5)
		}
		on_click_buttonToGo() {
			mgrJumpPanel.jumpTo(JUMP_PANEL.CP_TEST)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelActiveDance extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelActiveDance.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_buttonToGo: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(2514), UiHelper.addClickEvent(this.spriteBg, this.on_click_buttonToGo.bind(this), null, .5)
		}
		on_click_buttonToGo() {
			mgrJumpPanel.jumpTo(JUMP_PANEL.DANCE_DRAW)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelActiveDanceNew extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelActiveDanceNew.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_buttonToGo: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(2516), UiHelper.addClickEvent(this.spriteBg, this.on_click_buttonToGo.bind(this), null, .5)
		}
		on_click_buttonToGo() {
			mgrJumpPanel.jumpTo(JUMP_PANEL.DANCE_DRAW)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelActiveTest extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelActiveTest.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_buttonToGo: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(2512), UiHelper.addClickEvent(this.spriteBg, this.on_click_buttonToGo.bind(this), null, .5)
		}
		on_click_buttonToGo() {
			mgrAlert.openPanelLoading(UI_NAME.PanelRoleTest, null, function() {
				_G.sendMsg("ADVERTISING_JUMP_FINISH")
			}), this.close()
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelAdvCostDialog extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelAdvCostDialog.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_titleLabel: "Laya.Label",
				cc_descLabel: "Laya.Label",
				cc_buttonClose: "UIButton",
				cc_costCount: "Laya.Label",
				cc_buttonCost: "UIButton",
				cc_costLabel: "Laya.Label",
				cc_buttonAdv: "UIButton",
				cc_advLabel: "Laya.Label"
			}
		}
		buildUi() {
			let t = this.context || {};
			t.title ? this.titleLabel.text = t.title : this.titleLabel.text = mgrI18n.getText("panelAdvCostDialog.1"), this.descLabel.text = t.desc || "", t.advText ? this.advLabel.text = t.advText : this.advLabel.text = mgrI18n.getText("panelAdvCostDialog.2"), t.costText ? this.costLabel.text = t.costText : this.costLabel.text = mgrI18n.getText("panelAdvCostDialog.3")
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonCost() {
			this.close(), this.context && this.context.fOnClickCost && this.context.fOnClickCost()
		}
		on_click_buttonAdv() {
			this.close(), this.context && this.context.fOnClickAdv && this.context.fOnClickAdv()
		}
	}
	class PanelAdvDialog extends PanelBase {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.DIALOG, this.resourceName = "res/ui/PanelAdvDialog.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_titleLabel: "Laya.Label",
				cc_descLabel: "Laya.Label",
				cc_buttonNo: "UIButton",
				cc_buttonYes: "UIButton",
				cc_yesLabel: "Laya.Label"
			}, this._instOrBanner = new AdvInstOrBanner("enter_adv_dialog", "banner_adv_dialog")
		}
		buildUi() {
			let t = this.context,
				e = t.desc || " ";
			this.descLabel.text = e, t.title ? this.titleLabel.text = t.title : this.titleLabel.text = mgrI18n.getText("panelAdvCostDialog.1"), t.confirmText ? this.yesLabel.text = t.confirmText : this.yesLabel.text = mgrI18n.getText("panelAdvCostDialog.2")
		}
		dispose() {
			this.stopProcMsg(), this._instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this._instOrBanner.onFocus(t)
		}
		on_click_buttonNo() {
			this.close(), this.context.cancel && this.context.cancel()
		}
		on_click_buttonYes() {
			this.close(), this.context.confirm && this.context.confirm()
		}
	}
	const bg_image = "res/ui/pnl_chn/more_game_banner_bg.png",
		image_size_grid = "40,30,40,30",
		item_width = 70,
		item_height = 95,
		banner_width = 520,
		padding = 20,
		banner_height = item_height + padding;
	class MoreGameBanner extends ViewBase {
		constructor() {
			super(), this._bInit = !1, this.create()
		}
		static get copEnable() {
			return !!mgrSdk.getSubCop("b_more_game_banner")
		}
		static setBannerVisible(t, e = 0) {
			t ? this.openBanner(e) : this.closeBanner()
		}
		static openBanner(t = 0) {
			this.openCount++, this.copEnable && (this._instance || (this._instance = new MoreGameBanner), this._instance && 1 == this.openCount && (this._instance.show(t), this._instance.setTop()))
		}
		static closeBanner() {
			this.openCount--, this.openCount < 0 && console.warn("re close more game banner."), this._instance && 0 == this.openCount && this._instance.hide()
		}
		create() {
			let t = new Laya.Image;
			t.skin = bg_image, t.sizeGrid = image_size_grid, t.size(banner_width, banner_height), t.anchorX = .5, t.anchorY = 1;
			let e = t.addChild(new Laya.Sprite);
			e.pos(padding / 2, padding / 2).size(banner_width - padding, item_height), e.scrollRect = Laya.Rectangle.create().setTo(0, 0, banner_width - padding, item_height);
			let a = e.addChild(new Laya.Sprite).addComponent(UIHVLayout);
			a.align = "head", a.space = 10, this._layout = a, this.createFromNode(t)
		}
		onCreateComplete() {
			let t = mgrPanel.getLayerNode(PANEL_LAYER.DIALOG);
			this.setParent(t), this._msgHandler = new MsgHandler, this._msgHandler.registerListeners({
				[BASE_MSG.SDK_OPEN_JUMP_RESULT]: this.onMsgOpenJumpResult.bind(this)
			}), this._msgHandler.startProcMsg(), mgrSdk.openJump("list"), this.hide()
		}
		show(t = 0) {
			super.show(), this.setPosition(.5 * _G.canvasWidth, _G.canvasHeight - 200 - t), this._layout.node.x = 0, this._tween && this._tween.start()
		}
		hide() {
			super.hide(), this._tween && this._tween.stop()
		}
		dispose() {
			this._msgHandler && (this._msgHandler.stopProcMsg(), this._msgHandler = null), super.dispose()
		}
		onMsgOpenJumpResult(t) {
			if ("list" == t.type) {
				let e = t.jumpInfo;
				this.fillData(e)
			}
		}
		fillData(t) {
			if (!t || 0 == t.length) return void this.hide();
			if (this._bInit) return;
			this._bInit = !0;
			for (let e = 0; e < t.length; e++) {
				let a = this.createItem();
				a.loadImage(t[e].url), UiHelper.addClickEvent(a, function() {
					mgrSdk.jumpOtherGame(t[e].index, "list")
				})
			}
			this._layout.updateLayout(0, !0);
			let e = this._layout.totalLen - (banner_width - padding);
			if (e > 0) {
				let a = Mathf.lerpFromInverseLerp(4, 8, 6, 10, t.length);
				this._tween = cc.tween(this._layout.node).repeatForever(cc.tween().to(a, {
					x: -e
				}).delay(.3).to(a, {
					x: 0
				}).delay(.3)).start()
			}
		}
		createItem() {
			let t = new Laya.Sprite;
			return t.size(item_width, item_height), this._layout.addChild(t), t
		}
	}
	MoreGameBanner.openCount = 0;
	class PanelDialog extends PanelBase {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.DIALOG, this.resourceName = "res/ui/PanelDialog.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_titleLabel: "Laya.Label",
				cc_descLabel: "Laya.Label",
				cc_buttonNo: "UIButton",
				cc_noLabel: "Laya.Label",
				cc_buttonYes: "UIButton",
				cc_yesLabel: "Laya.Label"
			}, this.instOrBanner = new AdvInstOrBanner("enter_dialog", "banner_dialog")
		}
		buildUi() {
			let t = this.context,
				e = t.desc || " ";
			this.descLabel.text = e, t.title ? this.titleLabel.text = t.title : this.titleLabel.text = mgrI18n.getText("schoolYearbookItem.2"), t.confirmText ? this.yesLabel.text = t.confirmText : this.yesLabel.text = mgrI18n.getText("panelAdvCostDialog.2"), t.cancelText ? this.noLabel.text = t.cancelText : this.noLabel.text = mgrI18n.getText("panelAdvCostDialog.3"), t.cancel || (this.buttonNo.node.visible = !1), t.close || (this.buttonClose.node.visible = !1), t.closeMsg && (this.registerMsg({
				[t.closeMsg]: this.onRecieveMsg.bind(this)
			}), this.startProcMsg()), MoreGameBanner.setBannerVisible(!0)
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), MoreGameBanner.setBannerVisible(!1), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onRecieveMsg() {
			this.stopProcMsg(), this.close()
		}
		on_click_buttonNo() {
			this.close(), this.context.cancel && this.context.cancel()
		}
		on_click_buttonYes() {
			this.close(), this.context.confirm && this.context.confirm()
		}
		on_click_buttonClose() {
			this.close(), this.context.close && this.context.close()
		}
	}
	class PanelCat extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelCat.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_catSprite: "Laya.Sprite",
				cc_spriteLuckTime: "Laya.Sprite",
				cc_coinSprite: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_bottomNode: "Laya.Sprite",
				cc_buttonGet: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_cat", "banner_cat"), this.pool = [], this.totalCoin = 0, this.bStart = !1, this.firstClick = !1
		}
		buildUi() {
			this.catTime = Mathf.random(3, 8), this.perCount = 450 * mgrOffline.offlinePerSecond / this.catTime, mgrI18n.trySetI18nImage(this.spriteLuckTime, "pnl_class_color_eggs_06.png"), mgrI18n.trySetI18nImage(this.buttonGet.node, "pnl_class_color_eggs_05.png"), this.buttonGet.clickDelta = .1, cc.tween(this.catSprite).repeatForever(cc.tween().to(.1, {
				rotation: 5
			}).to(.2, {
				rotation: -5
			}).to(.1, {
				rotation: 0
			}).delay(1)).start()
		}
		dispose() {
			this.instOrBanner.dispose(), super.dispose()
		}
		close(t) {
			PanelDialogCat.nextTime = Timer.time + db.cop.cat_delta_time, super.close(t)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		update() {
			this.bStart && this.catTime > 0 && (this.catTime -= Timer.deltaTime, this.catTime <= 0 && this.timeFinish())
		}
		getCoin() {
			let t = this.pool.pop();
			return t ? t.visible = !0 : (t = UiHelper.cloneSprite(this.coinSprite), this.bg.addChild(t)), t
		}
		putCoin(t) {
			t.visible = !1, this.pool.push(t)
		}
		timeFinish() {
			this.buttonGet.interactable = !1;
			this.totalCoin;
			GameStatistics.statisCommonEvent(7911, 2), this.close()
		}
		on_click_buttonClose() {
			this.bStart = !1, this.close()
		}
		on_click_buttonGet() {
			this.firstClick || (this.firstClick = !0, GameStatistics.statisCommonEvent(7911, 1)), this.bStart = !0;
			let t = this.getCoin();
			t.pos(Mathf.random(-200, 200), Mathf.random(-120, 190)), t.alpha = 1, cc.tween(t, !0).parallel(cc.tween().by(.8, {
				y: -50
			}, cc.OPTION.SINE_OUT), cc.tween().delay(.65).to(.3, cc.PROP.ALPHA0).call(this.putCoin.bind(this, t))).start(), this.totalCoin += this.perCount
		}
	}
	class PanelDialogCat extends PanelDialog {
		constructor() {
			super(...arguments), this.instOrBanner = new AdvInstOrBanner("", "banner_cat_dialog")
		}
		static tryOpenPanel(t) {
			if (_G.isGuiding) return;
			if (this.nextTime > Timer.time) return;
			if (!Mathf.randomEnable(db.cop.cat_ratios[t])) return;
			this.nextTime = Timer.time + 60;
			let e = {
				desc: mgrI18n.getText("panelCat.4"),
				title: mgrI18n.getText("panelAdvCostDialog.1"),
				confirm: function() {
					mgrAlert.openPanelLoading(UI_NAME.PanelCat)
				}
			};
			mgrAlert.openPanelLoading(PanelDialogCat, e), GameStatistics.statisCommonEvent(7911, 0)
		}
	}
	PanelDialogCat.nextTime = 0;
	class PanelCatLvup extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelCatLvup.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_labelCoin: "Laya.Label",
				cc_descLabel1: "Laya.Label",
				cc_labelCurRl: "Laya.Label",
				cc_descLabel2: "Laya.Text",
				cc_costCount: "Laya.Text",
				cc_buttonLvup: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			let t = BaseFacade.mUp.getLevel("cat"),
				e = BaseFacade.mUp.getUpDb("cat", t + 1),
				a = BaseFacade.mUp.getUpDb("cat", t);
			this.labelCoin.text = mgrI18n.getText("panelCatLvup.3") + ":" + a.coinPerMin + "→", this.descLabel1.text = e.coinPerMin + "", this.labelCurRl.text = mgrI18n.getText("panelCatLvup.5") + ":" + +a.catCoinMax + "→", this.descLabel2.text = e.catCoinMax + "", this.costCount.text = a.reqCnt2 + ""
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonLvup() {
			let t = mgrCat.limitLevel;
			if (t) {
				let e = String.format(mgrI18n.getText("panelCatLvup.6"), t);
				mgrAlert.alertDialog(e)
			} else {
				let t = BaseFacade.mUp.getUpDb("cat"),
					e = BaseFacade.mUp.getLackItemId(t);
				e ? mgrAlert.alertNotEnough(e) : (this.close(), mgrCat.lvup(), mgrAlert.alertDialog(mgrI18n.getText("panelCatLvup.7")))
			}
		}
	}
	let update_delta_time_min = 25,
		update_delta_time_max = 35;
	class UITip {
		constructor(t, e, a = 0) {
			this.destroyed = !1, this.m_Dirty = !1, this.m_updateTime = 0, this.m_leftUpdateTime = 0, this.tipSprite = null, this.tipSprite = t.getChildByName("tip"), this.tipSprite ? (this.setChecker(e, a), this.updateTip(), this.update(a), Laya.timer.loop(500, this, this.update, [.5])) : console.error("UITip:找不到tip节点")
		}
		dispose() {
			this.destroyed = !0, Laya.timer.clearAll(this)
		}
		update(t) {
			if (this.tipSprite.destroyed) this.dispose();
			else if (this.m_Dirty) {
				if (this.m_Dirty = !1, this.m_checker) {
					let t = this.m_checker() >= 0;
					this.tipSprite.visible = t, t ? this.startAnim() : this.stopAnim()
				}
			} else this.m_updateTime > 0 && (this.m_leftUpdateTime -= t, this.m_leftUpdateTime <= 0 && this.updateTip())
		}
		get isActive() {
			return this.tipSprite.visible
		}
		updateTip() {
			this.m_Dirty = !0, this.m_leftUpdateTime = this.m_updateTime
		}
		setChecker(t, e = 0) {
			this.m_checker = t, this.m_updateTime = e, this.m_leftUpdateTime = e
		}
		startAnim() {
			this.stopAnim(), this.tipSprite && UITip.playTipAnim(this.tipSprite)
		}
		stopAnim() {
			this.tipSprite && cc.clearTween(this.tipSprite)
		}
		static playTipAnim(t) {
			cc.tween(t, !0).repeatForever(cc.tween().repeat(2, cc.tween().to(.2, {
				rotation: 15
			}, cc.OPTION.SINE_IN_OUT).to(.2, {
				rotation: -15
			}, cc.OPTION.SINE_IN_OUT)).to(.1, {
				rotation: 0
			}).delay(2)).start()
		}
	}
	class PanelChallengePreview extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelChallengePreview.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg1: "Laya.Sprite",
				cc_buttonSzzFull: "UIButton",
				cc_spriteSzz: "Laya.Sprite",
				cc_spriteBg2: "Laya.Sprite",
				cc_buttonPvpFull: "UIButton",
				cc_spritePvp: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			this.initTip(), mgrI18n.trySetI18nImage(this.spriteBg1, "pnl_challenge_preview_02.png"), mgrI18n.trySetI18nImage(this.spriteBg2, "pnl_challenge_preview_01.png"), this.registerMsg({
				LOTTERY_SUC: this.onMsgLotterySuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.szzTip && this.szzTip.dispose(), this.pvpTip && this.pvpTip.dispose(), super.dispose()
		}
		onMsgLotterySuc() {
			this.szzTip.updateTip()
		}
		initTip() {
			this.szzTip = new UITip(this.spriteSzz, function() {
				return BaseFacade.mItem.getItemCount("1014") > 0 || mgrAdv.getActive("free_like") ? 0 : mgrSzz.canLottery() ? 0 : -1
			}), this.pvpTip = new UITip(this.spritePvp, function() {
				return mgrPvp.curTicket > 0 || mgrAdv.getActive("pvp") || mgrPvp.isPvpAwardCanReceive() ? 0 : -1
			})
		}
		on_click_buttonSzzFull() {
			mgrAlert.openGameLoading(UI_NAME.PanelSzz, null, () => {
				this.close(), _G.sendMsg("JOIN_SZZ")
			})
		}
		on_click_buttonPvpFull() {
			mgrPvp.isJoin ? mgrAlert.openGameLoading(UI_NAME.PanelPvp, null, this.close.bind(this)) : (GameStatistics.statisCommonEvent(6001), mgrAlert.openPanelLoading(UI_NAME.PanelPvpCard, null, this.close.bind(this)))
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class ClassColorEgg extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/ClassColorEgg.json", this._exportNodeInfo = {
				cc_spriteLight: "Laya.Sprite",
				cc_spriteEgg: "Laya.Image",
				cc_nodeTip: "Laya.Sprite",
				cc_spriteTip: "Laya.Sprite",
				cc_buttonGet: "UIButton",
				cc_buttonGo: "UIButton",
				cc_buttonOpen: "UIButton"
			}, this.create()
		}
		onCreateComplete() {
			this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), this.classTip = new UITip(this.buttonGet.node, function() {
				return 0
			})
		}
		dispose() {
			this.stopProcMsg(), this.openEffect && (_G.poolManager.put(this.openEffect), this.openEffect = null), this.closeEffect && _G.poolManager.put(this.closeEffect), this.classTip && this.classTip.dispose(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"open_class_egg" == t.advName && t.params == this.questId && (mgrColorEggs.accept(this.questId), this.fillData(this.questId), mgrAlert.playParticleEffect("189", UiHelper.getSelfGlobalPos(this.nodeTip), 1.5, 1))
		}
		fillData(t) {
			if (!this.callable) return this.safeCall(this.fillData, t);
			this.questId = t;
			let e = db.get_quest_db(t),
				a = mgrColorEggs.getState(t);
			switch (mgrI18n.trySetI18nImage(this.spriteTip, e.icon), a) {
				case EGGS_STATE.NEW:
					this.spriteEgg.skin = "res/ui/pnl_class_color_eggs/egg.png", this.buttonGet.node.visible = !1, this.buttonGo.node.visible = !1, this.buttonOpen.node.visible = !0, this.nodeTip.scale(0, 0), this.spriteLight.visible = !1, this.closeEffect || (this.closeEffect = _G.poolManager.get(Particle, "191"), this.closeEffect.setParent(mgrAlert.scene3dfont), this.closeEffect.followTarget(this.nodeTip, mgrAlert.camerafont), this.closeEffect.play()), mgrAdv.statisVideoShow("open_class_egg");
					break;
				case EGGS_STATE.OPENED:
					this.spriteEgg.skin = "res/ui/pnl_class_color_eggs/egg_open.png", this.buttonGet.node.visible = !1, this.buttonGo.node.visible = !0, this.buttonOpen.node.visible = !1, cc.tween(this.nodeTip).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), this.spriteLight.visible = !0, cc.tween(this.spriteLight, !0).repeatForever(cc.tween().to(.8, {
						alpha: .5
					}).to(.8, {
						alpha: 1
					})).start(), this.closeEffect && this.closeEffect.stop(), this.openEffect || (this.openEffect = _G.poolManager.get(Particle, "190"), this.openEffect.setParent(mgrAlert.scene3dfont), this.openEffect.followTarget(this.nodeTip, mgrAlert.camerafont), this.openEffect.play());
					break;
				case EGGS_STATE.AWARD:
					this.spriteEgg.skin = "res/ui/pnl_class_color_eggs/egg_open.png", this.buttonGet.node.visible = !0, UiHelper.playBreathe(this.buttonGet.node, .72, .88), this.buttonGo.node.visible = !1, this.buttonOpen.node.visible = !1, this.nodeTip.visible = !1, this.spriteLight.visible = !0, cc.tween(this.spriteLight, !0).repeatForever(cc.tween().to(.8, {
						alpha: .5
					}).to(.8, {
						alpha: 1
					})).start(), this.openEffect || (this.openEffect = _G.poolManager.get(Particle, "190"), this.openEffect.setParent(mgrAlert.scene3dfont), this.openEffect.followTarget(this.nodeTip, mgrAlert.camerafont), this.openEffect.play());
					break;
				case EGGS_STATE.FINISHED:
					this.spriteEgg.skin = "res/ui/pnl_class_color_eggs/egg_open.png", this.buttonGet.node.visible = !1, this.buttonGo.node.visible = !1, this.buttonOpen.node.visible = !1, this.nodeTip.visible = !1, cc.clearTween(this.spriteLight), this.spriteLight.visible = !1, this.openEffect && this.openEffect.stop()
			}
		}
		on_click_buttonGet() {
			mgrColorEggs.commit(this.questId), this.fillData(this.questId)
		}
		on_click_buttonGo() {
			switch (this.questId) {
				case COLOR_EGGS_QUEST.CLICK_BUTTERFLY:
					mgrJumpPanel.jumpTo(JUMP_PANEL.SKINCARE);
					break;
				case COLOR_EGGS_QUEST.GET_FISH:
					mgrJumpPanel.jumpTo(JUMP_PANEL.DREAM);
					break;
				case COLOR_EGGS_QUEST.CLEAR_TUYA:
					_G.sendMsg("CLOSE_PANEL_COLOR_EGGS"), mgrPanel.openPanelWithSingleton(UI_NAME.PanelClassRoom)
			}
		}
		on_click_buttonOpen() {
			mgrColorEggs.isNew(this.questId) && (mgrAdv.dispatchAdv("open_class_egg", this.questId, !0), mgrAdv.statisVideoClick("open_class_egg"))
		}
	}
	class PanelClassColorEggs extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassColorEggs.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_spriteBg: "Laya.Sprite",
				cc_nodeEgg0: "Laya.Sprite",
				cc_nodeEgg1: "Laya.Sprite",
				cc_nodeEgg2: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.eggs = [], this.instOrBanner = new AdvInstOrBanner("", "banner_class_color_eggs")
		}
		buildUi() {
			let t = mgrColorEggs.getAllQuest(EGGS_TYPE.CLASS);
			this.allQuest = t, mgrI18n.trySetI18nImage(this.spriteBg, "pnl_class_color_eggs_01.png");
			for (let e = 0; e < t.length; e++) {
				let a = new ClassColorEgg;
				a.setParent(this["nodeEgg" + e]), a.fillData(t[e]), this.eggs.push(a)
			}
			Timer.callLater(2, () => {
				console.log(this)
			}), this.registerMsg({
				CLOSE_PANEL_COLOR_EGGS: this.close.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.instOrBanner.dispose(), this.stopProcMsg();
			for (let t = 0; t < this.eggs.length; t++) this.eggs[t].dispose();
			super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class StudentItem extends ViewBase {
		constructor(t) {
			super(t), this.resourceName = "res/prefab/StudentItem.json", this._exportNodeInfo = {
				cc_bg: "Laya.Box",
				cc_nodeSpine: "Laya.Box",
				cc_nodeTalkLeft: "Laya.Sprite",
				cc_labelTalkLeft: "Laya.Label",
				cc_nodeTalkRight: "Laya.Sprite",
				cc_labelTalkRight: "Laya.Label",
				cc_nodeAdv: "Laya.Box",
				cc_buttonAdv: "UIButton"
			}, this.bShowTalk = !1, this.create()
		}
		onCreateComplete() {
			this.bg.addComponent(UIButton), UiHelper.addUIButtonClick(this.bg, this.onClick.bind(this)), this.fillData()
		}
		dispose() {
			this.spine && _G.poolManager.put(this.spine), this.spriteXiuBiao && this.spriteXiuBiao.destroy(), super.dispose()
		}
		fillData() {
			let t = this.context.roleId,
				e = db.get_class_room_role_db(t);
			if (!e) return;
			let a = _G.poolManager.get(Spine, e.spineId);
			this.spine = a, a.setParent(this.nodeSpine), a.setScale(.8, .8), a.callIfLoaded(() => {
				if (this.destroyed) return;
				let e = mgrClassRoom.getRoleLevel(t),
					i = db.get_class_room_level_db(e);
				if (i) {
					let t = a.getSkeleton().templet.mBoneArr,
						e = new Laya.Sprite;
					e.size(26, 33), e.pivot(e.width / 2, e.height / 2), a.addChild(e), e.loadImage(i.xbIcon), this.spriteXiuBiao = e, Timer.callLoopFrame(1, a => {
						if (this.destroyed || this.spriteXiuBiao.destroyed) a.stop();
						else
							for (let a = 0; a < t.length; a++) {
								const i = t[a];
								if (i && "xiubiao" == i.name) {
									e.x = i.resultMatrix.tx, e.y = i.resultMatrix.ty;
									let t = 180 * Math.atan2(i.resultMatrix.b, i.resultMatrix.a) / Math.PI;
									e.rotation = t - 90
								}
							}
					}, this)
				}
			}), this.buttonAdv.node.visible = this.context.bOutSide && mgrAdv.checkActive("class_role_leave"), this.buttonAdv.node.visible && mgrAdv.statisVideoShow("class_role_leave"), this.nodeTalkLeft.visible = !1, this.nodeTalkRight.visible = !1, this.nodeTalk = this.nodeTalkRight, this.labelTalk = this.labelTalkRight
		}
		playAnim(t, e = !0) {
			this.callable ? this.spine && this.spine.play(t, e) : this.safeCall(this.playAnim, t, e)
		}
		setFlip(t) {
			this.callable ? (this.spine && this.spine.setScaleX(.8 * t), this.nodeTalk = t > 0 ? this.nodeTalkRight : this.nodeTalkLeft, this.labelTalk = t > 0 ? this.labelTalkRight : this.labelTalkLeft) : this.safeCall(this.setFlip, t)
		}
		moveToSeat() {
			this.callable ? (this.playAnim("walk"), cc.tween(this.resNode).to(2, {
				x: 0
			}).call(() => {
				this.playAnim("idle")
			}).start()) : this.safeCall(this.moveToSeat)
		}
		cryToStandPos() {
			this.callable ? (this.nodeSpine && this.nodeSpine.scale(1.2, 1.2), this.setBottomButtonVisible(!1), this.playAnim("move"), cc.tween(this.nodeSpine).to(1, {
				scaleX: 1,
				scaleY: 1
			}).start(), cc.tween(this.resNode).to(1, {
				y: 80
			}).to(2, {
				x: 0
			}).to(.3, {
				y: 0
			}).call(() => {
				this.playAnim("cry"), this.setBottomButtonVisible(!0)
			}).start()) : this.safeCall(this.cryToStandPos)
		}
		leaveStandPos(t, e, a) {
			this.callable ? (this.setBottomButtonVisible(!1), this.playAnim("walk"), this.setFlip(-1), cc.tween(this.resNode).to(.3, {
				y: 80
			}).to(2, {
				x: -t
			}).call(() => {
				this.setFlip(1)
			}).to(1, {
				y: -e
			}).call(() => {
				this.dispose()
			}).start()) : this.safeCall(this.leaveStandPos, t, e, a)
		}
		setBottomButtonVisible(t) {
			this.callable ? this.nodeAdv.visible = t : this.safeCall(this.setBottomButtonVisible, t)
		}
		leaveHappy(t, e) {
			this.callable ? (this.playAnim("happy"), this.spine.scaleX > 0 ? (this.setFlip(-1), cc.tween(this.resNode).to(2, {
				x: -300
			}).call(() => {
				mgrClassRoom.setStudentLeave(t), e(), this.dispose(), this.removeFromParent()
			}).start()) : (this.setFlip(1), cc.tween(this.resNode).to(2, {
				x: 300
			}).call(() => {
				mgrClassRoom.setStudentLeave(t), e(), this.dispose(), this.removeFromParent()
			}).start())) : this.safeCall(this.leaveHappy, t, e)
		}
		leaveAndReplace(t, e) {
			this.callable ? (this.playAnim("walk"), this.spine.scaleX > 0 ? (this.setFlip(-1), cc.tween(this.resNode).to(2, {
				x: -300
			}).call(() => {
				e(), this.dispose(), this.removeFromParent()
			}).start()) : (this.setFlip(1), cc.tween(this.resNode).to(2, {
				x: 300
			}).call(() => {
				e(), this.dispose(), this.removeFromParent()
			}).start())) : this.safeCall(this.leaveAndReplace, t, e)
		}
		showTalkBubble() {}
		closeTalkBubble() {
			this.bShowTalk && (this.bShowTalk = !1, cc.tween(this.nodeTalk).to(.3, cc.PROP.SCALE0, cc.OPTION.BACK_IN).call(() => {
				this.nodeTalk.visible = !1
			}).start())
		}
		onClick() {
			this.context.bOutSide
		}
		on_click_buttonAdv() {
			mgrAdv.statisVideoClick("class_role_leave"), mgrAdv.dispatchAdv("class_role_leave", {
				roleId: this.context.roleId
			}, !0)
		}
	}
	class PanelClassOutSide extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassOutSide.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_nodeStands: "Laya.Box",
				cc_nodeStand1: "Laya.Box",
				cc_nodeStand2: "Laya.Box",
				cc_nodeStand3: "Laya.Box",
				cc_nodeLeftTop: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_buttonRoom: "UIButton",
				cc_sprite01: "Laya.Sprite"
			}, this.students = {}
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.sprite01, "pnl_class_room_05.png"), this.buttonClose.node.visible = !1, this.context && null != this.context.crySeatIdx && (mgrClassRoom.hasStandPos() || mgrClassRoom.clearStandData(0)), this.refreshStudents(), this.context && null != this.context.crySeatIdx && this.playStudentCryWalk(this.context.crySeatIdx), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		refreshStudents() {
			let t = mgrClassRoom.getStandDatas();
			for (let e = 0; e < 3; e++) {
				let a = t[e];
				if (a && !this.students[e]) {
					let t = this["nodeStand" + (e + 1).toString()],
						i = new StudentItem({
							roleId: a.roleId,
							bOutSide: !0
						});
					i.setParent(t), i.setFlip(-1), i.playAnim("cry"), this.students[e] = i
				} else !a && this.students[e] && (this.students[e].dispose(), this.students[e] = null)
			}
		}
		onMsgAdvShowSuc(t) {
			if ("class_role_leave" == t.advName && t.params && null != t.params.roleId) {
				let e = mgrClassRoom.getStandDatas();
				for (let a = 0; a < e.length; a++) {
					let i = e[a];
					if (i && t.params.roleId == i.roleId) {
						let t = 200 + 120 * a,
							e = 150;
						this.students[a] && this.students[a].leaveStandPos(t, e, a), mgrClassRoom.setStandLeave(a), cc.tween(this.bg).to(2, {
							x: 100
						}).delay(1).to(2, {
							x: 0
						}).start();
						break
					}
				}
			}
		}
		playStudentCryWalk(t) {
			let e = mgrClassRoom.getStandDatas();
			for (let a = 0; a < 3; a++) {
				if (!e[a]) {
					let e = this["nodeStand" + (a + 1).toString()],
						i = mgrClassRoom.getSeatDatas();
					console.log("查看seatDatas", i);
					let s = new StudentItem({
						roleId: i[t].roleId,
						bOutSide: !0
					});
					s.setParent(e), s.x = -200 - 120 * a, s.y = -200, this.students[a] = s, s.cryToStandPos(), mgrClassRoom.setStudentStand(t), this.bg.x = 100, cc.tween(this.bg).delay(1).to(2, {
						x: 0
					}).start();
					break
				}
			}
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonRoom() {
			GameStatistics.statisCommonEvent(2535), mgrAlert.openPanelLoading(UI_NAME.PanelClassRoom, {}, this.close.bind(this))
		}
	}
	class PanelClassReward extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassReward.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_labelTitle: "Laya.Label",
				cc_spriteFlower1: "Laya.Sprite",
				cc_spriteFlower2: "Laya.Sprite",
				cc_spriteFlower3: "Laya.Sprite",
				cc_spriteFlower4: "Laya.Sprite",
				cc_spriteFlower5: "Laya.Sprite",
				cc_spriteReward: "Laya.Sprite",
				cc_labelDesc: "Laya.Label",
				cc_nodeBtns: "Laya.Box",
				cc_buttonStart: "UIButton",
				cc_buttonAdv: "UIButton",
				cc_buttonSure: "UIButton",
				cc_nodeSpine: "Laya.Box",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			let t = this.context && this.context.roleId,
				e = db.get_class_room_role_db(t);
			if (!e) return;
			let a = _G.poolManager.get(Spine, e.spineId);
			this.spine = a, a.setParent(this.nodeSpine), a.setScale(-1, 1), a.play("idle", !0), this.labelTitle.text = `${mgrI18n.getText("panelClassReward.1")}`;
			let i = mgrClassRoom.getRoleFlowerCount(t);
			this.context && this.context.bFromBook || mgrClassRoom.addRoleFlowerCount(t);
			let s = mgrClassRoom.getRoleFlowerCount(t),
				n = !1;
			for (let t = 1; t <= 5; t++) {
				let e = this["spriteFlower" + t.toString()];
				e && (e.visible = t <= s, t == s && i < s && (e.scale(4, 4), cc.tween(e).to(.3, cc.PROP.SCALE1).to(.1, cc.PROP.SCALE1_3).to(.1, cc.PROP.SCALE1).call(() => {
					let t = this.addEffect("185");
					t.setParent(this.scene3DEffect), t.align(e, this.cameraEffect), t.play()
				}).start(), n = !0))
			}
			let o = mgrClassRoom.getRoleLevel(t),
				r = s > o,
				l = db.get_class_room_level_db(Math.min(4, o + 1));
			if (r || (l = db.get_class_room_level_db(o)), 1 == l.id ? mgrI18n.trySetI18nImage(this.spriteReward, "icon_class_level_01.png") : this.spriteReward.loadImage(l.texture), n) this.spriteReward.scale(0, 0), cc.tween(this.spriteReward).delay(.5).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).call(() => {
				if (a.play("happy", !0), l.texture) {
					let t = this.addEffect("117");
					t.setParent(this.scene3DEffect), t.align(this.spriteReward, this.cameraEffect), t.play()
				}
			}).start();
			else if (a.play("happy", !0), l.texture) {
				let t = this.addEffect("117");
				t.setParent(this.scene3DEffect), t.align(this.spriteReward, this.cameraEffect), t.play()
			}
			r && o < 4 && GameStatistics.statisCommonEvent(2568 + l.id, t);
			let c = String.format(mgrI18n.getText("panelClassReward.2"), mgrI18n.getText(l.tlite));
			this.labelDesc.text = c, this.labelDesc.visible = r && o < 4, this.buttonStart.node.visible = r && 0 == o;
			let h = mgrAdv.checkActive("class_appraise");
			this.buttonAdv.node.visible = r && o > 0 && o < 4 && h, o > 0 && o < 4 && h && mgrAdv.statisVideoShow("class_appraise"), this.buttonSure.node.visible = !r || o > 0 && o < 4 && !h || o >= 4;
			let d = n ? .8 : 0;
			this.labelDesc.alpha = 0, cc.tween(this.labelDesc).delay(d).to(.3, cc.PROP.ALPHA1).start(), this.nodeBtns.scale(0, 0), cc.tween(this.nodeBtns).delay(d).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.spine && _G.poolManager.put(this.spine), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"class_appraise" == t.advName && t.params && null != t.params.roleId && (mgrClassRoom.upgradeLevel(t.params.roleId), this.context && this.context.fOnRewardEnd && this.context.fOnRewardEnd(), this.close())
		}
		on_click_buttonStart() {
			let t = this.context && this.context.roleId;
			mgrClassRoom.getRoleLevel(t) < 4 ? (mgrClassRoom.upgradeLevel(t), this.context && this.context.fOnRewardEnd && this.context.fOnRewardEnd(), this.close()) : (_G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelClassReward.3")), this.context && this.context.fOnRewardEnd && this.context.fOnRewardEnd(), this.close())
		}
		on_click_buttonClose() {
			this.context && this.context.fOnRewardEnd && this.context.fOnRewardEnd(), this.close()
		}
		on_click_buttonAdv() {
			let t = this.context && this.context.roleId;
			mgrClassRoom.getRoleLevel(t) < 4 ? (mgrAdv.statisVideoClick("class_appraise"), mgrAdv.dispatchAdv("class_appraise", {
				roleId: t
			}, !0)) : (_G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelClassReward.3")), this.context && this.context.fOnRewardEnd && this.context.fOnRewardEnd(), this.close())
		}
		on_click_buttonSure() {
			this.on_click_buttonClose()
		}
	}
	class PanelClassRoleDetail extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassRoleDetail.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_labelName: "Laya.Label",
				cc_labelLevel: "Laya.Label",
				cc_labelSchool: "Laya.Label",
				cc_labelClass: "Laya.Label",
				cc_nodeSpine: "Laya.Box",
				cc_labelDesc: "Laya.Label",
				cc_buttonSure: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_class_role_detail")
		}
		buildUi() {
			let t = this.context && this.context.roleId,
				e = db.get_class_room_role_db(t);
			if (!e) return;
			let a = mgrClassRoom.getRoleLevel(t),
				i = db.get_class_room_level_db(a);
			this.labelName.text = e.name, this.labelLevel.text = i && mgrI18n.getText(i.tlite) ? i.name : mgrI18n.getText("panelClassRoleDetail.1"), this.labelSchool.text = mgrI18n.getText("panelClassRoleDetail.2"), this.labelClass.text = mgrI18n.getText(e.tlite3);
			let s = _G.poolManager.get(Spine, e.spineId);
			this.spine = s, s.setParent(this.nodeSpine), s.setScale(-.9, .9), s.play("idle", !0), this.labelDesc.text = e.description
		}
		dispose() {
			this.instOrBanner.dispose(), this.spine && _G.poolManager.put(this.spine), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		on_click_buttonSure() {
			this.close()
		}
	}
	class PanelClassRoleGet extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassRoleGet.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeAll: "Laya.Sprite",
				cc_nodeLayoutDesc: "Laya.Box",
				cc_labelDescCankao: "Laya.Label",
				cc_spriteChip1: "Laya.Sprite",
				cc_spriteChip2: "Laya.Sprite",
				cc_spriteChip3: "Laya.Sprite",
				cc_spriteChip4: "Laya.Sprite",
				cc_labelTips: "Laya.Label",
				cc_buttonSure: "UIButton",
				cc_buttonClose: "UIButton",
				cc_buttonCircle: "UIButton",
				cc_buttonBox: "UIButton"
			}, this.oldContractIdx = null, this.instOrBanner = new AdvInstOrBanner("", "banner_class_role_get"), this.loadState = 0
		}
		static getResLoader() {
			let t = new ResLoader;
			return mgrClassRoom.getRoleLevel(CLASS_UNLOCK_ROLE_ID) >= 4 && (t.add(db.get_animation_db(MODEL_ANIM.SHENTI_COME).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_COME).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHENTI_IDLE).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_IDLE).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_COME).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_IDLE).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_come).resPath, RES_TYPE.PREFAB3D), t.add(db.get_model_db(db.MODEL_DB_ID.come).resPath, RES_TYPE.PREFAB3D), t.add(db.get_model_db(db.MODEL_DB_ID.wawahe).resPath, RES_TYPE.PREFAB3D), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME01).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME02).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME03).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME01).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME02).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME03).path, RES_TYPE.ANIMATIONCLIP), mgrGame.contractIndex != CLASS_UNLOCK_CONTRACT_IDX && (t.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_jiechu).resPath, RES_TYPE.PREFAB3D), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHENTI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_JIECHU).path, RES_TYPE.ANIMATIONCLIP))), t.add("res/ui/PanelDanceRoleGet.json", RES_TYPE.PREFAB2D), t
		}
		static openPanel(t, e) {
			let a = this.getResLoader();
			mgrAlert.openWait(a, () => {
				mgrPanel.openPanelWithSingleton(UI_NAME.PanelClassRoleGet, e, t)
			})
		}
		buildUi() {
			this.labelDescCankao.visible = !1, this.labelDescCankao.text = mgrI18n.getText("panelClassRoleGet.1"), mgrI18n.trySetI18nImage(this.nodeAll, "pnl_class_role_get_01.png");
			let t = mgrClassRoom.getRoleLevel(CLASS_UNLOCK_ROLE_ID);
			for (let e = 1; e <= 4; e++) {
				let a = this["spriteChip" + e.toString()];
				a && (a.visible = e > t), this.context && this.context.bReward && e == t && (a.visible = !0, cc.tween(a).repeat(3, cc.tween(a).to(.2, cc.PROP.ALPHA0).delay(.2).to(.2, cc.PROP.ALPHA1)).to(.2, cc.PROP.ALPHA0).call(() => {
					a.visible = !1
				}).start())
			}
			if (this.buttonSure.node.visible = t >= 4, this.labelTips.visible = t < 4, t < 4) {
				let e = db.get_class_room_level_db(t + 1);
				e && (this.labelTips.text = `${mgrI18n.getText("panelClassRoleGet.2")}${mgrI18n.getText(e.tlite)}`)
			} else mgrGame.isContractUnlock(CLASS_UNLOCK_CONTRACT_IDX) || mgrGame.contractUnlock(CLASS_UNLOCK_CONTRACT_IDX);
			console.log("this.labelTips.text", this.labelTips.text), this.buttonCircle.node.visible = !1, this.buttonBox.node.visible = !1, this.oldContractIdx = mgrGame.contractIndex, mgrGame.contractIndex != CLASS_UNLOCK_CONTRACT_IDX && (this.oldParts = Tools.deepCopy(mgrPart.partsWear))
		}
		dispose() {
			this.instOrBanner.dispose(), this.clearWawahe(), this.clearOld(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		clearWawahe() {
			this.wawahe && (this.wawahe.dispose(), this.wawahe = null)
		}
		clearOld() {
			this.oldAvatar && (this.oldAvatar.destroy(), this.oldAvatar = null), this.oldShexiangji && (this.oldShexiangji.dispose(), this.oldShexiangji = null), this.oldWawahe && (this.oldWawahe.dispose(), this.oldWawahe = null), this.oldGemstone && (_G.poolManager.put(this.oldGemstone), this.oldGemstone = null), this.oldRoom && (this.oldRoom.dispose(), this.oldRoom = null)
		}
		startLoad() {
			_G.sendMsg("CLASS_ROLE_START_ANIM");
			let t = new ResLoader;
			mgrPart.addPartResList(mgrPart.partsWear, t, !0), t.setLoadingCallback(this.onButtonAnimFinish.bind(this));
			let e = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			if (t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D), null != this.oldContractIdx && mgrGame.contractIndex != this.oldContractIdx) {
				let e = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
				t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D)
			}
			t.loadAll()
		}
		onButtonAnimFinish() {
			this.loadState++, 1 == this.loadState && (cc.tween(this.mask).to(.1, cc.PROP.ALPHA0).hide().start(), this.nodeAll.visible = !1, this.buttonClose.node.visible = !1, this.oldContractIdx == mgrGame.contractIndex ? (this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))) : (this.oldRoom = new RoomBath, this.oldRoom.load(this.onOldSceneLoaded.bind(this))))
		}
		onOldSceneLoaded() {
			this.addChild(this.oldRoom.scene), this.resNode.setChildIndex(this.oldRoom.scene, 0), this.oldRoom.changeToMain(), this.oldRoom.skybox.active = !0, this.oldRoom.camera.active = !1, this.oldRoom.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.oldRoom.mapNode.transform, "localScale", 3, 3, 3), this.oldAvatar = new RoleAvatar(this.oldParts), this.oldRoom.root.addChild(this.oldAvatar), this.oldWawahe = new GModel(db.MODEL_DB_ID.wawahe), this.oldWawahe.create(), this.oldWawahe.initAnimator(), this.oldWawahe.setParent(this.oldRoom.root), this.oldWawahe.hide(), this.oldShexiangji = new GModel(db.MODEL_DB_ID.shexiangji_jiechu), this.oldShexiangji.create(), this.oldShexiangji.setParent(this.oldRoom.root), this.oldShexiangji.callIfLoaded(() => {
				let t = this.oldShexiangji.findChild("camera");
				t.nearPlane = .01, t.fieldOfView = 60;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular
			});
			let t = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
			this.oldGemstone = _G.poolManager.get(GModel, t), this.oldGemstone.initAnimator(), this.oldGemstone.getAnimator().cullingMode = Laya.Animator.CULLINGMODE_ALWAYSANIMATE, this.oldGemstone.setParent(this.oldRoom.root);
			let e = new AnimatorFixedPlayer;
			e.addModelAnim(this.oldWawahe, MODEL_ANIM.WAWAHE_JIECHU), e.addModelAnim(this.oldShexiangji, MODEL_ANIM.SHEXIANGJI_JIECHU), e.addModelAnim(this.oldAvatar.baseBody, MODEL_ANIM.SHENTI_JIECHU), e.addModelAnim(this.oldAvatar.baseFace, MODEL_ANIM.FACE_JIECHU), e.addTimeCallback(110 / 30 / e.duration, () => {
				this.oldWawahe.show()
			}), e.addTimeCallback(.78, () => {
				this.onSwitchComplete(() => {
					this.clearOld(), e.dispose()
				})
			}), e.addTimeCallback(1, () => {}), e.play();
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.oldGemstone, MODEL_ANIM.GEMSTONE_JIECHU), a.addTimeCallback(80 / 30 / a.duration, () => {
				this.oldGemstone.hide()
			}), a.play()
		}
		onSwitchComplete(t) {
			UiHelper.playBlackFlash(1, () => {
				t(), this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))
			})
		}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToMain(), this.room.skybox.active = !0, this.room.camera.active = !1, this.room.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 3, 3, 3), this.wawahe = new GModel(db.MODEL_DB_ID.wawahe), this.wawahe.create(), this.wawahe.initAnimator(), this.wawahe.setParent(this.room.root), this.shexiangji = new GModel(db.MODEL_DB_ID.shexiangji_come), this.shexiangji.create(), this.shexiangji.setParent(this.room.root), this.shexiangji.callIfLoaded(() => {
				let t = this.shexiangji.findChild("camera");
				t.nearPlane = .01;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular, this.shexiangji_effect = this.shexiangji.findChild("e_wawahe_come"), this.shexiangji_effect && (this.shexiangji_effect.active = !1)
			});
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME01), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME01), t.addTimeCallback(1, () => {
				let t = new AnimatorFixedPlayer;
				t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME02), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME02), t.addTimeCallback(1, () => {
					this.buttonBox.node.visible = !0, mgrGuide.dispatchGuide(GUD_EVENT.START_CONTRACT), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX, this.buttonBox.node)
				}), t.play()
			}), t.play()
		}
		playRoleAnim() {
			this.avatar = new RoleAvatar, this.room.root.addChild(this.avatar);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.avatar.baseBody, MODEL_ANIM.SHENTI_COME), t.addModelAnim(this.avatar.baseFace, MODEL_ANIM.FACE_COME), t.addTimeCallback(1, this.onRoleAnimFinish.bind(this)), t.play()
		}
		playGemstone() {
			let t = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			this.gemstone = _G.poolManager.get(GModel, t), this.gemstone.initAnimator(), this.gemstone.setParent(this.room.root), this.gemstone.setPosition(0, .05, 0), this.gemstone.playAnims(0, [MODEL_ANIM.GEMSTONE_COME, MODEL_ANIM.GEMSTONE_ZHANSHI], !0), this.gemstone.initPaint(), this.gemstone.callIfLoaded(() => {
				let t = this.gemstone.getChildAt(0);
				cc.tween(this).to(1.3, cc.PROP.EMPTY, {
					onUpdate(e, a) {
						t.transform.scale = t.transform.scale
					}
				}).start()
			})
		}
		onWawaheAnimFinish() {
			this.clearWawahe()
		}
		onRoleAnimFinish() {
			this.avatar.playAnimation(MODEL_ANIM.SHENTI_IDLE), this.buttonCircle.node.visible = !0, mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE, this.buttonCircle.node)
		}
		playGotoRoom() {
			this.shexiangji && (this.shexiangji.findChild("e_wawahe_come").active = !1, _G.isGuiding = !0, mgrPanel.openPanel(UI_NAME.PanelMain, {
				type: ROOM_TYPE.NORMAL,
				parts: null,
				data: {
					room: this.room,
					avatar: this.avatar,
					shexiangji: this.shexiangji,
					gemstone: this.gemstone
				},
				bSwitch: !0
			}, !1, () => {
				this.room.scene.removeSelf(), this.close()
			}))
		}
		on_click_buttonSure() {
			mgrGame.contractIndex == CLASS_UNLOCK_CONTRACT_IDX ? mgrAlert.alertDialog(mgrI18n.getText("panelContract.11"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				GameStatistics.statisCommonEvent(2560, 1), this.startLoad()
			}, () => {}) : mgrAlert.alertDialog(mgrI18n.getText("panelContract.12"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				GameStatistics.statisCommonEvent(2560, 1), mgrGame.contractIndex = CLASS_UNLOCK_CONTRACT_IDX, this.startLoad()
			}, () => {})
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonCircle() {
			this.shexiangji ? (this.buttonCircle.interactable = !1, cc.tween(this.buttonCircle.node, !0).to(.2, cc.PROP.ALPHA0).call(this.playGotoRoom.bind(this)).start()) : console.log("没有摄像机")
		}
		on_click_buttonBox() {
			this.buttonBox.node.visible = !1, this.shexiangji_effect && (this.shexiangji_effect.active = !0);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME03), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME03), t.addTimeCallback(3 / t.duration, this.playGemstone.bind(this)), t.addTimeCallback(1, this.onWawaheAnimFinish.bind(this)), t.play(), this.playRoleAnim()
		}
	}
	class SpineNode extends Laya.Sprite {
		constructor(t) {
			super(), this.resourceType = Laya.Loader.BUFFER, this._isLoaded = !1, this._isLoading = !1, this._bAddCallback = !1, this.delayCalls = [], this.spineDb = db.get_spine_db(t), this.create()
		}
		get curAnimName() {
			return this._curAnimName
		}
		destroy(t) {
			super.destroy(t), this.clearDelayCalls()
		}
		reuse() {
			this.visible = !0
		}
		unuse() {
			this.clearAllListener(), this.stop(), this.visible = !1, this.removeSelf(), cc.clearTween(this), this.scale(1, 1, !0), this.alpha = 1, this.setTimeScale(this.spineDb.timeScale), this.clearDelayCalls()
		}
		dispose() {
			this.destroy()
		}
		create() {
			if (this._isLoaded) return;
			if (this._isLoading) return;
			let t = this.spineDb.skeletonData;
			if (!t) return void Logger.error("SpineNode.create: can't find resourceName.");
			this._isLoading = !0;
			let e = Spine.allTemplets[t];
			e ? e.isParseFail || (e.isParserComplete ? this.onResLoaded(!0) : e.on(Laya.Event.COMPLETE, this, t => {
				this.onResLoaded(t)
			})) : ((e = new Laya.Templet).on(Laya.Event.COMPLETE, this, t => {
				this.onResLoaded(t)
			}), e.loadAni(t), Spine.allTemplets[t] = e, Logger.debug("异步加载资源:", t))
		}
		onResLoaded(t) {
			this._isLoading = !1, t && (this.destroyed || (this._isLoaded = !0, this.onResourceLoaded(t), this.destroyed || this.processDelayCalls()))
		}
		onResourceLoaded(t) {
			let e = this.spineDb,
				a = Spine.allTemplets[e.skeletonData].buildArmature(e.aniMode);
			this.resNode = a, this.addChild(a), this._skinName = e.skin, a.scale(e.scaleX, e.scaleY, !0), a.showSkinByName(e.skin), a.playbackRate(e.timeScale), a.player.cacheFrameRate = 30, e.anim && this.play(e.anim, e.loop)
		}
		processDelayCalls() {
			let t = this.delayCalls,
				e = t.length;
			if (e > 0) {
				this.delayCalls = [];
				for (let a = 0; a < e; a++) {
					const e = t[a];
					e.method.apply(this, e.params)
				}
			}
		}
		clearDelayCalls() {
			this.delayCalls.length > 0 && (this.delayCalls.length = 0)
		}
		safeCall(t, ...e) {
			this.destroyed || (this._isLoaded ? t.apply(this, e) : this.pushDelayCall(t, e))
		}
		pushDelayCall(t, e) {
			this.delayCalls.push({
				method: t,
				params: e
			})
		}
		get callable() {
			return this._isLoaded && !this.destroyed
		}
		play(t, e = !0) {
			this.callable ? (this._curAnimName = t, this.resNode.play(t, e, !0)) : this.safeCall(this.play, t, e)
		}
		playDefaultAnim() {
			this.play(this.spineDb.anim, this.spineDb.loop)
		}
		stop() {
			this.callable ? (this.resNode.stop(), this._curAnimName = null, this._animPlayList && (this._animPlayList = null)) : this.safeCall(this.stop)
		}
		setTimeScale(t) {
			this.callable ? this.resNode.playbackRate(t) : this.safeCall(this.setTimeScale, t)
		}
		_onAnimStoped() {
			if (this._animPlayList && this._animPlayList.length > 0) {
				let t = this._animPlayList.shift();
				this.play(t, 0 == this._animPlayList.length)
			}
		}
		playAnims(...t) {
			if (this.callable) switch (t.length) {
				case 0:
					return;
				case 1:
					this.play(t[0], !0);
					break;
				default:
					this._bAddCallback || (this._bAddCallback = !0, this.resNode.on(Laya.Event.STOPPED, this, this._onAnimStoped)), this._animPlayList = t.slice(1), this.play(t[0], !1)
			} else this.safeCall(this.playAnims, ...t)
		}
		setCompleteListener(t, e, a = !0) {
			this.callable ? a ? this.resNode.once(Laya.Event.COMPLETE, t, e) : this.resNode.on(Laya.Event.COMPLETE, t, e) : this.safeCall(this.setCompleteListener, t, e, a)
		}
		setStopListener(t, e, a = !0) {
			this.callable ? a ? this.resNode.once(Laya.Event.STOPPED, t, e) : this.resNode.on(Laya.Event.STOPPED, t, e) : this.safeCall(this.setStopListener, t, e, a)
		}
		clearAllListener() {
			if (!this.callable) return this.safeCall(this.clearAllListener);
			this.resNode.offAll(Laya.Event.COMPLETE), this.resNode.offAll(Laya.Event.STOPPED)
		}
		setSkin(t) {
			if (this.callable) {
				if (t == this._skinName) return;
				this._skinName = t, this.resNode.showSkinByName(t)
			} else this.safeCall(this.setSkin, t)
		}
		getSkeleton() {
			return this.resNode
		}
	}
	class PanelClassRoom extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelClassRoom.json", this._exportNodeInfo = {
				cc_spriteBg: "Laya.Sprite",
				cc_buttonHeiBanCa1: "UIButton",
				cc_buttonHeiBanCa2: "UIButton",
				cc_nodeSeats: "Laya.Box",
				cc_nodeSeat3: "Laya.Box",
				cc_nodeSeat1: "Laya.Box",
				cc_nodeSeat2: "Laya.Box",
				cc_nodeLeftTop: "Laya.Box",
				cc_buttonGraduation: "UIButton",
				cc_buttonLiangCai: "UIButton",
				cc_buttonEgg: "UIButton",
				cc_buttonClose: "UIButton",
				cc_buttonOutside: "UIButton",
				cc_spriteZoulang: "Laya.Sprite",
				cc_nodeLayout: "UIHVLayout",
				cc_buttonStartStudent: "UIButton",
				cc_buttonStartTeacher: "UIButton",
				cc_buttonAdvLiangCai: "UIButton",
				cc_buttonFind: "UIButton",
				cc_findRoleIcon: "Laya.Sprite",
				cc_findAdv: "Laya.Sprite",
				cc_barMaskFind: "UIBarMask",
				cc_labelFindTime: "Laya.Label"
			}, this.students = {}, this.instOrBanner = new AdvInstOrBanner("enter_class_room", ""), this.enterMainWhenClose = !0, this.bStatistics = !1, this.bLeave = !1
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteBg, "pnl_class_room_11.png"), mgrI18n.trySetI18nImage(this.buttonGraduation.node, "pnl_class_room_03.png"), mgrI18n.trySetI18nImage(this.buttonLiangCai.node, "pnl_class_room_08.png"), mgrI18n.trySetI18nImage(this.buttonEgg.node, "pnl_class_room_09.png"), mgrI18n.trySetI18nImage(this.buttonStartStudent.node, "pnl_class_room_07.png"), mgrI18n.trySetI18nImage(this.buttonStartTeacher.node, "pnl_class_room_02.png"), mgrI18n.trySetI18nImage(this.buttonAdvLiangCai.node, "pnl_class_room_10.png"), mgrI18n.trySetI18nImage(this.spriteZoulang, "pnl_class_room_06.png"), mgrI18n.trySetI18nImage(this.buttonEgg.node, "pnl_class_room_09.png"), this.findAdv.visible = mgrAdv.checkActive("class_role_enter"), this.findAdv.visible && mgrAdv.statisVideoShow("class_role_enter"), this.buttonEgg.node.visible = mgrAdv.checkActive("open_class_egg"), this.refreshStudents(), Timer.callLoop(1, t => {
				this.destroyed ? t.stop() : this.refreshStudents()
			}, this), this.registerMsg({
				JUMP_PANEL: this.onMsgJumpPanel.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				STUDENT_HAPPY_TO_OUTSIDE: this.studentHappyLeave.bind(this),
				STUDENT_CRY_TO_OUTSIDE: this.studentCryToOutSide.bind(this),
				STUDENT_SEAT_DATA_REPLACE: this.onMsgStudentSeatDataReplace.bind(this),
				CLASS_ROLE_START_ANIM: this.onMsgClassRoleStartAnim.bind(this),
				[BASE_MSG.QUEST_STATE_CHANGE]: this.onMsgQuestStateChange.bind(this),
				JUMP_PANEL_BEFORE: this.onMsgJumpPanelBefore.bind(this)
			}), this.startProcMsg(), this.uiOut(), this.checkColorEgg(), this.classTip = new UITip(this.buttonEgg.node, function() {
				return mgrColorEggs.hasAwardEgg(EGGS_TYPE.CLASS) ? 0 : -1
			}), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCLASSROOM_BUTTONSTUDENT, this.buttonStartStudent.node), Laya.timer.frameOnce(1, this, () => {
				mgrGuide.dispatchGuide(GUD_EVENT.ENTER_CLASS_ROOM)
			}), GameStatistics.statisCommonEvent(2503), GameStatistics.statisOnStageStart(13100)
		}
		dispose() {
			this.spineHeibanca && this.spineHeibanca.dispose(), GameStatistics.statisOnStageEnd(13100), this.instOrBanner.dispose(), _G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.ENTER_CLASS_ROOM), this.stopProcMsg(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELCLASSROOM_BUTTONSTUDENT), this.classTip && this.classTip.dispose(), super.dispose(), this.enterMainWhenClose && mgrGame.tryEnterMain()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgJumpPanel() {
			this.close()
		}
		onMsgAdvShowSuc(t) {
			if ("class_role_enter" == t.advName) mgrClassRoom.setStudentFinishReady();
			else if ("class_role_leave" == t.advName && t.params && null != t.params.roleId) {
				let e = mgrClassRoom.getStandDatas();
				for (let a = 0; a < e.length; a++) {
					let i = e[a];
					if (i && t.params.roleId == i.roleId) {
						mgrClassRoom.setStandLeave(a);
						break
					}
				}
			} else "class_role_summon" == t.advName && t.params && null != t.params.roleId && mgrClassRoom.summonStudent(t.params.roleId)
		}
		onMsgClassRoleStartAnim() {
			this.enterMainWhenClose = !1, this.on_click_buttonClose()
		}
		onMsgQuestStateChange(t) {
			switch (console.log("QT_PANELCLASSROOM", t.questDb.type), t.questDb.type) {
				case 11:
					this.classTip.updateTip(), t.state == QUEST_STATE.UPDATABLE && this.checkColorEgg()
			}
		}
		onMsgJumpPanelBefore() {
			this.enterMainWhenClose = !1
		}
		uiOut() {
			this.nodeLeftTop.x = -150, this.buttonOutside.node.x = -430, this.nodeLayout.node.y = 200, this.uiIn()
		}
		uiIn() {
			UiHelper.playMoveIn(this.nodeLeftTop, 0, .3, .3), UiHelper.playMoveIn(this.buttonOutside.node, -230, .3, .3), cc.tween(this.nodeLayout.node).delay(.3).to(.3, {
				y: -93
			}).start()
		}
		refreshStudents() {
			let t, e = mgrClassRoom.getSeatDatas();
			for (let a = 0; a < 3; a++) {
				let i = e[a];
				if (i && i.startTime > Timer.time && (t = i), i && i.startTime <= Timer.time && !this.students[a]) {
					let t = this["nodeSeat" + (a + 1).toString()],
						e = new StudentItem({
							roleId: i.roleId
						});
					e.playAnim("idle"), e.setParent(t), 0 == a || 2 == a ? e.x = -300 : 1 == a && (e.x = 300, e.setFlip(-1)), e.moveToSeat(), this.students[a] = e
				} else(!i || i.startTime > Timer.time) && this.students[a] && (this.students[a].dispose(), this.students[a] = null)
			}
			if (t) {
				let e = db.get_class_room_role_db(t.roleId);
				e && e.iconUrl && this.findRoleIcon.loadImage(e.iconUrl);
				let a = t.startTime - Timer.time;
				this.labelFindTime.text = Tools.formatTime(a), this.barMaskFind.progress = a / STUDENT_READY_TIME, this.buttonFind.node.visible = !0
			} else this.buttonFind.node.visible = !1;
			let a = mgrClassRoom.getRoleState(CLASS_UNLOCK_ROLE_ID) != CLASS_ROLE_STATE.STUDY && mgrAdv.checkActive("class_role_summon");
			this.buttonAdvLiangCai.node.visible = a, a && !this.bStatistics && (this.bStatistics = !0, mgrAdv.statisVideoShow("class_role_summon")), this.nodeLayout.updateLayout(.2, !0)
		}
		studentHappyLeave(t) {
			let e = t.seatIdx;
			this.bLeave = !0, this.students[e].leaveHappy(e, () => {
				this.bLeave = !1, this.students[e] = null
			})
		}
		studentCryToOutSide() {
			this.close(!0)
		}
		onMsgStudentSeatDataReplace(t) {
			let e = t.seatIdx;
			null != e && (this.bLeave = !0, this.students[e].leaveAndReplace(e, () => {
				this.bLeave = !1, this.students[e] = null
			}))
		}
		checkColorEgg() {
			mgrColorEggs.isEnable(COLOR_EGGS_QUEST.CLEAR_TUYA) && (this.spineHeibanca || (this.spineHeibanca = new SpineNode(db.SPINE_DB_ID.cj_heibanca), this.spriteBg.addChild(this.spineHeibanca), this.spineHeibanca.pos(this.spriteBg.width / 2, this.spriteBg.height / 2), this.spineHeibanca.playDefaultAnim()))
		}
		on_click_buttonClose() {
			this.bLeave ? _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelClassRoom.2")) : this.close()
		}
		on_click_buttonFind() {
			this.findAdv.visible ? (mgrAdv.statisVideoClick("class_role_enter"), mgrAdv.dispatchAdv("class_role_enter", {}, !0)) : mgrAlert.alertDialog(mgrI18n.getText("panelClassRoom.3"))
		}
		on_click_buttonGraduation() {
			GameStatistics.statisCommonEvent(2530), mgrAlert.openPanelLoading(UI_NAME.PanelSchoolYearbook)
		}
		on_click_buttonOutside() {
			this.bLeave ? _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelClassRoom.2")) : (GameStatistics.statisCommonEvent(2534), mgrAlert.openPanelLoading(UI_NAME.PanelClassOutSide, {}, this.close.bind(this)))
		}
		on_click_buttonStartTeacher() {
			if (this.bLeave) return void _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelClassRoom.2"));
			let t = mgrClassRoom.getOperateSeatIdx();
			if (null != t) {
				let e = [UI_NAME.PanelClassTeacherMatchingStage, UI_NAME.PanelClassTeacherStage, UI_NAME.PanelClassTeacherMathStage],
					a = e[Mathf.random(e.length) - 1];
				mgrAlert.openPanelLoading(a, {
					seatIdx: t
				})
			} else mgrClassRoom.hasStudentReady() && this.findAdv.visible ? mgrAlert.alertAdvDialog(mgrI18n.getText("panelClassRoom.4"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				mgrAdv.statisVideoClick("class_role_enter"), mgrAdv.dispatchAdv("class_role_enter", {}, !0)
			}, mgrI18n.getText("panelClassRoom.5"), () => {}) : mgrAlert.alertDialog(mgrI18n.getText("panelClassRoom.6"))
		}
		on_click_buttonStartStudent() {
			if (this.bLeave) return void _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelClassRoom.2"));
			let t = mgrClassRoom.getOperateSeatIdx();
			if (null != t) {
				let e = UI_NAME.PanelClassStudentStage;
				if (!_G.isGuiding) {
					let t = [UI_NAME.PanelClassStudentMatchingStage, UI_NAME.PanelClassStudentStage, UI_NAME.PanelClassStudentMathStage];
					e = t[Mathf.random(t.length) - 1]
				}
				mgrAlert.openPanelLoading(e, {
					seatIdx: t
				})
			} else mgrClassRoom.hasStudentReady() && this.findAdv.visible ? mgrAlert.alertAdvDialog(mgrI18n.getText("panelClassRoom.4"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				mgrAdv.statisVideoClick("class_role_enter"), mgrAdv.dispatchAdv("class_role_enter", {}, !0)
			}, mgrI18n.getText("panelClassRoom.5"), () => {}) : mgrAlert.alertDialog(mgrI18n.getText("panelClassRoom.6"))
		}
		on_click_buttonLiangCai() {
			GameStatistics.statisCommonEvent(2559), PanelClassRoleGet.openPanel()
		}
		on_click_buttonEgg() {
			GameStatistics.statisCommonEvent(2561), mgrAlert.openPanelLoading(UI_NAME.PanelClassColorEggs)
		}
		on_click_buttonAdvLiangCai() {
			mgrAdv.statisVideoClick("class_role_summon"), mgrAdv.dispatchAdv("class_role_summon", {
				roleId: CLASS_UNLOCK_ROLE_ID
			}, !0)
		}
		on_click_buttonHeiBanCa1() {
			this.spineHeibanca && (this.spineHeibanca.play("idle2", !1), this.spineHeibanca.setStopListener(this, function() {
				mgrAlert.alertColorEggTip(EGGS_TYPE.CLASS)
			}, !0), this.buttonHeiBanCa1.interactable = !1, this.buttonHeiBanCa2.interactable = !1, BaseFacade.mGoal.commit(ACTION_ID.EGG_CLEAR_TUYA))
		}
		on_click_buttonHeiBanCa2() {
			this.on_click_buttonHeiBanCa1()
		}
	}
	class ClassStageMatchingItem extends ViewBase {
		constructor(t) {
			super(t), this.resourceName = "res/prefab/ClassStageMatchingItem.json", this._exportNodeInfo = {
				cc_nodeBox: "Laya.Box",
				cc_spriteLeft1: "Laya.Sprite",
				cc_spriteLeft2: "Laya.Sprite",
				cc_spriteLeft3: "Laya.Sprite",
				cc_spriteRight1: "Laya.Sprite",
				cc_spriteRight2: "Laya.Sprite",
				cc_spriteRight3: "Laya.Sprite"
			}, this.matchingResult = {}, this.leftDatas = {}, this.rightDatas = {}, this.matchingCount = 0, this.bTouched = !1, this.selectedLeftData = null, this.curLine = null, this.create()
		}
		onCreateComplete() {
			if (this.context && this.context.bTeacher) {
				let t, e, a = this.context.leftDatas,
					i = this.context.rightDatas,
					s = this.context.result;
				if (!a || !i || !s) return;
				this.leftDatas = a, this.rightDatas = i;
				for (let t = 1; t <= 3; t++) {
					let e = this["spriteLeft" + t.toString()],
						s = this["spriteRight" + t.toString()],
						n = a[t];
					if (n) {
						let a = db.get_class_matching_item_db(n.itemId);
						e.loadImage(a.icon), this.leftDatas[t].nodeSprite = e
					}
					let o = i[t];
					if (o) {
						let e = db.get_class_matching_item_db(o.itemId);
						s.loadImage(e.icon), this.rightDatas[t].nodeSprite = s
					}
				}
				for (let a in s) {
					let i = s[a];
					if (null != i) {
						for (let e in this.leftDatas) {
							let i = this.leftDatas[e];
							i && i.itemId == parseInt(a) && (t = i.nodeSprite)
						}
						for (let t in this.rightDatas) {
							let a = this.rightDatas[t];
							a && a.itemId == i && (e = a.nodeSprite)
						}
						t && e && (this.createLine(t.x + t.width / 2, t.y + t.height / 2), this.lineTo(e.x + e.width / 2, e.y + e.height / 2))
					}
				}
			} else {
				let t = this.context && this.context.matchingIds;
				if (!t) return;
				let e = [],
					a = [];
				for (let i = 0; i < t.length; i++) {
					let s = db.get_class_matching_db(t[i]);
					if (!s) return;
					e.push(s.itemId1), a.push(s.itemId2)
				}
				for (let t = 1; t <= 3; t++) {
					let i = this["spriteLeft" + t.toString()],
						s = this["spriteRight" + t.toString()],
						n = Mathf.random(e.length) - 1,
						o = e[n];
					e.splice(n, 1);
					let r = db.get_class_matching_item_db(o);
					i.loadImage(r.icon), i.getChildByName("on").visible = !1, this.leftDatas[t] = {
						nodeSprite: i,
						itemId: o,
						bUsed: !1
					};
					let l = Mathf.random(a.length) - 1,
						c = a[l];
					a.splice(l, 1);
					let h = db.get_class_matching_item_db(c);
					s.loadImage(h.icon), s.getChildByName("on").visible = !1, this.rightDatas[t] = {
						nodeSprite: s,
						itemId: c,
						bUsed: !1
					}
				}
				UiHelper.registerTouchEvent(this.nodeBox, this.onTouchStart.bind(this), this.onTouchMove.bind(this), this.onTouchEnd.bind(this), this.onTouchOut.bind(this))
			}
		}
		fadeIn() {
			this.callable ? (this.node.alpha = 0, cc.tween(this.node).to(.5, cc.PROP.ALPHA1).start()) : this.safeCall(this.fadeIn)
		}
		getMatchingResult() {
			if (this.callable) return this.matchingResult;
			this.safeCall(this.getMatchingResult)
		}
		getLeftDatas() {
			if (this.callable) return this.leftDatas;
			this.safeCall(this.getLeftDatas)
		}
		getRightDatas() {
			if (this.callable) return this.rightDatas;
			this.safeCall(this.getRightDatas)
		}
		createLine(t, e) {
			this.curLine = this.nodeBox.addChild(new Laya.Image("res/ui/pnl_class_stage/art_30.png")), this.curLine.sizeGrid = "0,15,0,15", this.curLine.pivot(15, 2), this.curLine.pos(t, e, !0), this.curLine.width = 0, this.curLine.zOrder = -100
		}
		lineTo(t, e, a = null) {
			Vec2.TEMP.setValue(t, e);
			let i = Mathf.distance(this.curLine, Vec2.TEMP) + 20;
			this.curLine.width = i, Vec2.TEMP.setValue(t - this.curLine.x, e - this.curLine.y);
			var s = GameUtility.convertDir2Rot(Vec2.TEMP) + 90;
			this.curLine.rotation = s, this.selectedLeftData && a && (this.matchingResult[this.selectedLeftData.itemId] = a.itemId, this.matchingCount++, this.matchingCount >= 3 && this.context && this.context.fOnFinish && this.context.fOnFinish())
		}
		onTouchStart() {
			this.bTouched = !0;
			let t = this.nodeBox.mouseX,
				e = this.nodeBox.mouseY;
			for (let a in this.leftDatas) {
				let i = this.leftDatas[a];
				if (i && !i.bUsed && i.nodeSprite.getBounds().contains(t, e)) {
					this.selectedLeftData = i, i.nodeSprite.getChildByName("on").visible = !0, this.createLine(i.nodeSprite.x + i.nodeSprite.width / 2, i.nodeSprite.y + i.nodeSprite.height / 2);
					break
				}
			}
		}
		onTouchMove() {
			if (!this.bTouched) return;
			if (!this.curLine) return;
			if (!this.selectedLeftData) return;
			let t = this.nodeBox.mouseX,
				e = this.nodeBox.mouseY;
			this.lineTo(t, e)
		}
		onTouchEnd() {
			if (!this.bTouched) return;
			let t = this.nodeBox.mouseX,
				e = this.nodeBox.mouseY;
			if (this.bTouched = !1, !this.curLine) return;
			if (!this.selectedLeftData) return;
			let a = !1;
			for (let i in this.rightDatas) {
				let s = this.rightDatas[i];
				if (s && !s.bUsed && s.nodeSprite.getBounds().contains(t, e)) {
					s.nodeSprite.getChildByName("on").visible = !0, this.lineTo(s.nodeSprite.x + s.nodeSprite.width / 2, s.nodeSprite.y + s.nodeSprite.height / 2, s), this.selectedLeftData.bUsed = !0, s.bUsed = !0, a = !0;
					break
				}
			}
			a || (this.selectedLeftData.nodeSprite.getChildByName("on").visible = !1, this.curLine.destroy()), this.curLine = null
		}
		onTouchOut() {
			this.onTouchEnd()
		}
	}
	class PanelClassStudenMatchingStageResult extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassStudenMatchingStageResult.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeSpine: "Laya.Box",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_nodeTest: "Laya.Box",
				cc_nodeSelected: "Laya.Image",
				cc_labelTitle: "Laya.Label",
				cc_labelTips1: "Laya.Label",
				cc_nodeCheck1: "Laya.Box",
				cc_buttonOk1: "UIButton",
				cc_buttonNo1: "UIButton",
				cc_nodeResult1: "Laya.Box",
				cc_labelTips2: "Laya.Label",
				cc_nodeCheck2: "Laya.Box",
				cc_buttonOk2: "UIButton",
				cc_buttonNo2: "UIButton",
				cc_nodeResult2: "Laya.Box",
				cc_labelTips3: "Laya.Label",
				cc_nodeCheck3: "Laya.Box",
				cc_buttonOk3: "UIButton",
				cc_buttonNo3: "UIButton",
				cc_nodeResult3: "Laya.Box",
				cc_labelScore: "Laya.Label",
				cc_buttonSure: "UIButton",
				cc_spriteGou: "Laya.Sprite",
				cc_spriteFlower: "Laya.Sprite",
				cc_labelSure: "Laya.Label"
			}, this.result = {}, this.matchingIds = [], this.leftDatas = {}, this.rightDatas = {}, this.curIndex = 0, this.scores = 0, this.checkArr = [], this.rating = 0
		}
		buildUi() {
			let t = this.context && this.context.result;
			if (!t) return;
			this.result = t;
			let e = this.context && this.context.matchingIds;
			if (!e) return;
			this.matchingIds = e;
			let a = this.context && this.context.leftDatas;
			if (!a) return;
			this.leftDatas = a;
			let i = this.context && this.context.rightDatas;
			if (!i) return;
			this.rightDatas = i, new ClassStageMatchingItem({
				leftDatas: a,
				rightDatas: i,
				bTeacher: !0,
				result: t
			}).setParent(this.nodeTest);
			let s = this.context && this.context.seatIdx,
				n = mgrClassRoom.getSeatDatas()[s];
			if (!n) return;
			let o = db.get_class_room_role_db(n.roleId);
			if (o) {
				this.labelTitle.text = `${mgrI18n.getText(o.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`;
				let t = _G.poolManager.get(Spine, o.spineId);
				this.spine = t, t.setParent(this.nodeSpine), t.setScale(-1, 1), t.play("idle", !0)
			}
			this.labelScore.font = GConfig.bmf_class, this.nodeSelected.alpha = 0, this.nodeCheck1.visible = !1, this.buttonOk1.interactable = !1, this.buttonNo1.interactable = !1, this.nodeCheck2.visible = !1, this.buttonOk2.interactable = !1, this.buttonNo2.interactable = !1, this.nodeCheck3.visible = !1, this.buttonOk3.interactable = !1, this.buttonNo3.interactable = !1, this.labelScore.visible = !1, this.buttonSure.node.visible = !1, this.startCheck(1)
		}
		dispose() {
			this.spine && _G.poolManager.put(this.spine), super.dispose()
		}
		startCheck(t) {
			if (t == this.curIndex) return;
			this.curIndex = t, cc.clearTween(this.nodeSelected), cc.tween(this.nodeSelected).repeatForever(cc.tween().to(.3, cc.PROP.ALPHA0).call(() => {
				this.nodeSelected.y = 160 * (t - 1) - 200
			}).to(.3, cc.PROP.ALPHA1)).start(), cc.tween(this, !0).delay(.3).call(() => {
				mgrAlert.playParticleEffect("132", this.nodeSelected.localToGlobal(new Laya.Point(this.nodeSelected.width / 2, this.nodeSelected.height / 2)), 1, .5, 3.5)
			}).start();
			let e = this["nodeCheck" + t.toString()];
			this["buttonOk" + t.toString()], this["buttonNo" + t.toString()];
			this["nodeResult" + t.toString()].visible = !1, e.visible = !0, e.alpha = 0, cc.tween(e).to(.3, cc.PROP.ALPHA1).call(() => {}).start(), Timer.callLater(1, () => {
				let e = null,
					a = null,
					i = this.rightDatas[t];
				for (let t in this.result)
					if (this.result[t] == i.itemId) {
						e = parseInt(t), a = this.result[t];
						break
					} let s = !1;
				for (let t = 0; t < this.matchingIds.length; t++) {
					let i = db.get_class_matching_db(this.matchingIds[t]);
					if (i && i.itemId1 == e) {
						s = i.itemId2 == a;
						break
					}
				}
				s ? (this.scores += 100 / this.matchingIds.length, this["on_click_buttonOk" + t.toString()]()) : this["on_click_buttonNo" + t.toString()]()
			}, this)
		}
		refreshUi() {
			let t = this.curIndex,
				e = this["buttonOk" + t.toString()],
				a = this["buttonNo" + t.toString()];
			e && (e.interactable = !1, e.node.getChildByName("on").visible = 1 == this.checkArr[t - 1], e.node.getChildByName("off").visible = 0 == this.checkArr[t - 1], cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start(), cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start()), a && (a.interactable = !1, a.node.getChildByName("on").visible = 0 == this.checkArr[t - 1], a.node.getChildByName("off").visible = 1 == this.checkArr[t - 1], cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start(), cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start());
			let i = this["nodeResult" + t.toString()];
			i.visible = !0;
			let s = i.getChildByName("correct"),
				n = i.getChildByName("wrong");
			1 == this.checkArr[t - 1] ? (n.visible = !1, s.visible = !0, s.scale(0, 0), cc.tween(s).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()) : (s.visible = !1, n.visible = !0, n.scale(0, 0), cc.tween(n).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()), Timer.callLater(.5, () => {
				this.destroyed || (this.checkArr.length < 3 ? this.startCheck(t + 1) : (cc.clearTween(this.nodeSelected), this.nodeSelected.visible = !1, this.buttonSure.node.visible = !0, this.buttonSure.node.scale(0, 0), cc.tween(this.buttonSure.node).to(.3, cc.PROP.SCALE1).start(), this.calcScore(), this.labelScore.visible = !0, this.labelScore.scale(0, 0), cc.tween(this.labelScore).to(.2, cc.PROP.SCALE1_2).delay(.2).to(.2, cc.PROP.SCALE1).start()))
			}, this)
		}
		calcScore() {
			let t = Math.ceil(this.scores);
			this.labelScore.text = t.toString();
			let e = mgrClassRoom.calcRating(t);
			this.rating = e, this.refreshLabel()
		}
		refreshLabel() {
			let t = mgrI18n.getText("panelAdvCostDialog.2"),
				e = "";
			switch (this.rating) {
				case 1:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.2"), e = "cry", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 2:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.3"), e = "idle", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 3:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.4"), e = "happy", this.spriteGou.visible = !1, this.spriteFlower.visible = !0
			}
			this.labelSure.text = t, this.spine && this.spine.play(e, !0)
		}
		on_click_buttonOk1() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo1() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk2() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo2() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk3() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo3() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonSure() {
			if (this.rating > 1)
				if (GameStatistics.statisOnStageEnd(13102, 1), GameStatistics.statisCommonEvent(2537), 2 == this.rating) {
					let t = BaseFacade.mDrop.makeDrop("30");
					mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
						seatIdx: this.context.seatIdx
					})
				} else {
					let t = this.context && this.context.seatIdx,
						e = mgrClassRoom.getSeatDatas()[t];
					mgrAlert.openPanelLoading(UI_NAME.PanelClassReward, {
						roleId: e.roleId,
						fOnRewardEnd: () => {
							e.roleId != CLASS_UNLOCK_ROLE_ID || mgrGame.isContractUnlock(CLASS_UNLOCK_CONTRACT_IDX) || PanelClassRoleGet.openPanel(null, {
								bReward: !0
							});
							let t = BaseFacade.mDrop.makeDrop("30");
							mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
								seatIdx: this.context.seatIdx
							})
						}
					})
				}
			else {
				GameStatistics.statisOnStageEnd(13102, 0, 0), GameStatistics.statisCommonEvent(2536), mgrAlert.openPanelLoading(UI_NAME.PanelClassOutSide, {
					crySeatIdx: this.context.seatIdx
				});
				let t = BaseFacade.mDrop.makeDrop("30");
				mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_CRY_TO_OUTSIDE", {
					seatIdx: this.context.seatIdx
				})
			}
			mgrSdk.stopRecordVideo(), this.close(!0)
		}
	}
	class ClassStageMathIconItem extends ViewBase {
		constructor(t) {
			super(t), this.resourceName = "res/prefab/ClassStageMathIconItem.json", this._exportNodeInfo = {
				cc_icon: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			let t = this.context && this.context.iconUrl;
			t && (console.log("加载图片", t), this.icon.loadImage(t))
		}
	}
	class ClassStageMathItem extends ViewBase {
		constructor(t) {
			super(t), this.resourceName = "res/prefab/ClassStageMathItem.json", this._exportNodeInfo = {
				cc_nodeBox: "Laya.Box",
				cc_nodeItemAll1: "UIHVLayout",
				cc_nodeItem11: "UIHVLayout",
				cc_nodeItem12: "UIHVLayout",
				cc_nodeItem13: "UIHVLayout",
				cc_imageOperate: "Laya.Image",
				cc_nodeItemAll2: "UIHVLayout",
				cc_nodeItem21: "UIHVLayout",
				cc_nodeItem22: "UIHVLayout",
				cc_nodeItem23: "UIHVLayout",
				cc_imageNoAnswer: "Laya.Image",
				cc_labelEndAnswer: "Laya.Label",
				cc_buttonAnswer1: "UIButton",
				cc_buttonAnswer2: "UIButton",
				cc_buttonAnswer3: "UIButton"
			}, this.answerArr = [], this.create()
		}
		onCreateComplete() {
			let t = this.context && this.context.stageId,
				e = db.get_class_math_stage_db(t);
			if (!e) return;
			let a = this.context && this.context.bTeacher,
				i = Tools.deepCopy(e.displayScores);
			for (let t = 1; t <= 3; t++) {
				let e = this["nodeItem1" + t.toString()].node,
					s = this["nodeItem2" + t.toString()].node;
				e.visible = !1, s.visible = !1;
				let n = this["buttonAnswer" + t.toString()],
					o = n.node.getChildByName("normal"),
					r = n.node.getChildByName("correct"),
					l = n.node.getChildByName("wrong"),
					c = n.node.getChildByName("answer");
				o.visible = !0, r.visible = !1, l.visible = !1, c.font = GConfig.bmf_math;
				let h = Mathf.random(i.length) - 1,
					d = i[h];
				c.text = d.toString(), this.answerArr.push(d), i.splice(h, 1), n.node.visible = !a
			}
			for (let t = 0; t < 8; t++) {
				if (t < e.itemCount1) {
					let a = this["nodeItem1" + (Math.floor(t / 3) + 1).toString()];
					a.node.visible = !0, new ClassStageMathIconItem({
						iconUrl: e.itemIcon1
					}).setParent(a), a.updateLayout()
				}
				if (t < e.itemCount2) {
					let a = this["nodeItem2" + (Math.floor(t / 3) + 1).toString()];
					a.node.visible = !0, new ClassStageMathIconItem({
						iconUrl: e.itemIcon2
					}).setParent(a), a.updateLayout()
				}
			}
			this.imageOperate.skin = e.operateIcon, this.labelEndAnswer.font = GConfig.bmf_math, this.labelEndAnswer.text = "", this.labelEndAnswer.visible = !1, this.imageNoAnswer.visible = !0, a && (this.imageNoAnswer.visible = !1, this.labelEndAnswer.visible = !0, this.context && null != this.context.answer ? this.labelEndAnswer.text = this.context.answer.toString() : this.labelEndAnswer.text = e.displayScores[Mathf.random(e.displayScores.length) - 1].toString())
		}
		selectAnswer(t) {
			for (let e = 0; e < 3; e++) {
				let a = this["buttonAnswer" + (e + 1).toString()],
					i = a.node.getChildByName("normal"),
					s = a.node.getChildByName("correct"),
					n = a.node.getChildByName("wrong");
				i.visible = !1, s.visible = !1, n.visible = !1;
				let o = this.context && this.context.stageId,
					r = db.get_class_math_stage_db(o),
					l = this.answerArr[t];
				if (e == t) {
					s.visible = l == r.correctScore, n.visible = l != r.correctScore;
					let t = a.node.getChildByName("answer"),
						e = new Laya.Label;
					this.nodeBox.addChild(e), e.anchorX = .5, e.anchorX = .5, e.font = GConfig.bmf_math, e.text = t.text;
					let i = new Laya.Point(t.x, t.y);
					UiHelper.local2local(a.node, this.nodeBox, i), e.pos(i.x, i.y), cc.tween(e).to(.3, {
						x: this.labelEndAnswer.x,
						y: this.labelEndAnswer.y
					}).call(() => {
						this.destroyed || e.removeSelf()
					}).start()
				} else i.visible = !0;
				cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
					a.node.visible = !1, 2 == e && (this.imageNoAnswer.visible = !1, this.labelEndAnswer.visible = !0, this.labelEndAnswer.text = l.toString(), this.labelEndAnswer.scale(1.2, 1.2), cc.tween(this.labelEndAnswer).to(.3, cc.PROP.SCALE1).call(() => {
						this.context && this.context.fOnSelectAnswer && this.context.fOnSelectAnswer(l)
					}).start())
				}).start()
			}
		}
		setVisible(t) {
			this.callable ? this.node.visible = t : this.safeCall(this.setVisible, t)
		}
		fadeIn() {
			this.callable ? (cc.clearTween(this.node), this.node.alpha = 0, this.imageNoAnswer.scale(0, 0), this.buttonAnswer1.node.scale(0, 0), this.buttonAnswer2.node.scale(0, 0), this.buttonAnswer3.node.scale(0, 0), cc.tween(this.node).to(.3, cc.PROP.ALPHA1).call(() => {
				cc.clearTween(this.imageNoAnswer), cc.tween(this.imageNoAnswer).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).call(() => {
					let t = 0;
					for (let e = 1; e <= 3; e++) {
						let a = this["buttonAnswer" + e.toString()];
						a && (cc.clearTween(a.node), cc.tween(a.node).delay(t).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), t += .2)
					}
				}).start()
			}).start()) : this.safeCall(this.fadeIn)
		}
		on_click_buttonAnswer1() {
			this.selectAnswer(0)
		}
		on_click_buttonAnswer2() {
			this.selectAnswer(1)
		}
		on_click_buttonAnswer3() {
			this.selectAnswer(2)
		}
	}
	var ShareMode;
	! function(t) {
		t[t.None = 0] = "None", t[t.Normal = 1] = "Normal", t[t.Video = 2] = "Video"
	}(ShareMode || (ShareMode = {}));
	class ShareButton extends MsgHandler {
		constructor(t, e, a, i) {
			super(), this.destroyed = !1;
			let s = db.cop.share_mode[e];
			if (!s || _G.isGuiding) return this.shareMode = ShareMode.None, void(t.visible = !1);
			let n = t.getChildByName("buttonShare"),
				o = n.getChildByName("shareBtnName"),
				r = t.getChildByName("buttonNoTks");
			switch (null != i && (i.node.visible = !1), s) {
				case ShareMode.Normal:
					if (!db.cop.isShareEnabled) return t.visible = !1, void(this.shareMode = ShareMode.None);
					o.text = "分 享", r.visible = !1, UiHelper.addClickEvent(n, this.onClickNormalShare.bind(this), null, .5, !0), this.statistics = 7513, e > 4 && (this.statistics = null);
					break;
				case ShareMode.Video:
					if (!db.cop.isSupportRecordShare) return t.visible = !1, void(this.shareMode = ShareMode.None);
					if (mgrSdk.stopRecordVideo(), mgrSdk._videoRecordTime < mgrSdk.min_record_time) return console.log("录屏时间不足，不显示分享按钮"), t.visible = !1, void(this.shareMode = ShareMode.None);
					o.text = "分享上热门", r.addComponent(UIButton), UiHelper.addClickEvent(r, a), UiHelper.addClickEvent(n, this.onClickVideoShare.bind(this), null, .5, !0), db.cop.share_close_delta_time && (r.visible = !1, cc.tween(r).delay(db.cop.share_close_delta_time).show().start()), this.statistics = 7518
			}
			s == ShareMode.Video && null != i && 0 != db.cop.b_video_share_full_screen && (i.node.visible = !0, UiHelper.addClickEvent(i.node, this.onClickVideoShare.bind(this), null, .5, !1)), cc.tween(n).repeatForever(cc.tween().to(.6, cc.PROP.SCALE1_2).to(.6, cc.PROP.SCALE1)).start(), t.visible = !0, this.shareMode = s, this.copIdx = e;
			let l = t.getChildByName("shareTip");
			mgrGame.shareAwardCount >= 3 && l.setVisible(!1), this.registerListeners({
				[BASE_MSG.SDK_SHARE_SUC]: this.onMsgShareSuc.bind(this),
				[BASE_MSG.SDK_SHARE_FAIL]: this.onMsgShareFail.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onMsgVideoShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_FAIL]: this.onMsgShareFail.bind(this)
			}), this.startProcMsg(), this.statisticsEvent(0)
		}
		dispose() {
			this.destroyed = !0, this.stopProcMsg()
		}
		get isViedoShare() {
			return this.shareMode == ShareMode.Video
		}
		onMsgShareSuc() {
			this.statisticsEvent(2)
		}
		onMsgShareFail() {
			this.statisticsEvent(3)
		}
		onMsgVideoShareSuc() {
			this.statisticsEvent(2)
		}
		statisticsEvent(t) {
			this.statistics && GameStatistics.statisCommonEvent(this.statistics + this.copIdx, t)
		}
		onClickNormalShare() {
			mgrSdk.share(), this.statisticsEvent(1)
		}
		onClickVideoShare() {
			let t = db.cop.share_tags[this.copIdx] || "";
			mgrSdk.shareVideo("", t), this.statisticsEvent(1)
		}
	}
	class PanelShare extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.DIALOG, this.resourceName = "res/ui/PanelShare.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonFullScreenShare: "UIButton",
				cc_buttonClose: "UIButton",
				cc_titleLabel: "Laya.Label",
				cc_descLabel: "Laya.Label",
				cc_buttonOk: "UIButton",
				cc_shareLayout: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_share", "banner_share")
		}
		buildUi() {
			switch (this.context.desc && (this.descLabel.text = this.context.desc), this.shareBtn = new ShareButton(this.shareLayout, this.context.shareIdx || 5, this.on_click_buttonOk.bind(this), this.buttonFullScreenShare), this.shareBtn.shareMode) {
				case ShareMode.None:
					this.shareLayout.visible = !1, this.buttonClose.node.visible = !0, this.context.descWithoutShare && (this.descLabel.text = this.context.descWithoutShare);
					break;
				case ShareMode.Normal:
					this.buttonOk.node.visible = !1;
					break;
				case ShareMode.Video:
					if (this.buttonClose.node.visible = !1, 0 != db.cop.b_video_share_finger) {
						let t = this.addEffect("135");
						t.setScale(1, 1, 1), t.followTarget(this.buttonOk.node, this.cameraEffect, this.buttonOk.node.width / 2), t.play()
					}
			}
			this.registerMsg({
				[BASE_MSG.SDK_SHARE_SUC]: this.onShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onShareSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.shareBtn && this.shareBtn.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onShareSuc() {
			this.context && this.context.shareSucCallback && this.context.shareSucCallback(), this.close()
		}
		on_click_buttonClose() {
			this.on_click_buttonOk()
		}
		on_click_buttonFullScreenShare() {}
		on_click_buttonOk() {
			this.context && this.context.closeCallback && this.context.closeCallback(), this.close()
		}
	}
	class PanelClassStudenMathStageResult extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassStudenMathStageResult.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeSpine: "Laya.Box",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_nodeTest1: "Laya.Box",
				cc_nodeTest2: "Laya.Box",
				cc_nodeTest3: "Laya.Box",
				cc_nodeSelected: "Laya.Image",
				cc_labelTitle: "Laya.Label",
				cc_labelTips1: "Laya.Label",
				cc_nodeCheck1: "Laya.Box",
				cc_buttonOk1: "UIButton",
				cc_buttonNo1: "UIButton",
				cc_nodeResult1: "Laya.Box",
				cc_labelTips2: "Laya.Label",
				cc_nodeCheck2: "Laya.Box",
				cc_buttonOk2: "UIButton",
				cc_buttonNo2: "UIButton",
				cc_nodeResult2: "Laya.Box",
				cc_labelTips3: "Laya.Label",
				cc_nodeCheck3: "Laya.Box",
				cc_buttonOk3: "UIButton",
				cc_buttonNo3: "UIButton",
				cc_nodeResult3: "Laya.Box",
				cc_labelScore: "Laya.Label",
				cc_buttonSure: "UIButton",
				cc_spriteGou: "Laya.Sprite",
				cc_spriteFlower: "Laya.Sprite",
				cc_labelSure: "Laya.Label"
			}, this.stageDatas = [], this.answers = [], this.curIndex = 0, this.scores = 0, this.checkArr = [], this.rating = 0
		}
		buildUi() {
			let t = this.context && this.context.answers;
			if (!t) return;
			this.answers = t;
			let e = this.context && this.context.stageIds;
			if (!e) return;
			for (let a = 0; a < e.length; a++) {
				let i = db.get_class_math_stage_db(e[a]);
				if (!i) return;
				this.stageDatas.push(i);
				let s = this["nodeTest" + (a + 1).toString()];
				if (s) {
					let i = new ClassStageMathItem({
						stageId: e[a],
						bTeacher: !0,
						answer: t[a]
					});
					i.setParent(s), i.setVisible(!0)
				}
			}
			let a = this.context && this.context.seatIdx,
				i = mgrClassRoom.getSeatDatas()[a];
			if (!i) return;
			let s = db.get_class_room_role_db(i.roleId);
			if (s) {
				this.labelTitle.text = `${mgrI18n.getText(s.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`;
				let t = _G.poolManager.get(Spine, s.spineId);
				this.spine = t, t.setParent(this.nodeSpine), t.setScale(-1, 1), t.play("idle", !0)
			}
			this.labelScore.font = GConfig.bmf_class, this.nodeSelected.alpha = 0, this.nodeCheck1.visible = !1, this.buttonOk1.interactable = !1, this.buttonNo1.interactable = !1, this.nodeCheck2.visible = !1, this.buttonOk2.interactable = !1, this.buttonNo2.interactable = !1, this.nodeCheck3.visible = !1, this.buttonOk3.interactable = !1, this.buttonNo3.interactable = !1, this.labelScore.visible = !1, this.buttonSure.node.visible = !1, this.startCheck(1)
		}
		dispose() {
			this.spine && _G.poolManager.put(this.spine), super.dispose()
		}
		startCheck(t) {
			if (t == this.curIndex) return;
			this.curIndex = t, cc.clearTween(this.nodeSelected), cc.tween(this.nodeSelected).repeatForever(cc.tween().to(.3, cc.PROP.ALPHA0).call(() => {
				this.nodeSelected.y = 160 * (t - 1) - 200
			}).to(.3, cc.PROP.ALPHA1)).start(), cc.tween(this, !0).delay(.3).call(() => {
				mgrAlert.playParticleEffect("132", this.nodeSelected.localToGlobal(new Laya.Point(this.nodeSelected.width / 2, this.nodeSelected.height / 2)), 1, .5, 3.5)
			}).start();
			let e = this["nodeCheck" + t.toString()];
			this["buttonOk" + t.toString()], this["buttonNo" + t.toString()];
			this["nodeResult" + t.toString()].visible = !1, e.visible = !0, e.alpha = 0, cc.tween(e).to(.3, cc.PROP.ALPHA1).call(() => {}).start(), Timer.callLater(1, () => {
				let e = this.stageDatas[t - 1],
					a = this.answers[t - 1];
				e.correctScore == a ? (this.scores += 100 / this.stageDatas.length, this["on_click_buttonOk" + t.toString()]()) : this["on_click_buttonNo" + t.toString()]()
			}, this)
		}
		refreshUi() {
			let t = this.curIndex,
				e = this["buttonOk" + t.toString()],
				a = this["buttonNo" + t.toString()];
			e && (e.interactable = !1, e.node.getChildByName("on").visible = 1 == this.checkArr[t - 1], e.node.getChildByName("off").visible = 0 == this.checkArr[t - 1], cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start(), cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start()), a && (a.interactable = !1, a.node.getChildByName("on").visible = 0 == this.checkArr[t - 1], a.node.getChildByName("off").visible = 1 == this.checkArr[t - 1], cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start(), cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start());
			let i = this["nodeResult" + t.toString()];
			i.visible = !0;
			let s = i.getChildByName("correct"),
				n = i.getChildByName("wrong");
			1 == this.checkArr[t - 1] ? (n.visible = !1, s.visible = !0, s.scale(0, 0), cc.tween(s).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()) : (s.visible = !1, n.visible = !0, n.scale(0, 0), cc.tween(n).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()), Timer.callLater(.5, () => {
				this.destroyed || (this.checkArr.length < 3 ? this.startCheck(t + 1) : (cc.clearTween(this.nodeSelected), this.nodeSelected.visible = !1, this.buttonSure.node.visible = !0, this.buttonSure.node.scale(0, 0), cc.tween(this.buttonSure.node).to(.3, cc.PROP.SCALE1).start(), this.calcScore(), this.labelScore.visible = !0, this.labelScore.scale(0, 0), cc.tween(this.labelScore).to(.2, cc.PROP.SCALE1_2).delay(.2).to(.2, cc.PROP.SCALE1).start()))
			}, this)
		}
		calcScore() {
			let t = Math.ceil(this.scores);
			this.labelScore.text = t.toString();
			let e = mgrClassRoom.calcRating(t);
			this.rating = e, this.refreshLabel()
		}
		refreshLabel() {
			let t = mgrI18n.getText("panelAdvCostDialog.2"),
				e = "";
			switch (this.rating) {
				case 1:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.2"), e = "cry", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 2:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.3"), e = "idle", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 3:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.4"), e = "happy", this.spriteGou.visible = !1, this.spriteFlower.visible = !0
			}
			this.labelSure.text = t, this.spine && this.spine.play(e, !0)
		}
		on_click_buttonOk1() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo1() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk2() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo2() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk3() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo3() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonSure() {
			if (this.rating > 1)
				if (GameStatistics.statisOnStageEnd(13102, 1), GameStatistics.statisCommonEvent(2537), 2 == this.rating) {
					let t = BaseFacade.mDrop.makeDrop("30");
					mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
						seatIdx: this.context.seatIdx
					})
				} else {
					let t = this.context && this.context.seatIdx,
						e = mgrClassRoom.getSeatDatas()[t];
					mgrAlert.openPanelLoading(UI_NAME.PanelClassReward, {
						roleId: e.roleId,
						fOnRewardEnd: () => {
							e.roleId != CLASS_UNLOCK_ROLE_ID || mgrGame.isContractUnlock(CLASS_UNLOCK_CONTRACT_IDX) || PanelClassRoleGet.openPanel(null, {
								bReward: !0
							});
							let t = BaseFacade.mDrop.makeDrop("30");
							mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
								seatIdx: this.context.seatIdx
							})
						}
					})
				}
			else {
				GameStatistics.statisOnStageEnd(13102, 0, 0), GameStatistics.statisCommonEvent(2536), mgrAlert.openPanelLoading(UI_NAME.PanelClassOutSide, {
					crySeatIdx: this.context.seatIdx
				});
				let t = BaseFacade.mDrop.makeDrop("30");
				mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_CRY_TO_OUTSIDE", {
					seatIdx: this.context.seatIdx
				})
			}
			mgrSdk.stopRecordVideo(), mgrSdk.isVideoShareable && mgrAlert.openPanelLoading(PanelShare, {
				shareIdx: 11,
				desc: "快让朋友们看看你的课堂趣事吧！",
				descWithoutShare: "彩妆课堂真有趣！"
			}), this.close(!0)
		}
	}
	class PanelClassStudenStageResult extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassStudenStageResult.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeSpine: "Laya.Box",
				cc_nodePhotos: "Laya.Box",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_spritePhoto1: "Laya.Sprite",
				cc_spritePhoto2: "Laya.Sprite",
				cc_spritePhoto3: "Laya.Sprite",
				cc_nodeSelected: "Laya.Image",
				cc_labelTitle: "Laya.Label",
				cc_labelTips1: "Laya.Label",
				cc_nodeCheck1: "Laya.Box",
				cc_buttonOk1: "UIButton",
				cc_buttonNo1: "UIButton",
				cc_nodeResult1: "Laya.Box",
				cc_labelTips2: "Laya.Label",
				cc_nodeCheck2: "Laya.Box",
				cc_buttonOk2: "UIButton",
				cc_buttonNo2: "UIButton",
				cc_nodeResult2: "Laya.Box",
				cc_labelTips3: "Laya.Label",
				cc_nodeCheck3: "Laya.Box",
				cc_buttonOk3: "UIButton",
				cc_buttonNo3: "UIButton",
				cc_nodeResult3: "Laya.Box",
				cc_labelScore: "Laya.Label",
				cc_buttonSure: "UIButton",
				cc_spriteGou: "Laya.Sprite",
				cc_spriteFlower: "Laya.Sprite",
				cc_labelSure: "Laya.Label"
			}, this.ORDER_TO_PHOTO_INDEX = {
				1: 3,
				2: 2,
				3: 1
			}, this.curIndex = 0, this.scores = 0, this.checkArr = [], this.rating = 0
		}
		buildUi() {
			let t = this.context && this.context.stageId || 0,
				e = db.get_student_stage_db(t);
			if (!e) return;
			this.stageData = e;
			let a = this.context && this.context.seatIdx,
				i = mgrClassRoom.getSeatDatas()[a];
			if (!i) return;
			let s = db.get_class_room_role_db(i.roleId);
			if (s) {
				this.labelTitle.text = `${mgrI18n.getText(s.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`;
				let t = _G.poolManager.get(Spine, s.spineId);
				this.spine = t, t.setParent(this.nodeSpine), t.setScale(-1, 1), t.play("idle", !0)
			}
			let n = this.context.photoPos;
			if (n) {
				this.labelScore.font = GConfig.bmf_class, this.spritePhoto1.loadImage(e.pictureUrl1), this.spritePhoto1.pos(n[0][0], n[0][1]), this.spritePhoto2.loadImage(e.pictureUrl2), this.spritePhoto2.pos(n[1][0], n[1][1]), this.spritePhoto3.loadImage(e.pictureUrl3), this.spritePhoto3.pos(n[2][0], n[2][1]);
				for (let t = 1; t <= 3; t++) {
					let e = this["spritePhoto" + t.toString()],
						a = new Laya.Sprite,
						i = new Laya.Point;
					UiHelper.local2local(this.spriteMaskBg, e, i), a.graphics.drawImage(this.spriteMaskBg.texture, i.x, i.y, 492, 620), e.mask = a
				}
				this.nodeSelected.alpha = 0, this.nodeCheck1.visible = !1, this.buttonOk1.interactable = !1, this.buttonNo1.interactable = !1, this.nodeCheck2.visible = !1, this.buttonOk2.interactable = !1, this.buttonNo2.interactable = !1, this.nodeCheck3.visible = !1, this.buttonOk3.interactable = !1, this.buttonNo3.interactable = !1, this.labelScore.visible = !1, this.buttonSure.node.visible = !1, this.startCheck(1)
			}
		}
		dispose() {
			this.spine && _G.poolManager.put(this.spine), super.dispose()
		}
		startCheck(t) {
			if (t == this.curIndex) return;
			this.curIndex = t, cc.clearTween(this.nodeSelected), cc.tween(this.nodeSelected).repeatForever(cc.tween().to(.3, cc.PROP.ALPHA0).call(() => {
				this.nodeSelected.y = 200 * (t - 1) - 200
			}).to(.3, cc.PROP.ALPHA1)).start(), cc.tween(this, !0).delay(.3).call(() => {
				mgrAlert.playParticleEffect("132", this.nodeSelected.localToGlobal(new Laya.Point(this.nodeSelected.width / 2, this.nodeSelected.height / 2)), 1, .5, 3.5)
			}).start();
			let e = this["nodeCheck" + t.toString()];
			this["buttonOk" + t.toString()], this["buttonNo" + t.toString()];
			this["nodeResult" + t.toString()].visible = !1, e.visible = !0, e.alpha = 0, cc.tween(e).to(.3, cc.PROP.ALPHA1).call(() => {}).start(), Timer.callLater(1, () => {
				let e = new Laya.Point,
					a = this["spritePhoto" + this.ORDER_TO_PHOTO_INDEX[t].toString()],
					i = this.stageData["picturePos" + this.ORDER_TO_PHOTO_INDEX[t].toString()];
				e.x = i[0], e.y = i[1];
				let s = Mathf.distance(a, e),
					n = 0;
				s <= 100 && (n = Math.ceil(100 * (1 - s / 100))), this.scores += n, mgrClassRoom.calcRating(n) > 1 ? this["on_click_buttonOk" + t.toString()]() : this["on_click_buttonNo" + t.toString()]()
			}, this)
		}
		refreshUi() {
			let t = this.curIndex,
				e = this["buttonOk" + t.toString()],
				a = this["buttonNo" + t.toString()];
			e && (e.interactable = !1, e.node.getChildByName("on").visible = 1 == this.checkArr[t - 1], e.node.getChildByName("off").visible = 0 == this.checkArr[t - 1], cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start(), cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start()), a && (a.interactable = !1, a.node.getChildByName("on").visible = 0 == this.checkArr[t - 1], a.node.getChildByName("off").visible = 1 == this.checkArr[t - 1], cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start(), cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start());
			let i = this["nodeResult" + t.toString()];
			i.visible = !0;
			let s = i.getChildByName("correct"),
				n = i.getChildByName("wrong");
			1 == this.checkArr[t - 1] ? (n.visible = !1, s.visible = !0, s.scale(0, 0), cc.tween(s).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()) : (s.visible = !1, n.visible = !0, n.scale(0, 0), cc.tween(n).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()), Timer.callLater(.5, () => {
				this.destroyed || (this.checkArr.length < 3 ? this.startCheck(t + 1) : (cc.clearTween(this.nodeSelected), this.nodeSelected.visible = !1, this.buttonSure.node.visible = !0, this.buttonSure.node.scale(0, 0), cc.tween(this.buttonSure.node).to(.3, cc.PROP.SCALE1).start(), this.calcScore(), this.labelScore.visible = !0, this.labelScore.scale(0, 0), cc.tween(this.labelScore).to(.2, cc.PROP.SCALE1_2).delay(.2).to(.2, cc.PROP.SCALE1).start()))
			}, this)
		}
		calcScore() {
			let t = Math.ceil(this.scores / 3);
			this.labelScore.text = t.toString();
			let e = mgrClassRoom.calcRating(t);
			this.rating = e, this.refreshLabel()
		}
		refreshLabel() {
			let t = mgrI18n.getText("panelAdvCostDialog.2"),
				e = "";
			switch (this.rating) {
				case 1:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.2"), e = "cry", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 2:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.3"), e = "idle", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 3:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.4"), e = "happy", this.spriteGou.visible = !1, this.spriteFlower.visible = !0
			}
			this.labelSure.text = t, this.spine && this.spine.play(e, !0)
		}
		on_click_buttonOk1() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo1() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk2() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo2() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk3() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo3() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonSure() {
			if (this.rating > 1)
				if (GameStatistics.statisOnStageEnd(13102, 1), GameStatistics.statisCommonEvent(2537), 2 == this.rating) {
					let t = BaseFacade.mDrop.makeDrop("30");
					mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
						seatIdx: this.context.seatIdx
					})
				} else {
					let t = this.context && this.context.seatIdx,
						e = mgrClassRoom.getSeatDatas()[t];
					mgrAlert.openPanelLoading(UI_NAME.PanelClassReward, {
						roleId: e.roleId,
						fOnRewardEnd: () => {
							e.roleId != CLASS_UNLOCK_ROLE_ID || mgrGame.isContractUnlock(CLASS_UNLOCK_CONTRACT_IDX) || PanelClassRoleGet.openPanel(null, {
								bReward: !0
							});
							let t = BaseFacade.mDrop.makeDrop("30");
							mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
								seatIdx: this.context.seatIdx
							})
						}
					})
				}
			else {
				GameStatistics.statisOnStageEnd(13102, 0, 0), GameStatistics.statisCommonEvent(2536), mgrAlert.openPanelLoading(UI_NAME.PanelClassOutSide, {
					crySeatIdx: this.context.seatIdx
				});
				let t = BaseFacade.mDrop.makeDrop("30");
				mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_CRY_TO_OUTSIDE", {
					seatIdx: this.context.seatIdx
				})
			}
			mgrSdk.stopRecordVideo(), mgrSdk.isVideoShareable && mgrAlert.openPanelLoading(UI_NAME.PanelShare, {
				shareIdx: 11,
				desc: "快让朋友们看看你的课堂趣事吧！",
				descWithoutShare: "彩妆课堂真有趣！"
			}), this.close(!0)
		}
	}
	class PanelClassStudentMatchingStage extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassStudentMatchingStage.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_spriteRoleIcon: "Laya.Sprite",
				cc_labelTitle: "Laya.Label",
				cc_labelTip: "Laya.Label",
				cc_nodeTests: "Laya.Box",
				cc_buttonFinished: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.usedMatchingIds = [], this.matchingItem = null
		}
		buildUi() {
			let t = [],
				e = db.get_class_matching_db_map(),
				a = Mathf.random(1, 2);
			this.labelTip.text = 1 == a ? mgrI18n.getText("panelClassStudentMatchingStage.1") : mgrI18n.getText("panelClassStudentMatchingStage.2");
			for (let i in e) {
				let s = e[i];
				s && s.gid == a && t.push(s.id)
			}
			for (let e = 0; e < 3; e++) {
				let e = Mathf.random(t.length) - 1,
					a = t[e];
				this.usedMatchingIds.push(a), t.splice(e, 1)
			}
			let i = new ClassStageMatchingItem({
				matchingIds: this.usedMatchingIds,
				fOnFinish: this.onFinish.bind(this)
			});
			i.setParent(this.nodeTests), i.fadeIn(), this.matchingItem = i, this.buttonFinished.node.visible = !1, console.log("连线题关卡", this.usedMatchingIds);
			let s = this.context && this.context.seatIdx,
				n = mgrClassRoom.getSeatDatas()[s];
			if (!n) return;
			let o = db.get_class_room_role_db(n.roleId);
			o && (this.spriteRoleIcon.loadImage(o.iconUrl), this.labelTitle.text = `${mgrI18n.getText(o.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`), mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13102)
		}
		onFinish() {
			this.buttonFinished.node.visible = !0, this.buttonFinished.interactable = !1, this.buttonFinished.node.scale(0, 0), cc.tween(this.buttonFinished.node).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).call(() => {
				this.buttonFinished.interactable = !0
			}).start()
		}
		on_click_buttonFinished() {
			if (this.matchingItem) {
				let t = this.matchingItem.getMatchingResult(),
					e = this.matchingItem.getLeftDatas(),
					a = this.matchingItem.getRightDatas();
				mgrAlert.openPanelLoading(UI_NAME.PanelClassStudenMatchingStageResult, {
					matchingIds: this.usedMatchingIds,
					result: t,
					leftDatas: e,
					rightDatas: a,
					seatIdx: this.context.seatIdx
				}), this.close()
			}
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisOnStageEnd(13102, 0, 1), this.close()
		}
	}
	class PanelClassStudentMathStage extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassStudentMathStage.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_spriteRoleIcon: "Laya.Sprite",
				cc_labelTitle: "Laya.Label",
				cc_nodeTest1: "Laya.Box",
				cc_nodeTest2: "Laya.Box",
				cc_nodeTest3: "Laya.Box",
				cc_buttonFinished: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.usedStageIds = [], this.stageItems = [], this.selectedAnswers = []
		}
		buildUi() {
			let t = [],
				e = db.get_class_math_stage_db_map();
			for (let a in e) {
				let i = e[a];
				i && t.push(i.id)
			}
			for (let e = 0; e < 3; e++) {
				let a = Mathf.random(t.length) - 1,
					i = t[a];
				this.usedStageIds.push(i), t.splice(a, 1);
				let s = this["nodeTest" + (e + 1).toString()],
					n = new ClassStageMathItem({
						stageId: i,
						fOnSelectAnswer: this.onSelectAnswer.bind(this)
					});
				n.setParent(s), n.setVisible(!1), this.stageItems.push(n)
			}
			console.log("数学题关卡", this.usedStageIds, this.stageItems), this.refreshUi();
			let a = this.context && this.context.seatIdx,
				i = mgrClassRoom.getSeatDatas()[a];
			if (!i) return;
			let s = db.get_class_room_role_db(i.roleId);
			s && (this.spriteRoleIcon.loadImage(s.iconUrl), this.labelTitle.text = `${mgrI18n.getText(s.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`), mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13102)
		}
		refreshUi() {
			let t = this.selectedAnswers.length,
				e = this.stageItems[t];
			e ? (e.setVisible(!0), e.fadeIn(), this.buttonFinished.node.visible = !1) : this.buttonFinished.node.visible = !0
		}
		onSelectAnswer(t) {
			this.selectedAnswers.push(t), this.refreshUi()
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisOnStageEnd(13102, 0, 1), this.close()
		}
		on_click_buttonFinished() {
			mgrAlert.openPanelLoading(UI_NAME.PanelClassStudenMathStageResult, {
				stageIds: this.usedStageIds,
				answers: this.selectedAnswers,
				seatIdx: this.context.seatIdx
			}), this.close()
		}
	}
	class PanelClassTeacherMatchingStage extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassTeacherMatchingStage.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeSpine: "Laya.Box",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_nodeTest: "Laya.Box",
				cc_nodeSelected: "Laya.Image",
				cc_labelTitle: "Laya.Label",
				cc_nodeCheck1: "Laya.Box",
				cc_labelTips1: "Laya.Label",
				cc_buttonOk1: "UIButton",
				cc_buttonNo1: "UIButton",
				cc_nodeResult1: "Laya.Box",
				cc_nodeCheck2: "Laya.Box",
				cc_labelTips2: "Laya.Label",
				cc_buttonOk2: "UIButton",
				cc_buttonNo2: "UIButton",
				cc_nodeResult2: "Laya.Box",
				cc_nodeCheck3: "Laya.Box",
				cc_labelTips3: "Laya.Label",
				cc_buttonOk3: "UIButton",
				cc_buttonNo3: "UIButton",
				cc_nodeResult3: "Laya.Box",
				cc_labelScore: "Laya.Label",
				cc_labelScoreChange: "Laya.Label",
				cc_nodeLayoutBtns: "UIHVLayout",
				cc_buttonSure: "UIButton",
				cc_spriteGou: "Laya.Sprite",
				cc_spriteFlower: "Laya.Sprite",
				cc_labelSure: "Laya.Label",
				cc_buttonChange: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_teacher_stage", "banner_teacher_stage"), this.result = {}, this.usedMatchingIds = [], this.leftDatas = {}, this.rightDatas = {}, this.curIndex = 0, this.checkArr = [], this.rating = 0
		}
		buildUi() {
			let t = [],
				e = db.get_class_matching_db_map(),
				a = Mathf.random(1, 2);
			for (let i in e) {
				let s = e[i];
				s && s.gid == a && t.push(s.id)
			}
			for (let e = 0; e < 3; e++) {
				let e = Mathf.random(t.length) - 1,
					a = t[e];
				this.usedMatchingIds.push(a), t.splice(e, 1)
			}
			let i = [],
				s = [];
			for (let t = 0; t < this.usedMatchingIds.length; t++) {
				let e = db.get_class_matching_db(this.usedMatchingIds[t]);
				if (!e) return;
				i.push(e.itemId1), s.push(e.itemId2)
			}
			for (let t = 1; t <= 3; t++) {
				let e = Mathf.random(i.length) - 1,
					a = i[e];
				i.splice(e, 1), this.leftDatas[t] = {
					nodeSprite: null,
					itemId: a,
					bUsed: !1
				};
				let n = Mathf.random(s.length) - 1,
					o = s[n];
				s.splice(n, 1), this.rightDatas[t] = {
					nodeSprite: null,
					itemId: o,
					bUsed: !1
				}
			}
			let n = [1, 2, 3];
			for (let t = 1; t <= 3; t++) {
				let e = this.leftDatas[t],
					a = Mathf.random(n.length) - 1,
					i = n[a];
				n.splice(a, 1);
				let s = this.rightDatas[i];
				e && s && (this.result[e.itemId] = s.itemId)
			}
			new ClassStageMatchingItem({
				leftDatas: this.leftDatas,
				rightDatas: this.rightDatas,
				bTeacher: !0,
				result: this.result
			}).setParent(this.nodeTest);
			let o = this.context && this.context.seatIdx,
				r = mgrClassRoom.getSeatDatas()[o];
			if (!r) return;
			let l = db.get_class_room_role_db(r.roleId);
			if (l) {
				this.labelTitle.text = `${mgrI18n.getText(l.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`;
				let t = _G.poolManager.get(Spine, l.spineId);
				this.spine = t, t.setParent(this.nodeSpine), t.setScale(-1, 1), t.play("idle", !0)
			}
			this.labelScore.font = GConfig.bmf_class, this.labelScoreChange.font = GConfig.bmf_class, this.nodeSelected.alpha = 0, this.nodeCheck1.visible = !1, this.buttonOk1.interactable = !1, this.buttonNo1.interactable = !1, this.nodeCheck2.visible = !1, this.buttonOk2.interactable = !1, this.buttonNo2.interactable = !1, this.nodeCheck3.visible = !1, this.buttonOk3.interactable = !1, this.buttonNo3.interactable = !1, this.labelScore.visible = !1, this.buttonSure.node.visible = !1, this.buttonChange.node.visible = !1, this.labelScoreChange.visible = !1, this.startCheck(1), mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13101)
		}
		dispose() {
			this.instOrBanner.dispose(), this.spine && _G.poolManager.put(this.spine), _G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.PANEL_TEACHER_STAGE_IDLE), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		startCheck(t) {
			if (t == this.curIndex) return;
			this.curIndex = t, cc.clearTween(this.nodeSelected), cc.tween(this.nodeSelected).repeatForever(cc.tween().to(.3, cc.PROP.ALPHA0).call(() => {
				this.nodeSelected.y = 160 * (t - 1) - 200
			}).to(.3, cc.PROP.ALPHA1)).start(), cc.tween(this, !0).delay(.3).call(() => {
				mgrAlert.playParticleEffect("132", this.nodeSelected.localToGlobal(new Laya.Point(this.nodeSelected.width / 2, this.nodeSelected.height / 2)), 1, .5, 3.5)
			}).start();
			let e = this["nodeCheck" + t.toString()],
				a = this["buttonOk" + t.toString()],
				i = this["buttonNo" + t.toString()];
			this["nodeResult" + t.toString()].visible = !1, e.visible = !0, e.alpha = 0, cc.tween(e).to(.3, cc.PROP.ALPHA1).call(() => {
				a.interactable = !0, i.interactable = !0, mgrGuide.dispatchGuide(GUD_EVENT.PANEL_TEACHER_STAGE_IDLE)
			}).start()
		}
		refreshUi() {
			mgrGuide.sendMsgKey("PANEL_TEACHER_STAGE_CLICK");
			let t = this.curIndex;
			GameStatistics.statisCommonEvent(2551 + t);
			let e = this["buttonOk" + t.toString()],
				a = this["buttonNo" + t.toString()];
			e && (e.interactable = !1, e.node.getChildByName("on").visible = 1 == this.checkArr[t - 1], e.node.getChildByName("off").visible = 0 == this.checkArr[t - 1], cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start(), cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start()), a && (a.interactable = !1, a.node.getChildByName("on").visible = 0 == this.checkArr[t - 1], a.node.getChildByName("off").visible = 1 == this.checkArr[t - 1], cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start(), cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start());
			let i = this["nodeResult" + t.toString()];
			i.visible = !0;
			let s = i.getChildByName("correct"),
				n = i.getChildByName("wrong");
			1 == this.checkArr[t - 1] ? (n.visible = !1, s.visible = !0, s.scale(0, 0), cc.tween(s).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()) : (s.visible = !1, n.visible = !0, n.scale(0, 0), cc.tween(n).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()), Timer.callLater(.5, () => {
				this.destroyed || (this.checkArr.length < 3 ? this.startCheck(t + 1) : (cc.clearTween(this.nodeSelected), this.nodeSelected.visible = !1, this.buttonSure.node.visible = !0, this.buttonSure.node.scale(0, 0), cc.tween(this.buttonSure.node).to(.3, cc.PROP.SCALE1).start(), this.buttonChange.node.visible = !0, this.buttonChange.node.scale(0, 0), cc.tween(this.buttonChange.node).to(.3, cc.PROP.SCALE1).start(), this.calcScore(), this.labelScore.visible = !0, this.labelScore.scale(0, 0), cc.tween(this.labelScore).to(.2, cc.PROP.SCALE1_2).delay(.2).to(.2, cc.PROP.SCALE1).start()))
			}, this)
		}
		calcScore() {
			let t = 0;
			for (let e = 0; e < this.checkArr.length; e++) 1 == this.checkArr[e] && (t += 100 / this.checkArr.length);
			t = Math.ceil(t), this.labelScore.text = t.toString();
			let e = mgrClassRoom.calcRating(t);
			this.rating = e, this.refreshLabel()
		}
		refreshLabel() {
			let t = mgrI18n.getText("panelClassTeacherMatchingStage.1"),
				e = "";
			switch (this.rating) {
				case 1:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.2"), e = "cry", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 2:
					t = t = mgrI18n.getText("panelClassStudenMatchingStageResult.3"), e = "idle", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 3:
					t = t = mgrI18n.getText("panelClassStudenMatchingStageResult.4"), e = "happy", this.spriteGou.visible = !1, this.spriteFlower.visible = !0
			}
			this.labelSure.text = t, this.spine && this.spine.play(e, !0)
		}
		on_click_buttonOk1() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo1() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk2() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo2() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk3() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo3() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonSure() {
			if (BaseFacade.mGoal.commit(ACTION_ID.CLASS_TEACHER, 1), this.rating > 1)
				if (GameStatistics.statisOnStageEnd(13101, 1), GameStatistics.statisCommonEvent(2539), 2 == this.rating) {
					let t = BaseFacade.mDrop.makeDrop("30");
					mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
						seatIdx: this.context.seatIdx
					})
				} else {
					let t = this.context && this.context.seatIdx,
						e = mgrClassRoom.getSeatDatas()[t];
					mgrAlert.openPanelLoading(UI_NAME.PanelClassReward, {
						roleId: e.roleId,
						fOnRewardEnd: () => {
							e.roleId != CLASS_UNLOCK_ROLE_ID || mgrGame.isContractUnlock(CLASS_UNLOCK_CONTRACT_IDX) || PanelClassRoleGet.openPanel(null, {
								bReward: !0
							});
							let t = BaseFacade.mDrop.makeDrop("30");
							mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
								seatIdx: this.context.seatIdx
							})
						}
					})
				}
			else {
				GameStatistics.statisOnStageEnd(13101, 0, 0), GameStatistics.statisCommonEvent(2538), mgrAlert.openPanelLoading(UI_NAME.PanelClassOutSide, {
					crySeatIdx: this.context.seatIdx
				});
				let t = BaseFacade.mDrop.makeDrop("30");
				mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_CRY_TO_OUTSIDE", {
					seatIdx: this.context.seatIdx
				})
			}
			mgrSdk.stopRecordVideo(), mgrSdk.isVideoShareable && mgrAlert.openPanelLoading(UI_NAME.PanelShare, {
				shareIdx: 11,
				desc: "快让朋友们看看你的课堂趣事吧！",
				descWithoutShare: "彩妆课堂真有趣！"
			}), this.close(!0)
		}
		on_click_buttonChange() {
			GameStatistics.statisCommonEvent(2540), mgrAlert.openPanelLoading(UI_NAME.PanelClassTeacherChangeScore, {
				score: parseInt(this.labelScore.text),
				fOnChange: t => {
					this.buttonChange.node.visible = !1, this.nodeLayoutBtns.updateLayout(.2, !0), this.labelScoreChange.visible = !0, this.labelScoreChange.text = t.toString(), cc.tween(this.labelScore).to(.3, cc.PROP.SCALE0).call(() => {
						this.labelScore.text = t.toString(), cc.tween(this.labelScoreChange).to(.4, {
							x: this.labelScore.x,
							y: this.labelScore.y
						}).to(.2, cc.PROP.SCALE1_3).delay(.2).to(.2, cc.PROP.SCALE1).start()
					}).start();
					let e = mgrClassRoom.calcRating(t);
					this.rating = e, this.refreshLabel()
				}
			}, () => {
				this.labelScoreChange.text = this.labelScore.text, this.labelScoreChange.pos(253, 247), this.labelScore.scale(1, 1)
			})
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisOnStageEnd(13101, 0, 1), this.close()
		}
	}
	class PanelClassTeacherMathStage extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassTeacherMathStage.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeSpine: "Laya.Box",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_nodeTest1: "Laya.Box",
				cc_nodeTest2: "Laya.Box",
				cc_nodeTest3: "Laya.Box",
				cc_nodeSelected: "Laya.Image",
				cc_labelTitle: "Laya.Label",
				cc_nodeCheck1: "Laya.Box",
				cc_labelTips1: "Laya.Label",
				cc_buttonOk1: "UIButton",
				cc_buttonNo1: "UIButton",
				cc_nodeResult1: "Laya.Box",
				cc_nodeCheck2: "Laya.Box",
				cc_labelTips2: "Laya.Label",
				cc_buttonOk2: "UIButton",
				cc_buttonNo2: "UIButton",
				cc_nodeResult2: "Laya.Box",
				cc_nodeCheck3: "Laya.Box",
				cc_labelTips3: "Laya.Label",
				cc_buttonOk3: "UIButton",
				cc_buttonNo3: "UIButton",
				cc_nodeResult3: "Laya.Box",
				cc_labelScore: "Laya.Label",
				cc_labelScoreChange: "Laya.Label",
				cc_nodeLayoutBtns: "UIHVLayout",
				cc_buttonSure: "UIButton",
				cc_spriteGou: "Laya.Sprite",
				cc_spriteFlower: "Laya.Sprite",
				cc_labelSure: "Laya.Label",
				cc_buttonChange: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_teacher_stage", "banner_teacher_stage"), this.curIndex = 0, this.checkArr = [], this.rating = 0
		}
		buildUi() {
			let t = [],
				e = db.get_class_math_stage_db_map();
			for (let a in e) {
				let i = e[a];
				i && t.push(i.id)
			}
			for (let e = 0; e < 3; e++) {
				let a = Mathf.random(t.length) - 1,
					i = t[a];
				t.splice(a, 1);
				let s = this["nodeTest" + (e + 1).toString()],
					n = new ClassStageMathItem({
						stageId: i,
						bTeacher: !0
					});
				n.setParent(s), n.setVisible(!0)
			}
			let a = this.context && this.context.seatIdx,
				i = mgrClassRoom.getSeatDatas()[a];
			if (!i) return;
			let s = db.get_class_room_role_db(i.roleId);
			if (s) {
				this.labelTitle.text = `${mgrI18n.getText(s.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`;
				let t = _G.poolManager.get(Spine, s.spineId);
				this.spine = t, t.setParent(this.nodeSpine), t.setScale(-1, 1), t.play("idle", !0)
			}
			this.labelScore.font = GConfig.bmf_class, this.labelScoreChange.font = GConfig.bmf_class, this.nodeSelected.alpha = 0, this.nodeCheck1.visible = !1, this.buttonOk1.interactable = !1, this.buttonNo1.interactable = !1, this.nodeCheck2.visible = !1, this.buttonOk2.interactable = !1, this.buttonNo2.interactable = !1, this.nodeCheck3.visible = !1, this.buttonOk3.interactable = !1, this.buttonNo3.interactable = !1, this.labelScore.visible = !1, this.buttonSure.node.visible = !1, this.buttonChange.node.visible = !1, this.labelScoreChange.visible = !1, this.startCheck(1), mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13101)
		}
		dispose() {
			this.instOrBanner.dispose(), this.spine && _G.poolManager.put(this.spine), _G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.PANEL_TEACHER_STAGE_IDLE), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		startCheck(t) {
			if (t == this.curIndex) return;
			this.curIndex = t, cc.clearTween(this.nodeSelected), cc.tween(this.nodeSelected).repeatForever(cc.tween().to(.3, cc.PROP.ALPHA0).call(() => {
				this.nodeSelected.y = 160 * (t - 1) - 200
			}).to(.3, cc.PROP.ALPHA1)).start(), cc.tween(this, !0).delay(.3).call(() => {
				mgrAlert.playParticleEffect("132", this.nodeSelected.localToGlobal(new Laya.Point(this.nodeSelected.width / 2, this.nodeSelected.height / 2)), 1, .5, 3.5)
			}).start();
			let e = this["nodeCheck" + t.toString()],
				a = this["buttonOk" + t.toString()],
				i = this["buttonNo" + t.toString()];
			this["nodeResult" + t.toString()].visible = !1, e.visible = !0, e.alpha = 0, cc.tween(e).to(.3, cc.PROP.ALPHA1).call(() => {
				a.interactable = !0, i.interactable = !0, mgrGuide.dispatchGuide(GUD_EVENT.PANEL_TEACHER_STAGE_IDLE)
			}).start()
		}
		refreshUi() {
			mgrGuide.sendMsgKey("PANEL_TEACHER_STAGE_CLICK");
			let t = this.curIndex;
			GameStatistics.statisCommonEvent(2551 + t);
			let e = this["buttonOk" + t.toString()],
				a = this["buttonNo" + t.toString()];
			e && (e.interactable = !1, e.node.getChildByName("on").visible = 1 == this.checkArr[t - 1], e.node.getChildByName("off").visible = 0 == this.checkArr[t - 1], cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start(), cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start()), a && (a.interactable = !1, a.node.getChildByName("on").visible = 0 == this.checkArr[t - 1], a.node.getChildByName("off").visible = 1 == this.checkArr[t - 1], cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start(), cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start());
			let i = this["nodeResult" + t.toString()];
			i.visible = !0;
			let s = i.getChildByName("correct"),
				n = i.getChildByName("wrong");
			1 == this.checkArr[t - 1] ? (n.visible = !1, s.visible = !0, s.scale(0, 0), cc.tween(s).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()) : (s.visible = !1, n.visible = !0, n.scale(0, 0), cc.tween(n).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()), Timer.callLater(.5, () => {
				this.destroyed || (this.checkArr.length < 3 ? this.startCheck(t + 1) : (cc.clearTween(this.nodeSelected), this.nodeSelected.visible = !1, this.buttonSure.node.visible = !0, this.buttonSure.node.scale(0, 0), cc.tween(this.buttonSure.node).to(.3, cc.PROP.SCALE1).start(), this.buttonChange.node.visible = !0, this.buttonChange.node.scale(0, 0), cc.tween(this.buttonChange.node).to(.3, cc.PROP.SCALE1).start(), this.calcScore(), this.labelScore.visible = !0, this.labelScore.scale(0, 0), cc.tween(this.labelScore).to(.2, cc.PROP.SCALE1_2).delay(.2).to(.2, cc.PROP.SCALE1).start()))
			}, this)
		}
		calcScore() {
			let t = 0;
			for (let e = 0; e < this.checkArr.length; e++) 1 == this.checkArr[e] && (t += 100 / this.checkArr.length);
			t = Math.ceil(t), this.labelScore.text = t.toString();
			let e = mgrClassRoom.calcRating(t);
			this.rating = e, this.refreshLabel()
		}
		refreshLabel() {
			let t = mgrI18n.getText("panelClassTeacherMatchingStage.1"),
				e = "";
			switch (this.rating) {
				case 1:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.2"), e = "cry", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 2:
					t = t = mgrI18n.getText("panelClassStudenMatchingStageResult.3"), e = "idle", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 3:
					t = t = mgrI18n.getText("panelClassStudenMatchingStageResult.4"), e = "happy", this.spriteGou.visible = !1, this.spriteFlower.visible = !0
			}
			this.labelSure.text = t, this.spine && this.spine.play(e, !0)
		}
		on_click_buttonOk1() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo1() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk2() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo2() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk3() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo3() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonSure() {
			if (BaseFacade.mGoal.commit(ACTION_ID.CLASS_TEACHER, 1), this.rating > 1)
				if (GameStatistics.statisOnStageEnd(13101, 1), GameStatistics.statisCommonEvent(2539), 2 == this.rating) {
					let t = BaseFacade.mDrop.makeDrop("30");
					mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
						seatIdx: this.context.seatIdx
					})
				} else {
					let t = this.context && this.context.seatIdx,
						e = mgrClassRoom.getSeatDatas()[t];
					mgrAlert.openPanelLoading(UI_NAME.PanelClassReward, {
						roleId: e.roleId,
						fOnRewardEnd: () => {
							e.roleId != CLASS_UNLOCK_ROLE_ID || mgrGame.isContractUnlock(CLASS_UNLOCK_CONTRACT_IDX) || PanelClassRoleGet.openPanel(null, {
								bReward: !0
							});
							let t = BaseFacade.mDrop.makeDrop("30");
							mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
								seatIdx: this.context.seatIdx
							})
						}
					})
				}
			else {
				GameStatistics.statisOnStageEnd(13101, 0, 0), GameStatistics.statisCommonEvent(2538), mgrAlert.openPanelLoading(UI_NAME.PanelClassOutSide, {
					crySeatIdx: this.context.seatIdx
				});
				let t = BaseFacade.mDrop.makeDrop("30");
				mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_CRY_TO_OUTSIDE", {
					seatIdx: this.context.seatIdx
				})
			}
			mgrSdk.stopRecordVideo(), mgrSdk.isVideoShareable && mgrAlert.openPanelLoading(UI_NAME.PanelShare, {
				shareIdx: 11,
				desc: "快让朋友们看看你的课堂趣事吧！",
				descWithoutShare: "彩妆课堂真有趣！"
			}), this.close(!0)
		}
		on_click_buttonChange() {
			GameStatistics.statisCommonEvent(2540), mgrAlert.openPanelLoading(UI_NAME.PanelClassTeacherChangeScore, {
				score: parseInt(this.labelScore.text),
				fOnChange: t => {
					this.buttonChange.node.visible = !1, this.nodeLayoutBtns.updateLayout(.2, !0), this.labelScoreChange.visible = !0, this.labelScoreChange.text = t.toString(), cc.tween(this.labelScore).to(.3, cc.PROP.SCALE0).call(() => {
						this.labelScore.text = t.toString(), cc.tween(this.labelScoreChange).to(.4, {
							x: this.labelScore.x,
							y: this.labelScore.y
						}).to(.2, cc.PROP.SCALE1_3).delay(.2).to(.2, cc.PROP.SCALE1).start()
					}).start();
					let e = mgrClassRoom.calcRating(t);
					this.rating = e, this.refreshLabel()
				}
			}, () => {
				this.labelScoreChange.text = this.labelScore.text, this.labelScoreChange.pos(253, 247), this.labelScore.scale(1, 1)
			})
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisOnStageEnd(13101, 0, 1), this.close()
		}
	}
	class PanelClassTeacherStage extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassTeacherStage.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeSpine: "Laya.Box",
				cc_nodePhotos: "Laya.Box",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_spritePhoto1: "Laya.Sprite",
				cc_spritePhoto2: "Laya.Sprite",
				cc_spritePhoto3: "Laya.Sprite",
				cc_nodeSelected: "Laya.Image",
				cc_labelTitle: "Laya.Label",
				cc_nodeCheck1: "Laya.Box",
				cc_labelTips1: "Laya.Label",
				cc_buttonOk1: "UIButton",
				cc_buttonNo1: "UIButton",
				cc_nodeResult1: "Laya.Box",
				cc_nodeCheck2: "Laya.Box",
				cc_labelTips2: "Laya.Label",
				cc_buttonOk2: "UIButton",
				cc_buttonNo2: "UIButton",
				cc_nodeResult2: "Laya.Box",
				cc_nodeCheck3: "Laya.Box",
				cc_labelTips3: "Laya.Label",
				cc_buttonOk3: "UIButton",
				cc_buttonNo3: "UIButton",
				cc_nodeResult3: "Laya.Box",
				cc_labelScore: "Laya.Label",
				cc_labelScoreChange: "Laya.Label",
				cc_nodeLayoutBtns: "UIHVLayout",
				cc_buttonSure: "UIButton",
				cc_spriteGou: "Laya.Sprite",
				cc_spriteFlower: "Laya.Sprite",
				cc_labelSure: "Laya.Label",
				cc_buttonChange: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_teacher_stage", "banner_teacher_stage"), this.curIndex = 0, this.checkArr = [], this.rating = 0
		}
		buildUi() {
			let t = db.get_teacher_stage_db_map(),
				e = [];
			for (let a in t) t[a] && e.push(t[a]);
			let a = e[Mathf.random(e.length) - 1];
			if (!a) return;
			let i = this.context && this.context.seatIdx,
				s = mgrClassRoom.getSeatDatas()[i];
			if (!s) return;
			let n = db.get_class_room_role_db(s.roleId);
			if (n) {
				this.labelTitle.text = `${mgrI18n.getText(n.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`;
				let t = _G.poolManager.get(Spine, n.spineId);
				this.spine = t, t.setParent(this.nodeSpine), t.setScale(-1, 1), t.play("idle", !0)
			}
			this.labelScore.font = GConfig.bmf_class, this.labelScoreChange.font = GConfig.bmf_class, this.spritePhoto1.loadImage(a.pictureUrl1), this.spritePhoto1.pos(Mathf.random(a.pictureOffsetX[1], a.pictureOffsetX[0]), Mathf.random(a.pictureOffsetY[1], a.pictureOffsetY[0])), this.spritePhoto2.loadImage(a.pictureUrl2), this.spritePhoto2.pos(Mathf.random(a.pictureOffsetX[1], a.pictureOffsetX[0]), Mathf.random(a.pictureOffsetY[1], a.pictureOffsetY[0])), this.spritePhoto3.loadImage(a.pictureUrl3), this.spritePhoto3.pos(Mathf.random(a.pictureOffsetX[1], a.pictureOffsetX[0]), Mathf.random(a.pictureOffsetY[1], a.pictureOffsetY[0]));
			for (let t = 1; t <= 3; t++) {
				let e = this["spritePhoto" + t.toString()],
					a = new Laya.Sprite,
					i = new Laya.Point;
				UiHelper.local2local(this.spriteMaskBg, e, i), a.graphics.drawImage(this.spriteMaskBg.texture, i.x, i.y, 492, 620), e.mask = a
			}
			this.nodeSelected.alpha = 0, this.nodeCheck1.visible = !1, this.buttonOk1.interactable = !1, this.buttonNo1.interactable = !1, this.nodeCheck2.visible = !1, this.buttonOk2.interactable = !1, this.buttonNo2.interactable = !1, this.nodeCheck3.visible = !1, this.buttonOk3.interactable = !1, this.buttonNo3.interactable = !1, this.labelScore.visible = !1, this.buttonSure.node.visible = !1, this.buttonChange.node.visible = !1, this.labelScoreChange.visible = !1, this.startCheck(1), mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13101)
		}
		dispose() {
			this.instOrBanner.dispose(), this.spine && _G.poolManager.put(this.spine), _G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.PANEL_TEACHER_STAGE_IDLE), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		startCheck(t) {
			if (t == this.curIndex) return;
			this.curIndex = t, cc.clearTween(this.nodeSelected), cc.tween(this.nodeSelected).repeatForever(cc.tween().to(.3, cc.PROP.ALPHA0).call(() => {
				this.nodeSelected.y = 200 * (t - 1) - 200
			}).to(.3, cc.PROP.ALPHA1)).start(), cc.tween(this, !0).delay(.3).call(() => {
				mgrAlert.playParticleEffect("132", this.nodeSelected.localToGlobal(new Laya.Point(this.nodeSelected.width / 2, this.nodeSelected.height / 2)), 1, .5, 3.5)
			}).start();
			let e = this["nodeCheck" + t.toString()],
				a = this["buttonOk" + t.toString()],
				i = this["buttonNo" + t.toString()];
			this["nodeResult" + t.toString()].visible = !1, e.visible = !0, e.alpha = 0, cc.tween(e).to(.3, cc.PROP.ALPHA1).call(() => {
				a.interactable = !0, i.interactable = !0, mgrGuide.dispatchGuide(GUD_EVENT.PANEL_TEACHER_STAGE_IDLE)
			}).start()
		}
		refreshUi() {
			mgrGuide.sendMsgKey("PANEL_TEACHER_STAGE_CLICK");
			let t = this.curIndex;
			GameStatistics.statisCommonEvent(2551 + t);
			let e = this["buttonOk" + t.toString()],
				a = this["buttonNo" + t.toString()];
			e && (e.interactable = !1, e.node.getChildByName("on").visible = 1 == this.checkArr[t - 1], e.node.getChildByName("off").visible = 0 == this.checkArr[t - 1], cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start(), cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start()), a && (a.interactable = !1, a.node.getChildByName("on").visible = 0 == this.checkArr[t - 1], a.node.getChildByName("off").visible = 1 == this.checkArr[t - 1], cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start(), cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start());
			let i = this["nodeResult" + t.toString()];
			i.visible = !0;
			let s = i.getChildByName("correct"),
				n = i.getChildByName("wrong");
			1 == this.checkArr[t - 1] ? (n.visible = !1, s.visible = !0, s.scale(0, 0), cc.tween(s).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()) : (s.visible = !1, n.visible = !0, n.scale(0, 0), cc.tween(n).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()), Timer.callLater(.5, () => {
				this.destroyed || (this.checkArr.length < 3 ? this.startCheck(t + 1) : (cc.clearTween(this.nodeSelected), this.nodeSelected.visible = !1, this.buttonSure.node.visible = !0, this.buttonSure.node.scale(0, 0), cc.tween(this.buttonSure.node).to(.3, cc.PROP.SCALE1).start(), this.buttonChange.node.visible = !0, this.buttonChange.node.scale(0, 0), cc.tween(this.buttonChange.node).to(.3, cc.PROP.SCALE1).start(), this.calcScore(), this.labelScore.visible = !0, this.labelScore.scale(0, 0), cc.tween(this.labelScore).to(.2, cc.PROP.SCALE1_2).delay(.2).to(.2, cc.PROP.SCALE1).start()))
			}, this)
		}
		calcScore() {
			let t = 0;
			for (let e = 0; e < this.checkArr.length; e++) 1 == this.checkArr[e] && (t += 100 / this.checkArr.length);
			t = Math.ceil(t), this.labelScore.text = t.toString();
			let e = mgrClassRoom.calcRating(t);
			this.rating = e, this.refreshLabel()
		}
		refreshLabel() {
			let t = mgrI18n.getText("panelClassTeacherMatchingStage.1"),
				e = "";
			switch (this.rating) {
				case 1:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.2"), e = "cry", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 2:
					t = t = mgrI18n.getText("panelClassStudenMatchingStageResult.3"), e = "idle", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 3:
					t = t = mgrI18n.getText("panelClassStudenMatchingStageResult.4"), e = "happy", this.spriteGou.visible = !1, this.spriteFlower.visible = !0
			}
			this.labelSure.text = t, this.spine && this.spine.play(e, !0)
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisOnStageEnd(13101, 0, 1), this.close()
		}
		on_click_buttonOk1() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo1() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk2() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo2() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk3() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo3() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonSure() {
			if (BaseFacade.mGoal.commit(ACTION_ID.CLASS_TEACHER, 1), this.rating > 1)
				if (GameStatistics.statisOnStageEnd(13101, 1), GameStatistics.statisCommonEvent(2539), 2 == this.rating) {
					let t = BaseFacade.mDrop.makeDrop("30");
					mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
						seatIdx: this.context.seatIdx
					})
				} else {
					let t = this.context && this.context.seatIdx,
						e = mgrClassRoom.getSeatDatas()[t];
					mgrAlert.openPanelLoading(UI_NAME.PanelClassReward, {
						roleId: e.roleId,
						fOnRewardEnd: () => {
							e.roleId != CLASS_UNLOCK_ROLE_ID || mgrGame.isContractUnlock(CLASS_UNLOCK_CONTRACT_IDX) || PanelClassRoleGet.openPanel(null, {
								bReward: !0
							});
							let t = BaseFacade.mDrop.makeDrop("30");
							mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
								seatIdx: this.context.seatIdx
							})
						}
					})
				}
			else {
				GameStatistics.statisOnStageEnd(13101, 0, 0), GameStatistics.statisCommonEvent(2538), mgrAlert.openPanelLoading(UI_NAME.PanelClassOutSide, {
					crySeatIdx: this.context.seatIdx
				});
				let t = BaseFacade.mDrop.makeDrop("30");
				mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_CRY_TO_OUTSIDE", {
					seatIdx: this.context.seatIdx
				})
			}
			mgrSdk.stopRecordVideo(), mgrSdk.isVideoShareable && mgrAlert.openPanelLoading(UI_NAME.PanelShare, {
				shareIdx: 11,
				desc: "快让朋友们看看你的课堂趣事吧！",
				descWithoutShare: "彩妆课堂真有趣！"
			}), this.close(!0)
		}
		on_click_buttonChange() {
			GameStatistics.statisCommonEvent(2540), mgrAlert.openPanelLoading(UI_NAME.PanelClassTeacherChangeScore, {
				score: parseInt(this.labelScore.text),
				fOnChange: t => {
					this.buttonChange.node.visible = !1, this.nodeLayoutBtns.updateLayout(.2, !0), this.labelScoreChange.visible = !0, this.labelScoreChange.text = t.toString(), cc.tween(this.labelScore).to(.3, cc.PROP.SCALE0).call(() => {
						this.labelScore.text = t.toString(), cc.tween(this.labelScoreChange).to(.4, {
							x: this.labelScore.x,
							y: this.labelScore.y
						}).to(.2, cc.PROP.SCALE1_3).delay(.2).to(.2, cc.PROP.SCALE1).start()
					}).start();
					let e = mgrClassRoom.calcRating(t);
					this.rating = e, this.refreshLabel()
				}
			}, () => {
				this.labelScoreChange.text = this.labelScore.text, this.labelScoreChange.pos(253, 247), this.labelScore.scale(1, 1)
			})
		}
	}
	class PanelCoinGift extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelCoinGift.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_superNode: "Laya.Sprite",
				cc_spriteCoinMore: "Laya.Sprite",
				cc_superCount: "Laya.Label",
				cc_buttonSuper: "UIButton",
				cc_superPrice: "Laya.Text",
				cc_freeNode: "Laya.Sprite",
				cc_spriteCoinVoid: "Laya.Sprite",
				cc_spriteXzBuy: "Laya.Sprite",
				cc_freeCount: "Laya.Label",
				cc_buttonFree: "UIButton",
				cc_spriteButtonFreeAdFlag: "Laya.Sprite",
				cc_textButtonFreeText: "Laya.Label",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_gift")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteCoinMore, "pnl_gift_03.png"), mgrI18n.trySetI18nImage(this.spriteCoinVoid, "pnl_gift_01.png"), mgrI18n.trySetI18nImage(this.spriteXzBuy, "pnl_gift_05.png"), mgrAdv.getActive("shop_item") ? (mgrAdv.statisVideoShow("shop_item"), this.freeCoinCount = mgrOffline.offlinePerSecond * db.game_cnf.free_coin_time | 0, this.freeCount.text = "*" + GameUtility.convertCoinString(this.freeCoinCount, !1), UiHelper.playBreathe(this.buttonFree.node), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()) : (this.freeNode.visible = !1, this.superNode.y = 0), this.superCoinCount = mgrOffline.offlinePerSecond * db.game_cnf.diamond_coin_time | 0, this.superCount.text = "*" + GameUtility.convertCoinString(this.superCoinCount, !1);
			let t = db.get_pay_db(PAY_ID.COIN_GIFT);
			this.superCost = t.costCount, this.superPrice.text = `${this.superCost}`, Mathf.randomEnable(db.cop.ad_flag_hide_ratios[0] || 0) ? (this.spriteButtonFreeAdFlag.visible = !1, this.textButtonFreeText.x -= this.spriteButtonFreeAdFlag.width / 2) : this.spriteButtonFreeAdFlag.visible = !0, this.textButtonFreeText.text = mgrI18n.getText("panelCoinGift.1")
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			if ("shop_item" == t.advName && "coin" == t.params) {
				this.close();
				let t = {
					itemId: "1001",
					count: this.freeCoinCount
				};
				mgrAlert.addAndAlert(t, 29)
			}
		}
		on_click_buttonSuper() {
			if (BaseFacade.mItem.subItem("1000", this.superCost, 28)) {
				this.close();
				let t = {
					itemId: "1001",
					count: this.superCoinCount
				};
				mgrAlert.addAndAlert(t, 28)
			} else mgrAlert.alertNotEnough("1000")
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonFree() {
			mgrAdv.statisVideoClick("shop_item"), mgrAdv.dispatchAdv("shop_item", "coin", !0) || mgrAlert.alertText("广告拉取中，稍后再试")
		}
	}
	class PanelColorEggGet extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelColorEggGet.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_spriteTitle: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_spriteLight: "Laya.Sprite",
				cc_labelTime: "Laya.Label",
				cc_buttonAdvGet: "UIButton",
				cc_buttonGet: "UIButton"
			}
		}
		buildUi() {
			mgrAdv.checkActive("get_shoe_color_egg") ? (mgrI18n.trySetI18nImage(this.spriteTitle, "pnl_shoe_color_eggs_02.png"), mgrAdv.statisVideoShow("get_shoe_color_egg"), cc.tween(this.spriteLight).repeatForever(cc.tween().by(6, {
				rotation: 360
			})).start(), UiHelper.playBreathe(this.buttonAdvGet.node), Laya.timer.loop(1e3, this, this.updateTime), this.updateTime(), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()) : this.close()
		}
		dispose() {
			this.stopProcMsg(), Laya.timer.clear(this, this.updateTime), super.dispose()
		}
		updateTime() {
			let t = this.context,
				e = mgrColorEggs.getLeftTime(t);
			e > 0 ? (this.labelTime.text = Tools.formatSimpleTime(e) + mgrI18n.getText("panelColorEggGet.1"), this.buttonAdvGet.node.visible = !0, this.buttonGet.node.visible = !1) : (this.buttonAdvGet.node.visible = !1, this.buttonGet.node.visible = !0, this.labelTime.visible = !1, UiHelper.playBreathe(this.buttonGet.node), Laya.timer.clear(this, this.updateTime))
		}
		onMsgAdvShowSuc(t) {
			"get_shoe_color_egg" == t.advName && (this.close(), GameStatistics.statisCommonEvent(2606 + parseInt(this.context) - 6010, 1), mgrColorEggs.commit(this.context, !0))
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonAdvGet() {
			mgrAdv.statisVideoClick("get_shoe_color_egg"), mgrAdv.dispatchAdv("get_shoe_color_egg", null, !0)
		}
		on_click_buttonGet() {
			this.close(), GameStatistics.statisCommonEvent(2606 + parseInt(this.context) - 6010, 2), mgrColorEggs.commit(this.context)
		}
	}
	class PanelCpBooks extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelCpBooks.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteIcon: "Laya.Sprite",
				cc_listNpc: "ReuseScrollList",
				cc_contentNpc: "Laya.Sprite",
				cc_listCp: "ReuseScrollList",
				cc_contentCp: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_toggleNpc: "UIToggle",
				cc_toggleCp: "UIToggle"
			}
		}
		buildUi() {
			this.fillNpc(), this.fillCp(), this.listCp.node.alpha = 0, this.listCp.node.visible = !1, mgrI18n.trySetI18nImage(this.spriteIcon, "pnl_cp_test_preview_02.png")
		}
		fillNpc() {
			let t = db.get_cp_npc_map();
			Tools.forEachMap(t, (t, e) => {
				let a = this.contentNpc.getChildByName(t);
				if (a) {
					let i = mgrCp.isNpcLock(t),
						s = UiHelper.getChild(a, "icon");
					s.skin = e.bookIcon, s.gray = i, UiHelper.getChild(a, "nameBg/name").text = mgrI18n.getText(e.tlite), UiHelper.getChild(a, "lock").setVisible(i)
				}
			})
		}
		fillCp() {
			let t = db.get_cp_npc_fixed_map();
			Tools.forEachMap(t, (t, e) => {
				let a = this.contentCp.getChildByName(t);
				if (a) {
					let i = mgrCp.isCpLock(t),
						s = UiHelper.getChild(a, "icon");
					s.skin = e.bookIcon, s.gray = i, UiHelper.getChild(a, "nameBg/name").text = mgrI18n.getText(e.tlite1) + mgrI18n.getText(e.tlite2), UiHelper.getChild(a, "lock").setVisible(i)
				}
			})
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_toggleNpc() {
			cc.tween(this.listNpc.node, !0).show().to(.3, cc.PROP.ALPHA1).start(), cc.tween(this.listCp.node, !0).to(.3, cc.PROP.ALPHA0).hide().start()
		}
		on_click_toggleCp() {
			cc.tween(this.listCp.node, !0).show().to(.3, cc.PROP.ALPHA1).start(), cc.tween(this.listNpc.node, !0).to(.3, cc.PROP.ALPHA0).hide().start()
		}
	}
	class PanelCpTest extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelCpTest.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_nodeBar: "Laya.Box",
				cc_barMask: "UIBarMask",
				cc_nodeSelectBox: "Laya.Sprite",
				cc_labelTips: "Laya.Label",
				cc_nodeItem0: "Laya.Box",
				cc_button0: "UIButton",
				cc_button1: "UIButton",
				cc_button2: "UIButton",
				cc_nodeItem1: "Laya.Box",
				cc_button3: "UIButton",
				cc_button4: "UIButton",
				cc_button5: "UIButton",
				cc_nodeItem2: "Laya.Box",
				cc_button6: "UIButton",
				cc_button7: "UIButton",
				cc_button8: "UIButton",
				cc_nodeAnimations: "Laya.Box",
				cc_buttonAnim0: "UIButton",
				cc_buttonAnim1: "UIButton",
				cc_buttonAnim2: "UIButton",
				cc_buttonAnim3: "UIButton",
				cc_buttonAnim4: "UIButton",
				cc_nodeSelected: "Laya.Sprite",
				cc_buttonCost: "UIButton",
				cc_buttonOk: "UIButton",
				cc_buttonGuide: "UIButton",
				cc_labelDebugInputNpcId: "Laya.TextInput",
				cc_labelDebugInputAnimIdx: "Laya.TextInput",
				cc_buttonDebugCp: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.finishTime = 0, this.itemIdArr = [], this.cpTestResult = null, this.cpTestResultNpc = null, this.resultData = null, this.resultDataNpc = null, this.ANIM_IDX_TO_DATA = {
				0: {
					bRotate: !0,
					cameraX: .02,
					cameraY: 1,
					cameraZ: 3.47,
					cameraNodeEulerX: 0,
					cameraNodeEulerY: -4
				},
				1: {
					bRotate: !1,
					cameraX: .04,
					cameraY: 1.08,
					cameraZ: 2.29,
					cameraNodeEulerX: 0,
					cameraNodeEulerY: -10
				},
				2: {
					bRotate: !1,
					cameraX: .1,
					cameraY: 1.46,
					cameraZ: 1.3,
					cameraNodeEulerX: -5,
					cameraNodeEulerY: -5
				},
				3: {
					bRotate: !1,
					cameraX: .16,
					cameraY: 1.36,
					cameraZ: 1.59,
					cameraNodeEulerX: -16,
					cameraNodeEulerY: 15
				},
				4: {
					bRotate: !1,
					cameraX: .1,
					cameraY: 1.08,
					cameraZ: 2.37,
					cameraNodeEulerX: -9,
					cameraNodeEulerY: 1
				},
				5: {
					bRotate: !1,
					cameraX: .08,
					cameraY: .96,
					cameraZ: 2.59,
					cameraNodeEulerX: -4,
					cameraNodeEulerY: 0
				},
				6: {
					bRotate: !1,
					cameraX: .04,
					cameraY: 1.1,
					cameraZ: 2.1,
					cameraNodeEulerX: -9,
					cameraNodeEulerY: -15
				},
				7: {
					bRotate: !1,
					cameraX: .04,
					cameraY: 1.02,
					cameraZ: 3.55,
					cameraNodeEulerX: -9,
					cameraNodeEulerY: 1
				},
				8: {
					bRotate: !1,
					cameraX: -.02,
					cameraY: 1.04,
					cameraZ: 2.65,
					cameraNodeEulerX: -7,
					cameraNodeEulerY: -7
				},
				9: {
					bRotate: !1,
					cameraX: .04,
					cameraY: 1.38,
					cameraZ: 1.56,
					cameraNodeEulerX: -6,
					cameraNodeEulerY: -5
				}
			}, this.instOrBanner = new AdvInstOrBanner("enter_cp_test", "banner_cp_test"), this.bAction = !1, this.bShowSuc = !1, this.bShowed = !1
		}
		addPreloadRes(t) {
			mgrPart.addPartResList(mgrPart.partsWear, t, !0), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.MAIN_IDLE).path), t.addModel(db.get_effect_db("104").res), t.addModel(db.get_effect_db("160").res), t.addModel(db.get_effect_db("172").res), t.addModel(db.get_effect_db("173").res)
		}
		buildUi() {
			this.init3D(), this.topLeftNode.x = -120, this.nodeBar.x = 450, this.nodeSelectBox.scaleY = 0, this.labelTips.alpha = 0, this.setUiVisible(!0, 1), this.barMask.style = UIBarMask.STYLE_VERTICAL, this.barMask.progress = 0;
			for (let t = 0; t < 5; t++) {
				let e = this["buttonAnim" + t.toString()],
					a = db.get_cp_animations(t);
				if (e && a) {
					let t = e.node.getChildAt(0);
					t && a.iconUrl && t.loadImage(a.iconUrl)
				}
				e.node.visible = !1
			}
			for (let t = 0; t < 9; t++) {
				let e = this["button" + t.toString()],
					a = db.get_cp_items(t);
				if (e && a) {
					let t = e.node.getChildAt(0);
					t && a.iconUrl && t.loadImage(a.iconUrl)
				}
				e.node.visible = !1
			}
			this.labelTips.text = mgrI18n.getText("panelCpTest.1"), this.clickAnim(0), this.labelDebugInputAnimIdx.visible = !1, this.labelDebugInputNpcId.visible = !1, this.buttonDebugCp.node.visible = !1, mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCPTEST_BUTTONGUIDE, this.buttonGuide.node), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_CP_TEST), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				[BASE_MSG.SDK_SHARE_SUC]: this.onMsgShareSuc.bind(this),
				[BASE_MSG.SDK_SHARE_FAIL]: this.onMsgShareFail.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onMsgVideoShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_FAIL]: this.onMsgShareFail.bind(this),
				[BASE_MSG.SYS_KEY_DOWN]: this.onMsgKeyDown.bind(this)
			}), this.startProcMsg(), mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13005), this.addEffect("192").play()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner && this.instOrBanner.dispose(), this.timer1 && this.timer1.stop(), this.timer2 && this.timer2.stop(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELCPTEST_BUTTONGUIDE), _G.sendMsg("GUIDE_FORCE_CLOSE"), this.showAvatar && this.showAvatar.destroy(), this.roleAvatar && this.roleAvatar.destroy(), this.npcBodyModel && this.npcBodyModel.dispose(), this.npcFaceModel && this.npcFaceModel.dispose(), this.npcHairModel && this.npcHairModel.dispose(), this.playerNpcIntro && this.playerNpcIntro.dispose(), this.playerNpcIdle && this.playerNpcIdle.dispose(), this.effectFaZhen && _G.poolManager.put(this.effectFaZhen), this.effectNpc && _G.poolManager.put(this.effectNpc), GameStatistics.statisOnStageEnd(13005), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			"cp_test_show" == t.advName && this.enterResult()
		}
		onMsgShareSuc() {}
		onMsgShareFail() {}
		onMsgVideoShareSuc() {}
		onMsgKeyDown(t) {
			let e = Laya.Keyboard;
			switch (t.keyCode) {
				case e.Q:
					this.cameraNode.transform.localRotationEulerY += 1;
					break;
				case e.E:
					this.cameraNode.transform.localRotationEulerY -= 1;
					break;
				case e.R:
					this.cameraNode.transform.localRotationEulerX += 1;
					break;
				case e.T:
					this.cameraNode.transform.localRotationEulerX -= 1;
					break;
				case e.F:
					this.camera.transform.localPositionZ += .01;
					break;
				case e.G:
					this.camera.transform.localPositionZ -= .01;
					break;
				case e.P:
					console.log("cameraNode localRotationEulerX = ", this.cameraNode.transform.localRotationEulerX), console.log("cameraNode localRotationEulerY = ", this.cameraNode.transform.localRotationEulerY)
			}
		}
		init3D() {
			this.createScene3DBack(1, 45);
			let t = this.scene3DBack.addChild(new Laya.Sprite3D);
			t.addChild(this.camera), this.cameraNode = t, this.camera.transform.localPosition = new Laya.Vector3(.02, .7, 3.04), this.cameraNode.transform.localRotationEuler = new Laya.Vector3(-11, 0, 0), this.showAvatar = new RoleAvatar(mgrPart.partsWear), this.showAvatar.transform.localPosition = new Laya.Vector3(0, 0, 0), this.showAvatar.transform.localRotationEuler = new Laya.Vector3(0, 0, 0), this.scene3DBack.addChild(this.showAvatar), this.showAvatar.playIdle(), this.showAvatar.playZaYang(), this.showAvatar.active = !0, this.buttonOk.node.visible = !1, this.buttonCost.node.visible = !1, this.effectBar = this.getEffect("173"), this.effectBar.followTarget(this.nodeBar, this.cameraEffect, 0, 30), this.effectBar.play()
		}
		setUiVisible(t, e) {
			this._uiVisible !== t && (this._uiVisible = t, t ? this.scheduleOnce(e, () => {
				cc.tween(this.topLeftNode).to(.3, {
					x: 0
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.nodeBar).to(.3, {
					x: 220
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.nodeSelectBox).to(.3, {
					scaleY: 1
				}, cc.OPTION.BACK_OUT).call(() => {
					this.destroyed || (cc.tween(this.labelTips).to(.3, cc.PROP.ALPHA1).start(), this.refreshUi())
				}).start()
			}) : this.scheduleOnce(e, () => {
				cc.tween(this.topLeftNode).to(.3, {
					x: -120
				}, cc.OPTION.SINE_OUT).start(), cc.tween(this.nodeBar).to(.3, {
					x: 450
				}, cc.OPTION.SINE_OUT).start()
			}))
		}
		clickItems(t) {
			if (this.bAction) return;
			if (this.itemIdArr.length >= 3) return;
			this.context && 2 == this.context.index && GameStatistics.statisCommonEvent(2542 + this.itemIdArr.length), GameStatistics.statisCommonEvent(2302, t), mgrGuide.sendMsgKey("CP_CLICK_ITEM"), this.bAction = !0;
			let e = () => {
				this.itemIdArr.push(t), this.barMask.progress = this.itemIdArr.length / 3, this.refreshUi(), this.bAction = !1, 3 == this.itemIdArr.length && (this.context && 1 == this.context.index ? this.cpTestResult = this.calcNpc() : this.cpTestResultNpc = this.calcNpcFixed())
			};
			for (let e = 0; e < 3; e++) {
				let a = this["button" + (3 * Math.floor(t / 3) + e).toString()];
				cc.tween(a.node).to(.2, {
					alpha: 0,
					scaleX: 0,
					scaleY: 0
				}).start()
			}
			this.showAvatar.playAnimation(MODEL_ANIM.MAIN_HUDONG3, !1, MODEL_ANIM.MAIN_IDLE);
			let a = this["button" + t.toString()],
				i = db.get_cp_items(t);
			if (a && i && i.iconUrl) {
				let t = UiHelper.getSelfGlobalPos(a.node),
					s = UiHelper.getSelfGlobalPos(this.nodeBar);
				mgrAlert.openResWait(i.iconUrl, RES_TYPE.IMAGE, () => {
					this.destroyed || UiHelper.playImageScaleAndJump(i.iconUrl, t, s, null, () => {
						this.destroyed || (mgrAlert.playParticleEffect("104", s, 1, .5), e())
					}).effect.setScale(1.5, 1.5, 1.5)
				})
			} else e()
		}
		refreshUi() {
			let t = !1;
			for (let e = 0; e < 3; e++) {
				let a = this["nodeItem" + e.toString()];
				if (null != this.itemIdArr[e] || t) a.visible = !1;
				else {
					a.visible = !0;
					let i = 0;
					for (let t = 0; t < 3; t++) {
						let a = this["button" + (3 * e + t).toString()];
						a.node.visible = !0, a.node.scale(0, 0), cc.tween(a.node).delay(i).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), i += .2
					}
					t = !0
				}
			}
			if (this.nodeAnimations.visible = !1, this.itemIdArr.length >= 3) {
				this.instOrBanner && this.instOrBanner.onFocus(!1), mgrGuide.sendMsgKey("CP_SHOW_ANIM_BTN");
				let t = 0;
				cc.tween(this.labelTips).to(.3, cc.PROP.ALPHA0).call(() => {
					this.destroyed || (this.labelTips.text = mgrI18n.getText("panelCpTest.3"), cc.tween(this.labelTips).to(.3, cc.PROP.ALPHA1).start())
				}).start(), this.buttonOk.node.x = 0, 1 == db.cop.b_show_adv_cost && (this.buttonCost.node.x = -120, this.buttonOk.node.x = 120, this.buttonCost.node.visible = !0, this.buttonCost.node.scale(0, 0), cc.tween(this.buttonCost.node).delay(t).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()), this.buttonOk.node.visible = !0, this.buttonOk.node.scale(0, 0), cc.tween(this.buttonOk.node).delay(t).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).call(() => {
					this.destroyed || (cc.clearTween(this.buttonOk.node), UiHelper.playRotCycle(this.buttonOk.node))
				}).start(), cc.clearTween(this.nodeBar), this.nodeBar._orgPosY = this.nodeBar.y, cc.tween(this.nodeBar).repeatForever(cc.tween().to(.3, {
					y: this.nodeBar._orgPosY + 5
				}).to(.6, {
					y: this.nodeBar._orgPosY - 5
				}).to(.3, {
					y: this.nodeBar._orgPosY
				})).start(), mgrAdv.statisVideoShow("cp_test_show")
			}
		}
		calcNpc() {
			let t = null,
				e = db.get_cp_test_map();
			for (let a in e) {
				let i = e[a];
				if (i && mgrRoleTest.isArrDataEqual(this.itemIdArr, i.selectedItemIds)) {
					t = i;
					break
				}
			}
			return console.log("npc测试结果", t), t
		}
		calcNpcFixed() {
			let t = null,
				e = db.get_cp_test_npc_map();
			for (let a in e) {
				let i = e[a];
				if (i && mgrRoleTest.isArrDataEqual(this.itemIdArr, i.selectedItemIds)) {
					t = i;
					break
				}
			}
			return console.log("npc测试结果", t), t
		}
		clickAnim(t) {
			if (this.selectedAnimIdx == t) return;
			this.selectedAnimIdx = t;
			let e = this["buttonAnim" + this.selectedAnimIdx.toString()];
			e && (e.node.addChild(this.nodeSelected), this.nodeSelected.pos(e.node.width / 2, e.node.height / 2))
		}
		calcResult() {
			if (this.showAvatar.playAnimation(MODEL_ANIM.MAIN_HUDONG2, !1, MODEL_ANIM.MAIN_IDLE), this.resultData) return;
			let t = [];
			for (let e = 0; e < this.cpTestResult.npcIds.length; e++) {
				let a = this.cpTestResult.npcIds[e],
					i = db.get_cp_npc(a);
				i && mgrGame.contractIndex != i.matchContractIndex && t.push(a)
			}
			console.log("过滤后的随机池", t);
			let e = t[Mathf.random(t.length) - 1],
				a = db.get_cp_npc(e);
			if (!a) return;
			let i = [5, 6, 7, 8],
				s = i[Mathf.random(i.length) - 1],
				n = {
					npcId: e,
					npcBodyModelId: a.bodyModelId,
					npcFaceModelId: a.faceModelId,
					npcHairModelId: a.hairModelId,
					effectId: a.effectId,
					npcBodyAnimIds: [a.npcBodyAnimationIds[0][s], a.npcBodyAnimationIds[1][s]],
					npcFaceAnimIds: [a.npcFaceAnimationIds[0][s], a.npcFaceAnimationIds[1][s]],
					roleBodyAnimIds: [a.roleBodyAnimationIds[0][s], a.roleBodyAnimationIds[1][s]],
					roleFaceAnimIds: [a.roleFaceAnimationIds[0][s], a.roleFaceAnimationIds[1][s]],
					bRotate: this.ANIM_IDX_TO_DATA[s].bRotate,
					cameraX: this.ANIM_IDX_TO_DATA[s].cameraX,
					cameraY: this.ANIM_IDX_TO_DATA[s].cameraY,
					cameraZ: this.ANIM_IDX_TO_DATA[s].cameraZ,
					cameraNodeEulerX: this.ANIM_IDX_TO_DATA[s].cameraNodeEulerX,
					cameraNodeEulerY: this.ANIM_IDX_TO_DATA[s].cameraNodeEulerY
				};
			this.resultData = n, console.log("互动结果", this.resultData), this.startLoad()
		}
		calcResultNpc() {
			if (this.showAvatar.playAnimation(MODEL_ANIM.MAIN_HUDONG2, !1, MODEL_ANIM.MAIN_IDLE), this.resultDataNpc) return;
			let t = this.cpTestResultNpc.fixedNpcIds;
			console.log("过滤后的随机池", t);
			let e = t[Mathf.random(t.length) - 1],
				a = db.get_cp_npc_fixed(e);
			if (!a) return;
			let i = [0, 1, 2, 3, 4, 9],
				s = i[Mathf.random(i.length) - 1],
				n = {
					npcId: e,
					nanBodyModelId: a.nanBodyModelId,
					nanFaceModelId: a.nanFaceModelId,
					nanHairModelId: a.nanHairModelId,
					nvBodyModelId: a.nvBodyModelId,
					nvFaceModelId: a.nvFaceModelId,
					nvHairModelId: a.nvHairModelId,
					effectId: a.effectId,
					nanBodyAnimIds: [a.nanBodyAnimationIds[0][s], a.nanBodyAnimationIds[1][s]],
					nanFaceAnimIds: [a.nanFaceAnimationIds[0][s], a.nanFaceAnimationIds[1][s]],
					nvBodyAnimIds: [a.nvBodyAnimationIds[0][s], a.nvBodyAnimationIds[1][s]],
					nvFaceAnimIds: [a.nvFaceAnimationIds[0][s], a.nvFaceAnimationIds[1][s]],
					bRotate: this.ANIM_IDX_TO_DATA[s].bRotate,
					cameraX: this.ANIM_IDX_TO_DATA[s].cameraX,
					cameraY: this.ANIM_IDX_TO_DATA[s].cameraY,
					cameraZ: this.ANIM_IDX_TO_DATA[s].cameraZ,
					cameraNodeEulerX: this.ANIM_IDX_TO_DATA[s].cameraNodeEulerX,
					cameraNodeEulerY: this.ANIM_IDX_TO_DATA[s].cameraNodeEulerY
				};
			this.resultDataNpc = n, console.log("互动结果", this.resultDataNpc), this.startLoad()
		}
		enterResult() {
			BaseFacade.mGoal.commit(ACTION_ID.CP_TEST, 1), mgrCp.addTestCount(), console.log("cp结算", this.resultDataNpc, this.resultData), this.resultDataNpc ? mgrCp.unlockCp(this.resultDataNpc.npcId) : this.resultData && mgrCp.unlockNpc(this.resultData.npcId), this.buttonOk.interactable = !1, this.buttonCost.interactable = !1, cc.tween(this.nodeSelectBox).to(.3, cc.PROP.ALPHA0).call(() => {
				this.destroyed || (this.nodeSelectBox.visible = !1)
			}).start(), cc.clearTween(this.buttonOk.node), cc.tween(this.buttonOk.node).to(.3, cc.PROP.ALPHA0).call(() => {
				this.destroyed || (this.buttonOk.node.visible = !1)
			}).start(), cc.clearTween(this.buttonCost.node), cc.tween(this.buttonCost.node).to(.3, cc.PROP.ALPHA0).call(() => {
				this.destroyed || (this.buttonCost.node.visible = !1)
			}).start(), cc.clearTween(this.nodeBar), cc.tween(this.nodeBar).to(.5, {
				x: 0,
				y: -50
			}).call(() => {
				if (this.destroyed) return;
				let t = UiHelper.getSelfGlobalPos(this.nodeBar);
				mgrAlert.playParticleEffect("172", t, 1, .5), Timer.callLater(.3, () => {
					this.showAvatar.active = !1, this.nodeBar.visible = !1, this.effectBar.hide(), mgrAlert.playParticleEffect("160", {
						x: _G.canvasWidth / 2,
						y: _G.canvasHeight / 2
					}, 1, .5), Timer.callLater(1, () => {
						this.bShowSuc = !0, this.resLoader.isLoaded && this.showAnim()
					}, this)
				}, this)
			}).start()
		}
		startLoad() {
			this.resLoader = new ResLoader, this.resultData ? (mgrPart.addPartResList(mgrPart.partsWear, this.resLoader), this.resLoader.addModel(db.get_model_db(this.resultData.npcBodyModelId).resPath), this.resLoader.addModel(db.get_model_db(this.resultData.npcFaceModelId).resPath), this.resLoader.addModel(db.get_model_db(this.resultData.npcHairModelId).resPath), this.resLoader.addModel(db.get_effect_db(this.resultData.effectId).res), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.roleBodyAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.roleBodyAnimIds[1]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.roleFaceAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.roleFaceAnimIds[1]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.npcBodyAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.npcBodyAnimIds[1]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.npcFaceAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.npcFaceAnimIds[1]).path)) : this.resultDataNpc && (this.resLoader.addModel(db.get_model_db(this.resultDataNpc.nanBodyModelId).resPath), this.resLoader.addModel(db.get_model_db(this.resultDataNpc.nanFaceModelId).resPath), this.resLoader.addModel(db.get_model_db(this.resultDataNpc.nanHairModelId).resPath), this.resLoader.addModel(db.get_model_db(this.resultDataNpc.nvBodyModelId).resPath), this.resLoader.addModel(db.get_model_db(this.resultDataNpc.nvFaceModelId).resPath), this.resLoader.addModel(db.get_model_db(this.resultDataNpc.nvHairModelId).resPath), this.resLoader.addModel(db.get_effect_db(this.resultDataNpc.effectId).res), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nanBodyAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nanBodyAnimIds[1]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nanFaceAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nanFaceAnimIds[1]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nvBodyAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nvBodyAnimIds[1]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nvFaceAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nvFaceAnimIds[1]).path)), this.resLoader.addModel(db.get_effect_db("171").res), mgrAlert.openWait(this.resLoader, () => {
				this.bShowSuc && this.showAnim()
			})
		}
		showAnim() {
			if (!this.bShowed) {
				if (this.bShowed = !0, PanelDialogCat.tryOpenPanel(5), this.createRoleAndNpc(), this.resultData) {
					this.roleAvatar && (this.roleAvatar.active = !0, this.roleAvatar.playAnimations(this.resultData.roleBodyAnimIds, !0, 0), this.roleAvatar.playFaceAnims(this.resultData.roleFaceAnimIds[0], this.resultData.roleFaceAnimIds[1], 0, !0)), this.npcBodyModel && this.npcFaceModel && this.npcHairModel && (this.npcBodyModel.show(), this.npcFaceModel.show(), this.npcHairModel.show(), this.playerNpcIntro = new AnimatorFixedPlayer, this.playerNpcIntro.addModelAnim(this.npcBodyModel, this.resultData.npcBodyAnimIds[0]), this.playerNpcIntro.addModelAnim(this.npcFaceModel, this.resultData.npcFaceAnimIds[0]), this.playerNpcIntro.addTimeCallback(1, () => {
						this.playerNpcIdle = new AnimatorFixedPlayer, this.playerNpcIdle.addModelAnim(this.npcBodyModel, this.resultData.npcBodyAnimIds[1]), this.playerNpcIdle.addModelAnim(this.npcFaceModel, this.resultData.npcFaceAnimIds[1]), this.playerNpcIdle.play(!0)
					}), this.playerNpcIntro.play()), this.cameraNode.transform.localRotationEulerX = this.resultData.cameraNodeEulerX, this.cameraNode.transform.localRotationEulerY = this.resultData.cameraNodeEulerY, this.resultData.bRotate && Timer.callLater(1, () => {
						cc.tween(this.cameraNode.transform).by(15, {
							localRotationEulerY: -360
						}).repeatForever().start()
					}, this), this.camera.transform.localPositionX = this.resultData.cameraX, this.camera.transform.localPositionY = this.resultData.cameraY, cc.tween(this.camera.transform).to(1, {
						localPositionZ: this.resultData.cameraZ
					}).start();
					let t = _G.poolManager.get(Particle, this.resultData.effectId);
					t.setParent(this.scene3DBack), t.play(), this.effectNpc = t
				} else if (this.resultDataNpc) {
					this.nanBodyModel && this.nanFaceModel && this.nanHairModel && (this.nanBodyModel.show(), this.nanFaceModel.show(), this.nanHairModel.show(), this.playerNanIntro = new AnimatorFixedPlayer, this.playerNanIntro.addModelAnim(this.nanBodyModel, this.resultDataNpc.nanBodyAnimIds[0]), this.playerNanIntro.addModelAnim(this.nanFaceModel, this.resultDataNpc.nanFaceAnimIds[0]), this.playerNanIntro.addTimeCallback(1, () => {
						this.playerNanIdle = new AnimatorFixedPlayer, this.playerNanIdle.addModelAnim(this.nanBodyModel, this.resultDataNpc.nanBodyAnimIds[1]), this.playerNanIdle.addModelAnim(this.nanFaceModel, this.resultDataNpc.nanFaceAnimIds[1]), this.playerNanIdle.play(!0)
					}), this.playerNanIntro.play()), this.nvBodyModel && this.nvFaceModel && this.nvHairModel && (this.nvBodyModel.show(), this.nvFaceModel.show(), this.nvHairModel.show(), this.playerNvIntro = new AnimatorFixedPlayer, this.playerNvIntro.addModelAnim(this.nvBodyModel, this.resultDataNpc.nvBodyAnimIds[0]), this.playerNvIntro.addModelAnim(this.nvFaceModel, this.resultDataNpc.nvFaceAnimIds[0]), this.playerNvIntro.addTimeCallback(1, () => {
						this.playerNvIdle = new AnimatorFixedPlayer, this.playerNvIdle.addModelAnim(this.nvBodyModel, this.resultDataNpc.nvBodyAnimIds[1]), this.playerNvIdle.addModelAnim(this.nvFaceModel, this.resultDataNpc.nvFaceAnimIds[1]), this.playerNvIdle.play(!0)
					}), this.playerNvIntro.play()), this.cameraNode.transform.localRotationEulerX = this.resultDataNpc.cameraNodeEulerX, this.cameraNode.transform.localRotationEulerY = this.resultDataNpc.cameraNodeEulerY, this.resultDataNpc.bRotate && Timer.callLater(1, () => {
						cc.tween(this.cameraNode.transform).by(15, {
							localRotationEulerY: -360
						}).repeatForever().start()
					}, this), this.camera.transform.localPositionX = this.resultDataNpc.cameraX, this.camera.transform.localPositionY = this.resultDataNpc.cameraY, cc.tween(this.camera.transform).to(1, {
						localPositionZ: this.resultDataNpc.cameraZ
					}).start();
					let t = _G.poolManager.get(Particle, this.resultDataNpc.effectId);
					t.setParent(this.scene3DBack), t.play()
				}
				this.effectFaZhen || (this.effectFaZhen = _G.poolManager.get(Particle, "171"), this.effectFaZhen.setParent(this.scene3DBack)), this.effectFaZhen.play(), this.finishTime = Timer.time + 8, this.timer1 = Timer.callLater(6, t => {
					this.destroyed || mgrSdk.stopRecordVideo()
				}, this), this.timer2 = Timer.callLater(8, t => {
					this.destroyed || (this.finishTime = 0, mgrSdk.isVideoShareable ? mgrAlert.openPanelLoading(UI_NAME.PanelShare, {
						shareIdx: 10,
						desc: "他们是你心中的最佳拍档吗？快让朋友们来看看吧！",
						descWithoutShare: "恭喜！找到了你心中的最佳拍档！"
					}) : mgrAlert.alertDialog(mgrI18n.getText("panelCpTest.4")))
				}, this)
			}
		}
		createRoleAndNpc() {
			if (this.camera.transform.localPosition = new Laya.Vector3(.02, .7, 3.04), this.cameraNode.transform.localRotationEuler = new Laya.Vector3(-11, 0, 0), this.resultData) {
				this.roleAvatar = new RoleAvatar(mgrPart.partsWear), this.roleAvatar.transform.localPosition = new Laya.Vector3(0, 0, 0), this.roleAvatar.transform.localRotationEuler = new Laya.Vector3(0, 0, 0), this.scene3DBack.addChild(this.roleAvatar), this.roleAvatar.playIdle(), this.roleAvatar.playZaYang(), this.roleAvatar.active = !1, this.npcBodyModel = new GModel(this.resultData.npcBodyModelId), this.npcBodyModel.create(), this.npcBodyModel.initAnimator(), this.npcBodyModel.initPart(), this.npcBodyModel.setParent(this.scene3DBack), this.npcBodyModel.hide();
				let t = this.npcBodyModel.findChild("toufa_guadian");
				this.npcFaceModel = new GModel(this.resultData.npcFaceModelId), this.npcFaceModel.create(), this.npcFaceModel.initAnimator(), this.npcFaceModel.initPart(), this.npcFaceModel.setParent(t), this.npcFaceModel.hide(), this.npcFaceModel.setPosition(0, 0, 0), this.npcFaceModel.setRotation(0, 0, 0), this.npcHairModel = new GModel(this.resultData.npcHairModelId), this.npcHairModel.create(), this.npcHairModel.initPart(), this.npcHairModel.setParent(t), this.npcHairModel.hide()
			} else if (this.resultDataNpc) {
				this.nanBodyModel = new GModel(this.resultDataNpc.nanBodyModelId), this.nanBodyModel.create(), this.nanBodyModel.initAnimator(), this.nanBodyModel.initPart(), this.nanBodyModel.setParent(this.scene3DBack), this.nanBodyModel.hide();
				let t = this.nanBodyModel.findChild("toufa_guadian");
				this.nanFaceModel = new GModel(this.resultDataNpc.nanFaceModelId), this.nanFaceModel.create(), this.nanFaceModel.initAnimator(), this.nanFaceModel.initPart(), this.nanFaceModel.setParent(t), this.nanFaceModel.hide(), this.nanFaceModel.setPosition(0, 0, 0), this.nanFaceModel.setRotation(0, 0, 0), this.nanHairModel = new GModel(this.resultDataNpc.nanHairModelId), this.nanHairModel.create(), this.nanHairModel.initPart(), this.nanHairModel.setParent(t), this.nanHairModel.hide(), this.nvBodyModel = new GModel(this.resultDataNpc.nvBodyModelId), this.nvBodyModel.create(), this.nvBodyModel.initAnimator(), this.nvBodyModel.initPart(), this.nvBodyModel.setParent(this.scene3DBack), this.nvBodyModel.hide(), t = this.nvBodyModel.findChild("toufa_guadian"), this.nvFaceModel = new GModel(this.resultDataNpc.nvFaceModelId), this.nvFaceModel.create(), this.nvFaceModel.initAnimator(), this.nvFaceModel.initPart(), this.nvFaceModel.setParent(t), this.nvFaceModel.hide(), this.nvFaceModel.setPosition(0, 0, 0), this.nvFaceModel.setRotation(0, 0, 0), this.nvHairModel = new GModel(this.resultDataNpc.nvHairModelId), this.nvHairModel.create(), this.nvHairModel.initPart(), this.nvHairModel.setParent(t), this.nvHairModel.hide()
			}
		}
		on_click_button0() {
			this.clickItems(0)
		}
		on_click_button1() {
			this.clickItems(1)
		}
		on_click_button2() {
			this.clickItems(2)
		}
		on_click_button3() {
			this.clickItems(3)
		}
		on_click_button4() {
			this.clickItems(4)
		}
		on_click_button5() {
			this.clickItems(5)
		}
		on_click_button6() {
			this.clickItems(6)
		}
		on_click_button7() {
			this.clickItems(7)
		}
		on_click_button8() {
			this.clickItems(8)
		}
		on_click_buttonAnim0() {
			this.clickAnim(0)
		}
		on_click_buttonAnim1() {
			this.clickAnim(1)
		}
		on_click_buttonAnim2() {
			this.clickAnim(2)
		}
		on_click_buttonAnim3() {
			this.clickAnim(3)
		}
		on_click_buttonAnim4() {
			this.clickAnim(4)
		}
		on_click_buttonClose() {
			this.finishTime >= Timer.time ? _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelCpTest.5")) : this.close()
		}
		on_click_buttonOk() {
			GameStatistics.statisCommonEvent(2303, this.selectedAnimIdx), GameStatistics.statisCommonEvent(2304), mgrGuide.sendMsgKey("CP_CLICK_ANIM"), this.cpTestResult ? this.calcResult() : this.cpTestResultNpc && this.calcResultNpc(), mgrAdv.statisVideoClick("cp_test_show"), mgrAdv.dispatchAdv("cp_test_show", {}, !0), cc.clearTween(this.buttonOk.node), UiHelper.playRotCycle(this.buttonOk.node)
		}
		on_click_buttonCost() {
			BaseFacade.mItem.subItem("1000", 300, null) ? (GameStatistics.statisCommonEvent(2303, this.selectedAnimIdx), GameStatistics.statisCommonEvent(2304), mgrGuide.sendMsgKey("CP_CLICK_ANIM"), this.cpTestResult ? (GameStatistics.statisCommonEvent(2557, 1), this.calcResult()) : this.cpTestResultNpc && (GameStatistics.statisCommonEvent(2558, 1), this.calcResultNpc()), this.enterResult()) : (this.cpTestResult ? GameStatistics.statisCommonEvent(2557, 0) : this.cpTestResultNpc && GameStatistics.statisCommonEvent(2558, 0), mgrAlert.alertNotEnough("1000"))
		}
		on_click_buttonGuide() {}
		on_click_buttonDebugCp() {
			let t = this.labelDebugInputNpcId.text,
				e = this.labelDebugInputAnimIdx.text,
				a = parseInt(t),
				i = db.get_cp_npc_fixed(a);
			if (!i) return;
			let s = parseInt(e),
				n = {
					npcId: a,
					nanBodyModelId: i.nanBodyModelId,
					nanFaceModelId: i.nanFaceModelId,
					nanHairModelId: i.nanHairModelId,
					nvBodyModelId: i.nvBodyModelId,
					nvFaceModelId: i.nvFaceModelId,
					nvHairModelId: i.nvHairModelId,
					effectId: i.effectId,
					nanBodyAnimIds: [i.nanBodyAnimationIds[0][s], i.nanBodyAnimationIds[1][s]],
					nanFaceAnimIds: [i.nanFaceAnimationIds[0][s], i.nanFaceAnimationIds[1][s]],
					nvBodyAnimIds: [i.nvBodyAnimationIds[0][s], i.nvBodyAnimationIds[1][s]],
					nvFaceAnimIds: [i.nvFaceAnimationIds[0][s], i.nvFaceAnimationIds[1][s]],
					bRotate: this.ANIM_IDX_TO_DATA[s].bRotate,
					cameraX: this.ANIM_IDX_TO_DATA[s].cameraX,
					cameraY: this.ANIM_IDX_TO_DATA[s].cameraY,
					cameraZ: this.ANIM_IDX_TO_DATA[s].cameraZ,
					cameraNodeEulerX: this.ANIM_IDX_TO_DATA[s].cameraNodeEulerX,
					cameraNodeEulerY: this.ANIM_IDX_TO_DATA[s].cameraNodeEulerY
				};
			this.resultDataNpc = n, console.log("互动结果", this.resultDataNpc), this.labelDebugInputAnimIdx.visible = !1, this.labelDebugInputNpcId.visible = !1, this.buttonDebugCp.node.visible = !1, this.enterResult(), this.startLoad()
		}
	}
	class PanelCpTestPreview extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelCpTestPreview.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_spriteMy: "Laya.Sprite",
				cc_buttonRandom: "UIButton",
				cc_spriteRz: "Laya.Sprite",
				cc_buttonFixed: "UIButton",
				cc_buttonColorEggManDuoLa: "UIButton",
				cc_spriteManicure: "Laya.Sprite",
				cc_spriteHd: "Laya.Sprite",
				cc_imageGrayHeart1: "Laya.Image",
				cc_spriteHeart1: "Laya.Sprite",
				cc_imageGrayHeart2: "Laya.Image",
				cc_spriteHeart2: "Laya.Sprite",
				cc_imageGrayHeart3: "Laya.Image",
				cc_spriteHeart3: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_buttonCpBooks: "UIButton",
				cc_spriteTitle: "Laya.Sprite",
				cc_labelTitle: "Laya.Label"
			}, this.instOrBanner = new AdvInstOrBanner("enter_cp_preview", "banner_cp_preview"), this.enterMainWhenClose = !0, this.bAddHeart = !1, this.lastIndex = 0, this.bOpenManicure = !1
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteMy, "pnl_cp_test_preview_06.png"), mgrI18n.trySetI18nImage(this.spriteRz, "pnl_cp_test_preview_05.png"), mgrI18n.trySetI18nImage(this.spriteHd, "pnl_cp_test_preview_04.png"), mgrI18n.trySetI18nImage(this.buttonCpBooks.node, "pnl_cp_test_preview_01.png"), mgrI18n.trySetI18nImage(this.spriteTitle, "pnl_cp_test_preview_03.png"), UiHelper.addClickEvent(this.spriteManicure, this.onClick.bind(this), null, .5, !1);
			for (let t = 1; t <= 3; t++) {
				let e = this["imageGrayHeart" + t.toString()];
				e && (e.gray = !0, e.visible = !0)
			}
			this.refreshHeart(), this.checkColorEggManDuoLa(), this.registerMsg({
				MANICURE_HEART_CHANGE: this.onMsgManicureHeartChange.bind(this),
				JUMP_PANEL_BEFORE: this.onMsgJumpPanelBefore.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), super.dispose(), this.enterMainWhenClose && mgrGame.tryEnterMain()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t), t && this.refreshHeart()
		}
		onMsgManicureHeartChange(t) {
			this.bAddHeart = t && t.bAdd
		}
		onMsgJumpPanelBefore() {
			this.enterMainWhenClose = !1
		}
		refreshHeart() {
			let t = mgrCp.getTestCount();
			for (let e = 1; e <= 3; e++) {
				let a = this["spriteHeart" + e.toString()];
				if (a && (a.visible = t >= e), this.bAddHeart && e == t) {
					this.bAddHeart = !1;
					let t = a.x,
						e = a.y,
						i = new Laya.Point(0, 0);
					1 == this.lastIndex ? UiHelper.local2local(this.buttonRandom.node, this.spriteManicure, i) : UiHelper.local2local(this.buttonFixed.node, this.spriteManicure, i), a.pos(i.x, i.y - 100), cc.tween(a).to(.5, {
						x: t,
						y: e
					}).call(() => {
						if (this.destroyed) return;
						let t = a.localToGlobal(new Laya.Point(a.width / 2, a.height / 2));
						mgrAlert.playParticleEffect("195", t, 1, .5)
					}).to(.1, {
						scaleX: .6,
						scaleY: .6
					}).to(.1, {
						scaleX: .5,
						scaleY: .5
					}).start()
				}
			}
		}
		showFinger() {
			if (!this.fingerEffect) {
				let t = this.addEffect("135");
				t.setScale(1, 1, 1), t.followTarget(this.buttonFixed.node, this.cameraEffect, this.buttonFixed.node.width / 2), this.fingerEffect = t
			}
			this.fingerEffect.show(), this.fingerEffect.play()
		}
		hideFinger() {
			this.fingerEffect && (this.fingerEffect.stop(), this.fingerEffect.hide())
		}
		checkColorEggManDuoLa() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.MAN_DUO_LA, EGGS_STEP.THIRD) || (this.buttonColorEggManDuoLa.node.visible = !1)
		}
		on_click_buttonRandom() {
			GameStatistics.statisCommonEvent(2502), mgrAlert.openGameLoading(UI_NAME.PanelCpTest, {
				index: 1
			}), this.hideFinger(), this.lastIndex = 1
		}
		on_click_buttonFixed() {
			GameStatistics.statisCommonEvent(2501), mgrAlert.openGameLoading(UI_NAME.PanelCpTest, {
				index: 2
			}), this.hideFinger(), this.lastIndex = 2
		}
		on_click_buttonClose() {
			this.close()
		}
		onClick() {
			if (this.bOpenManicure) return;
			mgrCp.getTestCount() < 3 ? (GameStatistics.statisCommonEvent(2580, 0), mgrAlert.alertDialog(mgrI18n.getText("panelCpTestPreview.3"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				this.showFinger(), GameStatistics.statisCommonEvent(2580, 1)
			}, null, mgrI18n.getText("panelCpTestPreview.4"), null)) : (this.bOpenManicure = !0, mgrAlert.openPanelLoading(UI_NAME.PanelManicurePreview, {
				fOnOpend: () => {
					this.bOpenManicure = !1
				}
			}, () => {}))
		}
		on_click_buttonCpBooks() {
			mgrAlert.openPanelLoading(UI_NAME.PanelCpBooks)
		}
		on_click_buttonColorEggManDuoLa() {
			this.buttonColorEggManDuoLa.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggManDuoLa.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggManDuoLa.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.man_du_la)
		}
	}
	class PanelDanceAnswer extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelDanceAnswer.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeLayoutLabel: "Laya.Box",
				cc_labelCankao: "Laya.Label",
				cc_bg: "Laya.Box",
				cc_titleLabel: "Laya.Label",
				cc_nodeGou: "Laya.Sprite",
				cc_node1: "Laya.Box",
				cc_node2: "Laya.Box",
				cc_node3: "Laya.Box",
				cc_node4: "Laya.Box",
				cc_node5: "Laya.Box",
				cc_node6: "Laya.Box",
				cc_node7: "Laya.Box",
				cc_node8: "Laya.Box",
				cc_node9: "Laya.Box",
				cc_nodeTips: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_buttonSure: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_dance_answer")
		}
		buildUi() {
			let t = this.context.danceAnimId,
				e = db.get_dance_anim_db(t);
			if (!e) return;
			this.labelCankao.visible = !0, this.labelCankao.text = mgrI18n.getText(e.tlite);
			let a = this["node" + e.tipPos.toString()];
			a && (a.addChild(this.nodeTips), this.nodeTips.pos(0, 0)), this.nodeGou.x = 24 + 48 * (Mathf.random(7) - 1), this.titleLabel.text = mgrI18n.getText(e.tlite)
		}
		dispose() {
			this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonSure() {
			this.context && this.context.fOnJump && this.context.fOnJump(), this.close()
		}
	}
	class PanelDancePastRole extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelDancePastRole.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_scrollView: "ReuseScrollList",
				cc_buttonClose: "UIButton",
				cc_sprite1: "Laya.Sprite",
				cc_nodeLayoutTips: "Laya.Box",
				cc_labelCankao: "Laya.Label",
				cc_spriteDanceIcon: "Laya.Sprite",
				cc_barMask: "UIBarMask",
				cc_labelProgress: "Laya.Label",
				cc_buttonOk: "UIButton",
				cc_buttonAdv: "UIButton",
				cc_topLeftNode: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_dance_past_role")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.sprite1, "pnl_dance_05.png"), this.labelCankao.visible = !0, this.labelCankao.text = mgrI18n.getText("panelDancePastRole.1");
			let t = mgrGame.getRecordDanceCount(DANCE_ANSWER_ANIM_ID);
			this.barMask.progress = t / 3, this.labelProgress.text = `${Math.min(t,3)}/3`;
			let e = mgrGame.checkDanceIsTested(DANCE_ANSWER_ANIM_ID),
				a = mgrGame.getRecordAdDanceAnswer(DANCE_ANSWER_ANIM_ID),
				i = mgrAdv.checkActive("dance_answer");
			this.buttonOk.node.visible = e || a, this.buttonAdv.node.visible = !e && !a && i, this.buttonAdv.node.visible && mgrAdv.statisVideoShow("dance_answer"), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg();
			let s = this.addEffect("199");
			s.followTarget(this.spriteDanceIcon, this.cameraEffect, this.spriteDanceIcon.width / 2 - 6, this.spriteDanceIcon.height / 2 - 5), s.play()
		}
		dispose() {
			this.startProcMsg(), this.instOrBanner.dispose(), this.scrollView && this.scrollView.clearAllItems(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			"dance_answer" == t.advName && t.params && t.params.danceAnimId == DANCE_ANSWER_ANIM_ID && (mgrGame.addRecordAdDanceAnswer(DANCE_ANSWER_ANIM_ID), this.buttonOk.node.visible = !0, this.buttonAdv.node.visible = !1, this.showAnswer())
		}
		showAnswer() {
			mgrAlert.openPanelLoading(UI_NAME.PanelDanceAnswer, {
				danceAnimId: DANCE_ANSWER_ANIM_ID,
				fOnJump: () => {
					GameStatistics.statisCommonEvent(2102), mgrAlert.openPanelLoading(UI_NAME.PanelDanceDraw), this.close()
				}
			})
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonOk() {
			this.showAnswer()
		}
		on_click_buttonAdv() {
			mgrAdv.statisVideoClick("dance_answer"), mgrAdv.dispatchAdv("dance_answer", {
				danceAnimId: DANCE_ANSWER_ANIM_ID
			}, !0)
		}
	}
	class DancePreDestinationItem extends ViewBase {
		constructor(t) {
			super(t), this.resourceName = "res/prefab/DancePreDestinationItem.json", this._exportNodeInfo = {
				cc_imageBg: "Laya.Image",
				cc_spriteNeverTest: "Laya.Sprite",
				cc_stars: "UIHVLayout",
				cc_buttonShow: "UIButton",
				cc_buttonAdvShow: "UIButton"
			}, this.create()
		}
		onCreateComplete() {}
		refreshItem(t, e) {
			if (!this.callable) return this.safeCall(this.refreshItem, t, e);
			let a = db.get_dance_anim_db(t);
			if (!a) return;
			this.danceAnimId = t, this.imageBg.skin = a.iconTexture, UiHelper.setStars(this.stars, a.star, 5);
			let i = mgrGame.checkDanceIsTested(t),
				s = mgrGame.getRecordAdDanceAnswer(t);
			mgrI18n.trySetI18nImage(this.spriteNeverTest, "pnl_dance_01.png"), this.spriteNeverTest.visible = !i, this.imageBg.gray = !i, this.buttonShow.node.visible = i || s, this.buttonAdvShow.node.visible = !i && !s && e
		}
		on_click_buttonShow() {
			this.danceAnimId && this.context && this.context.fOnClickShow && this.context.fOnClickShow(this.danceAnimId)
		}
		on_click_buttonAdvShow() {
			this.danceAnimId && (mgrAdv.statisVideoClick("dance_answer"), mgrAdv.dispatchAdv("dance_answer", {
				danceAnimId: this.danceAnimId
			}, !0))
		}
	}
	class PanelDancePreDestination extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelDancePreDestination.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_scrollView: "ReuseScrollList",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.danceAnimIds = [], this.instOrBanner = new AdvInstOrBanner("", "banner_dance_pre_destination")
		}
		buildUi() {
			this.scrollView.height = 720 + _G.canvasFitHeight - 1024;
			let t = db.get_dance_anim_db_map();
			for (let e in t) {
				let a = t[e];
				a && this.danceAnimIds.push(a.id)
			}
			this.scrollView.onItemCreate = (() => {
				let t = new DancePreDestinationItem({
					fOnClickShow: this.onClickShow.bind(this)
				});
				return t.create(), t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			});
			let e = mgrAdv.checkActive("dance_answer");
			mgrAdv.statisVideoShow("dance_answer"), this.scrollView.onItemChange = ((t, a) => {
				t.refreshItem(this.danceAnimIds[a], e)
			}), this.scrollView.updateList(this.danceAnimIds.length), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.startProcMsg(), this.instOrBanner.dispose(), this.scrollView && this.scrollView.clearAllItems(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			"dance_answer" == t.advName && t.params && t.params.danceAnimId && (mgrGame.addRecordAdDanceAnswer(t.params.danceAnimId), this.onClickShow(t.params.danceAnimId), this.scrollView.updateList(this.danceAnimIds.length))
		}
		onClickShow(t) {
			mgrAlert.openPanelLoading(UI_NAME.PanelDanceAnswer, {
				danceAnimId: t,
				fOnJump: () => {
					GameStatistics.statisCommonEvent(2102), mgrAlert.openPanelLoading(UI_NAME.PanelDanceDraw), this.close()
				}
			})
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelDancePreview extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelDancePreview.json", this.panelStyle = 1, this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_spriteNpc: "Laya.Image",
				cc_nodeNpcEffect: "Laya.Box",
				cc_nodeDanceNew: "Laya.Sprite",
				cc_nodeLayoutDanceName: "Laya.Box",
				cc_labelCankaoDanceName: "Laya.Label",
				cc_nodeBtnGo: "Laya.Sprite",
				cc_nodeRoleNew: "Laya.Sprite",
				cc_nodeLayoutRoleName: "Laya.Box",
				cc_labelCankaoRoleName: "Laya.Label",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_buttonDancePre: "UIButton",
				cc_buttonPastRole: "UIButton",
				cc_buttonColorEgg: "UIButton",
				cc_topCenterNode: "Laya.Sprite",
				cc_sprite2: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_dance_pre", "banner_dance_pre"), this.enterMainWhenClose = !0, this.effects = []
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonDancePre.node, "pnl_dance_02.png"), mgrI18n.trySetI18nImage(this.buttonPastRole.node, "pnl_dance_04.png"), mgrI18n.trySetI18nImage(this.buttonColorEgg.node, "pnl_shoe_01.png"), mgrI18n.trySetI18nImage(this.sprite2, "pnl_dance_06.png"), this.labelCankaoDanceName.visible = !0, this.labelCankaoDanceName.text = mgrI18n.getText("panelDancePreview.3"), UiHelper.addClickEvent(this.nodeDanceNew, this.onClickDanceNew.bind(this), null, .5, !1), this.labelCankaoRoleName.visible = !0, this.labelCankaoRoleName.text = mgrI18n.getText("panelDancePreview.4"), UiHelper.addClickEvent(this.nodeRoleNew, this.onClickRoleNew.bind(this), null, .5, !1), mgrAdv.checkActive("get_shoe_color_egg") || (this.buttonColorEgg.node.visible = !1), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELDANCEPREVIEW_BUTTONTODANCEDRAW, this.nodeDanceNew), this.registerMsg({
				DANCE_ROLE_START_ANIM: this.onMsgDanceRoleStartAnim.bind(this),
				JUMP_PANEL_BEFORE: this.onMsgJumpPanelBefore.bind(this)
			}), this.startProcMsg(), GameStatistics.statisOnStageStart(13002);
			let t = this.addEffect("192");
			t.play(), this.effects.push(t), (t = this.addEffect("198")).followTarget(this.nodeDanceNew, this.cameraEffect), t.play(), this.effects.push(t), (t = this.addEffect("198")).followTarget(this.nodeRoleNew, this.cameraEffect), t.play(), this.effects.push(t), (t = this.addEffect("201")).followTarget(this.nodeNpcEffect, this.cameraEffect), t.play(), this.effects.push(t)
		}
		dispose() {
			this.stopProcMsg(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELDANCEPREVIEW_BUTTONTODANCEDRAW), this.instOrBanner.dispose(), super.dispose(), this.enterMainWhenClose && mgrGame.tryEnterMain()
		}
		onFocus(t) {
			if (super.onFocus(t), this.instOrBanner.onFocus(t), t)
				for (let t = 0; t < this.effects.length; t++) this.effects[t] && this.effects[t].play()
		}
		onDialogOpenAnim(t) {
			console.log("onDialogOpenAnim");
			let e = this.spriteNpc.x;
			this.spriteNpc.x -= 768, cc.tween(this.spriteNpc).to(.5, {
				x: e
			}, {
				easing: cc.Ease.backOut
			}).call(() => {}).start(), e = this.topLeftNode.x, this.topLeftNode.x -= 200, cc.tween(this.topLeftNode).to(.3, {
				x: e
			}, {
				easing: cc.Ease.backOut
			}).call(() => {}).start();
			let a = this.topCenterNode.y;
			this.topCenterNode.y -= 200, cc.tween(this.topCenterNode).to(.3, {
				y: a
			}, {
				easing: cc.Ease.backOut
			}).call(() => {}).start(), e = this.nodeDanceNew.x, a = this.nodeDanceNew.y, this.nodeDanceNew.x = 0, this.nodeDanceNew.y = -350, this.nodeDanceNew.scale(0, 0), cc.tween(this.nodeDanceNew).delay(.5).parallel(cc.tween().to(.4, {
				x: e,
				y: a
			}), cc.tween().to(.4, cc.PROP.SCALE1, cc.OPTION.BACK_OUT)).start(), e = this.nodeRoleNew.x, a = this.nodeRoleNew.y, this.nodeRoleNew.x = 0, this.nodeRoleNew.y = -350, this.nodeRoleNew.scale(0, 0), cc.tween(this.nodeRoleNew).delay(.5).parallel(cc.tween().to(.4, {
				x: e,
				y: a
			}), cc.tween().to(.4, cc.PROP.SCALE1, cc.OPTION.BACK_OUT)).call(() => {
				t(), this.scheduleOnce(.05, function() {
					mgrGuide.dispatchGuide(GUD_EVENT.PANEL_DANCE_PREVIEW)
				})
			}).start()
		}
		onMsgDanceRoleStartAnim() {
			this.enterMainWhenClose = !1, this.on_click_buttonClose()
		}
		onMsgJumpPanelBefore() {
			this.enterMainWhenClose = !1
		}
		onClickDanceNew() {
			GameStatistics.statisCommonEvent(2102), mgrAlert.openPanelLoading(UI_NAME.PanelDanceDraw)
		}
		onClickRoleNew() {
			GameStatistics.statisCommonEvent(2601), mgrAlert.openPanelLoading(UI_NAME.PanelShoe)
		}
		on_click_buttonClose() {
			GameStatistics.statisOnStageEnd(13002), this.close()
		}
		on_click_buttonDancePre() {
			mgrAlert.openPanelLoading(UI_NAME.PanelDancePreDestination)
		}
		on_click_buttonPastRole() {
			GameStatistics.statisCommonEvent(2602), mgrAlert.openPanelLoading(UI_NAME.PanelDancePastRole)
		}
		on_click_buttonColorEgg() {
			GameStatistics.statisCommonEvent(2604), mgrAlert.openPanelLoading(UI_NAME.PanelShoeColorEggs)
		}
	}
	class PanelDiamondGift extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelDiamondGift.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_superNode: "Laya.Sprite",
				cc_sprite1: "Laya.Sprite",
				cc_superCount: "Laya.Label",
				cc_buttonSuper: "UIButton",
				cc_superPrice: "Laya.Label",
				cc_freeNode: "Laya.Sprite",
				cc_sprite2: "Laya.Sprite",
				cc_sprite3: "Laya.Sprite",
				cc_freeCount: "Laya.Label",
				cc_buttonFree: "UIButton",
				cc_textButtonFreeText: "Laya.Text",
				cc_spriteButtonFreeAdFlag: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_gift")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.sprite1, "pnl_gift_04.png"), mgrI18n.trySetI18nImage(this.sprite2, "pnl_gift_02.png"), mgrI18n.trySetI18nImage(this.sprite3, "pnl_gift_05.png"), this.textButtonFreeText.text = mgrI18n.getText("shopItemCurrency.1");
			if (this.superNode.visible = !1, this.freeNode.y = 0, !mgrAdv.getActive("shop_item")) return console.log("没有获取钻石的渠道"), void this.close();
			if (mgrAdv.getActive("shop_item")) {
				mgrAdv.statisVideoShow("shop_item");
				let t = db.get_pay_db(PAY_ID.FREE_DIAMON);
				this.freeDiamondCount = t.getCount, this.freeCount.text = "*" + this.freeDiamondCount, UiHelper.playBreathe(this.buttonFree.node), this.registerMsg({
					[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
				}), this.startProcMsg()
			} else this.freeNode.visible = !1, this.superNode.y = 0;
			Mathf.randomEnable(db.cop.ad_flag_hide_ratios[0] || 0) ? (this.spriteButtonFreeAdFlag.visible = !1, this.textButtonFreeText.x -= this.spriteButtonFreeAdFlag.width / 2) : this.spriteButtonFreeAdFlag.visible = !0
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			if ("shop_item" == t.advName && "diamond" == t.params) {
				this.close();
				let t = {
					itemId: "1000",
					count: this.freeDiamondCount
				};
				mgrAlert.addAndAlert(t, 30)
			}
		}
		on_click_buttonSuper() {}
		on_click_buttonFree() {
			mgrAdv.statisVideoClick("shop_item"), mgrAdv.dispatchAdv("shop_item", "diamond", !0)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelDream extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelDream.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_roleSprite: "Laya.Image",
				cc_topNode: "Laya.Sprite",
				cc_suitNode: "Laya.Sprite",
				cc_suitBg: "Laya.Image",
				cc_nameLabel: "Laya.Label",
				cc_barMask: "UIBarMask",
				cc_heartIcon: "Laya.Sprite",
				cc_barValue: "Laya.Label",
				cc_suitItem: "Laya.Sprite",
				cc_scrollViewSuit: "ReuseScrollList",
				cc_headNode: "Laya.Sprite",
				cc_buttonColorEggManDuoLa: "UIButton",
				cc_scrollViewHead: "ReuseScrollList",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_dream", ""), this.enterMainWhenClose = !0
		}
		buildUi() {
			this.barMask.node.visible = !1, this.heartIcon.visible = !1, this.barValue.visible = !1, GameStatistics.statisOnStageStart(7506);
			let t = _G.canvasFitWidth - 576;
			this.suitBg.width += t, this.scrollViewSuit.width += t;
			let e = mgrDream.getAllRole();
			e.sort(sort_role_id_by_order), this.scrollViewHead.onItemCreate = function() {
				let t = new HeadItem;
				return t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}, this.scrollViewHead.onItemChange = ((t, a) => {
				t.setData(e[a], this.curRoleId == e[a])
			}), this.scrollViewHead.updateList(e.length);
			let a = !1;
			this.scrollViewSuit.onItemCreate = (() => {
				let t = new DreamSuitItem;
				return t.createFromNode(UiHelper.cloneSprite(this.suitItem)), a || (a = !0, t.regGuide()), t
			}), this.scrollViewSuit.onItemChange = ((t, e) => {
				t.setData(this.suits[e])
			}), this.refresh(e[0]), this.checkColorEggManDuoLa(), this.registerMsg({
				UI_CLICK_HEAD_ITEM: this.onMsgClickHeadItem.bind(this),
				UI_CLICK_ROLE_SUIT: this.onMsgClickRoleSuit.bind(this),
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				JUMP_PANEL_BEFORE: this.onMsgJumpPanelBefore.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.scrollViewHead && this.scrollViewHead.clearAllItems(), this.scrollViewSuit && this.scrollViewSuit.clearAllItems(), super.dispose(), this.enterMainWhenClose && mgrGame.tryEnterMain(), GameStatistics.statisOnStageEnd(7506)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t), t && this.curSuitId && (this.refreshHeart(this.bPartChange), this.curSuitId = null)
		}
		regGuide() {
			mgrGuide.saveGuideStep(GUD_EVENT.GOTO_DREAM, 0), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_DREAM) || GameStatistics.statisCommonEvent(7101), mgrGame.tryOpenPanelRankVideoTips(4)
		}
		onDialogOpenAnim(t) {
			this.topNode.y = -200, cc.tween(this.topNode).to(.4, {
				y: 0
			}, cc.OPTION.BACK_OUT).start(), this.headNode.x = -150, this.suitNode.x = -650, cc.tween(this.headNode).delay(.2).to(.3, {
				x: 0
			}, cc.OPTION.SINE_IN).start(), cc.tween(this.suitNode).delay(.4).to(.4, {
				x: 0
			}, cc.OPTION.SINE_OUT).call(t).start()
		}
		onMsgClickHeadItem(t) {
			this.refresh(t)
		}
		onMsgClickRoleSuit(t) {
			this.curSuitId = t
		}
		onMsgItemChange(t) {
			2 == t.itemDb.type && 1 == t.itemDb.subType && (this.bPartChange = !0)
		}
		onMsgJumpPanelBefore() {
			this.enterMainWhenClose = !1
		}
		refresh(t) {
			this.curRoleId = t;
			let e = db.get_role_db(t);
			this.nameLabel.text = mgrI18n.getText(e.tlite), this.roleSprite.skin = e.image, this.suits = e.suits, this.scrollViewSuit.updateList(this.suits.length), this.refreshHeart(!1)
		}
		refreshHeart(t) {
			mgrDream.getRoleHeard(this.curRoleId), mgrDream.getAllPartCount(this.curRoleId)
		}
		checkColorEggManDuoLa() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.MAN_DUO_LA, EGGS_STEP.SECOND) || (this.buttonColorEggManDuoLa.node.visible = !1)
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonColorEggManDuoLa() {
			this.buttonColorEggManDuoLa.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggManDuoLa.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggManDuoLa.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.man_du_la)
		}
	}
	class HeadItem extends ViewBase {
		constructor() {
			super(), this.resourceName = "HeadItem", this.create()
		}
		create() {
			let t = (new Laya.Sprite).size(95, 85);
			this.icon = t.addChild(new Laya.Sprite).pos(5, 2, !0).size(85, 85), this.focus = t.addChild(new Laya.Sprite).pos(3, 0).size(89, 89).loadImage("res/ui/pnl_dream/focus.png"), this.tip = t.addChild(new Laya.Sprite).pos(60, 0).loadImage("res/ui/btns/tip.png"), this.createFromNode(t)
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this)), this.registerMsg({
				UI_CLICK_HEAD_ITEM: this.onMsgClickHeadItem.bind(this),
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this)
			}), this.startProcMsg(), UiHelper.playFadein(this.resNode)
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgClickHeadItem(t) {
			this.focus.visible = t == this.roleId
		}
		onMsgItemChange(t) {
			this.roleId && (mgrDream.checkRoleTip(this.roleId) ? (this.tip.visible = !1, UITip.playTipAnim(this.tip)) : (cc.clearTween(this.tip), this.tip.visible = !1))
		}
		setData(t, e) {
			this.roleId = t;
			let a = db.get_role_db(t);
			this.icon.loadImage(a.head), this.focus.visible = e, mgrDream.checkRoleTip(t) ? (this.tip.visible = !1, UITip.playTipAnim(this.tip)) : (cc.clearTween(this.tip), this.tip.visible = !1)
		}
		onClick() {
			this.roleId && _G.sendMsg("UI_CLICK_HEAD_ITEM", this.roleId)
		}
	}
	class DreamSuitItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "DreamSuitItem"
		}
		onCreateComplete() {
			this.icon = this.getChildImage("icon"), this.name = this.getChildLabel("name"), this.bar = this.getChildSprite("barBg/bar").addComponent(UIBarMask), this.bar.style = UIBarMask.STYLE_VERTICAL, this.barValue = this.getChildLabel("barBg/value"), this.tip = this.getChildSprite("tip"), UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this)), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				TALK_FINISH: this.onMsgTalkFinish.bind(this)
			}), this.startProcMsg()
		}
		onMsgItemChange(t) {
			this.suitId && (2 == t.itemDb.type && 1 == t.itemDb.subType ? this.setData(this.suitId) : mgrDream.checkSuitTip(this.suitId) ? (this.tip.visible = !1, UITip.playTipAnim(this.tip)) : (cc.clearTween(this.tip), this.tip.visible = !1))
		}
		onMsgTalkFinish(t) {
			mgrDream.checkSuitTip(this.suitId) ? (this.tip.visible = !1, UITip.playTipAnim(this.tip)) : (cc.clearTween(this.tip), this.tip.visible = !1)
		}
		dispose() {
			this.stopProcMsg(), super.dispose(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELDREAM_SUITITEM0)
		}
		setData(t) {
			this.suitId = t;
			let e = db.get_suit_db(t);
			this.icon.skin = e.icon;
			let a = mgrDream.hasPartCount(t);
			this.bar.progress = a / e.lotteryParts.length, this.barValue.text = (a / e.lotteryParts.length * 100 + .5 | 0) + "%", this.buttonState = mgrDream.isUnlockSuit(t), mgrDream.checkSuitTip(t) ? (this.tip.visible = !1, UITip.playTipAnim(this.tip)) : (cc.clearTween(this.tip), this.tip.visible = !1)
		}
		regGuide() {
			mgrGuide.registerGuideNode(GUD_REG_NODE.PANELDREAM_SUITITEM0, this.resNode)
		}
		onClick() {
			this.suitId && (GameStatistics.statisCommonEvent(3022), mgrAlert.openGameLoading(UI_NAME.PanelFishGame, this.suitId), _G.sendMsg("UI_CLICK_ROLE_SUIT", this.suitId))
		}
	}
	class PanelDialogEgg extends PanelDialog {
		constructor() {
			super(...arguments), this.instOrBanner = new AdvInstOrBanner("", "banner_egg_dialog")
		}
	}
	class mgrEgg extends _mgrBase {
		static onload() {
			BaseFacade.mSwitch.dailyActive && FileRecord.setData("egg_count", 0)
		}
		static get eggCount() {
			return FileRecord.getData("egg_count") || 0
		}
		static set eggCount(t) {
			FileRecord.setData("egg_count", t)
		}
		static get isEggDiamond() {
			return this.eggCount < db.cop.egg_diamond_count
		}
		static get isEggEnable() {
			return this.eggCount < db.cop.egg_count_max
		}
	}
	class PanelEgg extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelEgg.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_timeLabel: "Laya.Label",
				cc_timeBar: "UIBarMask",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_bottomNode: "Laya.Sprite",
				cc_buttonGet: "UIButton"
			}, this._instOrBanner = new AdvInstOrBanner("", ""), this.bUpdateTime = !1, this.hasAdv = !0
		}
		buildUi() {
			GameStatistics.statisCommonEvent(7313), this.hasAdv = !1, this.timeLabel.font = GConfig.bmf_score, this.timeLabel.text = db.game_cnf.egg_click_time + "", this.leftTime = db.game_cnf.egg_click_time, this.timeBar.progress = 0, this.buttonGet.clickDelta = 0, this.setClickCount(0), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), this.buttonGet.interactable = !1, this.scheduleOnce(.3, this.alertConfirm)
		}
		dispose() {
			this.stopProcMsg(), this._instOrBanner.dispose(), this._fingerAnim && (_G.poolManager.put(this._fingerAnim), this._fingerAnim = null), super.dispose(), mgrRankHuDong.giftFinish()
		}
		onFocus(t) {
			super.onFocus(t), this._instOrBanner.onFocus(t)
		}
		update() {
			if (this.timeLabel.text = Math.ceil(this.leftTime) + "", this.bUpdateTime) {
				let t = Timer.deltaTime;
				this.leftTime -= t, this.leftTime < 0 && (this.bUpdateTime = !1, this.hasAdv ? (this.hasAdv = !1, this.close()) : this.close())
			}
		}
		onMsgAdvShowSuc(t) {
			"free_egg" == t.advName && (this.leftTime = db.game_cnf.egg_click_time, this.setClickCount(this.curClickCount))
		}
		setClickCount(t) {
			this.curClickCount = t, t >= db.game_cnf.egg_click_count && (this.buttonGet.interactable = !1, this.bUpdateTime = !1)
		}
		alertConfirm() {
			let t;
			t = mgrEgg.isEggDiamond ? mgrI18n.getText("panelEgg.5") : mgrI18n.getText("panelEgg.6");
			let e = {
				desc: t = String.format(mgrI18n.getText("panelEgg.7"), db.game_cnf.egg_click_time),
				title: mgrI18n.getText("schoolYearbookItem.2")
			};
			mgrAlert.openPanelLoading(PanelDialogEgg, e), this.buttonGet.interactable = !0
		}
		onGetAward() {
			let t;
			t = mgrEgg.isEggDiamond ? {
				itemId: "1000",
				count: 10
			} : {
				itemId: "1001",
				count: 1e3
			}, mgrEgg.eggCount++, mgrAlert.addAndAlert(t, 38, () => {
				this.close()
			})
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonGet() {
			this.bUpdateTime = !0, this.setClickCount(this.curClickCount + 1);
			let t = this.curClickCount / db.game_cnf.egg_click_count;
			cc.clearTween(this.timeBar), cc.tween(this.timeBar).to(.1, {
				progress: t
			}).call(() => {
				this.curClickCount >= db.game_cnf.egg_click_count ? this.onGetAward() : this.buttonGet.interactable = !0
			}).start()
		}
	}
	class PanelFind extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelFind.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_other: "Laya.Image",
				cc_spriteIcon1: "Laya.Sprite",
				cc_spriteIcon2: "Laya.Sprite",
				cc_spriteIcon3: "Laya.Sprite",
				cc_spriteIcon4: "Laya.Sprite",
				cc_spriteIcon5: "Laya.Sprite",
				cc_spriteIcon6: "Laya.Sprite",
				cc_otherSprite: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_find")
		}
		buildUi() {
			let t = [this.spriteIcon1, this.spriteIcon2, this.spriteIcon3, this.spriteIcon4, this.spriteIcon5, this.spriteIcon6];
			for (let e = 0; e < t.length; e++) {
				t[e].visible = !1
			}
			if (mgrSdk.findmeImageUrl)
				for (let e = 0; e < t.length; e++) {
					t[e].loadImage(mgrSdk.findmeImageUrl)
				}
			switch (mgrSdk.h5_channel) {
				case "weixin":
					this.otherSprite.loadImage("res/ui/pnl_chn/weixin.png"), this.spriteIcon4.visible = !0, this.spriteIcon5.visible = !0, this.spriteIcon6.visible = !0;
					break;
				case "baidu":
					this.otherSprite.loadImage("res/ui/pnl_chn/baidu.png");
					break;
				case "toutiao":
					this.otherSprite.loadImage("res/ui/pnl_chn/toutiao.png"), this.spriteIcon2.visible = !0, this.spriteIcon3.visible = !0;
					break;
				case "douyin":
					this.otherSprite.loadImage("res/ui/pnl_chn/douyin.png"), this.spriteIcon1.visible = !0;
					break;
				default:
					this.close()
			}
		}
		dispose() {
			this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelFishGet extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelFishGet.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_fishNode: "Laya.Sprite",
				cc_buttonOk: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_fish_get", "banner_fish_get")
		}
		buildUi() {
			this.fish = _G.poolManager.get(Spine, db.SPINE_DB_ID.jinyu), this.fish.setParent(this.fishNode), this.fish.setPosition(0, 0), this.fish.setScale(1, 1), this.fish.playDefaultAnim(), MoreGameBanner.setBannerVisible(!0)
		}
		dispose() {
			this.instOrBanner.dispose(), MoreGameBanner.setBannerVisible(!1), this.fish && _G.poolManager.put(this.fish), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		on_click_buttonOk() {
			mgrAlert.openPanelLoading(UI_NAME.PanelFishShow, this.context, () => {
				this.close()
			})
		}
	}
	class PanelFishShow extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelFishShow.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_animNode: "Laya.Sprite",
				cc_paopaoNode: "Laya.Sprite",
				cc_itemIcon: "Laya.Sprite",
				cc_stars: "UIHVLayout"
			}
		}
		buildUi() {
			this.fish = _G.poolManager.get(Spine, db.SPINE_DB_ID.jinyu), this.fish.setParent(this.animNode), this.fish.setPosition(0, 0), this.fish.setScale(1.2, 1.2), this.fish.playDefaultAnim();
			let t = this.addEffect("140"),
				e = new Laya.Vector3(_G.canvasWidth / 2, _G.canvasHeight / 2, 0),
				a = new Laya.Vector3;
			this.global2camer(e, a), t.play(a);
			let i = mgrDream.randomNextPart(this.context);
			this.partId = i;
			let s = db.get_item_db(i);
			this.itemIcon.loadImage(s.icon), UiHelper.setStars(this.stars, s.quality, 5), this.playUiAnim(), this.resNode.on(Laya.Event.MOUSE_DOWN, this, function() {})
		}
		dispose() {
			this.fish && (_G.poolManager.put(this.fish), this.fish.setAlpha(1)), super.dispose()
		}
		playUiAnim() {
			this.bg.alpha = 0, cc.tween(this.bg).to(.2, cc.PROP.ALPHA1).start(), this.paopaoNode.alpha = 0, this.paopaoNode.scale(0, 0), this.animNode.alpha = 0;
			let t = this.animNode.y;
			this.animNode.y = t + 300;
			let e = this.addEffect("147");
			e.followTarget(this.animNode, this.cameraEffect), e.play();
			let a = UiHelper.getSelfGlobalPos(this.animNode, new Laya.Point);
			mgrAlert.playParticleEffect("139", a, 2, .5), cc.tween(this.animNode).to(1, {
				alpha: 1,
				y: t
			}, cc.OPTION.SINE_OUT).call(() => {
				this.fish.runTween(cc.tween().to(.1, cc.PROP.ALPHA0)), cc.tween(this.paopaoNode).to(.3, cc.PROP.SCALE_ALPHA1, cc.OPTION.BACK_OUT).delay(.2).call(() => {
					this.onAnimFinish()
				}).start()
			}).delay(.1).start()
		}
		onAnimFinish() {
			let t = mgrDream.getNextPrice(this.context);
			BaseFacade.mItem.subItem("1001", t, 31), BaseFacade.mGoal.commit(ACTION_ID.GET_FISH), mgrAlert.addAndAlert({
				itemId: this.partId,
				count: 1
			}, null, this.close.bind(this), !0, 1)
		}
	}
	class PanelFollow extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.DIALOG, this.resourceName = "res/ui/PanelFollow.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_rewardListNode: "Laya.Sprite",
				cc_reward1: "Laya.Sprite",
				cc_rewardIcon1: "Laya.Image",
				cc_label_reward1: "Laya.Label",
				cc_reward2: "Laya.Sprite",
				cc_rewardIcon2: "Laya.Image",
				cc_label_reward2: "Laya.Label",
				cc_reward3: "Laya.Sprite",
				cc_rewardIcon3: "Laya.Image",
				cc_label_reward3: "Laya.Label",
				cc_reward4: "Laya.Sprite",
				cc_rewardIcon4: "Laya.Image",
				cc_label_reward4: "Laya.Label",
				cc_reward5: "Laya.Sprite",
				cc_rewardIcon5: "Laya.Image",
				cc_label_reward5: "Laya.Label",
				cc_buttonFollow: "UIButton",
				cc_labelFollow: "Laya.Label",
				cc_buttonThank: "UIButton"
			}, this.items = []
		}
		buildUi() {
			let t = db.getDb("follow_rewards_db"),
				e = 1;
			for (const a in t)
				if (Object.prototype.hasOwnProperty.call(t, a)) {
					const i = t[a];
					this["rewardIcon" + e].skin = i.icon, this["label_reward" + e].text = i.count;
					let s = {
						itemId: i.id,
						count: i.count
					};
					this.items.push(s), e++
				} let a = db.cop.follow_close_delay_time || 0;
			if (this.buttonThank.node.visible = !1, this.buttonThank.node.alpha = 0, a <= 0 ? (this.buttonThank.node.visible = !0, this.buttonThank.node.alpha = 1) : Timer.callLater(a, () => {
					this.destroyed || (this.buttonThank.node.visible = !0, cc.tween(this.buttonThank.node).to(.3, cc.PROP.ALPHA1).start())
				}, this), 0 != db.cop.b_follow_finger && 2 == mgrSdk.followState) {
				let t = this.addEffect("135");
				t.setScale(1, 1, 1), t.followTarget(this.buttonFollow.node, this.cameraEffect, this.buttonFollow.node.width / 2), t.play()
			}
			this.fillData(), this.registerMsg({
				[BASE_MSG.SDK_FOLLOW_OFFICIAL_ACCOUNT_SUC]: this.onMsgFollowOfficialAccountSuc.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEvent(9002)
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		fillData() {
			2 == mgrSdk.followState ? (BaseFacade.mItem.isOwned("1026"), this.labelFollow.text = "关注领取") : BaseFacade.mItem.isOwned("1026") ? this.labelFollow.text = "已领取" : this.labelFollow.text = "关注领取"
		}
		getRewards() {
			GameStatistics.statisCommonEvent(9001, 1), BaseFacade.mItem.addItem("1026", 1, null), _G.sendMsg("FOLLOW_TIP_UPDATE", "已领关注奖励");
			for (let t = 0; t < this.items.length; t++) {
				let e = this.items[t];
				e.itemId && e.count && BaseFacade.mItem.addItem(e.itemId, e.count, 10)
			}
			mgrAlert.alertItems(this.items)
		}
		onMsgFollowOfficialAccountSuc() {
			this.fillData(), 1 != mgrSdk.followState || BaseFacade.mItem.isOwned("1026") || this.getRewards(), this.close()
		}
		on_click_buttonThank() {
			this.close()
		}
		on_click_buttonFollow() {
			GameStatistics.statisCommonEvent(9003), mgrSdk.followOfficialAccount()
		}
	}
	class PanelFriends extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelFriends.json", this._exportNodeInfo = {
				cc_buttonFullScreenShare: "UIButton",
				cc_roleNode: "Laya.Sprite",
				cc_roleName: "Laya.Text",
				cc_photoNode: "Laya.Sprite",
				cc_photoMask: "Laya.Sprite",
				cc_photoSprite: "Laya.Sprite",
				cc_spriteFail: "Laya.Sprite",
				cc_scoreNode: "Laya.Sprite",
				cc_scoreLabel: "Laya.Label",
				cc_buttonOk: "UIButton",
				cc_buttonClose2: "UIButton",
				cc_topNode: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_friend", "")
		}
		buildUi() {
			this.node.x = 110, console.log("查看context", this.context), this.scoreLabel.font = GConfig.bmf_over;
			let t = mgrLevel.curLevelDb,
				e = db.get_role_db(t.roleId);
			this.roleNode.loadImage(e.head), this.buttonFullScreenShare.node.visible = !1, this.buttonClose2.node.visible = !1;
			let a = mgrLevel.curLevelIdx;
			a > 0 && (GameStatistics.statisCommonEvent(11e3 + a, 4), GameStatistics.statisOnStageEnd(12e3 + a, mgrPart.partScoreResult.suc ? 1 : 0, 0));
			let i = !!this.context;
			console.log("QT_PanelFriends" + i);
			let s = mgrPart.partScoreResult.suc;
			!i && !s && mgrPart.partScoreResult.totalScore + 10 >= t.score && mgrAdv.getActive("weituo_add_score") && mgrAlert.openPanelLoading(UI_NAME.PanelOverRemedy, {
				fOnClick: this.refreshLabel.bind(this)
			}), this.spriteFail.visible = !s, this.spriteFail.visible && mgrI18n.trySetI18nImage(this.spriteFail, "pnl_over_01.png"), this.roleName.text = mgrI18n.getText(e.tlite), console.log("查看分数", mgrPart.partScoreResult.totalScore), this.scoreLabel.text = Math.floor(mgrPart.partScoreResult.totalScore) + "", this.photoSprite.texture = mgrPart.roleTexture, this.photoSprite.pivot(mgrPart.roleTexture.width / 2, mgrPart.roleTexture.height / 2).pos(this.photoMask.width / 2, this.photoMask.height / 2, !0);
			let n = this.photoMask.width / (5 * mgrPart.photoWidth);
			this.photoSprite.scale(n, n, !0), this.playUiAnim(), this.scheduleOnce(1, () => {
				if (s) {
					let t = {
						itemId: mgrLevel.curLevelDb.itemId,
						count: mgrLevel.curLevelDb.itemCount
					};
					mgrAlert.addAndAlert(t, 39), i && mgrAlert.addAndAlert({
						itemId: "1000",
						count: 3
					}, 45), mgrSound.playSound("yllsd_17")
				} else mgrSound.playSound("yllsd_19")
			}), this.registerMsg({
				[BASE_MSG.SDK_SHARE_SUC]: this.onShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onShareSuc.bind(this)
			}), this.startProcMsg()
		}
		refreshLabel() {
			let t = mgrPart.partScoreResult.suc;
			this.spriteFail.visible = !t;
			let e = mgrLevel.curLevelDb,
				a = db.get_role_db(e.roleId);
			this.roleNode.loadImage(a.head), this.buttonFullScreenShare.node.visible = !1, this.roleName.text = a.name, this.scoreLabel.text = Math.floor(mgrPart.partScoreResult.totalScore) + "", this.photoSprite.texture = mgrPart.roleTexture, this.photoSprite.pivot(mgrPart.roleTexture.width / 2, mgrPart.roleTexture.height / 2).pos(this.photoMask.width / 2, this.photoMask.height / 2, !0);
			let i = this.photoMask.width / (5 * mgrPart.photoWidth);
			this.photoSprite.scale(i, i, !0), this.scheduleOnce(1, () => {
				if (t) {
					let t = {
						itemId: mgrLevel.curLevelDb.itemId,
						count: mgrLevel.curLevelDb.itemCount
					};
					mgrAlert.addAndAlert(t, 39), mgrAlert.addAndAlert({
						itemId: "1000",
						count: 3
					}, 45), mgrSound.playSound("yllsd_17")
				} else mgrSound.playSound("yllsd_19")
			})
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.shareBtn && this.shareBtn.dispose(), super.dispose(), GameStatistics.statisOnStageEnd(7507)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onShareSuc() {
			Laya.timer.frameOnce(1, this, this.showOkButton)
		}
		playUiAnim() {
			this.scoreLabel.text = "", cc.tween(this.scoreLabel).then(cc.numberTo(1, 0, mgrPart.partScoreResult.totalScore)).start(), this.roleNode.x = -900, cc.tween(this.roleNode).delay(.3).to(.5, {
				x: -271
			}, cc.OPTION.BACK_OUT).start(), this.photoNode.scale(0, 0, !0), cc.tween(this.photoNode).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), this.buttonOk.node.scale(1, 1, !0)
		}
		showOkButton() {
			this.buttonFullScreenShare.node.visible = !1, this.buttonOk.node.scale(1, 1), this.buttonOk.node.visible = !0, this.shareFinger && this.shareFinger.hide()
		}
		on_click_buttonOk() {
			mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_buttonFullScreenShare() {}
		on_click_buttonClose2() {
			this.on_click_buttonOk()
		}
	}
	class HotActivityItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "res/prefab/HotActivityItem.json", this._exportNodeInfo = {
				cc_spriteBg: "Laya.Sprite",
				cc_buttonGo: "UIButton",
				cc_labelGo: "Laya.Label"
			}
		}
		onCreateComplete() {}
		dispose() {
			super.dispose()
		}
		refreshItem(t) {
			if (!this.callable) return void this.safeCall(this.refreshItem, t);
			this.id = t;
			let e = db.get_hot_activity_db(t);
			if (!e) return;
			this.statisticId = e.statisticsId, this.jumpId = e.jumpId, this.jumpContext = e.jumpContext;
			let a = e.texturUrl;
			e.v2Func && mgrGame[e.v2Func] && mgrGame[e.v2Func] instanceof Function && mgrGame[e.v2Func]() && (this.statisticId = e.statisticsId2, this.jumpId = e.jumpId2, this.jumpContext = e.jumpContext2, a = e.texturUrl2), this.spriteBg.loadImage(a)
		}
		on_click_buttonGo() {
			null != this.statisticId && (GameStatistics.statisCommonEvent(2632, this.statisticId), this.jumpId && mgrJumpPanel.jumpTo(this.jumpId, null, this.jumpContext))
		}
	}
	class PanelHotActivity extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelHotActivity.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_scrollView: "ReuseScrollList",
				cc_buttonClose: "UIButton",
				cc_spriteName: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite"
			}
		}
		buildUi() {
			let t = db.cop.hot_activity_list_v2;
			for (let e = t.length - 1; e >= 0; e--) {
				let a = t[e];
				null != a && db.get_hot_activity_db_map()[a] || t.splice(e, 1)
			}
			mgrI18n.trySetI18nImage(this.spriteName, "pnl_hot_active.png"), this.scrollView.onItemCreate = (() => {
				let t = new HotActivityItem;
				return t.create(), t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}), this.scrollView.onItemChange = ((e, a) => {
				null != t[a] && e.refreshItem(t[a])
			}), this.scrollView.updateList(t.length), GameStatistics.statisCommonEvent(2631)
		}
		dispose() {
			this.scrollView && this.scrollView.clearAllItems(), super.dispose()
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PaiShouGame {
		constructor(t, e) {
			this.destroyed = !1, this._dt = 0, this._pos = new Laya.Point, this.circleScale = 0, this.circleAlpha = 0, this.animSpeed = 1, this.animWaitTime = 0, this.MAX_SCALE = 1.5, this.MIN_SCALE = .8, this.ANIM_IDLE_DURATION = .5, this.ANIM_PAISHOU_DURATION = .5, this.commonEvent = !1, this.combo = 0, this.avatar = t, this.camera = e, this.circleNode = (new Laya.Sprite).loadImage("res/ui/pnl_inside/light.png").size(120, 120).pivot(60, 60), this.circleNode.on(Laya.Event.MOUSE_DOWN, this, this.onClickCircle)
		}
		dispose() {
			this.destroyed = !0, this.avatar = null, this.camera = null, this.bUpdatePaiShou = !1, this.circleNode.destroy()
		}
		start() {
			mgrInside.startPaiShou(), this._dt = Mathf.clamp(1 / _G.FPS, 1 / 60, 1 / 30), this.avatar.playAnimation(MODEL_ANIM.PAISHOU01), this.circleNode.visible = !0, this.circleNode.alpha = 0, this.handTranL = this.avatar.baseBody.findChild("Guadian_handl").transform, this.handTranR = this.avatar.baseBody.findChild("Guadian_handr").transform, this.bLeft = !1, this.bClick = !1, this.bUpdatePaiShou = !0, this.curAnimTime = 0, this.waitTime = 0, this.state = 4, this.curBodyAnim = MODEL_ANIM.PAISHOU01, this.curFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.avatar.baseBody.getAnimator().speed = 1e-4, this.avatar.baseFace.getAnimator().speed = 1e-4, this.animSpeed = mgrInside.curPaiShouDb.animSpeed, this.animWaitTime = mgrInside.curPaiShouDb.waitTime, this.handCount = mgrInside.curPaiShouDb.paiShouCount
		}
		update() {
			if (this.bUpdatePaiShou) {
				let a = this._dt;
				switch (this.state) {
					case 0:
						this.curAnimTime += a * this.animSpeed;
						var t = Mathf.clamp01(this.curAnimTime / this.ANIM_IDLE_DURATION);
						this.avatar.baseBody.simulate(MODEL_ANIM.PAISHOU_IDLE, t), this.avatar.baseFace.simulate(MODEL_ANIM.FACE_PAISHOU_IDLE, t), t >= 1 && (this.state = 1, this.curAnimTime = 0);
						break;
					case 1:
						this.curAnimTime += a * this.animSpeed;
						t = Mathf.clamp01(this.curAnimTime / this.ANIM_PAISHOU_DURATION);
						this.avatar.baseBody.simulate(this.curBodyAnim, t), this.avatar.baseFace.simulate(this.curFaceAnim, t);
						var e = t / .5;
						this.circleScale = Mathf.lerp(this.MIN_SCALE, this.MAX_SCALE, e), this.circleAlpha = Mathf.lerp(0, 1, e), t >= .5 && (this.state = 2);
						break;
					case 2:
						this.waitTime += a, this.waitTime >= this.animWaitTime && (this.waitTime = this.animWaitTime, this.state = 3);
						break;
					case 3:
						this.curAnimTime += a * this.animSpeed;
						t = Mathf.clamp01(this.curAnimTime / this.ANIM_PAISHOU_DURATION);
						this.avatar.baseBody.simulate(this.curBodyAnim, t), this.avatar.baseFace.simulate(this.curFaceAnim, t);
						e = (t - .5) / .5;
						this.circleScale = Mathf.lerp(this.MAX_SCALE, this.MIN_SCALE, e), this.circleAlpha = Mathf.lerp(1, 0, e), t >= 1 && this.nextAnim();
						break;
					case 4:
						return this.randomLoad(this.curBodyAnim), void(this.state = 0)
				}
				let i = this.bLeft ? this.handTranL : this.handTranR;
				UiHelper.worldToScreen(this.camera, i.position, this._pos), this.circleNode.parent.globalToLocal(this._pos, !1), this.circleNode.pos(this._pos.x, this._pos.y, !0), this.circleNode.scale(this.circleScale, this.circleScale, !0).alpha = this.circleAlpha
			}
		}
		nextAnim() {
			this.curAnimTime = 0, this.waitTime = 0, this.state = 4, this.circleNode.visible = !0, this.bClick = !1, this.handCount--, this.handCount <= 0 ? this.onPaiShouOver() : (this.curBodyAnim = this.nextBodyAnim, this.curFaceAnim = this.nextFaceAnim, this.bLeft = this.bNextLeft)
		}
		randomLoad(t) {
			switch (t) {
				case MODEL_ANIM.PAISHOU01:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU02, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !0;
					break;
				case MODEL_ANIM.PAISHOU02:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU03, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !0;
					break;
				case MODEL_ANIM.PAISHOU03:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU04, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !0;
					break;
				case MODEL_ANIM.PAISHOU04:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU05, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !1;
					break;
				case MODEL_ANIM.PAISHOU05:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU06, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !1;
					break;
				case MODEL_ANIM.PAISHOU06:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU07, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !1;
					break;
				case MODEL_ANIM.PAISHOU07:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU08, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !0;
					break;
				case MODEL_ANIM.PAISHOU08:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU09, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !1;
					break;
				case MODEL_ANIM.PAISHOU09:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU01, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !1
			}
			mgrRes.loadRes(db.get_animation_db(this.curBodyAnim).path, RES_TYPE.ANIMATIONCLIP), mgrRes.loadRes(db.get_animation_db(this.curFaceAnim).path, RES_TYPE.ANIMATIONCLIP)
		}
		onPaiShouOver() {
			console.log("---\x3e onPaiShouOver"), this.circleNode.visible = !1, this.bUpdatePaiShou = !1, this.avatar.baseBody.getAnimator().speed = 1, this.avatar.baseFace.getAnimator().speed = 1, this.avatar.playIdle(), Laya.timer.frameOnce(1, this, function() {
				_G.sendMsg("PAI_SHOU_OVER")
			})
		}
		onClickCircle(t) {
			if (this.bClick) return;
			this.bClick = !0, this.commonEvent || (this.commonEvent = !0, GameStatistics.statisCommonEvent(3033));
			let e = new Laya.Point(Laya.stage.mouseX, Laya.stage.mouseY);
			if (mgrAlert.playParticleEffect("107", e, 1), 0 == this.state) UiHelper.playPopup(mgrI18n.getImage("pnl_inside_04.png"), e), this.combo = 0;
			else {
				let t = mgrInside.addPaiShouScore((this.curAnimTime + this.waitTime) / (this.ANIM_PAISHOU_DURATION + this.animWaitTime));
				UiHelper.playPopup(mgrI18n.getImage(`pnl_inside_0${t+4}.png`), e), 2 == t ? (this.combo++, this.combo) : this.combo = 0, 2 == this.state && (this.waitTime = this.animWaitTime), _G.sendMsg("CLICK_PAI_SHOU_CIRCLE", e)
			}
			mgrSound.playTalk("yllsd_10")
		}
	}
	class RoomInside extends RoomBase {
		constructor() {
			super(...arguments), this.resourceName = "res/unity/Conventional/map_03.ls"
		}
		onSceneLoaded(t) {
			this.resetMat(t)
		}
		resetMat(t) {
			if (t.allMaterial) return;
			let e = UiHelper.findAllMeshRenderers(t, null, !0);
			if (e) {
				let l = [];
				t.allMaterial = l;
				t: for (var a = 0; a < e.length; a++) {
					for (var i = e[a], s = i.sharedMaterials, n = [], o = 0; o < s.length; o++) {
						var r = s[o];
						if (!(r instanceof Laya.BlinnPhongMaterial)) {
							l.push(r);
							continue t
						} {
							let t = new LightMapMaterial;
							t.albedoTexture = r.albedoTexture, t.tilingOffset = r.tilingOffset, "map_03_05" == r.name ? t.renderMode = LightMapMaterial.RENDERMODE_CUTOUT : t.renderMode = LightMapMaterial.RENDERMODE_OPAQUE, n.push(t), l.push(t)
						}
					}
					i.sharedMaterials = n
				}
			}
		}
		dispose() {
			this.scene && this.switchToDay(!0), this.mainPos && (_G.pool.put(this.mainPos), _G.pool.put(this.mainRot), this.mainPos = null, this.mainRot = null), super.dispose()
		}
		changeToMain() {
			this.camera || (this.createCamera(this.mainCamera), this.createRoot(this.mainNode), this.mainCamera.active = !1, this.letterCamera.active = !1, this.manicureCamera.active = !1, this.manicureNpcCamera.active = !1, this.mainPos = _G.pool.get(Laya.Vector3), this.mainCamera.transform.localPosition.cloneTo(this.mainPos), this.mainRot = _G.pool.get(Laya.Quaternion), this.mainCamera.transform.localRotation.cloneTo(this.mainRot), this.mainFov = this.mainCamera.fieldOfView)
		}
		changeToManicureNpc() {
			this.camera || (this.createCamera(this.manicureNpcCamera), this.createRoot(this.manicureNpcNode), this.mainCamera.active = !1, this.letterCamera.active = !1, this.manicureCamera.active = !1, this.manicureNpcCamera.active = !1, this.mainPos = _G.pool.get(Laya.Vector3), this.manicureNpcCamera.transform.localPosition.cloneTo(this.mainPos), this.mainRot = _G.pool.get(Laya.Quaternion), this.manicureNpcCamera.transform.localRotation.cloneTo(this.mainRot), this.mainFov = this.manicureNpcCamera.fieldOfView)
		}
		moveToManicure() {
			let t = this.manicureCamera.transform;
			this.camera.transform.localPosition = t.localPosition, this.camera.transform.localRotation = t.localRotation, this.camera.fieldOfView = this.manicureCamera.fieldOfView;
			let e = this.manicureNode;
			this.root.transform.localPosition = e.transform.localPosition, this.root.transform.localRotation = e.transform.localRotation
		}
		moveToXinFeng(t) {
			let e = this.letterCamera.transform;
			UiHelper.tweenCamera(this.camera, 1.5, e.localPosition, e.localRotation, this.letterCamera.fieldOfView, cc.Ease.sineInOut, t)
		}
		moveToMain() {
			UiHelper.tweenCamera(this.camera, .6, this.mainPos, this.mainRot, this.mainFov, cc.Ease.sineInOut)
		}
		switchToNight() {
			let t = this.scene.allMaterial;
			for (var e = 0; e < t.length; e++) {
				var a = t[e];
				cc.tween(a, !0).to(.5, {}, {
					onUpdate: function(t, e) {
						var a = Mathf.lerp(t.albedoIntensity, .2, e);
						t.albedoIntensity = a
					}
				}).start()
			}
		}
		switchToDay(t = !1) {
			let e = this.scene.allMaterial;
			for (var a = 0; a < e.length; a++) {
				var i = e[a];
				t ? (i.albedoIntensity = 1, cc.clearTween(i)) : cc.tween(i, !0).to(.5, {}, {
					onUpdate: function(t, e) {
						var a = Mathf.lerp(t.albedoIntensity, 1, e);
						t.albedoIntensity = a
					}
				}).start()
			}
		}
		get mainCamera() {
			return this.scene.getChildByName("MainCamera")
		}
		get mainNode() {
			return this.scene.getChildByName("MainNode")
		}
		get letterCamera() {
			return this.scene.getChildByName("LetterCamera")
		}
		get letterNode() {
			return this.scene.getChildByName("LetterNode")
		}
		get manicureCamera() {
			return this.scene.getChildByName("MeijiaCamera")
		}
		get manicureNode() {
			return this.scene.getChildByName("MeijiaNode")
		}
		get manicureNpcCamera() {
			return this.scene.getChildByName("MeijiaNpcCamera")
		}
		get manicureNpcNode() {
			return this.scene.getChildByName("MeijiaNpcNode")
		}
	}
	class OrderPartItem extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/OrderPartItem.json", this._exportNodeInfo = {
				cc_icon: "Laya.Sprite",
				cc_spriteSelected: "Laya.Sprite",
				cc_labelNo: "Laya.Label",
				cc_tag: "Laya.Sprite",
				cc_spriteEmpy: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			UiHelper.addClickEvent(this.resNode, () => {
				_G.sendMsg("UI_CLICK_ORDER_PART_ITEM", this)
			})
		}
		fillPart(t, e) {
			if (!this.callable) return this.safeCall(this.fillPart, t, e);
			if (mgrI18n.trySetI18nImage(this.spriteEmpy, "pnl_inside_07.png"), t) {
				let e = db.get_item_db(t);
				this.icon.loadImage(e.icon), this.icon.visible = !0, this.spriteEmpy.visible = !1, this.labelNo.visible = !1, this.resNode.loadImage("res/ui/pnl_inside/item_bg.png")
			} else this.icon.visible = !1, this.spriteEmpy.visible = !e, this.labelNo.visible = !0, this.resNode.loadImage("res/ui/pnl_order/art_07.png");
			this.partId = t, this.spriteSelected.visible = !1
		}
		fillTypeOnly(t) {
			if (!this.callable) return this.safeCall(this.fillTypeOnly, t);
			if (t) {
				let e = db.get_part_type_db(t.partType);
				this.icon.loadImage(e.icon), this.icon.visible = !1, this.tag.loadImage(e.icon), this.tag.visible = !0, this.labelNo.visible = !0, mgrI18n.trySetI18nImage(this.spriteEmpy, "pnl_inside_07.png"), this.resNode.loadImage("res/ui/pnl_order/art_07.png"), this.spriteEmpy.visible = !1, this.partId = null, this.spriteSelected.visible = !1
			}
		}
		setSelected(t) {
			this.spriteSelected.visible = t
		}
		getIconWorldPos() {
			let t = new Laya.Point;
			return UiHelper.getSelfGlobalPos(this.icon, t), t
		}
	}
	class OrderItem extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/OrderItem.json", this._exportNodeInfo = {
				cc_head: "Laya.Sprite",
				cc_layout: "UIHVLayout",
				cc_price: "Laya.Text",
				cc_score: "Laya.Text"
			}, this.partItems = [], this.create()
		}
		dispose() {
			for (let t = 0; t < this.partItems.length; t++) this.partItems[t].dispose();
			super.dispose()
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this))
		}
		setData(t) {
			if (!this.callable) return this.safeCall(this.setData, t);
			this.orderData = t;
			let e = t.parts.length;
			e > 2 && (e = 2);
			for (let a = 0; a < e; a++) {
				let e = this.partItems[a];
				e ? e.show() : (e = new OrderPartItem).setParent(this.layout), e.fillTypeOnly(t.parts[a])
			}
			for (let e = t.parts.length; e < this.partItems.length; e++) this.partItems[e].hide();
			this.layout.updateLayout(), this.head.loadImage(db.get_role_db(t.roleId).head), this.price.text = t.czDb.money + "", this.score.text = t.czDb.partsScore[t.parts.length - 1] + ""
		}
		onClick() {
			this.orderData && (mgrAlert.openPanelLoading(UI_NAME.PanelOrder, this.orderData), GameStatistics.statisCommonEvent(3062))
		}
	}
	const scroll_width = 472,
		scroll_height = 540;
	class PanelOrderList extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "", this.panelStyle = 0
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite,
				a = .8,
				i = _G.canvasWidth / _G.canvasHeight;
			i < UIRoot.instance.uiMinRate && (a = Mathf.lerpFromInverseLerp(.8, .95, UIRoot.instance.uiMinRate, UIRoot.instance.canvasMinRate, i));
			let s = e.addChild(new Laya.Sprite).scale(a, a, !0);
			this.bg = s;
			let n = s.addChild(new Laya.Sprite).size(scroll_width, scroll_height).pos(-scroll_width / 2, -scroll_height / 2);
			this.scrollList = n.addComponent(ReuseScrollList), this.scrollList.itemWidth = scroll_width, this.scrollList.itemHeight = 116, this.scrollList.setVerticle(!0);
			let o = s.addChild(new Laya.Sprite).size(48, 48).pivot(24, 24).loadImage("res/ui/btns/btn_close.png").pos(scroll_width / 2 + 10, -scroll_height / 2 - 100);
			this.btnClose = o.addComponent(UIButton), UiHelper.addUIButtonClick(o, this.onClickClose.bind(this)), this.createFromNode(e)
		}
		buildUi() {
			let t = this.context;
			this.resNode.globalToLocal(t, !1), this.bg.pos(t.x, t.y), this.scrollList.itemCreateDeltaFrame = 3, this.scrollList.onItemCreate = function() {
				let t = new OrderItem;
				return t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}, this.scrollList.onItemChange = ((t, e) => {
				this.allOrders && t.setData(this.allOrders[e])
			}), this.allOrders = mgrInside.curOrders, this.scrollList.updateList(this.allOrders.length), this.registerMsg({
				ORDRE_OPENED: this.onMsgOrderOpen.bind(this)
			}), this.startProcMsg(), _G.isGuiding && this.scheduleOnce(.5, () => {
				let t = this.scrollList.getItem(0);
				t.callIfLoaded(() => {
					mgrGuide.registerGuideNode(GUD_REG_NODE.PANELIN_ORDER, t.node)
				})
			})
		}
		dispose() {
			this.stopProcMsg(), this.scrollList.clearAllItems(), super.dispose()
		}
		onMsgOrderOpen() {
			this.close()
		}
		onClickClose() {
			this.close(), _G.sendMsg("UI_CLOSE_ORDRE_LIST")
		}
	}
	class PanelInside extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelInside.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_topNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_buttonFree: "UIButton",
				cc_bottomLeftNode: "Laya.Sprite",
				cc_buttonStartPaiShou: "UIButton",
				cc_spritePaiShou: "Laya.Sprite",
				cc_paiShouLeftTime: "Laya.Label",
				cc_bottomRightNode: "Laya.Sprite",
				cc_buttonStartCaiZhuang: "UIButton",
				cc_spriteCaiZhuang: "Laya.Sprite",
				cc_cztgLeftTime: "Laya.Label",
				cc_bottomNode: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_enter_play", "")
		}
		addPreloadRes(t) {
			t.addModel("res/unity/Conventional/map_03.ls")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonFree.node, "pnl_main_13.png"), mgrI18n.trySetI18nImage(this.spritePaiShou, "pnl_play_07.png"), mgrI18n.trySetI18nImage(this.spriteCaiZhuang, "pnl_play_04.png"), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_PLAY), mgrGame.tryOpenPanelRankVideoTips(3), this.currencyBar = new CurrencyBar, this.currencyBar.setParent(this.topNode), this.bottomLeftNode.x = -200, this.bottomRightNode.x = 200, this.buttonClose.node.x = -120, this.buttonFree.node.x = -120, this.scoreBar = new ScoreBar, this.scoreBar.setParent(this.topLeftNode), this.scoreBar.x = -100, this.scoreBar.hide(), this.onMsgCopChange(), this.playButtons = new PlayBottomNode({
				onOpenCallback: this.close.bind(this),
				curIndex: 1
			}), this.playButtons.setParent(this.bottomNode), this.room = new RoomInside, this.room.load(this.onSceneLoaded.bind(this)), this.switchToInside(), this.registerMsg({
				PAI_SHOU_OVER: this.onMsgPaiShouOver.bind(this),
				CLICK_PAI_SHOU_CIRCLE: this.onMsgClickPaiShouCircle.bind(this),
				UI_CLOSE_ORDRE_LIST: this.onMsgCloseOrderList.bind(this),
				ORDRE_OPENED: this.onMsgOrderOpened.bind(this),
				ORDRE_FINISH: this.onMsgOrderFinish.bind(this),
				SHOW_YINDAO_EFFECT: this.onMsgShowYinDao.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this)
			}), this.startProcMsg(), this.addEffect("192").play()
		}
		dispose() {
			this.stopProcMsg(), this.clearPaiShouGame(), this.clearXinFeng(), this.playButtons && this.playButtons.dispose(), this.avatar && (this.avatar.destroy(), this.avatar = null), this.room && (this.room.dispose(), this.room = null), this.scoreBar && (this.scoreBar.dispose(), this.scoreBar = null), this.currencyBar && this.currencyBar.dispose(), this.instOrBanner.dispose(), mgrSdk.resetRecordState(), super.dispose()
		}
		clearPaiShouGame() {
			this.paiShouGame && (this.paiShouGame.dispose(), this.paiShouGame = null)
		}
		clearXinFeng() {
			this.xinfeng && (_G.poolManager.put(this.xinfeng), this.xinfeng = null)
		}
		clearLiHe() {
			this.lihe && (_G.poolManager.put(this.lihe), this.lihe = null)
		}
		update() {
			this.isFocus && this.paiShouGame && this.paiShouGame.update();
			let t = mgrInside.leftPaiShouTime;
			this.paiShouLeftTime.text = t > 0 ? Tools.formatTime(t) : "";
			let e = mgrInside.leftCztgTime;
			this.cztgLeftTime.text = e > 0 ? Tools.formatTime(e) : ""
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgPaiShouOver() {
			this.onPaiShouOver()
		}
		onMsgClickPaiShouCircle(t) {
			this.scoreBar.setValue(mgrInside.paiShouScore, 0, t)
		}
		onMsgCloseOrderList() {
			this.switchToInside(), this.clearLiHe(), this.clearXinFeng(), this.room.moveToMain(), cc.tween(this.buttonClose.node).to(.3, {
				x: 43
			}, cc.OPTION.SINE_IN).start()
		}
		onMsgOrderOpened() {
			this.clearLiHe(), this.clearXinFeng(), this.lihe = _G.poolManager.get(GModel, db.MODEL_DB_ID.lihe), this.lihe.setParent(this.room.root), this.lihe.playAnim(MODEL_ANIM.P_LIHE_IDLE, .1, !0), this.avatar.playBodyAnim(MODEL_ANIM.LIHE_IDLE, .1, !0), this.room.moveToMain()
		}
		onMsgOrderFinish(t) {
			let e = this.lihe.findChild("inside").transform.position,
				a = new Laya.Point;
			UiHelper.worldToScreen(this.room.camera, e, a);
			for (var i = 0; i < t.items.length; i++) {
				var s = t.items[i];
				UiHelper.playItemScaleAndJumpToEmpty(s.itemId, s.pos, a)
			}
			let n = mgrInside.curOrders.indexOf(t.order);
			~n ? (mgrInside.finishOrder(t.order, t.star), this.scoreBar.setValue(mgrInside.caiZhuangScore, .5, a), mgrInside.curOrders.splice(n, 1)) : console.error("PanelInside.onMsgOrderFinish: 找不到order"), this.scheduleOnce(.6, () => {
				this.avatar.playBodyAnim(MODEL_ANIM.LIHE_CLOSE, .1, !1), this.lihe.playAnim(MODEL_ANIM.P_LIHE_CLOSE, .1, !1), mgrSound.playSound("yllsd_11"), this.scheduleOnce(2.133, () => {
					this.clearLiHe(), this.avatar.playIdle(), 0 == mgrInside.curOrders.length ? (this.switchToInside(), this.onCztgFinish()) : this.playCztgAnim()
				})
			})
		}
		onMsgShowYinDao() {
			let t = this.addEffect("149");
			t.followTarget(this.buttonStartCaiZhuang.node, this.cameraEffect), t.play(), (t = this.addEffect("149")).followTarget(this.buttonStartPaiShou.node, this.cameraEffect), t.play()
		}
		onMsgAdvShowSuc(t) {
			if ("one_click_interact" == t.advName) {
				let e, a = t.params.gameName;
				a == mgrI18n.getText("panelInside.1") ? (GameStatistics.statisCommonEvent(2211), e = mgrInside.finishPaiShou(!0)) : a == mgrI18n.getText("panelInside.2") && (GameStatistics.statisCommonEvent(2212), e = mgrInside.finishCztg(!0)), mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
					score: 100,
					items: e
				})
			}
		}
		onMsgCopChange() {}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToMain(), this.avatar = new RoleAvatar, this.avatar.playIdle(), this.room.root.addChild(this.avatar)
		}
		clearEffect() {
			this.removeEffect("149"), this.removeEffect("149")
		}
		switchToInside() {
			this.scoreBar.moveOut(), this.playButtons.fadeIn(), UiHelper.playMoveIn(this.buttonClose.node, 43), UiHelper.playMoveIn(this.buttonFree.node, 41), UiHelper.playMoveIn(this.bottomLeftNode), UiHelper.playMoveIn(this.bottomRightNode), this.clearEffect()
		}
		switchToPaiShou() {
			this.scoreBar.moveIn(), this.scoreBar.setValue(0), this.playButtons.fadeOut(), UiHelper.playMoveOut(this.buttonClose.node, -120), UiHelper.playMoveOut(this.buttonFree.node, -120), UiHelper.playMoveOut(this.bottomLeftNode, -200), cc.tween(this.bottomRightNode).to(.3, {
				x: 200
			}, cc.OPTION.SINE_OUT).call(this.startPaiShou.bind(this)).start(), this.clearEffect(), this.scoreBar.checkColorEggMianJu()
		}
		startPaiShou() {
			this.paiShouGame || (this.paiShouGame = new PaiShouGame(this.avatar, this.room.camera), this.resNode.addChild(this.paiShouGame.circleNode), this.paiShouGame.start(), _G.isGuiding)
		}
		onPaiShouOver() {
			this.scheduleOnce(.5, () => {
				this.switchToInside()
			}), this.clearPaiShouGame();
			let t = mgrInside.finishPaiShou();
			mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
				score: mgrInside.paiShouScore,
				items: t
			})
		}
		switchToCaiZhuangTuiGuang() {
			this.scoreBar.moveIn(), this.scoreBar.setValue(0), this.playButtons.fadeOut(), UiHelper.playMoveOut(this.buttonClose.node, -120), UiHelper.playMoveOut(this.buttonFree.node, -120), UiHelper.playMoveOut(this.bottomLeftNode, -200), UiHelper.playMoveOut(this.bottomRightNode, 200), mgrInside.startCztg(), this.playCztgAnim()
		}
		playCztgAnim() {
			mgrInside.loadCaiZhuangTuiGuang(() => {
				this.clearXinFeng(), this.xinfeng = _G.poolManager.get(GModel, db.MODEL_DB_ID.xinfeng), this.xinfeng.setParent(this.room.letterNode), this.xinfeng.getAnimator().play(null, 0, 0), this.room.moveToXinFeng(this.showOrderList.bind(this))
			})
		}
		showOrderList() {
			let t = this.xinfeng.findChild("center").transform.position,
				e = new Laya.Point;
			UiHelper.worldToScreen(this.room.camera, t, e), mgrAlert.openPanelLoading(PanelOrderList, e)
		}
		onCztgFinish() {
			let t = mgrInside.finishCztg();
			mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
				score: mgrInside.caiZhuangScore,
				items: t
			}), cc.tween(this.buttonClose.node).to(.3, {
				x: 43
			}, cc.OPTION.SINE_IN).start()
		}
		on_click_buttonClose() {
			this.xinfeng ? this.clearXinFeng() : mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_buttonStartPaiShou() {
			GameStatistics.statisCommonEvent(3032), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_PAISHOU) ? this.switchToPaiShou() : mgrInside.checkPaiShouPlayable(() => {
				this.switchToPaiShou()
			})
		}
		on_click_buttonStartCaiZhuang() {
			GameStatistics.statisCommonEvent(3061), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_CZTG) ? this.switchToCaiZhuangTuiGuang() : mgrInside.checkCztgPlayable(() => {
				this.switchToCaiZhuangTuiGuang()
			})
		}
		on_click_buttonFree() {
			mgrPart.openPanelRoom(ROOM_TYPE.NORMAL, null, this.close.bind(this))
		}
	}
	class PanelInstall extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelInstall.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Image",
				cc_bg: "Laya.Image",
				cc_buttonOk: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			this.registerMsg({
				[BASE_MSG.SDK_INSTALL_SHORTCUT_SUC]: this.onMsgInstallSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgInstallSuc() {
			this.close()
		}
		on_click_buttonOk() {
			mgrSdk.installShortcut()
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelItemGet extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.panelLayer = PANEL_LAYER.DIALOG, this.resourceName = "res/ui/PanelItemGet.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteTitle: "Laya.Sprite",
				cc_itemIcon: "Laya.Image",
				cc_buttonFullScreenShare: "UIButton",
				cc_tag1: "Laya.Sprite",
				cc_tag2: "Laya.Sprite",
				cc_stars: "UIHVLayout",
				cc_buttonClose: "UIButton",
				cc_spriteOkParent: "Laya.Sprite",
				cc_buttonOk: "UIButton",
				cc_shareLayout: "UIHVLayout",
				cc_buttonNoTks: "UIButton",
				cc_buttonAdv: "UIButton",
				cc_textButtonAdvText: "Laya.Label",
				cc_spriteButtonAdvAdFlag: "Laya.Sprite",
				cc_moreCount: "Laya.Text",
				cc_buttonAdvThank: "UIButton",
				cc_spriteRewardLayout: "Laya.Sprite",
				cc_buttonRewardBox: "UIButton",
				cc_spriteRewardConfirm: "Laya.Sprite",
				cc_labelRewardHint: "Laya.Label"
			}, this.instOrBanner = new AdvInstOrBanner("enter_item_get", "banner_item_get"), this.rewardHit = !1, this.advFlag = !0
		}
		buildUi() {
			if (this.buttonNoTks.node.visible = !1, mgrI18n.trySetI18nImage(this.spriteTitle, "pnl_item_get_01.png"), !this.context) return;
			let t = this.context.item,
				e = db.get_item_db(t.itemId);
			this.itemIcon.skin = e.icon, this.buttonFullScreenShare.node.visible = !1, this.spriteRewardLayout.visible = !1, this.buttonAdvThank.node.visible = !1, 2 == e.type && 1 == e.subType ? (UiHelper.loadTagIconWithPart(t.itemId, this.tag1, this.tag2), UiHelper.setStars(this.stars, e.quality, 5)) : (this.tag1.visible = !1, this.tag2.visible = !1, this.stars.node.visible = !1);
			let a = new Laya.Point(0, 0);
			if (UiHelper.getSelfGlobalPos(this.itemIcon, a), mgrAlert.playParticleEffect("115", a, 2, 1, 1), mgrSound.playSound("yllsd_14"), 1 == db.cop.isItemGetShareFirst)
				if (null != this.context.shareIdx) {
					switch (this.buttonOk.node.visible = !0, this.shareBtn.shareMode) {
						case ShareMode.None:
							this.shareLayout.node.visible = !1, this.buttonClose.node.visible = !1, this.buttonAdv.node.visible = !1;
							break;
						case ShareMode.Normal:
							this.buttonAdv.node.visible = !1, this.buttonOk.node.visible = !1;
							break;
						case ShareMode.Video:
							if (this.buttonAdv.node.visible = !1, this.buttonOk.node.visible = !1, this.buttonClose.node.visible = !1, 0 != db.cop.b_video_share_finger) {
								let t = this.addEffect("135");
								t.setScale(1, 1, 1), t.followTarget(this.buttonOk.node, this.cameraEffect, this.buttonOk.node.width / 2), t.play()
							}
					}
					this.registerMsg({
						[BASE_MSG.SDK_SHARE_SUC]: this.onShareSuc.bind(this),
						[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onShareSuc.bind(this)
					}), this.startProcMsg()
				} else if (this.context.bAdv && mgrAdv.checkActive("more_award")) {
				if (mgrAdv.statisVideoShow("more_award"), this.shareLayout.node.visible = !1, this.buttonOk.node.visible = !1, this.buttonAdv.node.visible = !0, this.buttonClose.node.visible = !0, this.moreAwardCount = mgrOffline.offlinePerSecond * db.game_cnf.free_coin_time | 0, this.moreCount.text = GameUtility.convertCoinString(this.moreAwardCount, !1), 0 != db.cop.b_adv_reward_confirm) this.spriteRewardLayout.visible = !0, this.buttonClose.node.visible = !1, this.advFlag = !1, this.rewardHit = Math.random() > .5, this.spriteRewardConfirm.visible = Math.random() > .5, this.buttonAdv.node.x += 100, this.buttonOk.node.visible = !0, this.spriteOkParent.x -= 100, this.spriteOkParent.scaleX = .8, this.spriteOkParent.scaleY = .8, this.rewardHit ? this.labelRewardHint.text = mgrI18n.getText("panelItemGet.5") : this.labelRewardHint.text = mgrI18n.getText("panelItemGet.6");
				else if (0 != db.cop.b_adv_delay) {
					this.buttonClose.node.visible = !1;
					let t = db.cop.adv_thank_delay_time || .1;
					cc.tween(this.buttonAdvThank.node).delay(t).show().start()
				}
				this.registerMsg({
					[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
				}), this.startProcMsg()
			} else this.shareLayout.node.visible = !1, this.buttonClose.node.visible = !1, this.buttonAdv.node.visible = !1;
			else if (this.context.bAdv && mgrAdv.checkActive("more_award")) {
				if (mgrAdv.statisVideoShow("more_award"), this.shareLayout.node.visible = !1, this.buttonOk.node.visible = !1, this.moreAwardCount = mgrOffline.offlinePerSecond * db.game_cnf.free_coin_time | 0, this.moreCount.text = GameUtility.convertCoinString(this.moreAwardCount, !1), 0 != db.cop.b_adv_reward_confirm) this.spriteRewardLayout.visible = !0, this.buttonClose.node.visible = !1, this.advFlag = !1, this.rewardHit = Math.random() > .5, this.spriteRewardConfirm.visible = Math.random() > .5, this.buttonAdv.node.x += 100, this.buttonOk.node.visible = !0, this.spriteOkParent.x -= 100, this.spriteOkParent.scaleX = .8, this.spriteOkParent.scaleY = .8, this.rewardHit ? this.labelRewardHint.text = mgrI18n.getText("panelItemGet.5") : this.labelRewardHint.text = mgrI18n.getText("panelItemGet.6");
				else if (0 != db.cop.b_adv_delay) {
					this.buttonClose.node.visible = !1;
					let t = db.cop.adv_thank_delay_time || .1;
					cc.tween(this.buttonAdvThank.node).delay(t).show().start()
				}
				this.registerMsg({
					[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
				}), this.startProcMsg()
			} else null != this.context.shareIdx || (this.shareLayout.node.visible = !1, this.buttonClose.node.visible = !1, this.buttonAdv.node.visible = !1);
			MoreGameBanner.setBannerVisible(!0), Mathf.randomEnable(db.cop.ad_flag_hide_ratios[1] || 0) ? (this.spriteButtonAdvAdFlag.visible = !1, this.textButtonAdvText.x -= this.spriteButtonAdvAdFlag.width / 2) : this.spriteButtonAdvAdFlag.visible = !0
		}
		dispose() {
			mgrAdv.updateCdByType("enter_item_get"), this.stopProcMsg(), this.instOrBanner.dispose(), MoreGameBanner.setBannerVisible(!1), this.shareBtn && this.shareBtn.dispose(), super.dispose(), this.context && this.context.onClose && this.context.onClose(), PanelDialogCat.tryOpenPanel(2)
		}
		regGuide() {}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			if ("more_award" == t.advName) {
				this.advFlag = !0, this.buttonAdv.interactable = !1;
				let t = {
					itemId: "1001",
					count: this.moreAwardCount
				};
				mgrAlert.addAndAlert(t, 40, this.on_click_buttonOk.bind(this), !1)
			}
		}
		onShareSuc() {
			Laya.timer.frameOnce(1, this, this.on_click_buttonOk)
		}
		on_click_buttonOk() {
			if (this.isDisposed) return;
			if (0 != db.cop.b_adv_reward_confirm && this.rewardHit != this.spriteRewardConfirm.visible && !this.advFlag) return void this.on_click_buttonAdv();
			this.close();
			let t = this.context.item,
				e = db.get_item_db(t.itemId);
			this.context.autoSell ? mgrAlert.alertItemFromBtn({
				itemId: e.sellItemId,
				count: e.sellPrice
			}, this.itemIcon) : mgrAlert.alertItemFromBtn(this.context.item, this.itemIcon)
		}
		on_click_buttonClose() {
			this.on_click_buttonOk()
		}
		on_click_buttonAdv() {
			mgrAdv.statisVideoClick("more_award"), mgrAdv.dispatchAdv("more_award", null, !0) || mgrAlert.alertText(mgrI18n.getText("panelSign.8")), this.close()
		}
		on_click_buttonFullScreenShare() {}
		on_click_buttonRewardBox() {
			this.spriteRewardConfirm.visible = !this.spriteRewardConfirm.visible
		}
		on_click_buttonAdvThank() {
			1 == db.cop.b_adv_thank_prompt ? 1 == db.cop.b_adv_thank_prompt_tag ? mgrAlert.alertAdvDialog({
				desc: mgrI18n.getText("panelItemGet.7"),
				confirm: () => {
					this.on_click_buttonAdv()
				},
				confirmText: mgrI18n.getText("panelItemGet.8"),
				cancel: () => {
					this.on_click_buttonOk()
				}
			}) : mgrAlert.alertDialog({
				desc: mgrI18n.getText("panelItemGet.7"),
				confirm: () => {
					this.on_click_buttonAdv()
				},
				confirmText: mgrI18n.getText("panelItemGet.8"),
				close: () => {
					this.on_click_buttonOk()
				}
			}) : this.on_click_buttonOk()
		}
		on_click_buttonNoTks() {
			this.close()
		}
	}
	class PanelJoinSuc extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelJoinSuc.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_spriteEnd: "Laya.Sprite",
				cc_desc: "Laya.Label",
				cc_buttonClose: "UIButton",
				cc_buttonOk: "UIButton",
				cc_playerCount: "Laya.Label",
				cc_pvpStamp: "Laya.Sprite"
			}
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteEnd, "pnl_ssz_05.png"), this.playerCount.visible = !1, this.pvpStamp.visible = !1, this.pvpStamp.visible && mgrI18n.trySetI18nImage(this.pvpStamp, "pnl_pvp_05.png"), this.buttonClose.node.visible = !0, this.registerMsg({
				[BASE_MSG.SDK_SHARE_SUC]: this.onShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onShareSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.shareBtn && this.shareBtn.dispose(), super.dispose()
		}
		onShareSuc() {
			this.on_click_buttonOk()
		}
		on_click_buttonOk() {
			this.close()
		}
		on_click_buttonClose() {
			this.on_click_buttonOk()
		}
	}
	class PanelLanguageDialog extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelLanguageDialog.json", this._exportNodeInfo = {
				cc_buttonClose: "UIButton",
				cc_buttonZhcn: "UIButton",
				cc_nodeChoiceZhcn: "Laya.Sprite",
				cc_buttonEn: "UIButton",
				cc_nodeChoiceEn: "Laya.Sprite",
				cc_buttonId: "UIButton",
				cc_nodeChoiceId: "Laya.Sprite",
				cc_buttonPt: "UIButton",
				cc_nodeChoicePt: "Laya.Sprite",
				cc_buttonVi: "UIButton",
				cc_nodeChoiceVi: "Laya.Sprite"
			}
		}
		buildUi() {
			this.languageChoiceShow()
		}
		onCloseDialog() {
			this.close()
		}
		on_click_buttonClose() {
			this.onCloseDialog()
		}
		on_click_buttonZhcn() {
			mgrI18n.setLanguage(E_LANGUAGE.zhcn), this.languageChoiceShow(), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW"), this.close()
		}
		on_click_buttonEn() {
			mgrI18n.setLanguage(E_LANGUAGE.en), this.languageChoiceShow(), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW"), this.close()
		}
		on_click_buttonId() {
			mgrI18n.setLanguage(E_LANGUAGE.id), this.languageChoiceShow(), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW"), this.close()
		}
		on_click_buttonVi() {
			mgrI18n.setLanguage(E_LANGUAGE.vi), this.languageChoiceShow(), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW"), this.close()
		}
		on_click_buttonPt() {
			mgrI18n.setLanguage(E_LANGUAGE.pt), this.languageChoiceShow(), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW"), this.close()
		}
		languageChoiceShow() {
			switch (FileRecord.setData("bNewRecord", {
					id: 1
				}), this.nodeChoiceZhcn.visible = !1, this.nodeChoiceVi.visible = !1, this.nodeChoicePt.visible = !1, this.nodeChoiceId.visible = !1, this.nodeChoiceEn.visible = !1, mgrI18n.getLanguage()) {
				case E_LANGUAGE.zhcn:
					this.nodeChoiceZhcn.visible = !0;
					break;
				case E_LANGUAGE.vi:
					this.nodeChoiceVi.visible = !0;
					break;
				case E_LANGUAGE.pt:
					this.nodeChoicePt.visible = !0;
					break;
				case E_LANGUAGE.id:
					this.nodeChoiceId.visible = !0;
					break;
				case E_LANGUAGE.en:
					this.nodeChoiceEn.visible = !0
			}
		}
	}
	class PanelLingGan extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelLingGan.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_lingGanIcon: "Laya.Sprite",
				cc_descNode: "Laya.Sprite",
				cc_barMaskValue: "UIBarMask",
				cc_spriteShiShang: "Laya.Sprite",
				cc_barLabel: "Laya.Text",
				cc_buttonOk: "UIButton",
				cc_reuseScrollView: "ReuseScrollList",
				cc_topLeftNode: "Laya.Sprite",
				cc_bottomRightNode: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite"
			}, this.curSuits = [], this._lastValue = 0
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteShiShang, "pnl_outside_01.png"), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_LINGGAN), GameStatistics.statisCommonEvent(3053), this.reuseScrollView.setVerticle(!0), this.reuseScrollView.itemWidth = 130, this.reuseScrollView.itemHeight = 190, this.reuseScrollView.onItemCreate = function() {
				return new LingGanItem(!1)
			}, this.reuseScrollView.onItemChange = ((t, e) => {
				t.setData(this.curSuits[e]), t.index = e
			}), this.initGame(), this.playUiAnim(), this.registerMsg({
				UI_CLICK_LING_GAN_ITEM: this.onMsgClickLingGanItem.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.reuseScrollView && this.reuseScrollView.clearAllItems(), super.dispose()
		}
		close(t) {
			t || cc.tween(this.mask).to(.2, cc.PROP.ALPHA0).start(), super.close(t)
		}
		onMsgClickLingGanItem(t) {
			if (t.suitId) {
				if (t.suitData.bAdv) {
					t.suitData.bAdv = !1;
					for (let t = mgrOutside.unusedSuits.length - 1; t >= 0; t--) mgrOutside.unusedSuits[t].bAdv && mgrOutside.unusedSuits.splice(t, 1)
				}
				let e = mgrOutside.unusedSuits.indexOf(t.suitData);
				~e && mgrOutside.unusedSuits.splice(e, 1), ~(e = this.curSuits.indexOf(t.suitData)) && (console.warn("onMsgClickLingGanItem 理论上不应该有", this.curSuits.length), this.curSuits[e] = null), this.curSuits[mgrOutside.chooseSuitIndex] && mgrOutside.unusedSuits.push(this.curSuits[mgrOutside.chooseSuitIndex]), this.curSuits[mgrOutside.chooseSuitIndex] = t.suitData, this.refreshShiShangZhi(!0);
				let a = this.reuseScrollView.getItem(mgrOutside.chooseSuitIndex);
				if (a) {
					let e = new Laya.Point(0, 0);
					UiHelper.getSelfGlobalPos(t.icon, e), a.flyIconIn(t.suitData, e)
				}
			}
		}
		initGame() {
			let t = [],
				e = [];
			mgrOutside.getLingGanSuits(t, e);
			let a = [];
			for (let e = 0; e < t.length; e++) a.push({
				suitId: t[e],
				bAdv: !1
			});
			if (mgrOutside.unusedSuits = a, this.fillDefaultSuit(), mgrAdv.getActive("suit_try")) {
				let t = !1;
				for (let i = 0; i < 3; i++) {
					let i = Mathf.randomFromArray(e, !0);
					if (!i) break;
					a.unshift({
						suitId: i,
						bAdv: !0
					}), t = !0
				}
				t && mgrAdv.statisVideoShow("suit_try")
			}
			this.lingGanIcon.loadImage(mgrOutside.curLingGanDb.lingGanIcon)
		}
		fillDefaultSuit() {
			let t = Math.min(mgrOutside.unusedSuits.length, 5);
			this.curSuits = mgrOutside.unusedSuits.splice(0, t), this.reuseScrollView.updateList(t), this.refreshShiShangZhi(!1)
		}
		playUiAnim() {
			this.bottomNode.y = 500, this.bottomNode.alpha = 0, cc.tween(this.bottomNode).delay(.3).to(.5, {
				y: 0,
				alpha: 1
			}, {
				easing: cc.Ease.sineIn
			}).start()
		}
		refreshBar(t, e, a) {
			a ? (this.barMaskValue.progressTo(Mathf.clamp01(t / e)), cc.tween(this.barLabel, !0).then(cc.numberTo(.3, this._lastValue, t, function(t) {
				return `${t}/${e}`
			})).start()) : (this.barMaskValue.progress = t / e, this.barLabel.text = `${t}/${e}`), this._lastValue = t
		}
		refreshShiShangZhi(t) {
			let e = 0;
			for (var a = 0; a < this.curSuits.length; a++) this.curSuits[a] && (e += mgrOutside.calcSuitShiShangZhi(this.curSuits[a].suitId));
			this.barLabel.text = e + "", this.refreshBar(e, mgrOutside.curLingGanDb.score, t)
		}
		on_click_buttonOk() {
			this.close();
			let t = mgrOutside.curLingGanDb.lingGanScore * (this._lastValue / mgrOutside.curLingGanDb.score) | 0;
			mgrOutside.lingGanScore += t;
			let e = new Laya.Point;
			UiHelper.getSelfGlobalPos(this.buttonOk.node, e), _G.sendMsg("ADD_SCORE", e)
		}
	}
	class LingGanItem extends ViewBase {
		constructor(t) {
			super(), this.create(), this.bSelectMsg = t
		}
		create() {
			let t = (new Laya.Sprite).size(130, 180);
			this.icon = t.addChild(new Laya.Sprite), this.icon.pos(65, 80, !0).size(110, 140).pivot(55, 70), this.value = t.addChild(new Laya.Label), this.value.pos(74, 155, !0), this.value.anchorX = .5, this.value.color = "#3154a8", this.value.fontSize = 20, this.adv = t.addChild((new Laya.Sprite).loadImage("res/ui/btns/video.png")).pos(3, 2, !0), this.createFromNode(t)
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this)), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"suit_try" == t.advName && t.params == this.suitId && _G.sendMsg("UI_CLICK_LING_GAN_ITEM", this)
		}
		setData(t) {
			if (this.suitData = t, this.suitId = t.suitId, this.suitId) {
				let e = db.get_suit_db(this.suitId);
				this.resNode.loadImage("res/ui/pnl_outside/bg_card.png"), this.icon.loadImage(e.icon), this.value.text = mgrOutside.calcSuitShiShangZhi(this.suitId) + "", this.adv.visible = t.bAdv
			} else this.resNode.loadImage("res/ui/pnl_outside/card_empty.png"), this.icon.texture = null, this.value.changeText(""), this.adv.visible = !1
		}
		flyIconIn(t, e) {
			this.suitData = t, this.suitId = t.suitId;
			let a = db.get_suit_db(this.suitId),
				i = new Laya.Point(0, 0);
			UiHelper.getSelfGlobalPos(this.icon, i), UiHelper.playImageScaleAndJump(a.icon, e, i, null, () => {
				this.destroyed || this.setData(this.suitData)
			})
		}
		onClick() {
			this.bSelectMsg ? this.suitData.bAdv ? (mgrAdv.statisVideoClick("suit_try"), mgrAdv.dispatchAdv("suit_try", this.suitId, !0)) : _G.sendMsg("UI_CLICK_LING_GAN_ITEM", this) : (mgrOutside.chooseSuitIndex = this.index, mgrAlert.openPanelLoading(UI_NAME.PanelSuitSelect))
		}
	}
	class PanelLottery extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelLottery.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_roleISprite: "Laya.Sprite",
				cc_buttonLottery: "UIButton",
				cc_itemNode: "Laya.Sprite",
				cc_tipLabel: "Laya.Label",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_lottery", "banner_lottery"), this.circleEffects = []
		}
		buildUi() {
			this.initItems(), this.fillCount(), this.fillItem(), mgrSzz.canLottery() ? UiHelper.playBreathe(this.buttonLottery.node) : this.grayLottery()
		}
		dispose() {
			this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		initItems() {
			this.items = mgrSzz.getAwardItems();
			for (let t = 0; t < this.items.length; t++) this.items[t].index = t;
			Mathf.shuffle(this.items)
		}
		fillItem() {
			let t = this.items,
				e = mgrSzz.awardIndex % mgrSzz.lottery_each_count;
			for (let a = 0; a < t.length; a++) {
				let i = t[a],
					s = db.get_item_db(i.itemId),
					n = this.itemNode.getChildAt(a);
				n.skin = s.icon;
				let o = n.getChildByName("stars"),
					r = n.getChildByName("count");
				n.getChildByName("focus").visible = !1, 2 == s.type ? (o.visible = !0, r.visible = !1, UiHelper.setStars(o.getComponent(UIHVLayout), s.quality, 5)) : (o.visible = !1, r.visible = !0, r.text = "+" + i.count), n.gray = i.index < e
			}
			let a = Math.min(mgrSzz.awardIndex / mgrSzz.lottery_each_count | 0, db.game_cnf.szz_lottery_image.length - 1);
			this.roleISprite.loadImage(db.game_cnf.szz_lottery_image[a]);
			for (let t = 0; t < 8; t++) {
				let e = (t + 4) % 8;
				UiHelper.playScaleOnce(this.itemNode.getChildAt(e), .1 * t + .4, .3)
			}
		}
		fillCount() {
			mgrSzz.canLottery() ? this.tipLabel.text = "" : this.tipLabel.text = String.format(mgrI18n.getText("panelLottery.2"), (db.game_cnf.like_lottery_count - mgrSzz.likeCount).toString())
		}
		grayLottery() {
			Laya.UIUtils.gray(this.buttonLottery.node, !0), this.buttonLottery.interactable = !1, cc.clearTween(this.buttonLottery.node)
		}
		getAward(t) {
			this.fillCount(), this.buttonClose.interactable = !0, mgrAlert.addAndAlert(t, 41), _G.sendMsg("LOTTERY_SUC"), this.fillItem()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonLottery() {
			if (!mgrSzz.canLottery()) return void mgrAlert.alertText(mgrI18n.getText("panelLottery.3"));
			GameStatistics.statisCommonEvent(3014), 1 == mgrSzz.awardIndex && GameStatistics.statisCommonEvent(7024);
			let t = mgrSzz.awardIndex % mgrSzz.lottery_each_count,
				e = mgrSzz.makeLottery(),
				a = mgrSzz.awardIndex % mgrSzz.lottery_each_count;
			if (e) {
				this.grayLottery(), this.buttonClose.interactable = !1, this.scheduleOnce(2, () => {
					a < t && this.initItems(), this.getAward(e);
					for (let t = 0; t < this.circleEffects.length; t++) this.circleEffects[t].stop()
				});
				let i = .1;
				for (let t = 0; t < 8; t++) {
					let e = this.itemNode.getChildAt(t),
						a = this.circleEffects[t];
					a || (a = this.addEffect("142"), this.circleEffects[t] = a);
					let s = new Laya.Point(0, 0);
					UiHelper.getSelfGlobalPos(e, s);
					let n = new Laya.Vector3(s.x, s.y, 0);
					this.global2camer(n, n), cc.tween(this).delay(i * t).call(function() {
						a.play(n)
					}).start()
				}
			}
		}
	}
	class GameCross {
		constructor(t, e, a) {
			this._x = null, this._y = null, this._type = e, Timer.callLater(.5, () => {
				this.initPosition(t, a)
			})
		}
		static create(t, e = 0, a = 0) {
			this._list.push(new GameCross(t, e, a))
		}
		static setVisible(t) {
			for (let e = 0; e < this._list.length; e++) this._list[e].visible = t
		}
		static get isEmpty() {
			return 0 == this._list.length
		}
		set visible(t) {
			this._visible = t, t ? null != this._x && mgrSdk.openCrossRecommend(this._x, this._y, this._type) : mgrSdk.closeCrossRecommend()
		}
		initPosition(t, e) {
			let a = t.localToGlobal(new Laya.Point(0, 0));
			this._x = Math.round(a.x / _G.canvasWidth * Laya.Browser.clientWidth), this._y = Math.round(a.y / _G.canvasHeight * Laya.Browser.clientHeight), this._visible && (this.visible = !0)
		}
	}
	GameCross._list = [];
	class MoreGameIcon {
		constructor(t) {
			this.destroyed = !1, this._msgHandler || (this._sprite = t, this._msgHandler = new MsgHandler, this._msgHandler.registerListeners({
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this),
				[BASE_MSG.SDK_OPEN_JUMP_RESULT]: this.onMsgOpenJumpResult.bind(this)
			}), this._msgHandler.startProcMsg(), t.setVisible(!1), this.onMsgCopChange())
		}
		dispose() {
			this.destroyed = !0, this._msgHandler && (this._msgHandler.stopProcMsg(), this._msgHandler = null, this._sprite = null)
		}
		onMsgCopChange() {
			!this._sprite.visible && mgrSdk.getSubCop("b_more_game_icon") && this.changeIndex()
		}
		onMsgOpenJumpResult(t) {
			if ("single" == t.type) {
				let e = t.jumpInfo;
				this.fillData(e)
			}
		}
		fillData(t) {
			t && (this.data || (cc.tween(this._sprite, !0).repeatForever(cc.tween().delay(1).to(.1, {
				rotation: 5
			}).to(.2, {
				rotation: -5
			}).to(.2, {
				rotation: 5
			}).to(.1, {
				rotation: 0
			}).delay(1).call(this.changeIndex.bind(this))).start(), UiHelper.addClickEvent(this._sprite, this.onClickIcon.bind(this))), this.data = t[0], this.data && this.data.url && (this._sprite.setVisible(!0), this._sprite.loadImage(this.data.url)))
		}
		changeIndex() {
			mgrSdk.openJump("single")
		}
		onClickIcon() {
			mgrSdk.jumpOtherGame(this.data.index, "single")
		}
	}
	class PanelMain extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelMain.json", this._exportNodeInfo = {
				cc_touchNode: "Laya.Image",
				cc_topNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_barLevel: "UIBarMask",
				cc_labelLevel: "Laya.Label",
				cc_buttonShopLvup: "UIButton",
				cc_buttonCoin: "UIButton",
				cc_coinBar: "UIBarMask",
				cc_coinCount: "Laya.Label",
				cc_buttonDaily: "UIButton",
				cc_buttonChallenge: "UIButton",
				cc_buttonRank: "UIButton",
				cc_nodeButtonUlMoreGame: "Laya.Sprite",
				cc_buttonUlMoreGame: "UIButton",
				cc_nodeButtonInstall: "Laya.Sprite",
				cc_buttonInstall: "UIButton",
				cc_gameIcon: "Laya.Sprite",
				cc_nodeMoreGame: "Laya.Box",
				cc_buttonMoreGame: "UIButton",
				cc_buttonCpTest: "UIButton",
				cc_spriteCpTest: "Laya.Sprite",
				cc_topRightNode: "Laya.Sprite",
				cc_settingBox: "Laya.Box",
				cc_imageSettingBg: "Laya.Image",
				cc_buttonSettingBox: "UIButton",
				cc_buttonSign: "UIButton",
				cc_buttonSetting: "UIButton",
				cc_buttonRoleTest: "UIButton",
				cc_spriteRoleTest: "Laya.Sprite",
				cc_spriteBubble: "Laya.Sprite",
				cc_buttonSuit: "UIButton",
				cc_nodeButtonVideoRank: "Laya.Box",
				cc_buttonVideoRank: "UIButton",
				cc_nodeSubscribe: "Laya.Box",
				cc_buttonSubscribe: "UIButton",
				cc_nodeMoreGameBox: "Laya.Box",
				cc_buttonMoreGameBox: "UIButton",
				cc_cross1: "Laya.Sprite",
				cc_cross2: "Laya.Sprite",
				cc_buttonMainQuest: "UIButton",
				cc_mainQuestTitle: "Laya.Label",
				cc_mainQuestTip: "Laya.Label",
				cc_mainQuestRedTip: "Laya.Sprite",
				cc_buttonHotActive: "UIButton",
				cc_spriteHotIcon: "Laya.Sprite",
				cc_spritebtnHotBg: "Laya.Sprite",
				cc_buttonSwitchRole: "UIButton",
				cc_spriteSwitchRole: "Laya.Sprite",
				cc_buttonDanceDraw: "UIButton",
				cc_spriteDanceDraw: "Laya.Sprite",
				cc_buttonClassRoom: "UIButton",
				cc_spriteClassRoom: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_buttonBox: "UIButton",
				cc_spriteBox: "Laya.Sprite",
				cc_buttonFree: "UIButton",
				cc_spriteFree: "Laya.Sprite",
				cc_buttonPlay: "UIButton",
				cc_spritePlay: "Laya.Sprite",
				cc_buttonDream: "UIButton",
				cc_spriteDream: "Laya.Sprite",
				cc_buttonEntrust: "UIButton",
				cc_spriteEntrust: "Laya.Sprite",
				cc_nodeGuidEntrust: "Laya.Sprite",
				cc_boxMagic: "Laya.Box",
				cc_barMask1: "UIBarMask",
				cc_barMask2: "UIBarMask",
				cc_barMask3: "UIBarMask",
				cc_buttonMagic: "UIButton",
				cc_leftAnimNode: "Laya.Sprite"
			}, this.firstGame = !1, this.spine = null, this.isSettingBoxOpen = !1, this.guideFinger = null, this._callFuncs = [], this.mainQuestTween = !1, this.magicCount = 0
		}
		addPreloadRes(t) {
			mgrPart.addPartResList(mgrPart.partsWear, t)
		}
		buildUi() {
			Logger.warn("----------- panel main 1"), mgrRank.setPlayerName(), Logger.warn("----------- panel main 2"), mgrSdk.getFollowOfficialAccountState(), Logger.warn("----------- panel main 3"), mgrI18n.trySetI18nImage(this.buttonShopLvup.node, "pnl_main_22.png"), mgrI18n.trySetI18nImage(this.buttonDaily.node, "pnl_main_19.png"), mgrI18n.trySetI18nImage(this.buttonChallenge.node, "hallowmas_main_02.png"), mgrI18n.trySetI18nImage(this.spriteCpTest, "pnl_main_06.png"), mgrI18n.trySetI18nImage(this.buttonSign.node, "pnl_main_23.png"), mgrI18n.trySetI18nImage(this.buttonSuit.node, "pnl_main_27.png"), mgrI18n.trySetI18nImage(this.spriteRoleTest, "pnl_main_29.png"), Logger.warn("----------- panel main 4"), mgrI18n.trySetI18nImage(this.spriteSwitchRole, "pnl_main_28.png"), mgrI18n.trySetI18nImage(this.spriteDanceDraw, "pnl_main_07.png"), mgrI18n.trySetI18nImage(this.spriteClassRoom, "pnl_main_05.png"), Logger.warn("----------- panel main 5"), mgrI18n.trySetI18nImage(this.spriteBox, "hallowmas_main_13.png"), mgrI18n.trySetI18nImage(this.spriteFree, "hallowmas_main_15.png"), mgrI18n.trySetI18nImage(this.spritePlay, "pnl_main_16.png"), mgrI18n.trySetI18nImage(this.spriteDream, "hallowmas_main_14.png"), mgrI18n.trySetI18nImage(this.spriteEntrust, "hallowmas_main_16.png"), mgrI18n.trySetI18nImage(this.spritebtnHotBg, "pnl_main_hot.png"), Logger.warn("----------- panel main 6"), _G.isGuiding || (this.instOrBanner = new AdvInstOrBanner("enter_main", null), this.instOrBanner.onFocus(!0));
			let t = db.cop.hot_activity_list_v2[0],
				e = db.get_hot_activity_db(t);
			e && this.spriteHotIcon.loadImage(e.main_icon), Logger.warn("----------- panel main 7"), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_MAIN) || (Logger.warn("----------- panel main 8"), this.context && this.context.data ? Logger.warn("----------- panel main 9") : (!PanelMain.offlineShowed && mgrOffline.offlineProfit > 0 ? Logger.warn("----------- panel main 10") : (Logger.warn("----------- panel main 11"), mgrGame.tryOpenAdvertisingTips() || (Logger.warn("----------- panel main 12"), mgrGame.tryOpenPanelRankVideoTips(0) || (Logger.warn("----------- panel main 13"), mgrSign.canGetAward() ? (Logger.warn("----------- panel main 14"), mgrPanel.openPanel(UI_NAME.PanelSign)) : mgrDailyQuest.hasCommitQuest() ? (Logger.warn("----------- panel main 15"), mgrPanel.openPanel(UI_NAME.PanelQuest)) : (Logger.warn("----------- panel main 16"), mgrDailyQuest.getCompleteCount() >= db.game_cnf.daily_quest_count && !mgrDailyQuest.isDailyAward && (Logger.warn("----------- panel main 17"), mgrPanel.openPanel(UI_NAME.PanelQuest))))), Logger.warn("----------- panel main 18"), mgrGame.tryShowPanelFollow()), Logger.warn("----------- panel main 19"), mgrGame.isSupportSubscribe() && !_G.isGuiding && mgrGame.isSubScrbeCd() && (Logger.warn("----------- panel main 20"), mgrAlert.openPanelLoading(UI_NAME.PanelSubscribe))), Logger.warn("----------- panel main 21"), db.cop.isSupportFavoriteGuide && (Logger.warn("----------- panel main 22"), mgrSdk.addGameToMyFavorite())), (mgrOffline.firstPlayGame || this.context && this.context.data) && (this.firstGame = !0), Logger.warn("----------- panel main 23"), this.imageSettingBg.scaleX = 0, this.buttonShopLvup.node.x = -170, this.buttonDaily.node.x = -150, this.buttonChallenge.node.x = -150, this.firstGame && (this.buttonInstall.node.x = -150, this.gameIcon.x = -150), this.buttonSetting.node.scale(0, 0), this.buttonSign.node.scale(0, 0), this.buttonSetting.node.visible = !1, this.buttonSign.node.visible = !1, this.nodeSubscribe.visible = mgrGame.isSupportSubscribe(), this.buttonSubscribe.node.x = 150, this.buttonMoreGameBox.node.x = 150, this.buttonVideoRank.node.x = 150, this.settingBox.x = 150, this.buttonRank.node.visible = !1, this.buttonRoleTest.node.visible = mgrAdv.checkActive("role_test"), this.spriteBubble.scale(0, 0), this.buttonDanceDraw.node.visible = mgrAdv.checkActive("draw_dance"), this.buttonDanceDraw.node.x = 260, this.buttonCpTest.node.visible = mgrAdv.checkActive("cp_test_show"), this.buttonCpTest.node.x = -260, this.buttonSwitchRole.node.x = 260, this.buttonHotActive.node.x = 260, this.buttonClassRoom.node.x = 260, this.buttonSuit.node.x = 150, this.buttonMainQuest.node.x = 260, this.buttonMainQuest.node.visible = !1, this.buttonMainQuest.transition = UIButton.TRANSITION_NONE, this.firstGame && (this.buttonMoreGame.node.x = -150), this.bottomNode.y = 200, this.currencyBar = new CurrencyBar, this.currencyBar.setParent(this.topNode), this.currencyBar.y = -240, this.roleLevel = new RoleLevel(this.barLevel, this.labelLevel), this.buttonCoin.stopPropagation = !0, Logger.warn("----------- panel main 24"), mgrOffline.firstPlayGame && (mgrOffline.firstPlayGame = !1, mgrOffline.resetOfflineTime(), PanelMain.offlineShowed = !0), this.barMask1.style = UIBarMask.STYLE_VERTICAL, this.barMask1.progress = 0, this.barMask2.style = UIBarMask.STYLE_VERTICAL, this.barMask2.progress = 0, this.barMask3.style = UIBarMask.STYLE_VERTICAL, this.barMask3.progress = 0, this.boxMagic.visible = !1, Logger.warn("----------- panel main 25"), this.playUiEffect(), Logger.warn("----------- panel main 26"), this.init3D(), Logger.warn("----------- panel main 27"), this.initTip(), Logger.warn("----------- panel main 28"), this.onMsgCopChange(), Logger.warn("----------- panel main 29"), mgrSdk.getShortcutState(), mgrSound.playMusic("bj_001", !0), this.spriteSwitchRole._orgPosY = this.spriteSwitchRole.y, cc.tween(this.spriteSwitchRole).repeatForever(cc.tween().to(.3, {
				y: this.spriteSwitchRole._orgPosY + 5
			}).to(.6, {
				y: this.spriteSwitchRole._orgPosY - 5
			}).to(.3, {
				y: this.spriteSwitchRole._orgPosY
			})).start(), this.buttonDanceDraw.node.visible && (this.spriteDanceDraw._orgPosY = this.spriteDanceDraw.y, cc.tween(this.spriteDanceDraw).repeatForever(cc.tween().to(.3, {
				y: this.spriteDanceDraw._orgPosY + 5
			}).to(.6, {
				y: this.spriteDanceDraw._orgPosY - 5
			}).to(.3, {
				y: this.spriteDanceDraw._orgPosY
			})).start()), this.spriteClassRoom._orgPosY = this.spriteClassRoom.y, cc.tween(this.spriteClassRoom).repeatForever(cc.tween().to(.3, {
				y: this.spriteClassRoom._orgPosY + 5
			}).to(.6, {
				y: this.spriteClassRoom._orgPosY - 5
			}).to(.3, {
				y: this.spriteClassRoom._orgPosY
			})).start(), this.buttonCpTest.node.visible && (cc.clearTween(this.spriteCpTest), UiHelper.playRotCycle(this.spriteCpTest)), this.buttonRoleTest.node.visible && cc.tween(this.spriteBubble).repeatForever(cc.tween().to(.1, {
				scaleX: 1,
				scaleY: 1
			}).to(.1, {
				rotation: 20
			}).to(.2, {
				rotation: -20
			}).to(.1, {
				rotation: 0
			}).to(.1, {
				rotation: 20
			}).to(.2, {
				rotation: -20
			}).to(.1, {
				rotation: 0
			}).delay(2).to(.1, {
				scaleX: 0,
				scaleY: 0
			}, cc.OPTION.BACK_IN).delay(3)).start(), this.registerMsg({
				GUIDE_ALL_FINISH: this.onMsgGuideAllFinish.bind(this),
				SIGN_UPDATE: this.onMsgSignUpdate.bind(this),
				SUIT_UPDATE: this.onMsgSuitUpdate.bind(this),
				FOLLOW_TIP_UPDATE: this.onMsgFollowTipUpdate.bind(this),
				LOTTERY_SUC: this.onMsgLotterySuc.bind(this),
				PART_JUMP_FINISH: this.close.bind(this),
				JOIN_LEVEL: this.close.bind(this),
				JOIN_SZZ: this.close.bind(this),
				ENTER_PVP: this.close.bind(this),
				ADVERTISING_JUMP_FINISH: this.close.bind(this),
				DANCE_ROLE_START_ANIM: this.close.bind(this),
				CLASS_ROLE_START_ANIM: this.close.bind(this),
				START_CONTRACT: this.close.bind(this),
				WAKEUP: this.wakeup.bind(this),
				JUMP_PANEL: this.onMsgJumpPanel.bind(this),
				CLASS_ROLE_LEVEL_CHANGE: this.onMsgClassRoleLevelChange.bind(this),
				MANICURE_STAGE_FINISH: this.onMsgManicureStageFinish.bind(this),
				SUBSCRIBE_SUCCESS: this.onMsgSubscribeSuccess.bind(this),
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this),
				[BASE_MSG.QUEST_STATE_CHANGE]: this.onMsgQuestStateChange.bind(this),
				[BASE_MSG.SDK_INSTALL_SHORTCUT_SUC]: this.onMsgInstallShortcutSuc.bind(this),
				[BASE_MSG.SDK_GET_SHORTCUT_STATE_SUC]: this.onMsgGetShortcutStateSuc.bind(this),
				MSG_I18N_REFRESH: this.onMsgI18nRefresh.bind(this)
			}), this.startProcMsg(), Logger.warn("----------- panel main 30"), PanelMain.enterHuDongGame && (PanelMain.enterHuDongGame = !1, GameStatistics.statisOnStageEnd(7505));
			let a = this.addEffect("192");
			a.play(), this.effectSnow = a, Logger.warn("----------- panel main 31")
		}
		dispose() {
			if (this.stopProcMsg(), this.cleawrEffectRoot(), this.clearShexiangji(), this.clearPlayer(), this.clearGemstone(), this.clearEffect(), this.spine && (_G.poolManager.put(this.spine), this.spine = null), this.avatar) {
				let t = this.avatar.baseBody.findChild("Bip001");
				t.transform.localScale.setValue(1, 1, 1), t.transform.localScale = t.transform.localScale, this.avatar.destroy()
			}
			this.questTip && (this.questTip.dispose(), this.challengeTip.dispose(), this.signTip.dispose(), this.settingBoxTip.dispose(), this.levelTip.dispose(), this.dreamTip.dispose(), this.boxTip.dispose(), this.suitTip.dispose(), this.classTip.dispose()), this.room && this.room.dispose(), this.roleLevel && this.roleLevel.dispose(), this.currencyBar && this.currencyBar.dispose(), this.moreGameIcon && this.moreGameIcon.dispose(), this.instOrBanner && this.instOrBanner.dispose(), super.dispose(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELMAIN_BUTTONPLAY), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELMAIN_BUTTONWEITUO), mgrGuide.getCurGuideId() == GUD_EVENT.GOTO_CAT_COIN && _G.sendMsg("GUIDE_FORCE_CLOSE")
		}
		regGuide() {
			mgrGuide.registerGuideNode(GUD_REG_NODE.PANELMAIN_BUTTONPLAY, this.buttonPlay.node), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELMAIN_BUTTONWEITUO, this.buttonEntrust.node)
		}
		onFocus(t) {
			if (super.onFocus(t), this.instOrBanner && this.instOrBanner.onFocus(t), this.checkBaiduTouTiao(t), _G.sendMsg("UI_MAIN_FOCUS_CHANGE", t), t) {
				for (let t = this._callFuncs.length - 1; t >= 0; t--) this._callFuncs.shift()();
				this.effectSnow && this.effectSnow.play()
			}
		}
		show() {
			this.avatar && this.avatar.resumeAnim(), this.buttonPlay && this.playUiEffect(), super.show()
		}
		hide() {
			this.avatar && this.avatar.pauseAnim(), super.hide()
		}
		updateCoin() {
			let t = this.coinBar.progress,
				e = mgrCat.getCoinPercent();
			this.coinBar.progress = e, this.coinCount.text = mgrCat.curCoinCount + "", this.scheduleOnce(5, this.updateCoin), 1 == e ? (this.isFocus && mgrGuide.dispatchGuide(GUD_EVENT.GOTO_CAT_COIN) && mgrGuide.registerGuideNode(GUD_REG_NODE.PANELMAIN_BUTTONCOIN, this.buttonCoin.node), t != e && UiHelper.playTipRot(this.buttonCoin.node)) : 1 == t && cc.clearTween(this.buttonCoin.node), this.isFocus && BaseFacade.mItem.enoughItem("1001", 1e4) && mgrGuide.dispatchGuide(GUD_EVENT.GOTO_DREAM) && mgrGuide.registerGuideNode(GUD_REG_NODE.PANELMAIN_BUTTONDREAM, this.buttonDream.node)
		}
		onMsgGuideAllFinish() {
			this.autoOpenPanelInSequence(), mgrSign.isTodayFinish || mgrAlert.openPanelLoading(UI_NAME.PanelSign)
		}
		onMsgI18nRefresh() {
			this.updateMainQuest()
		}
		onMsgSignUpdate() {
			this.signTip.updateTip(), this.settingBoxTip.updateTip()
		}
		onMsgSuitUpdate() {
			this.suitTip.updateTip()
		}
		onMsgFollowTipUpdate() {
			BaseFacade.mItem.isOwned("1026")
		}
		onMsgLotterySuc() {
			this.challengeTip.updateTip()
		}
		onMsgJumpPanel(t) {
			switch (console.log("QT_PanelJump", "" + t), t) {
				case JUMP_PANEL.SKINCARE:
				case JUMP_PANEL.MANG_HE:
				case JUMP_PANEL.INSIDE:
					mgrJumpPanel.jumpTo(t);
					break;
				case JUMP_PANEL.DREAM:
					this.on_click_buttonDream();
					break;
				case JUMP_PANEL.ENTRUST:
					this.on_click_buttonEntrust();
					break;
				case JUMP_PANEL.PVP:
					mgrPvp.isJoin ? mgrAlert.openGameLoading(UI_NAME.PanelPvp) : (GameStatistics.statisCommonEvent(6001), mgrAlert.openPanelLoading(UI_NAME.PanelPvpCard));
					break;
				case JUMP_PANEL.SWITCH_ROLE:
					this.on_click_buttonSwitchRole();
					break;
				case JUMP_PANEL.ROLE_TEST:
					this.on_click_buttonRoleTest();
					break;
				case JUMP_PANEL.DANCE_DRAW:
					this.on_click_buttonDanceDraw();
					break;
				case JUMP_PANEL.CP_TEST:
					this.on_click_buttonCpTest();
					break;
				case JUMP_PANEL.CLASS_ROOM:
					this.on_click_buttonClassRoom()
			}
		}
		onMsgClassRoleLevelChange() {
			this.avatar && this.avatar.tryShowXiuBiao(!0)
		}
		onMsgManicureStageFinish() {
			this.avatar && this.avatar.refreshFingernails()
		}
		onMsgSubscribeSuccess() {
			this.nodeSubscribe.setVisible(mgrGame.isSupportSubscribe())
		}
		onMsgItemChange(t) {
			switch (t.itemId) {
				case "1001":
					this.dreamTip.updateTip();
					break;
				case "1010":
					this.levelTip.updateTip()
			}
		}
		onMsgCopChange() {
			this.nodeMoreGame.setVisible(!!mgrSdk.getSubCop("b_more_game_list")), this.nodeButtonUlMoreGame.setVisible(db.cop.isULMoreGame), this.nodeButtonInstall.setVisible(db.cop.isSupportInstallShortcut && !mgrSdk.isInstallShortcut), this.nodeButtonInstall.visible && (cc.clearTween(this.nodeButtonInstall), UiHelper.playRotCycle(this.nodeButtonInstall)), this.nodeMoreGameBox.setVisible(db.cop.isSupportChannelMoreGameBox && !!mgrSdk.getSubCop("b_more_game_box")), this.nodeSubscribe.setVisible(mgrGame.isSupportSubscribe()), this.moreGameIcon || (this.moreGameIcon = new MoreGameIcon(this.gameIcon)), this.checkBaiduTouTiao(this.isFocus), this.nodeButtonVideoRank.setVisible(db.cop.isSupportVideoRank)
		}
		onMsgQuestStateChange(t) {
			switch (console.log("QT_PANELMAIN", "" + t.questDb.type), t.questDb.type) {
				case 0:
					this.updateMainQuest();
					break;
				case 8:
					this.questTip.updateTip();
					break;
				case 11:
					this.classTip.updateTip()
			}
		}
		onMsgInstallShortcutSuc() {
			this.nodeButtonInstall.setVisible(!1), cc.clearTween(this.buttonInstall.node);
			mgrAlert.addAndAlert({
				itemId: "1000",
				count: 50
			}, 42)
		}
		onMsgGetShortcutStateSuc() {
			this.nodeButtonInstall.setVisible(db.cop.isSupportInstallShortcut && !mgrSdk.isInstallShortcut), this.nodeButtonInstall.visible && (cc.clearTween(this.buttonInstall.node), UiHelper.playRotCycle(this.buttonInstall.node))
		}
		playUiEffect() {
			let t = this.getEffect("114");
			t.setScale(.8, .8, .8), t.followTarget(this.labelLevel, this.cameraEffect, 0, -48), t.play(), (t = this.getEffect("155")).followTarget(this.buttonPlay.node, this.cameraEffect), t.play()
		}
		init3D() {
			if (this.context && this.context.data) {
				this.room = this.context.data.room;
				try {
					this.onSceneLoaded()
				} catch (t) {
					console.error("error:"), console.error(t)
				}
			} else this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))
		}
		onSceneLoaded() {
			if (Logger.warn("----------- panel main 26 - 1"), this.addChild(this.room.scene), Logger.warn("----------- panel main 26 - 1 - 1"), this.resNode.setChildIndex(this.room.scene, 0), Logger.warn("----------- panel main 26 - 1 - 2"), this.room.changeToMain(), Logger.warn("----------- panel main 26 - 2"), this.context) {
				if (mgrGuide.getCurGuideId() == GUD_EVENT.ENTER_MAIN) {
					Logger.warn("----------- panel main 26 - 3"), this.boxMagic.visible = !0, this.buttonMagic.clickDelta = .05;
					let t = this.addEffect("135");
					t.setScale(1, 1, 1), t.followTarget(this.buttonMagic.node, this.cameraEffect, 100), t.play(), this.guideFinger = t, Laya.timer.frameLoop(1, this, this.refreshMagic)
				}
				Logger.warn("----------- panel main 26 - 4");
				let t = this.context.data,
					e = t.avatar,
					a = t.shexiangji;
				this.avatar = e, this.shexiangji = a, this.gemstone = t.gemstone;
				let i = new AnimatorFixedPlayer,
					s = db.get_role_contract_db(mgrGame.contractIndex);
				i.addModelAnim(e.baseBody, s.bodyAnimationId), i.addModelAnim(e.baseFace, s.faceAnimationId), i.addModelAnim(a, s.shexiangjiAnimationId), i.addTimeCallback(60 / 180, () => {
					Logger.warn("----------- panel main 26 - 7"), this.clearGemstone()
				}), i.addTimeCallback(161 / 180, () => {
					Logger.warn("----------- panel main 26 - 8");
					let t = this.shexiangji.findChild("camera");
					this.room.camera.transform.position = t.transform.position, this.room.camera.transform.rotation = t.transform.rotation, this.room.camera.fieldOfView = t.fieldOfView, t.active = !1, this.room.camera.active = !0;
					let e = UiHelper.findAllShurikenParticleSystem(this.shexiangji.findChild("e_sky"));
					for (let t = 0; t < e.length; t++) e[t].stop();
					this.room.cameraIndex = -1, this.room.moveCamerToMain(() => {
						Logger.warn("----------- panel main 26 - 9"), this.room.mapNode.active = !0, UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 1, 1, 1), UiHelper.setTransformVec3Prop(this.room.skybox.transform, "localScale", 7, 7, 7), this.room.playFadeout(), mgrGuide.sendMsgKey("START_MAIN"), this.setUiMenuVisible(!0), this.playRoleAnim()
					})
				}), i.addTimeCallback(1, () => {
					Logger.warn("----------- panel main 26 - 10"), this.cleawrEffectRoot(), this.clearShexiangji(), this.boxMagic.visible = !1, this.guideFinger && this.guideFinger.hide(), this.context && this.context.bSwitch && (Logger.warn("----------- panel main 26 - 11"), _G.isGuiding = !1, mgrGame.tryOpenAdvertisingTips() || mgrGame.tryOpenPanelRankVideoTips(0) || (mgrSign.canGetAward() ? mgrPanel.openPanel(UI_NAME.PanelSign) : mgrDailyQuest.hasCommitQuest() ? mgrPanel.openPanel(UI_NAME.PanelQuest) : mgrDailyQuest.getCompleteCount() >= db.game_cnf.daily_quest_count && !mgrDailyQuest.isDailyAward && mgrPanel.openPanel(UI_NAME.PanelQuest)), mgrGame.tryShowPanelFollow(), mgrGame.isSupportSubscribe() && !_G.isGuiding && mgrGame.isSubScrbeCd() && mgrAlert.openPanelLoading(UI_NAME.PanelSubscribe), PanelDialogCat.tryOpenPanel(3)), Logger.warn("----------- panel main 26 - 12")
				}), i.play(), Logger.warn("----------- panel main 26 - 5"), this.effectRoot = new GModel(db.MODEL_DB_ID.come), this.effectRoot.create(), this.effectRoot.callIfLoaded(() => {
					Logger.warn("----------- panel main 26 - 13");
					let t = db.get_role_contract_db(mgrGame.contractIndex),
						e = _G.poolManager.get(Particle, t.effectId);
					e.setParent(this.effectRoot.node), e.play(), this.effectCome = e
				}), this.effectRoot.setParent(this.room.root)
			} else {
				switch (Logger.warn("----------- panel main 26 - 6"), mgrPart.partsWear[13] ? this.room.camera.fieldOfView = 40 : this.room.camera.fieldOfView = 35, this.avatar = new RoleAvatar, this.avatar.on("Exit", this, t => {
						this.destroyed || t == MODEL_ANIM.MAIN_IDLE && mgrGame.playRandomAnim(this.avatar, "panelmain")
					}), this.room.root.addChild(this.avatar), !PanelMain.offlineShowed && !_G.isGuiding && mgrOffline.offlineProfit > 0 && (mgrGame.roleState = 0), mgrGame.roleState) {
					case 3:
						mgrGame.roleState = 2;
					case 2:
						this.playRoleAnim(), this.setUiMenuVisible(!0);
						break;
					case 0:
						this.avatar.active = !1, this.room.switchToNight(!0), UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 5, 5, 5), this.showGemstone(!0);
						break;
					case 1:
						this.gotoSleep(), this.setUiMenuVisible(!1)
				}
				this.initTouch(), mgrGuide.sendMsgKey("START_MAIN")
			}
			this.avatar.tryShowXiuBiao()
		}
		playRoleAnim() {
			mgrGame.isPiJuan ? this.avatar.playPiJuan() : (this.avatar.playIdle(), this.avatar.playZaYang())
		}
		clearShexiangji() {
			this.shexiangji && (this.shexiangji.dispose(), this.shexiangji = null)
		}
		cleawrEffectRoot() {
			this.effectRoot && (this.effectRoot.dispose(), this.effectRoot = null), this.effectCome && (_G.poolManager.put(this.effectCome), this.effectCome = null)
		}
		initTouch() {
			this.touchNode.on(Laya.Event.CLICK, this, () => {
				switch (mgrGame.roleState) {
					case 2:
						this.avatar.stopJingZi(), mgrGame.isPiJuan ? this.avatar.playPiJuan() : this.avatar.playHuDong();
						break;
					case 0:
						if (this.gemstone && this.gemstone.isLoaded) {
							let t = Laya.Point.TEMP;
							UiHelper.worldToScreen(this.room.camera, this.gemstone.transform.position, t), Mathf.distance2(t.x - Laya.stage.mouseX, t.y - Laya.stage.mouseY) <= 150 && this.wakeup()
						}
				}
			})
		}
		checkBaiduTouTiao(t) {
			db.cop.isSupportRecommendationBtn && (GameCross.isEmpty && (GameCross.create(this.cross1, 0), "baidu" == mgrSdk.h5_channel && GameCross.create(this.cross2, 1)), GameCross.setVisible(t))
		}
		checkAlert() {}
		initTip() {
			this.questTip = new UITip(this.buttonDaily.node, function() {
				if (mgrDailyQuest.hasCommitQuest()) return 0;
				return mgrDailyQuest.getCompleteCount() >= db.game_cnf.daily_quest_count && !mgrDailyQuest.isDailyAward ? 0 : -1
			}), this.signTip = new UITip(this.buttonSign.node, function() {
				return mgrSign.canGetAward() ? 0 : -1
			}, 60), this.settingBoxTip = new UITip(this.settingBox, function() {
				return mgrSign.canGetAward() ? 0 : -1
			}, 60), this.challengeTip = new UITip(this.buttonChallenge.node, function() {
				return BaseFacade.mItem.getItemCount("1014") > 0 || mgrAdv.getActive("free_like") ? 0 : mgrSzz.canLottery() ? 0 : mgrPvp.curTicket > 0 || mgrAdv.getActive("pvp") || mgrPvp.isPvpAwardCanReceive() ? 0 : -1
			}), this.levelTip = new UITip(this.buttonEntrust.node, function() {
				return BaseFacade.mItem.enoughItem("1010", 1) || mgrAdv.getActive("weituo") ? 0 : -1
			}), this.dreamTip = new UITip(this.buttonDream.node, function() {
				return mgrDream.isTip ? 0 : -1
			}), this.boxTip = new UITip(this.buttonBox.node, function() {
				return (0 == mgrMangHe.count || mgrAdv.getActive("open_manghe")) && mgrMangHe.canGetItem() ? 0 : -1
			}), this.suitTip = new UITip(this.buttonSuit.node, function() {
				return mgrSuit.hasAwardSuit() ? 0 : -1
			}), this.classTip = new UITip(this.spriteClassRoom, function() {
				let t = mgrColorEggs.getAllQuest(EGGS_TYPE.CLASS);
				for (let e = 0; e < t.length; e++) {
					if (mgrColorEggs.getState(t[e]) == EGGS_STATE.AWARD) return 0
				}
				return -1
			}), this.mainQuestRedTip.visible = !1
		}
		callWhenFocus(t) {
			this.isFocus ? t() : this._callFuncs.push(t)
		}
		setUiMenuVisible(t) {
			t && this.scheduleOnce(.9, () => {
				UiHelper.playMoveIn(this.buttonShopLvup.node, 9, .3, .3), UiHelper.playMoveIn(this.buttonDaily.node, 0, .3, .4), UiHelper.playMoveIn(this.buttonChallenge.node, 0, .3, .5), this.firstGame && (UiHelper.playMoveIn(this.buttonMoreGame.node, 0, .3, .6), UiHelper.playMoveIn(this.buttonInstall.node, 0, .3, .7), UiHelper.playMoveIn(this.gameIcon, 0, .3, .7)), this.buttonCpTest.node.visible && UiHelper.playMoveIn(this.buttonCpTest.node, 150, .3, .8), UiHelper.playMoveIn(this.settingBox, 0, .3, .3), this.buttonRoleTest.node.visible && UiHelper.playMoveIn(this.buttonRoleTest.node, 0, .3, .4), UiHelper.playMoveIn(this.buttonSwitchRole.node, -160, .3, .4), this.buttonDanceDraw.node.visible && UiHelper.playMoveIn(this.buttonDanceDraw.node, -160, .3, .6), UiHelper.playMoveIn(this.buttonHotActive.node, -160, .3, .6), UiHelper.playMoveIn(this.buttonClassRoom.node, -160, .3, .6), UiHelper.playMoveIn(this.buttonSuit.node, 0, .3, .6), UiHelper.playMoveIn(this.buttonVideoRank.node, 0, .3, .7), UiHelper.playMoveIn(this.buttonSubscribe.node, 0, .3, .7), UiHelper.playMoveIn(this.buttonMoreGameBox.node, 0, .3, .7), BaseFacade.mQuest.isAllFinish(0) || _G.isGuiding || (this.buttonMainQuest.node.visible = !0, UiHelper.playMoveIn(this.buttonMainQuest.node, -7, .3, .8), this.updateMainQuest()), cc.tween(this.bottomNode).to(.3, {
					y: 0
				}, cc.OPTION.BACK_OUT).start(), this.currencyBar.moveIn(() => {
					this.coinBar.progress = 0, this.updateCoin(), this.initTouch()
				})
			})
		}
		autoOpenPanelInSequence() {
			mgrSign.isTodayFinish ? this.autoOpenChnPanel() : this.callWhenFocus(this.autoOpenChnPanel.bind(this))
		}
		autoOpenChnPanel() {
			db.cop.isSupportInstallShortcut && !mgrSdk.isInstallShortcut ? mgrAlert.tryOpenInstall() : db.cop.isSupportFindMinigames && (FileRecord.getData("findme_opened") || FileRecord.setData("findme_opened", !0))
		}
		gotoSleep() {
			mgrGame.roleState = 0, mgrRes.loadRes(db.get_animation_db(MODEL_ANIM.CHEN_SHUI).path, RES_TYPE.ANIMATIONCLIP, this.onSleepLoaded.bind(this))
		}
		onSleepLoaded() {
			this.avatar.stopAnimation();
			let t = this.avatar.baseBody.findChild("Bip001");
			this.clearEffect();
			let e = _G.poolManager.get(Particle, "122");
			this.chenShuiEffect = e, e.setParent(this.room.root), e.followTarget(t), e.followScale(!0), e.play(), e = _G.poolManager.get(Particle, "123"), this.tuoWeiEffect = e, e.setParent(this.room.root), e.followTarget(t), e.play(), this.clearPlayer();
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.avatar.baseBody, MODEL_ANIM.CHEN_SHUI).addTimeCallback(.15 / 3, () => {
				this.room.playJinEffect()
			}).addTimeCallback(.8, () => {
				this.room.switchToNight()
			}).addTimeCallback(1, () => {
				this.avatar.active = !1, this.showGemstone(), this.setUiMenuVisible(!0), this.activeCol()
			}).play(), this.sleepPlayer = a, this.inactiveCol(.006)
		}
		inactiveCol(t) {
			let e = UiHelper.getComponentsInChildren(this.avatar, BoneCollider);
			for (var a = e.length - 1; a >= 0; a--) e[a].radius = t;
			let i = UiHelper.getComponentsInChildren(this.avatar, BoneManager);
			for (a = i.length - 1; a >= 0; a--) i[a].setDisplacementFactor(1)
		}
		activeCol() {
			let t = UiHelper.getComponentsInChildren(this.avatar, BoneCollider);
			for (var e = t.length - 1; e >= 0; e--) t[e].radius = t[e].preRadius;
			let a = UiHelper.getComponentsInChildren(this.avatar, BoneManager);
			for (e = a.length - 1; e >= 0; e--) a[e].setDisplacementFactor(a[e].displacementFactor)
		}
		showGemstone(t = !1) {
			this.clearGemstone();
			let e = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			this.gemstone = _G.poolManager.get(GModel, e), this.gemstone.setParent(this.room.gemstoneNode), this.gemstone.initPaint(), this.gemstone.initAnimator(), this.gemstone.playAnim(MODEL_ANIM.GEMSTONE_YUANDIAN, 0, !0), this.gemstone.setPosition(0, 0, 0), this.gemstone.setRotation(0, 180, 0), t || this.gemstone.callIfLoaded(() => {
				this.gemstone.sharedMaterial.playDissolveIn(1)
			})
		}
		clearPlayer() {
			this.sleepPlayer && (this.sleepPlayer.dispose(), this.sleepPlayer = null)
		}
		clearGemstone() {
			this.gemstone && (this.gemstone.dispose(), this.gemstone = null)
		}
		clearEffect() {
			this.chenShuiEffect && (_G.poolManager.put(this.chenShuiEffect), this.chenShuiEffect = null, _G.poolManager.put(this.tuoWeiEffect), this.tuoWeiEffect = null)
		}
		wakeup() {
			mgrGame.roleState = 3, this.room.playChuEffect(), this.gemstone && (this.gemstone.isLoaded ? this.gemstone.sharedMaterial.playDissolveOut(.5, 0, this.clearGemstone.bind(this)) : this.clearGemstone()), this.scheduleOnce(.5, () => {
				let t = new ResLoader;
				t.add(db.get_animation_db(MODEL_ANIM.XING_LAI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_YUANDIAN).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_effect_db("121").res, RES_TYPE.PREFAB3D), t.add(db.get_effect_db("123").res, RES_TYPE.PREFAB3D), t.setLoadingCallback(this.onWakeupLoaded.bind(this)), t.loadAll()
			})
		}
		onWakeupLoaded() {
			this.avatar.stopAnimation(), this.avatar.baseBody.getAnimator().speed = 0, this.avatar.active = !0;
			let t = this.avatar.baseBody.findChild("Bip001");
			this.clearEffect();
			let e = _G.poolManager.get(Particle, "121");
			this.chenShuiEffect = e, e.setParent(this.room.root), e.followTarget(t), e.followScale(!0), e.play(), e = _G.poolManager.get(Particle, "123"), this.tuoWeiEffect = e, e.setParent(this.room.root), e.followTarget(t), e.play(), this.clearPlayer();
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.avatar.baseBody, MODEL_ANIM.XING_LAI).addTimeCallback(.25, () => {}).addTimeCallback(76 / 120, () => {
				this.room.switchToDay()
			}).addTimeCallback(1, () => {
				this.activeCol(), mgrGame.roleState = 2, this.avatar.baseBody.getAnimator().speed = 1, mgrOffline.offlineProfit > 0 && (PanelMain.offlineShowed = !0, mgrAlert.openPanelLoading(UI_NAME.PanelOffline)), this.playRoleAnim(), this.setUiMenuVisible(!0)
			}).play(), this.sleepPlayer = a, this.inactiveCol(.03)
		}
		updateMainQuest() {
			let t = BaseFacade.mQuest.getQuestDbByType(0);
			t.sort(sort_quest_db_by_order), this.clearMainQuestEffect(), this.gotoGuideId = null;
			for (let e = 0; e < t.length; e++) {
				let a = t[e];
				switch (BaseFacade.mQuest.query(a.id).state) {
					case QUEST_STATE.COMMITABLE:
						return this.mainQuestTitle.text = mgrI18n.getText(a.tlite), this.mainQuestTip.text = mgrI18n.getText("panelMain.3"), this.mainQuestTip.color = "#fffc18", this.curMainQuestDb = a, this.mainQuestRedTip.visible = !0, void this.playMainQuestAnim();
					case QUEST_STATE.UPDATABLE:
						return this.mainQuestTitle.text = mgrI18n.getText(a.tlite), this.mainQuestTip.text = mgrI18n.getText("panelMain.4"), this.mainQuestTip.color = "#cd0370", this.curMainQuestDb = a, this.mainQuestRedTip.visible = !1, this.playMainQuestAnim(), void this.checkMainQuestCanBeFinish()
				}
			}
			this.curMainQuestDb = null, cc.tween(this.buttonMainQuest.node, !0).to(.3, {
				x: 260
			}, cc.OPTION.SINE_IN).hide().start()
		}
		checkMainQuestCanBeFinish() {
			let t = this.curMainQuestDb.goals;
			for (let e = 0; e < t.length; e++) {
				switch (db.get_goal_db(t[e]).actionId) {
					case ACTION_ID.OPEN_BOX:
						if (!mgrMangHe.canGetItem()) return BaseFacade.mQuest.commit(this.curMainQuestDb.id), void this.updateMainQuest()
				}
			}
		}
		playMainQuestAnim() {
			this.mainQuestTween && cc.clearTween(this.buttonMainQuest.node), this.mainQuestTween = !0, cc.tween(this.buttonMainQuest.node).repeatForever(cc.tween().to(.1, {
				rotation: 5
			}).to(.2, {
				rotation: -5
			}).to(.2, {
				rotation: 5
			}).to(.2, {
				rotation: -5
			}).to(.1, {
				rotation: 0
			}).delay(3)).start()
		}
		clearMainQuestEffect() {
			this.removeEffect("135")
		}
		refreshMagic() {
			if (this.destroyed) return;
			this.magicCount += Timer.deltaTime;
			let t = this.magicCount / 2,
				e = Math.max(this.magicCount - 2, 0) / 2,
				a = Math.max(this.magicCount - 4, 0) / 2;
			this.barMask1.progress = t, this.barMask2.progress = e, this.barMask3.progress = a, a >= 1 && Laya.timer.clear(this, this.refreshMagic)
		}
		on_click_buttonDaily() {
			mgrAlert.openPanelLoading(UI_NAME.PanelQuest)
		}
		on_click_buttonBox() {
			mgrJumpPanel.jumpTo(JUMP_PANEL.MANG_HE)
		}
		on_click_buttonSuit() {
			mgrAlert.openPanelLoading(UI_NAME.PanelSuit)
		}
		on_click_buttonSign() {
			mgrAlert.openPanelLoading(UI_NAME.PanelSign)
		}
		on_click_buttonRank() {
			mgrAlert.openPanelLoading(UI_NAME.PanelRank)
		}
		on_click_buttonFree() {
			mgrPart.openPanelRoom(ROOM_TYPE.NORMAL, null, this.close.bind(this))
		}
		on_click_buttonMoreGame() {
			mgrAlert.openPanelLoading(UI_NAME.PanelMoreGame)
		}
		on_click_buttonUlMoreGame() {
			mgrSdk.openUlMoreGame()
		}
		on_click_buttonInstall() {
			mgrAlert.tryOpenInstall()
		}
		on_click_buttonPlay() {
			if (PanelMain.enterHuDongGame = !0, GameStatistics.statisOnStageStart(7505), _G.isGuiding) mgrAlert.openGameLoading(UI_NAME.PanelSkincare, null, this.close.bind(this));
			else if (0 != mgrGame.roleState) {
				switch (GameStatistics.statisCommonEventOnce(3031), this.gotoGuideId) {
					case GUD_EVENT.QUEST_GOTO_OUT:
						return void mgrAlert.openGameLoading(UI_NAME.PanelOutside, null, this.close.bind(this));
					case GUD_EVENT.QUEST_GOTO_IN:
						return void mgrAlert.openGameLoading(UI_NAME.PanelInside, null, this.close.bind(this));
					case GUD_EVENT.QUEST_GOTO_SKINCARE:
						return void mgrAlert.openGameLoading(UI_NAME.PanelSkincare, null, this.close.bind(this))
				}
				mgrSkincare.isXinQingFull ? mgrAlert.openGameLoading(UI_NAME.PanelInside, null, this.close.bind(this)) : mgrAlert.openGameLoading(UI_NAME.PanelSkincare, null, this.close.bind(this))
			} else this.wakeup()
		}
		on_click_buttonDream() {
			mgrAlert.openPanelLoading(UI_NAME.PanelDream)
		}
		on_click_buttonEntrust() {
			mgrAlert.openPanelLoading(UI_NAME.PanelPhone)
		}
		on_click_buttonShopLvup() {
			mgrAlert.openPanelLoading(UI_NAME.PanelShopLvup)
		}
		on_click_buttonCoin() {
			if (mgrCat.curCoinCount > 0) {
				let t = Laya.Point.TEMP.setTo(26, 26);
				this.buttonCoin.node.localToGlobal(t, !1);
				for (let e = 0; e < 6; e++) UiHelper.playBezierTo("res/icon/gold.png", t, mgrAlert.uiCoinPos, .8 + .05 * e, .45);
				mgrCat.getCoin(), this.updateCoin(), mgrSound.playTalk("yllsd_21"), PanelDialogCat.tryOpenPanel(0)
			} else mgrAlert.alertText(mgrI18n.getText("panelMain.8"))
		}
		on_click_buttonSetting() {
			mgrAlert.openPanelLoading(UI_NAME.PanelSetting)
		}
		on_click_buttonMainQuest() {
			if (this.curMainQuestDb)
				if (BaseFacade.mQuest.isCommitable(this.curMainQuestDb.id)) {
					let t = BaseFacade.mQuest.commit(this.curMainQuestDb.id);
					t && mgrAlert.alertItems(t)
				} else if (this.gotoGuideId = this.curMainQuestDb.guideId, this.gotoGuideId) {
				let t = this.getEffect("135");
				switch (t.setScale(1, 1, 1), this.gotoGuideId) {
					case GUD_EVENT.QUEST_GOTO_OUT:
					case GUD_EVENT.QUEST_GOTO_IN:
						t.align(this.buttonPlay.node, this.cameraEffect, 100, 10);
						break;
					case GUD_EVENT.QUEST_GOTO_MOHE:
						t.align(this.buttonBox.node, this.cameraEffect, 100, 10);
						break;
					case GUD_EVENT.QUEST_GOTO_DREAM:
						t.align(this.buttonDream.node, this.cameraEffect, 100, 10);
						break;
					case GUD_EVENT.QUEST_GOTO_WEITUO:
						t.align(this.buttonEntrust.node, this.cameraEffect, 70, 0);
						break;
					case GUD_EVENT.QUEST_GOTO_CAT_SHOP:
						t.align(this.buttonShopLvup.node, this.cameraEffect, 100, 10);
						break;
					case GUD_EVENT.QUEST_GOTO_SZZ:
						t.align(this.buttonChallenge.node, this.cameraEffect, 100, 10);
						break;
					case GUD_EVENT.QUEST_GOTO_SKINCARE:
						t.align(this.buttonPlay.node, this.cameraEffect, 100, 10);
						break;
					case GUD_EVENT.QUEST_GOTO_PVP:
						t.align(this.buttonChallenge.node, this.cameraEffect, 100, 10);
						break;
					case GUD_EVENT.QUEST_GOTO_SUIT:
						t.align(this.buttonSuit.node, this.cameraEffect, 100, 10);
						break;
					default:
						this.removeEffect("135")
				}
			}
		}
		on_click_buttonSwitchRole() {
			PanelContract.openPanel(this.close.bind(this), {
				bSwitch: !0
			})
		}
		on_click_buttonRoleTest() {
			mgrAlert.openPanelLoading(UI_NAME.PanelRoleTest, null, this.close.bind(this))
		}
		on_click_buttonMagic() {}
		on_click_buttonVideoRank() {
			GameStatistics.statisCommonEvent(9304), mgrAlert.openPanelLoading(UI_NAME.PanelRankVideo)
		}
		on_click_buttonDanceDraw() {
			mgrJumpPanel.jumpTo(JUMP_PANEL.DANCE_DRAW), GameStatistics.statisCommonEvent(2101)
		}
		on_click_buttonSettingBox() {
			this.buttonSettingBox.interactable = !1;
			let t = [this.buttonSetting.node, this.buttonSign.node],
				e = t.slice(),
				a = -30;
			t.forEach(function(t) {
				t.x = a, a -= 60
			});
			let i = 0;
			if (this.isSettingBoxOpen) {
				this.buttonSettingBox.node.loadImage("res/ui/pnl_main/arrow_left.png"), cc.tween(this.imageSettingBg).to(.4 / 6 * e.length, {
					scaleX: 0
				}).start();
				for (let t = e.length - 1; t >= 0; t--) {
					let a = e[t];
					a.scale(1, 1), cc.tween(a).delay(i).to(.08, {
						scaleX: 0,
						scaleY: 0
					}).call(() => {
						a.visible = !1
					}).start(), i += .08
				}
				this.isSettingBoxOpen = !1
			} else {
				this.buttonSettingBox.node.loadImage("res/ui/pnl_main/arrow_right.png"), cc.tween(this.imageSettingBg).to(.4 / 6 * e.length, {
					scaleX: 1 / 6 * e.length
				}).start();
				for (let t = 0; t < e.length; t++) {
					let a = e[t];
					a.scale(0, 0), a.visible = !0, cc.tween(a).delay(i).to(.08, {
						scaleX: 1,
						scaleY: 1
					}).start(), i += .08
				}
				this.isSettingBoxOpen = !0
			}
			Timer.callLater(i, () => {
				this.buttonSettingBox.interactable = !0
			}, this)
		}
		on_click_buttonCpTest() {
			GameStatistics.statisCommonEvent(2301), mgrAlert.openPanelLoading(UI_NAME.PanelCpTestPreview)
		}
		on_click_buttonSubscribe() {
			GameStatistics.statisCommonEvent(2505, 0), mgrSdk.addSubscribe([1])
		}
		on_click_buttonClassRoom() {
			mgrAlert.openPanelLoading(UI_NAME.PanelClassRoom)
		}
		on_click_buttonMoreGameBox() {
			mgrSdk.opentChannelMoreGameBox()
		}
		on_click_buttonChallenge() {
			mgrAlert.openPanelLoading(UI_NAME.PanelChallengePreview)
		}
		on_click_buttonHotActive() {
			mgrAlert.openPanelLoading(UI_NAME.PanelHotActivity)
		}
	}
	PanelMain.offlineShowed = !1, PanelMain.enterHuDongGame = !1;
	class sManicureAvatar {
		constructor() {
			this.SERIALIZE_VERSION = 1, this.SERIALIZE_FORMAT_TYPES = [MPartType.SHAPE, MPartType.VARNISH, MPartType.DECAL_BOTTOM, MPartType.DECAL_FRONT, MPartType.NAIL_DECORATION, MPartType.RING, MPartType.HAND_DECORATION, MPartType.WRIST_DECORATION, MPartType.BACKGROUND], this.setToDefault(), this._registerCmdHander()
		}
		_registerCmdHander() {
			let t = {
				CMD_AVATAR_PART_REMOVE: this._onCmdPartRemove.bind(this),
				CMD_AVATAR_PART_REPLACE: this._onCmdPartReplace.bind(this)
			};
			this.cmdHanders = t
		}
		onCmd(t, e) {
			let a = this.cmdHanders[t];
			a ? a(e) : console.log("[warn] sAvatar.onCmd handler !found! cmd.", t)
		}
		setToDefault() {
			let t = {},
				e = db.get_manicure_part_type_db_map();
			for (let a in e) {
				let i = e[a],
					s = {};
				if (0 != i.defaultId)
					for (let t = 1; t <= i.slotCount; t++) s[t] = {
						partId: i.defaultId
					};
				t[i.id] = s
			}
			this.allParts = t
		}
		getPartId(t, e) {
			let a = e || 1,
				i = this.allParts[t];
			if (!i) return null;
			let s = i[a];
			return s ? s.partId : null
		}
		isPartTypeUsed(t) {
			this.getUsedPartIds();
			let e = db.get_manicure_part_type_db(t),
				a = [t];
			a.push(e.subTypes);
			for (let t in a) {
				let e = a[t],
					i = this.allParts[e];
				if (!i) return !1;
				for (let t in i) {
					if (i[t].partId) return !0
				}
			}
			return !1
		}
		isPartUsed(t) {
			let e = this.getUsedPartIds();
			for (let a in e) {
				if (e[a] == t) return !0
			}
			return !1
		}
		isAllUsedPartIsDefault() {
			let t = this.getUsedPartIds(!0);
			for (let e in t) {
				let a = t[e],
					i = db.get_manicure_part_db(a);
				if (i && i.typeData && 0 != a && i.typeData.defaultId != a) return !1
			}
			return !0
		}
		getUsedPartIds(t) {
			let e = {};
			for (let t in this.allParts) {
				let a = this.allParts[t];
				for (let t in a) {
					let i = a[t];
					i.partId && (e[i.partId] = !0)
				}
			}
			let a = [];
			for (let t in e) {
				e[t];
				a.push(parseInt(t))
			}
			return a.sort(), a
		}
		getUsedParts() {
			return this.allParts
		}
		_onCmdPartRemove(t) {
			let e = t.partType,
				a = t.index,
				i = db.get_manicure_part_type_db(e),
				s = this.allParts[e];
			if (0 != i.defaultId) {
				s[a].partId = i.defaultId
			} else s[a] = {
				partId: null
			}
		}
		_onCmdPartReplace(t) {
			let e = t.partType,
				a = t.index,
				i = t.partId,
				s = this.allParts[e];
			if (!s) return void console.warn("sAvatar._onCmdPartReplace parts not found! partType = %s", e.tostring());
			let n = s[a];
			n || (n = {
				partId: null
			}, s[a] = n), n.partId = i
		}
		serializeToText() {
			let t = [this.SERIALIZE_VERSION, "|"],
				e = this.allParts;
			for (let a = 0; a < this.SERIALIZE_FORMAT_TYPES.length; a++) {
				let i = this.SERIALIZE_FORMAT_TYPES[a],
					s = db.get_manicure_part_type_db(i),
					n = e[i];
				for (let e = 0; e < s.slotCount; e++) {
					let a = n[e];
					a && (t[t.length] = a.partId), t[t.length] = "@"
				}
				0 < n.length - 1 && (t[t.length] = null), t[t.length] = "|"
			}
			return t[t.length - 1] = null, t.join("")
		}
		fillBySerializeText(t) {
			this.setToDefault();
			let e = t.split("|");
			if (e.length != this.SERIALIZE_FORMAT_TYPES.length + 1 || parseFloat(e[0]) != this.SERIALIZE_VERSION) return console.log("[warn] sAvatar:fillBySerializeText text for(letmat error!", t), this;
			for (let t = 0; t < this.SERIALIZE_FORMAT_TYPES.length; t++) {
				let a = this.SERIALIZE_FORMAT_TYPES[t],
					i = e[t + 1];
				if ("" != i) {
					let t = i.split("@");
					for (let e = 0; e < t.length; e++) {
						let i = t[e].split(",")[0];
						i && this.onCmd("CMD_AVATAR_PART_REPLACE", {
							partType: a,
							index: e,
							partId: i
						})
					}
				}
			}
			return this
		}
		fillByParts(t) {
			if (!t) return this;
			for (let e in t) {
				let a = parseInt(e),
					i = t[e];
				if (i)
					for (let t in i) this.onCmd("CMD_AVATAR_PART_REPLACE", {
						partType: a,
						index: parseInt(t),
						partId: i[t].partId
					})
			}
			return this
		}
		dump() {
			console.log("sAvatar.dump begin");
			let t = [],
				e = db.get_manicure_part_type_db_map();
			for (let a in e) {
				let i = e[a];
				t.push(i)
			}
			t = Tools.sortArrayByField(t, "id");
			for (let e in t) {
				let a = t[e],
					i = a.id,
					s = this.allParts[i];
				if (s || console.log("parts not found", i), s.length > 0) {
					let t = "";
					for (let e in s) {
						let a = s[e];
						if (a.partId) {
							let i = db.get_manicure_part_db(a.partId);
							t = t + ", " + String.format("[%d %d:%s]", e, a.partId, i.name)
						} else console.log("v.partId not found!")
					}
					console.log(String.format("  [%d:%s]: %s", i, a.name, t))
				}
			}
			console.log("sAvatar.dump")
		}
		_getRandomPartIdByPartType(t) {
			let e = [],
				a = db.get_manicure_part_db_map();
			for (let i in a) {
				let s = a[i];
				s.type == t && e.push(s.id)
			}
			return e.length <= 0 ? 0 : e[Mathf.random(e.length - 1)]
		}
		_debugGetRandomPartIdByPartType(t) {
			return this._getRandomPartIdByPartType(t)
		}
		_debugFillRandom() {
			this.setToDefault();
			let t = [];
			Mathf.random(100) <= 50 && t.push(MPartType.SHAPE), Mathf.random(100) <= 50 && t.push(MPartType.VARNISH), Mathf.random(100) <= 50 && t.push(MPartType.DECAL_BOTTOM), Mathf.random(100) <= 50 && t.push(MPartType.DECAL_FRONT), Mathf.random(100) <= 50 && t.push(MPartType.NAIL_DECORATION), Mathf.random(100) <= 50 && t.push(MPartType.RING), Mathf.random(100) <= 50 && t.push(MPartType.HAND_DECORATION), Mathf.random(100) <= 50 && t.push(MPartType.WRIST_DECORATION), Mathf.random(100) <= 50 && t.push(MPartType.BACKGROUND);
			for (let e in t) {
				let a = t[e],
					i = db.get_manicure_part_type_db(a);
				for (let t = 1; t <= i.slotCount; t++)
					if (!i.banSlotIndexes[t]) {
						let e = this._getRandomPartIdByPartType(a);
						0 != e && this.onCmd("CMD_AVATAR_PART_REPLACE", {
							partType: a,
							index: t,
							partId: e
						})
					}
			}
			return this
		}
	}
	class MaskClipper extends Laya.Sprite {
		constructor() {
			super();
			let t = new Laya.Sprite;
			t.graphics.clear(), this.mask = t, this.drawNode = t
		}
		reuse() {
			this.visible = !0
		}
		unuse() {
			this.visible = !1, cc.clearTween(this), this.removeSelf()
		}
		dispose() {
			this.destroy()
		}
		setMaskInverted(t) {}
		drawDotWithWorldPos(t, e, a = 10) {
			let i = this.globalToLocal(new Laya.Point(t, e));
			this.drawDot(i.x, i.y, a)
		}
		drawDot(t, e, a = 10) {
			this.drawNode.graphics.drawCircle(t, e, a, "#ffffff")
		}
		drawLineWithWorldSpace(t, e, a, i, s, n, o, r) {
			let l = this.globalToLocal(new Laya.Point(t, e)),
				c = this.globalToLocal(new Laya.Point(a, i));
			this.drawLine(l, c, s, n, o, r)
		}
		drawLine(t, e, a, i, s, n) {
			let o = Mathf.distance(t, e),
				r = 180 * Math.atan2(e.y - t.y, e.x - e.x) / Math.PI;
			n = n || 1;
			for (let e = s = s || 0; e <= o; e += n) {
				let s = 0,
					n = Mathf.calcPointOnArc(t.x, t.y, e, r),
					o = n[0],
					l = n[1];
				a && (s = 0 != i ? a + Mathf.random(-i, i) : a), this.drawDot(o, l, s)
			}
		}
		clear() {
			this.drawNode.graphics.clear()
		}
		putback() {
			_G.poolManager.put(this)
		}
	}
	class ManicureAvatar extends ViewBase {
		constructor(t) {
			super(t), this.resourceName = "res/prefab/ManicureAvatar.json", this._exportNodeInfo = {}, this.allParts = null, this.cusomtPartParents = null, this.cmdHanders = null, this.nodeShapeContainers = null, this.drawClipper = null, this.shapeClippers = [], this.drawShapeClippers = [], this.nodeRootContainer = null, this.shapeId = 0, this.cliper = null, this._SHAPE_PART_TYPES = {
				[MPartType.SHAPE]: !0,
				[MPartType.VARNISH]: !0,
				[MPartType.DECAL_BOTTOM]: !0,
				[MPartType.DECAL_FRONT]: !0,
				[MPartType.NAIL_DECORATION]: !0
			}, this._HAND_PART_TYPES = {
				[MPartType.HAND_DECORATION]: !0,
				[MPartType.WRIST_DECORATION]: !0
			}, this.buildUi()
		}
		onCreateComplete() {}
		dispose() {
			for (let t in this.allParts) {
				let e = this.allParts[t];
				for (let t in e) {
					let a = e[t];
					this._removeResNodes(a.nodes), this._removeResNodes(a.dstNodes), this._removeResNodes(a.hintNodes)
				}
			}
			this.allParts = null
		}
		buildUi() {
			this.allParts = {}, this.cusomtPartParents = {}, this._registerCmdHander()
		}
		_registerCmdHander() {
			let t = {
				CMD_AVATAR_DRAW_MODE_BEGIN: this._onCmdDrawModeBegin.bind(this),
				CMD_AVATAR_DRAW_MODE_CANCEL: this._onCmdDrawModeCancel.bind(this),
				CMD_AVATAR_DRAW_MODE_SUBMIT: this._onCmdDrawModeSubmit.bind(this),
				CMD_AVATAR_PART_REPLACE: this._onCmdPartReplace.bind(this),
				CMD_AVATAR_PART_REMOVE: this._onCmdPartRemove.bind(this),
				CMD_AVATAR_PART_HINT_SHOW: this._onCmdPartHintShow.bind(this),
				CMD_AVATAR_PART_HINT_HIDE: this._onCmdPartHintHide.bind(this)
			};
			this.cmdHanders = t
		}
		getPart(t, e) {
			let a = this.allParts[t];
			a || (a = {}, this.allParts[t] = a);
			let i = a[e];
			return i || (i = {}, a[e] = i), i
		}
		calcNearestIndex(t, e) {
			let a = this.resNode.globalToLocal(e);
			if (this._SHAPE_PART_TYPES[t]) {
				let t = 0,
					e = Number.POSITIVE_INFINITY;
				for (let i in this.nodeShapeContainers) {
					let s = this.nodeShapeContainers[i],
						n = {
							width: s.width,
							height: this.node.height
						},
						o = new Laya.Point(n.width / 2, n.height / 2),
						r = s.localToGlobal(o),
						l = this.resNode.globalToLocal(r),
						c = Mathf.distance(a, l);
					c < e && (t = parseInt(i), e = c)
				}
				return [t, e]
			}
			if (t == MPartType.RING) {
				let e = 0,
					i = Number.POSITIVE_INFINITY,
					s = Number.POSITIVE_INFINITY,
					n = db.get_manicure_part_type_db(t);
				for (let t = 1; t <= n.slotCount; t++) {
					let n = mgrManicure.RING_SCHEMATIC_LAYOUTS[t] || {},
						o = n.x || 0,
						r = n.y || 0,
						l = Mathf.distance(a, new Laya.Point(o, r)),
						c = this.nodeShapeContainers[t],
						h = {
							width: c.width,
							height: c.height
						},
						d = new Laya.Point(h.width / 2, h.height / 2),
						_ = c.localToGlobal(d),
						g = this.resNode.globalToLocal(_),
						u = Mathf.distance(a, g),
						m = null;
					(m = u < 100 ? (u + l) / 2 : l) < i && (e = t, i = m, s = l)
				}
				return [e, s]
			}
			if (this._HAND_PART_TYPES[t]) {
				let t = -180,
					e = 180,
					i = 0,
					s = -460,
					[n, o] = [a.x, a.y];
				return t <= n && n <= e && s <= o && o <= i ? [1, 0] : [null, null]
			}
			if (t == MPartType.PET_DECORATION) {
				let t = 200,
					e = 400,
					i = -200,
					s = -400,
					[n, o] = [a.x, a.y];
				return t <= n && n <= e && s <= o && o <= i ? [1, 0] : [null, null]
			}
			return [1, 0]
		}
		clacHitPartIndex(t, e, a) {
			let i = a || 0,
				[s, n] = this.calcNearestIndex(t, e);
			return s && n <= db.get_manicure_part_type_db(t).hitTestDistance + i ? s : null
		}
		_getDrawClipper() {
			let t = this.drawClipper;
			if (t) return t;
			let e = db.get_manicure_part_type_db(MPartType.VARNISH).orders[1];
			return t = new MaskClipper, this.resNode.addChild(t), t.setMaskInverted(!1), t.zOrder = e, this.drawClipper = t, this._initDrawShapeClippers(), t
		}
		_initDrawShapeClippers() {
			let t = this.context.structAvatar.getPartId(MPartType.SHAPE, 1);
			for (let e = 1; e <= 5; e++) {
				let a = this.getPart(MPartType.SHAPE, e).nodes[0],
					i = new Laya.Box;
				this.drawClipper.addChild(i), i.x = a.x, i.y = a.y, this.loadShapeSpriteFrame(t, e, t => {
					i.width = t.width, i.height = t.height, i.x -= t.width / 2, i.y -= t.height / 2;
					let e = new Laya.Sprite;
					e.graphics.drawImage(t, 0, 0), i.mask = e
				});
				let s = new Laya.Box;
				i.addChild(s), s.x = -i.x, s.y = -i.y, this.drawShapeClippers[e - 1] = s
			}
		}
		drawDot(t, e = 10) {
			let a = this.drawClipper;
			a && a.drawDotWithWorldPos(t.x, t.y, e)
		}
		drawLine(t, e, a = 10) {
			let i = this.drawClipper;
			i && i.drawLineWithWorldSpace(t.x, t.y, e.x, e.y, a, 0, 0, 4)
		}
		_removeResNodes(t) {
			if (t)
				for (let e in t) {
					let a = t[e];
					mgrManicure.removeResNode(a)
				}
		}
		_createResNodes(t, e) {
			let a = db.get_manicure_part_db(t),
				i = a.typeData,
				s = e,
				n = null,
				o = null,
				r = null,
				l = null;
			if (n = i.bUseShapeContainer ? this.nodeShapeContainers[e] : this.nodeRootContainer, i.bUseShapeResources) {
				let a = db.get_manicure_shape_db_map()[t];
				a && (o = a[e - 1].resources)
			}
			return i.bUseClipperParent && (r = this.shapeClippers[e - 1]), this.cusomtPartParents[a.type] && (r = this.cusomtPartParents[a.type]), i.bUseFirstLayout && (s = 1), l = 1 == i.bUseResourceIndexWithLayoutIndex, this._createResNodesWithArgs(t, s, n, o, r, l)
		}
		_createResNodesWithArgs(t, e, a, i, s, n) {
			let o = db.get_manicure_part_db(t),
				r = i || o.resources,
				l = s || this.resNode,
				c = [];
			for (let t = 0; t < r.length; t++) {
				let i = r[t],
					s = o.typeData.orders[t],
					h = mgrManicure.createResNode(i[0], i[1]);
				l.addChild(h), n && (e = t + 1, s = o.typeData.orders[0]);
				let d = o.layouts[e];
				if (d) {
					let t, e, i, n;
					h.zOrder = s + (d.order || 0);
					let [r, l] = [d.parentApx, d.parentApy];
					if (0 != r || 0 != l) {
						let i = {
								width: a.width,
								height: a.height
							},
							s = new Laya.Point(d.parentApx * i.width, Math.abs(d.parentApy - 1) * i.height),
							n = this.resNode.globalToLocal(a.localToGlobal(s, !0), !0);
						t = d.x + n.x, e = -d.y + n.y
					} else t = d.x, e = -d.y;
					i = d.scaleX, n = d.scaleY, o.typeData.bUseContainerNormalizeScale && (i *= a.normalizeScale, n *= a.normalizeScale), h.anchorX = d.apx, h.anchorY = Math.abs(d.apy - 1), h.pos(Math.round(t), Math.round(e)), h.scale(i, n), h.rotation = d.rotate + a.rotation
				} else h.zOrder = s;
				c[t] = h
			}
			let h = c[0];
			if (h && o.effectResources) {
				let t = [];
				for (let e in o.effectResources) {
					let a = o.effectResources[e],
						i = new Laya.Box;
					h.addChild(i);
					let s = mgrManicure.createResNode(a.resType, a.id);
					i.addChild(s), s.zOrder = a.order, t.push(s), s.pos(a.pos.x, a.pos.y), s.scale(a.scaleX, a.scaleY), s.rotation = a.rotate
				}
				h.effectNodes = t
			}
			return c
		}
		refreshAll() {
			if (!this.callable) return void this.safeCall(this.refreshAll);
			let t = this.context.structAvatar;
			this.refreshContainer();
			let e = this.getPart(MPartType.BODY, 1);
			if (!e.nodes) {
				let a = t.getPartId(MPartType.BODY);
				e.nodes = this._createResNodes(a, 1), e.partId = a
			}
			this.refreshShape(), this.refreshRing(), this.refreshHandDecoration(), this.refreshWristDecoration(), this.refreshBackground()
		}
		refreshContainer() {
			let t = this.context.structAvatar,
				e = new Laya.Box;
			this.resNode.addChild(e), this.nodeRootContainer = e;
			let a = t.getPartId(MPartType.SHAPE),
				i = db.get_manicure_part_container_db(a),
				s = {};
			for (let t in i.layouts) {
				let e = t,
					a = i.layouts[t],
					n = new Laya.Box;
				this.resNode.addChild(n), n.size(a.width, a.height), n.pivotX = a.apx * a.width, n.pivotY = Math.abs(a.apy - 1) * a.height, n.rotation = a.rotate, n.pos(a.x, -a.y), n.normalizeScale = a.normalizeScale, s[e] = n
			}
			this.nodeShapeContainers = s
		}
		refreshShape() {
			let t = this.context.structAvatar.getPartId(MPartType.SHAPE, 1);
			db.get_manicure_part_db(t);
			for (let t = 1; t <= 5; t++) {
				let e = [MPartType.VARNISH, MPartType.DECAL_FRONT, MPartType.DECAL_BOTTOM];
				for (let a = 0; a < e.length; a++) {
					let i = e[a],
						s = this.getPart(i, t);
					this._removeResNodes(s.nodes), s.nodes = null, s.partId = null, this._removeResNodes(s.dstNodes), s.dstNodes = null, s.dstPartId = null, this._removeResNodes(s.hintNodes), s.hintNodes = null
				}
			}
			this.drawClipper && (this.drawClipper.destroy(), this.drawClipper = null);
			for (let t = 0; t < this.shapeClippers.length; t++) {
				this.shapeClippers[t].destroy()
			}
			this.shapeClippers = [];
			for (let e = 1; e <= 5; e++) {
				let a = this.getPart(MPartType.SHAPE, e);
				this._removeResNodes(a.nodes), a.nodes = null, a.nodes = this._createResNodes(t, e), a.partId = t;
				let i = a.nodes[0],
					s = new Laya.Box;
				this.resNode.addChild(s), s.zOrder = i.zOrder, s.x = i.x, s.y = i.y, this.loadShapeSpriteFrame(t, e, t => {
					s.width = t.width, s.height = t.height, s.x -= t.width / 2, s.y -= t.height / 2;
					let e = new Laya.Sprite;
					e.graphics.drawImage(t, 0, 0), s.mask = e
				});
				let n = new Laya.Box;
				s.addChild(n), n.x = -s.x, n.y = -s.y, n.x = Math.round(n.x), n.y = Math.round(n.y), this.shapeClippers[e - 1] = n
			}
			this.refreshVarnish(), this.refreshDecal(), this.refreshNailDecoration()
		}
		loadShapeSpriteFrame(t, e, a) {
			db.get_manicure_part_db(t);
			let i = db.get_manicure_shape_db(t, e - 1).resources[0][1];
			mgrRes.loadRes(i, Laya.Loader.IMAGE, t => {
				t && a(t)
			})
		}
		refreshPartType(t) {
			let e = this.context.structAvatar,
				a = db.get_manicure_part_type_db(t);
			for (let i = 1; i <= a.slotCount; i++) {
				let a = this.getPart(t, i),
					s = e.getPartId(t, i);
				a.partId != s && (this._removeResNodes(a.nodes), a.nodes = null, a.partId = null), s && !a.nodes && (a.nodes = this._createResNodes(s, i), a.partId = s)
			}
		}
		refreshVarnish() {
			this.refreshPartType(MPartType.VARNISH)
		}
		refreshDecal() {
			this.refreshPartType(MPartType.DECAL_BOTTOM), this.refreshPartType(MPartType.DECAL_FRONT)
		}
		refreshNailDecoration() {
			this.refreshPartType(MPartType.NAIL_DECORATION)
		}
		refreshRing() {
			this.refreshPartType(MPartType.RING)
		}
		refreshHandDecoration() {
			this.refreshPartType(MPartType.HAND_DECORATION)
		}
		refreshWristDecoration() {
			this.refreshPartType(MPartType.WRIST_DECORATION)
		}
		refreshBackground() {
			this.refreshPartType(MPartType.BACKGROUND)
		}
		registerCustomPartParent(t, e) {
			return this.cusomtPartParents[t] = e, this
		}
		_onCmdPartReplace(t) {
			let e = t.partType,
				a = t.index,
				i = t.partId,
				s = t.worldPosition,
				n = db.get_manicure_part_type_db(e);
			if (e == MPartType.SHAPE) this.refreshAll();
			else if (n.bMoveAction && s) {
				let n = this.getPart(e, a);
				if (n.nodes) {
					for (let t in n.nodes) {
						let e = n.nodes[t];
						cc.clearTween(e), cc.tween(e).parallel(cc.tween().to(.3, {
							y: e.y + 50
						}, cc.OPTION.SINE_OUT), cc.tween().to(.3, cc.PROP.ALPHA0)).call(() => {
							e.destroy()
						}).start()
					}
					n.nodes = null
				}
				n.nodes = this._createResNodes(i, a), n.partId = i;
				for (let e = 0; e < n.nodes.length; e++) {
					const a = n.nodes[e];
					let i = a.parent.globalToLocal(s, !0),
						o = new Laya.Point(a.x, a.y),
						r = 0,
						l = a.rotation,
						c = 1,
						h = a.scaleX;
					a.pos(i.x, i.y), a.rotation = r, a.scale(c, c), cc.clearTween(a), cc.tween(a).parallel(cc.tween().to(.3, {
						x: o.x,
						y: o.y
					}), cc.tween().to(.3, {
						rotation: l
					}), cc.tween().to(.3, {
						scaleX: h,
						scaleY: h
					})).call(() => {
						if (!t.bUndo && 0 == e) {
							let t = this.resNode.localToGlobal(o);
							mgrAlert.playParticleEffect("196", t, 1, .5)
						}
					}).start()
				}
			} else {
				this.refreshPartType(e);
				let t = this.getPart(e, a);
				if (t.nodes && t.nodes.length > 0) {
					let e = t.nodes[0],
						a = e.parent.localToGlobal(new Laya.Point(e.x, e.y));
					mgrAlert.playParticleEffect("196", a, 1, .5)
				}
			}
		}
		_onCmdPartRemove(t) {
			let e = t.partType,
				a = t.index,
				i = db.get_manicure_part_type_db(e);
			if (e == MPartType.SHAPE) this.refreshAll();
			else if (!i.bMoveAction || t.bSkipMoveAction) this.refreshPartType(e);
			else {
				let t = this.getPart(e, a);
				if (t.nodes) {
					for (let e in t.nodes) {
						let a = t.nodes[e];
						cc.clearTween(a), cc.tween(a).parallel(cc.tween().to(.3, {
							y: a.y + 50
						}, cc.OPTION.SINE_OUT), cc.tween().to(.3, cc.PROP.ALPHA0)).call(() => {
							a.destroy()
						}).start()
					}
					t.nodes = null
				}
			}
		}
		_onCmdPartHintShow(t) {
			let e = t.partType,
				a = t.index,
				i = t.partId;
			this._onCmdPartHintHide(t);
			let s = this.getPart(e, a);
			if (s && !s.partId) {
				db.get_manicure_part_db(i).typeData;
				let t = this._createResNodes(i, a);
				s.hintNodes = t;
				for (let e in t) {
					let a = t[e];
					a.alpha = 0, cc.tween(a).repeatForever(cc.tween().to(.5, {
						alpha: 127 / 255
					}, cc.OPTION.SINE_IN_OUT).to(.5, {
						alpha: 127 / 255
					}, cc.OPTION.SINE_IN_OUT).start())
				}
			}
		}
		_onCmdPartHintHide(t) {
			let e = t.partType,
				a = t.index,
				i = this.getPart(e, a);
			i && i.hintNodes && (this._removeResNodes(i.hintNodes), i.hintNodes = null)
		}
		_onCmdDrawModeBegin(t) {
			let e = t.partType,
				a = t.index,
				i = t.dstPartId;
			this._getDrawClipper().clear();
			let s = this.getPart(e, a);
			s.dstNodes = this._createResNodesWithArgs(i, 1, this.nodeShapeContainers[a], null, this.drawShapeClippers[a - 1]), s.dstPartId = i
		}
		_onCmdDrawModeCancel(t) {
			let e = t.partType,
				a = t.index,
				i = this.getPart(e, a);
			i && (this._removeResNodes(i.dstNodes), i.dstNodes = null, i.dstPartId = null)
		}
		_onCmdDrawModeSubmit(t) {
			let e = t.partType,
				a = t.index;
			console.warn("_onCmdDrawModeSubmit", e, a);
			let i = this._getDrawClipper(),
				s = this.getPart(e, a);
			if (s) {
				if (s.dstNodes) {
					this._removeResNodes(s.nodes);
					for (let t in s.dstNodes) {
						let e = s.dstNodes[t];
						this.shapeClippers[a - 1].addChild(e)
					}
					s.nodes = s.dstNodes, s.partId = s.dstPartId, s.dstNodes = null, s.dstPartId = null
				}
				i.clear()
			}
		}
		onCmd(t, e) {
			let a = this.cmdHanders[t];
			a ? a(e) : console.log("[warn] vAvatar.onCmd handler not found! cmd:", t)
		}
	}
	class PanelManicure extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelManicure.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_nodeAvatar: "Laya.Box",
				cc_nodeIcon: "Laya.Sprite",
				cc_imageIcon: "Laya.Image",
				cc_imageBrush: "Laya.Image",
				cc_buttonOk: "UIButton",
				cc_nodeOperate: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.structAvatar = null, this.viewAvatar = null, this.curIndex = 0, this.showPartFlag = {}, this.startPos = new Laya.Point, this.curPos = new Laya.Vector2, this.bTouched = !1, this.bAction = !1, this.burshOffset = new Laya.Vector2(-30, -30), this.checkOffset = new Laya.Vector2(-40, -40)
		}
		buildUi() {
			this.nodeIcon.visible = !1, this.buttonOk.node.visible = !1;
			this.nodeAvatar.scale(.85, .85), this.nodeAvatar.y = -50 - _G.canvasHeight;
			let t = new sManicureAvatar;
			this.structAvatar = t, this.viewAvatar = new ManicureAvatar({
				structAvatar: t
			}), this.viewAvatar.create(), this.viewAvatar.callIfLoaded(() => {
				this.nodeAvatar.addChild(this.viewAvatar.resNode), this.viewAvatar.refreshAll(), cc.tween(this.nodeAvatar).to(.5, {
					y: -50
				}).call(() => {
					this.refreshUi(!0)
				}).start()
			}), UiHelper.registerTouchEvent(this.imageIcon, this.onTouchStart.bind(this), null, null), Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.onTouchMove.bind(this)), Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onTouchEnd.bind(this)), Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.onTouchEnd.bind(this))
		}
		dispose() {
			Laya.stage.offAllCaller(this), super.dispose()
		}
		refreshUi(t = !1) {
			let e = this.context.stageData;
			if (!e) return;
			if (this.curIndex >= e.partIds.length) return this.nodeIcon.visible = !1, this.buttonOk.node.visible = !0, UiHelper.playBreathe(this.buttonOk.node), void mgrAlert.playParticleEffect("194", {
				x: _G.canvasWidth / 2,
				y: _G.canvasHeight / 2
			}, 4, 2);
			let a = e.partIds[this.curIndex],
				i = db.get_manicure_part_db(a);
			this.curPartDb = i, this.nodeIcon.visible = !0, this.buttonOk.node.visible = !1, this.imageIcon.skin = i.icon, this.imageIcon.pos(this.nodeIcon.width / 2, this.nodeIcon.height / 2), this.imageIcon.visible = !0, this.imageBrush.pos(this.nodeIcon.width / 2, this.nodeIcon.height / 2), i.brushIcon ? (this.imageBrush.skin = i.brushIcon, this.showPartFlag = {}) : this.imageBrush.skin = i.icon, this.imageBrush.visible = !1, t && (this.nodeIcon.scale(0, 0), cc.tween(this.nodeIcon).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).call(() => {}).start())
		}
		nextAction(t) {
			GameStatistics.statisCommonEvent(2586 + this.curIndex, 0);
			let e = this.context.stageData.partIds[this.curIndex],
				a = db.get_manicure_part_db(e);
			if (a && !a.brushIcon)
				for (let i = 0; i < a.typeData.shopDisplaySlotIndexes.length; i++) {
					let s = a.typeData.shopDisplaySlotIndexes[i];
					this.structAvatar.onCmd("CMD_AVATAR_PART_REPLACE", {
						partType: a.type,
						index: s,
						partId: e
					}), this.viewAvatar.onCmd("CMD_AVATAR_PART_REPLACE", {
						partType: a.type,
						index: s,
						partId: e,
						worldPosition: t
					})
				}
			this.curIndex++, this.refreshUi()
		}
		showPartItem(t) {
			if (this.showPartFlag[t]) return;
			this.showPartFlag[t] = !0;
			let e = this.curPartDb,
				a = e.id;
			this.structAvatar.onCmd("CMD_AVATAR_PART_REPLACE", {
				partType: e.type,
				index: t,
				partId: a
			}), this.viewAvatar.onCmd("CMD_AVATAR_PART_REPLACE", {
				partType: e.type,
				index: t,
				partId: a
			});
			let i = this.viewAvatar.getPart(e.type, t).nodes;
			for (let t = 0; t < i.length; t++) i[t].alpha = 0, cc.tween(i[t], !0).to(.3, cc.PROP.ALPHA1).start()
		}
		onTouchStart() {
			if (this.bAction) return;
			this.bTouched = !0, this.startPos.x = Laya.stage.mouseX, this.startPos.y = Laya.stage.mouseY;
			let t = this.nodeIcon.globalToLocal(this.startPos, !0);
			t.x += this.burshOffset.x, t.y += this.burshOffset.y, this.curPartDb.brushIcon ? (this.imageBrush.visible = !0, this.imageIcon.visible = !1, this.imageBrush.pos(t.x, t.y)) : this.imageIcon.pos(t.x, t.y)
		}
		onTouchMove() {
			if (this.bAction) return;
			if (!this.bTouched) return;
			this.curPos.x = Laya.stage.mouseX, this.curPos.y = Laya.stage.mouseY;
			let t = this.nodeIcon.globalToLocal(this.curPos, !0);
			t.x += this.burshOffset.x, t.y += this.burshOffset.y, this.curPartDb.brushIcon ? (this.imageBrush.pos(t.x, t.y, !0), this.checkFinger() && this.onTouchEnd()) : this.imageIcon.pos(t.x, t.y, !0)
		}
		onTouchEnd() {
			this.bAction || this.bTouched && (this.bTouched = !1, this.curPartDb.brushIcon ? this.checkFinger() ? this.nextAction(UiHelper.getSelfGlobalPos(this.imageBrush)) : (this.bAction = !0, cc.tween(this.imageBrush).to(.3, {
				x: this.nodeIcon.width / 2,
				y: this.nodeIcon.height / 2
			}).call(() => {
				this.bAction = !1, this.imageIcon.visible = !0, this.imageBrush.visible = !1
			}).start()) : Mathf.distance(UiHelper.getSelfGlobalPos(this.nodeOperate), this.curPos) < 350 ? (this.imageIcon.visible = !1, this.nextAction(UiHelper.getSelfGlobalPos(this.imageIcon))) : (this.bAction = !0, cc.tween(this.imageIcon).to(.3, {
				x: this.nodeIcon.width / 2,
				y: this.nodeIcon.height / 2
			}).call(() => {
				this.bAction = !1
			}).start()))
		}
		checkFinger() {
			let t = this.curPartDb;
			if (t && t.brushIcon) {
				for (let e = 0; e < t.typeData.shopDisplaySlotIndexes.length; e++) {
					let a = t.typeData.shopDisplaySlotIndexes[e],
						i = this.viewAvatar.getPart(MPartType.SHAPE, a).nodes;
					if (i && i[0]) {
						let t = this.curPos.clone();
						t.x += this.checkOffset.x, t.y += this.checkOffset.y;
						let e = UiHelper.getSelfGlobalPos(i[0]);
						Mathf.distance(e, t) < 50 && this.showPartItem(a)
					}
				}
				for (let t = 1; t <= 5; t++)
					if (!this.showPartFlag[t]) return !1;
				return !0
			}
			return !1
		}
		on_click_buttonClose() {
			GameStatistics.statisCommonEvent(2586 + this.curIndex, 1), this.context && this.context.fOnCancel && this.context.fOnCancel(), this.close()
		}
		on_click_buttonOk() {
			GameStatistics.statisCommonEvent(2589, 0), mgrGame.setUsedManicureStageData(this.context.stageData), mgrAlert.openPanelLoading(UI_NAME.PanelManicureResult, {
				stageData: this.context.stageData
			}), _G.sendMsg("MANICURE_STAGE_FINISH"), this.close()
		}
	}
	class PanelManicurePreview extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelManicurePreview.json", this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_nodeTips: "Laya.Sprite",
				cc_labelTips: "Laya.Label",
				cc_buttonOk: "UIButton",
				cc_nodePreview: "Laya.Box",
				cc_spritePreviewMask: "Laya.Sprite",
				cc_nodePreviewAvatar: "Laya.Box",
				cc_topNode: "Laya.Sprite",
				cc_spriteBubble: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_bottomLeftNode: "Laya.Sprite",
				cc_bottomRightNode: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_layoutBtns: "UIHVLayout",
				cc_buttonAdvChange: "UIButton",
				cc_spriteChange: "Laya.Sprite",
				cc_buttonStart: "UIButton",
				cc_spriteStart: "Laya.Sprite"
			}, this.stageDataArr = [], this.bShowSuc = !1
		}
		addPreloadRes(t) {
			t.add("res/unity/Conventional/map_03.ls", RES_TYPE.PREFAB3D);
			let e = FileRecord.getData("MANICURE_STAGE_DATA");
			if (e) {
				let a = db.get_cp_npc(e.npcId);
				if (a) {
					t.addModel(db.get_model_db(a.bodyModelId).resPath), t.addModel(db.get_model_db(a.faceModelId).resPath), t.addModel(db.get_model_db(a.hairModelId).resPath);
					for (let e = 0; e < a.manicureBodyAnimIds.length; e++) t.addAnimationClip(db.get_animation_db(a.manicureBodyAnimIds[e]).path);
					for (let e = 0; e < a.manicureFaceAnimIds.length; e++) t.addAnimationClip(db.get_animation_db(a.manicureFaceAnimIds[e]).path)
				}
			}
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteChange, "pnl_manicure_05.png"), mgrI18n.trySetI18nImage(this.spriteStart, "pnl_manicure_06.png");
			let t = [],
				e = db.get_manicure_stage_db_map();
			for (let a in e) e[a] && t.push(e[a]);
			this.stageDataArr = t, this.stageData = FileRecord.getData("MANICURE_STAGE_DATA");
			let a = new Laya.Sprite;
			a.graphics.drawImage(this.spritePreviewMask.texture, 0, 0), this.spritePreviewMask.mask = a;
			let i = new sManicureAvatar;
			this.structAvatar = i;
			let s = new ManicureAvatar({
				structAvatar: i
			});
			s.create(), s.callIfLoaded(() => {
				this.nodePreviewAvatar.addChild(s.resNode), s.refreshAll(), Timer.callLoop(.5, () => {
					this.destroyed || s.refreshAll()
				}, this)
			}), this.viewAvatar = s;
			let n = mgrAdv.checkActive("change_manicure_stage");
			this.buttonAdvChange.node.visible = n, n && mgrAdv.statisVideoShow("change_manicure_stage"), this.layoutBtns.updateLayout(), this.nodeTips.visible = !1, this.hideBubble(!0), this.layoutBtns.node.visible = !1, this.topNode.y = -150, this.topLeftNode.x = -150, this.bottomNode.y = 400, this.playUiAnim(), this.room = new RoomInside, this.room.load(this.onSceneLoaded.bind(this)), this.registerMsg({
				MANICURE_STAGE_FINISH: this.onMsgManicureStageFinish.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg();
			let o = this.addEffect("192");
			o.play(), n && ((o = this.addEffect("193")).followTarget(this.buttonAdvChange.node, this.cameraEffect), o.play(), this.buttonAdvChange.node._effect = o), (o = this.addEffect("193")).followTarget(this.buttonStart.node, this.cameraEffect), o.play(), this.buttonStart.node._effect = o, mgrSdk.startRecordVideo(), GameStatistics.statisCommonEvent(2581), GameStatistics.statisOnStageStart(13006), this.context && this.context.fOnOpend && this.context.fOnOpend()
		}
		dispose() {
			this.stopProcMsg(), this.clearNpc(), this.avatar && (this.avatar.destroy(), this.avatar = null), this.room && (this.room.dispose(), this.room = null), GameStatistics.statisOnStageEnd(13006), super.dispose()
		}
		clearNpc() {
			this.hideBubble(), this.playerNpcShow && (this.playerNpcShow.dispose(), this.playerNpcShow = null), this.playerNpcIdle && (this.playerNpcIdle.dispose(), this.playerNpcIdle = null), this.playerNpcReady && (this.playerNpcReady.dispose(), this.playerNpcReady = null), this.npcBodyModel && (this.npcBodyModel.dispose(), this.npcBodyModel = null), this.npcFaceModel && (this.npcFaceModel.dispose(), this.npcFaceModel = null), this.npcHairModel && (this.npcHairModel.dispose(), this.npcHairModel = null)
		}
		playUiAnim(t = !1, e) {
			t ? (UiHelper.playMoveOut(this.topLeftNode, -150), cc.tween(this.bottomNode).to(.3, {
				y: 400
			}, cc.OPTION.BACK_IN).call(e).start()) : (UiHelper.playMoveIn(this.topLeftNode), cc.tween(this.topNode).to(.3, {
				y: 0
			}, cc.OPTION.BACK_OUT).call(() => {
				cc.tween(this.bottomNode).to(.3, {
					y: 0
				}, cc.OPTION.BACK_OUT).call(e).start()
			}).start())
		}
		onMsgManicureStageFinish() {
			this.showAvatar()
		}
		onMsgAdvShowSuc(t) {
			"change_manicure_stage" == t.advName && (GameStatistics.statisCommonEvent(2582 + this.stageData.id, 0), this.layoutBtns.node.visible = !1, this.clearNpc(), this.saveStageData(), this.resLoader.isLoaded ? this.createNpc() : this.bShowSuc = !0)
		}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToManicureNpc(), this.createNpc()
		}
		randomStage() {
			if (this.nextStageData) return;
			let t = [];
			for (let e = 0; e < this.stageDataArr.length; e++) this.stageDataArr[e].id != (this.stageData && this.stageData.id) && t.push(this.stageDataArr[e]);
			let e = t[Mathf.random(t.length) - 1];
			e && (this.nextStageData = e)
		}
		saveStageData() {
			this.stageData = this.nextStageData, FileRecord.setData("MANICURE_STAGE_DATA", this.nextStageData), this.nextStageData = null
		}
		createNpc() {
			let t = db.get_cp_npc(this.stageData.npcId);
			if (t) {
				if (GameStatistics.statisCommonEvent(2582 + this.stageData.id, 2), this.npcBodyModel = new GModel(t.bodyModelId), this.npcBodyModel.create(), this.npcBodyModel.initAnimator(), this.npcBodyModel.initPart(), this.npcBodyModel.setParent(this.room.root), this.npcBodyModel.callIfLoaded(() => {
						let e = this.npcBodyModel.findChild("toufa_guadian");
						this.npcFaceModel = new GModel(t.faceModelId), this.npcFaceModel.create(), this.npcFaceModel.initAnimator(), this.npcFaceModel.initPart(), this.npcFaceModel.setParent(e), this.npcFaceModel.setPosition(0, 0, 0), this.npcFaceModel.setRotation(0, 0, 0), this.npcFaceModel.callIfLoaded(() => {
							this.playerNpcIdle = new AnimatorFixedPlayer, this.playerNpcIdle.addModelAnim(this.npcBodyModel, t.manicureBodyAnimIds[0]), this.playerNpcIdle.addModelAnim(this.npcFaceModel, t.manicureFaceAnimIds[0]), this.playerNpcIdle.play()
						}), this.npcBodyModel.on("Exit", this, e => {
							e == t.manicureBodyAnimIds[0] && Mathf.random(100) <= 50 ? this.playerNpcShow ? this.playerNpcShow.play() : (this.playerNpcShow = new AnimatorFixedPlayer, this.playerNpcShow.addModelAnim(this.npcBodyModel, t.manicureBodyAnimIds[1]), this.playerNpcShow.addModelAnim(this.npcFaceModel, t.manicureFaceAnimIds[1]), this.playerNpcShow.addTimeCallback(1, () => {}), this.playerNpcShow.play()) : this.playerNpcIdle.play()
						}), this.npcHairModel = new GModel(t.hairModelId), this.npcHairModel.create(), this.npcHairModel.initPart(), this.npcHairModel.setParent(e)
					}), this.layoutBtns.node.visible = !0, this.structAvatar) {
					this.structAvatar.setToDefault();
					for (let t = 0; t < this.stageData.partIds.length; t++) {
						let e = this.stageData.partIds[t],
							a = db.get_manicure_part_db(e);
						if (a)
							for (let t = 0; t < a.typeData.shopDisplaySlotIndexes.length; t++) {
								let i = a.typeData.shopDisplaySlotIndexes[t];
								this.structAvatar.onCmd("CMD_AVATAR_PART_REPLACE", {
									partType: a.type,
									index: i,
									partId: e
								})
							}
					}
				}
				this.viewAvatar && this.viewAvatar.refreshAll()
			}
		}
		startLoad() {
			this.resLoader = new ResLoader;
			let t = this.nextStageData;
			if (t) {
				let e = db.get_cp_npc(t.npcId);
				if (e) {
					this.resLoader.addModel(db.get_model_db(e.bodyModelId).resPath), this.resLoader.addModel(db.get_model_db(e.faceModelId).resPath), this.resLoader.addModel(db.get_model_db(e.hairModelId).resPath);
					for (let t = 0; t < e.manicureBodyAnimIds.length; t++) this.resLoader.addAnimationClip(db.get_animation_db(e.manicureBodyAnimIds[t]).path);
					for (let t = 0; t < e.manicureFaceAnimIds.length; t++) this.resLoader.addAnimationClip(db.get_animation_db(e.manicureFaceAnimIds[t]).path)
				}
			}
			mgrAlert.openWait(this.resLoader, () => {
				this.bShowSuc && this.createNpc()
			})
		}
		showAvatar() {
			this.buttonAdvChange.node.visible = !1, this.buttonStart.node.visible = !1, this.buttonClose.node.visible = !1, this.nodeTips.visible = !0, this.hideBubble(!0), this.buttonAdvChange.node._effect && this.buttonAdvChange.node._effect.hide(), this.buttonStart.node._effect && this.buttonStart.node._effect.hide(), this.clearNpc(), this.room.moveToManicure(), this.avatar = new RoleAvatar, this.avatar.playAnimation(MODEL_ANIM.MAIN_MEIJIA_SHOW1, !0), this.room.root.addChild(this.avatar)
		}
		showBubble(t = !1) {
			t ? this.spriteBubble.scale(1, 1) : (cc.clearTween(this.spriteBubble), cc.tween(this.spriteBubble).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start())
		}
		hideBubble(t = !1) {
			t ? this.spriteBubble.scale(0, 0) : (cc.clearTween(this.spriteBubble), cc.tween(this.spriteBubble).to(.3, cc.PROP.SCALE0, cc.OPTION.BACK_IN).start())
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisCommonEvent(2582 + this.stageData.id, 3), this.close()
		}
		on_click_buttonAdvChange() {
			mgrAdv.statisVideoClick("change_manicure_stage"), mgrAdv.dispatchAdv("change_manicure_stage", {}, !0), this.bShowSuc = !1, this.randomStage(), this.startLoad()
		}
		on_click_buttonStart() {
			let t = db.get_cp_npc(this.stageData.npcId);
			t && (this.buttonAdvChange.interactable = !1, this.buttonStart.interactable = !1, this.nodePreview.visible = !1, this.playUiAnim(!0), this.playerNpcReady = new AnimatorFixedPlayer, this.playerNpcReady.addModelAnim(this.npcBodyModel, t.manicureBodyAnimIds[2]), this.playerNpcReady.addModelAnim(this.npcFaceModel, t.manicureFaceAnimIds[2]), this.playerNpcReady.play(), this.playerNpcReady.addTimeCallback(1, () => {
				GameStatistics.statisCommonEvent(2582 + this.stageData.id, 1), mgrAlert.openPanelLoading(UI_NAME.PanelManicure, {
					stageData: this.stageData,
					fOnCancel: () => {
						this.playUiAnim(!1, () => {
							this.buttonAdvChange.interactable = !0, this.buttonStart.interactable = !0
						}), this.nodePreview.visible = !0
					}
				})
			}))
		}
		on_click_buttonOk() {
			GameStatistics.statisCommonEvent(2591), this.buttonOk.interactable = !1, this.close()
		}
	}
	class PanelManicureResult extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelManicureResult.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_imageBg: "Laya.Image",
				cc_buttonSure: "UIButton",
				cc_nodeAvatar: "Laya.Box",
				cc_topLeftNode: "Laya.Sprite"
			}
		}
		addPreloadRes(t) {
			let e = db.get_manicure_part_db(9901);
			e && e.resources && e.resources[0][1] && t.addImage(e.resources[0][1]);
			let a = db.get_manicure_shape_db_map();
			for (let e in a) {
				let i = a[e];
				if (1004 == parseInt(e))
					for (let e = 0; e < i.length; e++) {
						let a = i[e];
						a && a.resources && (a.resources[0][1] && t.addImage(a.resources[0][1]), a.resources[1][1] && t.addImage(a.resources[1][1]))
					}
			}
		}
		buildUi() {
			this.imageBg.scale(.1, .1), cc.tween(this.imageBg).to(.5, cc.PROP.SCALE1).start();
			let t = this.context.stageData;
			if (!t) return;
			this.nodeAvatar.scale(.65, .65);
			let e = new sManicureAvatar;
			for (let a = 0; a < t.partIds.length; a++) {
				let i = t.partIds[a],
					s = db.get_manicure_part_db(i);
				if (s)
					for (let t = 0; t < s.typeData.shopDisplaySlotIndexes.length; t++) {
						let a = s.typeData.shopDisplaySlotIndexes[t];
						e.onCmd("CMD_AVATAR_PART_REPLACE", {
							partType: s.type,
							index: a,
							partId: i
						})
					}
			}
			let a = new ManicureAvatar({
				structAvatar: e
			});
			a.create(), a.callIfLoaded(() => {
				this.nodeAvatar.addChild(a.resNode), a.refreshAll()
			});
			let i = this.addEffect("197");
			i.followTarget(this.imageBg, this.cameraEffect, 0, 100), i.play()
		}
		on_click_buttonSure() {
			GameStatistics.statisCommonEvent(2590), cc.tween(this.imageBg).to(.5, cc.PROP.SCALE0).call(() => {
				this.close()
			}).start()
		}
	}
	class PanelMoreGame extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelMoreGame.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_leftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_scroll: "ReuseScrollList",
				cc_item: "Laya.Sprite"
			}
		}
		buildUi() {
			this.mask.alpha = 0, this.leftNode.x = -600, this.scroll.onItemCreate = (() => {
				let t = new GameItem;
				return t.createFromNode(UiHelper.cloneSprite(this.item)), t
			}), this.scroll.onItemChange = ((t, e) => {
				t.setGameInfo(this._list[e])
			}), this.registerMsg({
				[BASE_MSG.SDK_OPEN_JUMP_RESULT]: this.onMsgOpenJumpResult.bind(this)
			}), this.startProcMsg(), mgrSdk.openJump("list")
		}
		dispose() {
			this.stopProcMsg(), this.scroll && this.scroll.clearAllItems(), super.dispose()
		}
		onDialogOpenAnim(t) {
			cc.tween(this.mask).to(.3, cc.PROP.ALPHA1).start(), cc.tween(this.leftNode).to(.5, {
				x: 0
			}, cc.OPTION.SINE_OUT).call(t).start()
		}
		onDialogCloseAnim(t) {
			cc.tween(this.mask).to(.2, cc.PROP.ALPHA0).start(), cc.tween(this.leftNode).to(.3, {
				x: -600
			}, cc.OPTION.SINE_IN).call(t).start()
		}
		onMsgOpenJumpResult(t) {
			if ("list" == t.type) {
				let e = t.jumpInfo;
				this.fillData(e)
			}
		}
		fillData(t) {
			t && 0 != t.length ? (this._list = t, this.scroll.updateList(t.length), cc.clearTween(this.scroll), this._tween = null, this._tween = cc.tween(this.scroll).repeatForever(cc.tween().delay(.3).call(() => {
				this.destroyed || this.scroll.scrollToBottom(6, !1)
			}).delay(6.3).call(() => {
				this.destroyed || this.scroll.scrollToTop(6, !1)
			}).delay(6)), this._tween.start()) : this.hide()
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class GameItem extends ViewBase {
		onCreateComplete() {
			this.icon = this.getChildSprite("icon"), UiHelper.addScrollViewClick(this.icon, () => {
				this.data && mgrSdk.jumpOtherGame(this.data.index, "list")
			}, void 0, !0), this.resNode.alpha = 0, cc.tween(this.resNode).to(.2, cc.PROP.ALPHA1).start()
		}
		setGameInfo(t) {
			this.data = t, this.icon.loadImage(t.url)
		}
	}
	class PanelNativeAdv extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelNativeAdv.json", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_buttonPnlBig: "UIButton",
				cc_buttonPnlSmall: "UIButton",
				cc_title: "Laya.Label",
				cc_desc: "Laya.Label",
				cc_icon: "Laya.Sprite",
				cc_buttonClick: "UIButton",
				cc_textBtn: "Laya.Label",
				cc_buttonClose: "UIButton"
			}, this.state = 0, this.bInited = !1
		}
		buildUi() {
			console.log("打开原生广告...");
			let t = this.context.userData;
			this.userData = t, this.advName = t.advName, this.maxWidth = this.icon.width, this.maxHeight = this.icon.height, this.fillIcon(this.context.nativeData), this.registerMsg({
				[BASE_MSG.NATIVE_ADV_LOADED]: this.onMsgNativeAdvLoaded.bind(this),
				[BASE_MSG.ADV_CLICK_SUC]: this.onMsgAdvClickSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose(), mgrAdv.closeAdv(this.advName)
		}
		onMsgNativeAdvLoaded(t) {
			t.userData.advName == this.advName && (this.userData = t.userData, this.loadFromData(t.nativeData))
		}
		onMsgAdvClickSuc(t) {
			console.log("--- > msg onMsgAdvClickSuc"), t.advName == this.advName && Timer.callLaterFrame(1, () => {
				this.close()
			}, this)
		}
		loadFromData(t) {
			this.show(), this.fillEmpty(), this.fillIcon(t)
		}
		initClickType() {
			if (!this.bInited) switch (this.bInited = !0, db.cop.native_insert_mode) {
				case 4:
					this.buttonPnlBig.node.visible = !1;
					break;
				case 3:
					this.buttonPnlBig.node.visible = !1, this.buttonPnlSmall.node.visible = !1, UiHelper.addClickEvent(this.mask, this.on_click_buttonClick.bind(this));
					break;
				case 2:
					this.buttonPnlSmall.node.visible = !1;
					break;
				case 0:
				case 1:
				default:
					this.buttonPnlBig.node.visible = !1, this.buttonPnlSmall.node.visible = !1
			}
		}
		canFillUi() {
			return !this.isDisposed && this.bInited
		}
		fillIcon(t) {
			if (this.initClickType(), 1 == this.state || !this.canFillUi()) return;
			if (!t) return console.log("PanelNativeAdv nativeData is nil"), void this.fillEmpty();
			this.icon.visible = !0;
			this.icon.loadImage(t.url, Laya.Handler.create(this.icon, () => {
				if (this.isDisposed) return;
				let t = this.icon.texture,
					e = Math.min(this.maxWidth / t.width, this.maxHeight / t.height),
					a = t.width * e,
					i = t.height * e;
				this.icon.size(a, i).pivot(a / 2, i / 2)
			}, null, !0)), this.title.text = t.title, this.desc.text = t.desc, this.textBtn.text = t.targetTitle, this.state = 1, console.log("PanelNativeAdv fill native icon")
		}
		fillEmpty() {
			this.initClickType(), 2 != this.state && this.canFillUi() && (this.icon.visible = !1, this.title.text = "", this.desc.text = "", this.textBtn.text = "", this.state = 2, console.log("PanelNativeAdv fill native empty"))
		}
		on_click_buttonPnlBig() {
			this.on_click_buttonClick()
		}
		on_click_buttonPnlSmall() {
			this.on_click_buttonClick()
		}
		on_click_buttonClick() {
			1 == this.state && mgrAdv.onNativeAdvClick(this.advName, this.userData)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelNativeBanner extends PanelBase {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.resourceName = "res/ui/PanelNativeBanner.json", this.bResetRootNode = !1, this._exportNodeInfo = {
				cc_buttonBg: "UIButton",
				cc_title: "Laya.Label",
				cc_desc: "Laya.Label",
				cc_icon: "Laya.Sprite",
				cc_click: "Laya.Image",
				cc_textBtn: "Laya.Label",
				cc_buttonClose: "UIButton"
			}, this.state = 0
		}
		buildUi() {
			console.log("打开原生baner..."), this.resNode.mouseThrough = !0;
			let t = this.context.userData;
			this.userData = t, this.advName = t.advName, this.fillEmpty(), this.hide(), this.registerMsg({
				[BASE_MSG.NATIVE_ADV_LOADED]: this.onMsgNativeAdvLoaded.bind(this),
				[BASE_MSG.ADV_CLICK_SUC]: this.onMsgAdvClickSuc.bind(this),
				[BASE_MSG.ADV_CLOSE_NATIVE_BANNER]: this.onMsgCloseBanner.bind(this)
			}), this.startProcMsg()
		}
		setContext(t) {
			super.setContext(t);
			let e = t.userData;
			this.userData = e, this.advName = e.advName
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		closePanelOnly() {
			super.close(), mgrAdv.closeNativeAdv(this.advName, !1)
		}
		close(t) {
			super.close(), mgrAdv.closeAdv(this.advName), mgrAdv.closeNativeAdv(this.advName, t)
		}
		onMsgNativeAdvLoaded(t) {
			t.userData.advName == this.advName && (this.userData = t.userData, this.loadFromData(t.nativeData))
		}
		onMsgAdvClickSuc(t) {
			console.log("--- > msg onMsgAdvClickSuc"), t.advName == this.advName && Timer.callLaterFrame(1, () => {
				this.close(!1)
			}, this)
		}
		onMsgCloseBanner() {
			this.closePanelOnly()
		}
		loadFromData(t) {
			this.show(), this.fillEmpty(), this.fillIcon(t)
		}
		canFillUi() {
			return !this.isDisposed
		}
		fillIcon(t) {
			if (1 != this.state && this.canFillUi()) {
				if (!t) return console.log("PanelNativeBanner nativeData is nil"), void this.fillEmpty();
				this.buttonBg.node.visible = !0, this.icon.visible = !0, this.icon.loadImage(t.url), this.title.text = t.title, this.desc.text = t.desc, this.textBtn.text = t.targetTitle, this.state = 1, console.log("PanelNativeBanner fill native icon")
			}
		}
		fillEmpty() {
			2 != this.state && this.canFillUi() && (this.buttonBg.node.visible = !1, this.icon.visible = !1, this.title.changeText(""), this.desc.changeText(""), this.textBtn.changeText(""), this.state = 2, console.log("PanelNativeBanner fill native empty"))
		}
		on_click_buttonBg() {
			1 == this.state && mgrAdv.onNativeAdvClick(this.advName, this.userData)
		}
		on_click_buttonClose() {
			this.close(!0)
		}
	}
	class PanelNotice extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelNotice.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Image",
				cc_bg: "Laya.Image",
				cc_btnOk: "UIButton"
			}, this._instOrBanner = new AdvInstOrBanner("enter_sprite_info", "")
		}
		buildUi() {}
		dispose() {
			this._instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this._instOrBanner.onFocus(t)
		}
		on_click_btnOk() {
			this.close()
		}
	}
	class PanelOffline extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelOffline.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_smallNode: "Laya.Sprite",
				cc_spriteTitle: "Laya.Sprite",
				cc_smallCount: "Laya.Label",
				cc_buttonGet: "UIButton",
				cc_bigNode: "Laya.Sprite",
				cc_spriteTlite2: "Laya.Sprite",
				cc_bigCount: "Laya.Label",
				cc_buttonAdv: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_offline", "banner_offline")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteTitle, "pnl_offline_02.png"), mgrI18n.trySetI18nImage(this.spriteTlite2, "pnl_offline_01.png");
			let t = mgrOffline.offlineProfit;
			this.smallCount.text = GameUtility.convertCoinString(t, !1), this.bigCount.text = GameUtility.convertCoinString(3 * t, !1), mgrAdv.getActive("offline_db") ? (mgrAdv.statisVideoShow("offline_db"), db.cop.b_adv_full_screen && UiHelper.addClickEvent(this.mask, this.onClickMask.bind(this), null, .5, !1), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()) : (this.bigNode.visible = !1, this.smallNode.y = -120)
		}
		dispose() {
			mgrGame.tryShowPanelFollow(), this.stopProcMsg(), this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			"offline_db" == t.advName && (this.getAward(!0), this.close())
		}
		onClickMask() {
			this.on_click_buttonAdv()
		}
		getAward(t) {
			let e = mgrOffline.tryGetOfflineProfit(t);
			e && mgrAlert.alertItems(e), _G.sendMsg("OFFLINE_AWARDED")
		}
		on_click_buttonGet() {
			this.getAward(!1), GameStatistics.statisCommonEvent(2506), this.close()
		}
		on_click_buttonAdv() {
			GameStatistics.statisCommonEvent(2507), mgrAdv.statisVideoClick("offline_db"), mgrAdv.dispatchAdv("offline_db", null, !0)
		}
		on_click_buttonClose() {
			GameStatistics.statisCommonEvent(2401), this.close()
		}
	}
	class HuDongPartItem extends ViewBase {
		constructor(t = {}) {
			super(t), this.resourceName = "res/prefab/HuDongPartItem.json", this._exportNodeInfo = {
				cc_lockNode: "Laya.Sprite",
				cc_icon: "Laya.Sprite",
				cc_tag1: "Laya.Sprite",
				cc_tag2: "Laya.Sprite",
				cc_stars: "UIHVLayout",
				cc_spriteCoin: "Laya.Sprite",
				cc_tipText: "Laya.Label",
				cc_buttonGet: "UIButton",
				cc_select: "Laya.Sprite",
				cc_adv: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this)), this.spriteCoin.visible = this.context.bOrder, this.registerMsg({
				UI_SELECT_ORDER_PART_ITEM: this.onMsgUiSelectOrderPartItem.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgUiSelectOrderPartItem(t) {
			this.select.visible = t == this.partId
		}
		onMsgAdvShowSuc(t) {
			"order_try" == t.advName && t.params == this.partId && (this.adv.visible = !1, this.partData.bAdv = !1, _G.sendMsg("UI_SELECT_ORDER_PART_ITEM", this))
		}
		setHuDongPart(t) {
			if (!this.callable) return this.safeCall(this.setHuDongPart, t);
			this.partId = t;
			let e = db.get_item_db(t);
			this.icon.loadImage(e.icon), this.select.visible = !1, this.adv.visible = !1, this.buttonGet.node.visible = !1, UiHelper.setStars(this.stars, e.quality, 5), this.tag1.visible = !1, this.tag2.visible = !1, BaseFacade.mItem.isOwned(t) ? (this.tipText.text = mgrI18n.getText("huDongPartItem.1"), this.lockNode.visible = !1) : (this.tipText.text = mgrI18n.getText("huDongPartItem.2"), this.lockNode.visible = !0), this.style = 0
		}
		setOrderPart(t, e, a) {
			if (!this.callable) return this.safeCall(this.setOrderPart, t, e, a);
			this.partData = t, this.partId = t.partId;
			let i = db.get_item_db(this.partId);
			this.icon.loadImage(i.icon), this.select.visible = a, this.adv.visible = t.bAdv, this.buttonGet.node.visible = !1, UiHelper.setStars(this.stars, i.quality, 5), this.tag1.visible = !1, this.tag2.visible = !1, this.tipText.text = DbExt.getTgPrice(i) + "", this.lockNode.visible = !1, this.style = 1
		}
		setPvpAwardPart(t) {
			if (!this.callable) return this.safeCall(this.setPvpAwardPart, t);
			this.partId = t;
			let e = db.get_item_db(t);
			if (this.icon.loadImage(e.icon), UiHelper.setStars(this.stars, e.quality, 5), UiHelper.loadTagIconWithPart(t, this.tag1, this.tag2), this.select.visible = !1, this.adv.visible = !1, BaseFacade.mItem.isOwned(t)) this.lockNode.visible = !1, this.buttonGet.node.visible = !1, this.tipText.text = mgrI18n.getText("huDongPartItem.1");
			else {
				mgrPvp.getPartFrom(t) ? (this.lockNode.visible = !0, this.buttonGet.node.visible = !1, this.tipText.text = mgrI18n.getText("huDongPartItem.2")) : (this.lockNode.visible = !0, this.buttonGet.node.visible = !0, this.tipText.text = "")
			}
			this.style = 2
		}
		onClick() {
			switch (this.style) {
				case 0:
					mgrAlert.openPanelLoading(UI_NAME.PanelPartInfo, {
						partId: this.partId
					});
					break;
				case 1:
					this.partData.bAdv ? (mgrAdv.statisVideoClick("order_try"), mgrAdv.dispatchAdv("order_try", this.partId, !0)) : _G.sendMsg("UI_SELECT_ORDER_PART_ITEM", this), GameStatistics.statisCommonEvent(3063);
					break;
				case 2:
					if (this.partId) {
						let t = mgrPvp.getPartFrom(this.partId);
						BaseFacade.mItem.isOwned(this.partId) ? mgrAlert.openPanelLoading(UI_NAME.PanelPartInfo, {
							partId: this.partId
						}) : t ? mgrAlert.alertDialog(`${t}${mgrI18n.getText("huDongPartItem.3")}`) : this.on_click_buttonGet()
					}
			}
		}
		getIconPos() {
			return UiHelper.getSelfGlobalPos(this.icon, new Laya.Point)
		}
		on_click_buttonGet() {
			if (this.partId) {
				mgrAlert.addAndAlert({
					itemId: this.partId,
					count: 1
				}, null), this.setPvpAwardPart(this.partId);
				let t = db.get_pvp_part_award_db(this.partId);
				t.statistics && GameStatistics.statisCommonEvent(t.statistics), mgrPvp.isAllPartsGetted && GameStatistics.statisCommonEvent(6022)
			}
		}
	}
	class PanelOrder extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelOrder.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteCardTop: "Laya.Sprite",
				cc_spriteCardCenter: "Laya.Sprite",
				cc_spriteCardBottom: "Laya.Sprite",
				cc_nodeInfo1: "Laya.Sprite",
				cc_name: "Laya.Label",
				cc_head: "Laya.Sprite",
				cc_moneyCount: "Laya.Label",
				cc_nodeInfo2: "Laya.Box",
				cc_sprite02: "Laya.Sprite",
				cc_parts: "UIHVLayout",
				cc_hearts: "UIHVLayout",
				cc_buttonOk: "UIButton",
				cc_buttonAdvChange: "UIButton",
				cc_bottomNode: "Laya.Sprite",
				cc_reuseScrollParts: "ReuseScrollList",
				cc_emptyText: "Laya.Label"
			}, this._instOrBanner = new AdvInstOrBanner("", ""), this.partItems = [], this.usedItem = []
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.sprite02, "pnl_order_02.png"), mgrI18n.trySetI18nImage(this.buttonOk.node, "pnl_order_03.png"), mgrI18n.trySetI18nImage(this.buttonAdvChange.node, "pnl_inside_01.png"), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_ORDER), this.order = this.context;
			let t = db.get_role_db(this.order.roleId);
			this.head.loadImage(t.head), this.name.text = mgrI18n.getText(t.tlite), this.reuseScrollParts.itemHeight = 160, this.reuseScrollParts.itemWidth = 127, this.reuseScrollParts.setVerticle(!1), this.reuseScrollParts.onItemCreate = function() {
				return new HuDongPartItem({
					bOrder: !0
				})
			}, this.reuseScrollParts.onItemChange = ((t, e) => {
				let a = this.curMatchParts[this.curSelectIdx];
				if (a) {
					let i = a[e];
					t.setOrderPart(i, this.order.parts[this.curSelectIdx].tag, this.usedItem[this.curSelectIdx] == i.partId)
				}
			}), this.bottomNode.y = 400, this.bottomNode.alpha = 0, this.bottomNode.visible = !1, UiHelper.setStars(this.hearts, 0, 5, !1), this.initAllMatchParts(), this.onSelectItem(0), this.playUiFadeIn(), this.registerMsg({
				UI_CLICK_ORDER_PART_ITEM: this.onMsgClickOrderPartItem.bind(this),
				UI_SELECT_ORDER_PART_ITEM: this.onMsgSelectOrderPartItem.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), _G.isGuiding && this.scheduleOnce(2, () => {
				let t = this.reuseScrollParts.getItem(0);
				t && (t.callIfLoaded(() => {
					mgrGuide.registerGuideNode(GUD_REG_NODE.PANELORDER_ITEM, t.node)
				}), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELORDER_BUTTONOK, this.buttonOk.node))
			}), this.buttonAdvChange.node.visible = !1, mgrInside.curOrders.length >= 2 && mgrAdv.checkActive("order_change") && (this.buttonAdvChange.node.visible = !0, mgrAdv.statisVideoShow("order_change"))
		}
		dispose() {
			this.stopProcMsg(), this._instOrBanner.dispose();
			for (let t = 0; t < this.partItems.length; t++) this.partItems[t].dispose();
			this.reuseScrollParts.clearAllItems(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this._instOrBanner.onFocus(t)
		}
		onOpenComplete() {
			_G.sendMsg("ORDRE_OPENED")
		}
		onMsgClickOrderPartItem(t) {
			this.onSelectItem(t.idx)
		}
		onMsgSelectOrderPartItem(t) {
			if (this.usedItem[this.curSelectIdx] == t.partId) {
				if (this.usedItem[this.curSelectIdx] = null, this.destroyed) return;
				return void this.updateState()
			}
			this.usedItem[this.curSelectIdx] = t.partId;
			let e = t.getIconPos(),
				a = this.getItem(this.curSelectIdx, null).getIconWorldPos();
			UiHelper.playItemScaleAndJump(t.partId, e, a, null, () => {
				this.destroyed || this.updateState()
			})
		}
		onMsgAdvShowSuc(t) {
			if ("order_change" == t.advName && t.params && null != t.params.nextIndex) {
				this.buttonAdvChange.node.visible = !1, this.close(!0);
				let e = mgrInside.curOrders[t.params.nextIndex];
				e && mgrPanel.openPanel(UI_NAME.PanelOrder, e)
			}
		}
		playUiFadeIn() {
			this.spriteCardTop.scaleY = 0, this.spriteCardBottom.scaleY = 0, this.nodeInfo1.scale(0, 0), this.nodeInfo2.alpha = 0, this.buttonAdvChange.node.x = -200, this.buttonOk.node.x = 200, cc.tween(this.spriteCardTop).to(.5, cc.PROP.SCALE1).call(() => {
				cc.tween(this.nodeInfo1).to(.5, cc.PROP.SCALE1).call(() => {
					cc.tween(this.buttonAdvChange.node).to(.5, {
						x: 0
					}).call(() => {
						this.showPartList()
					}).start(), cc.tween(this.buttonOk.node).to(.5, {
						x: 0
					}).start()
				}).start(), cc.tween(this.nodeInfo2).to(.5, cc.PROP.ALPHA1).start()
			}).start(), cc.tween(this.spriteCardBottom).to(.5, cc.PROP.SCALE1).start()
		}
		initAllMatchParts() {
			let t = [],
				e = mgrAdv.getActive("order_try");
			for (let a = 0; a < this.order.parts.length; a++) {
				let i = [];
				t.push(i);
				let s = this.order.parts[a],
					n = mItem.getAllItem(2, 1, s.partType),
					o = [];
				for (let t = 0; t < n.length; t++) {
					let e = n[t];
					db.get_item_db(e);
					!0 && (BaseFacade.mItem.isOwned(e) ? i.push({
						partId: e
					}) : o.push({
						partId: e,
						bAdv: !0
					}))
				}
				if (!_G.isGuiding && e) {
					let t = !1;
					for (let e = 0; e < 3; e++) {
						let e = Mathf.randomFromArray(o, !0);
						if (!e) break;
						i.unshift(e), t = !0
					}
					t && mgrAdv.statisVideoShow("order_try")
				}
			}
			this.allMatchParts = t
		}
		updateState() {
			let t = [];
			for (let e = 0; e < this.order.parts.length; e++) {
				let a = this.allMatchParts[e].slice();
				t.push(a);
				let i = this.order.parts[e];
				for (let t = a.length - 1; t >= 0; t--) this.isUsed(a[t].partId) && a.splice(t, 1);
				let s = this.getItem(e, i),
					n = this.usedItem[e];
				n ? s.fillPart(n, a.length > 0) : s.fillTypeOnly(i), s.setSelected(this.curSelectIdx == e)
			}
			this.curMatchParts = t;
			let e = this.getCostMoney(),
				a = parseInt(this.moneyCount.text || "0"),
				i = this.order.czDb.money - e;
			cc.tween(this.moneyCount, !0).then(cc.numberTo(.3, a, i)).start();
			let s = mgrInside.calcStar(this.order.czDb.money, e);
			UiHelper.changeStars(this.hearts, s, 5);
			let n = this.curMatchParts[this.curSelectIdx];
			n && n.length ? (this.reuseScrollParts.updateList(n.length), this.emptyText.visible = !1) : (this.reuseScrollParts.updateList(0), this.emptyText.visible = !0)
		}
		getItem(t, e) {
			let a = this.partItems[t];
			return a || ((a = new OrderPartItem).fillTypeOnly(e), a.setParent(this.parts), a.idx = t, this.partItems[t] = a), a
		}
		isUsed(t) {
			for (let e = 0; e < this.usedItem.length; e++)
				if (e != this.curSelectIdx && t == this.usedItem[e]) return !0;
			return !1
		}
		getCostMoney() {
			let t = 0;
			for (let e = 0; e < this.usedItem.length; e++) {
				let a = this.usedItem[e];
				a && (t += DbExt.getTgPrice(db.get_item_db(a)))
			}
			return t
		}
		onSelectItem(t) {
			this.curSelectIdx = t, this.updateState()
		}
		showPartList() {
			cc.tween(this.bottomNode, !0).show().to(.3, {
				y: 0,
				alpha: 1
			}, cc.OPTION.SINE_IN).start()
		}
		hidePartList() {
			cc.tween(this.bottomNode).to(.3, {
				y: 360,
				alpha: 0
			}, cc.OPTION.SINE_OUT).hide().start()
		}
		on_click_buttonOk() {
			let t = [];
			for (let e = 0; e < this.partItems.length; e++) {
				let a = this.partItems[e];
				a.partId && t.push({
					pos: a.getIconWorldPos(),
					itemId: a.partId
				})
			}
			this.hidePartList(), this.close();
			let e = this.order.czDb.money,
				a = this.getCostMoney(),
				i = mgrInside.calcStar(e, a);
			_G.sendMsg("ORDRE_FINISH", {
				star: i,
				order: this.order,
				items: t
			}), GameStatistics.statisCommonEvent(3064)
		}
		on_click_buttonAdvChange() {
			let t = mgrInside.curOrders;
			if (t.length >= 2) {
				let e = (t.indexOf(this.order) + 1) % t.length;
				mgrAdv.statisVideoClick("order_change"), mgrAdv.dispatchAdv("order_change", {
					nextIndex: e
				}, !0)
			} else _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelOrder.5"))
		}
	}
	class PanelOverNormal extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = ""
		}
		static openPanel(t) {
			let e = new ResLoader;
			e.add(db.get_animation_db(MODEL_ANIM.PTJS00).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_PTJS00).path, RES_TYPE.ANIMATIONCLIP);
			let a = Mathf.random(3);
			this.rndAnimId = "pt_jiesuan-ptjs0" + a, e.add(db.get_animation_db(this.rndAnimId).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db("face_pt_jiesuan-face_ptjs0" + a).path, RES_TYPE.ANIMATIONCLIP), e.add("res/ui/bg/over_bg.jpg", RES_TYPE.TEXTURE2D), mgrAlert.openWait(e, () => {
				mgrPanel.openPanelWithSingleton(PanelOverNormal, {
					onFinish: t
				})
			})
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), this.createFromNode(e)
		}
		buildUi() {
			this.init3D()
		}
		dispose() {
			this.avatar && this.avatar.destroy(), super.dispose(), this.context && this.context.onFinish && this.context.onFinish()
		}
		init3D() {
			this.createScene3DBack(0, 60), this.camera.transform.localPosition = new Laya.Vector3(0, 1.45, .75), this.camera.transform.localRotationEuler = new Laya.Vector3(-3, 0, 0), this.avatar = new RoleAvatar(mgrPart.partsLevel), this.scene3DBack.addChild(this.avatar), this.bgPlan = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createPlane(2.16, 3.6, 10, 10)), this.bgPlan.transform.localPositionZ = -3, this.bgPlan.transform.localRotationEulerX = 90, this.camera.addChild(this.bgPlan);
			let t = mgrRes.tryLoadRes("res/ui/bg/over_bg.jpg");
			var e = new Laya.UnlitMaterial;
			e.albedoTexture = t, this.bgPlan.meshRenderer.sharedMaterial = e;
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.avatar.baseBody, PanelOverNormal.rndAnimId), a.simulate(.5), this.resNode.visible = !1, this.scheduleOnce(.1, () => {
				let t = UiHelper.screenShot(this.camera, _G.canvasWidth, _G.canvasHeight),
					e = 5 * mgrPart.photoWidth,
					a = 5 * mgrPart.photoHeight,
					i = Laya.Texture.create(t, (_G.canvasWidth - e) / 2, (_G.canvasHeight - a) / 2, e, a);
				mgrPart.setRolePhoto(i), this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelFriends)
			})
		}
	}
	class PanelOver extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelOver.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonNormal: "UIButton",
				cc_spriteNormal: "Laya.Sprite",
				cc_buttonSuper: "UIButton",
				cc_spriteButtonSuperAdFlag: "Laya.Sprite",
				cc_spriteSuperAd: "Laya.Sprite",
				cc_spriteRewardIcon: "Laya.Sprite",
				cc_labelRewardLabel: "Laya.Label",
				cc_spriteRewardLayout: "Laya.Sprite",
				cc_buttonRewardBox: "UIButton",
				cc_spriteRewardConfirm: "Laya.Sprite",
				cc_labelRewardHint: "Laya.Label",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_over", "banner_over"), this.rewardHit = !1, this.advFlag = !0, this.bManualClose = !1
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteNormal, "pnl_over_02.png"), mgrI18n.trySetI18nImage(this.spriteSuperAd, "pnl_over_04.png"), this.spriteRewardLayout.visible = !1, mgrAdv.getActive("weituo_add_score") ? (0 != db.cop.b_adv_reward_confirm && (this.spriteRewardLayout.visible = !0, this.advFlag = !1, this.rewardHit = Math.random() > .5, this.spriteRewardConfirm.visible = Math.random() > .5, this.rewardHit ? this.labelRewardHint.text = mgrI18n.getText("panelOver.3") : this.labelRewardHint.text = mgrI18n.getText("panelOver.4")), mgrAdv.statisVideoShow("weituo_add_score"), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()) : this.buttonSuper.node.setVisible(!1);
			let t = Mathf.randomEnable(db.cop.ad_flag_hide_ratios[4] || 0);
			this.spriteButtonSuperAdFlag.visible = !t
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), super.dispose(), this.bManualClose || _G.sendMsg("CLOSE_ROOM")
		}
		regGuide() {}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			if ("weituo_add_score" == t.advName) {
				this.context.fOnClick && this.context.fOnClick(!0), this.advFlag = !0;
				let t = mgrLevel.curLevelIdx;
				t > 0 && GameStatistics.statisCommonEvent(11e3 + t, 3), PanelPhoto.openPanel(this.close.bind(this))
			}
		}
		on_click_buttonNormal() {
			if (this.context.fOnClick && this.context.fOnClick(), 0 != db.cop.b_adv_reward_confirm && this.rewardHit != this.spriteRewardConfirm.visible && !this.advFlag) return void this.on_click_buttonSuper();
			GameStatistics.statisCommonEvent(5029, 0);
			let t = mgrLevel.curLevelIdx;
			t > 0 && GameStatistics.statisCommonEvent(11e3 + t, 2), PanelOverNormal.openPanel(this.close.bind(this))
		}
		on_click_buttonSuper() {
			GameStatistics.statisCommonEvent(5029, 1), mgrAdv.statisVideoClick("weituo_add_score"), mgrAdv.dispatchAdv("weituo_add_score", null, !0)
		}
		on_click_buttonRewardBox() {
			this.spriteRewardConfirm.visible = !this.spriteRewardConfirm.visible
		}
		on_click_buttonClose() {
			this.bManualClose = !0, this.close()
		}
	}
	class WidgetNativeAdv extends ViewBase {
		constructor(t, e, a) {
			super(), this.resourceName = "WidgetNativeAdv", this.title = null, this.icon = null, this.desc = null, this.btnClick = null, this.btnText = null, this.state = 0, this.advName = t, this.onLoadCallback = a, this.createFromNode(e)
		}
		onCreateComplete() {
			this.title = this.getChildText("title"), this.icon = this.getChildSprite("icon"), this.btnText = this.getChildText("btnClick/btnText"), this.desc = this.getChildText("desc"), UiHelper.addClickEvent(this.resNode, this.on_click_bg.bind(this));
			let t = this.getChild("btnClose");
			t && UiHelper.addClickEvent(t, this.on_click_btnClose.bind(this)), this.buildUi()
		}
		buildUi() {
			console.log("打开嵌入广告..."), this.hide(), this.registerMsg({
				[BASE_MSG.NATIVE_ADV_LOADED]: this.onMsgNativeAdvLoaded.bind(this),
				[BASE_MSG.ADV_CLICK_SUC]: this.onMsgAdvClickSuc.bind(this)
			}), this.startProcMsg(), this.advName && mgrAdv.dispatchAdv(this.advName)
		}
		dispose() {
			this.stopProcMsg(), super.dispose(), this.advName && mgrAdv.closeAdv(this.advName)
		}
		onMsgNativeAdvLoaded(t) {
			t.userData.advName == this.advName && (this.userData = t.userData, this.loadFromData(t.nativeData))
		}
		onMsgAdvClickSuc(t) {
			t.advName, this.advName
		}
		loadFromData(t) {
			console.log("WidgetNativeAdv.loadFromData"), this.show(), this.fillEmpty(), this.fillIcon(t), this.onLoadCallback && this.onLoadCallback(), this.onLoadCallback = null
		}
		canFillUi() {
			return !this.isDisposed
		}
		fillIcon(t) {
			if (1 != this.state && this.canFillUi()) {
				if (!t) return console.log("WidgetNativeAdv nativeData is nil"), void this.fillEmpty();
				this.icon.visible = !0, this.icon.loadImage(t.url), this.title.text = t.title, this.desc.text = t.desc, this.btnText.text = t.targetTitle, this.state = 1, console.log("WidgetNativeAdv fill native icon")
			}
		}
		fillEmpty() {
			2 != this.state && this.canFillUi() && (this.icon.visible = !1, this.title.text = "", this.desc.text = "", this.btnText.text = "", this.state = 2, console.log("WidgetNativeAdv fill native empty"))
		}
		on_click_btnClose() {
			this.dispose()
		}
		on_click_bg() {
			1 == this.state && mgrAdv.onNativeAdvClick(this.advName, this.userData)
		}
	}
	class PanelOverCommon extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelOverCommon.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_bgImage: "Laya.Image",
				cc_buttonFullScreenShare: "UIButton",
				cc_rankNode: "Laya.Sprite",
				cc_rank4: "Laya.Text",
				cc_myRank: "Laya.Text",
				cc_templateName: "Laya.Label",
				cc_templateScore: "Laya.Label",
				cc_descLabel: "Laya.Label",
				cc_spriteScore: "Laya.Sprite",
				cc_titleLabel: "Laya.Label",
				cc_spriteRole: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_myScore: "Laya.Label",
				cc_advNode: "Laya.Sprite",
				cc_btnNode: "Laya.Sprite",
				cc_buttonOk: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_over_common", "banner_over_common")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteScore, "pnl_skincare_01.png"), this.templateName.visible = !1, this.templateScore.visible = !1, this.rank4.font = GConfig.bmf_rank, this.myScore.font = GConfig.bmf_over, this.buttonFullScreenShare.node.visible = !1;
			this.spriteRole.loadImage(`res/icon_head/${{0:"1",1:"2",2:"7",3:"24",4:"9"}[mgrGame.contractIndex]||0}.png`);
			let t = this.context ? this.context.score : 100;
			if (this.myScore.text = t + "", this.titleLabel.text = mgrI18n.getText(`game_cnf4.${mgrOutside.getGameAwardCount(t)}`) || mgrI18n.getText("panelOverCommon.4"), null != this.context.xinQing) this.rankNode.visible = !1, this.descLabel.text = String.format(mgrI18n.getText("panelOverCommon.3"), this.context.xinQing + "");
			else {
				let e = 200;
				this.myRank.text = `${mgrI18n.getText("panelOverCommon.1")}${e/t*Mathf.random(10,20)|0}`;
				for (let a = 0; a < 4; a++)(e -= Mathf.random(1, 10)) < t && (e = t), this.createItem(a, mgrRank.getRandomName(), e);
				this.descLabel.visible = !1
			}
			this.nativeAdv = new WidgetNativeAdv("emb_over_common", this.advNode, () => {}), this.registerMsg({
				[BASE_MSG.SDK_SHARE_SUC]: this.onShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onShareSuc.bind(this)
			}), this.startProcMsg(), t >= 100 && mgrSound.playSound("yllsd_20")
		}
		dispose() {
			this.stopProcMsg(), this.nativeAdv && this.nativeAdv.dispose(), this.instOrBanner.dispose(), this.shareBtn && this.shareBtn.dispose(), super.dispose(), mgrGuide.sendMsgKey("COMM_OVER_CLOSE"), null != this.context.xinQing && PanelDialogCat.tryOpenPanel(1)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		regGuide() {}
		onShareSuc() {
			this.on_click_buttonOk()
		}
		createItem(t, e, a) {
			let i = this.bg.addChild(new Laya.Label);
			i.anchorX = .5, i.pos(this.templateName.x, this.templateName.y + 40 * t, !0), i.width = this.templateName.width, i.height = this.templateName.height, i.align = this.templateName.align, i.valign = this.templateName.valign, i.wordWrap = !0, i.fontSize = this.templateName.fontSize, i.color = this.templateName.color, i.text = e;
			let s = this.bg.addChild(new Laya.Text);
			s.pos(this.templateScore.x, this.templateScore.y + 40 * t, !0), s.fontSize = this.templateScore.fontSize, s.color = this.templateScore.color, s.width = this.templateScore.width, s.height = this.templateScore.height, s.align = this.templateScore.align, s.valign = this.templateScore.valign, s.wordWrap = !0, s.text = mgrI18n.getText("panelOverCommon.2") + a
		}
		on_click_buttonClose() {
			this.on_click_buttonOk()
		}
		on_click_buttonOk() {
			this.close(), null != this.context.xinQing && mgrGuide.sendMsgKey("SKINCARE_OVER"), this.context && this.context.items && mgrAlert.addAndAlertItems(this.context.items, 35)
		}
		on_click_buttonFullScreenShare() {}
	}
	class PanelOverRemedy extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelOverRemedy.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonSuper: "UIButton",
				cc_spriteButtonSuperAdFlag: "Laya.Sprite",
				cc_spriteSuper: "Laya.Sprite",
				cc_spriteRewardIcon: "Laya.Sprite",
				cc_labelRewardText: "Laya.Label",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteSuper, "pnl_over_03.png"), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg();
			let t = Mathf.randomEnable(db.cop.ad_flag_hide_ratios[4] || 0);
			this.spriteButtonSuperAdFlag.visible = !t
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			if ("weituo_add_score" == t.advName) {
				let t = mgrLevel.curLevelDb;
				mgrPart.partScoreResult.totalScore += 10, mgrPart.partScoreResult.suc = mgrPart.partScoreResult.totalScore >= t.score, this.context.fOnClick && this.context.fOnClick(), mgrLevel.endLevel(mgrPart.partScoreResult.suc), this.close()
			}
		}
		on_click_buttonSuper() {
			mgrAdv.dispatchAdv("weituo_add_score", null, !0)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelPartInfo extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelPartInfo.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Image",
				cc_bg: "Laya.Box",
				cc_bgImage: "Laya.Image",
				cc_icon: "Laya.Sprite",
				cc_stars: "UIHVLayout",
				cc_buttonClose: "UIButton",
				cc_advNode: "Laya.Sprite",
				cc_btnNode: "Laya.Sprite",
				cc_buttonOk: "UIButton",
				cc_buttonGet: "UIButton",
				cc_getLabel: "Laya.Label"
			}, this.instOrBanner = new AdvInstOrBanner("enter_part_info", "banner_part_info")
		}
		buildUi() {
			let t = this.context && this.context.partId;
			if (t) {
				let e = db.get_item_db(t);
				this.partDb = e, this.icon.loadImage(e.icon), UiHelper.setStars(this.stars, e.quality, 5), BaseFacade.mItem.isOwned(t) ? this.buttonGet.node.visible = !1 : (this.buttonOk.node.visible = !1, this.refreshButtonText())
			} else console.error("PanelPartInfo.buildUi 找不到partId"), this.close(!0);
			this.nativeAdv = new WidgetNativeAdv("emb_part_info", this.advNode, () => {
				this.bgImage.height = 550, this.btnNode.y = 110
			}), this.registerMsg({
				JOIN_LEVEL: this.close.bind(this)
			}), this.startProcMsg(), MoreGameBanner.setBannerVisible(!0)
		}
		dispose() {
			this.stopProcMsg(), this.nativeAdv && this.nativeAdv.dispose(), this.instOrBanner.dispose(), MoreGameBanner.setBannerVisible(!1), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		refreshButtonText() {
			this.jumpType = PartGetter.getPartJumpType(this.partDb.id);
			let t = mgrI18n.getText("panelPartInfo.1");
			switch (this.jumpType) {
				case 0:
					t = mgrI18n.getText("panelPartInfo.2");
					break;
				case 1:
					t = mgrI18n.getText("panelPartInfo.3");
					break;
				case 2:
					t = mgrI18n.getText("panelPartInfo.4");
					break;
				case 3:
					t = mgrI18n.getText("panelPartInfo.5");
					break;
				case 4:
					t = mgrI18n.getText("panelPartInfo.6");
					break;
				case 5:
					t = mgrI18n.getText("panelPartInfo.7");
					break;
				case 6:
					t = mgrI18n.getText("panelPartInfo.8");
					break;
				case 7:
					t = mgrI18n.getText("panelPartInfo.9");
					break;
				case 9:
					t = mgrAdv.checkActive("draw_dance") ? mgrI18n.getText("panelPartInfo.10") : mgrI18n.getText("panelPartInfo.11");
					break;
				case 10:
					t = mgrI18n.getText("panelPartInfo.12");
					break;
				case 11:
					t = mgrI18n.getText("panelPartInfo.13");
					break;
				case 12:
					t = mgrI18n.getText("panelPartInfo.14");
					break;
				case 13:
					t = mgrI18n.getText("panelPartInfo.15");
					break;
				case 14:
					t = mgrI18n.getText("panelPartInfo.16");
					break;
				case 8:
					t = mgrI18n.getText("panelPartInfo.11");
					break;
				case 15:
					t = mgrAdv.checkActive("open_class_egg") ? mgrI18n.getText("panelPartInfo.17") : mgrI18n.getText("panelPartInfo.11");
					break;
				case 16:
					t = mgrAdv.checkActive("get_shoe_color_egg") ? mgrI18n.getText("panelPartInfo.18") : mgrI18n.getText("panelPartInfo.11");
					break;
				case 17:
					t = mgrI18n.getText("panelPartInfo.19");
					break;
				default:
					t = mgrI18n.getText("panelPartInfo.20")
			}
			this.getLabel.text = t
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonGet() {
			switch (this.jumpType) {
				case 0:
					mgrJumpPanel.jumpTo(JUMP_PANEL.DREAM);
					break;
				case 1:
					mgrJumpPanel.jumpTo(JUMP_PANEL.MANG_HE);
					break;
				case 2:
					mgrJumpPanel.jumpTo(JUMP_PANEL.SZZ);
					break;
				case 3:
					mgrJumpPanel.jumpTo(JUMP_PANEL.PVP);
					break;
				case 4:
					mgrAlert.openPanelLoading(UI_NAME.PanelSign);
					break;
				case 5:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.21"));
					break;
				case 6:
					mgrAlert.openPanelLoading(UI_NAME.PanelPhone);
					break;
				case 7:
					mgrAlert.openPanelLoading(UI_NAME.PanelShopLvup);
					break;
				case 8:
					db.cop.isSupportRecordShare ? mgrAlert.openPanelLoading(UI_NAME.PanelVideoRankShare) : mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.22"));
					break;
				case 15:
					mgrAdv.checkActive("open_class_egg") ? mgrAlert.openPanelLoading(UI_NAME.PanelClassRoom, null, () => {
						mgrPanel.closeLayer(PANEL_LAYER.UI)
					}) : mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.22"));
					break;
				case 16:
					mgrAdv.checkActive("get_shoe_color_egg") ? mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, null, () => {
						mgrPanel.closeLayer(PANEL_LAYER.UI)
					}) : mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.22"));
					break;
				case 9:
					mgrAdv.checkActive("draw_dance") ? mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, null, () => {
						mgrPanel.closeLayer(PANEL_LAYER.UI)
					}) : mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.22"));
					break;
				case 10:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.23"));
					break;
				case 11:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.24"));
					break;
				case 12:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.25"));
					break;
				case 13:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.26"));
					break;
				case 14:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.27"));
					break;
				case 17:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.28"));
					break;
				default:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.29"))
			}
		}
		on_click_buttonOk() {
			this.close()
		}
	}
	class mgrTalk extends _mgrBase {
		static onload() {
			console.log("下一步对话====")
		}
		static startTalk(t) {
			let e = db.get_talk_db(t);
			this._cmds = e.cmds, this._cmdIdx = 0, this._lastRoleId = null, this.talkTexts = [], e.awardItem ? this.awardItem = {
				itemId: e.awardItem,
				count: e.itemCount
			} : this.awardItem = null, this.isDone = !1, this.next()
		}
		static endTalk() {
			this.isDone || (this.isDone = !0, _G.sendMsg("TALK_FINISH", this.awardItem))
		}
		static gotoTalk(t) {
			this._cmds = db.get_talk_db(t).cmds, this._cmdIdx = 0, this.isDone = !1, this.next()
		}
		static next() {
			let t = this._cmds[this._cmdIdx++];
			if (console.log("下一步对话====", t), t) switch (t) {
				case "sound":
					mgrSound.playSound(this._cmds[this._cmdIdx++]), this.next();
					break;
				case "anim":
					_G.sendMsg("TALK_UPDATE_ANIM", this._cmds[this._cmdIdx++]), this.next();
					break;
				case "btn":
					let e = this._cmds[this._cmdIdx++].split(";"),
						a = this._cmds[this._cmdIdx++].split(";"),
						i = [{
							btnText: e[0],
							cmd: e[1]
						}, {
							btnText: a[0],
							cmd: a[1]
						}];
					_G.sendMsg("TALK_SHOW_BTN", [i]);
					break;
				case "talk":
					t = this._cmds[this._cmdIdx++];
				default:
					let s = t.split(";");
					this.talkTexts.push(this._createTalkTextItem(s[0], s[1], s[2])), _G.sendMsg("TALK_UPDATE_TEXT")
			} else this.endTalk()
		}
		static _createTalkTextItem(t, e, a) {
			e || (e = t, t = "", this._lastRoleId = "");
			let i = {
					bLeft: !0,
					roleId: t,
					text: e,
					anim: a
				},
				s = this.talkTexts[this.talkTexts.length - 1];
			return s && (this._lastRoleId == t ? i.bLeft = s.bLeft : (this._lastRoleId = t, s && (i.bLeft = !s.bLeft))), i
		}
		static getTalkResList(t, e = !1) {
			for (var a = db.get_talk_db(t), i = 0, s = Object.create(null); i < a.cmds.length;) {
				var n = a.cmds[i++];
				switch (n) {
					case "sound":
					case "anim":
						i++;
						break;
					case "btn":
						i += 2;
						break;
					case "talk":
						n = a.cmds[i++];
					default:
						var o = n.indexOf(";");
						if (o > 0) {
							var r = n.substring(0, o);
							s[db.get_role_db(r).image] = !0
						}
				}
			}
			return Object.keys(s)
		}
		static getTalkRoleId(t) {
			let e = db.get_talk_db(t),
				a = 0;
			for (; a < e.cmds.length;) {
				var i = e.cmds[a++];
				switch (i) {
					case "sound":
					case "anim":
						a++;
						break;
					case "btn":
						a += 2;
						break;
					case "talk":
						i = e.cmds[a++];
					default:
						var s = i.indexOf(";");
						if (s > 0) {
							var n = i.substring(0, s);
							if ("main" == n) continue;
							return n
						}
				}
			}
			return null
		}
		static getTextShowTime(t) {
			return Mathf.lerpFromInverseLerp(0, db.game_cnf.role_talk_delta, 0, 20, t.length)
		}
	}
	mgrTalk.isDone = !1;
	class PhoneItem extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/PhoneItem.json", this._exportNodeInfo = {
				cc_bg: "Laya.Sprite",
				cc_head: "Laya.Sprite",
				cc_title: "Laya.Label",
				cc_itemIcon: "Laya.Sprite",
				cc_itemCount: "Laya.Label",
				cc_spriteGetted: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {}
		setData(t) {
			if (!this.callable) return void this.safeCall(this.setData, t);
			let e = db.get_level_db(t);
			if (!e) return void console.warn(`关卡不存在 id = ${t}`);
			this.head.loadImage(db.get_role_db(e.roleId).head), this.title.text = e.title, this.itemIcon.loadImage(db.get_item_db(e.itemId).icon), this.itemCount.text = "*" + e.itemCount, this.spriteGetted.visible = !1, this.bg.loadImage("res/ui/pnl_phone/art_02.png"), Laya.UIUtils.gray(this.resNode, !1);
			let a = mgrLevel.getLastLevel();
			t < a ? (this.title.color = "#006AC3", mgrI18n.trySetI18nImage(this.spriteGetted, "pnl_main_33.png"), this.spriteGetted.visible = !0) : t == a ? (this.title.color = "#FE348B", this.bg.loadImage("res/ui/pnl_phone/art_01.png")) : t > a && (this.title.color = "#808080", Laya.UIUtils.gray(this.resNode, !0))
		}
	}
	class PanelPhone extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelPhone.json", this._exportNodeInfo = {
				cc_topLeftNode: "Laya.Sprite",
				cc_imageLevelBg: "Laya.Image",
				cc_weiTuoCount: "Laya.Label",
				cc_buttonClose: "UIButton",
				cc_dialogScroll: "ReuseScrollList",
				cc_buttonNo: "UIButton",
				cc_buttonYes: "UIButton",
				cc_costNode: "Laya.Sprite",
				cc_advNode: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_phone", "banner_phone")
		}
		buildUi() {
			mgrGuide.dispatchGuide(GUD_EVENT.ENTER_PHONE) || GameStatistics.statisCommonEvent(5027), mgrGame.tryOpenPanelRankVideoTips(5), GameStatistics.statisOnStageStart(7507), this.topLeftNode.y = -150, cc.tween(this.topLeftNode).to(.3, {
				y: 0
			}, cc.OPTION.BACK_OUT).start(), this.imageLevelBg.height = 770 + _G.canvasFitHeight - 1024, this.dialogScroll.height = this.imageLevelBg.height - 185;
			let t = this.imageLevelBg.y;
			this.imageLevelBg.y = t - 900, cc.tween(this.imageLevelBg).to(.4, {
				y: t
			}, cc.OPTION.BACK_OUT).start(), this.dialogScroll.onItemCreate = function() {
				return new PhoneItem
			}, this.dialogScroll.onItemChange = ((t, e) => {
				t.setData(e)
			});
			let e = mgrLevel.getLastLevel(),
				a = db.get_level_db_arr();
			this.dialogScroll.updateList(a.length, e, 0, !0), this.refreshWeiTuoCount(), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELPHONE_BUTTONYES, this.buttonYes.node, !0), 0 != db.cop.b_adv_full_screen && UiHelper.addClickEvent(this.resNode.getChildByName("bg"), this.onClickMask.bind(this), null, .5, !1), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.dialogScroll && this.dialogScroll.clearAllItems(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgShowSuc(t) {
			"weituo" == t.advName && (BaseFacade.mItem.addItem("1010", 1, null), this.on_click_buttonYes())
		}
		refreshWeiTuoCount() {
			let t = BaseFacade.mItem.getItemCount("1010");
			this.weiTuoCount.text = t + "", t <= 0 && mgrAdv.getActive("weituo") ? (this.advNode.visible = !0, this.costNode.visible = !1, mgrAdv.statisVideoShow("weituo")) : (this.advNode.visible = !1, this.costNode.visible = !0)
		}
		onClickMask() {
			console.log("QT_ phone _ mask  " + this.advNode.visible), this.advNode.visible && this.on_click_buttonYes()
		}
		on_click_buttonClose() {
			this.close(), GameStatistics.statisOnStageEnd(7507)
		}
		on_click_buttonNo() {
			this.on_click_buttonClose()
		}
		on_click_buttonYes() {
			if (BaseFacade.mItem.enoughItem("1010", 1)) {
				_G.isGuiding || GameStatistics.statisCommonEvent(5028, 0), this.buttonYes.interactable = !1, this.buttonNo.interactable = !1, this.buttonClose.interactable = !1;
				let t = mgrLevel.getLastLevel();
				t > 0 && GameStatistics.statisCommonEvent(11e3 + t, 0);
				let e = db.get_level_db(t);
				e.talkId ? cc.tween(this.costNode).by(.5, {
					scaleX: 1.2,
					scaleY: 1.2,
					y: -30
				}).to(.1, cc.PROP.ALPHA0).call(() => {
					let t = mgrLevel.getLastLevel();
					t > 0 && (GameStatistics.statisCommonEvent(11e3 + t, 1), GameStatistics.statisOnStageStart(12e3 + t));
					let e = db.get_level_db(t);
					mgrPart.openPanelRoom(ROOM_TYPE.LEVEL, e.parts.length ? e.parts : null, () => {
						_G.sendMsg("JOIN_LEVEL"), mgrTalk.endTalk(), this.close()
					}), mgrGuide.isGuiding || GameStatistics.statisCommonEvent(5030)
				}).start() : mgrPart.openPanelRoom(ROOM_TYPE.LEVEL, e.parts.length ? e.parts : null, () => {
					_G.sendMsg("JOIN_LEVEL"), mgrTalk.endTalk(), this.close()
				})
			} else mgrAdv.getActive("weituo") ? (GameStatistics.statisCommonEvent(5028, 1), mgrAdv.statisVideoClick("weituo"), mgrAdv.dispatchAdv("weituo", null, !0)) : mgrAlert.alertNotEnough("1010")
		}
	}
	class PanelPvp extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelPvp.json", this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_finishText: "Laya.Label",
				cc_infoNode: "Laya.Label",
				cc_jinJiText: "Laya.Label",
				cc_ticketCount: "Laya.Label",
				cc_buttonJoin: "UIButton",
				cc_buttonRank: "UIButton",
				cc_buttonRongYao: "UIButton",
				cc_buttonAward: "UIButton",
				cc_curLight: "Laya.Sprite",
				cc_topNode: "Laya.Sprite",
				cc_nodeName: "Laya.Sprite",
				cc_barMaskSec: "UIBarMask",
				cc_sec0: "Laya.Sprite",
				cc_sec1: "Laya.Sprite",
				cc_sec2: "Laya.Sprite",
				cc_sec3: "Laya.Sprite",
				cc_sec4: "Laya.Sprite",
				cc_buttonColorEggClock: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_buttonShuiJing: "UIButton",
				cc_shuiJingCount: "Laya.Label"
			}, this.instOrBanner = new AdvInstOrBanner("enter_pvp", "")
		}
		addPreloadRes(t) {
			mgrPvp.otherData || mgrPvp.randomPlayer(), mgrPart.addPartResList(mgrPvp.otherData.parts, t)
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonRank.node, "pnl_pvp_02.png"), mgrI18n.trySetI18nImage(this.buttonAward.node, "pnl_pvp_01.png"), mgrI18n.trySetI18nImage(this.buttonRongYao.node, "pnl_pvp_03.png"), mgrI18n.trySetI18nImage(this.nodeName, "pnl_pvp_06.png");
			let t = [];
			for (let e = 0; e < 9; e++) {
				let a = this.centerNode.addChild(new PvpItem);
				a.pos(e % 3 * 140 - 140, 144 * (e / 3 | 0) - 210), t.push(a)
			}
			this.pvpItems = t, this.refresh(), this.checkColorEgg(), this.registerMsg({
				PVP_FINISH: this.onMsgPvpFinish.bind(this),
				CLOSE_PVP: this.close.bind(this)
			}), this.startProcMsg(), _G.sendMsg("ENTER_PVP"), GameStatistics.statisOnStageStart(7504), this.awardTip = new UITip(this.buttonAward.node, function() {
				return mgrPvp.isPvpAwardCanReceive() ? 0 : -1
			}, 1)
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), super.dispose(), GameStatistics.statisOnStageEnd(7504), this.awardTip && this.awardTip.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgPvpFinish() {
			this.refresh()
		}
		refresh() {
			this.shuiJingCount.text = BaseFacade.mItem.getItemCount("1006") + "";
			let t = mgrPvp.curLevelStates;
			for (let e = 0; e < 9; e++) {
				let a = this.pvpItems[e];
				a.setData(e, t[e]), 1 == t[e] ? this.curLight.pos(a.x, a.y - 90) : 2 == t[e] && 0
			}
			let e = mgrPvp.calcRealDuamwei(mgrPvp.totalStar);
			if (e >= db.game_cnf.pvp_duanwei_names.length - 1) this.finishText.visible = !0, this.infoNode.visible = !1;
			else {
				this.finishText.visible = !1;
				mgrI18n.getText("game_cnf.2");
				this.jinJiText.text = mgrI18n.getText(`quest_db.${12+e}`)
			}
			for (let t = 0; t < 5; t++) this["sec" + t].getChildAt(0).visible = e >= t;
			this.barMaskSec.progress = e / 4, mgrPvp.curTicket <= 0 ? (this.ticketCount.visible = !1, this.buttonJoin.node.visible = !1) : this.ticketCount.text = `${mgrI18n.getText("panelPvp.5")} ${mgrPvp.curTicket} `, cc.clearTween(this.buttonJoin.node), UiHelper.playBreathe(this.buttonJoin.node)
		}
		checkColorEgg() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.HUAI_BIAO, EGGS_STEP.THIRD) || (this.buttonColorEggClock.node.visible = !1)
		}
		on_click_buttonJoin() {
			GameStatistics.statisCommonEventOnce(6003), mgrAlert.openPanelLoading(UI_NAME.PanelPvpSelect)
		}
		on_click_buttonRank() {
			mgrAlert.openPanelLoading(UI_NAME.PanelRank)
		}
		on_click_buttonRongYao() {
			mgrAlert.openPanelLoading(UI_NAME.PanelPvpRongYao)
		}
		on_click_buttonAward() {
			mgrPvp.openPanelPvpAward()
		}
		on_click_buttonClose() {
			mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_buttonShuiJing() {
			mgrAlert.alertDialog(mgrI18n.getText("panelPvp.6"))
		}
		on_click_buttonColorEggClock() {
			this.buttonColorEggClock.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggClock.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggClock.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.huai_biao)
		}
	}
	class PvpItem extends Laya.Sprite {
		constructor() {
			super(), this.size(106, 138).pivot(53, 69), this.faceSprite = this.addChild(new Laya.Sprite).pos(24, 32, !0), this.indexText = this.addChild(new Laya.Text), this.indexText.pos(9, 85), this.indexText.fontSize = 15, this.indexText.color = "#ff51ac", this.indexText.strokeColor = "#ffffff", this.indexText.stroke = 2, this.indexText.align = "center", this.indexText.width = 88
		}
		setData(t, e) {
			switch (this.index = t, this.indexText.text = String.format(mgrI18n.getText("panelPvp.7"), (t + 1).toString()), e) {
				case 1:
					this.loadImage("res/ui/pnl_pvp/stage_on.png"), this.faceSprite.loadImage("");
					break;
				case 2:
					this.loadImage("res/ui/pnl_pvp/stage_on.png"), this.faceSprite.loadImage("res/ui/pnl_pvp/face_win.png");
					break;
				case 3:
					this.loadImage("res/ui/pnl_pvp/stage_on.png"), this.faceSprite.loadImage("res/ui/pnl_pvp/face_lose.png");
					break;
				default:
					this.loadImage("res/ui/pnl_pvp/stage_off.png"), this.faceSprite.loadImage("")
			}
		}
	}
	class PanelPvpCard extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelPvpCard.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_spriteBg: "Laya.Sprite",
				cc_roleName: "Laya.Label",
				cc_level: "Laya.Label",
				cc_pvpArea: "Laya.Label",
				cc_buttonJoin: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_pvp_card")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteBg, "pnl_pvp_04.png"), console.log("PanelPvpCard多语言 名字？？？"), this.roleName.text = mgrRank.playerName
		}
		dispose() {
			this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		on_click_buttonJoin() {
			this.close(), mgrPvp.join(), mgrAlert.openGameLoading(UI_NAME.PanelPvp), GameStatistics.statisCommonEvent(6002)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelPvpDeclare extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelPvpDeclare.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_template: "Laya.Image",
				cc_scrollView: "ReuseScrollList"
			}
		}
		buildUi() {
			this.scrollView.onItemCreate = (() => {
				let t = new DeclareItem;
				return t.createFromNode(UiHelper.cloneSprite(this.template)), t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}), this.scrollView.onItemChange = ((t, e) => {
				let a = mgrI18n.getText("game_cnf.1")[e];
				t.setData(a, !!this.curSelectItem && this.curSelectItem.text == a)
			}), this.scrollView.updateList(db.game_cnf.pvp_texts.length), this.registerMsg({
				UI_CLICK_DECLARE_ITEM: this.onMsgClickDeclareItem.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.scrollView && this.scrollView.clearAllItems(), super.dispose()
		}
		onMsgClickDeclareItem(t) {
			this.curSelectItem || (this.curSelectItem = t, this.curSelectItem.setOn(), PanelPvpOverReady.openPanel({
				text: this.curSelectItem.text,
				onFinish: () => {
					this.close()
				}
			}))
		}
	}
	class DeclareItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "DeclareItem"
		}
		onCreateComplete() {
			this.textLabel = this.resNode.getChildAt(0), UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this), null, !0)
		}
		setData(t, e) {
			this.text = t, this.textLabel && (this.textLabel.text = t), e ? this.setOn() : this.setOff()
		}
		setOn() {
			this.resNode.skin = "res/ui/pnl_pvp/text_bg_off.png"
		}
		setOff() {
			this.resNode.skin = "res/ui/pnl_pvp/art_03.png"
		}
		onClick() {
			_G.sendMsg("UI_CLICK_DECLARE_ITEM", this), GameStatistics.statisCommonEvent(6006)
		}
	}
	class PanelPvpOver extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelPvpOver.json", this._exportNodeInfo = {
				cc_buttonFullScreenShare: "UIButton",
				cc_boxRight: "Laya.Box",
				cc_spriteMaskRight: "Laya.Sprite",
				cc_spriteRoleRight: "Laya.Sprite",
				cc_spriteMy: "Laya.Sprite",
				cc_roleNameRight: "Laya.Label",
				cc_scoreTextRight: "Laya.Label",
				cc_boxLeft: "Laya.Box",
				cc_spriteMaskLeft: "Laya.Sprite",
				cc_spriteRoleLeft: "Laya.Sprite",
				cc_spriteEnemy: "Laya.Sprite",
				cc_roleNameLeft: "Laya.Label",
				cc_scoreTextLeft: "Laya.Label",
				cc_topNode: "Laya.Sprite",
				cc_tag1: "Laya.Sprite",
				cc_tag2: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_buttonOk: "UIButton"
			}, this.parts = [], this.myScore = 0, this.isChecked = !1, this._bAward = !1
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteMy, "pnl_pvp_over_02.png"), mgrI18n.trySetI18nImage(this.spriteEnemy, "pnl_pvp_over_01.png"), this.pvpDb = mgrPvp.curLevelDb;
			let t = [];
			for (const e in mgrPvp.myParts) t.push(mgrPvp.myParts[e]);
			mgrPart.removeUnchoosePart(t), this.parts = t, this.curScore = 0 | this.pvpDb.score, this.buttonClose.node.visible = !0, this.buttonOk.node.visible = !0, this.buttonFullScreenShare.node.visible = !1, this.scoreTextLeft.font = GConfig.bmf_over, this.scoreTextLeft.text = "0";
			let e = new Laya.Sprite,
				a = new Laya.Point;
			UiHelper.local2local(this.spriteMaskLeft, this.spriteRoleLeft, a), e.graphics.drawImage(this.spriteMaskLeft.texture, a.x, a.y), this.spriteRoleLeft.mask = e;
			let i = this.context.otherTex;
			if (i) {
				let t = new Laya.Sprite;
				t.texture = i, this.spriteRoleLeft.addChild(t), t.pivot(t.width / 2, t.height / 2), t.pos(0, 0), t.scale(.6, .6)
			}
			this.roleNameLeft.text = mgrPvp.otherData.name, this.scoreTextRight.font = GConfig.bmf_over, this.scoreTextRight.text = "0";
			for (let t = 0; t < this.parts.length; t++) {
				let e = this.parts[t];
				this.updateProgress(e, !1)
			}
			let s = new Laya.Sprite,
				n = new Laya.Point;
			UiHelper.local2local(this.spriteMaskRight, this.spriteRoleRight, n), s.graphics.drawImage(this.spriteMaskRight.texture, n.x, n.y), this.spriteRoleRight.mask = s;
			let o = this.context.selfTex;
			if (o) {
				let t = new Laya.Sprite;
				t.texture = o, this.spriteRoleRight.addChild(t), t.pivot(t.width / 2, t.height / 2), t.pos(0, 0), t.scale(.6, .6)
			}
			this.roleNameRight.text = mgrRank.playerName, UiHelper.loadTagIconWithData(mgrPvp.curLevelDb, this.tag1, this.tag2), this.onMsgItemChange(null), this.init3D(), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				[BASE_MSG.ADV_SHOW_FAIL]: this.onMsgAdvShowFail.bind(this),
				[BASE_MSG.SDK_SHARE_SUC]: this.onShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onShareSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.shareBtn && this.shareBtn.dispose(), _G.sendMsg("PVP_FINISH"), super.dispose()
		}
		onMsgItemChange(t) {}
		onMsgAdvShowSuc(t) {
			"pvp_add_score" == t.advName && (BaseFacade.mItem.addItem("1006", 120, null), this.playFlyAdv())
		}
		onMsgAdvShowFail(t) {
			"pvp_add_score" == t.advName && this.checkResult()
		}
		onShareSuc() {
			Laya.timer.frameOnce(1, this, this.showOkButton)
		}
		init3D() {
			this.createScene3DBack(1, 30), this.camera.transform.localPosition = new Laya.Vector3(0, 1.35, 2.24), this.camera.transform.localRotationEuler = new Laya.Vector3(-3, 0, 0), this.playUiFadeIn()
		}
		playUiFadeIn() {
			this.boxLeft.x -= _G.canvasWidth, this.boxRight.x += _G.canvasWidth, this.scoreTextLeft.visible = !1, this.scoreTextRight.visible = !1, cc.tween(this.boxLeft).to(.3, {
				x: 0
			}, cc.OPTION.BACK_OUT).start(), cc.tween(this.boxRight).to(.3, {
				x: 0
			}, cc.OPTION.BACK_OUT).call(() => {
				this.scoreTextLeft.visible = !0, this.scoreTextRight.visible = !0, cc.tween(this.scoreTextLeft).then(cc.numberTo(1, 0, this.curScore)).start(), cc.tween(this.scoreTextRight).then(cc.numberTo(1, 0, this.myScore)).call(() => {
					this.onFlyFinish()
				}).start(), cc.tween(this.boxLeft).repeatForever(cc.tween().to(.3, {
					y: 5
				}).to(.6, {
					y: -5
				}).to(.3, {
					y: 0
				})).start(), cc.tween(this.boxRight).repeatForever(cc.tween().to(.3, {
					y: -5
				}).to(.6, {
					y: 5
				}).to(.3, {
					y: 0
				})).start()
			}).start()
		}
		updateProgress(t, e = !0) {
			if ("1006" == t) {
				BaseFacade.mItem.subItem("1006", 120, null);
				var a = 10
			} else if ("1004" == t) a = this.curScore;
			else {
				let e = db.get_item_db(t);
				a = mgrPart.partScoreResult.partsScore[e.gid]
			}
			e && cc.tween(this.scoreTextRight).then(cc.numberTo(.1, this.myScore, Math.max(this.myScore + a, 0))).start(), this.myScore = Mathf.clamp(this.myScore + a, 0, 1e4)
		}
		onFlyFinish() {
			if ((0 | this.curScore) > this.myScore) {
				BaseFacade.mItem.getItemCount("1006") >= 120 ? mgrAlert.alertDialog(mgrI18n.getText("panelPvpOver.2"), mgrI18n.getText("schoolYearbookItem.2"), this.playFlyShuiJing.bind(this), this.checkResult.bind(this)) : mgrAdv.checkActive("pvp_add_score") ? (mgrAdv.statisVideoShow("pvp_add_score"), mgrAlert.alertAdvDialog(mgrI18n.getText("panelPvpOver.3"), mgrI18n.getText("schoolYearbookItem.2"), () => {
					mgrAdv.statisVideoClick("pvp_add_score"), mgrAdv.dispatchAdv("pvp_add_score", null, !0)
				}, mgrI18n.getText("panelPvpOver.4"), this.checkResult.bind(this))) : this.checkResult()
			} else this.checkResult()
		}
		playFlyShuiJing() {}
		playFlyAdv() {
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2),
				e = UiHelper.getSelfGlobalPos(this.scoreTextRight, new Laya.Point);
			UiHelper.playBezierTo("res/icon/star.png", t, e, .8, .8, this.updateProgress.bind(this, "1004")), this.scheduleOnce(1, this.checkResult)
		}
		checkResult() {
			this.isChecked || (this.isChecked = !0, (0 | this.curScore) > this.myScore ? this.alertFail() : this.alertSuc())
		}
		alertSuc() {
			this._bAward = mgrPvp.finishPvp(!0), this.showCloseButton(), mgrSound.playSound("yllsd_22"), GameStatistics.statisCommonEvent(6007, 1);
			let t = FileRecord.getData("key_pvp_win_count") || 0;
			switch (t++, FileRecord.setData("key_pvp_win_count", t), t) {
				case 1:
					GameStatistics.statisCommonEvent(6011);
					break;
				case 2:
					GameStatistics.statisCommonEvent(6012);
					break;
				case 3:
					GameStatistics.statisCommonEvent(6013)
			}
		}
		alertFail() {
			mgrPvp.finishPvp(!1), this.showCloseButton(), mgrSound.playSound("yllsd_23"), GameStatistics.statisCommonEvent(6007, 2)
		}
		showCloseButton() {
			this.buttonClose.node.visible = !0, this.buttonOk.node.visible = !0, this.scheduleOnce(2.2, () => {
				let t = mgrPvp.allPvpPartAward,
					e = !1;
				for (let a = 0; a < t.length; a++) {
					let i = t[a],
						s = db.get_pvp_part_award_db(i);
					if (s && !BaseFacade.mItem.isOwned(i) && !mgrPvp.getPartFrom(s.partId)) {
						e = !0;
						break
					}
				}
				e && mgrPvp.openPanelPvpAward()
			})
		}
		showOkButton() {
			this.buttonFullScreenShare.node.visible = !1, this.buttonClose.node.visible = !1, this.buttonOk.node.scale(1, 1), this.buttonOk.node.visible = !0, this.shareFinger && this.shareFinger.hide()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonOk() {
			this.on_click_buttonClose()
		}
		on_click_buttonFullScreenShare() {}
	}
	class PvpRewardItem extends ViewBase {
		constructor(t = {}) {
			super(t), this.resourceName = "res/prefab/PvpRewardItem.json", this._exportNodeInfo = {
				cc_icon: "Laya.Sprite",
				cc_stars: "UIHVLayout",
				cc_owned: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this))
		}
		setData(t) {
			if (!this.callable) return void this.safeCall(this.setData, t);
			this.partId = t;
			let e = db.get_item_db(t);
			this.icon.loadImage(e.icon), UiHelper.setStars(this.stars, e.quality, 5);
			let a = BaseFacade.mItem.isOwned(t);
			this.owned.visible = a
		}
		onClick() {
			if (this.partId) {
				let t = mgrPvp.getPartFrom(this.partId);
				BaseFacade.mItem.isOwned(this.partId) ? mgrAlert.openPanelLoading(UI_NAME.PanelPartInfo, {
					partId: this.partId
				}) : null == t ? mgrAlert.alertDialog(mgrI18n.getText("huDongPartItem.3")) : mgrAlert.alertDialog(`${t}${mgrI18n.getText("huDongPartItem.3")} `)
			}
		}
	}
	class PanelPvpReward extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelPvpReward.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_spriteSuit: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_labelDesc: "Laya.Label",
				cc_barMaskReward: "UIBarMask",
				cc_spriteIconReward: "Laya.Sprite",
				cc_boxStars: "UIHVLayout",
				cc_labelState: "Laya.Label",
				cc_buttonReceive: "UIButton",
				cc_scrollPart: "ReuseScrollList"
			}, this._instOrBanner = new AdvInstOrBanner("enter_pvp_reward", "")
		}
		buildUi() {
			let t = new Laya.Sprite,
				e = new Laya.Point;
			UiHelper.local2local(this.spriteMaskBg, this.spriteSuit, e), t.graphics.drawImage(this.spriteMaskBg.texture, e.x, e.y), this.spriteSuit.mask = t, this.barMaskReward.style = UIBarMask.STYLE_HORIZON, this.awardTip = new UITip(this.buttonReceive.node, function() {
				return mgrPvp.isPvpAwardCanReceive() ? 0 : -1
			}), this.scrollPart.onItemCreate = function() {
				return new PvpRewardItem
			}, this.scrollPart.onItemChange = ((t, e) => {
				t.setData(mgrPvp.allPvpPartAward[e])
			}), this.fillData()
		}
		dispose() {
			this.scrollPart.clearAllItems(), this.awardTip && this.awardTip.dispose(), this._instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this._instOrBanner.onFocus(t)
		}
		fillData() {
			let t = mgrPvp.allPvpPartAward,
				e = null;
			for (let a = 0; a < t.length; a++) {
				let i = t[a],
					s = db.get_pvp_part_award_db(i);
				if (s && !BaseFacade.mItem.isOwned(i)) {
					e = s;
					break
				}
			}
			e || (e = db.get_pvp_part_award_db(t[t.length - 1])), this.curPartAwardData = e;
			let a = db.get_goal_db(e.goalId);
			this.labelDesc.text = mgrI18n.getText(a.tlite), this.barMaskReward.progress = BaseFacade.mGoal.getProgress(e.goalId);
			let i = db.get_item_db(e.partId);
			this.spriteIconReward.loadImage(i.icon), UiHelper.setStars(this.boxStars, i.quality, 5);
			let s = BaseFacade.mItem.isOwned(e.partId),
				n = !mgrPvp.getPartFrom(e.partId);
			this.buttonReceive.node.visible = !s && n, this.labelState.visible = s || !n, this.labelState.text = s ? mgrI18n.getText("panelPvpReward.1") : mgrI18n.getText("panelPvpReward.2"), this.scrollPart.updateList(mgrPvp.allPvpPartAward.length)
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonReceive() {
			if (this.curPartAwardData) {
				let t = mgrPvp.getPartFrom(this.curPartAwardData.partId);
				if (BaseFacade.mItem.isOwned(this.curPartAwardData.partId)) console.log("已领取");
				else if (t) console.log("未达成");
				else {
					mgrAlert.addAndAlert({
						itemId: this.curPartAwardData.partId,
						count: 1
					}, null), this.fillData();
					let t = db.get_pvp_part_award_db(this.curPartAwardData.partId);
					t.statistics && GameStatistics.statisCommonEvent(t.statistics), mgrPvp.isAllPartsGetted && GameStatistics.statisCommonEvent(6022)
				}
			}
		}
	}
	class PanelPvpRongYao extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelPvpRongYao.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bgNode: "Laya.Image",
				cc_template: "Laya.Sprite",
				cc_spriteUngetted: "Laya.Sprite",
				cc_scrollView: "ReuseScrollList",
				cc_topNode: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteUngetted, "pnl_pvp_07.png"), this.allQuest = BaseFacade.mQuest.getQuestByType(3), this.allQuest.sort(sort_quest_id_by_order), this.scrollView.onItemCreate = (() => {
				let t = new RongYaoItem;
				return t.createFromNode(UiHelper.cloneSprite(this.template)), t.setAlpha(0), t.runTween(cc.tween().to(.3, cc.PROP.ALPHA1)), t
			}), this.scrollView.onItemChange = ((t, e) => {
				t.setData(this.allQuest[e])
			}), this.scrollView.updateList(this.allQuest.length)
		}
		dispose() {
			this.scrollView && this.scrollView.clearAllItems(), super.dispose()
		}
		onDialogOpenAnim(t) {
			this.mask.alpha = 0, cc.tween(this.mask).to(.2, cc.PROP.ALPHA1).start(), this.bgNode.y = -1500, cc.tween(this.bgNode).to(.5, {
				y: -500
			}, cc.OPTION.BACK_OUT).call(t).start()
		}
		on_click_buttonClose() {
			this.buttonClose.interactable = !1, cc.tween(this.mask).to(.2, cc.PROP.ALPHA0).start(), cc.tween(this.bgNode).to(.5, {
				y: -1500
			}, cc.OPTION.BACK_IN).call(this.close.bind(this)).start()
		}
	}
	class RongYaoItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "RongYaoItem"
		}
		onCreateComplete() {
			this.icon = this.getChildImage("icon"), this.name = this.getChildLabel("name"), this.name.fontSize = 15, this.ungetted = this.getChildSprite("cc_spriteUngetted"), UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this))
		}
		setData(t) {
			this.questId = t;
			let e = db.get_quest_db(t);
			this.name.text = mgrI18n.getText(e.tlite), this.icon.skin = e.icon;
			let a = BaseFacade.mQuest.isCommitable(t);
			this.ungetted && (this.ungetted.visible = !a), this.icon.gray = !a
		}
		onClick() {
			let t = db.get_quest_db(this.questId),
				e = BaseFacade.mQuest.getDbValue(this.questId);
			switch (t.gid) {
				case 0:
					mgrAlert.alertDialog(String.format(mgrI18n.getText("panelPvpRongYao.3"), mgrI18n.getText(`game_cnf2.${e}`)));
					break;
				case 1:
					mgrAlert.alertDialog(String.format(mgrI18n.getText("panelPvpRongYao.4"), e.toString()));
					break;
				case 2:
					mgrAlert.alertDialog(String.format(mgrI18n.getText("panelPvpRongYao.5"), e.toString()))
			}
		}
	}
	class PanelPvpSelect extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelPvpSelect.json", this._exportNodeInfo = {
				cc_bg: "Laya.Box",
				cc_photoNode: "Laya.Sprite",
				cc_roleSprite: "Laya.Sprite",
				cc_buttonChange: "UIButton",
				cc_buttonStart: "UIButton",
				cc_leftTime: "Laya.Label",
				cc_nameNode: "Laya.Label",
				cc_roleName: "Laya.Label",
				cc_topNode: "Laya.Sprite",
				cc_tag1: "Laya.Sprite",
				cc_tag2: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_pvp_select", "")
		}
		buildUi() {
			if (this.init3D(), this.topNode.y = -150, this.topLeftNode.x = -150, UiHelper.loadTagIconWithData(mgrPvp.curLevelDb, this.tag1, this.tag2), mgrPvp.curFreeTicket > 0) {
				this.buttonStart.node.getChildAt(0).setVisible(!1);
				let t = this.buttonStart.node.getChildAt(1);
				t.x = 44, t.text = mgrI18n.getText("panelPvpSelect.4")
			} else mgrAdv.statisVideoShow("pvp_count"), 0 != db.cop.b_adv_full_screen && UiHelper.addClickEvent(this.resNode.getChildByName("ImageBg"), this.onClickMask.bind(this), null, .5, !1);
			this.update(), this.playUiAnim(), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.avatar && this.avatar.destroy(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		update() {
			let t = mgrPvp.nextChangeTime - Timer.time;
			t > 0 ? (this.leftTime.text = mgrI18n.getText("panelPvpSelect.3") + Tools.formatTime(t), this.buttonChange.node.visible = !1) : (this.leftTime.text = "", this.buttonChange.node.visible = !0)
		}
		onMsgAdvShowSuc(t) {
			"pvp_count" == t.advName && (BaseFacade.mItem.addItem("1011", 1, null), this.on_click_buttonStart())
		}
		onClickMask() {
			console.log("QT_ mask select"), this.on_click_buttonStart()
		}
		init3D() {
			this.createScene3DBack(1, 30), this.camera.transform.localPosition = new Laya.Vector3(.02, 1.57, 2.38), this.camera.transform.localRotationEuler = new Laya.Vector3(-7, 0, 0), mgrPvp.otherData || mgrPvp.randomPlayer(), this.avatar = new RoleAvatar(mgrPvp.otherData.parts), this.avatar.transform.localPosition = new Laya.Vector3(0, 0, 0), this.avatar.transform.localRotationEuler = new Laya.Vector3(0, 0, 0), this.scene3DBack.addChild(this.avatar), this.avatar.playAnimation("zbs-xuanze0" + Mathf.random(3), !0), this.roleSprite.loadImage(`res/ui/pnl_contract/role${mgrPvp.otherData.headIdx}.png`), this.roleName.text = mgrPvp.otherData.name
		}
		playUiAnim() {
			UiHelper.playScaleOnce(this.photoNode, 1), this.nameNode.x = 400, cc.tween(this.nameNode).delay(1.3).to(.4, {
				x: -53
			}, cc.OPTION.BACK_OUT).start(), this.buttonChange.node.alpha = 0, this.buttonStart.node.alpha = 0, this.leftTime.alpha = 0, cc.tween(this.buttonChange.node).delay(1.6).to(.2, cc.PROP.ALPHA1).start(), cc.tween(this.buttonStart.node).delay(1.6).to(.2, cc.PROP.ALPHA1).start(), cc.tween(this.leftTime).delay(1.6).to(.2, cc.PROP.ALPHA1).start(), cc.tween(this.topNode).to(.3, {
				y: 0
			}, cc.OPTION.BACK_OUT).start(), UiHelper.playMoveIn(this.topLeftNode)
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonChange() {
			0 == db.cop.b_adv_full_screen || 0 != mgrPvp.curFreeTicket ? mgrPvp.nextChangeTime <= Timer.time && (mgrPvp.nextChangeTime = Timer.time + 60, mgrPvp.randomPlayer(), this.avatar.setParts(mgrPvp.otherData.parts, !1, () => {
				this.destroyed || (this.avatar.playAnimation("zbs-xuanze0" + Mathf.random(3), !0), this.roleSprite.loadImage(`res/ui/pnl_contract/role${mgrPvp.otherData.headIdx}.png`), this.roleName.text = mgrPvp.otherData.name)
			})) : this.onClickMask()
		}
		on_click_buttonStart() {
			GameStatistics.statisCommonEventOnce(6004), mgrPvp.curFreeTicket > 0 ? mgrPart.openPanelRoom(ROOM_TYPE.PVP, null, this.close.bind(this)) : (mgrAdv.statisVideoClick("pvp_count"), mgrAdv.dispatchAdv("pvp_count", null, !0))
		}
	}
	class QuestItemDaily extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/QuestItemDaily.json", this._exportNodeInfo = {
				cc_bgOn: "Laya.Sprite",
				cc_icon: "Laya.Sprite",
				cc_desc: "Laya.Label",
				cc_value: "Laya.Label",
				cc_getted: "Laya.Sprite",
				cc_tip: "Laya.Sprite",
				cc_advNode: "Laya.Label",
				cc_spriteAdFlag: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			UiHelper.addClickEvent(this.resNode, this.onClick.bind(this), null, 1, !0), mgrI18n.trySetI18nText(this.advNode, "questItemDaily.1"), mgrI18n.trySetI18nImage(this.getted, "pnl_main_33.png"), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				MSG_I18N_REFRESH: this.refresh.bind(this)
			}), this.startProcMsg(), Mathf.randomEnable(db.cop.ad_flag_hide_ratios[3] || 0) ? (this.spriteAdFlag.visible = !1, this.advNode.x -= this.spriteAdFlag.width / 2) : this.spriteAdFlag.visible = !0
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"quest_finish" == t.advName && t.params == this.questId && (this.advNode.visible = !1, this.commitQuest(!0))
		}
		setData(t, e) {
			if (this.questId = t, !this.callable) return this.safeCall(this.setData, t, e);
			this.questId = t;
			let a = db.get_quest_db(t),
				i = BaseFacade.mQuest.query(t).state,
				s = BaseFacade.mQuest.getCurValue(t),
				n = BaseFacade.mQuest.getDbValue(t);
			this.bgOn.visible = !1, this.advNode.visible = e;
			let o = BaseFacade.mQuest.getAwardItems(t)[0],
				r = db.get_item_db(o.itemId);
			this.icon.loadImage(r.icon);
			let l = mgrI18n.getText(a.tlite1);
			switch (i) {
				case QUEST_STATE.UPDATABLE:
					this.desc.text = String.format(l, n), this.value.text = `${s}/${n}`, this.getted.visible = !1, this.tip.visible = !1;
					break;
				case QUEST_STATE.COMMITABLE:
					this.resNode.texture = this.bgOn.texture, this.desc.text = String.format(l, n), this.value.text = `${n}/${n}`, this.getted.visible = !1, this.tip.visible = !0, UiHelper.playTipRot(this.tip);
					break;
				case QUEST_STATE.FINISHED:
					this.resNode.texture = this.bgOn.texture, this.desc.text = String.format(l, n), this.value.text = `${n}/${n}`, this.getted.visible = !0, this.tip.visible = !1
			}
			console.log("文本====0", l, this.desc.text, a.desc)
		}
		refresh() {
			this.questId && this.setData(this.questId, this.advNode.visible)
		}
		commitQuest(t = !1) {
			let e = BaseFacade.mQuest.commit(this.questId, t);
			e && mgrAlert.alertItems(e)
		}
		onClick() {
			if (this.questId) {
				var t = db.get_quest_db(this.questId);
				switch (BaseFacade.mQuest.query(this.questId).state) {
					case QUEST_STATE.COMMITABLE:
						this.commitQuest();
						break;
					case QUEST_STATE.UPDATABLE:
						if (this.advNode.visible) mgrAdv.statisVideoClick("quest_finish"), mgrAdv.dispatchAdv("quest_finish", this.questId, !0);
						else {
							let e = BaseFacade.mQuest.getDbValue(this.questId),
								a = mgrI18n.getText(t.tlite1),
								i = mgrI18n.getText("questItemDaily.2");
							t.jump > 0 ? mgrAlert.alertDialog({
								desc: `${String.format(a,e)}，${i}`,
								confirmText: mgrI18n.getText("questItemDaily.3"),
								confirm: () => {
									_G.sendMsg("JUMP_PANEL", t.jump)
								},
								close: () => {}
							}) : mgrAlert.alertDialog(`${String.format(a,e)}，${i}`)
						}
						break;
					case QUEST_STATE.FINISHED:
						mgrAlert.alertDialog(mgrI18n.getText("questItemDaily.4"))
				}
			}
		}
	}
	const DAILY_POS = [
		[-120, -115],
		[120, -115],
		[-120, 115],
		[120, 115],
		[620, 115]
	];
	class PanelQuest extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelQuest.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_barMask: "UIBarMask",
				cc_itemNode: "Laya.Sprite",
				cc_giftLight: "Laya.Sprite",
				cc_buttonGift: "UIButton",
				cc_giftTip: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_quest", "banner_quest")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteBg, "pnl_quest_02.png"), this.initDailyList(), this.initTip(), this.refreshAward(), this.registerMsg({
				[BASE_MSG.QUEST_STATE_CHANGE]: this.onMsgQuestStateChange.bind(this),
				JUMP_PANEL: this.onMsgJumpPanel.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEvent(7001)
		}
		dispose() {
			if (this.stopProcMsg(), this.instOrBanner.dispose(), this.dailyItems) {
				for (let t = 0; t < this.dailyItems.length; t++) this.dailyItems[t].dispose();
				this.dailyItems = null
			}
			super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onOpenComplete() {
			super.onOpenComplete();
			let t = this.addEffect("117");
			t.setParent(this.scene3DEffect), t.align(this.itemNode, this.cameraEffect), t.play()
		}
		onMsgQuestStateChange(t) {
			switch (t.questDb.type) {
				case 8:
					this.refreshList()
			}
		}
		onMsgJumpPanel(t) {
			this.close()
		}
		initEffect() {}
		initTip() {
			this.giftTip.visible = !1, UiHelper.playTipRot(this.giftTip)
		}
		initDailyList() {
			let t, e = mgrDailyQuest.getCurQuests();
			if (mgrAdv.getActive("quest_finish")) {
				let a = [];
				for (let t = 0; t < e.length; t++) BaseFacade.mQuest.isUpdatable(e[t]) && a.push(e[t]);
				(t = Mathf.randomFromArray(a)) && mgrAdv.statisVideoShow("quest_finish")
			}
			if (!this.dailyItems) {
				this.dailyItems = [];
				for (var a = 0; a < e.length; a++) {
					let i = this.createDailyItem(a);
					i.setData(e[a], e[a] == t), this.dailyItems.push(i)
				}
			}
		}
		createDailyItem(t) {
			let e = new QuestItemDaily;
			e.setParent(this.itemNode);
			let a = Math.PI / 3 * t + Math.PI / 6;
			return e.setPosition(200 * Math.cos(a), 200 * Math.sin(a)), e
		}
		refreshList() {
			for (var t = 0; t < this.dailyItems.length; t++) this.dailyItems[t].refresh();
			this.refreshAward()
		}
		refreshAward() {
			mgrDailyQuest.getCompleteCount() >= db.game_cnf.daily_quest_count && (console.log("QT_QpanelQuest", "" + mgrDailyQuest.isDailyAward), mgrDailyQuest.isDailyAward ? (this.giftTip.visible = !1, cc.clearTween(this.giftLight)) : (this.giftTip.visible = !0, UiHelper.playRotCycle(this.buttonGift.node)))
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonGift() {
			mgrDailyQuest.getCompleteCount() >= db.game_cnf.daily_quest_count ? mgrDailyQuest.isDailyAward ? mgrAlert.alertDialog(mgrI18n.getText("panelQuest.1")) : (mgrAlert.openPanelLoading(UI_NAME.PanelQuestGift, () => {
				this.refreshAward()
			}), this.giftTip.visible = !1) : mgrAlert.alertDialog(String.format(mgrI18n.getText("panelQuest.2"), db.game_cnf.daily_quest_count.toString()))
		}
	}
	class PanelQuestGift extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelQuestGift.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_spriteBg: "Laya.Sprite",
				cc_awardCount: "Laya.Label",
				cc_buttonGet: "UIButton",
				cc_buttonAdvGet: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			mgrAdv.getActive("quest_db") ? (mgrAdv.statisVideoShow("quest_db"), this.buttonGet.node.visible = !1, UiHelper.playBreathe(this.buttonAdvGet.node)) : (this.buttonClose.node.visible = !1, this.buttonAdvGet.node.visible = !1, UiHelper.playBreathe(this.buttonGet.node)), mgrI18n.trySetI18nImage(this.spriteBg, "pnl_quest_01.png"), this.awardCount.text = `${db.game_cnf.daily_quest_dianmond_count}${mgrI18n.getText("panelQuestGift.1")}`, this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"quest_db" == t.advName && (this.close(), mgrDailyQuest.getDailyAward(!0))
		}
		on_click_buttonGet() {
			this.close(), mgrDailyQuest.getDailyAward(!1)
		}
		on_click_buttonAdvGet() {
			mgrAdv.statisVideoClick("quest_db"), mgrAdv.dispatchAdv("quest_db", null, !0)
		}
		on_click_buttonClose() {
			this.close(), mgrDailyQuest.getDailyAward(!1)
		}
	}
	class RankItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "res/prefab/RankItem.json", this._exportNodeInfo = {}
		}
		onCreateComplete() {
			this.name = this.resNode.getChildByName("name"), this.rank = this.resNode.getChildByName("rank"), this.desc = this.resNode.getChildByName("desc"), this.head = this.resNode.getChildByName("head"), UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this))
		}
		playAnim() {
			this.callable ? (this.resNode.alpha = 0, cc.tween(this.resNode).to(.2, cc.PROP.ALPHA1).start()) : this.safeCall(this.playAnim)
		}
		useBmf() {
			this.callable ? (this.rank.font = GConfig.bmf_rank, this.rank.scale(.9, .9, !0)) : this.safeCall(this.useBmf)
		}
		setData(t, e) {
			if (this.callable) {
				switch (this.rankData = t, this.rankType = e, this.rank && (this.rank.text = t.rank + ""), this.name.text = t.name, e) {
					case 0:
						this.desc.text = t.score + "";
						break;
					case 1:
					case 2:
						this.desc.text = "" + t.score
				}
				this.head && t.headUrl && this.head.loadImage(`res/icon_head/${t.headUrl}.png`)
			} else this.safeCall(this.setData, t, e)
		}
		setMyRank(t) {
			let e = mgrI18n.getText("rankItem.1");
			this.name.text = String.format(e, t)
		}
		randomParts() {
			let t = mgrRank.getRankPercent(this.rankType, this.rankData.rank);
			console.log("rank p:", t);
			let e = 0 | Mathf.lerp(0, 4, t),
				a = 0 | Mathf.lerp(0, 8, t);
			return mgrPvp.randomParts(e, a)
		}
		onClick() {
			if (this.rankData)
				if (this.rankData.selfFlag) {
					let t = mgrSzz.getMyParts() || mgrPart.partsWear,
						e = [];
					for (const a in t) {
						2 == db.get_item_db(t[a]).type && e.push(t[a])
					}
					mgrPart.openPanelSuitDetal(e)
				} else this.rankData.data1 || (this.rankData.data1 = this.randomParts()), mgrPart.openPanelSuitDetal(this.rankData.data1)
		}
	}
	class PanelRank extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelRank.json", this._exportNodeInfo = {
				cc_topLeftNode: "Laya.Sprite",
				cc_btnClose: "UIButton",
				cc_toggle2: "UIToggle",
				cc_text2: "Laya.Text",
				cc_text1: "Laya.Text",
				cc_toggle0: "UIToggle",
				cc_text3: "Laya.Text",
				cc_text4: "Laya.Text",
				cc_toggle1: "UIToggle",
				cc_text5: "Laya.Text",
				cc_text6: "Laya.Text",
				cc_rank1: "Laya.Sprite",
				cc_rank2: "Laya.Sprite",
				cc_rank3: "Laya.Sprite",
				cc_scroll: "ReuseScrollList",
				cc_myRankItem: "Laya.Image",
				cc_buttonHuDong: "UIButton",
				cc_text7: "Laya.Text"
			}, this.instOrBanner = new AdvInstOrBanner("enter_rank", "banner_rank")
		}
		buildUi() {
			this.text1.text = this.text2.text = mgrI18n.getText("panelRank.1"), this.text3.text = this.text4.text = mgrI18n.getText("panelRank.2"), this.text5.text = this.text6.text = mgrI18n.getText("panelRank.3"), this.text7.text = mgrI18n.getText("panelRank.4"), mgrI18n.trySetI18nImage(this.buttonHuDong.node, "pnl_rank_01.png"), GameStatistics.statisCommonEvent(7311), this._rank1 = new RankItem, this._rank2 = new RankItem, this._rank3 = new RankItem, this._rankMy = new RankItem, this._rank1.createFromNode(this.rank1), this._rank2.createFromNode(this.rank2), this._rank3.createFromNode(this.rank3), this._rankMy.createFromNode(this.myRankItem), this.playUiAnim(), this.scroll.onItemCreate = function() {
				let t = new RankItem;
				return t.useBmf(), t.create(), t.playAnim(), t
			}, this.scroll.onItemChange = ((t, e) => {
				let a = mgrRank.rankDatas[this._rankIdx][e];
				t.setData(a, this._rankIdx)
			}), this.registerMsg({
				RECEIVE_RANK_DATA: this.onMsgReceiveRankData.bind(this),
				RECEIVE_SELF_RANK_DATA: this.onMsgReceiveSelfRankData.bind(this),
				PART_JUMP_FINISH: this.onMsgPartJumpFinish.bind(this)
			}), this.startProcMsg();
			let t = this.context || 2;
			2 != t && this["toggle" + t].check(!0), this.scheduleOnce(.3, this.switchRank.bind(this, t))
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.scroll && this.scroll.clearAllItems(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgReceiveRankData() {
			this.fillRank(), this.fillHead()
		}
		onMsgReceiveSelfRankData() {
			this.fillSelfRank()
		}
		onMsgPartJumpFinish() {
			this.close(!0)
		}
		playUiAnim() {
			cc.tween(this._rank1.node).delay(.7).to(.5, {
				y: this._rank1.y,
				alpha: 1
			}, {
				easing: cc.Ease.backOut
			}).start(), cc.tween(this._rank2.node).delay(.4).to(.3, {
				x: this._rank2.x,
				alpha: 1
			}, {
				easing: cc.Ease.sineIn
			}).start(), cc.tween(this._rank3.node).delay(.2).to(.3, {
				x: this._rank3.x,
				alpha: 1
			}, {
				easing: cc.Ease.sineIn
			}).start(), this._rank1.y = -900, this._rank1.setAlpha(0), this._rank2.x = -564, this._rank2.setAlpha(0), this._rank3.x = 386, this._rank3.setAlpha(0)
		}
		switchRank(t) {
			this._rankIdx = t, 0 == mgrRank.rankDatas[this._rankIdx].length ? mgrRank.requestRankData(this._rankIdx) : (this.fillRank(), this.fillHead(), this.fillSelfRank())
		}
		fillRank() {
			if (0 == mgrRank.rankDatas[this._rankIdx].length) return void Logger.error("没有排行榜数据.");
			this.scroll.isAutoScrolling && this.scroll.stopAutoScroll();
			let t = mgrRank.rankDatas[this._rankIdx];
			this.scroll.updateList(t.length)
		}
		fillSelfRank() {
			let t = mgrRank.playerRankData[this._rankIdx];
			if (!t) return;
			this._rankMy.setMyRank(t.rank);
			let e = mgrRank.rankDatas[this._rankIdx];
			for (let a = 0; a < e.length; a++)
				if (e[a].uid == t.uid) {
					this.scheduleOnce(.6, () => {
						this.scroll.isAutoScrolling || this.scroll.centerTo(a, .5)
					});
					break
				}
		}
		fillHead() {
			let t = mgrRank.headRankData[this._rankIdx];
			t && (this._rank1.setData(t[0], this._rankIdx), this._rank2.setData(t[1], this._rankIdx), this._rank3.setData(t[2], this._rankIdx))
		}
		on_click_btnClose() {
			this.close()
		}
		on_click_toggle0() {
			this.switchRank(2)
		}
		on_click_toggle1() {
			this.switchRank(0)
		}
		on_click_toggle2() {
			this.switchRank(1)
		}
		on_click_buttonHuDong() {
			GameStatistics.statisCommonEvent(7312), mgrAlert.openPanelLoading(UI_NAME.PanelRankHuDong, this._rankIdx)
		}
	}
	class PanelRankHuDong extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelRankHuDong.json", this._exportNodeInfo = {
				cc_topLeftNode: "Laya.Sprite",
				cc_btnClose: "UIButton",
				cc_giftTip2: "Laya.Sprite",
				cc_text1: "Laya.Text",
				cc_topNode: "Laya.Sprite",
				cc_text2: "Laya.Text",
				cc_scoreLabel: "Laya.Text",
				cc_leftNode: "Laya.Sprite",
				cc_buttonScale: "UIButton",
				cc_scaleIcon: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_inputOption: "Laya.Image",
				cc_reuseScrollInput: "ReuseScrollList",
				cc_buttonSee: "UIButton",
				cc_buttonGift: "UIButton",
				cc_awardTip: "Laya.Sprite",
				cc_giftTip: "Laya.Sprite",
				cc_text4: "Laya.Text",
				cc_partList: "Laya.Image",
				cc_reuseScrollParts: "ReuseScrollList"
			}, this.bTween = !1
		}
		buildUi() {
			this.text1.text = mgrI18n.getText("panelRankHuDong.1"), this.text2.text = mgrI18n.getText("panelRankHuDong.2"), this.text4.text = mgrI18n.getText("panelRankHuDong.5"), this.initUi(), this.create3d(), this.initTouch(), this.registerMsg({
				UI_CLICK_BULLET_CHAT: this.onMsgClickBulletChat.bind(this),
				EGG_FINISH: this.onMsgEggFinish.bind(this),
				PART_JUMP_FINISH: this.onMsgPartJumpFinish.bind(this)
			}), this.startProcMsg(), this.showBulletChat()
		}
		dispose() {
			this.stopProcMsg(), this.bulletChatMaker && (this.bulletChatMaker.dispose(), this.bulletChatMaker = null), super.dispose()
		}
		update() {
			this.updateGiftState()
		}
		onMsgClickBulletChat(t) {
			this.closeOption(), this.bulletChatMaker && this.bulletChatMaker.setNext(t)
		}
		onMsgEggFinish() {}
		onMsgPartJumpFinish() {
			this.close(!0)
		}
		create3d() {
			this.createScene3DBack(1, 60), this.camera.transform.localPosition = new Laya.Vector3(.02, 1.35, 1.05), this.camera.transform.localRotationEuler = new Laya.Vector3(-8, 0, 0), this.avatar = new RoleAvatar(mgrPvp.rankParts), this.scene3DBack.addChild(this.avatar), this.avatar.playIdle()
		}
		initUi() {
			this.reuseScrollInput.itemHeight = 45, this.reuseScrollInput.itemWidth = 280, this.reuseScrollInput.setVerticle(!0), this.reuseScrollInput.onItemCreate = function() {
				return new HuDongTextItem
			}, this.reuseScrollInput.onItemChange = ((t, e) => {
				t.setData(db.game_cnf.bullet_chat_texts[e])
			}), this.reuseScrollInput.updateList(db.game_cnf.bullet_chat_texts.length), this.reuseScrollParts.itemHeight = 160, this.reuseScrollParts.itemWidth = 127, this.reuseScrollParts.setVerticle(!1), this.reuseScrollParts.onItemCreate = function() {
				return new HuDongPartItem
			}, this.reuseScrollParts.onItemChange = ((t, e) => {
				t.setHuDongPart(mgrPvp.rankParts[e])
			}), this.reuseScrollParts.updateList(mgrPvp.rankParts.length), this.inputOption.visible = !1, this.inputOption.scale(1, .3, !0), this.inputOption.y = 40, this.reuseScrollInput.node.alpha = 0, this.partList.alpha = 0, this.partList.scale(0, 0), this.partList.visible = !1, this.giftTip.scale(0, 0, !0).alpha = 0, this.giftTip.visible = !1, this.giftTip2.scale(0, 0, !0).alpha = 0, this.giftTip2.visible = !1, this.state = 0, this.scoreLabel.text = mgrRank._getMaxScore(this.context) + ""
		}
		initTouch() {
			let t = new Laya.Vector3(1, 1, 1),
				e = 0,
				a = function(t) {
					if (t && t.length > 1) {
						var e = t[0],
							a = t[1];
						return Mathf.distance2(e.stageX - a.stageX, e.stageY - a.stageY)
					}
					return 0
				};
			UiHelper.registerTouchEvent(this.resNode, t => {
				e = a(t.touches)
			}, i => {
				var s = a(i.touches);
				if (e && s) {
					let a = Mathf.clamp((s - e) / 600, -1, 1);
					a = Mathf.clamp(a + t.x, .5, 2), t.setValue(a, a, a), this.avatar.transform.localScale = t
				}
				e = s
			}, t => {
				e = 0
			})
		}
		openOption() {
			cc.tween(this.inputOption, !0).show().to(.3, {
				scaleY: 1,
				y: -184
			}, cc.OPTION.SINE_IN).start(), cc.tween(this.reuseScrollInput.node, !0).delay(.1).to(.2, cc.PROP.ALPHA1).start(), this.state = 1
		}
		closeOption() {
			cc.tween(this.reuseScrollInput.node, !0).to(.2, cc.PROP.ALPHA0).start(), cc.tween(this.inputOption, !0).delay(.1).to(.3, {
				scaleY: .3,
				y: 40
			}, cc.OPTION.SINE_OUT).hide().start(), this.state = 0
		}
		showBulletChat() {
			this.bulletChatMaker || (this.bulletChatMaker = new BulletChatMaker(1e3), this.topNode.addChild(this.bulletChatMaker.root)), this.bulletChatMaker.start()
		}
		updateGiftState() {
			let t = this.giftTip,
				e = t.visible;
			mgrRankHuDong.giftCount > 0 && mgrRankHuDong.nextGiftTime <= Timer.time ? (t.visible = !0, this.awardTip.visible = !0, this.bTween || (this.bTween = !0, UiHelper.playRotCycle(this.buttonGift.node))) : (t.visible = !1, this.awardTip.visible = !1, this.bTween = !1, cc.clearTween(this.buttonGift.node), this.buttonGift.node.rotation = 0, this.awardTip.visible = !1), e != t.visible && (t.visible ? cc.tween(this.giftTip2, !0).show().to(.3, cc.PROP.SCALE_ALPHA1, cc.OPTION.BACK_OUT).start() : cc.tween(this.giftTip2, !0).to(.3, cc.PROP.SCALE_ALPHA0).hide().start())
		}
		openPartList() {
			cc.tween(this.partList, !0).show().to(.3, cc.PROP.SCALE_ALPHA1, cc.OPTION.BACK_OUT).start(), this.state = 2
		}
		closePartList() {
			cc.tween(this.partList, !0).to(.3, cc.PROP.SCALE_ALPHA0, cc.OPTION.BACK_IN).hide().start(), this.state = 0
		}
		on_click_btnClose() {
			this.close()
		}
		on_click_buttonScale() {
			this.cameraEffect
		}
		on_click_buttonSee() {
			switch (this.state) {
				case 1:
					this.closeOption(), this.openPartList();
					break;
				case 2:
					this.closePartList();
					break;
				case 0:
					this.openPartList()
			}
		}
		on_click_buttonGift() {
			switch (this.state) {
				case 1:
					this.closeOption();
					break;
				case 2:
					this.closePartList()
			}
			mgrRankHuDong.giftCount > 0 && mgrRankHuDong.nextGiftTime <= Timer.time ? (mgrAlert.openPanelLoading(UI_NAME.PanelEgg), this.giftTip2.visible = !1) : mgrAlert.alertText(mgrI18n.getText("panelRankHuDong.6"))
		}
	}
	class HuDongTextItem extends ViewBase {
		constructor() {
			super(), this.create()
		}
		create() {
			let t = new Laya.Image;
			t.skin = "res/ui/pnl_rank/text_item_bg.png", t.size(280, 42), t.sizeGrid = "0,32,0,32", this.label = t.addChild(new Laya.Label), this.label.fontSize = 20, this.label.color = "#5697f0", this.label.anchorX = .5, this.label.pos(140, 11, !0), this.createFromNode(t)
		}
		onCreateComplete() {
			UiHelper.addClickEvent(this.resNode, this.onClick.bind(this), void 0, 1)
		}
		setData(t) {
			this.label.text = t
		}
		onClick() {
			_G.sendMsg("UI_CLICK_BULLET_CHAT", this.label.text)
		}
	}
	class BulletChatItem extends Laya.Sprite {
		constructor() {
			super(), this.bg = this.addChild(new Laya.Image("res/ui/pnl_rank/bullet_chat.png")), this.bg.sizeGrid = "0,26,0,26", this.bg.width = 240, this.label = this.addChild(new Laya.Label), this.label.fontSize = 20, this.label.color = "#ffffff", this.label.anchorX = .5, this.label.pos(120, 9, !0)
		}
		setText(t) {
			this.label.text = t
		}
	}
	class BulletChatMaker {
		constructor(t) {
			this.count = t, this.chatItems = [], this.root = new Laya.Sprite
		}
		dispose() {
			Laya.timer.clearAll(this), this.root.destroy()
		}
		start() {
			this.curCount = 0
		}
		setNext(t) {
			this.myText = t
		}
		createItem() {
			this.curCount++;
			let t = this.chatItems.pop();
			t ? t.visible = !0 : t = new BulletChatItem, this.myText ? (t.label.color = "#ffff00", t.bg.visible = !0, t.setText(this.myText), this.myText = null) : (t.label.color = BulletChatMaker.COLORS[Mathf.random(BulletChatMaker.COLORS.length) - 1], t.bg.visible = !1, t.setText(db.game_cnf.bullet_chat_texts[Mathf.random(db.game_cnf.bullet_chat_texts.length) - 1])), this.root.addChild(t);
			this.lastY ? this.lastY = (Mathf.random(50, 95) + this.lastY) % 240 : this.lastY = Mathf.random(240), t.pos(_G.canvasFitWidth / 2 + 50, 140 + this.lastY, !0);
			let e = Mathf.random(50, 90) / 10;
			cc.tween(t, !0).to(e, {
				x: -_G.canvasFitWidth / 2 - 290
			}).call(() => {
				this.chatItems.push(t), t.visible = !1
			}).start(), this.curCount >= this.count && Laya.timer.clearAll(this)
		}
	}
	BulletChatMaker.COLORS = ["#12ff00", "#ff33e5", "#3343c1", "#ffff00"];
	class RankVideoItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "res/prefab/RankVideoItem.json", this._exportNodeInfo = {
				cc_head: "Laya.Sprite",
				cc_rank: "Laya.Label",
				cc_name: "Laya.Label",
				cc_desc: "Laya.Label",
				cc_rank1: "Laya.Sprite",
				cc_rank2: "Laya.Sprite",
				cc_rank3: "Laya.Sprite"
			}
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this))
		}
		setData(t) {
			if (this.callable) {
				this.rankData = t, this.rank && (this.rank.text = String.format(mgrI18n.getText("rankItem.1"), t.rank));
				for (let e = 1; e <= 3; e++) {
					let a = this["rank" + e.toString()];
					a && (a.visible = t.rank == e)
				}
				if (this.name.text = t.nickName, t.score < 1e4 ? this.desc.text = t.score.toString() : this.desc.text = `${(t.score/1e4).toFixed(1)}w`, this.head && t.headUrl) {
					let e = window.tt;
					if (console.log("是否是头条渠道", !!e), e && e.createImage) {
						let a = e.createImage();
						a.src = t.headUrl, a.width = 300, a.height = 400, a.addEventListener("load", t => {
							if (console.log("录屏排行榜头像加载成功", t), t && t.target && t.target.data) {
								let e = t.target.data,
									a = new Laya.Texture2D(300, 400, 1);
								a.setPixels(e);
								let i = new Laya.Texture(a);
								this.head.texture = i
							}
						}), a.addEventListener("error", t => {
							console.log("录屏排行榜头像加载成功", t)
						})
					} else this.head.loadImage(t.headUrl, Laya.Handler.create(this, () => {
						this.head.pivot(this.head.width / 2, this.head.height / 2), this.head.pos(90, 114)
					}))
				}
			} else this.safeCall(this.setData, t)
		}
		onClick() {
			let t = this.rankData && this.rankData.videoId;
			t && (console.log("点击了录屏", this.rankData), mgrSdk.jumpToVideoView(t))
		}
	}
	const VIDEO_RANK_TAG_INDEX = {
		TAG_INDEX1: 4,
		TAG_INDEX2: 5
	};
	class PanelRankVideo extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelRankVideo.json", this.panelStyle = 0, this._exportNodeInfo = {
				cc_topNode: "Laya.Sprite",
				cc_toggle4: "UIToggle",
				cc_toggle5: "UIToggle",
				cc_btnTips: "UIButton",
				cc_inner: "Laya.Image",
				cc_scroll: "ReuseScrollList",
				cc_labelTips: "Laya.Label",
				cc_topLeftNode: "Laya.Sprite",
				cc_btnClose: "UIButton",
				cc_buttonFree: "UIButton",
				cc_labelMyRank: "Laya.Label"
			}, this.rankDatas = {}, this.selectedTagIndex = 0, this.myRank = {}, this.VIDEO_RANK_TAG_INDEX_TO_TAG = {}
		}
		buildUi() {
			this.inner.height = 750 + _G.canvasFitHeight - 1024, this.scroll.height = this.inner.height - 30, this.labelTips.y = this.inner.height / 2, this.VIDEO_RANK_TAG_INDEX_TO_TAG[VIDEO_RANK_TAG_INDEX.TAG_INDEX1] = db.cop.get_video_share_rank_tag || "", this.VIDEO_RANK_TAG_INDEX_TO_TAG[VIDEO_RANK_TAG_INDEX.TAG_INDEX2] = db.cop.get_video_share_rank_tag_active || "", this.scroll.onItemCreate = function() {
				let t = new RankVideoItem;
				return t.create(), t
			}, this.scroll.onItemChange = ((t, e) => {
				if (this.rankDatas && this.rankDatas[this.selectedTagIndex]) {
					let a = this.rankDatas[this.selectedTagIndex][e];
					t.setData(a)
				}
			}), this["toggle" + VIDEO_RANK_TAG_INDEX.TAG_INDEX1].check(!0), this.switchRank(VIDEO_RANK_TAG_INDEX.TAG_INDEX1), this.registerMsg({
				[BASE_MSG.SDK_GET_RANK_DATA_RESULT]: this.onMsgGetRankDataResult.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEvent(9306, 0), GameStatistics.statisOnStageStart(13003)
		}
		dispose() {
			this.stopProcMsg(), this.scroll && this.scroll.clearAllItems(), GameStatistics.statisOnStageEnd(13003), super.dispose()
		}
		onOpenComplete() {
			super.onOpenComplete(), mgrGame.tryOpenPanelRankVideoTips(6, this.close.bind(this))
		}
		onMsgGetRankDataResult(t) {
			let e = t;
			if (4 == e.rankType) {
				let t = e.list,
					a = [];
				if (Tools.forEachMap(t, (t, e) => {
						let i = JSON.parse(e);
						i && (i.rank = parseInt(t), a.push(i), i.selfFlag && (this.myRank[this.selectedTagIndex] = i.rank, this.refreshMyRank()))
					}), a.length <= 0) return this.labelTips.text = "暂时没有数据哦，快去发布视频吧！", void(this.labelTips.visible = !0);
				a.sort(sort_rank_by_rank), this.rankDatas[this.selectedTagIndex] = a, e.videoTag == this.VIDEO_RANK_TAG_INDEX_TO_TAG[this.selectedTagIndex] && this.fillRank()
			}
		}
		switchRank(t) {
			if (this.selectedTagIndex == t) return;
			this.selectedTagIndex = t;
			let e = this.rankDatas[t];
			this.refreshMyRank(), !e || e.length <= 0 ? (this.scroll && this.scroll.updateList(0), this.labelTips.text = "排行榜数据获取中...", this.labelTips.visible = !0, mgrSdk.getRankData(100, "", 1, 4, this.VIDEO_RANK_TAG_INDEX_TO_TAG[t])) : this.fillRank()
		}
		fillRank() {
			this.labelTips.visible = !1;
			let t = this.rankDatas[this.selectedTagIndex];
			this.scroll.isAutoScrolling && this.scroll.stopAutoScroll(), this.scroll.updateList(t.length)
		}
		refreshMyRank() {
			let t = this.myRank[this.selectedTagIndex];
			this.labelMyRank.text = t && t < 100 ? `我的排名：${t}` : "我的排名：100+"
		}
		on_click_btnClose() {
			this.close()
		}
		on_click_toggle4() {
			this.switchRank(VIDEO_RANK_TAG_INDEX.TAG_INDEX1)
		}
		on_click_toggle5() {
			this.switchRank(VIDEO_RANK_TAG_INDEX.TAG_INDEX2)
		}
		on_click_btnTips() {
			db.cop.get_rank_tip_url ? mgrAlert.openPanelLoading(UI_NAME.PanelVideoRankTipsRemote) : mgrAlert.openPanelLoading(UI_NAME.PanelVideoRankTips, {
				fOnClick: () => {
					this.close()
				}
			})
		}
		on_click_buttonFree() {
			GameStatistics.statisCommonEvent(9306, 1), mgrAlert.openPanelLoading(UI_NAME.PanelClassRoom, {}, this.close.bind(this))
		}
	}
	class PanelReconnectDialog extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelReconnectDialog.json", this.panelLayer = PANEL_LAYER.TOP, this.panelStyle = 0, this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_titleLabel: "Laya.Label",
				cc_descLabel: "Laya.Label",
				cc_buttonYes: "UIButton"
			}
		}
		buildUi() {}
		on_click_buttonYes() {
			this.close(), this.context && this.context.clickCallback && this.context.clickCallback()
		}
	}
	class PanelRoleLvup extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelRoleLvup.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_text1: "Laya.Text",
				cc_itemCount: "Laya.Text",
				cc_itemIcon: "Laya.Sprite",
				cc_text2: "Laya.Text",
				cc_text3: "Laya.Text",
				cc_perSecValue: "Laya.Label",
				cc_buttonOk: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_lvup", "banner_lvup")
		}
		buildUi() {
			this.text1.text = mgrI18n.getText("panelRoleLvup.2"), this.text2.text = mgrI18n.getText("panelRoleLvup.3"), this.text3.text = mgrI18n.getText("panelRoleLvup.4");
			let t = this.context;
			if (t) {
				this.itemCount.text = "*" + t.count;
				let e = db.get_item_db(t.itemId);
				this.itemIcon.loadImage(e.icon)
			}
			this.perSecValue.text = (60 * mgrOffline.offlinePerSecond | 0) + ""
		}
		dispose() {
			this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		on_click_buttonOk() {
			this.close(), this.context && mgrAlert.alertItems(this.context)
		}
	}
	class preDestinationItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "res/prefab/preDestinationItem.json", this._exportNodeInfo = {
				cc_imageBg: "Laya.Image",
				cc_textName: "Laya.Label",
				cc_spriteNeverTest: "Laya.Sprite"
			}
		}
		onCreateComplete() {
			mgrI18n.trySetI18nImage(this.spriteNeverTest, "pnl_contract_01.png")
		}
		refreshItem(t) {
			if (!this.callable) return this.safeCall(this.refreshItem, t);
			if (console.log("查看roleId", t), !t) return;
			let e = db.get_role_db(t),
				a = e.cardUrl;
			console.log("查看cardUrl", e), this.textName.text = mgrI18n.getText(e.tlite), this.imageBg.skin = a;
			let i = mgrRoleTest.checkIsTested(t);
			this.spriteNeverTest.visible = !i, this.imageBg.gray = !i
		}
	}
	class PanelRolePreDestination extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 2, this.resourceName = "res/ui/PanelRolePreDestination.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_scrollView: "ReuseScrollList",
				cc_buttonClose: "UIButton",
				cc_text1: "Laya.Text",
				cc_topLeftNode: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_role_pre", "banner_role_pre")
		}
		buildUi() {
			this.initUi()
		}
		dispose() {
			this.scrollView && this.scrollView.clearAllItems(), this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		initUi() {
			this.text1.text = mgrI18n.getText("panelRolePreDestination.1");
			let t = db.get_role_test_map(),
				e = {};
			for (let a in t) e[t[a].contractIdx] = !0;
			this.roleIds = [];
			let a = db.get_role_contract_db_map();
			for (let t in a) e[a[t].contractIdx] && this.roleIds.push(a[t].roleId);
			this.scrollView.onItemCreate = function() {
				let t = new preDestinationItem;
				return t.create(), t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}, this.scrollView.onItemChange = ((t, e) => {
				t.refreshItem(this.roleIds[e])
			}), this.scrollView.updateList(this.roleIds.length)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelRoleTestOver extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelRoleTestOver.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_nodeAll: "Laya.Box",
				cc_labelName: "Laya.Label",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_spriteRole: "Laya.Sprite",
				cc_buttonOk: "UIButton",
				cc_buttonAdv: "UIButton",
				cc_buttonSwitch: "UIButton",
				cc_buttonCircle: "UIButton",
				cc_buttonBox: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.oldContractIdx = null, this.selectIndex = 0, this.ROLE_ID_TO_POS = {
				r1: {
					x: -10,
					y: 300
				},
				r2: {
					x: 0,
					y: 300
				},
				r7: {
					x: 80,
					y: 300
				},
				r24: {
					x: 0,
					y: 300
				},
				r9: {
					x: -80,
					y: 250
				},
				r25: {
					x: 0,
					y: 300
				},
				r26: {
					x: 30,
					y: 300
				},
				r3: {
					x: 57,
					y: 263
				},
				r27: {
					x: -4,
					y: 252
				}
			}, this.instOrBanner = new AdvInstOrBanner("enter_test_over", ""), this.loadState = 0
		}
		static getResLoader(t) {
			let e = new ResLoader;
			return e.add(db.get_animation_db(MODEL_ANIM.SHENTI_COME).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_COME).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHENTI_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_COME).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_come).resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.come).resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.wawahe).resPath, RES_TYPE.PREFAB3D), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME01).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME02).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME03).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME01).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME02).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME03).path, RES_TYPE.ANIMATIONCLIP), (t && t.roleTestData || {}).contractIdx != mgrGame.contractIndex && (e.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_jiechu).resPath, RES_TYPE.PREFAB3D), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHENTI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_JIECHU).path, RES_TYPE.ANIMATIONCLIP)), e.add("res/ui/PanelRoleTestOver.json", RES_TYPE.PREFAB2D), e
		}
		static openPanel(t, e = {}) {
			let a = this.getResLoader(e);
			mgrAlert.openWait(a, () => {
				mgrPanel.openPanelWithSingleton(UI_NAME.PanelRoleTestOver, e, t)
			})
		}
		buildUi() {
			this.buttonCircle.node.visible = !1, this.buttonOk.node.visible = !1, this.buttonBox.node.visible = !1;
			let t = this.context && this.context.roleTestData;
			if (!t) return;
			this.oldContractIdx = mgrGame.contractIndex, this.selectIndex = t.contractIdx;
			let e = db.get_role_contract_db(t.contractIdx),
				a = db.get_role_db(e.roleId);
			if (a) {
				this.labelName.text = mgrI18n.getText(a.tlite), this.spriteRole.loadImage(a.image);
				let t = this.ROLE_ID_TO_POS[e.roleId];
				this.spriteRole.pos(t.x, t.y)
			}
			let i = new Laya.Sprite,
				s = new Laya.Point;
			UiHelper.local2local(this.spriteMaskBg, this.spriteRole, s), i.graphics.drawImage(this.spriteMaskBg.texture, s.x, s.y), this.spriteRole.mask = i, this.oldParts = Tools.deepCopy(mgrPart.partsWear), this.selectIndex == mgrGame.contractIndex || mgrGame.isContractUnlock(this.selectIndex) ? (this.buttonAdv.node.visible = !1, this.buttonSwitch.node.visible = !0, this.buttonOk.node.visible = !1) : mgrAdv.checkActive("switch_role") ? (this.buttonAdv.node.visible = !0, this.buttonSwitch.node.visible = !1, this.buttonOk.node.visible = !1, mgrAdv.statisVideoShow("switch_role")) : (this.buttonAdv.node.visible = !1, this.buttonSwitch.node.visible = !1, this.buttonOk.node.visible = !0), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEvent(9303), GameStatistics.statisOnStageStart(13004)
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.clearWawahe(), this.clearOld(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX), GameStatistics.statisOnStageEnd(13004), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		clearWawahe() {
			this.wawahe && (this.wawahe.dispose(), this.wawahe = null)
		}
		clearOld() {
			this.oldAvatar && (this.oldAvatar.destroy(), this.oldAvatar = null), this.oldShexiangji && (this.oldShexiangji.dispose(), this.oldShexiangji = null), this.oldWawahe && (this.oldWawahe.dispose(), this.oldWawahe = null), this.oldGemstone && (_G.poolManager.put(this.oldGemstone), this.oldGemstone = null), this.oldRoom && (this.oldRoom.dispose(), this.oldRoom = null)
		}
		startLoad() {
			let t = new ResLoader;
			mgrPart.addPartResList(mgrPart.partsWear, t, !0), t.setLoadingCallback(this.onButtonAnimFinish.bind(this));
			let e = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			if (t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D), null != this.oldContractIdx && mgrGame.contractIndex != this.oldContractIdx) {
				let e = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
				t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D)
			}
			t.loadAll()
		}
		onButtonAnimFinish() {
			this.loadState++, 1 == this.loadState && (cc.tween(this.bg).to(.1, cc.PROP.ALPHA0).hide().start(), this.nodeAll.visible = !1, this.buttonClose.node.visible = !1, this.oldContractIdx == mgrGame.contractIndex ? (this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))) : (this.oldRoom = new RoomBath, this.oldRoom.load(this.onOldSceneLoaded.bind(this))))
		}
		onOldSceneLoaded() {
			this.addChild(this.oldRoom.scene), this.resNode.setChildIndex(this.oldRoom.scene, 0), this.oldRoom.changeToMain(), this.oldRoom.skybox.active = !0, this.oldRoom.camera.active = !1, this.oldRoom.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.oldRoom.mapNode.transform, "localScale", 3, 3, 3), this.oldAvatar = new RoleAvatar(this.oldParts), this.oldRoom.root.addChild(this.oldAvatar), this.oldWawahe = new GModel(db.MODEL_DB_ID.wawahe), this.oldWawahe.create(), this.oldWawahe.initAnimator(), this.oldWawahe.setParent(this.oldRoom.root), this.oldWawahe.hide(), this.oldShexiangji = new GModel(db.MODEL_DB_ID.shexiangji_jiechu), this.oldShexiangji.create(), this.oldShexiangji.setParent(this.oldRoom.root), this.oldShexiangji.callIfLoaded(() => {
				let t = this.oldShexiangji.findChild("camera");
				t.nearPlane = .01, t.fieldOfView = 60;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular
			});
			let t = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
			this.oldGemstone = _G.poolManager.get(GModel, t), this.oldGemstone.initAnimator(), this.oldGemstone.getAnimator().cullingMode = Laya.Animator.CULLINGMODE_ALWAYSANIMATE, this.oldGemstone.setParent(this.oldRoom.root);
			let e = new AnimatorFixedPlayer;
			e.addModelAnim(this.oldWawahe, MODEL_ANIM.WAWAHE_JIECHU), e.addModelAnim(this.oldShexiangji, MODEL_ANIM.SHEXIANGJI_JIECHU), e.addModelAnim(this.oldAvatar.baseBody, MODEL_ANIM.SHENTI_JIECHU), e.addModelAnim(this.oldAvatar.baseFace, MODEL_ANIM.FACE_JIECHU), e.addTimeCallback(110 / 30 / e.duration, () => {
				this.oldWawahe.show()
			}), e.addTimeCallback(.78, () => {
				this.onSwitchComplete(() => {
					this.clearOld(), e.dispose()
				})
			}), e.addTimeCallback(1, () => {}), e.play();
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.oldGemstone, MODEL_ANIM.GEMSTONE_JIECHU), a.addTimeCallback(80 / 30 / a.duration, () => {
				this.oldGemstone.hide()
			}), a.play()
		}
		onSwitchComplete(t) {
			UiHelper.playBlackFlash(1, () => {
				t(), this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))
			})
		}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToMain(), this.room.skybox.active = !0, this.room.camera.active = !1, this.room.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 3, 3, 3), this.wawahe = new GModel(db.MODEL_DB_ID.wawahe), this.wawahe.create(), this.wawahe.initAnimator(), this.wawahe.setParent(this.room.root), this.shexiangji = new GModel(db.MODEL_DB_ID.shexiangji_come), this.shexiangji.create(), this.shexiangji.setParent(this.room.root), this.shexiangji.callIfLoaded(() => {
				let t = this.shexiangji.findChild("camera");
				t.nearPlane = .01;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular, this.shexiangji_effect = this.shexiangji.findChild("e_wawahe_come"), this.shexiangji_effect && (this.shexiangji_effect.active = !1)
			});
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME01), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME01), t.addTimeCallback(1, () => {
				let t = new AnimatorFixedPlayer;
				t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME02), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME02), t.addTimeCallback(1, () => {
					this.buttonBox.node.visible = !0, mgrGuide.dispatchGuide(GUD_EVENT.START_CONTRACT), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX, this.buttonBox.node)
				}), t.play()
			}), t.play()
		}
		playRoleAnim() {
			this.avatar = new RoleAvatar, this.room.root.addChild(this.avatar);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.avatar.baseBody, MODEL_ANIM.SHENTI_COME), t.addModelAnim(this.avatar.baseFace, MODEL_ANIM.FACE_COME), t.addTimeCallback(1, this.onRoleAnimFinish.bind(this)), t.play()
		}
		playGemstone() {
			let t = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			this.gemstone = _G.poolManager.get(GModel, t), this.gemstone.initAnimator(), this.gemstone.setParent(this.room.root), this.gemstone.setPosition(0, .05, 0), this.gemstone.playAnims(0, [MODEL_ANIM.GEMSTONE_COME, MODEL_ANIM.GEMSTONE_ZHANSHI], !0), this.gemstone.initPaint(), this.gemstone.callIfLoaded(() => {
				let t = this.gemstone.getChildAt(0);
				cc.tween(this).to(1.3, cc.PROP.EMPTY, {
					onUpdate(e, a) {
						t.transform.scale = t.transform.scale
					}
				}).start()
			})
		}
		onWawaheAnimFinish() {
			this.clearWawahe()
		}
		onRoleAnimFinish() {
			this.avatar.playAnimation(MODEL_ANIM.SHENTI_IDLE), this.buttonCircle.node.visible = !0, mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE, this.buttonCircle.node)
		}
		playGotoRoom() {
			this.shexiangji && (this.shexiangji.findChild("e_wawahe_come").active = !1, _G.isGuiding = !0, mgrPanel.openPanel(UI_NAME.PanelMain, {
				type: ROOM_TYPE.NORMAL,
				parts: null,
				data: {
					room: this.room,
					avatar: this.avatar,
					shexiangji: this.shexiangji,
					gemstone: this.gemstone
				},
				bSwitch: !0
			}, !1, () => {
				this.room.scene.removeSelf(), this.close()
			}))
		}
		onMsgAdvShowSuc(t) {
			"switch_role" == t.advName && (mgrGame.contractIndex = this.selectIndex, this.startLoad())
		}
		on_click_buttonOk() {
			mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_buttonAdv() {
			mgrAdv.statisVideoClick("switch_role"), mgrAdv.dispatchAdv("switch_role", {}, !0)
		}
		on_click_buttonSwitch() {
			this.selectIndex == mgrGame.contractIndex ? mgrAlert.alertDialog(mgrI18n.getText("panelContract.11"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				this.startLoad()
			}, () => {}) : mgrAlert.alertDialog(mgrI18n.getText("panelContract.12"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				mgrGame.contractIndex = this.selectIndex, this.startLoad()
			}, () => {})
		}
		on_click_buttonClose() {
			mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_buttonCircle() {
			this.shexiangji ? (this.buttonCircle.interactable = !1, cc.tween(this.buttonCircle.node, !0).to(.2, cc.PROP.ALPHA0).call(this.playGotoRoom.bind(this)).start()) : console.log("没有摄像机")
		}
		on_click_buttonBox() {
			this.buttonBox.node.visible = !1, this.shexiangji_effect && (this.shexiangji_effect.active = !0);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME03), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME03), t.addTimeCallback(3 / t.duration, this.playGemstone.bind(this)), t.addTimeCallback(1, this.onWawaheAnimFinish.bind(this)), t.play(), this.playRoleAnim()
		}
	}
	class medicineBottleItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "res/prefab/medicineBottleItem.json", this._exportNodeInfo = {
				cc_imageBg: "Laya.Image"
			}
		}
		onCreateComplete() {}
		refreshItem(t) {
			if (!this.callable) return this.safeCall(this.refreshItem, t);
			console.log("查看roleId", t);
			let e = db.get_role_test_color(t);
			if (!e) return;
			let a = e.icon;
			this.imageBg.skin = a
		}
	}
	class PanelRoleTest extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelRoleTest.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_barMask: "UIBarMask",
				cc_nodePaticel6: "Laya.Box",
				cc_nodePaticel5: "Laya.Box",
				cc_nodePaticel4: "Laya.Box",
				cc_nodePaticel3: "Laya.Box",
				cc_nodePaticel2: "Laya.Box",
				cc_nodePaticel1: "Laya.Box",
				cc_needFill: "Laya.Sprite",
				cc_buttonAdv: "UIButton",
				cc_buttonOk: "UIButton",
				cc_button1: "UIButton",
				cc_label5: "Laya.Label",
				cc_button2: "UIButton",
				cc_label3: "Laya.Label",
				cc_button3: "UIButton",
				cc_label2: "Laya.Label",
				cc_button4: "UIButton",
				cc_label4: "Laya.Label",
				cc_button5: "UIButton",
				cc_label1: "Laya.Label",
				cc_buttonPreDestination: "UIButton",
				cc_spritePreDestinaTion: "Laya.Sprite",
				cc_boxTestNo: "Laya.Box",
				cc_spriteTestNo: "Laya.Sprite",
				cc_barMaskAnswer: "UIBarMask",
				cc_labelTestCount: "Laya.Label",
				cc_boxTestAd: "Laya.Box",
				cc_spriteTestAd: "Laya.Sprite",
				cc_buttonAdAnswer: "UIButton",
				cc_boxTestYes: "Laya.Box",
				cc_sptiteTestYes: "Laya.Sprite",
				cc_scrollView: "ReuseScrollList",
				cc_buttonColorEggMianJu: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.colorIdArr = [], this.spines = [], this.selectIndex = 0, this.instOrBanner = new AdvInstOrBanner("enter_role_test", ""), this.bAction = !1
		}
		addPreloadRes(t) {
			t.addModel(db.get_effect_db("150").res), t.addModel(db.get_effect_db("151").res), t.addModel(db.get_effect_db("152").res), t.addModel(db.get_effect_db("153").res), t.addModel(db.get_effect_db("154").res);
			for (let e = 1; e <= 5; e++) {
				let a = `ui_pingzi0${e}`;
				t.addBuffer(db.get_spine_db(a).skeletonData)
			}
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spritePreDestinaTion, "pnl_common_02.png"), mgrI18n.trySetI18nImage(this.spriteTestNo, "pnl_role_test_02.png"), mgrI18n.trySetI18nImage(this.spriteTestAd, "pnl_role_test_01.png"), mgrI18n.trySetI18nImage(this.sptiteTestYes, "pnl_role_test_02.png"), this.init3D(), this.refreshTestAnswerState(), this.checkColorEggMianJu();
			for (let t = 1; t <= 5; t++) {
				let e = this["button" + t.toString()],
					a = `ui_pingzi0${t}`,
					i = _G.poolManager.get(Spine, a);
				i.setParent(e.node), i.setPosition(e.node.width / 2, e.node.height), i.play("idle1"), i.setAlpha(0), i.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), this.spines.push(i);
				let s = this["label" + t.toString()],
					n = db.get_role_test_color(t - 1);
				s && n && (s.text = mgrI18n.getText(n.tlite), s.color = n.color)
			}
			this.barMask.style = UIBarMask.STYLE_VERTICAL, this.barMask.progress = 0, this.barMaskAnswer.style = UIBarMask.STYLE_HORIZON, this.refresBtns(), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEvent(9301), GameStatistics.statisOnStageStart(13004)
		}
		dispose() {
			this.stopProcMsg(), this.scrollView && this.scrollView.clearAllItems(), this.instOrBanner.dispose(), this.destroyed = !0;
			for (let t = 0; t < this.spines.length; t++) _G.poolManager.put(this.spines[t]);
			this.spines = null, GameStatistics.statisOnStageEnd(13004), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		refreshTestAnswerState() {
			if (this.boxTestAd.visible = !1, this.boxTestNo.visible = !1, this.boxTestYes.visible = !1, mgrRoleTest.getRecordTestAd(TEST_ROLE_ID)) this.boxTestYes.visible = !0;
			else {
				let t = mgrRoleTest.getRecordTestCount(TEST_ROLE_ID);
				t >= 3 ? (mgrAdv.statisVideoShow("role_test_answer"), this.boxTestAd.visible = !0) : (this.boxTestNo.visible = !0, this.barMaskAnswer.progress = t / 3, this.labelTestCount.text = `${t} / 3`)
			}
			if (this.boxTestYes.visible) {
				let t = db.get_role_test_answer("r27").answer;
				this.scrollView.onItemCreate = function() {
					let t = new medicineBottleItem;
					return t.create(), t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
				}, this.scrollView.onItemChange = ((e, a) => {
					e.refreshItem(t[a])
				}), this.scrollView.updateList(t.length)
			}
		}
		onMsgAdvShowSuc(t) {
			if ("role_test" == t.advName && t.params && t.params.roleTestData) {
				let e = t.params.roleTestData,
					a = e.contractIdx;
				for (let t = 0; t < ROLE_TEST_UNLOCK_CONTRACT_IDXS.length; t++) ROLE_TEST_UNLOCK_CONTRACT_IDXS[t] == a && mgrGame.contractUnlock(a);
				let i = db.get_role_contract_db(a);
				mgrRoleTest.markRoleTested(i.roleId), mgrRoleTest.addRecordTestCount(TEST_ROLE_ID), BaseFacade.mGoal.commit(ACTION_ID.ROLE_TEST, 1), this.buttonOk.node.visible = !1, this.buttonAdv.node.visible = !1, PanelRoleTestOver.openPanel(this.close.bind(this), {
					roleTestData: e
				}), PanelDialogCat.tryOpenPanel(4)
			} else "role_test_answer" == t.advName && (mgrRoleTest.addRecordAdTest(TEST_ROLE_ID), this.refreshTestAnswerState())
		}
		init3D() {
			this.createScene3DEffect()
		}
		clickBox(t) {
			if (this.bAction) return;
			if (this.colorIdArr.length >= 6) return;
			this.bAction = !0;
			let e = t;
			if (!db.get_role_test_color(e)) return;
			let a = this.spines[this.selectIndex];
			a && a.play("open", !1);
			let i = this["button" + (this.selectIndex + 1).toString()],
				s = this["nodePaticel" + (this.colorIdArr.length + 1).toString()],
				n = this.node2Camera(i.node),
				o = this.node2Camera(s),
				r = `${150+t}`;
			Timer.callLater(.3, () => {
				for (let t = 1; t <= 2; t++) {
					let t = this.getEffect(r);
					t.setWorldPosition(n), t.callIfLoaded(() => {
						let e = this,
							a = {
								x: t.resNode.transform.localPositionX,
								y: t.resNode.transform.localPositionY,
								pos: (e, a) => {
									t.resNode.transform.localPositionX = e, t.resNode.transform.localPositionY = a
								},
								get destroyed() {
									return e.destroyed
								}
							};
						cc.tween(a).then(cc.jumpTo(.5, o.x, o.y, -1 * Mathf.random(1, 2), 1)).start()
					}), t.play()
				}
			}, this), Timer.callLater(.8, () => {
				let t = this.spines[this.selectIndex];
				t && t.play("idle1"), this.colorIdArr.push(e), cc.tween(this.barMask, !0).to(.3, {
					progress: this.colorIdArr.length / 6
				}).start(), this.refresBtns(), this.bAction = !1
			}, this)
		}
		refresBtns() {
			this.needFill.visible = this.colorIdArr.length < 6;
			let t = 1 == db.cop.b_show_adv_cost;
			this.buttonOk.node.visible = this.colorIdArr.length >= 6 && t, this.buttonAdv.node.visible = this.colorIdArr.length >= 6 && !t, this.colorIdArr.length >= 6 && (GameStatistics.statisCommonEvent(9302), mgrAdv.statisVideoShow("role_test"))
		}
		checkColorEggMianJu() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.MIAN_JU, EGGS_STEP.THIRD) || (this.buttonColorEggMianJu.node.visible = !1)
		}
		on_click_buttonOk() {
			mgrAlert.openPanelLoading(UI_NAME.PanelAdvCostDialog, {
				desc: mgrI18n.getText("panelRoleTest.8"),
				costText: mgrI18n.getText("panelRoleTest.9"),
				advText: mgrI18n.getText("panelRoleTest.10"),
				fOnClickCost: () => {
					let t = mgrRoleTest.finishTest(this.colorIdArr);
					if (t)
						if (BaseFacade.mItem.subItem("1000", 300, null)) {
							GameStatistics.statisCommonEvent(2555, 1);
							let e = t.contractIdx;
							for (let t = 0; t < ROLE_TEST_UNLOCK_CONTRACT_IDXS.length; t++) ROLE_TEST_UNLOCK_CONTRACT_IDXS[t] == e && mgrGame.contractUnlock(e);
							let a = db.get_role_contract_db(e);
							mgrRoleTest.markRoleTested(a.roleId), mgrRoleTest.addRecordTestCount(TEST_ROLE_ID), BaseFacade.mGoal.commit(ACTION_ID.ROLE_TEST, 1), this.buttonOk.node.visible = !1, this.buttonAdv.node.visible = !1, PanelRoleTestOver.openPanel(this.close.bind(this), {
								roleTestData: t
							}), PanelDialogCat.tryOpenPanel(4)
						} else GameStatistics.statisCommonEvent(2555, 0), mgrAlert.alertNotEnough("1000");
					else _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "缘分测试失败，请退出后重新开始测试")
				},
				fOnClickAdv: this.on_click_buttonAdv.bind(this)
			})
		}
		on_click_buttonAdv() {
			let t = mgrRoleTest.finishTest(this.colorIdArr);
			t ? (mgrAdv.statisVideoClick("role_test"), mgrAdv.dispatchAdv("role_test", {
				roleTestData: t
			}, !0)) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "缘分测试失败，请退出后重新开始测试")
		}
		on_click_buttonClose() {
			mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_button1() {
			this.selectIndex = 0, this.clickBox(4)
		}
		on_click_button2() {
			this.selectIndex = 1, this.clickBox(2)
		}
		on_click_button3() {
			this.selectIndex = 2, this.clickBox(1)
		}
		on_click_button4() {
			this.selectIndex = 3, this.clickBox(3)
		}
		on_click_button5() {
			this.selectIndex = 4, this.clickBox(0)
		}
		on_click_buttonPreDestination() {
			mgrAlert.openPanelLoading(UI_NAME.PanelRolePreDestination)
		}
		on_click_buttonAdAnswer() {
			mgrAdv.statisVideoClick("role_test_answer"), mgrAdv.dispatchAdv("role_test_answer", {}, !0)
		}
		on_click_buttonColorEggMianJu() {
			this.buttonColorEggMianJu.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggMianJu.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggMianJu.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.mian_ju)
		}
	}
	class schoolYearbookItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "res/prefab/schoolYearbookItem.json", this._exportNodeInfo = {
				cc_imageBg: "Laya.Image",
				cc_nodeIcon: "Laya.Sprite",
				cc_imageIcon: "Laya.Image",
				cc_imageLevel: "Laya.Sprite",
				cc_spriteNotUnlock: "Laya.Sprite",
				cc_labelState: "Laya.Label",
				cc_buttonUnlock: "UIButton",
				cc_buttonAdvFinishStand: "UIButton",
				cc_buttonAdvStudy: "UIButton"
			}
		}
		onCreateComplete() {}
		refreshItem(t) {
			if (!this.callable) return this.safeCall(this.refreshItem, t);
			this.roleId = t, this.refreshUi()
		}
		refreshUi() {
			this.callable || this.safeCall(this.refreshUi);
			let t = this.roleId,
				e = db.get_class_room_role_db(t);
			if (!e) return;
			let a = mgrClassRoom.getRoleState(t),
				i = e.iconUrl;
			this.imageIcon.skin = i;
			let s = a != CLASS_ROLE_STATE.LOCKED;
			this.spriteNotUnlock.visible = !s, this.imageIcon.gray = !s;
			let n = mgrClassRoom.getRoleLevel(t),
				o = db.get_class_room_level_db(n);
			this.imageLevel.visible = !1, o && o.icon && (this.imageLevel.visible = !0, mgrI18n.trySetI18nImage(this.imageLevel, "icon_class_level_02.png")), this.buttonUnlock.node.visible = !1, this.buttonAdvFinishStand.node.visible = !1, this.buttonAdvStudy.node.visible = !1;
			let r = "",
				l = "#ffffff";
			switch (a) {
				case CLASS_ROLE_STATE.LOCKED:
					r = mgrI18n.getText("schoolYearbookItem.8"), l = "#c35488", this.buttonUnlock.node.visible = !0;
					break;
				case CLASS_ROLE_STATE.WAIT:
					r = mgrI18n.getText("schoolYearbookItem.9"), l = "#0581b5", this.buttonAdvStudy.node.visible = !0;
					break;
				case CLASS_ROLE_STATE.STUDY:
					r = mgrI18n.getText("schoolYearbookItem.10"), l = "#0581b5";
					break;
				case CLASS_ROLE_STATE.STAND:
					r = mgrI18n.getText("schoolYearbookItem.4"), l = "#c35488", this.buttonAdvFinishStand.node.visible = !0;
					break;
				case CLASS_ROLE_STATE.FREE:
					r = mgrI18n.getText("schoolYearbookItem.9"), l = "#0581b5", this.buttonAdvStudy.node.visible = mgrAdv.checkActive("class_role_summon")
			}
			this.labelState.text = r, this.labelState.color = l
		}
		on_click_buttonUnlock() {
			let t = db.get_class_room_role_db(this.roleId);
			if (!t) return;
			switch (t.id) {
				case 1:
					GameStatistics.statisCommonEvent(2531, 0);
					break;
				case 3:
					GameStatistics.statisCommonEvent(2532, 0);
					break;
				case 4:
					GameStatistics.statisCommonEvent(2533, 0)
			}
			if (!t.unlockQuestId || BaseFacade.mQuest.isCommitable(t.unlockQuestId)) return void mgrAlert.openPanelLoading(UI_NAME.PanelClassReward, {
				roleId: t.id,
				bFromBook: !0
			});
			let e = db.get_quest_db(t.unlockQuestId);
			if (e.jump > 0) {
				let a = mgrI18n.getText(t.tlite2),
					i = mgrI18n.getText(e.tlite),
					s = String.format(mgrI18n.getText("schoolYearbookItem.1"), a) + i;
				mgrAlert.alertDialog(s, mgrI18n.getText("schoolYearbookItem.2"), () => {
					switch (t.id) {
						case 1:
							GameStatistics.statisCommonEvent(2531, 1);
							break;
						case 3:
							GameStatistics.statisCommonEvent(2532, 1);
							break;
						case 4:
							GameStatistics.statisCommonEvent(2533, 1)
					}
					_G.sendMsg("JUMP_PANEL", e.jump)
				}, () => {})
			}
		}
		on_click_buttonAdvFinishStand() {
			let t = db.get_class_room_role_db(this.roleId);
			t && (mgrAdv.statisVideoClick("class_role_leave"), mgrAdv.dispatchAdv("class_role_leave", {
				roleId: t.id
			}, !0))
		}
		on_click_buttonAdvStudy() {
			let t = db.get_class_room_role_db(this.roleId);
			if (!t) return;
			let e = mgrClassRoom.getRoleState(t.id);
			e == CLASS_ROLE_STATE.WAIT ? (mgrAdv.statisVideoClick("class_role_enter"), mgrAdv.dispatchAdv("class_role_enter", {}, !0)) : e == CLASS_ROLE_STATE.FREE && (mgrAdv.statisVideoClick("class_role_summon"), mgrAdv.dispatchAdv("class_role_summon", {
				roleId: t.id
			}, !0))
		}
	}
	class PanelSchoolYearbook extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelSchoolYearbook.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_scrollView: "ReuseScrollList",
				cc_labelLeft: "Laya.Label",
				cc_labelRight: "Laya.Label",
				cc_buttonPre: "UIButton",
				cc_buttonNext: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.roleIds = [], this.selectedIdx = 0, this.instOrBanner = new AdvInstOrBanner("", "banner_shool_year_book"), this.bNotFadeIn = !1
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteBg, "pnl_school_yearbook_03.png"), this.initUi(), this.registerMsg({
				JUMP_PANEL: this.onMsgJumpPanel.bind(this),
				CLASS_ROLE_LEVEL_CHANGE: this.onMsgClassRoleLevelChange.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.instOrBanner.dispose(), this.scrollView && this.scrollView.clearAllItems(), this.stopProcMsg(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgJumpPanel() {
			this.close()
		}
		onMsgClassRoleLevelChange() {
			this.bNotFadeIn = !0, this.selectIdx(this.selectedIdx)
		}
		initUi() {
			this.roleIds = [];
			let t = db.get_class_room_role_db_map();
			for (let e in t) {
				let a = t[e];
				a && this.roleIds.push(a.id)
			}
			this.scrollView.onItemCreate = function() {
				let t = new schoolYearbookItem;
				return t.create(), t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}, this.scrollView.onItemChange = ((t, e) => {
				t.refreshItem(this.roleIds[e])
			}), this.selectIdx(1), this.buttonPre.node.visible = !1, this.buttonNext.node.visible = !1, mgrAdv.checkActive("class_role_summon") && mgrAdv.statisVideoShow("class_role_summon"), Timer.callLoop(1, t => {
				this.destroyed ? t.stop() : this.scrollView && this.scrollView.foreachItems(t => {
					t && t.refreshUi()
				})
			}, this)
		}
		selectIdx(t) {
			this.selectedIdx = t, this.scrollView.updateList(this.roleIds.length);
			let e = 0;
			for (let t = 0; t < this.roleIds.length; t++) {
				let a = db.get_class_room_role_db(this.roleIds[t]);
				!a || a.unlockQuestId && !BaseFacade.mQuest.isCommitable(a.unlockQuestId) || e++
			}
			this.labelLeft.text = e.toString(), this.labelRight.text = this.roleIds.length.toString()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonPre() {
			1 != this.selectedIdx ? this.selectIdx(this.selectedIdx - 1) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelSchoolYearbook.1"))
		}
		on_click_buttonNext() {
			this.selectedIdx != Math.ceil(this.roleIds.length / 9) ? this.selectIdx(this.selectedIdx + 1) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelSchoolYearbook.2"))
		}
	}
	class PanelSetting extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelSetting.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_buttonDebug: "UIButton",
				cc_version: "Laya.Label",
				cc_btnMusic: "UIToggle",
				cc_spriteMusicoff: "Laya.Sprite",
				cc_spriteMusicOn: "Laya.Sprite",
				cc_btnSound: "UIToggle",
				cc_spriteSoundOff: "Laya.Sprite",
				cc_spriteSoundOn: "Laya.Sprite",
				cc_videoNode: "Laya.Sprite",
				cc_btnVideo: "UIToggle",
				cc_spriteVoidOff: "Laya.Sprite",
				cc_spriteVoidOn: "Laya.Sprite",
				cc_inputNode: "Laya.Sprite",
				cc_spriteInput: "Laya.TextInput",
				cc_buttonCdkey: "UIButton",
				cc_buttonLanguage: "UIButton"
			}, this._instOrBanner = new AdvInstOrBanner("", ""), this._debugCount = 0
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteMusicOn, "pnl_common_04.png"), mgrI18n.trySetI18nImage(this.spriteMusicoff, "pnl_common_03.png"), mgrI18n.trySetI18nImage(this.spriteSoundOn, "pnl_common_04.png"), mgrI18n.trySetI18nImage(this.spriteSoundOff, "pnl_common_03.png"), mgrI18n.trySetI18nImage(this.spriteVoidOn, "pnl_common_04.png"), mgrI18n.trySetI18nImage(this.spriteVoidOff, "pnl_common_03.png"), this.buttonDebug.clickDelta = 0, this.btnMusic.isChecked = mgrSound.musicEnabled, this.btnSound.isChecked = mgrSound.soundEnabled, this.btnVideo.isChecked = mgrSdk.isAutoRecordVideo, this.version.text = _G.GAME_VERSION, UiHelper.addUIToggleClick(this.btnMusic.node, t => {
				mgrSound.musicEnabled = t
			}, ""), UiHelper.addUIToggleClick(this.btnSound.node, t => {
				mgrSound.soundEnabled = t
			}, ""), UiHelper.addUIToggleClick(this.btnVideo.node, t => {
				mgrSdk.setAutoRecordVideo(t)
			}, ""), this.onMsgCopChange(), this.registerMsg({
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this._instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this._instOrBanner.onFocus(t)
		}
		onMsgCopChange() {
			this.videoNode.setVisible(db.cop.isSupportRecordShare), this.inputNode.visible = !!mgrSdk.getSubCop("b_cdkey_enabled")
		}
		on_click_btnMusic() {}
		on_click_btnSound() {}
		on_click_btnVideo() {}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonDebug() {
			if (this._debugCount++, 20 == this._debugCount) {
				let t = debug_ui.create_input("", 10, 100, 100);
				this.addChild(t);
				let e = debug_ui.create_btn("OK", this, () => {
					~t.text.indexOf("ul_" + (new Date).getHours()) && (mgrAlert.openPanelLoading(DebugMain), this.close())
				});
				this.addChild(e).pos(10, 180, !0)
			}
		}
		on_click_buttonCdkey() {
			this.spriteInput.text && mgrSdk.sendCDK(this.spriteInput.text)
		}
		on_click_buttonLanguage() {
			mgrAlert.openPanelLoading(UI_NAME.PanelLanguageDialog)
		}
	}
	class PanelShoe extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelShoe.json", this._exportNodeInfo = {
				cc_nodeSpine: "Laya.Box",
				cc_spritePieces: "Laya.Sprite",
				cc_piece1: "Laya.Sprite",
				cc_piece2: "Laya.Sprite",
				cc_piece3: "Laya.Sprite",
				cc_piece4: "Laya.Sprite",
				cc_buttonContract: "UIButton",
				cc_spriteDialog: "Laya.Sprite",
				cc_textDialog: "Laya.Text",
				cc_nodeBtn: "Laya.Sprite",
				cc_buttonFind: "UIButton",
				cc_topCenterNode: "Laya.Box",
				cc_titleText1: "Laya.Text",
				cc_titleText2: "Laya.Text",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_shoe")
		}
		buildUi() {
			this.textDialog.text = mgrI18n.getText("panelShoe.2"), this.titleText1.text = mgrI18n.getText("panelShoe.5"), this.titleText2.text = mgrI18n.getText("panelShoe.6");
			let t = _G.poolManager.get(Spine, db.SPINE_DB_ID.cartoon);
			this.spine = t, t.setParent(this.nodeSpine), t.play("idle", !1);
			let e = this.buttonClose.node.x;
			this.buttonClose.node.x -= 200, cc.tween(this.buttonClose.node).to(.3, {
				x: e
			}, cc.OPTION.BACK_OUT).start();
			let a = this.topCenterNode.y;
			this.topCenterNode.y -= 200, cc.tween(this.topCenterNode).to(.3, {
				y: a
			}, cc.OPTION.BACK_OUT).start(), this.nodeBtn.scaleY = 0;
			let i = this.spritePieces.x;
			this.spritePieces.x += 500, cc.tween(this.spritePieces).delay(5).to(.3, {
				x: i
			}, cc.OPTION.BACK_OUT).start(), cc.tween(this.nodeBtn).delay(5).to(.3, {
				scaleY: 1
			}).call(() => {
				UiHelper.playBreathe(this.buttonFind.node)
			}).start(), this.spriteDialog.scale(0, 0, !0), cc.tween(this.spriteDialog).delay(5).to(.4, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start();
			let s = !0;
			for (let t = 1; t <= 4; t++) mgrShoe.checkPieceUnlock(t - 1) ? this["piece" + t].visible = !1 : s = !1;
			this.spritePieces.visible = !s, mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13007), this.registerMsg({
				UNLOCK_SHOE_PIECES: this.onMsgUnlockShoePieces.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.spine && _G.poolManager.put(this.spine), GameStatistics.statisOnStageEnd(13007), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgUnlockShoePieces() {
			let t = !0;
			for (let e = 1; e <= 4; e++) mgrShoe.checkPieceUnlock(e - 1) ? this["piece" + e].visible = !1 : t = !1;
			this.spritePieces.visible = !t
		}
		on_click_buttonContract() {
			mgrAlert.alertDialog(mgrI18n.getText("panelShoe.7"))
		}
		on_click_buttonFind() {
			GameStatistics.statisCommonEvent(2603), mgrAlert.openPanelLoading(UI_NAME.PanelShoeSelect), UiHelper.playBreathe(this.buttonFind.node)
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), this.close()
		}
	}
	class ShoeColorEgg extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/ShoeColorEgg.json", this._exportNodeInfo = {
				cc_spriteEgg: "Laya.Image",
				cc_buttonGo: "UIButton",
				cc_buttonGet: "UIButton",
				cc_buttonAdvGet: "UIButton",
				cc_nodeDesc: "Laya.Sprite",
				cc_labelDesc: "Laya.Label",
				cc_nodeTime: "Laya.Sprite",
				cc_spriteBar: "UIBarMask",
				cc_labelTime: "Laya.Label",
				cc_nodeTip: "Laya.Sprite",
				cc_spriteTip: "Laya.Image"
			}, this.create()
		}
		onCreateComplete() {
			this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				[BASE_MSG.QUEST_STATE_CHANGE]: this.onMsgQuestState.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			Laya.timer.clear(this, this.updateTime), this.stopProcMsg(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"get_shoe_color_egg" == t.advName && t.params == this.questId && (GameStatistics.statisCommonEvent(2606 + parseInt(this.questId) - 6010, 1), mgrColorEggs.commit(this.questId, !0))
		}
		onMsgQuestState(t) {
			t.questDb.id == this.questId && this.fillData(this.questId)
		}
		fillData(t) {
			if (!this.callable) return this.safeCall(this.fillData, t);
			Laya.timer.clear(this, this.updateTime), this.questId = t, this.stepIdx = -1;
			let e = db.get_color_egg_db(t);
			switch (mgrColorEggs.getState(t)) {
				case EGGS_STATE.NEW:
					this.buttonGet.node.visible = !1, this.buttonGo.node.visible = !1, this.buttonAdvGet.node.visible = !1, this.nodeDesc.visible = !1, this.nodeTime.visible = !1, this.nodeTip.visible = !1;
					break;
				case EGGS_STATE.OPENED:
					let a = BaseFacade.mQuest.getCurValue(t);
					this.stepIdx = a, a < 3 ? (this.buttonGet.node.visible = !1, this.buttonGo.node.visible = !0, this.buttonAdvGet.node.visible = !1, this.nodeDesc.visible = !0, this.nodeTime.visible = !1, this.labelDesc.text = mgrI18n.getText(`${e.tlite}.${a+1}`), this.nodeTip.visible = !0, this.nodeTip.scale(0, 0, !0), this.spriteTip.skin = e.icon, cc.tween(this.nodeTip, !0).delay(Mathf.random(50, 60) / 100).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()) : (this.spriteEgg.skin = "res/ui/pnl_shoe_color_eggs/egg_opened.png", this.buttonGet.node.visible = !1, this.buttonGo.node.visible = !1, this.buttonAdvGet.node.visible = !0, this.nodeDesc.visible = !1, this.nodeTime.visible = !0, this.nodeTip.visible = !1, Laya.timer.loop(1e3, this, this.updateTime), this.updateTime());
					break;
				case EGGS_STATE.AWARD:
					this.spriteEgg.skin = "res/ui/pnl_shoe_color_eggs/egg_opened.png", this.buttonGet.node.visible = !0, this.buttonGo.node.visible = !1, this.buttonAdvGet.node.visible = !1, this.nodeDesc.visible = !1, this.nodeTime.visible = !1, this.nodeTip.visible = !1;
					break;
				case EGGS_STATE.FINISHED:
					this.spriteEgg.skin = "res/ui/pnl_shoe_color_eggs/egg_opened.png", this.buttonGet.node.visible = !1, this.buttonGo.node.visible = !1, this.buttonAdvGet.node.visible = !1, this.nodeDesc.visible = !1, this.nodeTime.visible = !1, this.nodeTip.visible = !1, this.spriteEgg.gray = !0
			}
		}
		updateTime() {
			let t = mgrColorEggs.getTotalTime(this.questId),
				e = mgrColorEggs.getLeftTime(this.questId);
			this.labelTime.text = Tools.formatSimpleTime(e) + mgrI18n.getText("shoeColorEgg.2"), this.spriteBar.progress = Mathf.clamp01(e / t), e <= 0 && Timer.callLater(.5, () => {
				this.fillData(this.questId)
			}, this)
		}
		on_click_buttonGo() {
			GameStatistics.statisCommonEvent(2606 + parseInt(this.questId) - 6010, 0), mgrColorEggs.tryJumpToColorEgg(this.questId, this.stepIdx)
		}
		on_click_buttonGet() {
			GameStatistics.statisCommonEvent(2606 + parseInt(this.questId) - 6010, 2), mgrColorEggs.commit(this.questId)
		}
		on_click_buttonAdvGet() {
			mgrAdv.statisVideoClick("get_shoe_color_egg"), mgrAdv.dispatchAdv("get_shoe_color_egg", this.questId, !0)
		}
	}
	class PanelShoeColorEggs extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelShoeColorEggs.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_nodeNpcEffect: "Laya.Box",
				cc_spriteTitle: "Laya.Sprite",
				cc_nodeEgg0: "Laya.Sprite",
				cc_nodeEgg1: "Laya.Sprite",
				cc_nodeEgg2: "Laya.Sprite",
				cc_buttonUnlockEggs: "UIButton",
				cc_eggsText: "Laya.Text",
				cc_btnOpen: "Laya.Sprite",
				cc_openText: "Laya.Text",
				cc_buttonClose: "UIButton"
			}, this.eggs = []
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteTitle, "pnl_shoe_color_eggs_01.png"), this.eggsText.text = mgrI18n.getText("panelShoeColorEggs.4"), this.openText.text = mgrI18n.getText("panelShoeColorEggs.5"), mgrAdv.statisVideoShow("get_shoe_color_egg"), mgrColorEggs.isShoeColorEggEnable() ? this.buttonUnlockEggs.node.visible = !1 : UiHelper.playBreathe(this.btnOpen);
			let t = mgrColorEggs.getAllQuest(EGGS_TYPE.SHOE);
			for (let e = 0; e < t.length; e++) {
				let a = new ShoeColorEgg;
				a.setParent(this["nodeEgg" + e]), a.fillData(t[e]), this.eggs.push(a)
			}
			let e = this.addEffect("201");
			e.followTarget(this.nodeNpcEffect, this.cameraEffect), e.play()
		}
		dispose() {
			for (let t = 0; t < this.eggs.length; t++) this.eggs[t].dispose();
			super.dispose()
		}
		on_click_buttonUnlockEggs() {
			GameStatistics.statisCommonEvent(2605), this.buttonUnlockEggs.interactable = !1;
			let t = [COLOR_EGGS_QUEST.HUAI_BIAO, COLOR_EGGS_QUEST.MIAN_JU, COLOR_EGGS_QUEST.MAN_DUO_LA];
			for (let e = 0; e < t.length; e++) mgrColorEggs.accept(t[e]);
			cc.tween(this.buttonUnlockEggs.node).to(.4, cc.PROP.ALPHA0).hide().start();
			for (let t = 0; t < 3; t++) UiHelper.playRotShake(this["nodeEgg" + t], Mathf.random(40, 60) / 100)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelShoeColorEggTip extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelShoeColorEggTip.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_buttonGo: "UIButton",
				cc_nodeDesc: "Laya.Sprite",
				cc_nodeAnim: "Laya.Sprite",
				cc_spriteImage: "Laya.Image"
			}, this.btouch = !1
		}
		buildUi() {
			let t = this.context.questId,
				e = this.context.stepIdx,
				a = db.get_color_egg_db(t);
			this.spriteImage.skin = `res/texture/color_eggs/${a.colorEggImage[e-1]}.png`
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonGo() {
			if (this.context) {
				if (this.btouch) return;
				this.btouch = !0, mgrColorEggs.tryJumpToColorEgg(this.context.questId, this.context.stepIdx)
			}
		}
	}
	const ZORDER = {
		1: 10,
		0: 20,
		2: 30,
		3: 40,
		4: 50
	};
	class ShoeAvatar extends Laya.Sprite {
		constructor() {
			super(), this.curWearParts = {}, this.partViews = {}
		}
		setFoot(t, e) {
			let a = t.slice();
			a.unshift("100001"), this.setParts(0, a), this.setParts(4, e)
		}
		setSole(t) {
			this.setParts(1, t)
		}
		setVamp(t) {
			this.setParts(2, t)
		}
		setDecoration(t) {
			this.setParts(3, t)
		}
		setParts(t, e) {
			this.clearType(t);
			for (let a = 0; a < e.length; a++) this.addPart(t, e[a]);
			this.curWearParts[t] = e
		}
		clearType(t) {
			delete this.curWearParts[t];
			let e = this.partViews[t];
			if (e)
				for (let t = 0; t < e.length; t++) e[t].destroy();
			this.partViews[t] = []
		}
		addPart(t, e) {
			let a, i = db.get_shoe_part_db(e),
				s = db.get_shoe_config_data(e).layoutList,
				n = this.partViews[t];
			for (let e = 0; e < i.viewList.length; e++) {
				let r = i.viewList[e];
				if (!r) continue;
				r.endsWith(".png") ? ((a = new Laya.Image).anchorX = .5, a.anchorY = .5, a.skin = r) : a = new SpineNode(r), this.addChild(a);
				let l = s[e];
				a.pos(l.pos.x, l.pos.y, !0).scale(l.scl, l.scl, !0).rotation = l.rot;
				var o = i.zOrderList[e] || ZORDER[t] || 0;
				a.zOrder = o, n.push(a)
			}
		}
		playTrySucAnim(t) {
			let e = this.partViews[0].concat(this.partViews[4]);
			for (let i = 0; i < e.length; i++) {
				let s = e[i],
					n = s.y;
				s.y = n - 1e3;
				var a = cc.tween(s).to(1.5, {
					y: n
				}, cc.OPTION.SINE_IN_OUT);
				t && (a = a.call(t), t = null), a.start()
			}
		}
		playTryFailAnim(t) {
			let e = this.partViews[0].concat(this.partViews[4]);
			for (let i = 0; i < e.length; i++) {
				let s = e[i],
					n = s.y;
				s.y = n - 1e3;
				var a = cc.tween(s).to(1.5, {
					y: n - 250
				}, cc.OPTION.SINE_IN_OUT);
				t && (a = a.call(t), t = null), a.start()
			}
		}
	}
	class SimpleRichText extends Laya.Sprite {
		constructor() {
			super(...arguments), this.textPools = [], this.usingTexts = [], this._text = "", this.space = 0, this.lineHeight = 2, this.fontSize = 20, this.color = "#ffffff", this.strokeColor = "", this.stroke = 2, this.align = "left"
		}
		clearText() {
			return this._text = "", this.recoverAll(), this
		}
		setLineHeight(t) {
			return this.lineHeight = t, this
		}
		get text() {
			return this._text
		}
		set text(t) {
			this.setText(t)
		}
		setText(t) {
			return this._text = "", this.addText(t), this.build(), this
		}
		addText(t, e = !1) {
			return this._text += t, e && this.callLater(this.build), this
		}
		build() {
			this.buildText(this._text)
		}
		buildText(t) {
			this.recoverAll();
			let e = this._parseText(t);
			for (let t = 0; t < e.length; t++) {
				const a = e[t];
				let i = this._getTextFromPool();
				a.font && (i.font = a.font), i.fontSize = a.fontSize, a.color && (i.color = a.color), i.text = a.text, i.bold = a.bold, a.strokeColor ? (i.strokeColor = a.strokeColor, i.stroke = this.stroke) : i.stroke = 0, this.addChild(i), this.usingTexts.push(i)
			}
			Laya.timer.callLater(this, this._refreshLayout, [this.usingTexts, e])
		}
		_getTextFromPool() {
			return this.textPools.length > 0 ? this.textPools.shift() : new Laya.Text
		}
		recoverAll() {
			for (let t = 0; t < this.usingTexts.length; t++) {
				const e = this.usingTexts[t];
				e.removeSelf(), this.textPools.push(e)
			}
			this.usingTexts = []
		}
		_parseText(t) {
			let e = t.split(/<\/>/),
				a = [];
			for (let t = 0; t < e.length; t++) {
				const i = e[t];
				let s = /color:(\S{7})/gim,
					n = /font:([^>]+)/gim,
					o = /fontSize:([0-9]+)/gim,
					r = /bold:([0-1]+)/gim,
					l = /strokeColor:(\S+)/gim,
					c = /<.*>([\s\S]+)/gim.exec(i),
					h = s.exec(i),
					d = n.exec(i),
					_ = o.exec(i),
					g = r.exec(i),
					u = l.exec(i);
				if (!c) {
					1 == e.length && a.push({
						text: i,
						fontSize: this.fontSize,
						color: this.color,
						bold: !1
					});
					continue
				}
				let m = h ? h[1] : this.color,
					p = d && d[1],
					S = _ ? parseInt(_[1]) : this.fontSize,
					b = g && "1" == g[1],
					L = u ? u[1] : this.strokeColor;
				if (c[1].indexOf("\n") >= 0) {
					let t = c[1].split("\n");
					for (let e = 0; e < t.length; e++) a.push({
						text: t[e],
						font: p,
						fontSize: S,
						color: m,
						bold: b,
						strokeColor: L,
						newLine: e > 0
					})
				} else a.push({
					text: c[1],
					font: p,
					fontSize: S,
					color: m,
					bold: b,
					strokeColor: L
				})
			}
			return a
		}
		_refreshLayout(t, e) {
			if (0 == t.length) return;
			let a = this.width;
			a || (a = 1e6);
			let i = 0,
				s = 0,
				n = 0,
				o = 0,
				r = [0],
				l = [this.lineHeight];
			for (let c = 0; c < t.length; c++) {
				let h = t[c];
				(i += h.width + this.space) > a && c != n || e[c].newLine ? (s = l[o] + this.lineHeight, n = c, r.push(n), e[c].newLine = !1, o++, l.push(0), c--, i = 0) : l[o] = Math.max(l[o], s + h.height)
			}
			this._resetPosition(t, r, l)
		}
		_resetPosition(t, e, a) {
			for (let i = 0; i < e.length; i++) {
				let s = e[i + 1];
				s || (s = t.length), this._resetLinePostion(t, e[i], s, a[i])
			}
		}
		_resetLinePostion(t, e, a, i) {
			let s = 0;
			if ("center" == this.align) {
				let i = -this.space;
				for (let s = e; s < a; s++) i += t[s].width + this.space;
				s = -i / 2
			}
			for (let o = e; o < a; o++) {
				var n = t[o];
				n.pos(s, i, !0), n.pivotY = n.height, s += n.width + this.space
			}
		}
		onDestroy() {
			for (let t = this.textPools.length - 1; t >= 0; t--) this.textPools[t].destroy();
			for (let t = this.usingTexts.length - 1; t >= 0; t--) this.usingTexts[t].destroy();
			this.textPools.length = 0, this.usingTexts.length = 0, super.onDestroy()
		}
		static parseRich(t, e, a, i, s, n) {
			let o = "",
				r = t;
			for (;;) {
				let t = r.search(s),
					l = r.search(n);
				if (-1 == t) return o += `<color:${e[0]} fontSize:${i[0]} font: ${a[0]}>${r}</>`;
				if (-1 == l) return o += `<color:${e[1]} fontSize:${i[1]} font: ${a[1]}>${r}</>`;
				if (0 == l && t > 0) {
					let s = r.slice(0, t);
					o += `<color:${e[0]} fontSize:${i[0]} font: ${a[0]}>${s}</>`, r = r.substr(t, r.length)
				} else if (l > 0 && 0 == t) {
					let t = r.slice(0, l);
					o += `<color:${e[1]} fontSize:${i[1]} font: ${a[1]}>${t}</>`, r = r.substr(l, r.length)
				}
			}
		}
	}
	const ST_NONE = "None",
		EMPTY_FUN$1 = function() {};
	class SimpleFSM {
		constructor() {
			this._isSwitchingState = !1, this._currentStateName = ST_NONE, this._nextStateName = ST_NONE, this._states = {
				[ST_NONE]: {
					leave: EMPTY_FUN$1,
					execute: EMPTY_FUN$1,
					enter: EMPTY_FUN$1
				}
			}
		}
		registerState(t, e, a, i, s) {
			null != this._states[t] && console.warn("警告] FSMObject.registerState state override!", t), a = null == a ? EMPTY_FUN$1 : a.bind(e), i = null == i ? EMPTY_FUN$1 : i.bind(e), s = null == s ? EMPTY_FUN$1 : s.bind(e), this._states[t] = {
				enter: a,
				execute: i,
				leave: s
			}
		}
		removeState(t) {
			this._states[t] = null
		}
		update(t) {
			if (this._states) {
				if (this._nextStateName != this._currentStateName) {
					if (this._isSwitchingState = !0, this._states[this._currentStateName].leave(), this._isSwitchingState = !1, !this._states) return;
					if (this._lastStateName = this._currentStateName, this._currentStateName = this._nextStateName, this._states[this._currentStateName].enter(this._stateData), this._stateData = null, !this._states) return
				}
				this._currentStateName == this._nextStateName && this._states[this._currentStateName].execute(t)
			}
		}
		setNextState(t, e) {
			this._isSwitchingState ? console.warn(`FSM.setNextState [${this._nextStateName}] is busy.`) : this._states[t] ? (this._nextStateName = t, this._stateData = e) : console.warn(`FSM.setNextState [${t}] is not exist.`)
		}
		getState() {
			return this._currentStateName
		}
		getLastState() {
			return this._lastStateName
		}
		dispose() {
			this._states = null
		}
	}
	class PanelShoeSelect extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelShoeSelect.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_spriteStage: "Laya.Sprite",
				cc_anchorCenter: "Laya.Box",
				cc_textName1: "Laya.Text",
				cc_textName2: "Laya.Text",
				cc_templetePartItem: "Laya.Sprite",
				cc_nodeSelect: "Laya.Sprite",
				cc_nodeLayout: "Laya.Image",
				cc_layoutShoe: "UIHVLayout",
				cc_nodeInfo: "Laya.Image",
				cc_nodeTry: "Laya.Sprite",
				cc_buttonAdvTry: "UIButton",
				cc_advTryText: "Laya.Text",
				cc_buttonTry: "UIButton",
				cc_tryText: "Laya.Text",
				cc_labelTryPrice: "Laya.Label",
				cc_tipText: "Laya.Text",
				cc_nodeResult: "Laya.Sprite",
				cc_spriteResult: "Laya.Sprite",
				cc_labelResult: "Laya.Label",
				cc_nodeFailTip: "Laya.Sprite",
				cc_spriteOkHead: "Laya.Sprite",
				cc_textOkTip: "Laya.Text",
				cc_buttonFailConfirm: "UIButton",
				cc_failText: "Laya.Text",
				cc_buttonClose: "UIButton",
				cc_roleHead: "Laya.Sprite"
			}, this.selectResult = {}, this.shoePartItems = [], this.index = 0
		}
		buildUi() {
			this.advTryText.text = mgrI18n.getText("panelShoeSelect.1"), this.tryText.text = mgrI18n.getText("panelShoeSelect.2"), this.tipText.text = mgrI18n.getText("panelShoeSelect.3"), this.textOkTip.text = mgrI18n.getText("panelShoeSelect.6"), this.failText.text = mgrI18n.getText("panelAdvCostDialog.2"), this.textName1.text = mgrI18n.getText("panelShoe.5"), this.textName2.text = mgrI18n.getText("panelShoe.6"), this.shoeAvatar = new ShoeAvatar, this.anchorCenter.addChild(this.shoeAvatar), this.shoeAvatar.pos(100, -600, !0), this.infoRichText = new SimpleRichText, this.nodeInfo.addChild(this.infoRichText).pos(225, 12, !0), this.infoRichText.stroke = 2, this.infoRichText.strokeColor = "#ffffff", this.infoRichText.align = "center", this.infoRichText.fontSize = 11, this.roleHead.visible = !1, this.nodeSelect.__originY = this.nodeSelect.y, this.nodeSelect.y += 400, this.templetePartItem.visible = !1, this.nodeTry.visible = !1, this.nodeResult.visible = !1, this.nodeFailTip.visible = !1, this.fsm = new SimpleFSM, this.fsm.registerState(0, this, this.enterSelectShoe), this.fsm.registerState(1, this, this.enterTryShoe), this.fsm.registerState(2, this, this.enterTryShoeAnim), this.fsm.registerState(3, this, this.enterTryResult), this.fsm.setNextState(0), Timer.callLoopFrame(1, this.fsm.update.bind(this.fsm), this), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.spineLianZi && this.spineLianZi.dispose(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"try_shoe" == t.advName && (GameStatistics.statisCommonEvent(2614), this.fsm.setNextState(2))
		}
		setSuit() {
			let t = this.index;
			this.index = (t + 1) % 8;
			let e = db.get_shoe_suit_db(t + 1 + "");
			this.shoeAvatar.setSole(e.soleParts), this.shoeAvatar.setVamp(e.vampParts), this.shoeAvatar.setDecoration(e.decorationParts), this.shoeAvatar.setFoot(e.nailParts, e.skirtParts)
		}
		updateList() {
			for (let t = 0; t < this.shoePartItems.length; t++) this.shoePartItems[t].setData(this.curShoePartType, this.datas[this.curShoePartType][t]);
			switch (this.infoRichText.color = "#ff61dc", this.curShoePartType) {
				case 1:
					this.infoRichText.text = mgrI18n.getText("panelShoeSelect.7");
					break;
				case 2:
					this.infoRichText.text = mgrI18n.getText("panelShoeSelect.8");
					break;
				case 3:
					this.infoRichText.text = mgrI18n.getText("panelShoeSelect.9");
					break;
				case 0:
					this.infoRichText.text = mgrI18n.getText("panelShoeSelect.10")
			}
		}
		onClickPartItem(t) {
			let e = db.get_shoe_suit_db(t.suitId);
			switch (this.selectResult[this.curShoePartType] = t.suitId, this.curShoePartType) {
				case 0:
					GameStatistics.statisCommonEvent(2612, 0), this.roleHead.visible = !0, this.roleHead.loadImage(e.head);
					let a = new Laya.Point(this.roleHead.x, this.roleHead.y),
						i = UiHelper.local2local(t.resNode, this.roleHead.parent);
					this.roleHead.pos(i.x, i.y, !0), this.roleHead.__effect = _G.poolManager.get(Particle, "131"), this.roleHead.__effect.setScale(1.5, 1.5, 1.5), this.roleHead.__effect.setParent(_G.effectScene), this.roleHead.__effect.setLayer(1), this.roleHead.__effect.play(), this.roleHead.__effect.followTarget(this.roleHead, _G.effectCamera), UiHelper.playScaleAndJump(this.roleHead, a, 1, 1, 1, () => {
						this.roleHead.__effect && (_G.poolManager.put(this.roleHead.__effect), this.roleHead.__effect = null)
					}), this.loadShoeResAndflyItemTo(e.nailParts.concat(e.skirtParts), () => {
						this.curShoePartType = 1, this.updateList()
					});
					break;
				case 1:
					GameStatistics.statisCommonEvent(2609, 0), this.loadShoeResAndflyItemTo(e.soleParts, () => {
						this.shoeAvatar.setSole(e.soleParts), this.curShoePartType = 2, this.updateList()
					}, t, e.soleIcon);
					break;
				case 2:
					GameStatistics.statisCommonEvent(2610, 0), this.loadShoeResAndflyItemTo(e.vampParts, () => {
						this.shoeAvatar.setVamp(e.vampParts), this.curShoePartType = 3, this.updateList()
					}, t, e.vampIcon);
					break;
				case 3:
					GameStatistics.statisCommonEvent(2611, 0), this.loadShoeResAndflyItemTo(e.decorationParts, () => {
						this.nodeLayout.visible = !1, this.shoeAvatar.setDecoration(e.decorationParts), this.fsm.setNextState(1)
					}, t, e.decorationIcon)
			}
		}
		loadShoeResAndflyItemTo(t, e, a, i) {
			let s = this.nodeLayout.y,
				n = () => {
					e(), cc.tween(this.nodeLayout, !0).delay(.3).to(.3, {
						y: s
					}, cc.OPTION.SINE_OUT).start()
				};
			(() => {
				cc.tween(this.nodeLayout, !0).delay(.1).to(.3, {
					y: s + 200
				}, cc.OPTION.SINE_OUT).start()
			})(), mgrShoe.openWaitRes(t, () => {
				if (a && i) {
					let t = UiHelper.getSelfGlobalPos(a.resNode),
						e = UiHelper.getSelfGlobalPos(this.shoeAvatar);
					e.y += 650, e.x -= 100, UiHelper.playImageScaleAndJump(i, t, e, null, () => {
						n(), mgrAlert.playParticleEffect("195", e, 2, 1, 1.4)
					})
				} else Timer.callLater(.8, n, this)
			})
		}
		enterSelectShoe() {
			this.datas = mgrShoe.randomShoeSuits(), this.curShoePartType = 0;
			let t = this.datas[this.curShoePartType];
			this.templetePartItem.y = 0;
			for (let e = 0; e < t.length; e++) {
				let t = new ShoeSuitPartItem(this.onClickPartItem.bind(this));
				t.createFromNode(UiHelper.cloneSprite(this.templetePartItem)), t.setParent(this.layoutShoe), this.shoePartItems.push(t)
			}
			this.templetePartItem.visible = !1, this.nodeTry.alpha = 0, this.nodeTry.visible = !1, this.nodeResult.visible = !1, this.nodeFailTip.visible = !1, this.updateList(), cc.tween(this.nodeSelect, !0).delay(.3).to(.3, {
				y: this.nodeSelect.__originY
			}, cc.OPTION.SINE_OUT).start()
		}
		enterTryShoe() {
			cc.tween(this.nodeSelect).to(.3, cc.PROP.ALPHA0).hide().start(), cc.tween(this.nodeTry).show().to(.3, cc.PROP.ALPHA1).start(), mgrAdv.checkActive("try_shoe") ? (mgrAdv.statisVideoShow("try_shoe"), UiHelper.playBreathe(this.buttonAdvTry.node)) : (this.buttonAdvTry.node.visible = !1, this.buttonTry.node.x = 0)
		}
		enterTryShoeAnim() {
			this.buttonClose.node.visible = !1, this.nodeTry.visible = !1, cc.tween(this.nodeTry, !0).to(.3, cc.PROP.ALPHA0).hide().start(), mgrAlert.openResWait(db.get_spine_db(db.SPINE_DB_ID.ui_lianzi).skeletonData, RES_TYPE.BUFFER, () => {
				this.spineLianZi = new SpineNode(db.SPINE_DB_ID.ui_lianzi), this.spineLianZi.play("l1", !1), this.spineLianZi.setStopListener(this, () => {
					this.spineLianZi.play("l2", !1), Timer.callLater(.3, () => {
						let t = this.selectResult[0],
							e = this.selectResult[2] == t && this.selectResult[3] == t,
							a = db.get_shoe_suit_db(t);
						this.shoeAvatar.setFoot(a.nailParts, a.skirtParts), e ? this.shoeAvatar.playTrySucAnim(() => {
							this.fsm.setNextState(3, e)
						}) : this.shoeAvatar.playTryFailAnim(() => {
							this.fsm.setNextState(3, e)
						})
					}, this)
				}, !0)
			})
		}
		enterTryResult(t) {
			let e = db.get_shoe_suit_db(this.selectResult[0]),
				a = t ? "res/ui/pnl_shoe_select/img_yes.png" : "res/ui/pnl_shoe_select/img_no.png";
			this.spriteResult.loadImage(a), this.nodeResult.visible = !0, this.labelResult.alpha = 0, this.labelResult.text = t ? mgrI18n.getText("panelShoeSelect.4") : mgrI18n.getText("panelShoeSelect.5"), cc.tween(this.labelResult).to(.3, cc.PROP.ALPHA1).start(), UiHelper.playStampEffect(this.spriteResult, () => {
				if (GameStatistics.statisCommonEvent(2622, t ? 0 : 1), t) Timer.callLater(.3, () => {
					mgrSdk.stopRecordVideo(), mgrAlert.openPanelLoading(UI_NAME.PanelShoeSelectResult, t, this.close.bind(this))
				}, this);
				else {
					cc.tween(this.nodeResult).to(.1, cc.PROP.ALPHA0).start();
					let t = e.soleParts.concat(e.vampParts).concat(e.decorationParts);
					mgrShoe.openWaitRes(t, () => {
						let t = new ShoeAvatar;
						this.nodeFailTip.addChild(t), t.setSole(e.soleParts), t.setVamp(e.vampParts), t.setDecoration(e.decorationParts), t.pos(230, -30, !0).scale(.6, .6, !0), this.nodeFailTip.visible = !0, this.nodeFailTip.scale(0, 0, !0), this.spriteOkHead.loadImage(e.head), cc.tween(this.nodeFailTip).to(.4, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()
					}), mgrSdk.stopRecordVideo()
				}
			}, .7)
		}
		on_click_buttonClose() {
			if (0 == this.fsm.getState()) switch (this.curShoePartType) {
				case 1:
					GameStatistics.statisCommonEvent(2609, 1);
					break;
				case 2:
					GameStatistics.statisCommonEvent(2610, 1);
					break;
				case 3:
					GameStatistics.statisCommonEvent(2611, 1);
					break;
				case 0:
					GameStatistics.statisCommonEvent(2612, 1)
			}
			this.close()
		}
		on_click_buttonAdvTry() {
			mgrAdv.statisVideoClick("try_shoe"), mgrAdv.dispatchAdv("try_shoe", null, !0)
		}
		on_click_buttonTry() {
			BaseFacade.mItem.subItem("1000", 300, 46) ? (GameStatistics.statisCommonEvent(2613), this.fsm.setNextState(2)) : mgrAlert.alertNotEnough("1000")
		}
		on_click_buttonFailConfirm() {
			mgrAlert.openPanelLoading(UI_NAME.PanelShoeSelectResult, !1, this.close.bind(this))
		}
	}
	class ShoeSuitPartItem extends ViewBase {
		onCreateComplete() {
			this.icon = this.getChild("icon"), UiHelper.addClickEvent(this.resNode, () => {
				this.context && this.context(this)
			})
		}
		setData(t, e) {
			let a = db.get_shoe_suit_db(e);
			switch (t) {
				case 1:
					this.icon.loadImage(a.soleIcon);
					break;
				case 2:
					this.icon.loadImage(a.vampIcon);
					break;
				case 3:
					this.icon.loadImage(a.decorationIcon);
					break;
				case 0:
					this.icon.loadImage(a.head);
					break;
				default:
					console.error("非法鞋子部件", t)
			}
			this.suitId = e
		}
	}
	class ContractAnim extends Laya.Sprite {
		constructor(t) {
			super(), this.oldContractIdx = null, this.bStart = !1, this.context = t
		}
		getResLoader() {
			let t = new ResLoader;
			if (t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHENTI_COME).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.FACE_COME).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI_LC).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI_LC).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI_LC).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHENTI_IDLE).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.FACE_IDLE).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.GEMSTONE_COME).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.GEMSTONE_IDLE).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.GEMSTONE_ZHANSHI).path), t.addModel(db.get_model_db(db.MODEL_DB_ID.shexiangji_come).resPath), t.addModel(db.get_model_db(db.MODEL_DB_ID.come).resPath), t.addModel(db.get_model_db(db.MODEL_DB_ID.wawahe).resPath), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.WAWAHE_COME01).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.WAWAHE_COME02).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.WAWAHE_COME03).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME01).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME02).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME03).path), mgrGame.contractIndex != this.context.nextContract) {
				t.addModel(db.get_model_db(db.MODEL_DB_ID.shexiangji_jiechu).resPath), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.WAWAHE_JIECHU).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_JIECHU).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.GEMSTONE_JIECHU).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHENTI_JIECHU).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.FACE_JIECHU).path);
				let e = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
				t.addModel(db.get_model_db(e).resPath)
			}
			let e = db.get_role_contract_db(this.context.nextContract).gemstoneModelId;
			return t.addModel(db.get_model_db(e).resPath), t
		}
		destroy() {
			mgrGuide.sendMsgKey("CLICK_CONTRACT_CIRCLE"), Laya.stage.offAllCaller(this), this.clearWawahe(), this.clearOld(), this.clickFinger && _G.poolManager.put(this.clickFinger), super.destroy(!0)
		}
		clearWawahe() {
			this.wawahe && (this.wawahe.dispose(), this.wawahe = null)
		}
		clearOld() {
			this.oldAvatar && (this.oldAvatar.destroy(), this.oldAvatar = null), this.oldShexiangji && (this.oldShexiangji.dispose(), this.oldShexiangji = null), this.oldWawahe && (this.oldWawahe.dispose(), this.oldWawahe = null), this.oldGemstone && (_G.poolManager.put(this.oldGemstone), this.oldGemstone = null), this.oldRoom && (this.oldRoom.dispose(), this.oldRoom = null)
		}
		startAnim() {
			if (this.bStart) return;
			this.bStart = !0;
			let t = this.getResLoader();
			this.oldContractIdx = mgrGame.contractIndex, mgrGame.contractIndex != this.context.nextContract && (this.oldParts = Tools.deepCopy(mgrPart.partsWear)), mgrGame.contractIndex = this.context.nextContract, mgrPart.addPartResList(mgrPart.partsWear, t, !0), mgrAlert.openWait(t, () => {
				_G.sendMsg("START_CONTRACT"), this.oldContractIdx == mgrGame.contractIndex ? (this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))) : (this.oldRoom = new RoomBath, this.oldRoom.load(this.onOldSceneLoaded.bind(this)))
			})
		}
		onOldSceneLoaded() {
			this.addChild(this.oldRoom.scene), this.oldRoom.changeToMain(), this.oldRoom.skybox.active = !0, this.oldRoom.camera.active = !1, this.oldRoom.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.oldRoom.mapNode.transform, "localScale", 3, 3, 3), this.oldAvatar = new RoleAvatar(this.oldParts), this.oldRoom.root.addChild(this.oldAvatar), this.oldWawahe = new GModel(db.MODEL_DB_ID.wawahe), this.oldWawahe.create(), this.oldWawahe.initAnimator(), this.oldWawahe.setParent(this.oldRoom.root), this.oldWawahe.hide(), this.oldShexiangji = new GModel(db.MODEL_DB_ID.shexiangji_jiechu), this.oldShexiangji.create(), this.oldShexiangji.setParent(this.oldRoom.root), this.oldShexiangji.callIfLoaded(() => {
				let t = this.oldShexiangji.findChild("camera");
				t.nearPlane = .01, t.fieldOfView = 60;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular
			});
			let t = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
			this.oldGemstone = _G.poolManager.get(GModel, t), this.oldGemstone.initAnimator(), this.oldGemstone.getAnimator().cullingMode = Laya.Animator.CULLINGMODE_ALWAYSANIMATE, this.oldGemstone.setParent(this.oldRoom.root);
			let e = new AnimatorFixedPlayer;
			e.addModelAnim(this.oldWawahe, MODEL_ANIM.WAWAHE_JIECHU), e.addModelAnim(this.oldShexiangji, MODEL_ANIM.SHEXIANGJI_JIECHU), e.addModelAnim(this.oldAvatar.baseBody, MODEL_ANIM.SHENTI_JIECHU), e.addModelAnim(this.oldAvatar.baseFace, MODEL_ANIM.FACE_JIECHU), e.addTimeCallback(110 / 30 / e.duration, () => {
				this.oldWawahe.show()
			}), e.addTimeCallback(.78, () => {
				this.onSwitchComplete(() => {
					this.clearOld(), e.dispose()
				})
			}), e.addTimeCallback(1, () => {}), e.play();
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.oldGemstone, MODEL_ANIM.GEMSTONE_JIECHU), a.addTimeCallback(80 / 30 / a.duration, () => {
				this.oldGemstone.hide()
			}), a.play()
		}
		onSwitchComplete(t) {
			UiHelper.playBlackFlash(1, () => {
				t(), this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))
			})
		}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.room.changeToMain(), this.room.skybox.active = !0, this.room.camera.active = !1, this.room.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 3, 3, 3), this.wawahe = new GModel(db.MODEL_DB_ID.wawahe), this.wawahe.create(), this.wawahe.initAnimator(), this.wawahe.setParent(this.room.root), this.shexiangji = new GModel(db.MODEL_DB_ID.shexiangji_come), this.shexiangji.create(), this.shexiangji.setParent(this.room.root), this.shexiangji.callIfLoaded(() => {
				let t = this.shexiangji.findChild("camera");
				t.nearPlane = .01;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular, this.shexiangji_effect = this.shexiangji.findChild("e_wawahe_come"), this.shexiangji_effect && (this.shexiangji_effect.active = !1)
			});
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME01), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME01), t.addTimeCallback(1, () => {
				let t = new AnimatorFixedPlayer;
				t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME02), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME02), t.addTimeCallback(1, () => {
					this.clickFinger = _G.poolManager.get(Particle, "135"), this.clickFinger.play(), this.clickFinger.setParent(mgrAlert.scene3dfont);
					let t = UiHelper.global2camera(new Laya.Vector2(_G.canvasWidth / 2 + 100, _G.canvasHeight / 2 - 50), mgrAlert.camerafont);
					this.clickFinger.setPosition(t), Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onTouchBox)
				}), t.play()
			}), t.play()
		}
		playRoleAnim() {
			this.avatar = new RoleAvatar, this.room.root.addChild(this.avatar);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.avatar.baseBody, MODEL_ANIM.SHENTI_COME), t.addModelAnim(this.avatar.baseFace, MODEL_ANIM.FACE_COME), t.addTimeCallback(1, this.onRoleAnimFinish.bind(this)), t.play()
		}
		playGemstone() {
			let t = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			this.gemstone = _G.poolManager.get(GModel, t), this.gemstone.initAnimator(), this.gemstone.setParent(this.room.root), this.gemstone.setPosition(0, .05, 0), this.gemstone.playAnims(0, [MODEL_ANIM.GEMSTONE_COME, MODEL_ANIM.GEMSTONE_ZHANSHI], !0), this.gemstone.initPaint(), this.gemstone.callIfLoaded(() => {
				let t = this.gemstone.getChildAt(0);
				cc.tween(this).to(1.3, cc.PROP.EMPTY, {
					onUpdate(e, a) {
						t.transform.scale = t.transform.scale
					}
				}).start()
			})
		}
		onWawaheAnimFinish() {
			this.clearWawahe()
		}
		onRoleAnimFinish() {
			this.avatar.playAnimation(MODEL_ANIM.SHENTI_IDLE), Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onTouchCircle), this.clickFinger.show(), this.clickFinger.play(), mgrGuide.dispatchGuide(GUD_EVENT.START_CONTRACT2)
		}
		playGotoRoom() {
			this.shexiangji && (this.shexiangji.findChild("e_wawahe_come").active = !1, mgrPanel.openPanel(UI_NAME.PanelMain, {
				data: {
					room: this.room,
					avatar: this.avatar,
					shexiangji: this.shexiangji,
					gemstone: this.gemstone
				},
				bSwitch: !0
			}, !1, () => {
				this.room.scene.removeSelf(), this.context.finishCallback && this.context.finishCallback()
			}))
		}
		checkTouch() {
			return Math.abs(Laya.stage.mouseX - _G.canvasWidth / 2) < 200 && Math.abs(Laya.stage.mouseY - _G.canvasHeight / 2 - 60) < 200
		}
		onTouchBox() {
			if (!this.checkTouch()) return;
			this.clickFinger.stop(), this.clickFinger.hide(), Laya.stage.offAllCaller(this), this.shexiangji_effect && (this.shexiangji_effect.active = !0);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME03), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME03), t.addTimeCallback(3 / t.duration, this.playGemstone.bind(this)), t.addTimeCallback(1, this.onWawaheAnimFinish.bind(this)), t.play(), this.playRoleAnim()
		}
		onTouchCircle() {
			this.checkTouch() && (mgrGuide.sendMsgKey("CLICK_CONTRACT_CIRCLE"), Laya.stage.offAllCaller(this), this.clickFinger.stop(), this.clickFinger.hide(), this.playGotoRoom())
		}
	}
	class PanelShoeSelectResult extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelShoeSelectResult.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_textName1: "Laya.Text",
				cc_textName2: "Laya.Text",
				cc_spriteRole: "Laya.Sprite",
				cc_spritePieces: "Laya.Sprite",
				cc_piece1: "Laya.Sprite",
				cc_piece2: "Laya.Sprite",
				cc_piece3: "Laya.Sprite",
				cc_piece4: "Laya.Sprite",
				cc_spriteDialog: "Laya.Sprite",
				cc_textDialog: "Laya.Label",
				cc_buttonContinue: "UIButton",
				cc_labelBtnContinue: "Laya.Label",
				cc_buttonContract: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			this.textName1.text = mgrI18n.getText("panelShoe.5"), this.textName2.text = mgrI18n.getText("panelShoe.6");
			let t = this.spriteRole.x;
			this.spriteRole.x = t - 350, cc.tween(this.spriteRole).to(.4, {
				x: t
			}, cc.OPTION.BACK_OUT).start(), t = this.spritePieces.x, this.spritePieces.x = t + 350, cc.tween(this.spritePieces).to(.4, {
				x: t
			}, cc.OPTION.BACK_OUT).start(), this.spriteDialog.scale(0, 0, !0), cc.tween(this.spriteDialog).delay(.4).to(.4, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), this.buttonContinue.node.visible = !1, this.buttonContract.node.visible = !1, UiHelper.playBreathe(this.buttonContract.node);
			for (let t = 1; t <= 4; t++) mgrShoe.checkPieceUnlock(t - 1) && (this["piece" + t].visible = !1);
			if (this.context) {
				let t = mgrShoe.randomAddPiece(); - 1 == t ? (this.labelBtnContinue.text = mgrI18n.getText("panelShoeSelectResult.4"), this.buttonContinue.node.visible = !0, this.buttonContract.node.visible = !0) : Timer.callLater(.6, this.playPieceAnim.bind(this, t), this), this.textDialog.text = mgrI18n.getText("panelShoeSelectResult.1")
			} else {
				let t = mgrShoe.checkPieceUnlock();
				this.labelBtnContinue.text = mgrI18n.getText("panelShoeSelectResult.3"), this.buttonContinue.node.x = t ? this.buttonContinue.node.x : 0, this.buttonContinue.node.visible = !0, this.buttonContract.node.visible = t, this.textDialog.text = mgrI18n.getText("panelShoeSelectResult.2")
			}
			mgrSdk.isVideoShareable && mgrAlert.openPanelLoading(UI_NAME.PanelShare, {
				shareIdx: 13,
				desc: "快让朋友们看看你选的水晶鞋吧！",
				descWithoutShare: "水晶鞋需要找到它的主人！"
			})
		}
		dispose() {
			this.contractAnim && this.contractAnim.destroy(), super.dispose()
		}
		playPieceAnim(t) {
			let e = this["piece" + (t + 1)];
			cc.tween(e).parallel(cc.tween().to(.4, cc.PROP.SCALE1_2), cc.tween().delay(.2).to(.2, cc.PROP.ALPHA0)).call(this.onPieceAnimFinish.bind(this)).start()
		}
		onPieceAnimFinish() {
			mgrShoe.checkPieceUnlock() ? (this.labelBtnContinue.text = mgrI18n.getText("panelShoeSelectResult.4"), this.playAllUnlockEffect(), this.buttonContinue.node.visible = !0, this.buttonContract.node.visible = !0) : (this.labelBtnContinue.text = mgrI18n.getText("panelShoeSelectResult.3"), this.buttonContinue.node.visible = !0, this.buttonContinue.node.x = 0, this.buttonContract.node.visible = !1)
		}
		playAllUnlockEffect() {}
		playContractAnim() {
			GameStatistics.statisCommonEvent(2621), this.contractAnim = new ContractAnim({
				nextContract: SHOE_UNLOCK_CONTRACT_IDX,
				finishCallback: this.onContractFinish.bind(this)
			}), this.resNode.addChild(this.contractAnim), this.contractAnim.startAnim(), this.buttonContinue.interactable = !1
		}
		onContractFinish() {
			this.contractAnim.destroy(), this.close()
		}
		on_click_buttonContinue() {
			mgrShoe.checkPieceUnlock() ? GameStatistics.statisCommonEvent(2616) : GameStatistics.statisCommonEvent(2615), this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelShoeSelect)
		}
		on_click_buttonContract() {
			mgrShoe.checkPieceUnlock() && (this.buttonContract.interactable = !1, mgrGame.contractIndex == SHOE_UNLOCK_CONTRACT_IDX ? mgrAlert.alertDialog(mgrI18n.getText("panelContract.11"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				this.playContractAnim()
			}, () => {
				this.buttonContract.interactable = !0
			}) : mgrAlert.alertDialog(mgrI18n.getText("panelContract.12"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				this.playContractAnim()
			}, () => {
				this.buttonContract.interactable = !0
			}))
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class ShopItemCurrency extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/ShopItemCurrency.json", this._exportNodeInfo = {
				cc_icon: "Laya.Image",
				cc_buttonAdv: "UIButton",
				cc_buttonBuy: "UIButton",
				cc_price: "Laya.Text",
				cc_count: "Laya.Label",
				cc_activeTip: "Laya.Label"
			}, this.create()
		}
		onCreateComplete() {}
		dispose() {
			super.dispose()
		}
		setPayId(t) {
			if (!this.callable) return this.safeCall(this.setPayId, t);
			this.payId = t;
			let e = db.get_pay_db(t);
			this.count.text = "*" + e.getCount, this.icon.skin = e.icon, BaseFacade.mPay.getActive(t) ? (1 == e.gid ? "1004" == e.costItemId ? (this.buttonAdv.node.visible = !0, this.buttonBuy.node.visible = !1, "1001" == e.getItemId && (e.getCount = mgrOffline.offlinePerSecond * db.game_cnf.free_coin_time | 0, this.count.text = e.getCount + "")) : (this.buttonAdv.node.visible = !1, this.buttonBuy.node.visible = !0, "1001" == e.getItemId && (e.getCount = mgrOffline.offlinePerSecond * db.game_cnf.diamond_coin_time | 0, this.count.text = e.getCount + ""), this.price.text = `${e.costCount}`) : (this.buttonAdv.node.visible = !1, this.buttonBuy.node.visible = !0, this.price.text = `${e.costCount}`), this.activeTip.visible = !1) : (this.buttonAdv.node.visible = !1, this.buttonBuy.node.visible = !1, this.activeTip.visible = !0)
		}
		on_click_buttonAdv() {
			mgrAdv.statisVideoClick("shop_item"), mgrAdv.dispatchAdv("shop_item", this.payId, !0)
		}
		on_click_buttonBuy() {
			this.activeTip.visible ? mgrAlert.alertDialog(mgrI18n.getText("shopItemCurrency.4")) : _G.sendMsg("UI_CLICK_SHOP_ITEM", this.payId)
		}
	}
	class ShopItemSpe extends ViewBase {
		constructor(t) {
			super(), this.resourceName = "res/prefab/ShopItemSpe.json", this._exportNodeInfo = {
				cc_bg: "Laya.Sprite",
				cc_icon: "Laya.Sprite",
				cc_stars: "UIHVLayout",
				cc_costIcon: "Laya.Sprite",
				cc_price: "Laya.Text",
				cc_tipText: "Laya.Text"
			}, this.offset = 0, this.offset = t, this.create()
		}
		onCreateComplete() {
			this.offset && (this.bg.x = 8.5, this.bg.scale(1.2, 1.2, !0)), this.bg.scale(.9, .9, !0), UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this))
		}
		setPayId(t) {
			if (!this.callable) return this.safeCall(this.setPayId, t);
			if (this.payId = t, !t) return;
			let e = db.get_pay_db(t);
			this.icon.loadImage(e.icon);
			let a = db.get_item_db(e.getItemId);
			UiHelper.setStars(this.stars, a.quality, 5), BaseFacade.mPay.getActive(t) ? (this.price.visible = !0, this.costIcon.visible = !0, this.tipText.visible = !1, this.costIcon.loadImage(db.get_item_db(e.costItemId).icon), this.price.text = `*${e.costCount}`) : (this.price.visible = !1, this.costIcon.visible = !1, this.tipText.visible = !0)
		}
		onClick() {
			this.payId && BaseFacade.mPay.getActive(this.payId) && _G.sendMsg("UI_CLICK_SHOP_ITEM", this.payId)
		}
	}
	class PanelShop extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelShop.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_bgImage: "Laya.Image",
				cc_spriteShop: "Laya.Sprite",
				cc_toggle1: "UIToggle",
				cc_toggle2: "UIToggle",
				cc_scrollView1: "ReuseScrollList",
				cc_scrollView2: "ReuseScrollList",
				cc_buttonClose: "UIButton",
				cc_advNode: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_shop", "banner_shop")
		}
		buildUi() {
			this.initUi(), mgrI18n.trySetI18nImage(this.spriteShop, "pnl_shop_02.png"), this.context && 2 == this.context.curToggle ? (this.on_click_toggle2(), this.toggle2.check(!0)) : (this.on_click_toggle1(), this.toggle1.check(!0)), this.registerMsg({
				UI_CLICK_SHOP_ITEM: this.onMsgClickShopItem.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEventOnce(7041), GameStatistics.statisCommonEvent(7201)
		}
		dispose() {
			this.stopProcMsg(), this.nativeAdv && this.nativeAdv.dispose(), this.scrollView1 && this.scrollView1.clearAllItems(), this.scrollView2 && this.scrollView2.clearAllItems(), this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgClickShopItem(t) {
			BaseFacade.mPay.buyGoods(t, (e, a) => {
				if (e) mgrAlert.alertItems(a), this.updateList();
				else {
					let e = db.get_pay_db(t);
					mgrAlert.alertNotEnough(e.costItemId)
				}
			}, 25)
		}
		onMsgAdvShowSuc(t) {
			"shop_item" == t.advName && BaseFacade.mPay.buyGoods(t.params, (t, e) => {
				t && (mgrAlert.alertItems(e), this.updateList())
			}, 26, !0)
		}
		initUi() {
			this.scrollView1.onItemCreate = function() {
				let t = new ShopItemCurrency;
				return t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}, this.scrollView1.onItemChange = ((t, e) => {
				t.setPayId(this.payIds[e])
			}), this.scrollView2.onItemCreate = function() {
				let t = new ShopItemSpe(0);
				return t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}, this.scrollView2.onItemChange = ((t, e) => {
				t.setPayId(this.payIds[e])
			}), this.nativeAdv = new WidgetNativeAdv("emb_shop", this.advNode, () => {
				this.bgImage.height = 830
			})
		}
		updateList() {
			1 == this.curToggle ? this.on_click_toggle1() : this.on_click_toggle2()
		}
		on_click_toggle1() {
			if (this.curToggle = 1, this.payIds = BaseFacade.mPay.getPays(1), mgrAdv.getActive("shop_item")) mgrAdv.statisVideoShow("shop_item");
			else
				for (let t = this.payIds.length - 1; t >= 0; t--) {
					"1004" == db.get_pay_db(this.payIds[t]).costItemId && this.payIds.splice(t, 1)
				}
			this.scrollView1.updateList(this.payIds.length), this.scrollView1.node.visible = !0, this.scrollView2.node.visible = !1
		}
		on_click_toggle2() {
			this.curToggle = 2, this.payIds = BaseFacade.mPay.getPays(2), this.scrollView2.updateList(this.payIds.length), this.scrollView2.node.visible = !0, this.scrollView1.node.visible = !1
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelShopLvup extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelShopLvup.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_spriteLiveShop: "Laya.Sprite",
				cc_scrollView1: "ReuseScrollList",
				cc_buttonClose: "UIButton",
				cc_barMaskExp: "UIBarMask",
				cc_barValue: "Laya.Label",
				cc_desc: "Laya.Label",
				cc_buttonLvup: "UIButton",
				cc_catLevel: "Laya.Label",
				cc_textTips: "Laya.Text"
			}, this.instOrBanner = new AdvInstOrBanner("enter_cat_shop", "banner_cat_shop")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonLvup.node, "pnl_shop_01.png"), mgrI18n.trySetI18nImage(this.spriteLiveShop, "pnl_shop_03.png"), this.textTips.text = mgrI18n.getText("panelShopLvup.5"), this.scrollView1.onItemCreate = function() {
				let t = new ShopItemCurrency;
				return t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}, this.scrollView1.onItemChange = ((t, e) => {
				t.setPayId(this.payIds[e])
			}), this.updateList(), this.updatelvState(!1), this.registerMsg({
				UI_CLICK_SHOP_ITEM: this.onMsgClickShopItem.bind(this),
				[BASE_MSG.UP_STATE_CHANGE]: this.onMsgUpStateChange.bind(this),
				[BASE_MSG.PAY_SUC]: this.onMsgPaySuc.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.scrollView1 && this.scrollView1.clearAllItems(), this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgClickShopItem(t) {
			BaseFacade.mPay.buyGoods(t, (e, a) => {
				if (e) BaseFacade.mGoal.commit(ACTION_ID.BUY_CAT_SHOP), GameStatistics.statisCommonEventOnce(7031), mgrAlert.alertItems(a, null, () => {
					let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2),
						e = this.barMaskExp.node.localToGlobal(new Laya.Point(this.barMaskExp.progressPosition, 0), !1);
					for (let a = 0; a < 3; a++) UiHelper.playBezierTo("res/icon/star.png", t, e, 1 + .05 * a, 1, () => {
						this.destroyed || this.updatelvState(!0)
					})
				}), mgrCat.addExp(), this.updateList();
				else {
					let e = db.get_pay_db(t);
					mgrAlert.alertNotEnough(e.costItemId)
				}
			}, 25)
		}
		onMsgUpStateChange(t) {
			"cat" == t.itemId && (this.updateList(), this.updatelvState(!1))
		}
		onMsgPaySuc() {
			this.updateList()
		}
		onMsgAdvShowSuc(t) {
			"shop_item" == t.advName && BaseFacade.mPay.buyGoods(t.params, (t, e) => {
				t && (BaseFacade.mGoal.commit(ACTION_ID.BUY_CAT_SHOP), mgrAlert.alertItems(e), this.updateList())
			}, 26, !0)
		}
		updateList() {
			this.payIds = mgrCat.getPays(), this.scrollView1.updateList(this.payIds.length)
		}
		updatelvState(t) {
			let e = mgrCat.catLevel;
			if (this.desc.text = `${mgrI18n.getText("panelShopLvup.1")}${e}`, mgrCat.isMax) t ? this.barMaskExp.progressTo(1) : this.barMaskExp.progress = 1, this.barValue.text = "", this.catLevel.text = mgrI18n.getText("panelShopLvup.2");
			else {
				let e = BaseFacade.mItem.getItemCount("cat_exp"),
					a = BaseFacade.mUp.getUpDb("cat");
				t ? this.barMaskExp.progressTo(e / a.reqCnt1) : this.barMaskExp.progress = e / a.reqCnt1, this.barValue.text = `${e}/${a.reqCnt1}`, this.catLevel.text = `${mgrI18n.getText("panelShopLvup.3")}${mgrCat.catLevel}`
			}
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonLvup() {
			mgrCat.isMax ? mgrAlert.alertDialog(mgrI18n.getText("panelShopLvup.4")) : mgrAlert.openPanelLoading(UI_NAME.PanelCatLvup)
		}
	}
	class PanelSign extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelSign.json", this.panelLayer = PANEL_LAYER.UI, this.panelStyle = 0, this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_roleSprite: "Laya.Sprite",
				cc_bgPnl: "Laya.Sprite",
				cc_line0: "Laya.Image",
				cc_item0: "Laya.Sprite",
				cc_line1: "Laya.Image",
				cc_item1: "Laya.Sprite",
				cc_line2: "Laya.Image",
				cc_item2: "Laya.Sprite",
				cc_line3: "Laya.Image",
				cc_item3: "Laya.Sprite",
				cc_line4: "Laya.Image",
				cc_item4: "Laya.Sprite",
				cc_spriteGetParent: "Laya.Sprite",
				cc_buttonGrayGet: "UIButton",
				cc_btnGrayGetText: "Laya.Label",
				cc_buttonGet: "UIButton",
				cc_btnGetText: "Laya.Label",
				cc_buttonAdv: "UIButton",
				cc_advText: "Laya.Text",
				cc_countDown: "Laya.Label",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_sign", "banner_sign"), this.signItems = [], this.isShowAdv = !1, this.smode = !1, this.grayBtnX = 0
		}
		buildUi() {
			this.btnGetText.text = mgrI18n.getText("panelOffline.1"), this.btnGrayGetText.text = mgrI18n.getText("panelSign.1"), this.advText.text = mgrI18n.getText("panelSign.3"), mgrI18n.trySetI18nImage(this.bgPnl, "pnl_sign_01.png");
			let t = mgrSign.getDailyItems();
			this.smode = 0 != db.cop.b_sign_delay_mode, console.log("QT_SIGNA", this.smode), this.smode || (this.spriteGetParent.scaleX = .8, this.spriteGetParent.scaleY = .8), this.grayBtnX = -130, this.buttonGrayGet.node.visible = !1;
			for (let e = 0; e < 5; e++) {
				let a = this["item" + e],
					i = new SignItem;
				this.signItems.push(i), i.createFromNode(a), i.fillItem(t[e][0], t[e][1])
			}
			this.updateItems(!0), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				[BASE_MSG.ADV_SHOW_FAIL]: this.onMsgAdvShowFail.bind(this),
				SIGN_REFRESH_ITEM: this.onMsgRefreshItem.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEvent(7301)
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.signItems && (this.signItems.forEach(function(t) {
				t.dispose()
			}), this.signItems = null), super.dispose(), mgrGame.tryOpenReview()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onDialogOpenAnim(t) {
			this.mask.alpha = 0, cc.tween(this.mask).to(.3, cc.PROP.ALPHA1).start(), this.roleSprite.x = -800, cc.tween(this.roleSprite).delay(.4).to(.4, {
				x: -192
			}, cc.OPTION.BACK_OUT).start();
			var e = [],
				a = [];
			for (let t = 0; t < 5; t++) e.push(this["line" + t].height), this["line" + t].height = 0, this["item" + t].scale(0, 0, !0), a.push(this["item" + t].y), this["item" + t].y = 0;
			var i = [.4, .5, .2, .6, 0];
			this.bgPnl.x = -1050, this.buttonGet.node.alpha = 0, this.buttonGet.node.scale(0, 0, !0), this.buttonAdv.node.scale(0, 0, !0), this.buttonGrayGet.node.scale(0, 0, !0), cc.tween(this.bgPnl).to(.4, {
				x: -384
			}, cc.OPTION.SINE_OUT).delay(.4).call(() => {
				for (let t = 0; t < 5; t++) {
					let s = Mathf.lerpFromInverseLerp(.2, .5, 0, 200, e[t]);
					cc.tween(this["line" + t]).delay(i[t]).to(s, {
						height: e[t]
					}, cc.OPTION.BACK_OUT).start();
					let n = this["item" + t];
					cc.tween(n).delay(i[t]).to(s, {
						scaleX: 1,
						scaleY: 1,
						y: a[t]
					}, cc.OPTION.BACK_OUT).call(() => {
						let t = new Laya.Point(40, 36);
						n.localToGlobal(t, !1);
						let e = this.addEffect("145"),
							a = new Laya.Vector3(t.x, t.y, 0);
						e.setPosition(this.global2camer(a, a)), e.play()
					}).start()
				}
			}).delay(1.2).call(() => {
				db.cop.b_adv_full_screen && UiHelper.addClickEvent(this.mask, this.onClickMask.bind(this), null, .5, !1), cc.tween(this.buttonGet.node).to(.3, cc.PROP.ALPHA1, cc.OPTION.BACK_OUT).start(), cc.tween(this.buttonGet.node).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), cc.tween(this.buttonGrayGet.node).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), cc.tween(this.buttonAdv.node).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), t && t()
			}).start()
		}
		onOpenComplete() {
			super.onOpenComplete();
			let t = this.addEffect("118");
			t.align(this.bg, this.cameraEffect), t.play()
		}
		onMsgAdvShowSuc(t) {
			"sign_adv" == t.advName && (4 == mgrSign.signData.index ? mgrSign.getAward(!1) : mgrSign.getAward(!0), this.updateItems(!1))
		}
		onMsgAdvShowFail(t) {
			"sign_adv" == t.advName && (this.isShowAdv = !1)
		}
		onMsgRefreshItem() {
			this.updateItems(!1)
		}
		onClickMask() {
			console.log("QT_ sign mask  " + this.buttonAdv.node.visible), this.buttonAdv.node.visible && this.on_click_buttonAdv()
		}
		updateItems(t) {
			let e = mgrSign.signData.index,
				a = mgrSign.signData.nextTime;
			for (let t = 0; t < 5; t++) {
				let i = this.signItems[t];
				t == e ? a <= Timer.time ? i.fillCanGet() : i.fillCountDown(a - Timer.time) : t < e ? i.fillGetted() : i.fillEmpty()
			}
			let i = mgrAdv.getActive("sign_adv"),
				s = mgrSign.canGetAward();
			if (!this.smode) return this.countDown.text = "", this.buttonGrayGet.node.visible = !1, this.buttonAdv.node.x = 0, this.buttonGet.node.x = 0, this.buttonGet.gray = !1, this.buttonGrayGet.node.x = this.grayBtnX - 40, void(e > 4 ? (this.buttonGet.node.visible = !0, this.buttonAdv.node.visible = !1, this.buttonGet.gray = !0, this.btnGetText.text = mgrI18n.getText("panelSign.2"), this.spriteGetParent.scaleX = 1, this.spriteGetParent.scaleY = 1) : 4 == e ? (this.buttonAdv.node.visible = i, i ? (this.buttonGet.node.visible = !1, this.advText.text = mgrI18n.getText("panelSign.3"), mgrAdv.statisVideoShow("sign_adv")) : (this.buttonGet.node.visible = s, this.buttonGrayGet.node.visible = !s, !s && (this.btnGrayGetText.text = mgrI18n.getText("panelSign.1")), this.buttonGet.node.x = 0, this.buttonGrayGet.node.x = 0)) : i ? (this.buttonAdv.node.visible = !0, this.buttonAdv.node.x = -this.grayBtnX, this.advText.text = mgrI18n.getText("panelSign.3"), this.countDown.text = "", this.buttonGet.node.x = this.grayBtnX - 40, this.buttonGet.node.visible = s, this.buttonGrayGet.node.visible = !s, !s && (this.btnGrayGetText.text = mgrI18n.getText("panelSign.1")), mgrAdv.statisVideoShow("sign_adv")) : (this.buttonAdv.node.visible = !1, this.buttonGet.node.visible = s, this.buttonGet.node.x = 0, this.buttonGrayGet.node.visible = !s, this.buttonGrayGet.node.x = 0));
			cc.clearTween(this.buttonGet.node), this.buttonGet.node.scale(1, 1, !0), 4 == e ? s ? i ? (this.buttonGet.node.visible = !1, this.buttonAdv.node.visible = !0, this.advText.text = mgrI18n.getText("panelSign.3"), this.countDown.text = "", mgrAdv.statisVideoShow("sign_adv")) : (this.buttonGet.node.visible = !0, this.buttonAdv.node.visible = !1, UiHelper.playBreathe(this.buttonGet.node)) : i ? (this.buttonGet.node.visible = !1, this.buttonAdv.node.visible = !0, this.advText.text = mgrI18n.getText("panelSign.3"), this.countDown.text = "", mgrAdv.statisVideoShow("sign_adv")) : (this.buttonGet.node.visible = !0, this.buttonAdv.node.visible = !1) : e > 4 ? (this.buttonGet.node.visible = !0, this.buttonAdv.node.visible = !1, this.buttonGet.gray = !0, this.btnGetText.text = mgrI18n.getText("panelSign.2")) : i ? s && t ? (this.buttonAdv.node.visible = !0, this.buttonGet.node.visible = !1, this.advText.text = mgrI18n.getText("panelSign.4"), this.countDown.text = String.format(mgrI18n.getText("panelSign.5"), "3"), this.scheduleOnce(2, this.updateCountDown.bind(this, 3)), mgrAdv.statisVideoShow("sign_adv")) : s ? (this.buttonAdv.node.visible = !1, this.buttonGet.node.visible = !0, UiHelper.playBreathe(this.buttonGet.node)) : (this.buttonAdv.node.visible = !0, this.buttonGet.node.visible = !1, this.advText.text = mgrI18n.getText("panelSign.4"), this.countDown.text = "") : (this.buttonGet.node.visible = !0, this.buttonAdv.node.visible = !1)
		}
		updateCountDown(t) {
			if (t <= 0) return this.countDown.text = "", void this.updateItems(!1);
			this.countDown.text = String.format(mgrI18n.getText("panelSign.5"), t.toString()), this.isShowAdv ? this.scheduleOnce(1, this.updateCountDown.bind(this, t)) : this.scheduleOnce(1, this.updateCountDown.bind(this, t - 1))
		}
		on_click_buttonClose() {
			let t = mgrSign.signData.index;
			mgrSign.signData.nextTime <= Timer.time && GameStatistics.statisCommonEvent(2508, t), this.close()
		}
		on_click_buttonGet() {
			mgrSign.isTodayFinish ? mgrAlert.alertDialog(mgrI18n.getText("panelSign.6")) : mgrSign.canGetAward() ? (mgrSign.getAward(!1), this.updateItems(!1)) : mgrAlert.alertDialog(mgrI18n.getText("panelSign.7"))
		}
		on_click_buttonAdv() {
			mgrAdv.statisVideoClick("sign_adv"), mgrAdv.dispatchAdv("sign_adv") ? this.isShowAdv = !0 : mgrAlert.alertText(mgrI18n.getText("panelSign.8"))
		}
		on_click_buttonGrayGet() {}
	}
	PanelSign.autoAlert = !1;
	class SignItem extends ViewBase {
		constructor() {
			super(...arguments), this.leftTime = 0
		}
		onCreateComplete() {}
		fillGetted() {
			this.getChild("on").visible = !1, this.getChild("off").visible = !0, this.getChild("getted").visible = !0, mgrI18n.trySetI18nImage(this.getChild("getted"), "pnl_main_33.png"), this.getChild("time").visible = !1
		}
		fillCanGet() {
			this.getChild("on").visible = !0, this.getChild("off").visible = !1, this.getChild("getted").visible = !1, this.getChild("time").visible = !1
		}
		fillEmpty() {
			this.getChild("on").visible = !1, this.getChild("off").visible = !0, this.getChild("getted").visible = !1, this.getChildText("time").text = ""
		}
		fillCountDown(t) {
			this.getChild("on").visible = !1, this.getChild("off").visible = !0, this.getChild("getted").visible = !1, this.getChildText("time").text = Tools.formatTime(t), this.leftTime = t, this.schedule(.5, this.updateTime)
		}
		updateTime() {
			this.leftTime > 0 && (this.leftTime -= .5, this.leftTime <= 0 ? (this.fillCanGet(), this.unschedule(this.updateTime), _G.sendMsg("SIGN_REFRESH_ITEM")) : this.getChildText("time").text = Tools.formatTime(this.leftTime))
		}
		fillItem(t, e) {
			let a = this.getChildText("count"),
				i = this.getChildSprite("icon"),
				s = db.get_item_db(t);
			i && s && s.icon && i.loadImage(s.icon), 2 == s.type ? a.text = "" : a.text = "x" + e
		}
	}
	class PanelStory extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelStory.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_bgImage: "Laya.Image",
				cc_roleLeft: "Laya.Image",
				cc_roleRight: "Laya.Image",
				cc_dialogLeft: "Laya.Image",
				cc_clickArrowLeft: "Laya.Sprite",
				cc_nameLeft: "Laya.Label",
				cc_textLeft: "Laya.Text",
				cc_dialogRight: "Laya.Image",
				cc_arrowRight: "Laya.Sprite",
				cc_nameRight: "Laya.Label",
				cc_textRight: "Laya.Text",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.isTalking = !0
		}
		addPreloadRes(t) {
			let e = this.context,
				a = db.get_talk_db(e),
				i = mgrTalk.getTalkResList(e);
			t.add(i, RES_TYPE.IMAGE), mgrDream.WatchStory(e), a.bgImage && t.add(a.bgImage, RES_TYPE.IMAGE)
		}
		buildUi() {
			this.roleLeft.x = -600, this.roleRight.x = 600, this.dialogLeft.visible = !1, this.dialogRight.visible = !1;
			let t = this.context,
				e = db.get_talk_db(t);
			e.bgImage && (this.bgImage.skin = e.bgImage), this.registerMsg({
				TALK_UPDATE_TEXT: this.onMsgTalkUpdateText.bind(this),
				TALK_SHOW_BTN: this.onMsgTalkShowBtn.bind(this),
				TALK_FINISH: this.onMsgTalkFinish.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onDialogOpenAnim(t) {
			this.scheduleOnce(1, () => {
				t(), UiHelper.addClickEvent(this.resNode, this.onClickBg.bind(this));
				let e = this.context;
				mgrTalk.startTalk(e)
			})
		}
		onDialogCloseAnim(t) {
			this.resNode.offAll(), cc.tween(this.resNode).to(.3, cc.PROP.ALPHA0).call(t).start()
		}
		onMsgTalkUpdateText() {
			let t, e, a, i, s, n, o = mgrTalk.talkTexts,
				r = o[o.length - 1].bLeft;
			this.isTalking = !0, r ? (t = this.dialogLeft, e = this.dialogRight, a = this.textLeft, i = this.roleLeft, s = this.roleRight, n = this.nameLeft) : (t = this.dialogRight, e = this.dialogLeft, a = this.textRight, i = this.roleRight, s = this.roleLeft, n = this.nameRight), t.scale(.2, .2, !0).alpha = 0, cc.tween(t, !0).delay(.3).show().to(.3, cc.PROP.SCALE_ALPHA1, cc.OPTION.BACK_OUT).start(), cc.tween(e, !0).to(.3, {
				scaleX: .2,
				scaleY: .2,
				alpha: 0
			}, cc.OPTION.SINE_OUT).hide().start();
			let l = o[o.length - 1];
			if (a.text = l.text, l.roleId) {
				let t = db.get_role_db(l.roleId);
				i.skin = t.image, n.text = mgrI18n.getText(t.tlite)
			} else i.skin = null, n.text = "";
			cc.tween(i, !0).to(.3, {
				x: r ? -100 : 100
			}, cc.OPTION.BACK_OUT).start(), cc.tween(s, !0).to(.3, {
				x: r ? 600 : -600
			}, cc.OPTION.SINE_OUT).start(), s.parent.setChildIndex(s, 0)
		}
		onMsgTalkShowBtn(t) {
			console.error("没有按钮了")
		}
		onMsgTalkFinish(t) {
			this.close(), GameStatistics.statisCommonEvent(7103)
		}
		onTalkFinish() {
			this.isTalking = !1, mgrTalk.next()
		}
		onClickBg() {
			mgrTalk.isDone ? this.close() : this.isTalking && this.onTalkFinish()
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelSubscribe extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelSubscribe.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_item1: "Laya.Image",
				cc_itemAmount1: "Laya.Label",
				cc_item2: "Laya.Image",
				cc_itemAmount2: "Laya.Label",
				cc_buttonSub: "UIButton",
				cc_buttonThank: "UIButton",
				cc_labelRewarded: "Laya.Label"
			}
		}
		buildUi() {
			this.registerMsg({
				[BASE_MSG.MSG_ON_ADD_SUBSCRIBE_RESULT]: this.onMsgSdkAddSubscribeResult.bind(this)
			}), this.startProcMsg();
			let t = [
					["1000", 10],
					["1001", 2e3]
				],
				e = [this.item1, this.item2],
				a = [this.itemAmount1, this.itemAmount2];
			for (let i = 0; i < t.length; i++) {
				if (e[i]) {
					let a = db.get_item_db(t[i][0]).icon;
					e[i].loadImage(a)
				}
				a[i] && (a[i].text = "*" + t[i][1])
			}
			if (1 == FileRecord.getData("SUBSCRIBE_COUNT")) {
				this.labelRewarded.visible = !1, this.buttonSub.node.visible = !0, this.buttonThank.node.visible = !0, this.buttonClose.node.visible = !1;
				let t = db.cop.subscribe_close_delay_time || 0;
				if (t > 0 && (this.buttonThank.node.visible = !1, Timer.callLater(t, () => {
						this.destroyed || (this.buttonThank.node.visible = !0, this.buttonThank.node.alpha = 0, cc.tween(this.buttonThank.node).to(.3, cc.PROP.ALPHA1).start())
					}, this)), 0 != db.cop.b_subscribe_finger) {
					let t = this.addEffect("135");
					t.setScale(1, 1, 1), t.followTarget(this.buttonSub.node, this.cameraEffect, this.buttonSub.node.width / 2), t.play()
				}
			} else this.labelRewarded.visible = !0, this.buttonSub.node.visible = !1, this.buttonThank.node.visible = !1, this.buttonClose.node.visible = !0;
			GameStatistics.statisCommonEvent(2504)
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgSdkAddSubscribeResult() {
			this.close()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonSub() {
			GameStatistics.statisCommonEvent(2505, 0), mgrSdk.addSubscribe([1])
		}
		on_click_buttonThank() {
			this.close()
		}
	}
	class PanelSuit extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelSuit.json", this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_topNode: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_leftNode: "Laya.Sprite",
				cc_buttonLeft: "UIButton",
				cc_rightNode: "Laya.Sprite",
				cc_buttonRight: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_suit", ""), this.curGid = 0
		}
		buildUi() {
			GameStatistics.statisCommonEvent(7401), this.curSuitGroup = new SuitGroup, this.centerNode.addChild(this.curSuitGroup), this.curSuitGroup.setSuits(0), this.tempSuitGroup = new SuitGroup, this.centerNode.addChild(this.tempSuitGroup), this.tempSuitGroup.visible = !1, this.centerNode.y = -1100, cc.tween(this.centerNode).to(.5, {
				y: 0
			}, cc.OPTION.BACK_OUT).start(), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				SUIT_UPDATE: this.onMsgSuitUpdate.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEventOnce(7051)
		}
		dispose() {
			this.instOrBanner.dispose(), this.stopProcMsg(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgItemChange(t) {
			2 == t.itemDb.type && 1 == t.itemDb.subType && this.curSuitGroup.refresh()
		}
		onMsgSuitUpdate() {
			this.curSuitGroup.refresh()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonLeft() {
			this.curGid = ((this.curGid + 1) % 5 + 5) % 5, this.tempSuitGroup.setSuits(this.curGid), this.tempSuitGroup.x = -600, cc.tween(this.curSuitGroup, !0).to(.45, {
				x: 600
			}, cc.OPTION.SINE_IN_OUT).hide().start(), cc.tween(this.tempSuitGroup, !0).show().to(.45, {
				x: 0
			}, cc.OPTION.SINE_IN_OUT).call(() => {
				[this.curSuitGroup, this.tempSuitGroup] = [this.tempSuitGroup, this.curSuitGroup]
			}).start(), GameStatistics.statisCommonEvent(7052)
		}
		on_click_buttonRight() {
			this.curGid = ((this.curGid - 1) % 5 + 5) % 5, this.tempSuitGroup.setSuits(this.curGid), this.tempSuitGroup.x = 600, cc.tween(this.curSuitGroup, !0).to(.45, {
				x: -600
			}, cc.OPTION.SINE_IN_OUT).hide().start(), cc.tween(this.tempSuitGroup, !0).show().to(.45, {
				x: 0
			}, cc.OPTION.SINE_IN_OUT).call(() => {
				[this.curSuitGroup, this.tempSuitGroup] = [this.tempSuitGroup, this.curSuitGroup]
			}).start(), GameStatistics.statisCommonEvent(7052)
		}
	}
	class SuitGroup extends Laya.Sprite {
		constructor() {
			super(), this.suitItems = [], this.size(521, 945).pivot(261, 473), this.title = this.addChild(new Laya.Sprite), this.title.x = 193;
			let t = this.addChild((new Laya.Sprite).loadImage("res/ui/pnl_suit/bar_bg.png")).pos(428, 68),
				e = t.addChild((new Laya.Sprite).loadImage("res/ui/pnl_suit/bar.png"));
			this.percentBar = e.addComponent(UIBarMask), this.percentBar.style = UIBarMask.STYLE_RADIAL, this.percentLabel = t.addChild(new Laya.Label), this.percentLabel.anchorX = .5, this.percentLabel.pos(32, 22), this.percentLabel.fontSize = 24, this.percentLabel.color = "#a33f9c", this.percentLabel.strokeColor = "#ffffff", this.percentLabel.stroke = 2
		}
		setSuits(t) {
			this.gid = t, this.loadImage(`res/ui/pnl_suit/bg${t}.png`);
			this.title.y = [95, 108, 76, 96, 96][t];
			let e = mgrSuit.getAllSuits(t);
			for (var a = 0; a < e.length; a++) {
				let t = this.suitItems[a];
				if (t) t.visible = !0;
				else {
					t = new SuitItem, this.suitItems.push(t), this.addChild(t);
					let e = 120 * (a % 3 - 1) + 260,
						i = 255 * (a / 3 | 0) + 355;
					t.pos(e, i, !0)
				}
				this.suitItems[a].setSuitId(e[a])
			}
			for (a = e.length; a < this.suitItems.length; a++) this.suitItems[a].visible = !1;
			this.refresh()
		}
		refresh() {
			let t = mgrSuit.getAllSuits(this.gid),
				e = 0,
				a = 0;
			for (var i = 0; i < t.length; i++) this.suitItems[i].refresh(), e += this.suitItems[i].hasCount, a += this.suitItems[i].totalCount;
			this.percentBar.progress = e / a, this.percentLabel.text = (e / a * 100 + .5 | 0) + "%"
		}
		onClick() {
			if (null != this.gid) {
				let t = new ResLoader;
				t.add("res/ui/PanelSuitList.json", RES_TYPE.PREFAB2D), t.add("res/prefab/SuitItem.json", RES_TYPE.PREFAB2D), mgrAlert.openWait(t, () => {
					mgrPanel.openPanelWithSingleton(UI_NAME.PanelSuitList, this.gid)
				})
			}
		}
	}
	class SuitItem extends Laya.Image {
		constructor() {
			super(), this.anchorX = .5, this.anchorY = 1, this.size(174, 249);
			let t = this.addChild(new Laya.Image);
			t.skin = "res/ui/pnl_suit/text_bg.png", t.centerX = 0, t.bottom = -2, this.countLabel = t.addChild(new SimpleRichText), this.countLabel.fontSize = 18, this.countLabel.color = "#ff8003", this.countLabel.strokeColor = "#ffffff", this.countLabel.pos(30, 4), this.tip = this.addChild(new Laya.Sprite).loadImage("res/ui/btns/tip.png").pos(110, 224), UiHelper.addClickEvent(this, this.onClick.bind(this))
		}
		setSuitId(t) {
			this.suitId = t;
			let e = db.get_suit_db(t);
			this.skin = e.icon
		}
		refresh() {
			let t = db.get_suit_db(this.suitId),
				e = mgrSuit.hasPartCount(this.suitId);
			this.hasCount = e, this.totalCount = t.parts.length, this.countLabel.text = `<>${e}/</><color:#00b415>${t.parts.length}</>`, this.hasCount >= this.totalCount ? mgrSuit.isSuitAwarded(this.suitId) ? this.tip.visible = !1 : (this.tip.visible = !0, UiHelper.playTipRot(this.tip)) : this.tip.visible = !1
		}
		onClick() {
			GameStatistics.statisCommonEvent(7053);
			let t = db.get_suit_db(this.suitId);
			t.fromSuitStatistics && GameStatistics.statisCommonEvent(t.fromSuitStatistics), mgrPart.openPanelSuitDetal(this.suitId)
		}
	}
	class PanelSuitAward extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelSuitAward.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_awardCount: "Laya.Label",
				cc_descLabel: "Laya.Label",
				cc_buttonClose: "UIButton",
				cc_buttonGet: "UIButton",
				cc_buttonAdvGet: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_suit_award", "banner_suit_award")
		}
		buildUi() {
			let t = this.context,
				e = db.get_suit_db(t);
			this.awardCount.text = e.diamondCount + "", mgrAdv.getActive("suit_award_db") ? (mgrAdv.statisVideoShow("suit_award_db"), this.buttonGet.node.visible = !1, this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()) : (this.buttonAdvGet.node.visible = !1, this.buttonClose.node.visible = !1)
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			"suit_award_db" == t.advName && this.getAward(!0)
		}
		getAward(t) {
			let e = this.context;
			mgrSuit.getSuitAward(e, t), this.close()
		}
		on_click_buttonClose() {
			this.getAward(!1)
		}
		on_click_buttonGet() {
			this.getAward(!1)
		}
		on_click_buttonAdvGet() {
			mgrAdv.statisVideoClick("suit_award_db"), mgrAdv.dispatchAdv("suit_award_db", null, !1)
		}
	}
	class PanelSuitDetail extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelSuitDetail.json", this._exportNodeInfo = {
				cc_bottomNode: "Laya.Sprite",
				cc_reuseScrollParts: "ReuseScrollList",
				cc_touchNode: "Laya.Image",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonAward: "UIButton",
				cc_awardCount: "Laya.Label",
				cc_awardTip: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_suit_detail", "")
		}
		addPreloadRes(t) {
			let e, a = this.context.suitIdOrParts,
				i = [];
			if (a instanceof Array) i = a.slice(), mgrPart.removeUnchoosePart(i);
			else if ("string" == typeof a) {
				i = db.get_suit_db(a).parts, e = a
			} else {
				for (const t in a) i.push(a[t]);
				mgrPart.removeUnchoosePart(i)
			}
			this.suitId = e, this.parts = i, t.addAnimationClip(db.get_animation_db(MODEL_ANIM.ZJZ).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.FACE_ZJZ).path), mgrPart.addPartResList(i, t, !0)
		}
		buildUi() {
			let t, e = this.suitId;
			if (e) {
				let a = db.get_suit_db(e);
				t = a.parts, !mgrSuit.hasSuit(e) || mgrSuit.isSuitAwarded(e) ? this.buttonAward.node.visible = !1 : (this.awardCount.text = a.diamondCount + "", UiHelper.playTipRot(this.awardTip))
			} else t = this.parts, this.buttonAward.node.visible = !1;
			let a = this.context.bPvpAward;
			this.init3D(t), this.reuseScrollParts.itemHeight = 160, this.reuseScrollParts.itemWidth = 127, this.reuseScrollParts.setVerticle(!1), this.reuseScrollParts.onItemCreate = function() {
				return new HuDongPartItem
			}, this.reuseScrollParts.onItemChange = a ? (e, a) => {
				e.setPvpAwardPart(t[a])
			} : (e, a) => {
				e.setHuDongPart(t[a])
			}, this.bottomNode.y = 400, this.bottomNode.alpha = 0, cc.tween(this.bottomNode).to(.5, {
				y: 0,
				alpha: 1
			}, cc.OPTION.SINE_IN).start(), this.reuseScrollParts.updateList(t.length), this.registerMsg({
				SUIT_UPDATE: this.onMsgSuitUpdate.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.reuseScrollParts && this.reuseScrollParts.clearAllItems(), this.avatar && (this.avatar.destroy(), this.avatar = null), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		initTouch() {
			new RoleOperate(this.touchNode, this.avatar)
		}
		onMsgSuitUpdate() {
			let t = this.suitId;
			t && mgrSuit.isSuitAwarded(t) && (this.buttonAward.node.visible = !1)
		}
		init3D(t) {
			this.createScene3DBack(1, 25), this.camera.transform.localPosition = new Laya.Vector3(.06, 1.25, 5.68), this.camera.transform.localRotationEuler = new Laya.Vector3(-6, 0, 0), this.avatar = new RoleAvatar(t), this.avatar.transform.localPosition = new Laya.Vector3(0, 0, 0), this.avatar.transform.localRotationEuler = new Laya.Vector3(0, 0, 0), this.scene3DBack.addChild(this.avatar), this.avatar.playJingZi(), this.avatar.on("Exit", this, t => {
				if (!this.destroyed) switch (t) {
					case MODEL_ANIM.ZJZ:
						this.avatar.playAnimation(MODEL_ANIM.MAIN_IDLE, !1, null, .3);
						break;
					case MODEL_ANIM.MAIN_IDLE:
						this.avatar.playJingZi()
				}
			}), this.initTouch()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonAward() {
			mgrAlert.openPanelLoading(UI_NAME.PanelSuitAward, this.suitId)
		}
	}
	class MouseInertiaCalculator {
		constructor() {
			this.mouseX = 0, this.mouseY = 0, this.isTouched = !1, this.deltaMoves = [], this.deltaTimes = [], this.startTouchPosition = new Laya.Vector2, this.lastTouchPosition = new Laya.Vector2, this.lastTouchTime = 0
		}
		onTouchStart(t, e) {
			this.mouseX = t, this.mouseY = e, this.isTouched = !0, this.lastTouchPosition.setTo(t, e), this.startTouchPosition.setTo(t, e);
			for (var a = this.deltaMoves.length - 1; a >= 0; a--) _G.pool.put(this.deltaMoves[a]);
			this.deltaMoves.length = 0, this.deltaTimes.length = 0, this.lastTouchTime = Timer.time
		}
		onTouchMove(t, e) {
			this.isTouched && (this.mouseX = t, this.mouseY = e, this._gatherTouchMove(t, e))
		}
		onTouchEnd(t, e) {
			this.isTouched && (this.mouseX = t, this.mouseY = e, this._gatherTouchMove(t, e), this.isTouched = !1)
		}
		get velocity() {
			let t = new Laya.Vector2(0, 0);
			return this.getVelocity(t), t
		}
		getVelocity(t) {
			var e = this.deltaMoves.length;
			if (0 == e) return;
			t.setTo(0, 0);
			let a = 0;
			for (var i = 0; i < e; i++) t.addSelf(this.deltaMoves[i]), a += this.deltaTimes[i];
			t.divSelf(a)
		}
		get totalDeltaX() {
			return this.lastTouchPosition.x - this.startTouchPosition.x
		}
		get totalDeltaY() {
			return this.lastTouchPosition.y - this.startTouchPosition.y
		}
		_gatherTouchMove(t, e) {
			let a = MouseInertiaCalculator.v2_helper;
			if (a.setValue(t, e), this.deltaMoves.length >= 5) {
				let t = this.deltaMoves.shift();
				this.deltaTimes.shift(), t.set(a).subSelf(this.lastTouchPosition), this.deltaMoves.push(t)
			} else {
				let t = _G.pool.get(Laya.Vector2);
				a.sub(this.lastTouchPosition, t), this.deltaMoves.push(t)
			}
			this.lastTouchPosition.set(a);
			let i = Timer.time;
			this.deltaTimes.push(i - this.lastTouchTime), this.lastTouchTime = i
		}
	}
	MouseInertiaCalculator.v2_helper = new Laya.Vector2;
	class SuitItem$1 extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/SuitItem.json", this._exportNodeInfo = {
				cc_suitSprite: "Laya.Image",
				cc_buttonAward: "UIButton",
				cc_awardIcon: "Laya.Sprite",
				cc_awardCount: "Laya.Label",
				cc_barMask: "UIBarMask",
				cc_barValue: "Laya.Label",
				cc_collectInfo: "Laya.Label"
			}, this.create()
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this)), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgItemChange(t) {
			2 == t.itemDb.type && 1 == t.itemDb.subType && this.refreshState()
		}
		setData(t) {
			if (!this.callable) return this.safeCall(this.setData, t);
			if (t == this.suitId) return;
			this.suitId = t;
			let e = db.get_suit_db(t);
			this.suitSprite.loadImage(e.image);
			let a = String.format(mgrI18n.getText("suitItem.1"), Mathf.random(1, 99).toString());
			this.collectInfo.text = a, this.refreshState()
		}
		refreshState() {
			let t = db.get_suit_db(this.suitId),
				e = mgrSuit.hasPartCount(this.suitId);
			this.barValue.text = `${e}/${t.parts.length}`, this.barMask.progress = e / t.parts.length, this.buttonAward.node.visible = !mgrSuit.isSuitAwarded(this.suitId), this.buttonAward.node.visible && (this.awardCount.text = "*" + t.diamondCount)
		}
		onClick() {
			mgrPart.openPanelSuitDetal(this.suitId)
		}
		on_click_buttonAward() {
			mgrSuit.hasSuit(this.suitId) ? (mgrSuit.getSuitAward(this.suitId, !1), this.buttonAward.interactable = !1, cc.tween(this.buttonAward.node).to(.1, cc.PROP.ALPHA0).hide().start()) : mgrAlert.alertDialog(mgrI18n.getText("panelSuitAward.2"))
		}
	}
	class PanelSuitList extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelSuitList.json", this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.inertia = new MouseInertiaCalculator, this.suitItems = [], this.fromOffset = 0, this.curOffset = 0, this.toOffset = 0
		}
		buildUi() {
			let t = mgrSuit.getAllSuits(this.context);
			this.suits = t;
			for (let t = 0; t < 4; t++) {
				let e = new SuitItem$1;
				e.setParent(this.centerNode), e.originPos = t, this.suitItems.push(e), e.setAlpha(0), e.runTween(cc.tween().delay(.15 * (3 - t)).to(.1, cc.PROP.ALPHA1))
			}
			this.updatePos(-4), cc.tween(this).to(.6, cc.PROP.EMPTY, {
				easing: cc.Ease.sineOut,
				onUpdate: (t, e) => {
					this.updatePos(Mathf.lerp(-4, 0, e))
				},
				onComplete: () => {
					UiHelper.registerTouchEvent(this.resNode, this.onTouchStart.bind(this), this.onTouchMove.bind(this), this.onTouchEnd.bind(this))
				}
			}).start()
		}
		onTouchStart() {
			this.inertia.onTouchStart(Laya.stage.mouseX, Laya.stage.mouseY), this.fromOffset = this.curOffset, cc.clearTween(this)
		}
		onTouchMove() {
			this.inertia.onTouchMove(Laya.stage.mouseX, Laya.stage.mouseY), this.inertia.isTouched && this.updatePos(this.fromOffset - this.inertia.totalDeltaX / 400)
		}
		onTouchEnd() {
			this.inertia.onTouchEnd(Laya.stage.mouseX, Laya.stage.mouseY), this.startScroll()
		}
		updatePos(t) {
			this.curOffset = t;
			let e = this.suits.length;
			var a;
			a = t > 0 ? t + .5 | 0 : t - .5 | 0;
			for (var i = 0; i < this.suitItems.length; i++) {
				var s = this.suitItems[i],
					n = s.originPos + t,
					o = n * Math.PI / 2,
					r = Math.sin(o),
					l = -Math.cos(o);
				s.setPosition(200 * r, 30 * l - 100);
				var c = Mathf.lerp(.6, 1, (l + 1) / 2);
				s.setScale(c, c), s.setZorder(c), n = ((n = n > 0 ? n + .5 | 0 : n - .5 | 0) % 4 + 4) % 4, s.setData(this.suits[((n - a) % e + e) % e])
			}
		}
		startScroll() {
			let t = this.inertia.velocity.x;
			t = Mathf.clamp(t, -4e3, 4e3);
			let e = Mathf.lerpFromInverseLerp(.1, 1, 1e3, 4e3, Math.abs(t)),
				a = .5 * t * e * e / 800;
			this.fromOffset = this.curOffset;
			let i = this.curOffset - a;
			this.toOffset = i < 0 ? i - .5 | 0 : i + .5 | 0, cc.tween(this, !0).to(e, cc.PROP.EMPTY, {
				easing: cc.Ease.quintOut,
				onUpdate: (t, e) => {
					this.updatePos(Mathf.lerp(this.fromOffset, this.toOffset, e))
				}
			}).start()
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelSuitSelect extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelSuitSelect.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_reuseScrollView: "ReuseScrollList",
				cc_text: "Laya.Text",
				cc_emptyLabel: "Laya.Text"
			}
		}
		buildUi() {
			this.reuseScrollView.setVerticle(!0), this.reuseScrollView.eachCount = 3, this.reuseScrollView.itemWidth = 154, this.reuseScrollView.itemHeight = 210, this.reuseScrollView.onItemCreate = function() {
				return new LingGanItem(!0)
			}, this.reuseScrollView.onItemChange = ((t, e) => {
				t.setData(mgrOutside.unusedSuits[e])
			}), mgrOutside.unusedSuits.length && (this.reuseScrollView.updateList(mgrOutside.unusedSuits.length), this.emptyLabel.visible = !1), this.registerMsg({
				UI_CLICK_LING_GAN_ITEM: this.onMsgClickLingGanItem.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.reuseScrollView && this.reuseScrollView.clearAllItems(), super.dispose()
		}
		onMsgClickLingGanItem() {
			Laya.timer.frameOnce(1, this, this.close)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelSzz extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelSzz.json", this._exportNodeInfo = {
				cc_roleName: "Laya.Label",
				cc_buttonColorEggManDuoLa: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_buttonRank: "UIButton",
				cc_bottomNode: "Laya.Sprite",
				cc_centerNode: "Laya.Sprite",
				cc_buttonJoin: "UIButton",
				cc_buttonSzzAward: "UIButton",
				cc_barMaskLike: "UIBarMask",
				cc_likeValue: "Laya.Label",
				cc_nodeBtn: "Laya.Sprite",
				cc_buttonYes1: "UIButton",
				cc_adv1: "Laya.Sprite",
				cc_buttonYes2: "UIButton",
				cc_adv2: "Laya.Sprite",
				cc_buttonYes3: "UIButton",
				cc_adv3: "Laya.Sprite",
				cc_likeCount: "Laya.Label",
				cc_likeTime: "Laya.Label",
				cc_textTips: "Laya.Text"
			}, this.instOrBanner = new AdvInstOrBanner("enter_szz", ""), this.isAnimating = !1, this.enterMainWhenClose = !0, this.lastRndAnim = 0, this.animIdx = 0, this.showFreeLike = !1
		}
		addPreloadRes(t) {
			t.addTexture2D("res/texture/sf_noise_clouds_01.png"), mgrPart.addPartResList(mgrPart.partsWear, t), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.ZBS_XI_HUAN).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.ZBS_BU_XI_HUAN).path), t.addAnimationClip(db.get_animation_db("zbs-xuanze01").path), t.addAnimationClip(db.get_animation_db("zbs-xuanze02").path), t.addAnimationClip(db.get_animation_db("zbs-xuanze03").path), t.addModel(db.get_effect_db("113").res), mgrSzz.setLoadedParts(mgrPart.partsWear)
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonRank.node, "pnl_main_20.png"), mgrI18n.trySetI18nImage(this.buttonJoin.node, "pnl_ssz_03.png"), mgrI18n.trySetI18nImage(this.buttonSzzAward.node, "pnl_ssz_04.png"), this.textTips.text = mgrI18n.getText("panelSzz.2"), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_SZZ), GameStatistics.statisOnStageStart(7503), this.topLeftNode.x = -150, UiHelper.playMoveIn(this.topLeftNode, 0, .3, 1);
			this.createScene3DBack(0, 30), this.camera.transform.localPosition = new Laya.Vector3(0, 1.35, 2.08), this.camera.transform.localRotationEuler = new Laya.Vector3(-1, 0, 0);
			let t = 1 * Math.tan(15 * Mathf.Deg2Rad) * 2,
				e = _G.canvasWidth / _G.canvasHeight * t;
			this.panel3d = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createPlane(e, t, 2, 2)), this.panel3d.transform.localPositionZ = -1, this.panel3d.transform.localRotationEulerX = 90, this.panel3d.active = !1, this.camera.addChild(this.panel3d), this.panelMat = new PaintMaterialTest, this.panelMat.renderMode = Laya.UnlitMaterial.RENDERMODE_ADDTIVE, this.panel3d.meshRenderer.sharedMaterial = this.panelMat;
			let a = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createPlane(2.16, 3, 10, 10));
			a.transform.localPositionY = 1.2, a.transform.localPositionZ = -2.4, a.transform.localRotationEulerX = 87, this.scene3DBack.addChild(a), mgrRes.loadRes("res/texture/mirror.png", RES_TYPE.TEXTURE2D, t => {
				if (this.destroyed) return;
				let e = new PaintMaterialTest;
				e.albedoTexture = t, a.meshRenderer.sharedMaterial = e
			}), this.animatorPlayer = new AnimatorFixedPlayer;
			let i = mgrSzz.getNextSzz();
			this.lastSzz = i, this.initTip(), this.refreshRole(i.parts, i.renqi, i.name, 1), 0 != db.cop.b_adv_full_screen && UiHelper.addClickEvent(this.resNode.getChildByName("bg"), this.onClickMask.bind(this), null, .5, !1), this.registerMsg({
				LOTTERY_SUC: this.onMsgLotterySuc.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				JUMP_PANEL_BEFORE: this.onMsgJumpPanelBefore.bind(this)
			}), this.startProcMsg(), this.schedule(1, this.refreshLikeCount), this.checkColorEggManDuoLa(), this.playMenuIn(.5), this.scheduleOnce(1, () => {
				mgrGuide.registerGuideNode(GUD_REG_NODE.PANELSZZ_BUTTONYES, this.buttonYes2.node, !0), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELSZZ_BUTTONAWARD, this.buttonSzzAward.node, !0)
			})
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.lotteryTip && this.lotteryTip.dispose(), this.animatorPlayer.dispose(), this.clearTex(), this.avatar1 && (cc.clearTween(this.avatar1.transform), this.avatar1.destroy(), this.avatar1 = null), super.dispose(), this.enterMainWhenClose && mgrGame.tryEnterMain(), mgrGuide.unregisterGuideNode("PanelSzz.btnYes"), GameStatistics.statisOnStageEnd(7503)
		}
		clearTex() {
			this.texture2d && (this.texture2d.destroy(), this.texture2d = null)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		regGuide() {}
		onMsgLotterySuc() {
			this.refreshLottery()
		}
		onMsgAdvShowSuc(t) {
			"free_like" == t.advName && (BaseFacade.mItem.addItem("1014", 1, null), t.params && t.params > 0 && this.clickLike(t.params))
		}
		onMsgJumpPanelBefore() {
			this.enterMainWhenClose = !1
		}
		onClickMask() {
			mgrAdv.getActive("free_like") && !this.isAnimating && 0 == BaseFacade.mItem.getItemCount("1014") ? (console.log("QT_ szz _ mask  " + !0), mgrAdv.statisVideoClick("free_like"), mgrAdv.dispatchAdv("free_like", 0)) : console.log("QT_ szz _ mask  " + !1)
		}
		initTip() {
			this.lotteryTip = new UITip(this.buttonSzzAward.node, function() {
				return mgrSzz.canLottery() ? 0 : -1
			})
		}
		enableAllYes() {
			this.buttonYes1.interactable = !0, this.buttonYes2.interactable = !0, this.buttonYes3.interactable = !0, cc.tween(this.nodeBtn, !0).to(.2, cc.PROP.ALPHA1).start()
		}
		disableAllYes() {
			this.buttonYes1.interactable = !1, this.buttonYes2.interactable = !1, this.buttonYes3.interactable = !1, cc.tween(this.nodeBtn, !0).to(.2, {
				alpha: .5
			}).start()
		}
		initRole(t) {
			this.avatar1 = new RoleAvatar(t), this.scene3DBack.addChild(this.avatar1), this.animIdx = (this.animIdx + Mathf.random(2)) % 3, this.avatar1.playAnimation("zbs-xuanze0" + (this.animIdx + 1))
		}
		refreshRole(t, e, a, i = 0) {
			this.avatar1 ? this.avatar1.setParts(t, !1, null, !0) : this.initRole(t), this.roleName.text = a, this.refreshLikeCount(), this.refreshLottery()
		}
		refreshLikeCount() {
			let t = BaseFacade.mItem.getItemCount("1014"),
				e = BaseFacade.mAutoIncreaseItem.getMaxCount("1014");
			if (this.likeCount.text = `${mgrI18n.getText("panelSzz.1")}   ${t}/${e}`, t >= e) this.likeTime.changeText("");
			else {
				let t = BaseFacade.mAutoIncreaseItem.getNextTime("1014") - Timer.time;
				this.likeTime.text = Tools.formatTime(t)
			}
			0 == t ? mgrAdv.getActive("free_like") ? (this.showFreeLike || (this.showFreeLike = !0, mgrAdv.statisVideoShow("free_like")), this.nodeBtn.visible = !0, this.setAdv(!0)) : this.nodeBtn.visible = !1 : (this.nodeBtn.visible = !0, this.setAdv(!1))
		}
		setAdv(t) {
			for (let e = 1; e <= 3; e++) this["adv" + e].visible = t
		}
		refreshLottery(t = !1) {
			this.lotteryTip.updateTip(), mgrSzz.canLottery() ? this._lotterBtnEffect || (this._lotterBtnEffect = !0, UiHelper.playRotCycle(this.buttonSzzAward.node)) : this._lotterBtnEffect && (this._lotterBtnEffect = !1, cc.clearTween(this.buttonSzzAward.node), this.buttonSzzAward.node.rotation = 0), t ? this.barMaskLike.progressTo(mgrSzz.likeCount / db.game_cnf.like_lottery_count) : this.barMaskLike.progress = mgrSzz.likeCount / db.game_cnf.like_lottery_count, this.likeValue.text = `${mgrSzz.likeCount}/${db.game_cnf.like_lottery_count}`
		}
		playLike(t) {
			if (this.avatar1) {
				switch (this.isAnimating = !0, this.disableAllYes(), t) {
					case 1:
						this.avatar1.playAnimation(MODEL_ANIM.ZBS_BU_XI_HUAN);
						break;
					case 2:
						this.avatar1.playAnimation(MODEL_ANIM.HUFU_ZANTONG1);
						break;
					case 3:
						this.avatar1.playAnimation(MODEL_ANIM.ZBS_XI_HUAN)
				}
				this.scheduleOnce(.4, function() {
					mgrAlert.playParticleEffect("130", new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2 + 50), 1, .5)
				}), this.scheduleOnce(1.5, () => {
					let t = mgrSzz.getNextSzz(this.lastSzz.parts);
					this.lastSzz = t, this.playRoleOut(t.parts, t.renqi, t.name, !0)
				})
			}
		}
		playRoleOut(t, e, a, i) {
			if (this.avatar1) {
				this.isAnimating = !0;
				let e = UiHelper.screenShot(this.camera, _G.canvasWidth, _G.canvasHeight);
				this.panelMat.albedoTexture = e, this.clearTex(), this.texture2d = e, this.panel3d.active = !0, this.avatar1.setParts(t, !1, null, !0), this.lastRndAnim = (this.lastRndAnim + Mathf.random(2)) % 3, this.avatar1.playAnimation("zbs-xuanze0" + (this.lastRndAnim + 1)), this.panelMat.playDissolveOutFromCenter(2, 0, () => {
					this.destroyed || (i && mgrSzz.randomLoad(), this.roleName.text = a, this.panel3d.active = !1, this.isAnimating = !1, this.enableAllYes())
				});
				let s = Laya.Point.TEMP.setTo(_G.canvasWidth / 2, _G.canvasHeight / 2);
				mgrAlert.playParticleEffect("113", s, 2, .5)
			}
		}
		playMenuIn(t = 0) {
			this.topLeftNode.x = -150, this.bottomNode.y = 380;
			var e = () => {
				cc.tween(this.topLeftNode).to(.4, {
					x: 0
				}, {
					easing: cc.Ease.sineIn
				}).start(), cc.tween(this.bottomNode).to(.4, {
					y: 0
				}, {
					easing: cc.Ease.sineIn
				}).start(), this.refreshLottery()
			};
			t ? Timer.callLater(t, e, this) : e()
		}
		clickLike(t) {
			if (!this.isAnimating)
				if (GameStatistics.statisCommonEvent(3012), BaseFacade.mItem.subItem("1014", 1, null)) {
					mgrSzz.addLike(), this.refreshLikeCount(), this.playLike(t);
					let e = UiHelper.getSelfGlobalPos(this["buttonYes" + t].node, new Laya.Point),
						a = this.barMaskLike.node.localToGlobal(new Laya.Point(this.barMaskLike.progressPosition, 0), !1);
					for (let t = 0; t < 3; t++) UiHelper.playBezierTo("res/icon/star.png", e, a, 1 + .05 * t, 1, () => {
						this.destroyed || this.refreshLottery(!0)
					})
				} else mgrAdv.statisVideoClick("free_like"), mgrAdv.dispatchAdv("free_like", t)
		}
		checkColorEggManDuoLa() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.MAN_DUO_LA, EGGS_STEP.FIRST) || (this.buttonColorEggManDuoLa.node.visible = !1)
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonRank() {
			mgrAlert.openPanelLoading(UI_NAME.PanelRank), GameStatistics.statisCommonEvent(7025)
		}
		on_click_buttonYes1() {
			this.clickLike(1)
		}
		on_click_buttonYes2() {
			this.clickLike(2)
		}
		on_click_buttonYes3() {
			this.clickLike(3)
		}
		on_click_buttonJoin() {
			GameStatistics.statisCommonEventOnce(7021), mgrPart.openPanelRoom(ROOM_TYPE.SZZ, mgrSzz.getMyParts(), () => {
				_G.sendMsg("JOIN_SZZ")
			})
		}
		on_click_buttonSzzAward() {
			GameStatistics.statisCommonEvent(3013), mgrAlert.openPanelLoading(UI_NAME.PanelLottery)
		}
		on_click_buttonColorEggManDuoLa() {
			this.buttonColorEggManDuoLa.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggManDuoLa.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggManDuoLa.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.man_du_la)
		}
	}
	class PanelSzzShow extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelSzzShow.json", this._exportNodeInfo = {
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_bottomNode: "Laya.Sprite",
				cc_buttonAnim1: "UIButton",
				cc_buttonAnim2: "UIButton",
				cc_buttonAnim3: "UIButton",
				cc_tipText: "Laya.Text"
			}, this.bianshenEffect = []
		}
		buildUi() {
			this.init3D(), this.tipText.text = mgrI18n.getText("panelSzzShow.2"), this.buttonClose.node.visible = !1;
			for (let t = 1; t <= 3; t++) {
				this["buttonAnim" + t].transition = UIButton.TRANSITION_NONE
			}
		}
		dispose() {
			for (let t = 0; t < this.bianshenEffect.length; t++) _G.poolManager.put(this.bianshenEffect[t]);
			this.avatar && this.avatar.destroy(), super.dispose()
		}
		init3D() {
			this.createScene3DBack(1, 60), this.camera.transform.localPosition = new Laya.Vector3(0, 1.35, 1.1), this.camera.transform.localRotationEuler = new Laya.Vector3(-3, 0, 0), this.avatar = new RoleAvatar(mgrSzz.getMyParts()), this.avatar.transform.localPosition = new Laya.Vector3(0, 0, 0), this.avatar.transform.localRotationEuler = new Laya.Vector3(0, 0, 0), this.scene3DBack.addChild(this.avatar), this.avatar.playIdle()
		}
		onSelect(t) {
			GameStatistics.statisCommonEvent(7023);
			for (let a = 1; a <= 3; a++) {
				var e = this["buttonAnim" + a];
				e.interactable = !1, t == a ? cc.tween(e.node.parent).to(.3, {
					x: 0,
					y: -327,
					scaleX: 1.2,
					scaleY: 1.2
				}).to(.2, cc.PROP.ALPHA0).start() : cc.tween(e.node.parent).to(.1, cc.PROP.SCALE_ALPHA0, cc.OPTION.BACK_IN).hide().start()
			}
			cc.tween(this.tipText).to(.2, cc.PROP.ALPHA0).hide().start(), this.playAnim(t)
		}
		playAnim(t) {
			let e = new ResLoader;
			e.add(db.get_animation_db(MODEL_ANIM.PTJS00).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_PTJS00).path, RES_TYPE.ANIMATIONCLIP);
			let a = "pt_jiesuan-ptjs0" + t;
			e.add(db.get_animation_db(a).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db("face_pt_jiesuan-face_ptjs0" + t).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_effect_db("126").res, RES_TYPE.PREFAB3D), e.add(db.get_effect_db("127").res, RES_TYPE.PREFAB3D), mgrAlert.openWait(e, () => {
				var t;
				this.avatar.playAnimation(MODEL_ANIM.PTJS00, !1, a), this.avatar.once("Exit", this, this.onAnimFinished), (t = _G.poolManager.get(Particle, "126")).setParent(this.scene3DBack), t.play(), this.bianshenEffect.push(t), (t = _G.poolManager.get(Particle, "127")).setParent(this.scene3DBack), t.play(), this.bianshenEffect.push(t)
			})
		}
		onAnimFinished() {
			this.scheduleOnce(.1, () => {
				mgrAlert.openPanelLoading(UI_NAME.PanelJoinSuc, null, this.close.bind(this))
			})
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonAnim1() {
			this.onSelect(1)
		}
		on_click_buttonAnim2() {
			this.onSelect(2)
		}
		on_click_buttonAnim3() {
			this.onSelect(3)
		}
	}
	class TalkItem extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/TalkItem.json", this._exportNodeInfo = {
				cc_leftPnl: "Laya.Sprite",
				cc_leftBg: "Laya.Image",
				cc_leftText: "Laya.Label",
				cc_leftHead: "Laya.Sprite",
				cc_rightPnl: "Laya.Sprite",
				cc_rightBg: "Laya.Image",
				cc_readed: "Laya.Label",
				cc_rightText: "Laya.Label",
				cc_rightHead: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			this.leftText.text = "", this.rightText.text = ""
		}
		setData(t, e, a, i) {
			if (!this.callable) return void this.safeCall(this.setData, t, e, a, i);
			this.leftPnl.visible = !1, this.rightPnl.visible = !1;
			let s = db.get_role_db(e),
				n = mgrTalk.getTextShowTime(a);
			t ? (this.leftText, this.leftBg, this.leftHead.loadImage(s.head), this.readed.visible = !1) : (this.rightText, this.rightBg, this.rightHead.loadImage(s.head), i ? (this.readed.visible = !1, cc.tween(this.readed).delay(n + .1).show()) : this.readed.visible = !0), i ? (this.resNode.alpha = 0, cc.tween(this.resNode).to(.2, cc.PROP.ALPHA1).start()) : (cc.clearTween(this.resNode), this.resNode.alpha = 1)
		}
	}
	class PanelTalk extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelTalk.json", this._exportNodeInfo = {
				cc_imageTalkBg: "Laya.Image",
				cc_titleName: "Laya.Label",
				cc_buttonClose: "UIButton",
				cc_spriteTalkBg: "Laya.Sprite",
				cc_dialogScroll: "ReuseScrollList",
				cc_buttonStart: "UIButton",
				cc_topNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_talk", "banner_talk"), this.isTalking = !0
		}
		buildUi() {
			console.log("对话=====", this), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_TALK), this.imageTalkBg.height = 770 + _G.canvasFitHeight - 1024, this.dialogScroll.height = this.imageTalkBg.height - 170, this.spriteTalkBg.height = this.imageTalkBg.height - 170, this.dialogScroll.onItemCreate = function() {
				return new TalkItem
			};
			let t = -1;
			this.dialogScroll.onItemChange = ((e, a) => {
				let i = mgrTalk.talkTexts[a];
				e.setData(i.bLeft, i.roleId, i.text, a > t), t = Math.max(t, a)
			}), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELTALK_BUTTONSTART, this.buttonStart.node, !0), this.registerMsg({
				TALK_UPDATE_TEXT: this.onMsgTalkUpdateText.bind(this),
				TALK_SHOW_BTN: this.onMsgTalkShowBtn.bind(this),
				TALK_FINISH: this.onMsgTalkFinish.bind(this)
			}), this.startProcMsg();
			let e = db.get_level_db(mgrLevel.getLastLevel());
			this.titleName.text = mgrI18n.getText(db.get_role_db(e.roleId).tlite), mgrTalk.startTalk(e.talkId), this.buttonClose.node.visible = !_G.isGuiding, mgrGuide.sendMsgKey("FINISH_TALK")
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.dialogScroll && this.dialogScroll.clearAllItems(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		regGuide() {
			mgrGuide.sendMsgKey("PANEL_TALK_OPENED")
		}
		onMsgTalkUpdateText() {
			let t = mgrTalk.talkTexts;
			t[t.length - 1].bLeft;
			this.isTalking = !0, this.onTalkFinish()
		}
		onMsgTalkShowBtn(t) {
			console.error("没有按钮了")
		}
		onMsgTalkFinish(t) {
			this.onMsgTalkUpdateText();
			let e = mgrTalk.talkTexts;
			this.dialogScroll.updateList(e.length, e.length - 1, 1, !0)
		}
		onTalkFinish() {
			this.isTalking = !1, mgrTalk.next()
		}
		onClickBg() {
			if (mgrTalk.isDone) {
				let t = mgrLevel.getLastLevel();
				t > 0 && (GameStatistics.statisCommonEvent(11e3 + t, 1), GameStatistics.statisOnStageStart(12e3 + t));
				let e = db.get_level_db(t);
				mgrPart.openPanelRoom(ROOM_TYPE.LEVEL, e.parts.length ? e.parts : null, () => {
					_G.sendMsg("JOIN_LEVEL"), mgrTalk.endTalk(), this.close()
				}), mgrGuide.isGuiding || GameStatistics.statisCommonEvent(5030)
			} else this.isTalking && (this.unschedule(this.onTalkFinish), this.dialogScroll.updateList(mgrTalk.talkTexts.length, mgrTalk.talkTexts.length - 1, 0, !0), this.onTalkFinish())
		}
		on_click_buttonClose() {
			this.close(), GameStatistics.statisOnStageEnd(7507)
		}
		on_click_buttonStart() {
			this.onClickBg()
		}
	}
	const KEY_JUMP_GAME = "KEY_JUMP_GAME";
	class PanelTryGame extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelTryGame.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_sprite: "Laya.Sprite",
				cc_btnClose: "UIButton",
				cc_scroll: "ReuseScrollList",
				cc_item: "Laya.Sprite"
			}, this._instOrBanner = new AdvInstOrBanner("", "")
		}
		buildUi() {
			this.scroll.onItemCreate = (() => {
				let t = new GameItem$1;
				return t.createFromNode(UiHelper.cloneSprite(this.item)), t
			}), this.scroll.onItemChange = ((t, e) => {
				t.setGameInfo(this._list[e])
			}), this.registerMsg({
				[BASE_MSG.SDK_OPEN_JUMP_RESULT]: this.onMsgOpenJumpResult.bind(this),
				[BASE_MSG.SDK_JUMP_GAME_REWARD]: this.onMsgJumpGameReward.bind(this)
			}), this.startProcMsg(), mgrSdk.openJump("reward"), mgrI18n.trySetI18nImage(this.sprite, "pnl_class_color_eggs_10.png")
		}
		dispose() {
			this.stopProcMsg(), this.scroll && this.scroll.clearAllItems(), this._instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this._instOrBanner.onFocus(t)
		}
		onMsgOpenJumpResult(t) {
			if ("reward" == t.type) {
				let e = t.jumpInfo;
				this.fillData(e)
			}
		}
		onMsgJumpGameReward(t) {
			this.close(!0)
		}
		fillData(t) {
			this._list = t, this.scroll.updateList(t.length)
		}
		on_click_btnClose() {
			this.close()
		}
	}
	class GameItem$1 extends ViewBase {
		onCreateComplete() {
			this.icon = this.getChildSprite("icon"), this.awardNode = this.getChildSprite("countBg"), this.count = this.awardNode.getChildByName("awardCount"), UiHelper.addScrollViewClick(this.icon, () => {
				this.data && mgrSdk.jumpOtherGame(this.data.index, "reward", this.data.index)
			}, void 0, !0), this.resNode.alpha = 0, cc.tween(this.resNode).to(.2, cc.PROP.ALPHA1).start()
		}
		setGameInfo(t) {
			this.data = t, this.icon.loadImage(t.url), t.rewards && t.rewards.length && (this.count.text = "*" + t.rewards[0][1]), this.awardNode.visible = !t.bReceived
		}
	}
	class PanelVideoRankShare extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelVideoRankShare.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_labelTips: "Laya.Label",
				cc_buttonClose: "UIButton",
				cc_buttonShare: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(7601, 0), this.registerMsg({
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onMsgVideoShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_FAIL]: this.onMsgVideoShareFail.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgVideoShareSuc() {
			GameStatistics.statisCommonEvent(7601, 2), this.close()
		}
		onMsgVideoShareFail() {
			GameStatistics.statisCommonEvent(7601, 3), this.close()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonShare() {
			mgrSdk.stopRecordVideo(), mgrSdk._videoRecordTime < mgrSdk.min_record_time ? mgrAlert.alertDialog("还没有可以分享的录屏哦，去神秘舞会看看吧！", "提示", () => {
				mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, {}, this.close.bind(this))
			}, () => {}) : (mgrSdk.shareVideo(), GameStatistics.statisCommonEvent(7601, 1))
		}
	}
	class PanelVideoRankTips extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelVideoRankTips.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_buttonShare: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(7602, 0), this.registerMsg({
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onMsgVideoShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_FAIL]: this.onMsgVideoShareFail.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgVideoShareSuc() {
			GameStatistics.statisCommonEvent(7602, 2), this.close()
		}
		onMsgVideoShareFail() {
			GameStatistics.statisCommonEvent(7602, 3), this.close()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonShare() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisCommonEvent(7602, 1), mgrSdk._videoRecordTime < mgrSdk.min_record_time ? mgrAlert.alertDialog("还没有可以分享的录屏哦，去神秘舞会看看吧！", "提示", () => {
				this.context && this.context.fOnClick && this.context.fOnClick(), mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, {}, this.close.bind(this))
			}, () => {}) : mgrSdk.shareVideo()
		}
	}
	class PanelVideoRankTipsRemote extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelVideoRankTipsRemote.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_rankBg: "Laya.Image",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			db.cop.get_rank_tip_url && this.rankBg.loadImage(db.cop.get_rank_tip_url)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelVideoShareReward extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelVideoShareReward.json", this.panelStyle = 0, this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_buttonSure: "UIButton",
				cc_buttonSureAd: "UIButton"
			}, this.bReceivedNormalAward = !1
		}
		buildUi() {
			this.fillAd(), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"share_part" == t.advName && (this.bReceivedNormalAward ? mgrGame.tryGetSharePartAward(!0) : (mgrGame.tryGetShareAward(), mgrGame.tryGetSharePartAward(!0)), this.close())
		}
		fillAd() {
			mgrGame.videoShareAwardCount <= 0 ? (this.buttonClose.node.visible = !1, this.buttonSure.node.visible = !0, this.buttonSureAd.node.visible = !1) : mgrGame.videoShareAwardCount >= 1 && mgrAdv.checkActive("share_part") ? (this.buttonClose.node.visible = !0, this.buttonSure.node.visible = !1, this.buttonSureAd.node.visible = !0, mgrAdv.statisVideoShow("share_part")) : (this.buttonClose.node.visible = !0, this.buttonSure.node.visible = !1, this.buttonSureAd.node.visible = !1)
		}
		on_click_buttonSure() {
			mgrGame.tryGetShareAward(), mgrGame.tryGetSharePartAward(), this.bReceivedNormalAward = !0, this.fillAd()
		}
		on_click_buttonClose() {
			this.bReceivedNormalAward || mgrGame.tryGetShareAward(), this.close()
		}
		on_click_buttonSureAd() {
			mgrAdv.statisVideoClick("share_part"), mgrAdv.dispatchAdv("share_part", {}, !0)
		}
	}
	class PanelWaitTime extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelWaitTime.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_rotSprite: "Laya.Sprite"
			}
		}
		buildUi() {
			let t = this.context || 3;
			cc.tween(this.rotSprite).repeat(t, cc.tween().by(1, {
				rotation: 360
			})).call(this.close.bind(this, null)).start()
		}
	}
	class Temp extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/Temp.json", this._exportNodeInfo = {
				cc_topNode: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite"
			}
		}
		buildUi() {}
	}

	function requireModule(t) {
		switch (t) {
			case "PanelActiveClass":
				return PanelActiveClass;
			case "PanelActiveCp":
				return PanelActiveCp;
			case "PanelActiveCpTestPreview":
				return PanelActiveCpTestPreview;
			case "PanelActiveDance":
				return PanelActiveDance;
			case "PanelActiveDanceNew":
				return PanelActiveDanceNew;
			case "PanelActiveTest":
				return PanelActiveTest;
			case "PanelAdvCostDialog":
				return PanelAdvCostDialog;
			case "PanelAdvDialog":
				return PanelAdvDialog;
			case "PanelCat":
				return PanelCat;
			case "PanelCatLvup":
				return PanelCatLvup;
			case "PanelChallengePreview":
				return PanelChallengePreview;
			case "PanelClassColorEggs":
				return PanelClassColorEggs;
			case "PanelClassOutSide":
				return PanelClassOutSide;
			case "PanelClassReward":
				return PanelClassReward;
			case "PanelClassRoleDetail":
				return PanelClassRoleDetail;
			case "PanelClassRoleGet":
				return PanelClassRoleGet;
			case "PanelClassRoom":
				return PanelClassRoom;
			case "PanelClassStudenMatchingStageResult":
				return PanelClassStudenMatchingStageResult;
			case "PanelClassStudenMathStageResult":
				return PanelClassStudenMathStageResult;
			case "PanelClassStudenStageResult":
				return PanelClassStudenStageResult;
			case "PanelClassStudentMatchingStage":
				return PanelClassStudentMatchingStage;
			case "PanelClassStudentMathStage":
				return PanelClassStudentMathStage;
			case "PanelClassStudentStage":
				return PanelClassStudentStage;
			case "PanelClassTeacherChangeScore":
				return PanelClassTeacherChangeScore;
			case "PanelClassTeacherMatchingStage":
				return PanelClassTeacherMatchingStage;
			case "PanelClassTeacherMathStage":
				return PanelClassTeacherMathStage;
			case "PanelClassTeacherStage":
				return PanelClassTeacherStage;
			case "PanelCoinGift":
				return PanelCoinGift;
			case "PanelColorEggGet":
				return PanelColorEggGet;
			case "PanelContract":
				return PanelContract;
			case "PanelCpBooks":
				return PanelCpBooks;
			case "PanelCpTest":
				return PanelCpTest;
			case "PanelCpTestPreview":
				return PanelCpTestPreview;
			case "PanelDanceAnswer":
				return PanelDanceAnswer;
			case "PanelDanceDraw":
				return PanelDanceDraw;
			case "PanelDancePastRole":
				return PanelDancePastRole;
			case "PanelDancePreDestination":
				return PanelDancePreDestination;
			case "PanelDancePreview":
				return PanelDancePreview;
			case "PanelDanceRoleGet":
				return PanelDanceRoleGet;
			case "PanelDialog":
				return PanelDialog;
			case "PanelDiamondGift":
				return PanelDiamondGift;
			case "PanelDream":
				return PanelDream;
			case "PanelEgg":
				return PanelEgg;
			case "PanelFind":
				return PanelFind;
			case "PanelFishGame":
				return PanelFishGame;
			case "PanelFishGet":
				return PanelFishGet;
			case "PanelFishShow":
				return PanelFishShow;
			case "PanelFollow":
				return PanelFollow;
			case "PanelFriends":
				return PanelFriends;
			case "PanelGameLoading1":
				return PanelGameLoading1;
			case "PanelGuide":
				return PanelGuide;
			case "PanelHotActivity":
				return PanelHotActivity;
			case "PanelInside":
				return PanelInside;
			case "PanelInstall":
				return PanelInstall;
			case "PanelItemGet":
				return PanelItemGet;
			case "PanelJoinSuc":
				return PanelJoinSuc;
			case "PanelLanguageDialog":
				return PanelLanguageDialog;
			case "PanelLingGan":
				return PanelLingGan;
			case "PanelLoading":
				return PanelLoading;
			case "PanelLottery":
				return PanelLottery;
			case "PanelMain":
				return PanelMain;
			case "PanelMangHe":
				return PanelMangHe;
			case "PanelMangHeOpen":
				return PanelMangHeOpen;
			case "PanelManicure":
				return PanelManicure;
			case "PanelManicurePreview":
				return PanelManicurePreview;
			case "PanelManicureResult":
				return PanelManicureResult;
			case "PanelMoreGame":
				return PanelMoreGame;
			case "PanelNativeAdv":
				return PanelNativeAdv;
			case "PanelNativeBanner":
				return PanelNativeBanner;
			case "PanelNotice":
				return PanelNotice;
			case "PanelOffline":
				return PanelOffline;
			case "PanelOrder":
				return PanelOrder;
			case "PanelOutside":
				return PanelOutside;
			case "PanelOver":
				return PanelOver;
			case "PanelOverCommon":
				return PanelOverCommon;
			case "PanelOverRemedy":
				return PanelOverRemedy;
			case "PanelPartInfo":
				return PanelPartInfo;
			case "PanelPhone":
				return PanelPhone;
			case "PanelPhoto":
				return PanelPhoto;
			case "PanelPvp":
				return PanelPvp;
			case "PanelPvpCard":
				return PanelPvpCard;
			case "PanelPvpDeclare":
				return PanelPvpDeclare;
			case "PanelPvpOver":
				return PanelPvpOver;
			case "PanelPvpReward":
				return PanelPvpReward;
			case "PanelPvpRongYao":
				return PanelPvpRongYao;
			case "PanelPvpSelect":
				return PanelPvpSelect;
			case "PanelQuest":
				return PanelQuest;
			case "PanelQuestGift":
				return PanelQuestGift;
			case "PanelRank":
				return PanelRank;
			case "PanelRankHuDong":
				return PanelRankHuDong;
			case "PanelRankVideo":
				return PanelRankVideo;
			case "PanelReconnectDialog":
				return PanelReconnectDialog;
			case "PanelRoleLvup":
				return PanelRoleLvup;
			case "PanelRolePreDestination":
				return PanelRolePreDestination;
			case "PanelRoleTest":
				return PanelRoleTest;
			case "PanelRoleTestOver":
				return PanelRoleTestOver;
			case "PanelRoom":
				return PanelRoom;
			case "PanelSchoolYearbook":
				return PanelSchoolYearbook;
			case "PanelSetting":
				return PanelSetting;
			case "PanelShare":
				return PanelShare;
			case "PanelShoe":
				return PanelShoe;
			case "PanelShoeColorEggs":
				return PanelShoeColorEggs;
			case "PanelShoeColorEggTip":
				return PanelShoeColorEggTip;
			case "PanelShoeSelect":
				return PanelShoeSelect;
			case "PanelShoeSelectResult":
				return PanelShoeSelectResult;
			case "PanelShop":
				return PanelShop;
			case "PanelShopLvup":
				return PanelShopLvup;
			case "PanelSign":
				return PanelSign;
			case "PanelSkincare":
				return PanelSkincare;
			case "PanelStory":
				return PanelStory;
			case "PanelSubscribe":
				return PanelSubscribe;
			case "PanelSuit":
				return PanelSuit;
			case "PanelSuitAward":
				return PanelSuitAward;
			case "PanelSuitDetail":
				return PanelSuitDetail;
			case "PanelSuitList":
				return PanelSuitList;
			case "PanelSuitSelect":
				return PanelSuitSelect;
			case "PanelSzz":
				return PanelSzz;
			case "PanelSzzShow":
				return PanelSzzShow;
			case "PanelTalk":
				return PanelTalk;
			case "PanelTryGame":
				return PanelTryGame;
			case "PanelVideoRankShare":
				return PanelVideoRankShare;
			case "PanelVideoRankTips":
				return PanelVideoRankTips;
			case "PanelVideoRankTipsRemote":
				return PanelVideoRankTipsRemote;
			case "PanelVideoShareReward":
				return PanelVideoShareReward;
			case "PanelWaitTime":
				return PanelWaitTime;
			case "Temp":
				return Temp;
			default:
				return console.error("requireModule 找不到面板:", t), null
		}
	}
	class Start extends Laya.Script {
		constructor() {
			super(...arguments), this._loop = 0, this._time = 0
		}
		onAwake() {
			console.log("------------------------ start onAwake ------------------------"), Laya.MiniAdpter && (Laya.MiniAdpter.autoCacheFile = !0), Laya.MiniAdpter && (Laya.MiniAdpter.AutoCacheDownFile = !0), Logger.setLogLevel(3), Timer.initTime(), Laya.stage.on(Laya.Event.VISIBILITY_CHANGE, this, function() {
				Laya.stage.isVisibility ? (console.log("game.EVENT_SHOW"), Timer.updateTime(), _G.sendMsg(BASE_MSG.SYS_SHOW)) : (console.log("game.EVENT_HIDE"), _G.sendMsg(BASE_MSG.SYS_HIDE))
			}), __init_laya_ex__(), __init_vector2_ex__(), _G.requireModule = requireModule, TweenSystem.create()
		}
		onEnable() {
			console.log("------------------------ start onEnable ------------------------")
		}
		onStart() {
			console.log("------------------------ start onStart ------------------------"), Laya.loader.load("url_path.json", new Laya.Handler(this, t => {
				t.path && !Laya.Browser.onPC && (Laya.URL.basePath = t.path), mgrScene.runScene(SceneMain, PanelLoading)
			}))
		}
		onUpdate() {
			Timer.updateTime(), this._loop++;
			let t = Timer.time - this._time;
			t < .5 || (_G.FPS = this._loop / t | 0, this._loop = 0, this._time = Timer.time)
		}
		onDisable() {
			console.log("------------------------ start onDisable ------------------------")
		}
	}
	var Direction;
	! function(t) {
		t[t.Reverse = -1] = "Reverse", t[t.Toggle = 0] = "Toggle", t[t.Forward = 1] = "Forward"
	}(Direction || (Direction = {}));
	class UITweener extends Laya.Script {
		constructor() {
			super(), this.method = "Linear", this.style = "Once", this.ignoreTimeScale = !0, this.delay = 0, this.duration = 1, this.tweenGroup = 0, this.startFromFrom = !0, this.startFactor = 0, this.fixedUpdateDelta = !1, this.propName1 = "", this.propValue1 = 0, this.propName2 = "", this.propValue2 = 0, this.mStarted = !1, this.mStartTime = 0, this.mDuration = 0, this.mAmountPerDelta = 1e3, this.mFactor = 0
		}
		get amountPerDelta() {
			return this.mDuration != this.duration && (this.mDuration = this.duration, this.mAmountPerDelta = Math.abs(this.duration > 0 ? 1 / this.duration : 1e3) * Mathf.sign(this.mAmountPerDelta)), this.mAmountPerDelta
		}
		get direction() {
			return this.amountPerDelta < 0 ? Direction.Reverse : Direction.Forward
		}
		onAwake() {
			this.resetProp(), this.startFromFrom ? (this.mFactor = this.amountPerDelta < 0 ? 1 - this.startFactor : this.startFactor, this.Sample(this.mFactor, !1)) : this.UpdateValue(0)
		}
		onUpdate() {
			let t = Timer.deltaTime,
				e = this.ignoreTimeScale ? t : t * UITweener.timeScale;
			this.fixedUpdateDelta && (e = 1 / _G.gameFrameRate), this.UpdateValue(e)
		}
		resetProp() {
			let t = Object.create(null),
				e = Object.create(null);
			this.propName1 && (t[this.propName1] = this.owner[this.propName1], e[this.propName1] = this.propValue1), this.propName2 && (t[this.propName2] = this.owner[this.propName2], e[this.propName2] = this.propValue2), this._from = t, this._to = e
		}
		UpdateValue(t) {
			this.mStarted || (this.mStarted = !0, this.mStartTime = this.delay), this.mStartTime > 0 ? this.mStartTime -= t : (this.mFactor += this.amountPerDelta * t, "Loop" == this.style ? this.mFactor > 1 && (this.mFactor -= 0 | this.mFactor) : "PingPong" == this.style && (this.mFactor > 1 ? (this.mFactor = 1 - (this.mFactor - (0 | this.mFactor)), this.mAmountPerDelta = -this.mAmountPerDelta) : this.mFactor < 0 && (this.mFactor = -this.mFactor, this.mFactor -= 0 | this.mFactor, this.mAmountPerDelta = -this.mAmountPerDelta)), "Once" == this.style && (0 == this.duration || this.mFactor > 1 || this.mFactor < 0) ? (this.mFactor = Mathf.clamp01(this.mFactor), this.Sample(this.mFactor, !0), (0 == this.duration || 1 == this.mFactor && this.mAmountPerDelta > 0 || 0 == this.mFactor && this.mAmountPerDelta < 0) && (this.enabled = !1), this.OnFinished && this.OnFinished()) : this.Sample(this.mFactor, !1))
		}
		Sample(t, e) {
			let a = Mathf.clamp01(t);
			"Linear" == this.method || ("EaseIn" == this.method ? a = UITweener.EaseInLogic(a) : "EaseOut" == this.method ? a = UITweener.EaseOutLogic(a) : "EaseInOut" == this.method ? a = UITweener.EaseInOutLogic(a) : "BounceIn" == this.method ? a = UITweener.BounceLogic(a) : "BounceOut" == this.method ? a = 1 - UITweener.BounceLogic(1 - a) : "BounceOnce" == this.method && (a = UITweener.BounceOnceLogic(a))), this.updateProp(a, e)
		}
		updateProp(t, e) {
			let a = this.propName1;
			a && (this.owner[a] = Mathf.lerp(this._from[a], this._to[a], t));
			let i = this.propName2;
			i && (this.owner[i] = Mathf.lerp(this._from[i], this._to[i], t))
		}
		static EaseInLogic(t) {
			return 1 - Math.sin(.5 * Math.PI * (1 - t))
		}
		static EaseOutLogic(t) {
			return Math.sin(.5 * Math.PI * t)
		}
		static EaseInOutLogic(t) {
			let e = 2 * Math.PI;
			return t - Math.sin(t * e) / e
		}
		static BounceLogic(t) {
			return t < .363636 ? t *= 7.5685 * t : t = t < .727272 ? 7.5625 * (t -= .545454) * t + .75 : t < .90909 ? 7.5625 * (t -= .818181) * t + .9375 : 7.5625 * (t -= .9545454) * t + .984375, t
		}
		static BounceOnceLogic(t) {
			return t < .8 ? (t = Mathf.lerp(0, 1, Mathf.inverseLerp(0, .8, t)), Mathf.lerp(0, 1.2, this.EaseInLogic(t))) : (t = Mathf.lerp(0, 1, Mathf.inverseLerp(.8, 1, t)), Mathf.lerp(1.2, 1, this.EaseInLogic(t)))
		}
		PlayForward() {
			this.Play(!0)
		}
		PlayReverse() {
			this.Play(!1)
		}
		Play(t) {
			this.mAmountPerDelta = Math.abs(this.amountPerDelta), t || (this.mAmountPerDelta = -this.mAmountPerDelta), this.enabled = !0, this.UpdateValue(0)
		}
		ResetToBeginning() {
			this.mStarted = !1, this.mAmountPerDelta = Math.abs(this.amountPerDelta), this.mFactor = this.startFactor, this.Sample(this.mFactor, !1)
		}
		ResetToEnd() {
			this.mStarted = !1, this.mFactor = this.amountPerDelta < 0 ? 0 : 1, this.Sample(this.mFactor, !1)
		}
		Stop() {
			this.ResetToBeginning(), this.enabled = !1
		}
		Pause() {
			this.enabled = !1
		}
		Resume() {
			this.enabled = !0
		}
		ResetTo(t) {
			this.updateProp(t, !1)
		}
		Toggle() {
			this.mFactor > 0 ? this.mAmountPerDelta = -this.amountPerDelta : this.mAmountPerDelta = Math.abs(this.amountPerDelta), this.enabled = !0
		}
	}
	UITweener.timeScale = 1;
	class GameConfig {
		constructor() {}
		static init() {
			var t = Laya.ClassUtils.regClass;
			t("script/extensions/component/UIRoot.ts", UIRoot), t("Start.ts", Start), t("script/common/I18nComponent.ts", I18nComponent), t("script/extensions/component/UIHVLayout.ts", UIHVLayout), t("script/extensions/component/UIToggleGroup.ts", UIToggleGroup), t("script/extensions/component/UIToggle.ts", UIToggle), t("script/extensions/component/ReuseScrollList.ts", ReuseScrollList), t("script/extensions/tweener/UITweener.ts", UITweener), t("script/extensions/component/UIBarMask.ts", UIBarMask), t("script/extensions/component/UIDrag.ts", UIDrag), t("script/extensions/component/UIButton.ts", UIButton)
		}
	}
	GameConfig.width = 576, GameConfig.height = 1024, GameConfig.scaleMode = "fixedwidth", GameConfig.screenMode = "vertical", GameConfig.alignV = "middle", GameConfig.alignH = "center", GameConfig.startScene = "MainScene.scene", GameConfig.sceneRoot = "", GameConfig.debug = !1, GameConfig.stat = !1, GameConfig.physicsDebug = !1, GameConfig.exportSceneToJson = !0, GameConfig.init();
	class Main {
		constructor() {
			window.notCacheList = [], console.log("LayaGame Initing"), window.Laya3D ? Laya3D.init(GameConfig.width, GameConfig.height) : Laya.init(GameConfig.width, GameConfig.height, Laya.WebGL), Laya.Physics && Laya.Physics.enable(), Laya.DebugPanel && Laya.DebugPanel.enable(), Laya.stage.scaleMode = GameConfig.scaleMode, Laya.stage.screenMode = GameConfig.screenMode, Laya.stage.alignV = GameConfig.alignV, Laya.stage.alignH = GameConfig.alignH, Laya.URL.exportSceneToJson = GameConfig.exportSceneToJson, Laya.MiniAdpter && (Laya.MiniAdpter.autoCacheFile = !0), Laya.MiniAdpter && (Laya.MiniAdpter.AutoCacheDownFile = !0), Laya.QGMiniAdapter && (Laya.QGMiniAdapter.autoCacheFile = !0), Laya.QGMiniAdapter && (Laya.QGMiniAdapter.AutoCacheDownFile = !0), Laya.VVMiniAdapter && (Laya.VVMiniAdapter.autoCacheFile = !0), Laya.VVMiniAdapter && (Laya.VVMiniAdapter.AutoCacheDownFile = !0), Laya.BMiniAdapter && (Laya.BMiniAdapter.autoCacheFile = !0), Laya.BMiniAdapter && (Laya.BMiniAdapter.AutoCacheDownFile = !0), Laya.KGMiniAdapter && (Laya.KGMiniAdapter.autoCacheFile = !0), Laya.KGMiniAdapter && (Laya.KGMiniAdapter.AutoCacheDownFile = !0), (GameConfig.debug || "true" == Laya.Utils.getQueryString("debug")) && Laya.enableDebugPanel(), GameConfig.physicsDebug && Laya.PhysicsDebugDraw && Laya.PhysicsDebugDraw.enable(), GameConfig.stat && Laya.Stat.show(), Laya.alertGlobalError = !0, Laya.ResourceVersion.enable("version-1678e9771b.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION)
		}
		onVersionLoaded() {
			Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded))
		}
		onConfigLoaded() {
			GameConfig.startScene && Laya.Scene.open(GameConfig.startScene)
		}
	}
	new Main
}();
! function() {
	"use strict";
	let canvas_fit_width = 100,
		canvas_fit_height = 100,
		canvas_width = 100,
		canvas_height = 100;
	class UIRoot extends Laya.Script {
		constructor() {
			super(...arguments), this.standardShort = 576, this.standardLong = 1024, this.uiMinRate = .5, this.maxRate = .75, this.canvasMinRate = .46, this.layerNode = []
		}
		static get canvasWidth() {
			return canvas_width
		}
		static get canvasHeight() {
			return canvas_height
		}
		static get canvasFitWidth() {
			return canvas_fit_width
		}
		static get canvasFitHeight() {
			return canvas_fit_height
		}
		static get fitTop() {
			return canvas_fit_height < canvas_height ? (canvas_height - canvas_fit_height) / 2 : 0
		}
		static get fitLeft() {
			return canvas_fit_width < canvas_width ? (canvas_width - canvas_fit_width) / 2 : 0
		}
		onAwake() {
			this.fixScreenResolution(), UIRoot.instance = this
		}
		onDestroy() {
			UIRoot.instance = null, super.onDestroy && super.onDestroy()
		}
		fixScreenResolution() {
			let t = new Laya.Vector2(Laya.Browser.width, Laya.Browser.height);
			console.log("frame size:", t.x, t.y);
			let e = !1;
			e = !0;
			let a, i, s, n, o, r, l = this.standardShort / this.standardLong;
			if ((a = e ? t.x / t.y : t.y / t.x) < l) {
				if (a < this.uiMinRate) {
					n = this.standardLong * (l / this.uiMinRate), r = Math.floor(this.standardLong * (l / a));
					let t = Math.floor(this.standardLong * (l / this.canvasMinRate));
					r = Math.min(r, t), i = Laya.Stage.SCALE_SHOWALL, console.log(`长边超出：重置长边 ${n}`)
				} else r = n = this.standardLong * (l / a), i = e ? Laya.Stage.SCALE_FIXED_WIDTH : Laya.Stage.SCALE_FIXED_HEIGHT, console.log(`短边适配:${n}`);
				n = Math.floor(n), o = s = this.standardShort
			} else a > l ? (a > this.maxRate ? (s = this.standardShort * (this.maxRate / l), o = Math.floor(this.standardShort * (a / l)), i = Laya.Stage.SCALE_SHOWALL, console.log(`短边超出：重置短边 ${s}`)) : (o = s = this.standardShort * (a / l), i = e ? Laya.Stage.SCALE_FIXED_HEIGHT : Laya.Stage.SCALE_FIXED_WIDTH, console.log(`长边适配:${s}`)), s = Math.floor(s), r = n = this.standardLong) : (console.log("默认适配"), o = s = this.standardShort, r = n = this.standardLong, i = e ? Laya.Stage.SCALE_FIXED_WIDTH : Laya.Stage.SCALE_FIXED_HEIGHT);
			e ? (canvas_fit_width = s, canvas_fit_height = n, canvas_width = o, canvas_height = r) : (canvas_fit_width = n, canvas_fit_height = s, canvas_width = r, canvas_height = o), console.log("cur fit size:", canvas_fit_width, canvas_fit_height), console.log("cur full size:", canvas_width, canvas_height), Laya.stage.width = canvas_width, Laya.stage.height = canvas_height, Laya.stage.scaleMode = Laya.Stage.SCALE_SHOWALL, Laya.stage.screenMode = Laya.Stage.SCREEN_NONE, Laya.stage.alignH = Laya.Stage.ALIGN_CENTER, Laya.stage.alignV = Laya.Stage.ALIGN_MIDDLE, this.owner.size(canvas_width, canvas_height), this.resizeLayerNode()
		}
		resizeLayerNode() {
			for (let t = this.layerNode.length - 1; t >= 0; t--) this.layerNode[t].size(canvas_width, canvas_height)
		}
		createLayerNode(t) {
			for (let e = this.layerNode.length; e < t; e++) {
				let t = new Laya.Sprite;
				t.name = "Layer" + e, t.size(canvas_width, canvas_height), t.mouseThrough = !0, this.owner.addChild(t), this.layerNode.push(t)
			}
		}
		getLayerNode(t) {
			let e = this.layerNode[t];
			return e || console.error(`can not find layer node :${t}`), e
		}
	}
	let _gameStartTime = 0,
		_lastUpdateTime = 0,
		_curTime = 0,
		_time = 0,
		_deltaTime = 0,
		_timeFromGameStart = 0,
		_timeOffset = 0;
	class Timer {
		constructor(t, e, a, i) {
			this._repeatCount = -1, this._span = 1, this._callback = null, this._count = 0, this._bRunning = !1, this._span = t, this._repeatCount = e, this._callback = a, this._calller = i
		}
		static get now() {
			return Date.now() / 1e3
		}
		static get time() {
			return _time + _timeOffset
		}
		static get deltaTime() {
			return _deltaTime
		}
		static get timeFromGameStart() {
			return _timeFromGameStart
		}
		static waitTime(t) {
			return new Promise(function(e, a) {
				Timer.callLater(t, function() {
					e()
				})
			})
		}
		static setTimeOffset(t) {
			_timeOffset = t
		}
		static initTime() {
			_gameStartTime = this.now, this.updateTime()
		}
		static updateTime() {
			_curTime = this.now, _time = _curTime, _timeFromGameStart = _curTime - _gameStartTime, _deltaTime = _curTime - _lastUpdateTime, _lastUpdateTime = _curTime
		}
		static callLater(t, e, a) {
			let i = new Timer(t, 1, e, a);
			return i.start(), i
		}
		static callLaterFrame(t, e, a) {
			let i = new Timer(t, 1, e, a);
			return i.startFrame(), i
		}
		static callLoop(t, e, a) {
			let i = new Timer(t, -1, e, a);
			return i.start(), i
		}
		static callLoopFrame(t, e, a) {
			let i = new Timer(t, -1, e, a);
			return i.startFrame(), i
		}
		_onSpan() {
			if (this._calller && this._calller.destroyed) this.stop();
			else {
				if (this._count++, this._callback) try {
					this._callback.call(this._calller, this)
				} catch (t) {
					Logger.catchError("Timer._onSpan:", t)
				}
				this._repeatCount >= 0 && this._count >= this._repeatCount && this.stop()
			}
		}
		isRunning() {
			return this._bRunning
		}
		get isDone() {
			return this._repeatCount >= 0 && this._count >= this._repeatCount
		}
		get count() {
			return this._count
		}
		get span() {
			return this._span
		}
		start() {
			return this.stop(), this._callback ? (this._count = 0, Laya.timer.loop(1e3 * this.span, this, this._onSpan), this._bRunning = !0, this) : (Logger.warn("警告] Timer.start callback未设置！"), this)
		}
		startFrame() {
			return this.stop(), this._callback ? (this._count = 0, Laya.timer.frameLoop(this.span, this, this._onSpan), this._bRunning = !0, this) : (Logger.warn("警告] Timer.start callback未设置！"), this)
		}
		resetCount() {
			this._count = 0
		}
		stop() {
			return this._bRunning && (Laya.timer.clear(this, this._onSpan), this._bRunning = !1), this
		}
	}
	const _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
		lookup = new Uint8Array(256);
	for (let t = 0; t < _keyStr.length; t++) lookup[_keyStr.charCodeAt(t)] = t;
	class Base64 {
		static get nativeBase64() {
			return !1
		}
		static decode(t) {
			if (t = t.replace(/[^A-Za-z0-9\+\/\=]/g, ""), this.nativeBase64) return window.atob(t);
			for (var e, a, i, s, n, o, r = [], l = 0; l < t.length;) e = _keyStr.indexOf(t.charAt(l++)) << 2 | (s = _keyStr.indexOf(t.charAt(l++))) >> 4, a = (15 & s) << 4 | (n = _keyStr.indexOf(t.charAt(l++))) >> 2, i = (3 & n) << 6 | (o = _keyStr.indexOf(t.charAt(l++))), r.push(String.fromCharCode(e)), 64 !== n && r.push(String.fromCharCode(a)), 64 !== o && r.push(String.fromCharCode(i));
			return r = r.join(""), this._utf8_decode(r)
		}
		static encode(t) {
			if (t = this._utf8_encode(t), !this.nativeBase64) {
				for (var e, a, i, s, n, o, r, l = [], c = 0; c < t.length;) s = (e = t.charCodeAt(c++)) >> 2, n = (3 & e) << 4 | (a = t.charCodeAt(c++)) >> 4, o = (15 & a) << 2 | (i = t.charCodeAt(c++)) >> 6, r = 63 & i, isNaN(a) ? o = r = 64 : isNaN(i) && (r = 64), l.push(_keyStr.charAt(s)), l.push(_keyStr.charAt(n)), l.push(_keyStr.charAt(o)), l.push(_keyStr.charAt(r));
				return l = l.join("")
			}
			window.btoa(t)
		}
		static encodeArrayBuffer(t) {
			var e, a = new Uint8Array(t),
				i = a.length,
				s = "";
			for (e = 0; e < i; e += 3) s += _keyStr[a[e] >> 2], s += _keyStr[(3 & a[e]) << 4 | a[e + 1] >> 4], s += _keyStr[(15 & a[e + 1]) << 2 | a[e + 2] >> 6], s += _keyStr[63 & a[e + 2]];
			return i % 3 == 2 ? s = s.substring(0, s.length - 1) + "=" : i % 3 == 1 && (s = s.substring(0, s.length - 2) + "=="), s
		}
		static decodeArrayBuffer(t) {
			var e, a, i, s, n, o = .75 * t.length,
				r = t.length,
				l = 0;
			"=" === t[t.length - 1] && (o--, "=" === t[t.length - 2] && o--);
			var c = new ArrayBuffer(o),
				h = new Uint8Array(c);
			for (e = 0; e < r; e += 4) a = lookup[t.charCodeAt(e)], i = lookup[t.charCodeAt(e + 1)], s = lookup[t.charCodeAt(e + 2)], n = lookup[t.charCodeAt(e + 3)], h[l++] = a << 2 | i >> 4, h[l++] = (15 & i) << 4 | s >> 2, h[l++] = (3 & s) << 6 | 63 & n;
			return c
		}
		static decodeToUnit32Array(t, e) {
			e = e || 1;
			var a, i, s, n = Base64.decode(t),
				o = new Uint32Array(n.length / e);
			for (a = 0, s = n.length / e; a < s; a++)
				for (o[a] = 0, i = e - 1; i >= 0; --i) o[a] += n.charCodeAt(a * e + i) << (i << 3);
			return o
		}
		static removePaddingChars(t) {
			return 64 == _keyStr.indexOf(t.charAt(t.length - 1)) ? t.substring(0, t.length - 1) : t
		}
		static decodeToUnit8Array(t, e) {
			t = this.removePaddingChars(t), t = this.removePaddingChars(t);
			var a = Math.floor(t.length / 4 * 3);
			let i;
			var s, n, o, r, l, c, h = 0,
				d = 0;
			for (i = e ? new Uint8Array(e) : new Uint8Array(a), t = t.replace(/[^A-Za-z0-9\+\/\=]/g, ""), h = 0; h < a; h += 3) s = _keyStr.indexOf(t.charAt(d++)) << 2 | (r = _keyStr.indexOf(t.charAt(d++))) >> 4, n = (15 & r) << 4 | (l = _keyStr.indexOf(t.charAt(d++))) >> 2, o = (3 & l) << 6 | (c = _keyStr.indexOf(t.charAt(d++))), i[h] = s, 64 != l && (i[h + 1] = n), 64 != c && (i[h + 2] = o);
			return i
		}
		static decodeToArrayBuffer(t) {
			var e = Math.floor(t.length / 4 * 3),
				a = new ArrayBuffer(e);
			return this.decodeToUnit8Array(t, a), a
		}
		static _utf8_encode(t) {
			t = t.replace(/\r\n/g, "\n");
			for (var e = "", a = 0; a < t.length; a++) {
				var i = t.charCodeAt(a);
				i < 128 ? e += String.fromCharCode(i) : i > 127 && i < 2048 ? (e += String.fromCharCode(i >> 6 | 192), e += String.fromCharCode(63 & i | 128)) : (e += String.fromCharCode(i >> 12 | 224), e += String.fromCharCode(i >> 6 & 63 | 128), e += String.fromCharCode(63 & i | 128))
			}
			return e
		}
		static _utf8_decode(t) {
			for (var e = "", a = 0, i = 0, s = 0, n = 0; a < t.length;)(i = t.charCodeAt(a)) < 128 ? (e += String.fromCharCode(i), a++) : i > 191 && i < 224 ? (s = t.charCodeAt(a + 1), e += String.fromCharCode((31 & i) << 6 | 63 & s), a += 2) : (s = t.charCodeAt(a + 1), n = t.charCodeAt(a + 2), e += String.fromCharCode((15 & i) << 12 | (63 & s) << 6 | 63 & n), a += 3);
			return e
		}
	}
	let systemConsole = console;
	var ULLog$1;
	! function(t) {
		class e {
			static info(...e) {
				t.console.allowConsole && systemConsole.info(...e)
			}
			static log(...e) {
				t.console.allowConsole && systemConsole.log(...e)
			}
			static warn(...e) {
				t.console.allowConsole && systemConsole.warn(...e)
			}
			static error(...e) {
				t.console.allowConsole && systemConsole.error(...e)
			}
		}
		e.allowConsole = !0, t.console = e
	}(ULLog$1 || (ULLog$1 = {})), window.ULLog = ULLog$1;
	class ULEventListener {
		constructor(t, e, a, i) {
			this.type = t, this.priority = e, this.callback = a, this.bDispatchOnce = i, this.bNeedRemove = !1
		}
		isDispatchOnce() {
			return !!this.bDispatchOnce
		}
		isNeedRemove() {
			return !!this.bNeedRemove
		}
		markNeedRemove() {
			this.bNeedRemove = !0
		}
		triggerCallback(t) {
			if (this.callback instanceof Function) {
				try {
					this.callback(t)
				} catch (t) {
					return ULLog.console.error("ULEventListener.triggerCallback has exception!", t), !1
				}
				return !0
			}
			return !1
		}
	}
	class ULEvent {
		constructor(t, e) {
			this.bPropagationStoped = !1, this.type = t, this.data = e, this.bPropagationStoped = !1, this.returnValue = null
		}
		stopImmediatePropagation() {
			this.bPropagationStoped = !0
		}
		setReturnValue(t, e) {
			null != t && (this.returnValue = t, e || this.stopImmediatePropagation())
		}
		getReturnValue() {
			return this.returnValue
		}
		isPropagationStoped() {
			return !!this.bPropagationStoped
		}
	}
	class ULConst {}
	ULConst.CMD_GET_BASE_CHANNEL_INFO = "/c/getBaseChannelInfo", ULConst.CMD_SET_VERSION = "/c/setVersion", ULConst.CMD_OPEN_MORE_GAME = "/c/openMoreGame", ULConst.CMD_OPEN_UL_MORE_GAME = "/c/openUlMoreGame", ULConst.CMD_OPEN_PAY = "/c/openPay", ULConst.CMD_OPEN_JF = "/c/openJf", ULConst.CMD_OPEN_SHARE = "/c/openShare", ULConst.CMD_CALL_PHONE = "/c/callPhone", ULConst.CMD_UL_WEB_VIEW = "/c/ulWebView", ULConst.CMD_EXIT_GAME = "/c/exitGame", ULConst.CMD_MEGADATA_SERVER = "/c/megadataServer", ULConst.CMD_POST_MEGADATA = "/c/postMegadata", ULConst.CMD_USE_CDKEY = "/c/useCdkey", ULConst.CMD_OPEN_ADV = "/c/openAdv", ULConst.CMD_CLICK_NATIVE_ADV = "/c/clickNativeAdv", ULConst.CMD_CLOSE_ADV = "/c/closeAdv", ULConst.CMD_CLOSE_NATIVE_ADV = "/c/closeNativeAdv", ULConst.CMD_USER_LOGIN = "/c/userLogin", ULConst.CMD_USER_LOGIN_REPORT = "/c/userLoginReport", ULConst.CMD_USER_IS_LOGIN = "/c/userIsLogin", ULConst.CMD_LOGIN_OUT = "/c/loginOut", ULConst.CMD_SAVE_RANK_DATA = "/c/saveRankData", ULConst.CMD_GET_RANK_DATA = "/c/getRankData", ULConst.CMD_RECORDER_GAME_VIDEO = "/c/recorderGameVideo", ULConst.CMD_SHARE_GAME_VIDEO = "/c/shareGameVideo", ULConst.CMD_OPEN_JUMP = "/c/openJump", ULConst.CMD_JUMP_OTHER_GAME = "/c/jumpOtherGame", ULConst.CMD_OPEN_RECOMMENDATION = "/c/openRecommendation", ULConst.CMD_CLOSE_RECOMMENDATION = "/c/closeRecommendation", ULConst.CMD_SAVE_USER_DATA = "/c/saveUserData", ULConst.CMD_GET_USER_DATA = "/c/getUserData", ULConst.CMD_ADD_GAME_TO_MY_FAVORITE = "/c/addGameToMyFavorite", ULConst.CMD_GET_USER_INFO_MSG = "/c/getUserInfoMsg", ULConst.CMD_OPEN_USERINFO_ACCREDIT_BUTTON = "/c/openUserInfoAccreditButton", ULConst.CMD_CLOSE_USERINFO_ACCREDIT_BUTTON = "/c/closeUserInfoAccreditButton", ULConst.CMD_INSTALL_SHORTCUT = "/c/installShortcut", ULConst.CMD_SET_CLIPBOARD_DATA = "/c/setClipboardData", ULConst.CMD_GET_CLIPBOARD_DATA = "/c/getClipboardData", ULConst.CMD_SET_ULSDKDEMO_DEBUG_MODE = "/c/setUlsdkdemoDebugMode", ULConst.CMD_MPSDK_AD_HANDLER = "/c/mpsdkAdHandler", ULConst.CMD_CREATE_GAME_ICON = "/c/createGameIcon", ULConst.CMD_GAME_ICON_HANDLER = "/c/gameIconHandler", ULConst.CMD_OPEN_CHANNEL_MORE_GAME_BOX = "/c/openChannelMoreGameBox", ULConst.CMD_OPEN_BLOCK_AD = "/c/openBlockAd", ULConst.CMD_CLOSE_BLOCK_AD = "/c/closeBlockAd", ULConst.CMD_GET_SHORTCUT_STATE = "/c/getShortcutState", ULConst.CMD_ADD_SUBSCRIBE = "/c/addSubscribe", ULConst.CMD_ADD_COLOR_SIGN = "/c/addColorSign", ULConst.CMD_OPEN_GRID_AD = "/c/openGridAd", ULConst.CMD_CLOSE_GRID_AD = "/c/closeGridAd", ULConst.CMD_JUMP_TO_VIDEO_VIEW = "/c/jumpToVideoView", ULConst.CMD_FOLLOW_OFFICIAL_ACCOUNT = "/c/followOfficialAccount", ULConst.CMD_GET_FOLLOW_OFFICIAL_ACCOUNT_STATE = "/c/getFollowOfficialAccountState", ULConst.CMD_CONTENT_SECURITY_CHECK = "/c/contentSecurityCheck", ULConst.CMD_JUMP_LEISURE_SUBJECT = "/c/jumpLeisureSubject", ULConst.CMD_PHONE_VIBRATE = "/c/phoneVibrate", ULConst.CMD_OPEN_URL = "/c/openUrl", ULConst.CMD_SHOW_CHANNEL_MASK = "/c/showChannelMask", ULConst.CMD_CLOSE_CHANNEL_MASK = "/c/closeChannelMask", ULConst.CMD_OPEN_ADVANCED_SETTING = "/c/openAdvancedSetting", ULConst.CMD_RANKLIST_GET_USER_NUM = "/c/getUserNumInRank", ULConst.CMD_RANKLIST_GET_USER_INFO_BY_ID = "/c/getUserInfoByIdInRank", ULConst.CMD_RANKLIST_GET_USER_INFO_BY_LIST = "/c/getUserInfoListByRankId", ULConst.CMD_RANKLIST_REPORT_USER_INFO = "/c/reportUserInfoInRank", ULConst.CMD_RANKLIST_MODIFY_SCORE_BY_ARRAY = "/c/modifyScoreByArray", ULConst.CMD_CHANNEL_INFO_RESULT = "/c/channelInfoResult", ULConst.CMD_GET_BASE_CHANNEL_INFO_RESULT = "/c/getBaseChannelInfoResult", ULConst.CMD_PAY_RESULT = "/c/payResult", ULConst.CMD_PRE_PAY_RESULT = "/c/prePayResult", ULConst.CMD_SHARE_RESULT = "/c/shareResult", ULConst.CMD_LIFE_CYCLE_RESULT = "/c/lifeCycle", ULConst.CMD_PAUSE_SOUND_RESULT = "/c/pauseSound", ULConst.CMD_RESUME_SOUND_RESULT = "/c/resumeSound", ULConst.CMD_COP_INFO_RESULT = "/c/copInfoResult", ULConst.CMD_MEGADATA_SERVER_RESULT = "/c/megadataServer", ULConst.CMD_POST_MEGADATA_RESULT = "/c/postMegadataResult", ULConst.CMD_USE_CDKEY_RESULT = "/c/useCdkey", ULConst.CMD_OPEN_ADV_RESULT = "/c/openAdvResult", ULConst.CMD_OPEN_NATIVE_ADV_RESULT = "/c/openNativeAdvResult", ULConst.CMD_CLICK_NATIVE_ADV_RESULT = "/c/clickNativeAdvResult", ULConst.CMD_CLICK_ADV_RESULT = "/c/clickAdvResult", ULConst.CMD_CLOSE_ADV_RESULT = "/c/closeAdvResult", ULConst.CMD_CLOSE_NATIVE_ADV_RESULT = "/c/closeNativeAdvResult", ULConst.CMD_USER_LOGIN_RESULT = "/c/userLoginResult", ULConst.CMD_USER_IS_LOGIN_RESULT = "/c/userIsLoginResult", ULConst.CMD_USER_LOGIN_REPORT_RESULT = "/c/userLoginReportResult", ULConst.CMD_LOGIN_OUT_RESULT = "/c/loginOutResult", ULConst.CMD_ADV_VALID_COUNT_RESULT = "/c/advValidCountResult", ULConst.CMD_SAVE_RANK_DATA_RESULT = "/c/saveRankDataResult", ULConst.CMD_GET_RANK_DATA_RESULT = "/c/getRankDataResult", ULConst.CMD_RECORDER_GAME_VIDEO_RESULT = "/c/recorderGameVideoResult", ULConst.CMD_SHARE_GAME_VIDEO_RESULT = "/c/shareGameVideoResult", ULConst.CMD_OPEN_JUMP_RESULT = "/c/openJumpResult", ULConst.CMD_JUMP_OTHER_GAME_RESULT = "/c/jumpOtherGameResult", ULConst.CMD_JUMP_OTHER_GAME_REWARD_RESULT = "/c/jumpOtherGameRewardResult", ULConst.CMD_EXTRA_BONUS_RESULT = "/c/extraBonus", ULConst.CMD_OPEN_RECOMMENDATION_RESULT = "/c/openRecommendationResult", ULConst.CMD_CLOSE_RECOMMENDATION_RESULT = "/c/closeRecommendationResult", ULConst.CMD_SAVE_USER_DATA_RESULT = "/c/saveUserDataResult", ULConst.CMD_GET_USER_DATA_RESULT = "/c/getUserDataResult", ULConst.CMD_ADD_GAME_TO_MY_FAVORITE_RESULT = "/c/addGameToMyFavoriteResult", ULConst.CMD_GET_USER_INFO_MSG_RESULT = "/c/getUserInfoMsgResult", ULConst.CMD_OPEN_USERINFO_ACCREDIT_BUTTON_RESULT = "/c/openUserInfoAccreditButtonResult", ULConst.CMD_CLOSE_USERINFO_ACCREDIT_BUTTON_RESULT = "/c/closeUserInfoAccreditButtonResult", ULConst.CMD_APP_SHARE_RESULT = "/c/appShareResult", ULConst.CMD_INSTALL_SHORTCUT_RESULT = "/c/installShortcutResult", ULConst.CMD_SET_CLIPBOARD_DATA_RESULT = "/c/setClipboardDataResult", ULConst.CMD_GET_CLIPBOARD_DATA_RESULT = "/c/getClipboardDataResult", ULConst.CMD_MPSDK_AD_HANDLER_RESULT = "/c/mpsdkAdHandlerResult", ULConst.CMD_CREATE_GAME_ICON_RESULT = "/c/createGameIconResult", ULConst.CMD_GAME_ICON_HANDLER_RESULT = "/c/gameIconHandlerResult", ULConst.CMD_OPEN_CHANNEL_MORE_GAME_BOX_RESULT = "/c/openChannelMoreGameBoxResult", ULConst.CMD_OPEN_BLOCK_AD_RESULT = "/c/openBlockAdResult", ULConst.CMD_CLOSE_BLOCK_AD_RESULT = "/c/closeBlockAdResult", ULConst.CMD_GET_SHORTCUT_STATE_RESULT = "/c/getShortcutStateResult", ULConst.CMD_ADD_SUBSCRIBE_RESULT = "/c/addSubscribeResult", ULConst.CMD_ADD_COLOR_SIGN_RESULT = "/c/addColorSignResult", ULConst.CMD_OPEN_GRID_AD_RESULT = "/c/openGridAdResult", ULConst.CMD_CLOSE_GRID_AD_RESULT = "/c/closeGridAdResult", ULConst.CMD_JUMP_TO_VIDEO_VIEW_RESULT = "/c/jumpToVideoViewResult", ULConst.CMD_FOLLOW_OFFICIAL_ACCOUNT_RESULT = "/c/followOfficialAccountResult", ULConst.CMD_GET_FOLLOW_OFFICIAL_ACCOUNT_STATE_RESULT = "/c/getFollowOfficialAccountStateResult", ULConst.CMD_CONTENT_SECURITY_CHECK_RESULT = "/c/contentSecurityCheckResult", ULConst.CMD_JUMP_LEISURE_SUBJECT_RESULT = "/c/jumpLeisureSubjectResult", ULConst.CMD_PHONE_VIBRATE_RESULT = "/c/phoneVibrateResult", ULConst.CMD_JUMP_NEW_USER_GUIDE = "/c/jumpNewGuide", ULConst.CMD_OPEN_URL_RESULT = "/c/openUrlResult", ULConst.CMD_CLEAN_UP_GAME_ARCHIVE = "/c/cleanUpGameArchive", ULConst.CMD_SHOW_POINT_DEBUG_INFO = "/c/showPointDebugInfo", ULConst.CMD_MOYANG_QQ_NET_EARNED_QUERY = "/c/qqNetEarnedQuery", ULConst.CMD_MOYANG_QQ_NET_EARNED_RECHARGE = "/c/qqNetEarnedRecharge", ULConst.CMD_MOYANG_QQ_NET_EARNED_CASH = "/c/qqNetEarnedCash", ULConst.CMD_MOYANG_QQ_NET_EARNED_QUERY_RESULT = "/c/qqNetEarnedQueryResult", ULConst.CMD_MOYANG_QQ_NET_EARNED_RECHARGE_RESULT = "/c/qqNetEarnedRechargeResult", ULConst.CMD_MOYANG_QQ_NET_EARNED_CASH_RESULT = "/c/qqNetEarnedCashResult", ULConst.CMD_RANKLIST_GET_USER_NUM_RESULT = "/c/getUserNumInRankResult", ULConst.CMD_RANKLIST_GET_USER_INFO_BY_ID_RESULT = "/c/getUserInfoByIdInRankResult", ULConst.CMD_RANKLIST_GET_USER_INFO_BY_LIST_RESULT = "/c/getUserInfoListByRankIdResult", ULConst.CMD_RANKLIST_REPORT_USER_INFO_RESULT = "/c/reportUserInfoInRankResult", ULConst.CMD_RANKLIST_MODIFY_SCORE_BY_ARRAY_RESULT = "/c/modifyScoreByArrayResult", ULConst.CMD_SDK_ON_COP_CHANGED = "/sdk/onCopChanged", ULConst.CMD_SDK_PREPARE_SHOW_VIDEO_ADV = "/sdk/prepareShowVideoAdv", ULConst.CMD_SDK_PREPARE_SHOW_INTER_ADV = "/sdk/prepareShowInterAdv", ULConst.CMD_SDK_PREPARE_SHOW_BANNER_ADV = "/sdk/prepareShowBannerAdv", ULConst.CMD_SDK_PREPARE_SHOW_EMBEDDED_ADV = "/sdk/prepareShowEmbeddedAdv", ULConst.CMD_SDK_PREPARE_SHOW_URL_ADV = "/sdk/prepareShowUrlAdv", ULConst.CMD_SDK_PREPARE_SHOW_PASTER_ADV = "/sdk/prepareShowPasterAdv", ULConst.CMD_SDK_SHOW_VIDEO_ADV = "/sdk/showVideoAdv", ULConst.CMD_SDK_SHOW_INTER_ADV = "/sdk/showInterAdv", ULConst.CMD_SDK_SHOW_BANNER_ADV = "/sdk/showBannerAdv", ULConst.CMD_SDK_SHOW_EMBEDDED_ADV = "/sdk/showEmbeddedAdv", ULConst.CMD_SDK_SHOW_URL_ADV = "/sdk/showUrlAdv", ULConst.CMD_SDK_SHOW_PASTER_ADV = "/sdk/showPasterAdv", ULConst.CMD_SDK_CLOSE_VIDEO_ADV = "/sdk/closeVideoAdv", ULConst.CMD_SDK_CLOSE_INTER_ADV = "/sdk/closeInterAdv", ULConst.CMD_SDK_CLOSE_BANNER_ADV = "/sdk/closeBannerAdv", ULConst.CMD_SDK_CLOSE_EMBEDDED_ADV = "/sdk/closeEmbeddedAdv", ULConst.CMD_SDK_CLOSE_URL_ADV = "/sdk/closeUrlAdv", ULConst.CMD_SDK_CLOSE_Paster_ADV = "/sdk/closePasterAdv", ULConst.CMD_SDK_CLOSE_NATIVE_ADV = "/sdk/closeNativeAdv", ULConst.CMD_SDK_CLICK_NATIVE_ADV = "/sdk/clickNativeAdv", ULConst.CMD_SDK_GET_STORAGE = "/sdk/getStorge", ULConst.CMD_SDK_SET_STORAGE = "/sdk/setStorge", ULConst.CMD_SDK_GET_CLIPBOARD_DATA = "/sdk/getClipboardData", ULConst.CMD_SDK_SET_CLIPBOARD_DATA = "/sdk/setClipboardData", ULConst.CMD_SDK_IS_SUPPORT_CLIPBOARD = "/sdk/isSupportClipboard", ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG = "/sdk/collectionModuleCheckerConfig", ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_MORE_GAME_AB_TEST_CONFIG = "/sdk/collectionModuleCheckerMoreGameAbTestConfig", ULConst.CMD_SDK_TOUCH_SCREEN_END = "/sdk/touchScreenEnd", ULConst.CMD_SDK_ON_GAME_START = "/sdk/onGameStart", ULConst.CMD_SDK_ON_GAME_PAUSE = "/sdk/onGamePause", ULConst.CMD_SDK_ON_GAME_RESUME = "/sdk/onGameResume", ULConst.CMD_SDK_ON_SHARE_SHOW = "/sdk/onShareShow", ULConst.CMD_SDK_ON_SAHRE_APP_MESSAGE = "/sdk/onShareAppMessage", ULConst.CMD_SDK_ON_REPORT_ULSDK_EVENT = "/sdk/ulsdkMegadataUpload", ULConst.CMD_SDK_OPEN_SHARE_DURING_ADV = "/sdk/openShareDuringAdv", ULConst.CMD_SDK_CHANNEL_MEGADATA_POST = "/sdk/channelMegadataPost", ULConst.CMD_SDK_SET_UP_WEBVIEW_JAVASCRIPT_BRIDGE = "/sdk/setUpWebViewJavascriptBridge", ULConst.CMD_SDK_EXPRESS_NATIVE_ADV_STATUS_CHANGE = "/sdk/expressNativeAdvStatusChange", ULConst.CMD_MOYANG_QQ_REWARD_VIDEO_PLAY = "/sdk/moyangQQRewardVideoPlay", ULConst.CMD_MOYANG_QQ_REWARD_VIDEO_CLOSE = "/sdk/moyangQQRewardVideoClose", ULConst.CMD_FACEBOOK_INIT_COMPLETE = "/sdk/facebookInitComplete", ULConst.CMD_SDK_INIT_USER_LOGIN = "/sdk/initUserLogin", ULConst.CMD_SDK_QM_LOGIN_REPORT = "/qmsdk/loginReport", ULConst.CMD_SDK_QM_REPORT_EVENT = "/qmsdk/reportEvent", ULConst.CMD_SDK_QM_REPORT_GOLD = "/qmsdk/reportGold", ULConst.CMD_SDK_QM_SET_ACCOUNT_INFO = "/qmsdk/setAccountInfo", ULConst.CMD_SDK_QM_GET_OPEN_LEVEL = "/qmsdk/getOpenLevel", ULConst.CMD_SDK_QM_GET_RECOMMEND_INFO = "/qmsdk/getRecommendInfo", ULConst.CMD_SDK_QM_GET_SUGGEST_LIST = "/qmsdk/getSuggestList", ULConst.CMD_SDK_QM_GET_EXCITATION_LIST = "/qmsdk/getExcitationList", ULConst.CMD_SDK_QM_MPSDK_AD_CLICK = "/qmsdk/mpsdkAdClick", ULConst.CMD_SDK_QM_MPSDK_CLICK_SYNC = "/qmsdk/mpsdkClickSync", ULConst.CMD_SDK_QM_GET_USER_DATA_VERSION = "/qmsdk/getUserDataVersion", ULConst.CMD_SDK_QM_IS_STRONG_FISSION = "/qmsdk/isStrongFission", ULConst.CMD_SDK_QM_REPORT_VIDEO_TIME_EVENT = "/qmsdk/reportVideoTimeEvent", ULConst.CMD_SDK_OPPOQG_MARK_MANUAL_CLOSE_BANNER_COUNT = "/sdk/oppoqg/markManualCloseBannerCount", ULConst.CMD_SDK_OPPOQG_GET_MANUAL_CLOSE_BANNER_COUNT = "/sdk/oppoqg/getManualCloseBannerCount", ULConst.CMD_SDK_OPPOQG_HAS_BANNER_SHOWING = "/sdk/oppoqg/hasBannerShowing", ULConst.PRIORITY_DISABLE = -2, ULConst.PRIORITY_NONE = -1, ULConst.CONSOLE_OUTPUT_LEVEL_WARN = 1, ULConst.CONSOLE_OUTPUT_LEVEL_ERROR = 1, ULConst.CONSOLE_OUTPUT_LEVEL_LOG = 2, ULConst.CONSOLE_OUTPUT_LEVEL_INNER_DEBUG = 3, ULConst.B_INNER_DEBUG = !1, ULConst.COP_RETRY_TIME_SEC = 30, ULConst.STATIS_TYPE_BASE_INFO = "1", ULConst.STATIS_TYPE_PAY_INFO = "2", ULConst.STATIS_TYPE_ADV_INFO = "3", ULConst.STATIS_TYPE_COP_REQUEST = "4", ULConst.STATIS_TYPE_USER_EVENT = "5", ULConst.STATIS_TYPE_ONLINE_TIME = "6", ULConst.STATIS_TYPE_POINT_EVENT = "7", ULConst.STATIS_TYPE_COIN_CHANGE_EVENT = "5", ULConst.STATIS_TYPE_COMMON_EVENT = "7", ULConst.STATIS_TYPE_LEVEL_START_EVENT = "8", ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT = "9", ULConst.STATIS_TYPE_ITEM_BUY = "10", ULConst.STATIS_TYPE_BUY_ACTION = "11", ULConst.STATIS_TYPE_VIDEO_POINT_EVENT = "12", ULConst.DEFAULT_REFERANCE_BANNER_HEIGHT = 200, ULConst.STATIS_USER_EVENT_GAME_LEVEL_START = "gameLevelStart", ULConst.STATIS_USER_EVENT_GAME_LEVEL_COMPLETE = "gameLevelComplete", ULConst.STATIS_USER_EVENT_GAME_COIN_ADD = "gameCoinAdd", ULConst.STATIS_USER_EVENT_GAME_COIN_LOST = "gameCoinLost", ULConst.STATIS_USER_EVENT_BUY_ACTION = "buyAction", ULConst.STATIS_USER_EVENT_ITEM_BUY = "itemBuy", ULConst.STATIS_USER_EVENT_COMMON_EVENT = "commonEvent", ULConst.STATIS_USER_EVENT_COMMON_EVENT_MULTI_FIELD = "commonEventMultiField", ULConst.STATIS_USER_EVENT_POINT_EVENT = "pointEvent", ULConst.STATIS_USER_ACTION_EVENT_LEVEL_START = "levelStart", ULConst.STATIS_USER_ACTION_EVENT_LEVEL_COMPLETE = "levelComplete", ULConst.STATIS_USER_ACTION_EVENT_COIN_CHANGE = "coinChange", ULConst.STATIS_USER_ACTION_EVENT_ITEM_BUY = "itemBuy", ULConst.STATIS_USER_ACTION_EVENT_BUY_ACTION = "buyAction", ULConst.STATIS_USER_ACTION_EVENT_COMMON_EVENT = "commonEvent", ULConst.STATIS_USER_ACTION_EVENT_VIDEO_POINT_EVENT = "videoPointEvent", ULConst.STATIS_UPLOAD_SPAN = 60, ULConst.STATIS_UPLOAD_SINGLE_REQUEST_MAX_COUNT = 100, ULConst.ADV_FAIL_TIP_NOAD = "暂时无法播放广告，请稍后再试", ULConst.ADV_FAIL_TIP_BUSY = "广告准备中，请稍后再试", ULConst.ENGLISH_ADV_FAIL_TIP_NOAD = "Ad display failed, please retry later.", ULConst.ENGLISH_ADV_FAIL_TIP_BUSY = "Ad in preparation, please retry later.", ULConst.ADV_ERR_CODE_CONSECUTIVE_FAIL = -100, ULConst.ADV_ERR_CODE_CDING = -101, ULConst.ADV_ERR_CODE_NATIVE_ID_ERROR = -102, ULConst.ADV_ERR_CODE_NATIVE_DATA_ERROR = -102, ULConst.ADV_ERR_CODE_CAN_NOT_PLAY = -103, ULConst.ADV_ERR_CODE_NOT_INITED = -104, ULConst.ADV_ERR_CODE_UNKNOWN = -105, ULConst.ADV_ERR_CODE_SHARE_NO_CALLBACK = -106, ULConst.ADV_ERR_CODE_SHARE_FAIL = -107, ULConst.ADV_ERR_CODE_ADOBJ_NULL = -108, ULConst.ADV_ERR_CODE_ADV_TYPE_CD = -109, ULConst.ADV_ERR_CODE_ADV_TYPE_DAILY_LIMIT = -110, ULConst.ADV_PRELOAD_STATE_READY = 1, ULConst.ADV_PRELOAD_STATE_LOADING = 2, ULConst.ADV_PRELOAD_STATE_NOAD = 3, ULConst.ADV_RESULT_CODE_SUCCESS = 1, ULConst.ADV_RESULT_CODE_FAILED = 0, ULConst.ADV_RESULT_CODE_OBSOLETE = 2, ULConst.ADV_MUST_DEFAULT_WEIGHT = 100, ULConst.ADV_RANDOM_DEFAULT_WEIGHT = 1, ULConst.ADV_DISABLE_DEFAULT_WEIGHT = 0, ULConst.ADV_RESULT_MSG_FAILED = "哎呀,广告走丢啦", ULConst.ADV_RESULT_MSG_SUCCESS = "show adv success", ULConst.ADV_NATIVE_RESULT_MSG_SUCCESS = "load native data success", ULConst.ADV_NATIVE_RESULT_MSG_FAIL = "load native data fail", ULConst.ADV_VIDEO_PLAY_FAIL_MSG = "广告提前关闭,无法获得奖励", ULConst.ADV_RESULT_MSG_CLICK = "click adv", ULConst.ADV_RESULT_MSG_CLOSE = "close adv", ULConst.ADV_NATIVE_OBSOLETE_MSG = "广告数据作废", ULConst.EXP_ADV_TYPE_CONST = "atype", ULConst.EXP_ADV_TEMPLATE_CONST = "tid", ULConst.EXP_ADV_POINT_CONST = ".", ULConst.UL_EVENT_ONREQUEST = "onRequest", ULConst.CMD_GET_ADV_STATE_RESULT = "/c/getAdvStateResult", ULConst.CMD_CLOSE_ALL_ADV_BY_TYPE_RESULT = "/c/closeAllAdvByTypeResult", ULConst.CMD_JUMP_NEW_GUIDE = "/c/jumpNewGuide", ULConst.CMD_GET_ADV_STATE = "/c/getAdvState", ULConst.CMD_CLOSE_ALL_ADV_BY_TYPE = "/c/closeAllAdvByType", ULConst.CMD_REWARD_ADV_RESULT = "/c/rewardAdvResult", ULConst.UL_ADV_DEFAULT_TIMEOUT_TIME = 3e4, ULConst.DEFAULT_TITLE = "广告", ULConst.DEFAULT_DESC = "哇!这个实在太棒啦!", ULConst.DEFAULT_TARGET_TITLE = "查看广告", ULConst.MIN_NATIVE_RESPONSE_CACHE_TIMEOUT = 0, ULConst.MAX_NATIVE_RESPONSE_CACHE_TIMEOUT = 3e4, ULConst.DEFAULT_NATIVE_RESPONSE_CACHE_TIMEOUT = 15e3, ULConst.ADV_LOAD_TYPE_PRELOAD = 1, ULConst.ADV_LOAD_TYPE_UNPRELOAD = 0;
	class ULEventDispatcher {
		constructor() {
			this.allListeners = {}
		}
		static getInstance() {
			return this._instance || (this._instance = new ULEventDispatcher), this._instance
		}
		addListener(t, e, a) {
			return this._addListener(t, e, a, !1)
		}
		once(t, e, a) {
			return this._addListener(t, e, a, !0)
		}
		_addListener(t, e, a, i) {
			if (e < ULConst.PRIORITY_NONE) return void this.removeListenerByCallback(t, a);
			let s = this.allListeners[t];
			s || (s = [], this.allListeners[t] = s);
			let n = -1;
			for (let i = 0; i < s.length; i++) {
				let o = s[i];
				if (o.callback == a) return ULLog.console.warn("ULEventDispatcher._addListener callback already exists:", t), !1; - 1 == n && o.priority < e && (n = i)
			}
			let o = new ULEventListener(t, e, a, i);
			return -1 != n ? s.splice(n, 0, o) : s.push(o), !0
		}
		removeListenerByCallback(t, e) {
			let a = this.allListeners[t];
			if (a)
				for (let t = a.length - 1; t >= 0; t--) {
					a[t].callback == e && a.splice(t, 1)
				}
		}
		removeListenersByType(t) {
			delete this.allListeners[t]
		}
		dispatch(t, e) {
			let a = null;
			return a = t instanceof ULEvent ? t : new ULEvent(t, e), ULConst.B_INNER_DEBUG && ULLog.console.log("ULEventDispatcher.dispatch", a.type, a.data), this._inner_dispatch(a).bCalled
		}
		dispatchWithReturn(t, e) {
			let a = null;
			return a = t instanceof ULEvent ? t : new ULEvent(t, e), ULConst.B_INNER_DEBUG && ULLog.console.log("ULEventDispatcher.dispatchWithReturn", a.type, a.data), this._inner_dispatch(a).returnValue
		}
		_inner_dispatch(t) {
			let e = !1,
				a = this.allListeners[t.type];
			if (!a) return ULConst.B_INNER_DEBUG && ULLog.console.log("  listeners not found"), {
				bCalled: !1,
				returnValue: null
			};
			for (let i = 0; i < a.length; i++) {
				const s = a[i];
				if (!s.isNeedRemove() && (s.isDispatchOnce() && s.markNeedRemove(), s.triggerCallback(t) && (e = !0), t.isPropagationStoped())) break
			}
			for (let t = a.length - 1; t >= 0; t--) {
				a[t].isNeedRemove() && a.splice(t, 1)
			}
			return {
				bCalled: e,
				returnValue: t.getReturnValue()
			}
		}
	}
	ULEventDispatcher._instance = null;
	var cConfig = JSON.parse('{\n    "b_sdk_oppoqg_debug": false,\n    "b_sdk_vivo_debug": false,\n    "creatorVersion": "",\n    "i_channel_info_timeout": 3000,\n    "i_game_start_ready_timeout": 10000,\n    "i_net_timeout": 5000,\n    "i_sdk_adv_banner_cd": 0,\n    "i_sdk_adv_banner_timeout": 30000,\n    "i_sdk_adv_embedded_timeout": 30000,\n    "i_sdk_adv_inter_cd": 0,\n    "i_sdk_adv_inter_timeout": 30000,\n    "i_sdk_adv_native_clicked_report_mode": 0,\n    "i_sdk_adv_native_life_time": 15000,\n    "i_sdk_adv_native_request_cd": 10000,\n    "i_sdk_adv_oppoqg_native_exposure_cd": 0,\n    "i_sdk_adv_paster_timeout": 30000,\n    "i_sdk_adv_type_banner_cd": 0,\n    "i_sdk_adv_type_banner_daily_limit": 0,\n    "i_sdk_adv_type_embedded_cd": 0,\n    "i_sdk_adv_type_embedded_daily_limit": 0,\n    "i_sdk_adv_type_interstitial_cd": 0,\n    "i_sdk_adv_type_interstitial_daily_limit": 0,\n    "i_sdk_adv_type_paster_cd": 0,\n    "i_sdk_adv_type_paster_daily_limit": 0,\n    "i_sdk_adv_type_url_cd": 0,\n    "i_sdk_adv_type_url_daily_limit": 0,\n    "i_sdk_adv_type_video_cd": 0,\n    "i_sdk_adv_type_video_daily_limit": 0,\n    "i_sdk_adv_url_timeout": 30000,\n    "i_sdk_adv_video_timeout": 30000,\n    "i_sdk_age_level_info_mode": 0,\n    "i_sdk_baidu_ad_failed_share_reward_success_count_limit": 3,\n    "i_sdk_baidu_add_game_to_my_favorite_mode": 0,\n    "i_sdk_baidu_auto_upload": 1,\n    "i_sdk_baidu_banner_timeout": 30000,\n    "i_sdk_baidu_debug_mode": 0,\n    "i_sdk_baidu_jump_game_reward_time": 20000,\n    "i_sdk_baidu_qrcode_preview": 1,\n    "i_sdk_bilibili_ad_failed_share_reward_success_count_limit": 5,\n    "i_sdk_bilibili_debug_mode": 0,\n    "i_sdk_channel_user_id_mode": 0,\n    "i_sdk_compress_res_mode": 1,\n    "i_sdk_content_security_check_support": 1,\n    "i_sdk_debug_mode": 0,\n    "i_sdk_facebook_megadata_mode": 0,\n    "i_sdk_find_mini_game_mode": 1,\n    "i_sdk_hago_banner_id": 0,\n    "i_sdk_hago_user": 1,\n    "i_sdk_hago_video_id": 10438,\n    "i_sdk_headline_ad_failed_share_reward_success_count_limit": 3,\n    "i_sdk_headline_auto_upload": 1,\n    "i_sdk_headline_cuttemplate_default_interval": 2000,\n    "i_sdk_headline_favorite_mode": 1,\n    "i_sdk_headline_follow_support": 1,\n    "i_sdk_headline_getUserInfo_force": 1,\n    "i_sdk_headline_installShortcut_support": 1,\n    "i_sdk_headline_qrcode_preview": 1,\n    "i_sdk_headline_record_delay_time": 500,\n    "i_sdk_headline_record_support": 1,\n    "i_sdk_headline_subscribe_use_temleteIds_mode": 0,\n    "i_sdk_installShortcut_mode": 1,\n    "i_sdk_jump_game_resource_mode": 1,\n    "i_sdk_jump_single_random_length": 5,\n    "i_sdk_jumplist_mode": 1,\n    "i_sdk_kk_appId": 0,\n    "i_sdk_kuaishou_follow_support": 1,\n    "i_sdk_kuaishou_record_delay_time": 500,\n    "i_sdk_kuaishou_record_support": 1,\n    "i_sdk_lianxin_is_landscape": 0,\n    "i_sdk_megadata_encrypt": 1,\n    "i_sdk_megadata_mode": 0,\n    "i_sdk_megadata_upload_span": 5000,\n    "i_sdk_moreWonderful_mode": 0,\n    "i_sdk_moregame_mode": 1,\n    "i_sdk_oppoqg_ad_ecd": 0,\n    "i_sdk_oppoqg_banner_mode": 0,\n    "i_sdk_oppoqg_jump_game_reward_time": 20000,\n    "i_sdk_oppoqg_not_show_banner_after_user_close_count_limit": 5,\n    "i_sdk_pay_mode": 0,\n    "i_sdk_phone_vibrate": 0,\n    "i_sdk_qq_ad_failed_share_reward_confirm_success_cycle": 72000,\n    "i_sdk_qq_ad_failed_share_reward_fail_count": 2,\n    "i_sdk_qq_ad_failed_share_reward_success_count_limit": 3,\n    "i_sdk_qq_ad_failed_share_reward_success_radios": 70,\n    "i_sdk_qq_ad_failed_share_reward_success_time_interval": 5000,\n    "i_sdk_qq_appbox_cd": 30000,\n    "i_sdk_qq_appbox_suc_ratios": 0,\n    "i_sdk_qq_auto_upload": 1,\n    "i_sdk_qq_block_cd": 30000,\n    "i_sdk_qq_qrcode_preview": 1,\n    "i_sdk_refresh_request_num": 18,\n    "i_sdk_sdk_rank_mode": 0,\n    "i_sdk_share_mode": 0,\n    "i_sdk_support_open_url": 0,\n    "i_sdk_support_record_share": 1,\n    "i_sdk_trim_adv_err_switch": 1,\n    "i_sdk_weixin_ad_failed_share_reward_confirm_success_cycle": 72000,\n    "i_sdk_weixin_ad_failed_share_reward_fail_count": 2,\n    "i_sdk_weixin_ad_failed_share_reward_success_count_limit": 3,\n    "i_sdk_weixin_ad_failed_share_reward_success_radios": 70,\n    "i_sdk_weixin_ad_failed_share_reward_success_time_interval": 5000,\n    "i_sdk_weixin_auto_upload": 1,\n    "i_sdk_weixin_banner_autoRefresh_mode": 0,\n    "i_sdk_weixin_banner_intervals": 30,\n    "i_sdk_weixin_currency_ratio": 10,\n    "i_sdk_weixin_env": 0,\n    "i_sdk_weixin_jump_game_reward_time": 0,\n    "i_sdk_weixin_jump_game_reward_type": 0,\n    "i_sdk_weixin_qrcode_preview": 1,\n    "i_sdk_weixin_replace_grid_with_custom": 1,\n    "i_sdk_weixin_subscribe_use_temleteIds_mode": 0,\n    "layaVersion": "",\n    "s_game_name": "叶罗丽彩妆公主",\n    "s_prj_name": "prj.game83",\n    "s_sdk_4399minigame_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/game83/4399minigame/v1",\n    "s_sdk_adv_info": {\n        "1": {\n            "group": [\n                "1"\n            ],\n            "type": "interstitial"\n        },\n        "2": {\n            "group": [\n                "2"\n            ],\n            "type": "banner"\n        },\n        "3": {\n            "group": [\n                "3"\n            ],\n            "type": "embedded"\n        },\n        "4": {\n            "group": [\n                "4"\n            ],\n            "type": "video"\n        },\n        "5": {\n            "group": [\n                "5"\n            ],\n            "type": "url"\n        }\n    },\n    "s_sdk_adv_show_banner_list": "ULAdvFaceBook",\n    "s_sdk_adv_show_embedded_list": "0",\n    "s_sdk_adv_show_inter_list": "ULAdvFaceBook",\n    "s_sdk_adv_show_paster_list": "0",\n    "s_sdk_adv_show_url_list": "0",\n    "s_sdk_adv_show_video_list": "ULAdvFaceBook",\n    "s_sdk_age_level_info": "",\n    "s_sdk_baidu_adv_app_sid": "d644b8c5",\n    "s_sdk_baidu_app_id": "22543335",\n    "s_sdk_baidu_banner_id": "0",\n    "s_sdk_baidu_change_log": "",\n    "s_sdk_baidu_deal_id": "0",\n    "s_sdk_baidu_min_swan_version": "1.0.8",\n    "s_sdk_baidu_pay_app_key": "BQf3kGzeftWjILQ90n2BsmFkBAkOP9Dw",\n    "s_sdk_baidu_pay_private_key": "-----BEGIN RSA PRIVATE KEY-----MIICXgIBAAKBgQC46Giy1S4Zuys/c3QO6VZVWAOo1tussbIpqI0M7edU9OC732leFej2DmG3O9XRh9NlYjoAq4hyt7DxiZ6MyN8IdStZn4b0/e/CZKQA5WaCI5h71hUTwCJTzHZHvO+woDWaE2mOSsBfjAdwTsHUr32eCPzju/1zatys02W7ai4v+wIDAQABAoGAGjbAmRHF3ln9kJpCitajqae3pRkIvZvXgTZnAL09fXrV3WyX2IHMrA1v5vUxo+nYm1foly26Q2EtUaDL/HOBwshbwEtR5TR0g+kZBpA+S4wt/ujZPlALmZiGuQjjqwWFo9OfeskXer7vA5UWYemDMvy7XQ2TWoLNOzI+LaVvEPECQQDpEgY7XmrKeq8qkUFPsDjcEa7SZ2eEEOps0NKmewGvAaiavm7+8yCdS/ZPS7ZD6590TanFWy3gJtugw/vPa2tpAkEAyxlj8u+EYKchPBYehuRjm4W5SlJNAGrABqrJjM50jQ4aRVr1LbS6R0S77kTaZLTV/w8eYk1LS9cTCaY+JB+HwwJBAIXrlmscmG4ZynbCGe4JCtLg0jwRsHhBJAI8hx2jxlbhtBieXbbeypm3YSM1FNi4FdpFGczN1HFcwowAsLsBNSkCQQC9YgywQKYI1m+ILvwCPr+fCt/PrNS+mcw7q0/Lq8xEp6zZlUpgd1DoGfC/6pZXJ8UQVFG5ymd27bOD4O+7EWevAkEAzYHfclV/kP3V1aCR0KoXBHA4WIHKa+JaVuFMIDZqd/SsfsoKDn+Stsajl/e8LAwt9XXctYWNvGsVfCSfZ5Y3tw==-----END RSA PRIVATE KEY-----",\n    "s_sdk_baidu_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game83/baidu/v1",\n    "s_sdk_baidu_version_name": "1.0.3.2",\n    "s_sdk_baidu_video_id": "7211330",\n    "s_sdk_bilibili_appid": "biligamea493e76da338b070",\n    "s_sdk_bilibili_banner_id": "0",\n    "s_sdk_bilibili_find_me_url": "https://gamesres.ultralisk.cn/h5_games_res/common/find_me/bilibili/83.png",\n    "s_sdk_bilibili_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game83/bilibili/v1",\n    "s_sdk_bilibili_sub_context": "",\n    "s_sdk_bilibili_version_name": "1.0.0",\n    "s_sdk_bilibili_video_id": "0",\n    "s_sdk_cdk_app_id": "89",\n    "s_sdk_cdk_url": "https://cdkey.ultralisk.cn/commoncdk/usecdk",\n    "s_sdk_cop_addr": "https://copv7.ultralisk.cn/h5/getdata/",\n    "s_sdk_cop_game_id": "0",\n    "s_sdk_daren_base_gameres_url": "https://gamesres.ultralisk.cn/h5_games_daren/",\n    "s_sdk_daren_git_addr": "ulsdk/h5_games_daren",\n    "s_sdk_daren_git_branch": "master",\n    "s_sdk_facebook_appId": "1244301175986593",\n    "s_sdk_facebook_interId": "4864743603539728_5324943400853077",\n    "s_sdk_facebook_videoId": "4864743603539728_5324944030853014",\n    "s_sdk_funheadline_app_id": "a42MTLvTV98S",\n    "s_sdk_funheadline_app_key": "",\n    "s_sdk_funheadline_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/game83/funheadline/v0",\n    "s_sdk_hago_country_code": "ID",\n    "s_sdk_hago_env": "ProDuct",\n    "s_sdk_hago_game_id": "yeluolicaizhuanggongzhu",\n    "s_sdk_hago_language": "id",\n    "s_sdk_headline_app_secret": "d2818aa59bba3a0996a69ed0830d0582c9af8610",\n    "s_sdk_headline_appid": "ttce78b8c5514341ba",\n    "s_sdk_headline_banner_adunit": "3d04jlumgp4gc2407n",\n    "s_sdk_headline_change_log": "",\n    "s_sdk_headline_douyin_find_me_url": "https://gamesres.ultralisk.cn/h5_games_res/common/find_me/douyin_icon/83.png",\n    "s_sdk_headline_get_token_url": "https://sdkserver.ultralisk.cn/ttgettoken",\n    "s_sdk_headline_get_video_info_url": "https://gate.snssdk.com/developer/api/get_video_info",\n    "s_sdk_headline_inter_adunit": "kick5e9e36k2jlmh6l",\n    "s_sdk_headline_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game83/headline/v1",\n    "s_sdk_headline_share_video_tag": "yllczgz",\n    "s_sdk_headline_sub_context": "0",\n    "s_sdk_headline_subscribe_url": "https://subscrible.ultralisk.cn/hdsubscrible/posthdsubscribleusermsg",\n    "s_sdk_headline_top_video_by_like_url": "https://gate.snssdk.com/developer/api/get_top_video_ids_by_like",\n    "s_sdk_headline_top_video_by_time_url": "https://gate.snssdk.com/developer/api/get_top_video_ids_by_time",\n    "s_sdk_headline_toutiao_find_me_url": "https://gamesres.ultralisk.cn/h5_games_res/common/find_me/toutiao_icon/83.png",\n    "s_sdk_headline_version_name": "1.4.97",\n    "s_sdk_headline_video_adunit": "37hkbr7ndfnmdnc60k",\n    "s_sdk_huawei_appid": "103588147",\n    "s_sdk_huawei_banner_adunit": "0",\n    "s_sdk_huawei_inter_adunit": "0",\n    "s_sdk_huawei_login_tip": "",\n    "s_sdk_huawei_merchant_id": "890086200300024295",\n    "s_sdk_huawei_merchant_name": "成都双晨科技有限公司",\n    "s_sdk_huawei_native_ids": {\n        "1": "z041rqm62e",\n        "2": "z041rqm62e",\n        "3": "z041rqm62e"\n    },\n    "s_sdk_huawei_package_name": "com.ultralisk.game83.huawei",\n    "s_sdk_huawei_private_key": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCE1fMb9mLSx6KryXENvnzA2ksE57vARotUJYOAG+eTA1hbigFBWZ04F85wQYq7lz44xHPTs1VS/xatN7SnBHUMufFM0GMmQNMDDz9yxE2PEAG7xL8/YEe/PC22tPvJbIMrlACIQg6eos+OIXA47qUcURp9NNPDxAB65hAKqGUD3UG4fFhSczV8j4zy5EAQ9nl2GDIJ8eOxiCsYQeIMGnSA3xdoOLypN5y0BMOP2p7lysZw6jRnOfLUialkj2/t6d1S9aJA7LL5svilIMH9Ty1DnKYDH0vGGmzwgtODvwDkLk8besryKL0oVjkybNjpBVogzP8+LzWK+RoTAOY2M7ArAgMBAAECggEAXzNatYqijr/G5OlNHfWMQUbxhwVxuL6WMmtkUFcvY1x9YbWJasWH+OCO8kL247TkQhkBjhKzrvTk0qXe0ehO3x0QQ+YBeTPyRvoRlfX8Q/DL3T+HdStSoErH1G7nGRes9nlu3DjDc4vpxspOPG9EZAP4QQ2wS1hYo7voeUrwgpBtnxsCG7//2P29Ov8m/KTBMKqmtapSfpwJ8J1ZU7h871ex5oScH4DSt0rn5RL6m34cpGILHx4r3OWKK2LBd1Xv71eepO2Qox7AFH30as1lr2ykt6E0xQnidjKrLMV5eqYdlub9gM2frRMXUianfilJ7Mw+vGmBv2VTbj7ykBC2UQKBgQDgIylzOz8gtyf8eBrWAFTs79h0lduWBMBWL9MLQ+MgxUgcTKBmOui2alB79sezNK9hZswvy0tj7696hCzkVFYX2Hdt1eJlwQV0Rt8d9Mq0igob4Bwknv6OLf6ucg++Z0L1nP6SeGejtWn4j8Dc5So8g6vYm6Eq1WMBkZi8mX3gqQKBgQCXuCBsSKS6EMfKP/mOzUKQzl6dUlUlTHgUEEuvKEOen0sVK6NmAIgr1DemVN5FgabhdAPN5EHS+Bhv8DlmqXq0GeBI62gxUo9FjQxFWaXR58YRIuX1WeGaRQUa0eaDuSHUnPdXz6Qcjqqry2RUdbMewgW4uVjcgyGrrJafccEKswKBgC5XVsSaZUzwUXYjpvjEDMsIM+q26TW1OccYEDxuBtHJuEURmsBIQcElbgqTVWq54+Dxjhn7oFTDQ7bDCT0UKtC3UsoExNBg/i2yUYMyD48QU1K8HVV9AgiHffa3YoXtd6ysjv3dox/37DcWEbwaLYdhefBJDSN8BwJWBgxId/wxAoGACM3Te9UfUfjFTzQ1LBc3JKYFEYYEkNyGH0vuyGRCwEKoHbthiPrA7CItdIZ6O3hRkcWkrt7u/uoMqPo8qnttNmRGApU+f5Y14ChWLPQNzkdv0/C9fWZQ1B3rNOo3QS+OCgNtyveuo0WYG836rXgDA+boZBbFVE57trWWK/xy4kcCgYAtyPNyafy1APHafjPW7leHnNfo4BuCHjL0Cd89f3IQpaxZCcDNEthV5DHPbXxdaz0o677caT4fU004Leu73sGki2USEWUFHR2yrkLfOcu6qVJJrPbAaPlF1jVL6faVdk6Xhjre/QCBSwxqm4vpSRjuum6TOYZKH7e2Doodb22zXw==",\n    "s_sdk_huawei_public_key": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAhNXzG/Zi0seiq8lxDb58wNpLBOe7wEaLVCWDgBvnkwNYW4oBQVmdOBfOcEGKu5c+OMRz07NVUv8WrTe0pwR1DLnxTNBjJkDTAw8/csRNjxABu8S/P2BHvzwttrT7yWyDK5QAiEIOnqLPjiFwOO6lHFEafTTTw8QAeuYQCqhlA91BuHxYUnM1fI+M8uRAEPZ5dhgyCfHjsYgrGEHiDBp0gN8XaDi8qTectATDj9qe5crGcOo0Zzny1ImpZI9v7endUvWiQOyy+bL4pSDB/U8tQ5ymAx9Lxhps8ILTg78A5C5PG3rK8ii9KFY5MmzY6QVaIMz/Pi81ivkaEwDmNjOwKwIDAQAB",\n    "s_sdk_huawei_tiny_package_server": "https://gamesres.ultralisk.cn/h5_games_res/game83/huawei/v1",\n    "s_sdk_huawei_version_code": "9",\n    "s_sdk_huawei_version_name": "1.0.8",\n    "s_sdk_huawei_video_adunit": "c6t1zf23p7",\n    "s_sdk_jump_game_statis_game_indexes": "",\n    "s_sdk_kk_ad_pos_id": "0",\n    "s_sdk_kuaishou_appid": "0",\n    "s_sdk_kuaishou_inter_adunit": "0",\n    "s_sdk_kuaishou_version_name": "1.1.80",\n    "s_sdk_kuaishou_video_adunit": "0",\n    "s_sdk_lan_debug_address": "",\n    "s_sdk_lianshang_bannerId": "0",\n    "s_sdk_lianshang_tiny_package_server": "https://gamesres.ultralisk.cn/h5_games_res/game83/lianshang/v1",\n    "s_sdk_lianshang_videoId": "0",\n    "s_sdk_lianxin_appid": "lx33c7ae8755364481",\n    "s_sdk_lianxin_bannerId": "33",\n    "s_sdk_lianxin_cdn_server": "https://gamesres.ultralisk.cn/h5_games_res/game83/lianxin/v1/",\n    "s_sdk_lianxin_clientkey": "c3b98fbc26244392886bb44eb29265e3",\n    "s_sdk_lianxin_interId": "66",\n    "s_sdk_lianxin_serverkey": "480324fefe6411ebbb66525400c34b90",\n    "s_sdk_lianxin_share_icon_url": "",\n    "s_sdk_lianxin_videoId": "67",\n    "s_sdk_megadata_close_table_type_ids": "",\n    "s_sdk_megadata_game_id": "36",\n    "s_sdk_megadata_point_event_open_category_ids": "0;1;2;3;4;5;6;7;8;9;10",\n    "s_sdk_megadata_server_jump_game_type_id": "jumpabtest",\n    "s_sdk_megadata_server_type_id": "8",\n    "s_sdk_megadata_test_url": "https://megadatav7.ultralisk.cn/batchtestmodedataupload",\n    "s_sdk_megadata_url": "https://megadatav7.ultralisk.cn/batchdataupload",\n    "s_sdk_meizu_gameres_url": "",\n    "s_sdk_meizuqg_banner_id": "2Uo9A57A",\n    "s_sdk_meizuqg_inter_id": "WVIlM8uF",\n    "s_sdk_meizuqg_package_name": "0",\n    "s_sdk_meizuqg_tiny_package_server": "https://gamesres.ultralisk.cn/h5_games_res/game83/meizu/v1/",\n    "s_sdk_meizuqg_version_code": "11",\n    "s_sdk_meizuqg_version_name": "1.2.15",\n    "s_sdk_meizuqg_video_id": "LFwQU2S6",\n    "s_sdk_mgc_bannerId": null,\n    "s_sdk_mgc_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/game83/mgc/v1",\n    "s_sdk_mgc_interId": null,\n    "s_sdk_mgc_videoId": null,\n    "s_sdk_oppoqg_app_key": "EG4qLy9K63w4sgwkw8Gsgsg0c",\n    "s_sdk_oppoqg_appid": "30336313",\n    "s_sdk_oppoqg_appsecret": "3DE51214714042cd4891dc8F7d4BA4D8",\n    "s_sdk_oppoqg_banner_box_id": "0",\n    "s_sdk_oppoqg_banner_id": "218137",\n    "s_sdk_oppoqg_inter_box_id": "306889",\n    "s_sdk_oppoqg_interstitial_id": "0",\n    "s_sdk_oppoqg_native_ids": {\n        "1": "218133",\n        "2": "218133",\n        "3": "218133"\n    },\n    "s_sdk_oppoqg_package_name": "com.ultralisk.game83.nearme.gamecenter",\n    "s_sdk_oppoqg_pre_order_url": "https://jits.open.oppomobile.com/jitsopen/api/pay/v1.0/preOrder",\n    "s_sdk_oppoqg_private_key": "-----BEGIN RSA PRIVATE KEY-----MIICXgIBAAKBgQC46Giy1S4Zuys/c3QO6VZVWAOo1tussbIpqI0M7edU9OC732leFej2DmG3O9XRh9NlYjoAq4hyt7DxiZ6MyN8IdStZn4b0/e/CZKQA5WaCI5h71hUTwCJTzHZHvO+woDWaE2mOSsBfjAdwTsHUr32eCPzju/1zatys02W7ai4v+wIDAQABAoGAGjbAmRHF3ln9kJpCitajqae3pRkIvZvXgTZnAL09fXrV3WyX2IHMrA1v5vUxo+nYm1foly26Q2EtUaDL/HOBwshbwEtR5TR0g+kZBpA+S4wt/ujZPlALmZiGuQjjqwWFo9OfeskXer7vA5UWYemDMvy7XQ2TWoLNOzI+LaVvEPECQQDpEgY7XmrKeq8qkUFPsDjcEa7SZ2eEEOps0NKmewGvAaiavm7+8yCdS/ZPS7ZD6590TanFWy3gJtugw/vPa2tpAkEAyxlj8u+EYKchPBYehuRjm4W5SlJNAGrABqrJjM50jQ4aRVr1LbS6R0S77kTaZLTV/w8eYk1LS9cTCaY+JB+HwwJBAIXrlmscmG4ZynbCGe4JCtLg0jwRsHhBJAI8hx2jxlbhtBieXbbeypm3YSM1FNi4FdpFGczN1HFcwowAsLsBNSkCQQC9YgywQKYI1m+ILvwCPr+fCt/PrNS+mcw7q0/Lq8xEp6zZlUpgd1DoGfC/6pZXJ8UQVFG5ymd27bOD4O+7EWevAkEAzYHfclV/kP3V1aCR0KoXBHA4WIHKa+JaVuFMIDZqd/SsfsoKDn+Stsajl/e8LAwt9XXctYWNvGsVfCSfZ5Y3tw==-----END RSA PRIVATE KEY-----",\n    "s_sdk_oppoqg_tiny_package_server": "https://gamesres.ultralisk.cn/h5_games_res/game83/oppoqg/v1",\n    "s_sdk_oppoqg_version_code": "83",\n    "s_sdk_oppoqg_version_name": "83",\n    "s_sdk_oppoqg_video_id": "218132",\n    "s_sdk_qq_app_id": "1111130815",\n    "s_sdk_qq_appbox_id": "381dc833045b8cc96d84dc5dd939ee84",\n    "s_sdk_qq_banner_id": "98fafdad77ea74465457cfb745190b33",\n    "s_sdk_qq_block_id": "0",\n    "s_sdk_qq_change_log": "",\n    "s_sdk_qq_inter_id": "e3764b45a63aebc2d97e857d022b1d1d",\n    "s_sdk_qq_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game83/qq/v1",\n    "s_sdk_qq_sub_context": "",\n    "s_sdk_qq_version_name": "1.3.6",\n    "s_sdk_qq_video_id": "d156a2e0e75686c0443aed3b3dcf3a99",\n    "s_sdk_refresh_resource_type": "dir",\n    "s_sdk_sdkdemo_gameres_url": "",\n    "s_sdk_uc_banner_id": null,\n    "s_sdk_uc_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/game83/uc/v1",\n    "s_sdk_uc_video_id": null,\n    "s_sdk_user_data_get_url": "https://h5gameserver.ultralisk.cn/getuserdata",\n    "s_sdk_user_data_save_url": "https://h5gameserver.ultralisk.cn/savealluserdata",\n    "s_sdk_version": "b054cd6d9",\n    "s_sdk_vivo_app_id": "100009223",\n    "s_sdk_vivo_app_secret": "20160310164821346227",\n    "s_sdk_vivo_banner_box_id": "74091777787d4a989a1194073848e241",\n    "s_sdk_vivo_banner_id": "3557afc7509c4c5185bf4d78dbe05649",\n    "s_sdk_vivo_custom_adv_minSize": "720*630",\n    "s_sdk_vivo_custom_id": "e125468473d54c2d9d5d7ff2250af4e0",\n    "s_sdk_vivo_inter_box_id": "9762391d0f604c0e869f55c3cbe98c0a",\n    "s_sdk_vivo_interstitial_id": "0a79cdce792d499aab23fb576d4d7f30",\n    "s_sdk_vivo_native_ids": {\n        "1": "54604d8167bc4de4ba597b287e0e66e4",\n        "2": "54604d8167bc4de4ba597b287e0e66e4",\n        "3": "54604d8167bc4de4ba597b287e0e66e4"\n    },\n    "s_sdk_vivo_package_name": "com.ultralisk.game83.vivominigame",\n    "s_sdk_vivo_qg_url": "https://pay.vivo.com.cn/vivopay/order/request",\n    "s_sdk_vivo_tiny_package_server": "https://gamesres.ultralisk.cn/h5_games_res/game83/vivo/v1",\n    "s_sdk_vivo_version_code": "127",\n    "s_sdk_vivo_version_name": "1.5.76",\n    "s_sdk_vivo_video_id": "a8bd1238ab284cda8fd5fe284d3c57d0",\n    "s_sdk_webreview_gameres_url": "https://gamesres.ultralisk.cn/h5_games_res/md5test/PkueF9XQmvOKNIj83/",\n    "s_sdk_webreview_test_gameres_url": "0",\n    "s_sdk_weixin_appid": "wxc22ab8a3dd9ba848",\n    "s_sdk_weixin_appsecret": "0",\n    "s_sdk_weixin_banner_adunit_ids": {\n        "2": "adunit-6619e68d282b94fc"\n    },\n    "s_sdk_weixin_change_log": "",\n    "s_sdk_weixin_find_me_url": "https://gamesres.ultralisk.cn/h5_games_res/common/find_me/weixin_icon/83.png",\n    "s_sdk_weixin_grid_adunit_id": "0",\n    "s_sdk_weixin_interstitial_ids": {\n        "1": "adunit-6954b1dfad2826c3"\n    },\n    "s_sdk_weixin_login_url": "https://sdkserver.ultralisk.cn/wxuserlogin",\n    "s_sdk_weixin_mch_id": "0",\n    "s_sdk_weixin_offer_id": "0",\n    "s_sdk_weixin_remote_server_root": "https://gamesres.ultralisk.cn/h5_games_res/game83/weixin/v1",\n    "s_sdk_weixin_sub_context": "0",\n    "s_sdk_weixin_subscribe_url": "https://subscrible.ultralisk.cn/wxsubscrible/postwxsubscribleusermsg",\n    "s_sdk_weixin_version_name": "1.3.1",\n    "s_sdk_weixin_video_adunit_ids": {\n        "4": "adunit-203851f7645cf777"\n    },\n    "srcRootPath": "src/script/",\n    "t_customer_service_info": [\n        "kefu@ultralisk.cn"\n    ],\n    "t_sdk_baidu_jump_games": [\n        {\n            "id": "agkY5p00cFcUknIs9LW9xW9Q6LZMlDLN",\n            "index": "86",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/86.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/86.png"\n            ]\n        },\n        {\n            "id": "gVPpWFaCDbKoC2VKawlPsMCjWMuoYObk",\n            "index": "70",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/70.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/70.png"\n            ]\n        },\n        {\n            "id": "lCrh6dpPbTAFPMjMfhEvU0Ex9kn6KGG9",\n            "index": "55v2",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/55v2.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/55v2.png"\n            ]\n        },\n        {\n            "id": "rHLWLgOdeaaWCgVea07awxLcGOVEWIOf",\n            "index": "56",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/56.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/56.png"\n            ]\n        },\n        {\n            "id": "jFG1LSc5YxBcFbhHikNYqYOqax4mBS8E",\n            "index": "82",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/82.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/82.png"\n            ]\n        },\n        {\n            "id": "EkVaIkAWsaHWWD0Rks1uvEHrYv1OClFq",\n            "index": "80",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/80.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/80.png"\n            ]\n        },\n        {\n            "id": "vhAHSZ2oCteEEtf8C6HiQeUZgWTj5F1M",\n            "index": "75",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/75.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/75.png"\n            ]\n        },\n        {\n            "id": "cA5GKqcGBGEgXmSXpNjxjOqDt0IB9boY",\n            "index": "74",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/74.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/74.png"\n            ]\n        },\n        {\n            "id": "WMIhnYCNyOcWP4TISwlEbZ04RtYwviL1",\n            "index": "79",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/79.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/79.png"\n            ]\n        },\n        {\n            "id": "9YTDrCKInzLR01Mh2qLyp5GT5gkPUlCz",\n            "index": "69",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/69.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/69.png"\n            ]\n        },\n        {\n            "id": "xV0P9UXGP2APaDTi7CXHFuIiKYmtkPMg",\n            "index": "78",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/78.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/78.png"\n            ]\n        },\n        {\n            "id": "2w4vuOxXbFGA1GqVYBI41kG1Atd3FVbw",\n            "index": "76",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/76.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/76.png"\n            ]\n        },\n        {\n            "id": "3B10fP8fRsHpjlOprdW89c2y8U313ps9",\n            "index": "73",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/73.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/73.png"\n            ]\n        },\n        {\n            "id": "AF9HIGa1PMVmyLMXbVYqYgNwFmYPtrRy",\n            "index": "85",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/85.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/85.png"\n            ]\n        },\n        {\n            "id": "G3Co4nKxv2rvToCBdKuaBLcmRaFqPSe8",\n            "index": "55",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu1/55.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_baidu2/55.png"\n            ]\n        }\n    ],\n    "t_sdk_baidu_pay_code": {\n        \n    },\n    "t_sdk_baidu_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share1.jpg",\n            "title": "给叶罗丽仙子化妆，她居然会眨眼配合！"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share2.jpg",\n            "title": "什么？叶罗丽也需要做脸部护理？"\n        }\n    ],\n    "t_sdk_bilibili_jump_games": [\n        \n    ],\n    "t_sdk_bilibili_navigate_to_mini_game_app_id_list": [\n        \n    ],\n    "t_sdk_bilibili_pay_code": {\n        \n    },\n    "t_sdk_bilibili_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share1.jpg",\n            "title": "给叶罗丽仙子化妆，她居然会眨眼配合！"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share2.jpg",\n            "title": "什么？叶罗丽也需要做脸部护理？"\n        }\n    ],\n    "t_sdk_common_event_ids": {\n        "add_subscrible": "102",\n        "click_more_game_icon_list": "106",\n        "click_more_game_icon_reward": "105",\n        "click_more_game_icon_single": "104",\n        "click_share": "101",\n        "click_subscrible": "103",\n        "open_cdk": "107",\n        "open_share": "100"\n    },\n    "t_sdk_common_modify_tag_afterBuild": [\n        \n    ],\n    "t_sdk_common_modify_tag_beforeBuild": [\n        \n    ],\n    "t_sdk_compress_json_includes": [\n        "**/version*.json"\n    ],\n    "t_sdk_compress_json_includes_rem": "",\n    "t_sdk_compress_res_config": [\n        {\n            "cmds": "",\n            "rep": "ui/common/mask.*"\n        },\n        {\n            "cmds": "truepng /o max /cq c=1024 d=75 | optipng -strip all -o7 | zopflipng -y --lossy_8bit --lossy_transparent",\n            "minFileSize": 2048,\n            "rep": "nofilematch_just_for_example"\n        },\n        {\n            "cmds": "jpeg-recompress --strip -t 1.0 --min 80 | guetzil --quality 85",\n            "minFileSize": 2048,\n            "rep": ".*//.jpg"\n        },\n        {\n            "cmds": "autopng --quality 60-100 | optipng -strip all -o7 | zopflipng -y --lossy_8bit --lossy_transparent",\n            "minFileSize": 2048,\n            "rep": ".*//.png"\n        }\n    ],\n    "t_sdk_cop_default_cop": {\n        "ad_inst_cd": 60,\n        "ad_interstitial_ratiosn        "ad_video_cds": "0;0;0;10;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0",\n        "ad_video_counts": "0;10;0;10;2;2;12;0;0;2;3;0;0;0;5;0;10;5;3;20;6;1;5;5;10;2;5;5;2;10;2;10;10;10;12;12;12;12;12;1212;12;12;1212;12;12;12;1212;12",\n        "ad_video_ratios": "100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;100;30;100;100;100;100;100;100;100;100;100;100;100",\n        "alert_hud_prompt_cds": "3000;3000;3000;3000;3000;3000;3000;3000;3000;3000;3000;3000;3000",\n        "alert_hud_prompt_orders": "2;1;3;4",\n        "alert_hud_prompt_ratios": "100;100;100;100;100;100;100;100;100;100;100;100;100",\n        "b_inst_in_guide": 1,\n        "b_inst_or_banner": 0,\n        "cat_delta_time": 60,\n        "cat_ratios": 0,\n        "native_insert_mode": 2,\n        "share_mode": "0;0;0;0;0;0;0;0;0;0;0;0;0;0",\n        "some_function": "0;0;0;0;0",\n        "o_sdk_adv_show_list": {\n            "templates": {\n                "banner": {\n                    "moduleName": "ULAdvFacebookBanner",\n                    "rewardType": "show",\n                    "loadTypes": "0",\n                    "exp": "",\n                    "rcd": "",\n                    "args": [\n                        "4864743603539728_5324942390853178"\n                    ],\n                    "argWeights": [\n                        "100"\n                    ]\n                },\n                "video": {\n                    "moduleName": "ULAdvFaceBookVideo",\n                    "rewardType": "show",\n                    "loadTypes": "0",\n                    "exp": "",\n                    "rcd": "",\n                    "args": [\n                        "4864743603539728_5324944030853014"\n                    ],\n                    "argWeights": [\n                        "100"\n                    ]\n                },\n                "inter": {\n                    "moduleName": "ULAdvFaceBookInter",\n                    "rewardType": "show",\n                    "loadTypes": "0",\n                    "exp": "",\n                    "rcd": "",\n                    "args": [\n                        "4864743603539728_5324943400853077"\n                    ],\n                    "argWeights": [\n                        "100"\n                    ]\n                }\n            },\n            "advSlots": {\n                "1": {\n                    "rcd": "",\n                    "subAids": [\n                        \n                    ],\n                    "schemes": [\n                        {\n                            "exp": "",\n                            "rcd": "",\n                            "tids": [\n                                "inter"\n                            ],\n                            "tidWeights": [\n                                "100"\n                            ],\n                            "weight": "100"\n                        }\n                    ]\n                },\n                "2": {\n                    "rcd": "",\n                    "subAids": [\n                        \n                    ],\n                    "schemes": [\n                        {\n                            "exp": "",\n                            "rcd": "",\n                            "tids": [\n                                "banner"\n                            ],\n                            "tidWeights": [\n                                "100"\n                            ],\n                            "weight": "100"\n                        }\n                    ]\n                },\n                "4": {\n                    "rcd": "",\n                    "subAids": [\n                        \n                    ],\n                    "schemes": [\n                        {\n                            "exp": "",\n                            "rcd": "",\n                            "tids": [\n                                "video"\n                            ],\n                            "tidWeights": [\n                                "100"\n                            ],\n                            "weight": "100"\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    "t_sdk_cop_simulate_city_data": {\n        "0": "未知城市",\n        "1001": "海南藏族自治州",\n        "1002": "西宁",\n        "1003": "海东",\n        "1004": "黄南藏族自治州",\n        "1005": "海西蒙古族藏族自治州",\n        "1006": "海北藏族自治州",\n        "1007": "果洛藏族自治州",\n        "1008": "玉树藏族自治州",\n        "101": "北京",\n        "1101": "临夏回族自治州",\n        "1102": "甘南藏族自治州",\n        "1103": "白银",\n        "1104": "陇南",\n        "1105": "定西",\n        "1106": "平凉",\n        "1107": "金昌",\n        "1108": "酒泉",\n        "1109": "张掖",\n        "1110": "庆阳",\n        "1111": "兰州",\n        "1112": "武威",\n        "1113": "嘉峪关",\n        "1114": "天水",\n        "1201": "银川",\n        "1202": "固原",\n        "1203": "吴忠",\n        "1204": "中卫",\n        "1205": "石嘴山",\n        "1301": "商洛",\n        "1302": "安康",\n        "1303": "榆林",\n        "1304": "铜川",\n        "1305": "咸阳",\n        "1306": "西安",\n        "1307": "渭南",\n        "1308": "汉中",\n        "1309": "宝鸡",\n        "1310": "延安",\n        "1401": "长春",\n        "1402": "白城",\n        "1403": "松原",\n        "1404": "白山",\n        "1405": "吉林",\n        "1406": "延边朝鲜族自治州",\n        "1407": "四平",\n        "1408": "辽源",\n        "1409": "通化",\n        "1501": "铜陵",\n        "1502": "亳州",\n        "1503": "黄山",\n        "1504": "池州",\n        "1505": "合肥",\n        "1506": "淮北",\n        "1507": "滁州",\n        "1508": "宿州",\n        "1509": "淮南",\n        "1510": "蚌埠",\n        "1511": "六安",\n        "1512": "阜阳",\n        "1513": "芜湖",\n        "1514": "宣城",\n        "1515": "安庆",\n        "1516": "马鞍山",\n        "1601": "恩施土家族苗族自治州",\n        "1602": "仙桃",\n        "1603": "武汉",\n        "1604": "孝感",\n        "1605": "咸宁",\n        "1606": "十堰",\n        "1607": "天门",\n        "1608": "黄冈",\n        "1609": "宜昌",\n        "1610": "襄阳",\n        "1611": "黄石",\n        "1612": "荆门",\n        "1613": "随州",\n        "1614": "荆州",\n        "1615": "鄂州",\n        "1616": "神农架林区",\n        "1617": "潜江",\n        "1701": "株洲",\n        "1702": "邵阳",\n        "1703": "岳阳",\n        "1704": "张家界",\n        "1705": "怀化",\n        "1706": "衡阳",\n        "1707": "长沙",\n        "1708": "常德",\n        "1709": "郴州",\n        "1710": "永州",\n        "1711": "湘西土家族苗族自治州",\n        "1712": "湘潭",\n        "1713": "益阳",\n        "1714": "娄底",\n        "1801": "安顺",\n        "1802": "黔南布依族苗族自治州",\n        "1803": "铜仁",\n        "1804": "六盘水",\n        "1805": "贵阳",\n        "1806": "黔东南苗族侗族自治州",\n        "1807": "毕节",\n        "1808": "遵义",\n        "1809": "黔西南布依族苗族自治州",\n        "1901": "太原",\n        "1902": "长治",\n        "1903": "运城",\n        "1904": "晋中",\n        "1905": "忻州",\n        "1906": "朔州",\n        "1907": "晋城",\n        "1908": "阳泉",\n        "1909": "大同",\n        "1910": "临汾",\n        "1911": "吕梁",\n        "2001": "来宾",\n        "2002": "柳州",\n        "2003": "崇左",\n        "2004": "百色",\n        "2005": "河池",\n        "2006": "防城港",\n        "2007": "贺州",\n        "2008": "贵港",\n        "2009": "北海",\n        "201": "上海",\n        "2010": "南宁",\n        "2011": "桂林",\n        "2012": "玉林",\n        "2013": "钦州",\n        "2014": "梧州",\n        "2101": "凉山彝族自治州",\n        "2102": "攀枝花",\n        "2103": "乐山",\n        "2104": "遂宁",\n        "2105": "资阳",\n        "2106": "绵阳",\n        "2107": "自贡",\n        "2108": "德阳",\n        "2109": "雅安",\n        "2110": "达州",\n        "2111": "广元",\n        "2112": "广安",\n        "2113": "阿坝藏族羌族自治州",\n        "2114": "甘孜藏族自治州",\n        "2115": "成都",\n        "2116": "南充",\n        "2117": "泸州",\n        "2118": "内江",\n        "2119": "宜宾",\n        "2120": "巴中",\n        "2121": "眉山",\n        "2201": "郑州",\n        "2202": "三门峡",\n        "2203": "洛阳",\n        "2204": "开封",\n        "2205": "信阳",\n        "2206": "焦作",\n        "2207": "许昌",\n        "2208": "濮阳",\n        "2209": "济源",\n        "2210": "鹤壁",\n        "2211": "安阳",\n        "2212": "驻马店",\n        "2213": "新乡",\n        "2214": "南阳",\n        "2215": "漯河",\n        "2216": "平顶山",\n        "2217": "商丘",\n        "2218": "周口",\n        "2301": "石家庄",\n        "2302": "保定",\n        "2303": "沧州",\n        "2304": "衡水",\n        "2305": "唐山",\n        "2306": "邯郸",\n        "2307": "廊坊",\n        "2308": "秦皇岛",\n        "2309": "邢台",\n        "2310": "张家口",\n        "2311": "承德",\n        "2401": "福州",\n        "2402": "厦门",\n        "2403": "宁德",\n        "2404": "莆田",\n        "2405": "龙岩",\n        "2406": "三明",\n        "2407": "南平",\n        "2408": "泉州",\n        "2409": "漳州",\n        "2501": "南昌",\n        "2502": "上饶",\n        "2503": "赣州",\n        "2504": "新余",\n        "2505": "鹰潭",\n        "2506": "抚州",\n        "2507": "萍乡",\n        "2508": "宜春",\n        "2509": "景德镇",\n        "2510": "吉安",\n        "2511": "九江",\n        "2601": "珠海",\n        "2602": "东莞",\n        "2603": "江门",\n        "2604": "阳江",\n        "2605": "惠州",\n        "2606": "汕尾",\n        "2607": "梅州",\n        "2608": "清远",\n        "2609": "湛江",\n        "2610": "揭阳",\n        "2611": "广州",\n        "2612": "云浮",\n        "2613": "潮州",\n        "2614": "汕头",\n        "2615": "韶关",\n        "2616": "深圳",\n        "2617": "佛山",\n        "2618": "中山",\n        "2619": "肇庆",\n        "2620": "茂名",\n        "2621": "河源",\n        "2701": "呼和浩特",\n        "2702": "锡林郭勒盟",\n        "2703": "乌兰察布",\n        "2704": "通辽",\n        "2705": "包头",\n        "2706": "阿拉善盟",\n        "2707": "巴彦淖尔",\n        "2708": "兴安盟",\n        "2709": "鄂尔多斯",\n        "2710": "乌海",\n        "2711": "呼伦贝尔",\n        "2712": "赤峰",\n        "2801": "鹤岗",\n        "2802": "鸡西",\n        "2803": "哈尔滨",\n        "2804": "黑河",\n        "2805": "七台河",\n        "2806": "伊春",\n        "2807": "大兴安岭地区",\n        "2808": "牡丹江",\n        "2809": "绥化",\n        "2810": "齐齐哈尔",\n        "2811": "双鸭山",\n        "2812": "大庆",\n        "2813": "佳木斯",\n        "2901": "葫芦岛",\n        "2902": "营口",\n        "2903": "丹东",\n        "2904": "沈阳",\n        "2905": "抚顺",\n        "2906": "辽阳",\n        "2907": "大连",\n        "2908": "鞍山",\n        "2909": "盘锦",\n        "2910": "阜新",\n        "2911": "本溪",\n        "2912": "锦州",\n        "2913": "铁岭",\n        "2914": "朝阳",\n        "3001": "淄博",\n        "3002": "临沂",\n        "3003": "威海",\n        "3004": "莱芜",\n        "3005": "日照",\n        "3006": "济南",\n        "3007": "泰安",\n        "3008": "烟台",\n        "3009": "聊城",\n        "301": "天津",\n        "3010": "东营",\n        "3011": "菏泽",\n        "3012": "滨州",\n        "3013": "潍坊",\n        "3014": "德州",\n        "3015": "青岛",\n        "3016": "济宁",\n        "3017": "枣庄",\n        "3101": "南京",\n        "3102": "常州",\n        "3103": "苏州",\n        "3104": "无锡",\n        "3105": "盐城",\n        "3106": "镇江",\n        "3107": "连云港",\n        "3108": "宿迁",\n        "3109": "南通",\n        "3110": "徐州",\n        "3111": "淮安",\n        "3112": "扬州",\n        "3113": "泰州",\n        "401": "重庆",\n        "501": "宁波",\n        "502": "金华",\n        "503": "嘉兴",\n        "504": "绍兴",\n        "505": "湖州",\n        "506": "衢州",\n        "507": "舟山",\n        "508": "杭州",\n        "509": "温州",\n        "510": "丽水",\n        "511": "台州",\n        "601": "儋州",\n        "602": "定安县",\n        "603": "东方",\n        "604": "五指山",\n        "605": "屯昌县",\n        "606": "琼海",\n        "607": "澄迈县",\n        "608": "琼中黎族苗族自治县",\n        "609": "三亚",\n        "610": "白沙黎族自治县",\n        "611": "文昌",\n        "612": "陵水黎族自治县",\n        "613": "昌江黎族自治县",\n        "614": "保亭黎族苗族自治县",\n        "615": "临高县",\n        "616": "海口",\n        "617": "万宁",\n        "618": "乐东黎族自治县",\n        "701": "迪庆藏族自治州",\n        "702": "西双版纳傣族自治州",\n        "703": "临沧",\n        "704": "保山",\n        "705": "玉溪",\n        "706": "德宏傣族景颇族自治州",\n        "707": "红河哈尼族彝族自治州",\n        "708": "大理白族自治州",\n        "709": "丽江",\n        "710": "怒江傈僳族自治州",\n        "711": "普洱",\n        "712": "楚雄彝族自治州",\n        "713": "文山壮族苗族自治州",\n        "714": "昆明",\n        "715": "曲靖",\n        "716": "昭通",\n        "801": "拉萨",\n        "802": "昌都",\n        "803": "山南",\n        "804": "阿里地区",\n        "805": "林芝",\n        "806": "日喀则",\n        "807": "那曲地区",\n        "901": "喀什地区",\n        "902": "阿克苏地区",\n        "903": "和田地区",\n        "904": "哈密",\n        "905": "石河子",\n        "906": "吐鲁番",\n        "907": "博尔塔拉蒙古自治州",\n        "908": "巴音郭楞蒙古自治州",\n        "909": "昌吉回族自治州",\n        "910": "塔城地区",\n        "911": "克孜勒苏柯尔克孜自治州",\n        "912": "阿勒泰地区",\n        "913": "乌鲁木齐",\n        "914": "克拉玛依",\n        "915": "伊犁哈萨克自治州"\n    },\n    "t_sdk_hago_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share1.jpg",\n            "title": "Play with me in Hago! https://go.onelink.me/7pHf/7dc6e868"\n        }\n    ],\n    "t_sdk_headline_jump_games": [\n        {\n            "id": "tt0ed0786d91eb92cc",\n            "index": "86",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/86.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/86.png"\n            ]\n        },\n        {\n            "id": "ttd62da0904916d98f",\n            "index": "100",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/100.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/100.png"\n            ]\n        },\n        {\n            "id": "tt36244099a91f3984",\n            "index": "110",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/110.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/110.png"\n            ]\n        },\n        {\n            "id": "tt347f42c2ab55ec48",\n            "index": "70",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/70.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/70.png"\n            ]\n        },\n        {\n            "id": "tt3321459cac1b2a8e",\n            "index": "55v2",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/55v2.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/55v2.png"\n            ]\n        },\n        {\n            "id": "tt9e56e8eb017c109e",\n            "index": "56",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/56.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/56.png"\n            ]\n        },\n        {\n            "id": "tt4e2a3897d110084b",\n            "index": "82",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/82.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/82.png"\n            ]\n        },\n        {\n            "id": "tt286b5ed6b74165b2",\n            "index": "80",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/80.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/80.png"\n            ]\n        },\n        {\n            "id": "ttbeffc84221d594a2",\n            "index": "75",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/75.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/75.png"\n            ]\n        },\n        {\n            "id": "tt2c515aecb37b1973",\n            "index": "74",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline1/74.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_headline2/74.png"\n            ]\n        }\n    ],\n    "t_sdk_headline_jump_games_video_type": [\n        \n    ],\n    "t_sdk_headline_pay_code": {\n        \n    },\n    "t_sdk_headline_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share1.jpg",\n            "templateId": "c2ghg3h259959029os",\n            "title": "点击立即体验，神奇叶罗丽化妆术"\n        }\n    ],\n    "t_sdk_headline_share_recorder_video_desc": [\n        [\n            "叶罗丽彩妆公主",\n            "抖音小游戏",\n            "教教我怎么才能缔结火契约啊",\n            "叶罗丽彩妆公主小游戏"\n        ],\n        [\n            "叶罗丽彩妆公主",\n            "抖音小游戏",\n            "这里面的化妆品可真好看！"\n        ],\n        [\n            "叶罗丽彩妆公主",\n            "抖音小游戏",\n            "我还是第一次给叶罗丽涂面膜呢，真好玩~"\n        ]\n    ],\n    "t_sdk_headline_share_video_cuttemplateid": {\n        \n    },\n    "t_sdk_headline_subscribe_templete_ids": {\n        "1": "MSG1122885947d983961bd9a8fcc2ea78818fbd5f113724"\n    },\n    "t_sdk_headline_tt_navigate_to_mini_game_app_id_list": [\n        "tt0ed0786d91eb92cc",\n        "ttd62da0904916d98f",\n        "tt36244099a91f3984",\n        "tt347f42c2ab55ec48",\n        "tt3321459cac1b2a8e",\n        "tt9e56e8eb017c109e",\n        "tt4e2a3897d110084b",\n        "tt286b5ed6b74165b2",\n        "ttbeffc84221d594a2",\n        "tt2c515aecb37b1973"\n    ],\n    "t_sdk_huawei_adv_tag_2_native_index": {\n        \n    },\n    "t_sdk_huawei_native_index_2_native_id": {\n        \n    },\n    "t_sdk_huawei_pay_code": {\n        \n    },\n    "t_sdk_oppoqg_adv_tag_2_native_index": {\n        \n    },\n    "t_sdk_oppoqg_jump_games": [\n        {\n            "id": "com.ultralisk.game70.nearme.gamecenter",\n            "index": "70",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/70.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/70.png"\n            ]\n        },\n        {\n            "id": "com.ultralisk.game86.nearme.gamecenter",\n            "index": "86",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/86.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/86.png"\n            ]\n        },\n        {\n            "id": "cn.ultralisk.game56.kyx.nearme.gamecenter",\n            "index": "56",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/56.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/56.png"\n            ]\n        },\n        {\n            "id": "com.ultralisk.game75.nearme.gamecenter",\n            "index": "75",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/75.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/75.png"\n            ]\n        },\n        {\n            "id": "com.ultralisk.game74.nearme.gamecenter",\n            "index": "74",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo1/74.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_oppo2/74.png"\n            ]\n        }\n    ],\n    "t_sdk_oppoqg_native_index_2_native_id": {\n        \n    },\n    "t_sdk_oppoqg_pay_code": {\n        \n    },\n    "t_sdk_oppoqg_show_banner_box_adv_tags": [\n        \n    ],\n    "t_sdk_oppoqg_show_inter_box_adv_tags": [\n        \n    ],\n    "t_sdk_privacyPolicy_dataArray": [\n        {\n            "name": "隐私政策",\n            "url": "https://gamesres.ultralisk.cn/notice/policy/oppoleishoupolicy.json"\n        }\n    ],\n    "t_sdk_qq_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share1.jpg",\n            "title": "给叶罗丽仙子化妆，她居然会眨眼配合！"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share2.jpg",\n            "title": "什么？叶罗丽也需要做脸部护理？"\n        }\n    ],\n    "t_sdk_record_duration_limit_object": {\n        "*": {\n            "max": 300,\n            "min": 3\n        },\n        "2": {\n            "max": 300,\n            "min": 15\n        }\n    },\n    "t_sdk_refresh_channels": [\n        "huawei",\n        "baishan"\n    ],\n    "t_sdk_trim_adv_err_object": {\n        "*": "广告播放失败了，重新试试看吧！",\n        "baidu": {\n            "code||errCode": {\n                "3010003": "您的网络好像不够流畅，请更换到良好的网络环境再播放广告。",\n                "3010005||3010006": "正在为您播放广告，请稍等一会儿，不要重复点击。"\n            }\n        },\n        "headline||weixin||qq": {\n            "code||errCode": {\n                "1004": "暂时没有适合您观看的广告，请稍等一会儿再试吧！"\n            }\n        },\n        "oppoqg": {\n            "(this.errCode==1001 || this.errCode == 1004)u0026u0026errMsg": {\n                "/10001/||/10100/||/10101/||/10403/": "您的网络好像不够流畅，请更换到良好的网络环境再播放广告。",\n                "/10405/": "您的操作系统版本太低，不能播放广告。",\n                "/10406/": "需要连接到 Wifi 网络",\n                "/11002/": "这个广告只能在OPPO手机上播放，请确认您的机型。",\n                "/11003/": "暂时无法播放广告，请稍等一会儿再试吧1！"\n            }\n        },\n        "vivo": {\n            "code||errCode": {\n                "-100||101||500": "您的网络好像不够流畅，请更换到良好的网络环境再播放广告。",\n                "-3||108||30005": "暂时无法播放广告，请稍等一会儿再试吧！",\n                "30007": "暂时无法播放广告，请稍等一会儿再试吧！",\n                "30010": "广告播放失败了，可能是是由于您经常关闭广告造成的，稍等一会儿再试吧。"\n            }\n        }\n    },\n    "t_sdk_uc_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share1.jpg",\n            "title": "给叶罗丽仙子化妆，她居然会眨眼配合！"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share2.jpg",\n            "title": "什么？叶罗丽也需要做脸部护理？"\n        }\n    ],\n    "t_sdk_vivo_pay_code": {\n        \n    },\n    "t_sdk_vivo_share_list": [\n        ""\n    ],\n    "t_sdk_vivo_show_banner_box_adv_tags": [\n        \n    ],\n    "t_sdk_webreview_cdk_goodsid": [\n        {\n            "count": 100,\n            "goodsid": 2\n        }\n    ],\n    "t_sdk_weixin_grid_adunits": {\n        "list": "",\n        "list_roll": "",\n        "single": "",\n        "table": ""\n    },\n    "t_sdk_weixin_jump_games": [\n        {\n            "id": "wxa44fb0b2873dbca0",\n            "index": "70",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/70.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/70.png"\n            ]\n        },\n        {\n            "id": "wxe22e720e831505df",\n            "index": "110",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/110.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/110.png"\n            ]\n        },\n        {\n            "id": "wxe6ff4d6d0f759a9e",\n            "index": "100",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/100.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/100.png"\n            ]\n        },\n        {\n            "id": "wxc5fc8e29029ee33c",\n            "index": "119",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/119.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/119.png"\n            ]\n        },\n        {\n            "id": "wx2ec0b7f791ec8c25",\n            "index": "86",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/86.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/86.png"\n            ]\n        },\n        {\n            "id": "wx9f0c9ca340c89e11",\n            "index": "124",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/124.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/124.png"\n            ]\n        },\n        {\n            "id": "wx7b9b74c53dd576ac",\n            "index": "74",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/74.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/74.png"\n            ]\n        },\n        {\n            "id": "wxe5dd5fc469d54326",\n            "index": "120",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/120.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/120.png"\n            ]\n        },\n        {\n            "id": "wx358550c490c758f1",\n            "index": "75",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/75.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/75.png"\n            ]\n        },\n        {\n            "id": "wx674c94b5a44a75de",\n            "index": "56",\n            "rewards": [\n                [\n                    1,\n                    50\n                ]\n            ],\n            "urls": [\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin1/56.png",\n                "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games_weixin2/56.png"\n            ]\n        }\n    ],\n    "t_sdk_weixin_navigate_to_mini_game_app_id_list": [\n        \n    ],\n    "t_sdk_weixin_pay_code": {\n        \n    },\n    "t_sdk_weixin_share_list": [\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share1.jpg",\n            "title": "给叶罗丽仙子化妆，她居然会眨眼配合！"\n        },\n        {\n            "imageUrl": "https://gamesres.ultralisk.cn/h5_games_res/shareimage/game83/share2.jpg",\n            "title": "什么？叶罗丽也需要做脸部护理？"\n        }\n    ],\n    "t_sdk_weixin_subscribe_templete_ids": {\n        \n    },\n    "targetCreatorBranch": "",\n    "targetCreatorExePath": "",\n    "targetCreatorGitAddr": "",\n    "targetProjectBranch": "v1_i18n_h5_release",\n    "targetProjectGitAddr": "ude2/prj.game83",\n    "tempCreatorProjectPaths": [\n        [\n            ".laya/",\n            ".laya/"\n        ],\n        [\n            "bin/",\n            "bin/",\n            [\n                "**/vconsole.*"\n            ]\n        ],\n        [\n            "declare/",\n            "declare/"\n        ],\n        [\n            "laya/",\n            "laya/"\n        ],\n        [\n            "libs/",\n            "libs/"\n        ],\n        [\n            "node_modules/",\n            "node_modules/"\n        ],\n        [\n            "src/",\n            "src/"\n        ],\n        [\n            "package-lock.json",\n            ""\n        ],\n        [\n            "prj.game83.laya",\n            ""\n        ],\n        [\n            "tsconfig.json",\n            ""\n        ]\n    ],\n    "tempProjectName": "laya_proj",\n    "autoUploadPack": false,\n    "B_OBFUSCATOR_CCONFIG": false,\n    "B_SHOW_LICENCE_INFO_ON_LOADING": false,\n    "build_laya_web_module_config": {\n        "embedWebDebugger": false,\n        "title": "叶罗丽彩妆公主"\n    },\n    "s_sdk_facebook_bannerId": "4864743603539728_5324942390853178",\n    "i_sdk_licence_info_mode": 1,\n    "s_sdk_cop_channel_id": "169",\n    "s_sdk_cop_version": "5805",\n    "s_sdk_licence_info": "",\n    "t_sdk_increment_fields": [\n        \n    ],\n    "_target_project_branch": "v1_i18n_h5_release",\n    "_target_project_log": "2021-06-17 12:12:10 +0800-gengxiaoxiao-cf7c9687af",\n    "_target_last_commit_time": 1623903130,\n    "prjVersion": "cf7c9687af",\n    "rootPath": "D:/ulwork/ulsdk/",\n    "rootSdkPath": "D:/ulwork/ulsdk/prj.sdk.html5/",\n    "gitRepoPath": "D:/ulwork/ulsdk/h5_games_res/",\n    "taskDate": "2022_02_22",\n    "taskTick": "2022_02_22_10_22_38",\n    "taskTickShort": "0222_102238",\n    "taskName": "weiyou",\n    "configName": "task_game83_yllczgz_v1",\n    "targetPath": "D:/ulwork/ulsdk/h5_out/83_weiyou_0222_102238/",\n    "resCachePath": "D:/ulwork/ulsdk/h5_res_cache/prj.game83/",\n    "packagePath": "D:/ulwork/ulsdk/prj.games.html5.channels.packages/prj.game83/prj.game83_v1_i18n_h5_release_weiyou_0222_102238/",\n    "buildDisabled": false,\n    "creatorExePath": "",\n    "taskJsonPath": "D:/ulwork/ulsdk/prj.games.html5.channels.tasks/task_game83_yllczgz_v1/task.json",\n    "tempProjPath": "D:/ulwork/ulsdk/h5_out/83_weiyou_0222_102238/laya_proj/",\n    "moduleList": "common,build_laya_web,weiyou",\n    "envCheckResult": [\n        \n    ],\n    "i_sdk_start_game_by_touch": 1,\n    "t_sdk_adv_banner_tags_style_setting": {\n        \n    },\n    "i_sdk_banner_autoRefresh_mode": 0,\n    "i_sdk_banner_refresh_intervals": 30,\n    "i_sdk_native_autoRefresh_intervals": 30,\n    "t_sdk_show_native_banner_autoRefresh_tags": [\n        \n    ],\n    "t_sdk_show_native_banner_autoRefresh_tags_style_setting": {\n        \n    }\n}');
	class ULTimer {
		constructor(t, e, a) {
			this._repeatCount = -1, this._span = 1, this._callback = null, this._intervalId = null, this._count = 0, this._beginTime = -1, this._usedTime = 0, this._span = t, this._repeatCount = e, this._callback = a
		}
		static callLater(t, e) {
			new ULTimer(t, 1, e).start()
		}
		static callLoop(t, e) {
			new ULTimer(t, -1, e).start()
		}
		_onSpan() {
			if (this._count++, this._usedTime = ULTools.time() - this._beginTime, this._callback) try {
				this._callback(this)
			} catch (t) {
				ULLog.console.warn("警告] ULTimer._onSpan callback has error", t)
			}
			this._repeatCount >= 0 && this._count >= this._repeatCount && this.stop()
		}
		isRunning() {
			return null != this._intervalId
		}
		get count() {
			return this._count
		}
		get span() {
			return this._span
		}
		get usedTime() {
			return this._usedTime
		}
		start() {
			return this.stop(), this._callback ? (this._beginTime = ULTools.time(), this._count = 0, this._intervalId = setInterval(this._onSpan.bind(this), 1e3 * this.span), this) : (ULLog.console.warn("警告] ULTimer.start callback未设置！"), this)
		}
		stop() {
			return null != this._intervalId && (clearInterval(this._intervalId), this._intervalId = null), this
		}
	}
	class ULStorageManager {
		constructor() {
			this.cacheStorage = {}
		}
		static getInstance() {
			return this._instance || (this._instance = new ULStorageManager), this._instance
		}
		getStorage(t) {
			let e = ULEventDispatcher.getInstance().dispatchWithReturn(ULConst.CMD_SDK_GET_STORAGE, {
				key: t
			});
			return ULConst.B_INNER_DEBUG && ULLog.console.log(ULTools.format("ULStorageManager.getStorage(%s) => [%s]", t, e)), null == e ? e = this.cacheStorage[t] : this.cacheStorage[t] = e, e
		}
		setStorage(t, e) {
			ULConst.B_INNER_DEBUG && ULLog.console.log(ULTools.format("ULStorageManager.setStorage(%s, %s)", t, e)), this.cacheStorage[t] = e, ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SET_STORAGE, {
				key: t,
				data: e
			}) || ULLog.console.warn("ULStorageManager.setStorage 未找到实现！")
		}
	}
	ULStorageManager._instance = null;
	class ULWebSocket {
		constructor(t) {
			if (this.socketingWS = null, this.isOpening = !1, this.socketMsgCache = [], this._isAutoClearCache = !1, "WebSocket" in window) {
				var e = new WebSocket(t);
				this.socketingWS = e;
				let a = this;
				e.onopen = function(t) {
					a.isOpening = !0, a.onopen(t)
				}, e.onmessage = function(t) {
					a.onmessage(t)
				}, e.onclose = function(t) {
					a.isOpening = !1, a.socketingWS = null, a.socketMsgCache = [], a.onclose(t)
				}, e.onerror = function(t) {
					a.isOpening = !1, a.socketingWS = null, a.socketMsgCache = [], a.onerror(t)
				}
			}
		}
		set isAutoClearCache(t) {
			t != this._isAutoClearCache && (this._isAutoClearCache = t, this._isAutoClearCache ? this.intervalId = setInterval(() => {
				this.clearCache()
			}, 30) : clearInterval(this.intervalId))
		}
		close(t, e) {
			this.isOpening && this.socketingWS && (this.socketingWS.close(), this.isOpening = !1, this.socketingWS = null)
		}
		send(t) {
			if (!this.socketingWS) return;
			let e = null;
			try {
				e = JSON.stringify(t)
			} catch (t) {
				e = JSON.stringify({
					type: 3,
					data: t
				})
			} finally {
				!this.isOpening || this._isAutoClearCache ? (this.socketMsgCache.push(e), this.isAutoClearCache = !0) : this.socketingWS.send(e)
			}
		}
		clearCache() {
			if (this.socketingWS && this.socketMsgCache.length) {
				if (this.isOpening) {
					let t = this.socketMsgCache.shift();
					this.socketingWS.send(t)
				}
			} else this.isAutoClearCache = !1
		}
	}
	class ULTools {
		static time() {
			return (new Date).getTime() / 1e3
		}
		static timeInDay() {
			let t = this.time(),
				e = new Date(1e3 * t);
			return e.setHours(0), e.setMinutes(0), e.setSeconds(0), e.setMilliseconds(0), t - e.getTime() / 1e3
		}
		static isOneDay(t, e) {
			var a = new Date(1e3 * t),
				i = new Date(1e3 * e);
			return a.getFullYear() == i.getFullYear() && a.getMonth() == i.getMonth() && a.getDate() == i.getDate()
		}
		static isOneMonth(t, e) {
			var a = new Date(1e3 * t),
				i = new Date(1e3 * e);
			return a.getFullYear() == i.getFullYear() && a.getMonth() == i.getMonth()
		}
		static getObjSize(t) {
			if (!t) return 0;
			if (Array.isArray(t)) return t.length;
			let e = 0;
			return this.forEachMap(t, (t, a) => {
				e++
			}), e
		}
		static random(t, e) {
			return null == t && null == e ? Math.random() : null == e ? Math.floor(Math.random() * t + 1) : Math.floor(Math.random() * (e - t + 1) + t)
		}
		static scaleInRange(t, e, a, i, s) {
			return e < a ? (t < e && (t = e), t > a && (t = a)) : (t < a && (t = a), t > e && (t = e)), (t - e) / (a - e) * (s - i) + i
		}
		static clampf(t, e, a) {
			return t < e ? e : t > a ? a : t
		}
		static calcWheelTarget(t, e) {
			let a = 0;
			for (let i = 0; i < t.length; i++) {
				const s = t[i];
				let n = parseInt(s[e]);
				if (isNaN(n)) return ULLog.console.warn(this.format("Tools.calcWheelTarget weight field not found! key=[%s]", e)), null;
				a += n
			}
			let i = this.random(a);
			for (let a = 0; a < t.length; a++) {
				const s = t[a];
				let n = parseInt(s[e]);
				if (i <= n) return s;
				i -= n
			}
			return null
		}
		static sortArrayByField(t, e) {
			e = "string" == typeof e ? [e] : e;
			let a = [];
			for (let t in e) {
				let i = e[t];
				if (i && "" != i)
					if ("-" === i.substring(0, 1)) {
						let t = i.substring(1, i.length);
						t && "" != t && a.push([t, !0])
					} else a.push([i, !1])
			}
			let i = [];
			for (let e = 0; e < t.length; e++) {
				const a = t[e];
				i.push(a)
			}
			return i.sort((t, e) => {
				let i = 0;
				for (let s in a) {
					let n = a[s],
						o = n[0],
						r = n[1],
						l = t[o],
						c = e[o];
					if (null != l && 0 != (i = r ? c - l : l - c)) return i
				}
				return i
			}), i
		}
		static bubbleSort(t, e) {
			for (var a = t.length, i = 0; i < a; i++)
				for (var s = 0; s < a - 1 - i; s++) {
					if (e(t[s], t[s + 1]) > 0) {
						var n = t[s + 1];
						t[s + 1] = t[s], t[s] = n
					}
				}
			return t
		}
		static forEachMap(t, e) {
			if (!t) return;
			let a = Object.keys(t);
			for (let i = 0; i < a.length; i++) {
				let s = a[i],
					n = t[s];
				if (null != n && e(s, n)) break
			}
		}
		static formatTime(t, e) {
			let a = Math.floor(t / 3600),
				i = Math.floor(t / 60) % 60,
				s = Math.ceil(t) % 60;
			return e.match("%h") && (e = e.replace("%h", a.toString())), e.match("%H") && (e = e.replace("%H", this.format("%02d", a))), e.match("%m") && (e = e.replace("%m", i.toString())), e.match("%M") && (e = e.replace("%M", this.format("%02d", i))), e.match("%s") && (e = e.replace("%s", s.toString())), e.match("%S") && (e = e.replace("%S", this.format("%02d", s))), e
		}
		static formatDate(t, e) {
			let a = {
					"M+": t.getMonth() + 1,
					"d+": t.getDate(),
					"H+": t.getHours(),
					"m+": t.getMinutes(),
					"s+": t.getSeconds(),
					"q+": Math.floor((t.getMonth() + 3) / 3),
					"S+": t.getMilliseconds()
				},
				i = e;
			for (var s in /(y+)/.test(i) && (i = i.replace(RegExp.$1, (t.getFullYear() + "").substr(4 - RegExp.$1.length))), a) new RegExp("(" + s + ")").test(i) && (i = i.replace(RegExp.$1, 1 == RegExp.$1.length ? a[s] : ("00" + a[s]).substr(("" + a[s]).length)));
			return i
		}
		static generateUUID() {
			let t = (new Date).getTime();
			return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, e => {
				var a = (t + 16 * Math.random()) % 16 | 0;
				return t = Math.floor(t / 16), ("x" == e ? a : 3 & a | 8).toString(16)
			})
		}
		static compressUuid(t) {
			let e = "0123456789abcdef".split(""),
				a = {};
			for (let t = 0; t < e.length; t++) a[e[t]] = t;
			let i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),
				s = {};
			for (let t = 0; t < i.length; t++) s[i[t]] = t;
			let n = (t = t.replace(/-/g, "")).split(""),
				o = [];
			o.push(n[0]), o.push(n[1]);
			for (let t = 2; t < n.length; t += 3) {
				let e = a[n[t]],
					s = a[n[t + 1]],
					r = a[n[t + 2]];
				o.push(i[e << 2 | s >> 2]), o.push(i[(3 & s) << 4 | r])
			}
			return o.join("")
		}
		static decompressUuid(t) {
			let e = t.split("");
			if (e.length < 22) return t;
			let a = "0123456789abcdef".split(""),
				i = {};
			for (let t = 0; t < a.length; t++) i[a[t]] = t;
			let s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),
				n = {};
			for (let t = 0; t < s.length; t++) n[s[t]] = t;
			let o = [];
			o.push(e[0]), o.push(e[1]);
			for (let t = 2; t < e.length; t += 2) {
				let i = n[e[t]],
					s = n[e[t + 1]];
				o.push(a[i >> 2]), o.push(a[(3 & i) << 2 | s >> 4]), o.push(a[15 & s])
			}
			return o.splice(8, 0, "-"), o.splice(13, 0, "-"), o.splice(18, 0, "-"), o.splice(23, 0, "-"), o.join("")
		}
		static getType(t) {
			return {
				"[object Boolean]": "boolean",
				"[object Number]": "number",
				"[object String]": "string",
				"[object Function]": "function",
				"[object Array]": "array",
				"[object Date]": "date",
				"[object RegExp]": "regExp",
				"[object Undefined]": "undefined",
				"[object Null]": "null",
				"[object Object]": "object"
			} [Object.prototype.toString.call(t)]
		}
		static clone(t) {
			let e, a = this.getType(t);
			if (window.cc && t instanceof window.cc.Node) return t;
			if ("object" === a) e = {};
			else {
				if ("array" !== a) return t;
				e = []
			}
			if ("array" === a)
				for (let a = 0, i = t.length; a < i; a++) e.push(this.clone(t[a]));
			else if ("object" === a)
				for (let a in t) e[a] = this.clone(t[a]);
			return e
		}
		static toArray(t) {
			return Array.isArray(t) ? t : []
		}
		static sumNumberArray(t) {
			if (!Array.isArray(t)) return 0;
			let e = 0;
			for (let a = 0; a < t.length; a++) {
				const i = t[a];
				isNaN(i) || (e += i)
			}
			return e
		}
		static getRandomValueInArray(t) {
			return Array.isArray(t) ? t[this.random(t.length) - 1] : null
		}
		static _convert(t, e) {
			t.sign = e ? "" : t.negative ? "-" : t.sign;
			var a = t.min - t.argument.length + 1 - t.sign.length,
				i = new Array(a < 0 ? 0 : a).join(t.pad);
			return t.left ? "0" == t.pad || e ? t.sign + t.argument + i.replace(/0/g, " ") : t.sign + t.argument + i : "0" == t.pad || e ? t.sign + i + t.argument : i + t.sign + t.argument
		}
		static format(...t) {
			if (void 0 === arguments) return null;
			if (arguments.length < 1) return null;
			if ("string" != typeof arguments[0]) return null;
			if ("undefined" == typeof RegExp) return null;
			for (var e = arguments[0], a = new RegExp(/(%([%]|(\-)?(\+|\x20)?(0)?(\d+)?(\.(\d)?)?([bcdfosxX])))/g), i = new Array, s = new Array, n = 0, o = 0, r = 0, l = 0, c = "", h = null; h = a.exec(e);) h[9] && (n += 1), o = l, r = a.lastIndex - h[0].length, s[s.length] = e.substring(o, r), l = a.lastIndex, i[i.length] = {
				match: h[0],
				left: !!h[3],
				sign: h[4] || "",
				pad: h[5] || " ",
				min: h[6] || 0,
				precision: h[8],
				code: h[9] || "%",
				negative: parseInt(arguments[n]) < 0,
				argument: String(arguments[n])
			};
			if (s[s.length] = e.substring(l), 0 == i.length) return e;
			if (arguments.length - 1 < n) return null;
			h = null;
			var d = null,
				_ = null;
			for (_ = 0; _ < i.length; _++) "%" == i[_].code ? d = "%" : "b" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(2)), d = this._convert(i[_], !0)) : "c" == i[_].code ? (i[_].argument = String(String.fromCharCode(Math.abs(parseInt(i[_].argument)))), d = this._convert(i[_], !0)) : "d" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument))), d = this._convert(i[_])) : "f" == i[_].code ? (i[_].argument = String(Math.abs(parseFloat(i[_].argument)).toFixed(i[_].precision ? i[_].precision : 6)), d = this._convert(i[_])) : "o" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(8)), d = this._convert(i[_])) : "s" == i[_].code ? (i[_].argument = i[_].argument.substring(0, i[_].precision ? i[_].precision : i[_].argument.length), d = this._convert(i[_], !0)) : "x" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(16)), d = this._convert(i[_])) : "X" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(16)), d = this._convert(i[_]).toUpperCase()) : d = i[_].match, c += s[_], c += d;
			return c += s[_]
		}
		static httpGet(t) {
			let e = new XMLHttpRequest,
				a = new ULTimer(t.timeoutMillisecond / 1e3, 1, a => {
					if (e) {
						let a = e;
						e = null, a.abort(), t.fail instanceof Function && t.fail("timeout")
					}
				});
			e.onreadystatechange = function(i) {
				if (e && 4 == e.readyState)
					if (a.stop(), 200 == e.status) {
						let a = e.responseText;
						t.success instanceof Function && t.success(a)
					} else ULLog.console.warn("ULTools.httpGet on error:", e.readyState, e.status), t.fail instanceof Function && t.fail(e.status.toString())
			}, e.ontimeout = function(a) {
				if (e) {
					let a = e;
					e = null, a.abort(), t.fail instanceof Function && t.fail("timeout")
				}
			}, e.onerror = function(a) {
				if (e) {
					let i = e;
					e = null, i.abort(), t.fail instanceof Function && t.fail("on error :" + a)
				}
			}, a.start(), e.open("get", t.url), e.send()
		}
		static httpPost(t) {
			t.contentType = t.contentType || "application/x-www-form-urlencoded;charset=utf-8";
			let e = new XMLHttpRequest,
				a = new ULTimer(t.timeoutMillisecond / 1e3, 1, a => {
					if (e) {
						let a = e;
						e = null, a.abort(), t.fail instanceof Function && t.fail("timeout")
					}
				});
			e.onreadystatechange = function(i) {
				if (e && 4 == e.readyState)
					if (a.stop(), 200 == e.status) {
						let a = e.responseText;
						t.success instanceof Function && t.success(a)
					} else ULLog.console.warn("ULTools.httpPost on error:", e.readyState, e.status), t.fail instanceof Function && t.fail(e.status.toString())
			}, e.ontimeout = function(a) {
				if (e) {
					let a = e;
					e = null, a.abort(), t.fail instanceof Function && t.fail("timeout")
				}
			}, e.onerror = function(a) {
				if (e) {
					let i = e;
					e = null, i.abort(), t.fail instanceof Function && t.fail("on error :" + a)
				}
			}, a.start(), e.open("post", t.url, !0), e.setRequestHeader("Content-Type", t.contentType), e.send(t.postData)
		}
		static stringToByte(t) {
			var e, a, i = new Array;
			e = t.length;
			for (var s = 0; s < e; s++)(a = t.charCodeAt(s)) >= 65536 && a <= 1114111 ? (i.push(a >> 18 & 7 | 240), i.push(a >> 12 & 63 | 128), i.push(a >> 6 & 63 | 128), i.push(63 & a | 128)) : a >= 2048 && a <= 65535 ? (i.push(a >> 12 & 15 | 224), i.push(a >> 6 & 63 | 128), i.push(63 & a | 128)) : a >= 128 && a <= 2047 ? (i.push(a >> 6 & 31 | 192), i.push(63 & a | 128)) : i.push(255 & a);
			return i
		}
		static httpPostEncryption(t) {
			let e = new XMLHttpRequest,
				a = new ULTimer(t.timeoutMillisecond / 1e3, 1, a => {
					if (e) {
						let a = e;
						e = null, a.abort(), t.fail instanceof Function && t.fail("timeout")
					}
				});
			e.onreadystatechange = function(i) {
				if (e && 4 == e.readyState)
					if (a.stop(), 200 == e.status) {
						let a = e.responseText;
						t.success instanceof Function && t.success(a)
					} else console.warn("ULTools.httpPost on error:", e.readyState, e.status), t.fail instanceof Function && t.fail(e.status.toString())
			}, e.ontimeout = function(a) {
				if (e) {
					let a = e;
					e = null, a.abort(), t.fail instanceof Function && t.fail("timeout")
				}
			}, e.onerror = function(a) {
				if (e) {
					let i = e;
					e = null, i.abort(), t.fail instanceof Function && t.fail("on error :" + a)
				}
			};
			let i = this.stringToByte(t.postString),
				s = i.length % 127 || 127;
			var n = new ArrayBuffer(i.length),
				o = new Uint8Array(n);
			for (let t = 0; t < i.length; t++) i[t] = i[t] ^ s, o[t] = i[t];
			a.start(), e.open("post", t.url, !0), e.setRequestHeader("isEncrypt", "1"), e.send(n)
		}
		static httpJsonp(t) {
			if (!t || !t.url) throw new Error("参数不合法");
			let e = ULTools.format("jsonp_%d", ULTools.random(1e6));
			t.data.callback = e;
			let a = document.getElementsByTagName("head")[0],
				i = [];
			this.forEachMap(t.data, (t, e) => {
				i.push(ULTools.format("%s=%s", encodeURIComponent(t), encodeURIComponent(e)))
			});
			let s = i.join("&"),
				n = document.createElement("script");
			a.appendChild(n);
			let o = new ULTimer(t.timeoutMillisecond / 1e3, 1, i => {
				window[e] && (window[e] = null, a.removeChild(n), t.fail && t.fail("timeout"))
			});
			window[e] = function(i) {
				window[e] && (a.removeChild(n), o.stop(), window[e] = null, t.success && t.success(i))
			}, n.src = t.url + "?" + s
		}
		static loadJs(t, e, a) {
			let i = document.createElement("script");
			i.type = "text/javascript", i.addEventListener("load", t => {
				e instanceof Function && e()
			}), i.src = t, i.defer = "defer", a && (i.crossOrigin = "anonymous"), document.getElementsByTagName("head")[0].appendChild(i)
		}
		static getQueryString(t) {
			var e = new RegExp("(^|&)" + t + "=([^&]*)(&|$)"),
				a = window.location.search.substr(1).match(e);
			return null != a ? decodeURI(a[2]) : null
		}
		static createRandomString(t) {
			t = t || 32;
			let e = "ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz123456789",
				a = e.length,
				i = "";
			for (let s = 0; s < t; s++) i += e.charAt(Math.floor(Math.random() * a));
			return i
		}
		static createRandomUserId() {
			let t = this.generateUUID();
			return this.compressUuid(t)
		}
		static createRandomOrderId() {
			return (new Date).getTime() + this.createRandomString(7)
		}
		static compareVersion(t, e) {
			let a = t.split("."),
				i = e.split(".");
			const s = Math.max(a.length, i.length);
			for (; a.length < s;) a.push("0");
			for (; i.length < s;) i.push("0");
			for (let t = 0; t < s; t++) {
				const e = parseInt(a[t]),
					s = parseInt(i[t]);
				if (e > s) return 1;
				if (e < s) return -1
			}
			return 0
		}
		static _hack_console_print_method() {
			let t = function(t, e) {
				return function(...a) {
					e(...a), ULTools.socketingWS && ULTools.socketingWS.send({
						type: t,
						data: a
					})
				}
			};
			this._console_log || (this._console_log = t(1, console.log)), this._console_warn || (this._console_warn = t(2, console.warn)), this._console_error || (this._console_error = t(3, console.error)), window.cc && (this._cc_log || (this._cc_log = t(1, window.cc.log)), this._cc_warn || (this._cc_warn = t(2, window.cc.warn)), this._cc_error || (this._cc_error = t(3, window.cc.error)));
			let e = ULConfig.getConfig();
			console.log = e.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_LOG ? () => {} : this._console_log, console.warn = e.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_WARN ? () => {} : this._console_warn, console.error = e.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_ERROR ? () => {} : this._console_error, window.cc && (window.cc.log = e.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_LOG ? () => {} : this._cc_log, window.cc.warn = e.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_WARN ? () => {} : this._cc_warn, window.cc.error = e.i_sdk_debug_mode < ULConst.CONSOLE_OUTPUT_LEVEL_ERROR ? () => {} : this._cc_error)
		}
		static _start_console_print_LAN() {
			if (ULTools.socketingWS) return;
			let t = ULConfig.getConfig().s_sdk_lan_debug_address.length > 10 ? ULConfig.getConfig().s_sdk_lan_debug_address : "",
				e = localStorage.getItem("console_lan_id") || ULStorageManager.getInstance().getStorage("console_lan_id") || t;
			if (ULLog.console.log("console_lan_id:", e), e && e.length && "WebSocket" in window) {
				ULLog.console.log("支持WebSocket局域网调试");
				var a = `ws://${e}:3002/websocket/test`,
					i = null;
				try {
					(i = new ULWebSocket(a)).onopen = function() {
						ULLog.console.log("Connection open ..."), ULSdkManager.getInstance().moduleCheckerManager.addDebugInfo("console_lan_id", "已开启局域网调试")
					}, i.onmessage = function(t) {
						ULLog.console.log("Received Message:" + t.data)
					}, i.onclose = function() {
						ULLog.console.log("Connection closed"), ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("console_lan_id"), ULTools.socketingWS = null
					}, i.onerror = function(t) {
						ULLog.console.error("Connection onerror:", t), ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("console_lan_id"), ULTools.socketingWS = null
					}
				} catch (t) {
					i = null, ULLog.console.log("局域网调试错误:", JSON.stringify(t))
				} finally {
					if (null == i) return;
					ULTools.socketingWS = i
				}
			} else ULLog.console.log("不支持WebSocket局域网调试")
		}
		static _close_console_print_LAN() {
			ULTools.socketingWS && (ULTools.socketingWS.close(), ULTools.socketingWS = null)
		}
		static jsonValToStr(t) {
			if (!t) return t;
			let e = {},
				a = Object.keys(t);
			for (let i = 0; i < a.length; i++) {
				let s = a[i],
					n = t[s];
				n = "object" == typeof n ? JSON.stringify(n) : String(n), e[s] = n
			}
			return e
		}
		static calcWheelTargetByArray(t, e) {
			let a = 0;
			for (let e = 0; e < t.length; e++) a += t[e];
			0 != e && (a = Math.min(a, e));
			let i = Math.random() * a,
				s = 0;
			for (let e = 0; e < t.length; e++)
				if ((s += t[e]) > i) return e;
			return null
		}
		static recordVideoTimeLimit(t, e) {
			let a = ULConfig.getConfig().t_sdk_record_duration_limit_object || {},
				i = a["string" == typeof t ? t : "number" == typeof t ? t.toString() : ""] || a["*"] || {},
				s = i.min || 0,
				n = i.max || 1e4;
			return s > e ? {
				isConform: !1,
				msg: `录屏时间少于${s}秒`
			} : n < e ? {
				isConform: !1,
				msg: `录屏时间大于${n}秒`
			} : {
				isConform: !0,
				msg: ""
			}
		}
	}
	ULTools.socketingWS = null;
	class ULConfig {
		static init() {
			this.bInit = !0, ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, ULConst.PRIORITY_NONE, this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
		}
		static getConfig() {
			return this.bInit || this.init(), this.currConfig || (this.currConfig = ULTools.clone(cConfig)), this.currConfig
		}
		static get(t) {
			return this.getConfig()[t]
		}
		static updateValueByCop(t) {
			let e = ULTools.clone(cConfig);
			ULTools.forEachMap(t, (t, a) => {
				"nil" == a && (a = ""), e[t] = a
			}), this.currConfig = e, ULConst.B_INNER_DEBUG = this.getConfig().i_sdk_debug_mode >= ULConst.CONSOLE_OUTPUT_LEVEL_INNER_DEBUG
		}
		static onCmdSdkCollectionModuleCheckerConfig(t) {
			let e = t.getReturnValue() || [];
			e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "cConfig:"
			}), e.push({
				type: "button",
				text: "显示cConfig",
				onClick: () => {
					let t = this.currConfig,
						e = Object.keys(t);
					e.sort();
					let a = [];
					for (let i = 0; i < e.length; i++) {
						const s = e[i];
						let n = JSON.stringify(t[s]),
							o = ULTools.format("[%s] = [%s]\n", s, n);
						o.length >= 64 && (o = o.substr(0, 62) + ".."), a.push({
							text: o,
							value: {
								k: s,
								v: n
							}
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("cConfig", a, t => {
						ULSdkManager.getInstance().moduleCheckerManager.alertPrompt(t.k, t.v, "关闭", null)
					}, !0)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: ULTools.format("i_sdk_debug_mode=[%s]", this.getConfig().i_sdk_debug_mode),
				name: "labelDebugMode"
			}), e.push({
				type: "button",
				text: "切换调试模式",
				onClick: () => {
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("选择调试模式", [{
						text: "0: 全关",
						value: 0
					}, {
						text: "1: warn + error",
						value: 1
					}, {
						text: "2: log + warn + error",
						value: 2
					}, {
						text: "3: 开启各模块的DEBUG + log + warn + error",
						value: 3
					}], t => {
						cConfig.i_sdk_debug_mode = t, this.currConfig.i_sdk_debug_mode = t, ULTools._hack_console_print_method(), ULConst.B_INNER_DEBUG = this.getConfig().i_sdk_debug_mode >= ULConst.CONSOLE_OUTPUT_LEVEL_INNER_DEBUG, ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelDebugMode", ULTools.format("i_sdk_debug_mode=[%s]", this.getConfig().i_sdk_debug_mode))
					})
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "局域网调试：",
				name: "labelSocketDebugMode"
			}), e.push({
				type: "inputBox",
				text: ULStorageManager.getInstance().getStorage("console_lan_id"),
				name: "console_lan_id"
			}), e.push({
				type: "button",
				text: "切换局域网调试模式",
				onClick: () => {
					let t = ULSdkManager.getInstance().moduleCheckerManager.getItemText("console_lan_id"),
						e = [{
							text: "关闭调试",
							value: 0
						}, {
							text: "开启调试: " + t,
							value: 1
						}];
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("选择调试模式", e, e => {
						0 == e ? (ULStorageManager.getInstance().setStorage("console_lan_id", null), ULTools._close_console_print_LAN()) : (ULStorageManager.getInstance().setStorage("console_lan_id", t), ULTools._start_console_print_LAN())
					})
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: `SDK log 开关：(${this.sdkLogSwitch?"已开启":"已关闭"})`,
				name: "SDK_LOG_MODE"
			}), e.push({
				type: "button",
				text: "切换状态",
				onClick: () => {
					this.sdkLogSwitch ? (this.sdkLogSwitch = !1, ULLog.console.allowConsole = !1) : (this.sdkLogSwitch = !0, ULLog.console.allowConsole = !0), ULSdkManager.getInstance().moduleCheckerManager.setItemText("SDK_LOG_MODE", `SDK log 开关：(${this.sdkLogSwitch?"已开启":"已关闭"})`)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "显示sdk通信记录:"
			}), e.push({
				type: "button",
				text: "查看...",
				onClick: () => {
					let t = ULSdkManager.getInstance().getSdkCommunicationLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						try {
							let t = JSON.parse(i);
							ULLog.console.log(a, i, t), e.push({
								text: ULTools.format("%d: %s", a, t.cmd),
								value: i
							})
						} catch (t) {}
					}
					ULLog.console.log("conf", e), ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("sdk通信记录（最近100条）", e, t => {
						ULSdkManager.getInstance().moduleCheckerManager.showBigTextWithPickerDialog("详情", t, 40)
					}, !0)
				}
			}), e.push({
				type: "newLine"
			}), t.setReturnValue(e, !0)
		}
	}
	ULConfig.bInit = !1, ULConfig.sdkLogSwitch = !0;
	class ULModuleBase {
		constructor() {
			ULLog.console.log("ULModuleBase-constructor")
		}
		init() {
			ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, this.getCollectionModuleCheckerPriority(), this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
		}
		onDisposeModule() {
			ULLog.console.log("ULModuleBase-onDisposeModule")
		}
		loadSubModules() {
			return []
		}
		getSubAdModuleClassName() {
			return []
		}
		getAdMainClassName() {
			return ""
		}
		createSubAdObj(t, e) {
			return null
		}
		createMainAdObj() {
			return null
		}
		loadModuleCheckerConfig() {
			return []
		}
		onCmdSdkCollectionModuleCheckerConfig(t) {
			let e = t.getReturnValue() || [],
				a = this.loadModuleCheckerConfig();
			for (let t = 0; t < a.length; t++) {
				const i = a[t];
				e.push(i)
			}
			t.setReturnValue(e, !0)
		}
		getCollectionModuleCheckerPriority() {
			return ULConst.PRIORITY_NONE
		}
	}
	class ULModuleCdk extends ULModuleBase {
		constructor() {
			super(...arguments), this.className = "ULModuleCdk"
		}
		init() {
			super.init(), ULEventDispatcher.getInstance().addListener(ULConst.CMD_USE_CDKEY, 1, this.onCmdUseCdkey.bind(this))
		}
		requestUseCdk(t, e, a) {
			let i = ULConfig.getConfig(),
				s = i.s_sdk_cdk_app_id,
				n = i.i_net_timeout,
				o = ULTools.format("%s?userId=%s&cdkStr=%s&appId=%s&channelId=%s", i.s_sdk_cdk_url, t, e, s, a);
			ULLog.console.log("ULModuleCdk.requestUseCdk", o), ULTools.httpGet({
				url: o,
				timeoutMillisecond: n,
				success: t => {
					t = (t = (t = (t = t.replace('"[', "[")).replace(']"', "]")).replace('"0"', '"1"')).replace("message", "data");
					let e = JSON.parse(t);
					ULSdkManager.getInstance().statisManager.reportOpenCdk(e.code), 1 == e.code ? ULSdkManager.getInstance().response(ULConst.CMD_USE_CDKEY_RESULT, {
						code: 1,
						data: e.data,
						message: "兑换成功"
					}) : ULSdkManager.getInstance().response(ULConst.CMD_USE_CDKEY_RESULT, {
						code: 0,
						data: [],
						message: e.data
					})
				},
				fail: () => {
					ULSdkManager.getInstance().statisManager.reportOpenCdk(0), ULSdkManager.getInstance().response(ULConst.CMD_USE_CDKEY_RESULT, {
						code: 0,
						message: "请求超时"
					})
				}
			})
		}
		onCmdUseCdkey(t) {
			t.stopImmediatePropagation();
			ULConfig.getConfig();
			let e = t.data,
				a = e.userId,
				i = e.cdkStr,
				s = e.channelId;
			this.requestUseCdk(a, i, s)
		}
	}
	class ULModuleMegadata extends ULModuleBase {
		constructor() {
			super(...arguments), this.className = "ULModuleMegadata"
		}
		init() {
			super.init(), ULEventDispatcher.getInstance().addListener(ULConst.CMD_MEGADATA_SERVER, 1, this.onCmdMegadataServer.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_POST_MEGADATA, 1, this.onCmdPostMegadata.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_RESUME, ULConst.PRIORITY_NONE, this.onCmdSdkOnGameResume.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_PAUSE, ULConst.PRIORITY_NONE, this.onCmdSdkOnGamePause.bind(this)), this.gameLevelStartMsgList = {}
		}
		onCmdMegadataServer(t) {
			t.stopImmediatePropagation();
			let e = ULConfig.getConfig(),
				a = t.data;
			Array.isArray(a) && a.length > 0 ? ULSdkManager.getInstance().response(ULConst.CMD_MEGADATA_SERVER_RESULT, {
				code: 1,
				message: "上报成功"
			}) : ULSdkManager.getInstance().response(ULConst.CMD_MEGADATA_SERVER_RESULT, {
				code: 0,
				message: "数据异常"
			});
			let i = e.s_sdk_megadata_url;
			if (ULSdkManager.getInstance().statisManager.getPostMegadataMode() && (i = e.s_sdk_megadata_test_url), -1 != i.search(/megadatav7/gi)) return void ULLog.console.warn("应用确定使用v7版本统计，/c/megadataServer接口数据不再进行上报");
			let s = ULTools.clone(a),
				n = s[0];
			if (n != ULConst.STATIS_USER_EVENT_POINT_EVENT) {
				if (n == ULConst.STATIS_USER_EVENT_GAME_LEVEL_START) {
					let t = ULTools.time(),
						e = s[1] + "";
					this.gameLevelStartMsgList[e] = t
				}
				if (n == ULConst.STATIS_USER_EVENT_GAME_LEVEL_COMPLETE) {
					let t = s[1] + "",
						e = ULTools.time() - this.gameLevelStartMsgList[t];
					this.gameLevelStartMsgList[t] = void 0, delete this.gameLevelStartMsgList[t], isNaN(e) && (e = 0), (e < 0 || e > 1e4) && (e = 0), s.push(Math.floor(e).toString())
				}
				ULSdkManager.getInstance().statisManager.reportUserEvent(s)
			} else ULSdkManager.getInstance().statisManager.reportPointEvent(s[1], s[2])
		}
		onCmdPostMegadata(t) {
			t.stopImmediatePropagation();
			let e = ULConfig.getConfig(),
				a = t.data;
			Array.isArray(a) && a.length > 0 ? ULSdkManager.getInstance().response(ULConst.CMD_POST_MEGADATA_RESULT, {
				code: 1,
				message: "上报成功"
			}) : ULSdkManager.getInstance().response(ULConst.CMD_POST_MEGADATA_RESULT, {
				code: 0,
				message: "数据异常"
			});
			let i = ULTools.clone(a),
				s = i[0],
				n = "";
			if (s == ULConst.STATIS_USER_ACTION_EVENT_LEVEL_START) {
				let t = ULTools.time(),
					a = i[1] + "";
				this.gameLevelStartMsgList[a] = t, n = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_START_EVENT)
			}
			if (s == ULConst.STATIS_USER_ACTION_EVENT_LEVEL_COMPLETE) {
				let t = i[1] + "",
					a = ULTools.time() - this.gameLevelStartMsgList[t];
				this.gameLevelStartMsgList[t] = void 0, delete this.gameLevelStartMsgList[t], isNaN(a) && (a = 0), (a < 0 || a > 1e4) && (a = 0), i.push(Math.floor(a).toString()), n = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, ["levelComplete", t])
			}
			if (s == ULConst.STATIS_USER_ACTION_EVENT_COIN_CHANGE && (n = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_COIN_CHANGE_EVENT)), s == ULConst.STATIS_USER_ACTION_EVENT_ITEM_BUY && (n = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_ITEM_BUY)), s == ULConst.STATIS_USER_ACTION_EVENT_BUY_ACTION && (n = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_BUY_ACTION)), s == ULConst.STATIS_USER_ACTION_EVENT_COMMON_EVENT) {
				n = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_COMMON_EVENT);
				let t = ULTools.clone(i);
				t.shift(), ULLog.console.log("ULModuleMegadta.onCmdPostMegadatapostData postData:", t), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, t)
			}
			s == ULConst.STATIS_USER_ACTION_EVENT_VIDEO_POINT_EVENT && (n = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_VIDEO_POINT_EVENT), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, ["videoPointShow", i[1]])), "" != n && (i.shift(), ULLog.console.log("ULModuleMegadta.onCmdPostMegadatapostData typeId:", n, " rawDatas:", i), ULSdkManager.getInstance().statisManager.reportUserActionEvent(i, n))
		}
		onCmdSdkOnGameResume(t) {
			ULConfig.getConfig();
			for (let t in this.gameLevelStartMsgList) this.gameLevelStartMsgList[t] = ULTools.time();
			ULLog.console.log("ULModuleMegadta.onCmdSdkOnGameResume gameLevelStartTime:", this.gameLevelStartMsgList)
		}
		onCmdSdkOnGamePause(t) {
			let e = ULConfig.getConfig();
			for (let t in this.gameLevelStartMsgList) {
				ULLog.console.log("ULModuleMegadta.onCmdSdkOnGamePause currentGameLevelName:", t);
				let a = ULTools.time() - this.gameLevelStartMsgList[t];
				isNaN(a) && (a = 0), (a < 0 || a > 1e4) && (a = 0);
				let i = new Array;
				i.push(t), i.push("2"), i.push("pause"), i.push("0"), i.push("0"), i.push("0"), i.push("0"), i.push("0"), i.push("0"), i.push(Math.floor(a).toString());
				let s = ULTools.format("%s-%s", e.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT);
				ULSdkManager.getInstance().statisManager.reportUserActionEvent(i, s)
			}
		}
	}
	class ULModuleUserData extends ULModuleBase {
		constructor() {
			super(...arguments), this.className = "ULModuleUserData"
		}
		init() {
			super.init(), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SAVE_USER_DATA, ULConst.PRIORITY_DISABLE, this.onCmdSaveUserData.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_GET_USER_DATA, ULConst.PRIORITY_DISABLE, this.onCmdGetUserData.bind(this))
		}
		requestUploadUserData(t, e) {
			let a = ULConfig.getConfig(),
				i = a.s_sdk_user_data_save_url,
				s = {
					userId: t,
					data: e
				};
			ULTools.httpPost({
				url: i,
				postData: s,
				timeoutMillisecond: a.i_net_timeout,
				success: t => {
					let e = JSON.parse(t);
					e && 0 == e.code ? ULSdkManager.getInstance().response(ULConst.CMD_SAVE_USER_DATA_RESULT, {
						code: 1,
						msg: "存档成功"
					}) : ULSdkManager.getInstance().response(ULConst.CMD_SAVE_USER_DATA_RESULT, {
						code: 0,
						msg: "存档失败"
					})
				},
				fail: () => {
					ULSdkManager.getInstance().response(ULConst.CMD_SAVE_USER_DATA_RESULT, {
						code: 0,
						msg: "存档超时"
					})
				}
			})
		}
		requestDownloadUserData(t) {
			let e = ULConfig.getConfig(),
				a = ULTools.format("%s?userId=%s", e.s_sdk_user_data_get_url, t);
			ULLog.console.log("ULModuleUserData.requestDownloadUserData", t), ULLog.console.log("  url", a), ULTools.httpGet({
				url: a,
				timeoutMillisecond: e.i_net_timeout,
				success: t => {
					let e = JSON.parse(t);
					ULLog.console.log("  ULModuleUserData.requestDownloadUserData success", t), e && 0 == e.code ? ULSdkManager.getInstance().response(ULConst.CMD_GET_USER_DATA_RESULT, {
						code: 1,
						userData: e.data,
						msg: "模拟成功"
					}) : ULSdkManager.getInstance().response(ULConst.CMD_GET_USER_DATA_RESULT, {
						code: 0,
						userData: {},
						msg: "读取存档失败"
					})
				},
				fail: t => {
					ULLog.console.log("  ULModuleUserData.requestDownloadUserData fail", t), ULSdkManager.getInstance().response(ULConst.CMD_GET_USER_DATA_RESULT, {
						code: 0,
						userData: {},
						msg: "读取存档超时"
					})
				}
			})
		}
		onCmdSaveUserData(t) {
			t.stopImmediatePropagation();
			ULConfig.getConfig();
			let e = ULSdkManager.getInstance().channelInfo,
				a = t.data,
				i = e.uuid,
				s = a.userData;
			i ? this.requestUploadUserData(i, s) : ULLog.console.log("ULModuleUserData.onCmdSaveUserData userId not found!")
		}
		onCmdGetUserData(t) {
			t.stopImmediatePropagation();
			ULConfig.getConfig();
			let e = ULSdkManager.getInstance().channelInfo,
				a = (t.data, e.uuid);
			this.requestDownloadUserData(a)
		}
	}
	class ULClipboardManager {
		static getInstance() {
			return this._instance || (this._instance = new ULClipboardManager), this._instance
		}
		getClipboardData(t) {
			if (!(t instanceof Function)) return void ULLog.console.warn("ULClipboardManager.getClipboardData finishCallback not a function");
			ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_GET_CLIPBOARD_DATA, {
				finishCallback: t
			}) || t(null)
		}
		setClipboardData(t, e) {
			if (!(e instanceof Function)) return void ULLog.console.warn("ULClipboardManager.setClipboardData finishCallback not a function");
			ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_SET_CLIPBOARD_DATA, {
				data: t,
				finishCallback: e
			}) || e(!1)
		}
		isSupport() {
			return !!ULEventDispatcher.getInstance().dispatchWithReturn(ULConst.CMD_SDK_IS_SUPPORT_CLIPBOARD, {})
		}
	}
	ULClipboardManager._instance = null;
	class ULModuleClipboard extends ULModuleBase {
		constructor() {
			super(...arguments), this.className = "ULModuleClipboard"
		}
		init() {
			super.init(), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SET_CLIPBOARD_DATA, 1, this.onCmdSetClipboardData.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_GET_CLIPBOARD_DATA, 1, this.onCmdGetClipboardData.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SET_VERSION, 1, this.onCmdSetVersion.bind(this))
		}
		onCmdSetClipboardData(t) {
			t.stopImmediatePropagation();
			ULConfig.getConfig();
			let e = t.data,
				a = e.clipboardData,
				i = e.userData;
			ULClipboardManager.getInstance().setClipboardData(a, t => {
				t ? ULSdkManager.getInstance().response(ULConst.CMD_SET_CLIPBOARD_DATA_RESULT, {
					code: 1,
					msg: "保存成功",
					clipboardData: a,
					userData: i
				}) : ULSdkManager.getInstance().response(ULConst.CMD_SET_CLIPBOARD_DATA_RESULT, {
					code: 0,
					msg: "保存失败",
					clipboardData: a,
					userData: i
				})
			})
		}
		onCmdGetClipboardData(t) {
			t.stopImmediatePropagation();
			ULConfig.getConfig();
			let e = t.data.userData;
			ULClipboardManager.getInstance().getClipboardData(t => {
				t ? ULSdkManager.getInstance().response(ULConst.CMD_GET_CLIPBOARD_DATA_RESULT, {
					code: 1,
					msg: "获取成功",
					clipboardData: t,
					userData: e
				}) : ULSdkManager.getInstance().response(ULConst.CMD_GET_CLIPBOARD_DATA_RESULT, {
					code: 0,
					msg: "获取失败",
					clipboardData: null,
					userData: e
				})
			})
		}
		onCmdSetVersion(t) {
			let e = ULSdkManager.getInstance().channelInfo;
			e.isSupportClipboardData = ULClipboardManager.getInstance().isSupport(), ULLog.console.log(ULTools.format("ULModuleClipboard.onCmdSetVersion mark isSupportClipboardData = %s", e.isSupportClipboardData))
		}
	}
	class ULChannelModuleBase extends ULModuleBase {
		constructor() {
			super(), ULLog.console.log("ULChannelModuleBase-constructor")
		}
		init() {
			super.init(), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_GET_STORAGE, ULConst.PRIORITY_NONE, this.onCmdSdkGetStorage.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_SET_STORAGE, ULConst.PRIORITY_NONE, this.onCmdSdkSetStorage.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_GET_CLIPBOARD_DATA, ULConst.PRIORITY_NONE, this.onCmdSdkGetClipboardData.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_SET_CLIPBOARD_DATA, ULConst.PRIORITY_NONE, this.onCmdSdkSetClipboardData.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_IS_SUPPORT_CLIPBOARD, ULConst.PRIORITY_NONE, this.onCmdSdkIsSupportClipboard.bind(this)), this.genSdkUserId(), ULSdkManager.getInstance().channelInfo._sdkUserId = this.sdkUserId, ULSdkManager.getInstance().channelInfo.isNewUser = this.isNewUser, ULLog.console.log("ULChannelModuleBase.init isNewUser:", this.isNewUser)
		}
		genSdkUserId() {
			let t = ULConfig.getConfig(),
				e = ULTools.format("mUserId_%s", t.s_sdk_megadata_game_id);
			this.isNewUser = !1, this.sdkUserId = ULStorageManager.getInstance().getStorage(e), this.sdkUserId || (this.sdkUserId = ULTools.format("%s_%s_%s", t.s_sdk_cop_game_id, ULTools.createRandomUserId(), t.s_sdk_cop_channel_id), ULStorageManager.getInstance().setStorage(e, this.sdkUserId), this.isNewUser = !0)
		}
		onCmdSdkGetStorage(t) {
			let e = t.data.key;
			t.setReturnValue(this._hook_getStorage(e))
		}
		onCmdSdkSetStorage(t) {
			let e = t.data.key,
				a = t.data.data;
			this._hook_setStorage(e, a), t.stopImmediatePropagation()
		}
		onCmdSdkGetClipboardData(t) {
			let e = t.data.finishCallback;
			this._hook_getClipboardData(e), t.stopImmediatePropagation()
		}
		onCmdSdkSetClipboardData(t) {
			let e = t.data.data,
				a = t.data.finishCallback;
			this._hook_setClipboardData(e, a), t.stopImmediatePropagation()
		}
		onCmdSdkIsSupportClipboard(t) {
			t.data;
			t.setReturnValue(this._hook_isSupportClipboard()), t.stopImmediatePropagation()
		}
	}
	class ULChannelModuleWebmobileBase extends ULChannelModuleBase {
		constructor() {
			super(...arguments), this.className = "ULChannelModuleWebmobileBase"
		}
		_hook_getStorage(t) {
			return localStorage ? localStorage.getItem(t) : null
		}
		_hook_setStorage(t, e) {
			localStorage && localStorage.setItem(t, e)
		}
		_hook_isSupportClipboard() {
			return !1
		}
		_hook_getClipboardData(t) {
			t(null)
		}
		_hook_setClipboardData(t, e) {
			if (!document) return void e(!1);
			ULLog.console.log("webmobile --- copy 2");
			const a = document.createElement("input");
			document.body.appendChild(a), a.value = t, a.focus(), a.select();
			var i = !1;
			try {
				i = document.execCommand("copy")
			} catch (t) {
				i = !1
			}
			document.body.removeChild(a), e(i)
		}
	}
	class ULAdvBase extends ULModuleBase {
		constructor() {
			super(), this._initState = !1, this.onInitModule()
		}
		get initState() {
			return this._initState
		}
		set initState(t) {
			this._initState = t
		}
	}
	class ULAdvFaceBook extends ULAdvBase {
		constructor() {
			super(), this.className = "ULAdvFaceBook"
		}
		onInitModule() {
			this.initState = !0, this.notifyInitState(this.initState)
		}
		notifyInitState(t) {
			let e = ULSdkManager.getInstance().advManager.getAdvObjectsByName("ULAdvFaceBook");
			if (e)
				for (const a of e) a.receiveMainClassInitState(t)
		}
		initAdv() {}
	}
	ULAdvFaceBook.NORMAL_ADVERTISER = "ULAdvFaceBook";
	class ULAdvObjectBase extends ULModuleBase {
		constructor(t, e, a) {
			super(), this._preLoadState = ULConst.ADV_PRELOAD_STATE_NOAD, this.onLoadFailErr = {
				code: "",
				msg: ""
			}, this._statisticsAdvertiser = "", this._statisticsType = "", this.advKey_2_lastRequestTime = {}, this._supportLoadType = [], this._loadType = void 0, this.isReportLoading = !1, this.isDispose = !1, this._arg = t, this._advType = e, this._advKey = a
		}
		onDisposeModule() {
			super.onDisposeModule(), this.isDispose = !0, ULLog.console.log("ULAdvObjectBase-onDisposeModule arg:", this.arg)
		}
		get arg() {
			return this._arg
		}
		get advKey() {
			return this._advKey
		}
		get preLoadState() {
			return this._preLoadState
		}
		set preLoadState(t) {
			this._preLoadState != t && (this._preLoadState = t, ULSdkManager.getInstance().advManager.onAdvObjectPreloadStateChanged(this.advKey))
		}
		get advType() {
			return this._advType
		}
		get isOpened() {
			return this._isOpened
		}
		set isOpened(t) {
			this._isOpened = t
		}
		get showData() {
			return this._mShowData
		}
		set showData(t) {
			this._mShowData = t
		}
		getMainClassNameString() {
			return this.getMainClassName()
		}
		receiveMainClassInitState(t) {
			this.receiveInitState(t)
		}
		preLoadAdv() {
			this.onLoadFailErr.code = "", this.onLoadFailErr.msg = "", this.preLoadState = ULConst.ADV_PRELOAD_STATE_LOADING, ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleRequest(this.advKey);
			let t = ULSdkManager.getInstance().advManager.getRcdByAdvKey(this.advKey);
			if (t) {
				let e = this.advKey_2_lastRequestTime[this.advKey],
					a = (new Date).valueOf();
				if (e) {
					if (a - e < t) return console.warn(`${this.className}-preLoadAdv:模块[ + ${this.advKey} + ]in cd`), this.preLoadState = ULConst.ADV_PRELOAD_STATE_NOAD, void this.reLoadAdv();
					this.advKey_2_lastRequestTime[this.advKey] = a
				} else this.advKey_2_lastRequestTime[this.advKey] = a
			}
			this.loadAdv()
		}
		reLoadAdv() {
			ULTimer.callLater(ULSdkManager.getInstance().advManager.getAdvReloadTime() / 1e3, () => {
				this.isDispose || this.preLoadAdv()
			})
		}
		advSkip(t, e) {
			ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleSkip(this.advKey, e, t)
		}
		get statisticsAdvertiser() {
			return this._statisticsAdvertiser
		}
		set statisticsAdvertiser(t) {
			this._statisticsAdvertiser = t
		}
		get statisticsType() {
			return this._statisticsType
		}
		set statisticsType(t) {
			this._statisticsType = t
		}
		set setSupportLoadType(t) {
			this._supportLoadType = t
		}
		get getSupportLoadType() {
			return this._supportLoadType
		}
		set setLoadType(t) {
			null != t && (this._loadType = t)
		}
		get getLoadType() {
			return this._loadType
		}
	}
	class ULAdvNativeObjectBase extends ULAdvObjectBase {
		constructor(t, e, a) {
			super(t, e, a), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_CLICK_NATIVE_ADV, ULConst.PRIORITY_NONE, this.clickNativeAdv.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_CLOSE_NATIVE_ADV, ULConst.PRIORITY_NONE, this.closeNativeAdv.bind(this))
		}
		get nativeShowState() {
			return this._nativeShowState
		}
		set nativeShowState(t) {
			this._nativeShowState = t
		}
		get nativeData() {
			return this._nativeData
		}
		set nativeData(t) {
			this._nativeData = t
		}
	}
	const SYMBOL = {
		"*": {
			order: 3,
			argCount: 2,
			handler: (t, e) => t * e
		},
		"/": {
			order: 3,
			argCount: 2,
			handler: (t, e) => t / e
		},
		"+": {
			order: 2,
			argCount: 2,
			handler: (t, e) => Number(t) + Number(e)
		},
		"-": {
			order: 2,
			argCount: 2,
			handler: (t, e) => t - e
		},
		">=": {
			order: 1,
			argCount: 2,
			handler: (t, e) => t >= e
		},
		">": {
			order: 1,
			argCount: 2,
			handler: (t, e) => t > e
		},
		"<=": {
			order: 1,
			argCount: 2,
			handler: (t, e) => t <= e
		},
		"<": {
			order: 1,
			argCount: 2,
			handler: (t, e) => t < e
		},
		"==": {
			order: 0,
			argCount: 2,
			handler: (t, e) => t == e
		},
		"!=": {
			order: 0,
			argCount: 2,
			handler: (t, e) => t != e
		},
		"&&": {
			order: -1,
			argCount: 2,
			handler: (t, e) => t && e
		},
		"||": {
			order: -1,
			argCount: 2,
			handler: (t, e) => t || e
		}
	};
	let SYMBOLKeysDic = {};
	Object.keys(SYMBOL).forEach(t => {
		SYMBOLKeysDic[t.length] = !0
	});
	let SYMBOLKeys = Object.keys(SYMBOLKeysDic).map(t => Number(t)).sort((t, e) => e - t);
	class ULAdvExpManager {
		constructor() {
			this.availableExpKeyArray = [], this.updateValue = 10
		}
		static getInstance() {
			return null == this.instance && (this.instance = new ULAdvExpManager, this.instance.addListern()), this.instance
		}
		get expValueCache() {
			if (!this._expValueCache) {
				let t, e = this._getRecordKey(),
					a = ULStorageManager.getInstance().getStorage(e) || "{}";
				try {
					t = JSON.parse(a)
				} catch (e) {
					t = {}
				}
				for (const e in t) {
					this.getKeyTimeString(e) != t[e].exp_time && delete t[e]
				}
				this._expValueCache = t
			}
			return this._expValueCache
		}
		addListern() {
			ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_PAUSE, ULConst.PRIORITY_NONE, this.onCmdSdkOnGamePause.bind(this))
		}
		onCmdSdkOnGamePause(t) {
			this.saveStoreValue()
		}
		static updateExpKeys(t) {
			ULAdvExpManager.getInstance().availableExpKeyArray = t.slice(0)
		}
		static calcExp(t) {
			return ULLog.console.log("ULAdvExpManager calcExp:", t), ULAdvExpManager.getInstance().calcExpResults(t)
		}
		static updateExpValue(t) {
			ULAdvExpManager.getInstance().setStoreValue(t)
		}
		trimCalcExp(t) {
			let e = (t = t.replace(/\s/g, "")).split(""),
				a = "",
				i = [],
				s = [],
				n = 0,
				o = "";
			for (; e.length;) {
				let t = e.pop();
				switch (t) {
					case "(":
						if (o = t + o, 0 == --n) {
							o = o.substring(1, o.length - 1), i = i.concat(this.trimCalcExp(o).reverse()), o = "";
							continue
						}
						break;
					case ")":
						n++, o = t + o;
						break;
					default: {
						if (0 != n) {
							o = t + o;
							continue
						}
						let r = null;
						for (let a = 0; a < SYMBOLKeys.length; a++) {
							let i = SYMBOLKeys[a] - 1;
							if (e.length > i) {
								let a = e.slice(e.length - i, e.length) + t;
								if (SYMBOL[a]) {
									t = a, r = SYMBOL[a], e = e.slice(0, e.length - i);
									break
								}
							}
						}
						if (r) {
							if (a.length && (i.push(a), a = ""), s.length)
								for (let t = s.length - 1; t >= 0; t--) {
									let t = s.pop(),
										e = SYMBOL[t];
									if (!(e && e.order > r.order)) {
										s.push(t);
										break
									}
									i.push(t)
								}
							s.push(t);
							continue
						}
						a = t + a
					}
				}
			}
			return a.length && (i.push(a), a = ""), i = (i = i.filter((t, e, a) => "" != t)).concat(s.reverse()).reverse()
		}
		calcExpResults(t) {
			try {
				let e = this.trimCalcExp(t),
					a = [];
				for (; e.length;) {
					let t = e.pop(),
						i = SYMBOL[t];
					if (i) {
						let t = a.pop(),
							e = a.pop(),
							s = i.handler(t, e);
						a.push(s)
					} else {
						let e = this.getCalcExpValue(t);
						a.push(e)
					}
				}
				return ULLog.console.log("ULAdvExpManager calcExpResults:", a[0] || !0), a[0] || !0
			} catch (e) {
				return console.warn("ULAdvExpManager exp规则错误：", t), !1
			}
		}
		_getRecordKey() {
			let t = ULConfig.getConfig();
			return ULTools.format("ULAdvExpManager_record_%d", t.s_sdk_megadata_game_id)
		}
		getCalcExpValue(t) {
			return "string" == typeof t && -1 != this.availableExpKeyArray.indexOf(t) ? this.getStoreValue(t) : t
		}
		getStoreValue(t) {
			let e = this.expValueCache[t];
			if (!e) return 0;
			let a = this.getKeyTimeString(t);
			return a != e.exp_time && (e.exp_time = a, e.exp_value = 0), e.exp_value
		}
		setStoreValue(t) {
			if ("string" != typeof t || -1 == this.availableExpKeyArray.indexOf(t)) return;
			let e = this.getKeyTimeString(t),
				a = this.expValueCache[t];
			a ? e != a.exp_time ? (a.exp_time = e, a.exp_value = 1) : a.exp_value += 1 : (a = {
				exp_name: t,
				exp_time: e,
				exp_value: 1
			}, this.expValueCache[t] = a), this.updateValue--, this.updateValue <= 0 && (this.updateValue = 10, this.saveStoreValue())
		}
		saveStoreValue() {
			let t = this._getRecordKey();
			ULStorageManager.getInstance().setStorage(t, JSON.stringify(this.expValueCache))
		}
		getKeyTimeString(t) {
			let e = ULTools.formatDate(new Date, "yyyyMMdd");
			switch (t.substr(0, 1)) {
				case "d":
					e = ULTools.formatDate(new Date, "yyyyMMdd");
					break;
				case "w":
					let a = new Date,
						i = a.getDay() || 7,
						s = new Date(a.getFullYear(), a.getMonth(), a.getDate() + 1 - i);
					e = ULTools.formatDate(s, "yyyyMMdd");
					break;
				case "m":
					e = ULTools.formatDate(new Date, "yyyyMM");
					break;
				case "y":
					e = ULTools.formatDate(new Date, "yyyy")
			}
			return e
		}
	}
	ULAdvExpManager.instance = null;
	class ULAdvSlot {
		constructor(t, e, a, i) {
			this.advId = t, this.schemes = e, this._subAids = a, this._rcd = i
		}
		refreshValidAdvKeys() {
			let t = this.getValidSchemes();
			if (t && 0 != t.length) {
				this.validAdvKeys = [];
				for (let e = 0, a = t.length; e < a; e++) {
					let a = t[e],
						i = this.getValidTemplates(a);
					if (i && 0 != i.length)
						for (const t of i) {
							let e = t.templateId,
								a = ULSdkManager.getInstance().advManager.getAdvKeysByTemplateId(e);
							if (a && 0 != a.length)
								for (const t of a) - 1 == this.validAdvKeys.indexOf(t) && this.validAdvKeys.push(t)
						}
				}
			}
		}
		set openingInfo(t) {
			this._openingInfo = t
		}
		get openingInfo() {
			return this._openingInfo
		}
		get preLoadState() {
			return this._preLoadState
		}
		set preLoadState(t) {
			this._preLoadState = t, ULSdkManager.getInstance().advManager.onAdvSlotPreloadStateChanged(this.advId)
		}
		get rcd() {
			return this._rcd
		}
		get subAids() {
			return this._subAids
		}
		set showTid(t) {
			this._showTid = t
		}
		get showTid() {
			return this._showTid
		}
		openAdv(t, e) {
			let a = {
				data: e,
				requestSerialNum: t
			};
			this.openingInfo = a;
			let i = this.getShowScheme();
			if (!i) return console.warn("ULAdvSlot-openAdv:广告位[" + this.advId + "]未获取到有效策略"), this.openingInfo = null, void ULSdkManager.getInstance().advManager.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, {
				code: "",
				msg: `广告位[${this.advId}]未获取到有效策略`
			});
			let s = this.getValidTemplates(i);
			if (!s || 0 == s.length) return console.warn("ULAdvSlot-openAdv:广告位[" + this.advId + "]未获取到可用模板"), this.openingInfo = null, void ULSdkManager.getInstance().advManager.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, {
				code: "",
				msg: `广告位[${this.advId}]未获取到可用模板`
			});
			ULLog.console.log("ULAdvSlot-openAdv:广告位[" + this.advId + "]当前展示策略：" + JSON.stringify(i)), this.openingInfo.scheme = i;
			let n = [],
				o = [];
			for (let t = 0; t < s.length; t++) {
				let e = s[t].templateId,
					a = 0,
					r = i.tids,
					l = i.tidWeights;
				for (let t = 0; t < r.length; t++)
					if (e == r[t].toString()) {
						a = Number(l[t] || 0), n.push(e), o.push(a);
						break
					}
			}
			this.openingInfo.validTemplateIdArray = n, this.openingInfo.validTemplateWeightArray = o, this.showNextAdv(e)
		}
		showNextAdv(t, e) {
			let a = this.openingInfo.validTemplateIdArray,
				i = this.openingInfo.validTemplateWeightArray,
				s = ULTools.calcWheelTargetByArray(i, ULConst.ADV_MUST_DEFAULT_WEIGHT);
			if (null == s) {
				console.warn("ULAdvSlot-showNextAdv:广告位[" + this.advId + "]无有效模板展示"), this.openingInfo = null;
				let a = {
					code: "",
					msg: `广告位[${this.advId}]无有效模板展示`
				};
				return void ULSdkManager.getInstance().advManager.responseOpenAdvResult(t, ULConst.ADV_RESULT_CODE_FAILED, e || a)
			}
			let n = a[s];
			this.openingInfo.tid = n, this.showTid = n, a.splice(s, 1), this.openingInfo.validTemplateIdArray = a, i.splice(s, 1), this.openingInfo.validTemplateWeightArray = i;
			let o = ULSdkManager.getInstance().advManager.getAdvTypeByTemplateId(n),
				r = ULSdkManager.getInstance().advManager.getLaunchCdByType(o);
			if (ULTools.time() - ULSdkManager.getInstance().advManager.sdkInitTime < r / 1e3) return ULLog.console.log(`ULAdvSlot-showNextAdv:广告${o}处于启动请求cd中`), void this.showNextAdv(t);
			let l = ULSdkManager.getInstance().advManager.getAdvTypeCd(o);
			if (l > 0) {
				let e = ULSdkManager.getInstance().advManager.getAdvTypeLastTriggerTimeLog()[o] || 0,
					a = ULTools.time() - e;
				if (ULLog.console.log(ULTools.format("ULAdvSlot-showNextAdv:检查广告类型cd。上次播放间隔%d秒，cd%d秒", a, l / 1e3)), a <= l / 1e3) return ULLog.console.log(ULTools.format("ULAdvSlot-showNextAdv:广告类型[%s]cd中，请%d后再试", o, l / 1e3 - a)), void this.showNextAdv(t)
			}
			let c = ULSdkManager.getInstance().advManager.getAdvTypeDailyLimit(o);
			if (c > 0) {
				let e = ULSdkManager.getInstance().advManager.getAdvTypeDailyCountLog()[o] || 0;
				if (ULLog.console.log(ULTools.format("检查广告日限。今日已播放%d次，日限制%d次", e, c)), e >= c) return ULLog.console.log(ULTools.format("广告类型[%s]今日已播放%d次，限制%d次。无法播放。", o, e, c)), void this.showNextAdv(t)
			}
			if (ULSdkManager.getInstance().advManager.isAdvTypeOpened(o)) return console.warn("ULAdvSlot-showNextAdv:一个广告类型，同一时间只允许启动一个广告"), void this.showNextAdv(t);
			let h = this.calcValidObjectByTemplateId(n);
			if (null == h) return console.warn("ULAdvSlot-showNextAdv:广告位[" + this.advId + "]当前展示模板【" + n + "】未获取到可用广告对象"), void this.showNextAdv(t);
			if (o == typeExp.video) {
				let e = t.tag || "";
				if (ULSdkManager.getInstance().advManager.isFirstPlayVideo) {
					ULSdkManager.getInstance().advManager.isFirstPlayVideo = !1;
					let t = ULTools.time() - ULSdkManager.getInstance().advManager.sdkInitTime;
					t = Math.floor(t), isNaN(t) && (t = 0), t < ULConfig.getConfig().t_sdk_miniplay_game_adv_point_first_click_event_report_time_limit && ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [ULConfig.getConfig().s_sdk_miniplay_game_adv_point_first_click_event_id, e, t.toString()])
				}
				ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [ULConfig.getConfig().s_sdk_miniplay_game_click_video_event_id, e])
			}
			ULSdkManager.getInstance().advManager.updateAdvIds(o, this.advId);
			let d = h.advKey;
			this.openingInfo.advTemplateItemName = d, ULLog.console.log("ULAdvSlot-showNextAdv:广告位[" + this.advId + "]当前展示模板：" + JSON.stringify(this.openingInfo)), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleShowRequest(d, t), t.type = o;
			let _ = ULSdkManager.getInstance().advManager.getRewardTypeByTemplateId(n);
			t.rewardType = _, h.showAdv(t)
		}
		closeAdv(t) {
			let e = this.openingInfo.advTemplateItemName,
				a = ULSdkManager.getInstance().advManager.getAdvObjectByAdvKey(e);
			a ? a.isOpened ? a.closeAdv(t) : ULSdkManager.getInstance().advManager.responseCloseAdvResult(t, ULConst.ADV_RESULT_CODE_FAILED, "广告未展示") : ULSdkManager.getInstance().advManager.responseCloseAdvResult(t, ULConst.ADV_RESULT_CODE_FAILED, "advobject未找到")
		}
		getShowScheme() {
			let t = this.getValidSchemes();
			if (!t || 0 == t.length) return null;
			let e = [];
			for (const a of t) {
				let t = this.getValidTemplates(a);
				t && t.length > 0 && e.push(a)
			}
			if (0 == e.length) return null;
			let a = new Array(e.length);
			for (let t = 0; t < e.length; t++) a[t] = e[t].weight;
			let i = ULTools.calcWheelTargetByArray(a, ULConst.ADV_MUST_DEFAULT_WEIGHT);
			return null != i ? e[i] : null
		}
		getValidSchemes() {
			let t = [];
			for (let e of this.schemes) {
				if (!ULAdvExpManager.calcExp(e.exp)) continue;
				let a = e.weight;
				a <= 0 || (100 == a ? t.unshift(e) : t.push(e))
			}
			return 0 == t.length ? null : t
		}
		getValidTemplates(t) {
			let e = [],
				a = t.tids;
			if (!a || 0 == a.length) return null;
			for (let i = 0; i < a.length; i++) {
				let s = a[i],
					n = ULSdkManager.getInstance().advManager.getTemplateObjByTid(s);
				n ? ULAdvExpManager.calcExp(n.exp) && (t.tidWeights[i] <= 0 || e.push(n)) : console.warn("ULAdvSlot-getValidTemplates:广告位【" + this.advId + "】对应的模板【" + s + "】不存在模板对象，需检查模板列表中是否配置该模板id")
			}
			return e
		}
		calcValidObjectByTemplateId(t) {
			let e = ULSdkManager.getInstance().advManager.getAdvObjsByTid(t);
			if (!e || 0 == e.length) return null;
			let a, i = [];
			for (const t of e) t.preLoadState == ULConst.ADV_PRELOAD_STATE_READY && i.push(t);
			a = 0 == i.length ? e : i;
			let s = new Array(a.length),
				n = ULSdkManager.getInstance().advManager.getTemplateObjByTid(t);
			if (!n) return null;
			for (let t = 0, e = a.length; t < e; t++) {
				let e = a[t];
				for (let a = 0, i = n.args.length; a < i; a++) {
					let i = n.args[a],
						o = n.moduleName + "_" + i,
						r = n.argWeights[a];
					o == e.advKey && (s[t] = r)
				}
			}
			let o = ULTools.calcWheelTargetByArray(s, ULConst.ADV_MUST_DEFAULT_WEIGHT);
			return null != o ? a[o] : null
		}
		onAdvObjectPreloadStateChanged(t) {
			this.validAdvKeys && -1 != this.validAdvKeys.indexOf(t) && this.refreshPreloadState()
		}
		refreshPreloadState() {
			let t = !1,
				e = !1;
			for (const a of this.validAdvKeys) {
				let i = ULSdkManager.getInstance().advManager.getAdvObjPreloadStateByAdvKey(a);
				i == ULConst.ADV_PRELOAD_STATE_LOADING ? t = !0 : i == ULConst.ADV_PRELOAD_STATE_READY && (e = !0)
			}
			this.preLoadState = e ? ULConst.ADV_PRELOAD_STATE_READY : t ? ULConst.ADV_PRELOAD_STATE_LOADING : ULConst.ADV_PRELOAD_STATE_NOAD
		}
		onAdvObjectLifeCycleSkip(t, e) {
			null != this.openingInfo && (null != this.openingInfo && (this.openingInfo.advTemplateItemName = null), this.showNextAdv(t, e))
		}
		onAdvObjectLifeCycleShow(t, e) {
			let a = ULSdkManager.getInstance().advManager.getRewardTypeByTemplateId(this.showTid);
			ULSdkManager.getInstance().advManager.getAdvTypeByTemplateId(this.showTid);
			ULSdkManager.getInstance().advManager.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, {
				code: "",
				msg: t
			}), rewardType.show == a && ULSdkManager.getInstance().advManager.responseRewardAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, t)
		}
		onAdvObjectLifeCycleClick(t, e) {
			ULSdkManager.getInstance().advManager.responseClickAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, t);
			let a = ULSdkManager.getInstance().advManager.getRewardTypeByTemplateId(this.showTid);
			rewardType.click == a && ULSdkManager.getInstance().advManager.responseRewardAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, t)
		}
		onAdvObjectLifeCycleClose() {
			let t = ULSdkManager.getInstance().advManager.getAdvTypeByTemplateId(this.showTid);
			ULSdkManager.getInstance().advManager.deleteAdvIdOpening(t, this.advId), this.openingInfo = null
		}
		onAdvObjectLifeCycleFail(t, e) {
			ULSdkManager.getInstance().advManager.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, t), this.openingInfo = null
		}
	}
	class ULAdvItem {
		constructor(t, e, a) {
			this.advId = t, this.advType = ULSdkManager.getInstance().advManager.searchAdvTypeByAdvId(t), this.advGroupId = ULSdkManager.getInstance().advManager.searchAdvGroupIdByAdvId(t), this.userData = e, this.tag = a, this.serialId = ULAdvItem.SERIAL_ID++, this.bOpenAdvResultResponsed = !1, this.bClickAdvResultResponsed = !1, this.lifeCycleLog = {}, this.bRequesting = !0, this.statisChannelName = "", this.statisSdkAdvId = "", this.statisNativeAdTitle = ""
		}
		startimeoutTimer(t) {
			this.timeoutTimer || (this.timeoutTimer = new ULTimer(t, 1, () => {
				ULSdkManager.getInstance().advManager.onAdvTimeout(this)
			}), this.timeoutTimer.start())
		}
		stopTimeoutTimer() {
			this.timeoutTimer && (this.timeoutTimer.stop(), this.timeoutTimer = null)
		}
		setLifeCycleLogAllCycle() {
			this.lifeCycleLog = {
				0: !0,
				1: !0,
				2: !0,
				3: !0,
				4: !0,
				5: !0
			}
		}
		set advData(t) {
			this._advData = t
		}
		get advData() {
			return this._advData
		}
	}
	var ULErrorRuleLogic, typeExp, rewardType, countExp, cdExp, dataExp, openResult, oldTypeExp;
	ULAdvItem.SERIAL_ID = 0,
		function(t) {
			t[t.ordinary = 0] = "ordinary", t[t.or = 1] = "or", t[t.with = 2] = "with", t[t.error = 3] = "error"
		}(ULErrorRuleLogic || (ULErrorRuleLogic = {}));
	class ULErrorRuleItem {
		constructor(t = null) {
			this.ruleString = null, this.logic = ULErrorRuleLogic.ordinary, this.rule = null, this.rules = [], this.ruleString = t, t && 0 != t.length ? this.initWithRule(this.ruleString) : this.logic = ULErrorRuleLogic.error
		}
		get isWildcard() {
			return "*" == this.rule
		}
		initWithErrRule() {
			this.logic = ULErrorRuleLogic.error, this.rule = null, this.rules = []
		}
		initWithRule(t) {
			t = t.replace(/\s/g, "");
			let e = 0,
				a = 0,
				i = "";
			for (; t.length;) {
				let s = t.charAt(0),
					n = t.length > 0 ? t.charAt(1) : "";
				switch (t = t.slice(1), s) {
					case "(":
						e++, "" == i.replace(/\(/g, "") && a++;
						break;
					case ")":
						if ("" == t.replace(/\)/g, "") && 0 != a) return i = i.substring(a), this.initWithRule(i);
						a = --e > a ? a : e;
						break;
					case "|":
						if (0 == e) {
							if (s + n == "||") {
								if (this.logic != ULErrorRuleLogic.or && this.logic != ULErrorRuleLogic.ordinary) return this.initWithErrRule();
								this.logic = ULErrorRuleLogic.or, this.rules.push(new ULErrorRuleItem(i)), i = ""
							}
							continue
						}
						break;
					case "&":
						if (0 == e) {
							if (s + n == "&&") {
								if (this.logic != ULErrorRuleLogic.with && this.logic != ULErrorRuleLogic.ordinary) return this.initWithErrRule();
								this.logic = ULErrorRuleLogic.with, this.rules.push(new ULErrorRuleItem(i)), i = ""
							}
							continue
						}
				}
				i += s
			}
			i.length > 0 && (this.logic == ULErrorRuleLogic.ordinary ? this.rule = i : this.rules.push(new ULErrorRuleItem(i)))
		}
		complianceTheRules(t, e = null) {
			switch (this.logic) {
				case ULErrorRuleLogic.ordinary:
					return this.judgmentStandard(t, e);
				case ULErrorRuleLogic.or:
					for (let a of this.rules)
						if (a.complianceTheRules(t, e)) return !0;
					return !1;
				case ULErrorRuleLogic.with:
					for (let a of this.rules)
						if (!a.complianceTheRules(t, e)) return !1;
					return !0
			}
			return !1
		}
		judgmentStandard(key, customData = null) {
			if (null == this.rule) return !1;
			if ("*" == this.rule) return !0;
			if (this.rule == key) return !0;
			if (this.rule.length > 2) {
				let t = this.rule,
					e = t.charAt(0),
					a = t.charAt(this.rule.length - 1);
				if (e + a == "//") {
					t = t.substring(1, t.length - 1);
					var reg = RegExp(t);
					if (reg.exec(key)) return !0
				}
			}
			var patrn = /(?==|!=|>=|>|<|<=)/;
			if (customData && patrn.exec(this.rule)) {
				let trimRule = this.rule.replace("this.", "customData."),
					string = "if (" + trimRule + ") { judge = true } else { judge = false }";
				try {
					var judge = !1;
					return eval(string), judge
				} catch (t) {
					return ULLog.console.log(t), !1
				}
			}
			return !1
		}
	}
	class ULAdvTrimErrorManager {
		static trimErrMessage(t, e) {
			let a = ULConfig.getConfig();
			if (!a.i_sdk_trim_adv_err_switch) return e && ULTools.format("%s %d", ULConst.ADV_FAIL_TIP_NOAD, e.code || e.errCode) || t || ULTools.format(ULConst.ADV_FAIL_TIP_NOAD, ULConst.ADV_ERR_CODE_UNKNOWN);
			let i = a.t_sdk_trim_adv_err_object || {};
			if (!e) return t || ULTools.format(ULConst.ADV_FAIL_TIP_NOAD, ULConst.ADV_ERR_CODE_UNKNOWN);
			let s = {};
			s[ULSdkManager.getInstance().channelInfo.channelName || ""] = e;
			let n = null;
			try {
				n = this.getCustomMsgFromRules(i, s)
			} catch (e) {
				ULLog.console.error("ULAdvTrimErrorManager:错误整理报错-------------请检查配置"), ULLog.console.error("ULAdvTrimErrorManager:errJson：", i), ULLog.console.error("ULAdvTrimErrorManager:channelNameErrJson：", s)
			}
			return n && (n = ULTools.format("%s %d", n, e.code || e.errCode)), n || t || ULTools.format(ULConst.ADV_FAIL_TIP_NOAD, ULConst.ADV_ERR_CODE_UNKNOWN)
		}
		static getCustomMsgFromRules(t, e) {
			let a = [],
				i = [];
			if ("object" != typeof t) return "string" == typeof t ? t : "";
			if (a = Object.keys(t), !e) return "";
			"object" == typeof e ? i = Object.keys(e) : i.push(e);
			let s = a.length;
			for (; a.length;) {
				let n = a.shift();
				s--;
				let o = this.trimRules[n];
				if (o || (o = new ULErrorRuleItem(n), this.trimRules[n] = o), o.isWildcard && s > 0) {
					a.join(n);
					continue
				}
				let r = t[n];
				for (let t of i)
					if (o.complianceTheRules(t, e)) {
						let a = e[t] || null,
							i = this.getCustomMsgFromRules(r, a);
						if (i) return i
					}
			}
			return ""
		}
	}
	ULAdvTrimErrorManager.trimRules = {},
		function(t) {
			t.all = "all", t.splash = "splash", t.inter = "inter", t.video = "video", t.custom = "custom", t.interVideo = "interVideo", t.banner = "banner", t.embed = "embed", t.url = "url", t.paster = "paster"
		}(typeExp || (typeExp = {})),
		function(t) {
			t.show = "show", t.click = "click"
		}(rewardType || (rewardType = {})),
		function(t) {
			t.rc = "rc", t.sc = "sc", t.cc = "cc", t.fc = "fc", t.mcc = "mcc"
		}(countExp || (countExp = {})),
		function(t) {
			t.rcd = "rcd", t.scd = "scd", t.ecd = "ecd"
		}(cdExp || (cdExp = {})),
		function(t) {
			t.nil = "nil", t.d = "d", t.w = "w", t.m = "m", t.y = "y"
		}(dataExp || (dataExp = {})),
		function(t) {
			t.totalAdvRequest = "totalAdvRequest", t.branchAdvRequest = "branchAdvRequest", t.success = "success", t.failed = "failed", t.clicked = "clicked", t.playStart = "playStart", t.playCompletion = "playCompletion", t.loadAdvRequest = "loadAdvRequest", t.close = "close", t.hide = "hide"
		}(openResult || (openResult = {})),
		function(t) {
			t.interstitial = "interstitial", t.embedded = "embedded", t.fullscreen = "fullscreen"
		}(oldTypeExp || (oldTypeExp = {}));
	class ULAdvManager {
		constructor() {
			this.systemAdvExpKeyArray = [], this.advExpKeyArray = [], this.advRequestSerialNum = 0, this.advId_2_advSlot = {}, this.templateId_2_advTemplate = {}, this.templateId_2_advTemplateItemArray = {}, this.advKey_2_templateIdArray = {}, this.moduleName_2_argsArray = {}, this.moduleName_2_advIdsArray = {}, this.templateId_2_moduleName = {}, this.moduleName_2_advTemplate = {}, this.mainName_2_advObjectArray = {}, this.templateId_2_advObjectArray = {}, this.advType_2_advObjectArray = {}, this.moduleName_2_templateIdsArray = {}, this.logKey_2_countNum = {}, this.advKey_2_advIdArray = {}, this.tid_2_advKeyArray = {}, this.advId_2_tidArray = {}, this.nativeType_2_advObjectArray = {}, this.advKey_2_advObject = {}, this.ADV_RELOAD_DEFAULT_TIME = 15e3, this.ADV_RELOAD_TIME = 15e3, this.bannerStartShowTime = 0, this.advKey_2_rcd = {}, this.advId_2_lastRequestTime = {}, this.adMainName_2_obj = {}, this.type_2_advIds = {}, this.exp_2_result = {}, this.advTypeLastTriggerTimeLog = {}
		}
		static getInstance() {
			return null == this.instance && (this.instance = new ULAdvManager), this.instance
		}
		get isFirstPlayVideo() {
			return this._isFirstPlayVideo
		}
		set isFirstPlayVideo(t) {
			this._isFirstPlayVideo = t
		}
		init() {
			this.loadRecord(), this.initAdvExpKey(), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, ULConst.PRIORITY_NONE, this.onCmdSdkCollectionModuleCheckerConfig.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_OPEN_ADV, ULConst.PRIORITY_NONE, this.onCmdOpenAdv.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_CLOSE_ADV, ULConst.PRIORITY_NONE, this.onCmdCloseAdv.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_CLOSE_NATIVE_ADV, ULConst.PRIORITY_NONE, this.onCmdCloseNativeAdv.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_CLICK_NATIVE_ADV, ULConst.PRIORITY_NONE, this.onCmdClickNativeAdv.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_RESUME, ULConst.PRIORITY_NONE, this.onCmdSdkOnGameResume.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_PAUSE, ULConst.PRIORITY_NONE, this.onCmdSdkOnGamePause.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_GET_ADV_STATE, ULConst.PRIORITY_NONE, this.onCmdGetAdvState.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_COP_CHANGED, 1, this.onCopChanged.bind(this)), this._sdkInitTime = ULTools.time(), this.isFirstPlayVideo = !0
		}
		loadRecord() {
			let t, e = ULStorageManager.getInstance().getStorage(this._getRecordKey()) || "{}";
			try {
				t = JSON.parse(e)
			} catch (e) {
				t = {}
			}
			this.advTypeDailyCountLog = t.advTypeDailyCountLog || {}, this.advTypeDailyRefreshTime = t.advTypeDailyRefreshTime || 0, this.tryDailyRefresh()
		}
		saveRecord() {
			let t, e = ULStorageManager.getInstance().getStorage(this._getRecordKey()) || "{}";
			try {
				t = JSON.parse(e)
			} catch (e) {
				t = {}
			}
			t.advTypeDailyCountLog = this.advTypeDailyCountLog || {}, t.advTypeDailyRefreshTime = this.advTypeDailyRefreshTime || 0, ULStorageManager.getInstance().setStorage(this._getRecordKey(), JSON.stringify(t))
		}
		_getRecordKey() {
			let t = ULConfig.getConfig();
			return ULTools.format("ULAdvManager_record_%d", t.s_sdk_megadata_game_id)
		}
		tryDailyRefresh() {
			ULTools.isOneDay(this.advTypeDailyRefreshTime, ULTools.time()) || (ULLog.console.log("ULAdvManager-tryDailyRefresh 进行日常刷新"), this.advTypeDailyCountLog = {}, this.advTypeDailyRefreshTime = ULTools.time(), this.saveRecord())
		}
		searchAdvGroupIdByAdvId(t) {
			let e = ULConfig.getConfig().s_sdk_adv_info,
				a = "";
			return ULTools.forEachMap(e, (e, i) => {
				if (i.group.indexOf(t) >= 0) return a = e, !0
			}), a
		}
		searchAdvTypeByAdvId(t) {
			let e = ULConfig.getConfig().s_sdk_adv_info,
				a = "";
			return ULTools.forEachMap(e, (e, i) => {
				if (i.group.indexOf(t) >= 0) return a = i.type, !0
			}), a
		}
		onCopChanged(t) {
			try {
				this.initAdv()
			} catch (t) {
				ULLog.console.error("ULAdvManager.onCopChanged err:", t)
			}
		}
		onCmdSdkOnGameResume(t) {
			ULLog.console.log("ULAdvManager-onCmdSdkOnGameResume"), this.getAdvObjectOpeningByAdvType(typeExp.banner) && (this.bannerStartShowTime = ULTools.time())
		}
		onCmdSdkOnGamePause(t) {
			let e, a = this.getAdvObjectOpeningByAdvType(typeExp.banner);
			a && (a instanceof ULAdvNativeObjectBase && (e = a.nativeData), this.reportBannerShowTime(a.advKey, a.showData, e))
		}
		onCmdSdkCollectionModuleCheckerConfig(t) {
			let e = t.getReturnValue() || [],
				a = ["interstitial", "banner", "embedded", "video", "url", "paster"];
			e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "广告cd限制:"
			}), e.push({
				type: "newLine"
			});
			for (let t = 0; t < a.length; t++) {
				const i = a[t];
				let s = "未配置CD",
					n = "未触发",
					o = this.getAdvTypeCd(i);
				o > 0 && (s = ULTools.format("CD%d秒", o / 1e3));
				let r = this.advTypeLastTriggerTimeLog[i] || 0;
				r > 0 && (n = ULTools.formatDate(new Date(1e3 * r), "触发时间：HH:mm:ss")), e.push({
					type: "label",
					text: ULTools.format("%s: %s %s", i, s, n)
				}), e.push({
					type: "newLine"
				})
			}
			e.push({
				type: "label",
				text: "广告次数限制:"
			}), e.push({
				type: "newLine"
			});
			for (let t = 0; t < a.length; t++) {
				const i = a[t];
				let s = "未配置次数限制",
					n = "未触发",
					o = this.getAdvTypeDailyLimit(i);
				o > 0 && (s = ULTools.format("日限制%d次", o));
				let r = this.advTypeDailyCountLog[i] || 0;
				r > 0 && (n = ULTools.format("今日已触发%d次", r)), e.push({
					type: "label",
					text: ULTools.format("%s: %s %s", i, s, n)
				}), e.push({
					type: "newLine"
				})
			}
			t.setReturnValue(e, !0)
		}
		initAdv() {
			let t = ULConfig.getConfig();
			this.ADV_RELOAD_TIME = t.i_sdk_adv_reload_time || this.ADV_RELOAD_DEFAULT_TIME;
			let e = t.o_sdk_adv_show_list;
			if (!e || "string" != typeof e) return void console.warn("ULAdvManager-initAdv:adv show list error");
			let a = JSON.parse(e),
				i = a.templates;
			if (!i || "object" != typeof i) return void console.warn("ULAdvManager-initAdv:templates error");
			let s = a.advSlots;
			if (!s || "object" != typeof s) return void console.warn("ULAdvManager-initAdv:advSlots error");
			let n = this.advKey_2_advObject;
			this.advKey_2_advObject = {}, this.advId_2_advSlot = {}, this.templateId_2_advTemplate = {}, this.templateId_2_advTemplateItemArray = {}, this.advKey_2_templateIdArray = {}, this.templateId_2_moduleName = {}, this.mainName_2_advObjectArray = {}, this.templateId_2_advObjectArray = {}, this.advType_2_advObjectArray = {}, this.moduleName_2_templateIdsArray = {}, this.logKey_2_countNum = {}, this.advKey_2_advIdArray = {}, this.tid_2_advKeyArray = {}, this.advId_2_tidArray = {}, this.nativeType_2_advObjectArray = {}, this.advKey_2_rcd = {}, this.updateAdvExpKey(i);
			let o = new Array;
			for (const t in i) {
				let e = t,
					a = i[e];
				if ("object" != typeof a) {
					console.warn(`ULAdvManager-initAdv:模板【 ${e} 】格式配置非法`);
					continue
				}
				let s = a.moduleName;
				if (!s || "string" != typeof s) {
					console.warn(`ULAdvManager-initAdv:模板【 ${e} 】缺少必配字段moduleName`);
					continue
				}
				let n = a.rewardType;
				if (!n || "string" != typeof s) {
					console.warn(`ULAdvManager-initAdv:模板【 ${e} 】缺少必配字段rewardType`);
					continue
				}
				let r = a.args;
				if (!(r && r instanceof Array)) {
					console.warn(`ULAdvManager-initAdv:模板【 ${e} 】缺少必配字段args，或格式非法`);
					continue
				}
				if (0 == r.length) {
					console.warn(`ULAdvManager-initAdv:模板【 ${e} 】必配字段args长度不能为0`);
					continue
				}
				let l = a.exp || "",
					c = a.argWeights || [],
					h = a.loadTypes || [],
					d = a.rcd;
				"number" != typeof d && (d = 0, console.warn(`ULAdvManager-initAdv:模板【 ${e} 】字段rcd未配置或格式错误，写入默认值0`));
				let _ = this.moduleName_2_templateIdsArray[s];
				_ ? -1 == _.indexOf(e) && _.push(e) : ((_ = []).push(e), this.moduleName_2_templateIdsArray[s] = _), this.templateId_2_moduleName[e] || (this.templateId_2_moduleName[e] = s), -1 == o.indexOf(e) && o.push(e);
				let g = [],
					u = [];
				for (let t = 0, a = r.length; t < a; t++) {
					let a = r[t];
					"string" != typeof a && (console.warn(`ULAdvManager-initAdv:模板【 ${e} 】字段args中的参数${a}，为非字符串类型`), a = a.toString());
					let i = 0;
					i = 0 == c.length ? ULConst.ADV_RANDOM_DEFAULT_WEIGHT : c[t], g.push(i);
					let o = void 0;
					try {
						(o = h[t]) && "number" != typeof o && (o = Number(o))
					} catch (t) {}
					u.push(o);
					let _ = {
							templateId: e,
							moduleName: s,
							rewardType: n,
							arg: a,
							argWeight: i,
							exp: l,
							loadType: o
						},
						m = this.templateId_2_advTemplateItemArray[e];
					if (m) {
						let t = !1;
						for (const i of m) {
							i.templateId + "_" + i.arg == e + "_" + a && (t = !0)
						}
						t || m.push(_)
					} else(m = []).push(_), this.templateId_2_advTemplateItemArray[e] = m;
					let p = ULTools.format("%s%s%s", s, "_", a),
						S = this.advKey_2_templateIdArray[p];
					S ? -1 == S.indexOf(e) && S.push(e) : ((S = []).push(e), this.advKey_2_templateIdArray[p] = S);
					let b = this.tid_2_advKeyArray[e];
					b ? -1 == b.indexOf(p) && b.push(p) : ((b = []).push(p), this.tid_2_advKeyArray[e] = b);
					let L, I = this.advKey_2_rcd[p];
					L = null != I ? Math.min(d, I) : d, this.advKey_2_rcd[p] = L
				}
				let m = {
					templateId: e,
					moduleName: s,
					rewardType: n,
					exp: l,
					args: r,
					argWeights: g,
					rcd: d,
					loadTypes: u
				};
				this.templateId_2_advTemplate[e] || (this.templateId_2_advTemplate[e] = m)
			}
			let r = [];
			for (const t in s) {
				let e = t,
					a = s[e];
				if ("object" != typeof a) {
					console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】格式配置非法`);
					continue
				}
				let i = a.schemes;
				if (!i) {
					console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】缺少必配字段schemes,或该字段格式非法`);
					continue
				}
				let n = a.subAids || [],
					o = a.rcd;
				"number" != typeof o && (o = 0, console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】字段rcd未配置或格式错误，写入默认值0`));
				let l = [];
				for (let t = 0, a = i.length; t < a; t++) {
					const a = i[t];
					let s = a.tids;
					if (!s) {
						console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】第【 ${t+1} 】条策略缺少必配字段tids,或该字段格式非法`);
						continue
					}
					if (0 == s.length) {
						console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】第【 ${t+1} 】条策略必配字段tids长度不能为0`);
						continue
					}
					let o = a.tidWeights || [],
						c = [];
					for (let a = 0, i = s.length; a < i; a++) {
						let i = s[a],
							l = 0;
						if (0 == o.length) console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】第【 ${t+1} 】条策略第【 ${a+1} 】个模板权重未配置，写入默认值${ULConst.ADV_MUST_DEFAULT_WEIGHT}`), l = ULConst.ADV_MUST_DEFAULT_WEIGHT;
						else {
							let i = o[a];
							"number" != typeof i ? (console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】第【 ${t+1} 】条策略第【 ${a+1} 】个模板权重格式异常，写入默认值${ULConst.ADV_MUST_DEFAULT_WEIGHT}`), l = ULConst.ADV_MUST_DEFAULT_WEIGHT) : l = i
						}
						c.push(l), -1 == r.indexOf(i) && r.push(i);
						let h = this.advId_2_tidArray[e];
						if (h ? -1 == h.indexOf(i) && h.push(i) : ((h = []).push(i), this.advId_2_tidArray[e] = h), n.length > 0)
							for (const t of n) {
								let e = this.advId_2_tidArray[t];
								e ? -1 == e.indexOf(i) && e.push(i) : ((e = []).push(i), this.advId_2_tidArray[t] = e)
							}
					}
					let h = a.exp || "",
						d = a.weight;
					"number" != typeof d && (d = ULConst.ADV_RANDOM_DEFAULT_WEIGHT, console.warn(`ULAdvManager-initAdv:广告位【 ${e} 】第【 ${t+1} 】条策略字段weight格式异常，写入默认值${ULConst.ADV_RANDOM_DEFAULT_WEIGHT}`));
					let _ = {
						tids: s,
						tidWeights: c,
						exp: h,
						weight: d
					};
					l.push(_)
				}
				let c = new ULAdvSlot(e, l, n, o);
				if (this.advId_2_advSlot[e] || (this.advId_2_advSlot[e] = c), n.length > 0)
					for (const t of n) {
						let a = ULTools.clone(n),
							i = a.indexOf(t);
						i > -1 && a.splice(i, 1), a.push(e);
						let s = new ULAdvSlot(t, l, a, o);
						this.advId_2_advSlot[t] || (this.advId_2_advSlot[t] = s)
					}
			}
			ULTools.forEachMap(this.advId_2_tidArray, (t, e) => {
				for (const a of e) {
					let e = this.tid_2_advKeyArray[a];
					if (e)
						for (const a of e) {
							let e = this.advKey_2_advIdArray[a];
							e ? -1 == e.indexOf(t) && e.push(t) : ((e = []).push(t), this.advKey_2_advIdArray[a] = e)
						}
				}
			});
			let l = [];
			for (const t in this.templateId_2_advTemplateItemArray) {
				let e = this.templateId_2_advTemplateItemArray[t];
				if (-1 == r.indexOf(t)) {
					console.warn("ULAdvManager-initAdv:tid [" + t + "] no advId use");
					continue
				}
				let a, i = this.templateId_2_moduleName[t];
				if (ULTools.forEachMap(ULSdkModuleLoader.getSubAdModuleClassName(), (t, e) => {
						if (e.indexOf(i) >= 0) return a = t, !0
					}), a)
					for (let s = 0, o = e.length; s < o; s++) {
						let o = e[s],
							r = o.moduleName + "_" + o.arg;
						if (n[r]) {
							let t = n[r];
							this.advKey_2_advObject[r] = t, delete n[r]
						}
						if (this.advKey_2_advObject[r]) {
							console.warn("ULAdvManger-initAdv: class " + i + " already init,continue");
							let e = this.advKey_2_advObject[r],
								a = this.templateId_2_advObjectArray[t];
							a ? -1 == a.indexOf(e) && a.push(e) : ((a = []).push(e), this.templateId_2_advObjectArray[t] = a);
							continue
						}
						let c = ULSdkModuleLoader.getObjectByModuleName(a).createSubAdObj(i, o.arg);
						c.setLoadType = o.loadType;
						let h = c.getMainClassNameString(); - 1 == l.indexOf(c) && l.push(c);
						let d = this.mainName_2_advObjectArray[h];
						d ? -1 == d.indexOf(c) && d.push(c) : ((d = []).push(c), this.mainName_2_advObjectArray[h] = d);
						let _ = this.templateId_2_advObjectArray[t];
						if (_ ? -1 == _.indexOf(c) && _.push(c) : ((_ = []).push(c), this.templateId_2_advObjectArray[t] = _), c instanceof ULAdvNativeObjectBase) {
							let t = c.advType,
								e = this.nativeType_2_advObjectArray[t];
							null == e ? ((e = []).push(c), this.nativeType_2_advObjectArray[t] = e) : -1 == e.indexOf(c) && e.push(c)
						}
					} else console.warn("ULAdvManager-initAdv: class " + i + " not found ,continue")
			}
			ULTools.forEachMap(this.advKey_2_advObject, (t, e) => {
				let a = e,
					i = this.advType_2_advObjectArray[a.advType];
				i ? -1 == i.indexOf(a) && i.push(a) : ((i = []).push(a), this.advType_2_advObjectArray[a.advType] = i)
			});
			for (const t in n) {
				n[t].onDisposeModule()
			}
			ULTools.forEachMap(this.advId_2_advSlot, (t, e) => {
				e.refreshValidAdvKeys()
			});
			let c = {};
			for (let t = 0, e = l.length; t < e; t++) {
				let e = l[t],
					a = e.getMainClassNameString();
				ULTools.forEachMap(ULSdkModuleLoader.getSubAdMainClassName(), (t, i) => {
					let s = i;
					if (a == s)
						if (this.adMainName_2_obj[s]) {
							let t = this.adMainName_2_obj[s];
							e.receiveMainClassInitState(t.initState)
						} else if (!c[s]) {
						let e = ULSdkModuleLoader.getObjectByModuleName(t).createMainAdObj();
						c[s] = e
					}
				})
			}
			for (const t in c) this.adMainName_2_obj[t] = c[t];
			ULLog.console.log("ULAdvManager-initAdv-advExpKeyArray:", this.advExpKeyArray), ULLog.console.log("ULAdvManager-initAdv-templateArray:", o), ULLog.console.log("ULAdvManager-initAdv-advId_2_advSlot:", this.advId_2_advSlot), ULLog.console.log("ULAdvManager-initAdv-templateId_2_advTemplate:", this.templateId_2_advTemplate), ULLog.console.log("ULAdvManager-initAdv-templateId_2_advTemplateItemArray:", this.templateId_2_advTemplateItemArray), ULLog.console.log("ULAdvManager-initAdv-advKey_2_templateIdArray:", this.advKey_2_templateIdArray), ULLog.console.log("ULAdvManager-initAdv-templateId_2_moduleName:", this.templateId_2_moduleName), ULLog.console.log("ULAdvManager-initAdv-mainName_2_advObjectArray:", this.mainName_2_advObjectArray), ULLog.console.log("ULAdvManager-initAdv-templateId_2_advObjectArray:", this.templateId_2_advObjectArray), ULLog.console.log("ULAdvManager-initAdv-advType_2_advObjectArray:", this.advType_2_advObjectArray), ULLog.console.log("ULAdvManager-initAdv-moduleName_2_templateIdsArray:", this.moduleName_2_templateIdsArray), ULLog.console.log("ULAdvManager-initAdv-logKey_2_countNum:", this.logKey_2_countNum), ULLog.console.log("ULAdvManager-initAdv-advKey_2_advIdArray:", this.advKey_2_advIdArray), ULLog.console.log("ULAdvManager-initAdv-tid_2_advKeyArray:", this.tid_2_advKeyArray), ULLog.console.log("ULAdvManager-initAdv-advId_2_tidArray:", this.advId_2_tidArray), ULLog.console.log("ULAdvManager-initAdv-nativeType_2_advObjectArray:", this.nativeType_2_advObjectArray), ULLog.console.log("ULAdvManager-initAdv-advKey_2_advObject:", this.advKey_2_advObject), ULLog.console.log("ULAdvManager-initAdv-advKey_2_rcd:", this.advKey_2_rcd)
		}
		getAdvReloadTime() {
			return this.ADV_RELOAD_TIME
		}
		getAdvExpKeyArray() {
			return this.advExpKeyArray
		}
		getLogKeyCountNum() {
			return this.logKey_2_countNum
		}
		initAdvExpKey() {
			let t = new Array;
			for (const e in typeExp) {
				for (const a in countExp) {
					let i = ULTools.format("%s%s%s%s", ULConst.EXP_ADV_TYPE_CONST, e, ULConst.EXP_ADV_POINT_CONST, a); - 1 == t.indexOf(i) && t.push(i)
				}
				for (const a in cdExp) {
					let i = ULTools.format("%s%s%s%s", ULConst.EXP_ADV_TYPE_CONST, e, ULConst.EXP_ADV_POINT_CONST, a); - 1 == t.indexOf(i) && t.push(i)
				}
			}
			for (let e = 0; e < t.length; e++) {
				let a = t[e];
				for (const t in dataExp) {
					let e;
					e = t == dataExp.nil ? a : t + a, -1 == this.systemAdvExpKeyArray.indexOf(e) && this.systemAdvExpKeyArray.push(e)
				}
			}
		}
		updateAdvExpKey(t) {
			this.advExpKeyArray = this.systemAdvExpKeyArray.slice(0);
			let e = new Array;
			for (const a in t) {
				for (const t in countExp) {
					let i = ULTools.format("%s%s%s%s", ULConst.EXP_ADV_TEMPLATE_CONST, a, ULConst.EXP_ADV_POINT_CONST, t); - 1 == e.indexOf(i) && e.push(i)
				}
				for (const t in cdExp) {
					let i = ULTools.format("%s%s%s%s", ULConst.EXP_ADV_TEMPLATE_CONST, a, ULConst.EXP_ADV_POINT_CONST, t); - 1 == e.indexOf(i) && e.push(i)
				}
			}
			for (let t = 0; t < e.length; t++) {
				let a = e[t];
				for (const t in dataExp) {
					let e;
					e = t == dataExp.nil ? a : t + a, -1 == this.advExpKeyArray.indexOf(e) && this.advExpKeyArray.push(e)
				}
			}
			ULAdvExpManager.updateExpKeys(this.advExpKeyArray)
		}
		updateAdvKeyObjMap(t, e) {
			this.advKey_2_advObject[t] = e
		}
		updateAdvIds(t, e) {
			let a = this.type_2_advIds[t];
			a ? -1 == a.indexOf(e) && a.push(e) : ((a = []).push(e), this.type_2_advIds[t] = a)
		}
		deleteAdvIdOpening(t, e) {
			let a = this.type_2_advIds[t];
			a && (a = a.filter(t => t !== e), this.type_2_advIds[t] = a)
		}
		getAdvObjectsByName(t) {
			return this.mainName_2_advObjectArray[t]
		}
		onAdvObjectPreloadStateChanged(t) {
			ULTools.forEachMap(this.advId_2_advSlot, (e, a) => {
				a.onAdvObjectPreloadStateChanged(t)
			})
		}
		onAdvSlotPreloadStateChanged(t) {
			let e = this.advId_2_advSlot[t];
			if (!e) return;
			e.preLoadState
		}
		getTemplateObjByTid(t) {
			return this.templateId_2_advTemplate[t]
		}
		getAdvObjsByTid(t) {
			return this.templateId_2_advObjectArray[t]
		}
		getAdvTypeByTemplateId(t) {
			let e = null,
				a = this.templateId_2_advObjectArray[t];
			return a && a.length > 0 && (e = a[0].advType), e
		}
		isAdvTypeOpened(t) {
			let e = this.advType_2_advObjectArray[t];
			if (e && e.length > 0)
				for (let t = 0; t < e.length; t++) {
					if (e[t].isOpened) return !0
				}
			return !1
		}
		getAdvObjectByAdvKey(t) {
			return this.advKey_2_advObject[t]
		}
		getRcdByAdvKey(t) {
			return this.advKey_2_rcd[t]
		}
		getAdvKeysByTemplateId(t) {
			return this.tid_2_advKeyArray[t]
		}
		getAdvSlotByAdvId(t) {
			return this.advId_2_advSlot[t]
		}
		getAdvObjPreloadStateByAdvKey(t) {
			let e = this.advKey_2_advObject[t];
			return e ? e.preLoadState : ULConst.ADV_PRELOAD_STATE_NOAD
		}
		getRewardTypeByTemplateId(t) {
			let e = this.templateId_2_advTemplate[t];
			return e ? e.rewardType : rewardType.show
		}
		getAdvTypeDailyLimit(t) {
			let e = ULConfig.getConfig(),
				a = 0;
			switch (t) {
				case "interstitial":
					a = e.i_sdk_adv_type_interstitial_daily_limit;
					break;
				case "banner":
					a = e.i_sdk_adv_type_banner_daily_limit;
					break;
				case "embedded":
					a = e.i_sdk_adv_type_embedded_daily_limit;
					break;
				case "video":
					a = e.i_sdk_adv_type_video_daily_limit;
					break;
				case "url":
					a = e.i_sdk_adv_type_url_daily_limit;
					break;
				case "paster":
					a = e.i_sdk_adv_type_paster_daily_limit
			}
			return null == a ? 0 : isNaN(a) ? 0 : a
		}
		getAdvTypeCd(t) {
			let e = ULConfig.getConfig(),
				a = 0;
			switch (t) {
				case typeExp.inter:
					a = e.i_sdk_adv_type_interstitial_cd;
					break;
				case typeExp.banner:
					a = e.i_sdk_adv_type_banner_cd;
					break;
				case typeExp.embed:
					a = e.i_sdk_adv_type_embedded_cd;
					break;
				case typeExp.video:
					a = e.i_sdk_adv_type_video_cd;
					break;
				case typeExp.url:
					a = e.i_sdk_adv_type_url_cd;
					break;
				case typeExp.paster:
					a = e.i_sdk_adv_type_paster_cd
			}
			return null == a ? 0 : isNaN(a) ? 0 : a
		}
		getLaunchCdByType(t) {
			let e = ULConfig.getConfig(),
				a = 0;
			switch (t) {
				case typeExp.inter:
					a = e.i_sdk_adv_inter_launch_cd;
					break;
				case typeExp.banner:
					a = e.i_sdk_adv_banner_launch_cd;
					break;
				case typeExp.embed:
					a = e.i_sdk_adv_embed_launch_cd;
					break;
				case typeExp.video:
					a = e.i_sdk_adv_video_launch_cd;
					break;
				case typeExp.url:
					a = e.i_sdk_adv_url_launch_cd;
					break;
				case typeExp.paster:
					a = e.i_sdk_adv_paster_launch_cd
			}
			return null == a ? 0 : isNaN(a) ? 0 : a
		}
		get sdkInitTime() {
			return this._sdkInitTime
		}
		getAdvTypeLastTriggerTimeLog() {
			return this.advTypeLastTriggerTimeLog
		}
		getAdvTypeDailyCountLog() {
			return this.advTypeDailyCountLog
		}
		getAdvObjectOpeningByAdvType(t) {
			for (let e in this.advType_2_advObjectArray) {
				if (t !== e) continue;
				let a = this.advType_2_advObjectArray[e];
				for (let t of a)
					if (t.isOpened) return t
			}
			return null
		}
		getNewAdvTypeByOld(t) {
			let e = "";
			return t ? (e = t, oldTypeExp.embedded == t ? e = typeExp.embed : oldTypeExp.interstitial == t ? e = typeExp.inter : oldTypeExp.fullscreen == t && (e = typeExp.interVideo), e) : e
		}
		geOldAdvTypeByNew(t) {
			let e = "";
			return t ? (e = t, typeExp.embed == t ? e = oldTypeExp.embedded : typeExp.inter == t ? e = oldTypeExp.interstitial : typeExp.interVideo == t && (e = oldTypeExp.fullscreen), e) : e
		}
		onCmdGetAdvState(t) {
			t.stopImmediatePropagation();
			let e = t.data,
				a = e.userData || "",
				i = e.advIds || [],
				s = {};
			for (const t of i) {
				let e = this.advId_2_advSlot[t];
				e ? s[t] = e.preLoadState : s[t] = ULConst.ADV_PRELOAD_STATE_NOAD
			}
			this.getAdvStateResult(s, a)
		}
		onCmdOpenAdv(t) {
			t.stopImmediatePropagation();
			let e = t.data,
				a = ULConfig.getConfig();
			this.advRequestSerialNum++;
			let i = e.advId || "",
				s = e.userData || "",
				n = e.tag || "",
				o = this.searchAdvTypeByAdvId(i),
				r = this.searchAdvGroupIdByAdvId(i),
				l = new ULAdvItem(i, s, n);
			l.advType = o, l.advGroupId = r, ULSdkManager.getInstance().statisManager.reportAdvTotalRequest(l);
			let c = a.i_sdk_adv_all_launch_cd;
			if (ULTools.time() - this.sdkInitTime < c / 1e3) return ULLog.console.log("ULAdvManager-onCmdOpenAdv:广告处于启动请求cd中"), void this.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, {
				code: "",
				msg: "in all adv launch cd"
			});
			let h = this.advId_2_advSlot[i];
			if (!h) return console.warn("ULAdvManager-onCmdOpenAdv:广告位[" + i + "]对应的advSlot不存在"), void this.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, {
				code: "",
				msg: `广告位${i}对应的advSlot不存在`
			});
			if (h.openingInfo) return console.warn("ULAdvManager-onCmdOpenAdv:广告位[" + i + "]已有广告请求中或正在展示"), void this.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, {
				code: "",
				msg: `广告位${i}已有广告请求中或正在展示`
			});
			let d = h.rcd;
			ULLog.console.log("ULAdvManager-onCmdOpenAdv-rcd:", d);
			let _ = this.advId_2_lastRequestTime[i],
				g = (new Date).valueOf();
			if (_) {
				if (g - _ < d) return console.warn("ULAdvManager-onCmdOpenAdv:广告位[" + i + "]in cd"), void this.responseOpenAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, {
					code: "",
					msg: `广告位[${i}]in cd`
				});
				this.advId_2_lastRequestTime[i] = g
			} else this.advId_2_lastRequestTime[i] = g;
			h.openAdv(this.advRequestSerialNum, e)
		}
		onCmdCloseAdv(t) {
			t.stopImmediatePropagation();
			let e = t.data,
				a = e.advId,
				i = this.advId_2_advSlot[a];
			if (!i) return void this.responseCloseAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, "advSlot未找到!");
			if (!i.openingInfo) return void this.responseCloseAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, "advSlot没有广告执行!");
			let s = this.getAdvObjectByAdvKey(i.openingInfo.advTemplateItemName);
			s ? s instanceof ULAdvNativeObjectBase ? (i.closeAdv(e), this.responseCloseAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, "close adv success")) : i.closeAdv(e) : this.responseCloseAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, "no ad open!")
		}
		onCmdCloseAllAdvByType(t) {
			t.stopImmediatePropagation();
			let e = t.data,
				a = e.type || "",
				i = this.type_2_advIds[a];
			if (null != i && 0 != i.length) {
				for (let t of i) {
					let a = this.advId_2_advSlot[t];
					if (null == a || null == a.openingInfo) continue;
					let i = this.getAdvObjectByAdvKey(a.openingInfo.advTemplateItemName);
					null != i && (e.advId = t, i instanceof ULAdvNativeObjectBase ? i.closeNativeAdv(e) : a.closeAdv(e))
				}
				this.responseCloseAllAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, "关闭成功")
			} else this.responseCloseAllAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, "no ad show")
		}
		onCmdCloseNativeAdv(t) {
			t.stopImmediatePropagation();
			let e = t.data,
				a = e.advId;
			this.advId_2_advSlot[a] ? (ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CLOSE_NATIVE_ADV, e), this.responseCloseNativeAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, "关闭成功")) : this.responseCloseNativeAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, "no advSlot")
		}
		onCmdClickNativeAdv(t) {
			t.stopImmediatePropagation();
			let e = t.data,
				a = e.advId;
			ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", "109", a || "", ""]), this.advId_2_advSlot[a] ? (ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CLICK_NATIVE_ADV, e), ULSdkManager.getInstance().advManager.responseClickNativeAdvResult(e, ULConst.ADV_RESULT_CODE_SUCCESS, "点击成功")) : this.responseClickNativeAdvResult(e, ULConst.ADV_RESULT_CODE_FAILED, "no advSlot")
		}
		responseOpenAdvResult(t, e, a) {
			let i = {};
			i.code = e, i.msg = ULAdvTrimErrorManager.trimErrMessage(a.msg, a.code ? a : null), i.advId = t.advId || "", i.userData = t.userData || "", i.tag = t.tag || "", 1 == e && (i.type = t.type || "", i.rewardType = t.rewardType || "", this.advTypeLastTriggerTimeLog[t.type] = ULTools.time(), this.advTypeDailyCountLog[t.type] = (this.advTypeDailyCountLog[t.type] || 0) + 1, this.saveRecord()), ULSdkManager.getInstance().response(ULConst.CMD_OPEN_ADV_RESULT, i)
		}
		responseRewardAdvResult(t, e, a) {
			ULSdkManager.getInstance().response(ULConst.CMD_REWARD_ADV_RESULT, {
				code: e,
				msg: a,
				advId: t.advId || "",
				userData: t.userData || "",
				tag: t.tag || ""
			})
		}
		responseClickAdvResult(t, e, a) {
			ULSdkManager.getInstance().response(ULConst.CMD_CLICK_ADV_RESULT, {
				code: e,
				msg: a,
				advId: t.advId || "",
				userData: t.userData || "",
				tag: t.tag || ""
			})
		}
		responseOpenNativeAdvResult(t, e, a, i, s) {
			let n = {};
			n.code = a, n.msg = i, n.advId = t.advId || "", n.userData = t.userData || "", n.tag = t.tag || "", n.nativeType = e || "", n.nativeData = s || {}, 1 == a && (n.type = t.type || "", n.rewardType = t.rewardType || ""), ULSdkManager.getInstance().response(ULConst.CMD_OPEN_NATIVE_ADV_RESULT, n)
		}
		responseClickNativeAdvResult(t, e, a) {
			ULSdkManager.getInstance().response(ULConst.CMD_CLICK_NATIVE_ADV_RESULT, {
				code: e,
				msg: a,
				nativeType: t.nativeType || "",
				advId: t.advId || "",
				userData: t.userData || "",
				tag: t.tag || ""
			})
		}
		responseCloseNativeAdvResult(t, e, a) {
			ULSdkManager.getInstance().response(ULConst.CMD_CLOSE_NATIVE_ADV_RESULT, {
				code: e,
				msg: a,
				nativeType: t.nativeType || "",
				advId: t.advId || "",
				userData: t.userData || "",
				tag: t.tag || ""
			})
		}
		responseCloseAdvResult(t, e, a) {
			ULSdkManager.getInstance().response(ULConst.CMD_CLOSE_ADV_RESULT, {
				code: e,
				msg: a,
				advId: t.advId || "",
				userData: t.userData || "",
				tag: t.tag || ""
			})
		}
		responseCloseAllAdvResult(t, e, a) {
			ULSdkManager.getInstance().response(ULConst.CMD_CLOSE_ALL_ADV_BY_TYPE_RESULT, {
				code: e,
				msg: a,
				type: t.type || "",
				userData: t.userData || ""
			})
		}
		pauseSound() {
			ULSdkManager.getInstance().response(ULConst.CMD_PAUSE_SOUND_RESULT, {})
		}
		resumeSound() {
			ULSdkManager.getInstance().response(ULConst.CMD_RESUME_SOUND_RESULT, {})
		}
		getAdvStateResult(t, e) {
			ULSdkManager.getInstance().response(ULConst.CMD_GET_ADV_STATE_RESULT, {
				states: t,
				userData: e
			})
		}
		onAdvObjectLifeCycleShowRequest(t, e) {
			this.addAdvCountLog(t, countExp.rc);
			let a = e.advId || "",
				i = this.getAdvObjectByAdvKey(t);
			if (i) {
				let t = i.advType,
					s = i.arg,
					n = i.statisticsAdvertiser,
					o = i.statisticsType;
				o && "" != o && (t = o);
				let r = e.userData || "",
					l = e.tag || "",
					c = this.searchAdvGroupIdByAdvId(a),
					h = new ULAdvItem(a, r, l);
				h.showAdvType = t, h.advGroupId = c, ULSdkManager.getInstance().statisManager.reportAdvBranchRequest(h, n, s)
			}
		}
		onAdvObjectLifeCycleSkip(t, e, a) {
			let i = a.advId || "",
				s = this.advId_2_advSlot[i];
			if (!s) return;
			s.onAdvObjectLifeCycleSkip(a, e), this.addAdvCountLog(t, countExp.fc);
			let n = this.getAdvObjectByAdvKey(t);
			if (n) {
				let t = n.advType,
					s = n.arg,
					o = n.statisticsAdvertiser,
					r = n.statisticsType;
				r && "" != r && (t = r);
				let l = a.userData || "",
					c = a.tag || "",
					h = this.searchAdvGroupIdByAdvId(i),
					d = new ULAdvItem(i, l, c);
				d.showAdvType = t, d.advGroupId = h, d.statisChannelName = o, d.statisSdkAdvId = s, ULSdkManager.getInstance().statisManager.reportAdvFail(d, "errCode=" + e.code + ";errMsg=" + e.msg)
			}
		}
		onAdvObjectLifeCycleShow(t, e, a, i) {
			let s = a.advId || "",
				n = this.advId_2_advSlot[s];
			if (!n) return;
			n.onAdvObjectLifeCycleShow(e, a), this.addAdvCountLog(t, countExp.sc), this.reportVideoPlayCompletion(t, a, i);
			let o = this.getAdvObjectByAdvKey(t);
			if (o) {
				let t = o.advType,
					e = o.arg,
					n = o.statisticsAdvertiser,
					r = o.statisticsType;
				r && "" != r && (t = r), typeExp.banner == t && (this.bannerStartShowTime = ULTools.time());
				let l = i ? i.title : "",
					c = a.userData || "",
					h = a.tag || "",
					d = this.searchAdvGroupIdByAdvId(s),
					_ = new ULAdvItem(s, c, h);
				_.showAdvType = t, _.advGroupId = d, _.statisChannelName = n, _.statisNativeAdTitle = l, _.statisSdkAdvId = e, ULSdkManager.getInstance().statisManager.reportAdvSuccess(_, l)
			}
		}
		onAdvObjectLifeCycleClick(t, e, a, i) {
			let s = a.advId || "",
				n = this.advId_2_advSlot[s];
			if (!n) return;
			n.onAdvObjectLifeCycleClick(e, a), this.addAdvCountLog(t, countExp.cc);
			let o = this.getAdvObjectByAdvKey(t);
			if (o) {
				let t = o.advType,
					e = o.arg,
					n = o.statisticsAdvertiser,
					r = o.statisticsType;
				r && "" != r && (t = r);
				let l = i ? i.title : "",
					c = a.userData || "",
					h = a.tag || "",
					d = this.searchAdvGroupIdByAdvId(s),
					_ = new ULAdvItem(s, c, h);
				_.showAdvType = t, _.advGroupId = d, _.statisChannelName = n, _.statisNativeAdTitle = l, _.statisSdkAdvId = e, ULSdkManager.getInstance().statisManager.reportAdvClicked(_)
			}
		}
		onAdvObjectLifeCycleClose(t, e, a) {
			let i = e.advId || "",
				s = this.advId_2_advSlot[i];
			s && (this.reportBannerShowTime(t, e, a), this.reportVideoPlayStart(t, e, a), s.onAdvObjectLifeCycleClose())
		}
		onAdvTimeout(t, e) {}
		reportBannerShowTime(t, e, a) {
			let i = this.getAdvObjectByAdvKey(t);
			if (null != i) {
				let t = i.advType,
					s = i.arg,
					n = i.statisticsAdvertiser,
					o = i.statisticsType;
				if (null != o && "" != o && (t = o), typeExp.banner == t) {
					let i = Math.floor(ULTools.time() - this.bannerStartShowTime);
					if (i <= 0) return;
					let o = String(i),
						r = e.advId || "",
						l = e.userData || "",
						c = e.tag || "",
						h = this.searchAdvGroupIdByAdvId(r),
						d = new ULAdvItem(r, l, c);
					d.showAdvType = t, d.advGroupId = h, d.statisChannelName = n, d.statisNativeAdTitle = a ? a.title : "", d.statisSdkAdvId = s, ULSdkManager.getInstance().statisManager.reportAdvClose(d, o)
				}
			}
		}
		reportVideoPlayStart(t, e, a) {
			let i = e.advId || "";
			if (!this.advId_2_advSlot[i]) return;
			let s = this.getAdvObjectByAdvKey(t);
			if (null != s) {
				let t = s.advType,
					n = s.arg,
					o = s.statisticsAdvertiser,
					r = s.statisticsType;
				if (null != r && "" != r && (t = r), typeExp.video == t) {
					let s = a ? a.title : "",
						r = e.userData || "",
						l = e.tag || "",
						c = this.searchAdvGroupIdByAdvId(i),
						h = new ULAdvItem(i, r, l);
					h.showAdvType = t, h.advGroupId = c, h.statisChannelName = o, h.statisNativeAdTitle = s, h.statisSdkAdvId = n, ULSdkManager.getInstance().statisManager.reportAdvPlayStart(h)
				}
			}
		}
		reportVideoPlayCompletion(t, e, a) {
			let i = e.advId || "";
			if (!this.advId_2_advSlot[i]) return;
			let s = this.getAdvObjectByAdvKey(t);
			if (null != s) {
				let t = s.advType,
					n = s.arg,
					o = s.statisticsAdvertiser,
					r = s.statisticsType;
				if (null != r && "" != r && (t = r), typeExp.video == t) {
					let s = a ? a.title : "",
						r = e.userData || "",
						l = e.tag || "",
						c = this.searchAdvGroupIdByAdvId(i),
						h = new ULAdvItem(i, r, l);
					h.showAdvType = t, h.advGroupId = c, h.statisChannelName = o, h.statisNativeAdTitle = s, h.statisSdkAdvId = n, ULSdkManager.getInstance().statisManager.reportAdvPlayCompletion(h)
				}
			}
		}
		onAdvObjectLifeCycleRequest(t) {
			let e = this.getAdvObjectByAdvKey(t);
			if (null != e && !e.isReportLoading) {
				e.isReportLoading = !0;
				let t = e.advType,
					a = e.arg,
					i = e.statisticsAdvertiser,
					s = e.statisticsType;
				null != s && "" != s && (t = s);
				let n = new ULAdvItem("", "", "");
				n.showAdvType = t, n.advGroupId = "", n.statisChannelName = i, n.statisNativeAdTitle = "", n.statisSdkAdvId = a, ULSdkManager.getInstance().statisManager.reportAdvLoadAdvRequest(n)
			}
		}
		onAdvObjectLifeCycleRequestSuccess(t) {
			let e = this.getAdvObjectByAdvKey(t);
			if (null != e && e.isReportLoading) {
				e.isReportLoading = !1;
				let t = e.advType,
					a = e.arg,
					i = e.statisticsAdvertiser,
					s = e.statisticsType;
				null != s && "" != s && (t = s);
				let n = new ULAdvItem("", "", "");
				n.showAdvType = t, n.advGroupId = "", n.statisChannelName = i, n.statisNativeAdTitle = "", n.statisSdkAdvId = a, ULSdkManager.getInstance().statisManager.reportAdvLoadAdvSuccess(n)
			}
		}
		onAdvObjectLifeCycleRequestFailed(t, e) {
			let a = this.getAdvObjectByAdvKey(t);
			if (null != a && a.isReportLoading) {
				a.isReportLoading = !1;
				let t = a.advType,
					i = a.arg,
					s = a.statisticsAdvertiser,
					n = a.statisticsType;
				null != n && "" != n && (t = n);
				let o = new ULAdvItem("", "", "");
				o.showAdvType = t, o.advGroupId = "", o.statisChannelName = s, o.statisSdkAdvId = i, ULSdkManager.getInstance().statisManager.reportAdvLoadAdvFailed(o, "errCode=" + e.code + ";errMsg=" + e.msg)
			}
		}
		onAdvObjectLifeCycleFail(t, e, a) {
			let i = a.advId || "",
				s = this.advId_2_advSlot[i];
			if (!s) return;
			s.onAdvObjectLifeCycleFail(e, a), this.addAdvCountLog(t, countExp.fc);
			let n = this.getAdvObjectByAdvKey(t);
			if (n) {
				let t = n.advType,
					s = n.arg,
					o = n.statisticsAdvertiser,
					r = n.statisticsType;
				r && "" != r && (t = r);
				let l = a.userData || "",
					c = a.tag || "",
					h = this.searchAdvGroupIdByAdvId(i),
					d = new ULAdvItem(i, l, c);
				d.showAdvType = t, d.advGroupId = h, d.statisChannelName = o, d.statisSdkAdvId = s, ULSdkManager.getInstance().statisManager.reportAdvFail(d, "errCode=" + e.code + ";errMsg=" + e.msg)
			}
		}
		onAdvObjectLifeCycleReuse(t, e, a) {
			let i = a.advId || "";
			if (!this.advId_2_advSlot[i]) return;
			ULSdkManager.getInstance().advManager.responseOpenAdvResult(a, ULConst.ADV_RESULT_CODE_FAILED, e), this.addAdvCountLog(t, countExp.fc);
			let s = this.getAdvObjectByAdvKey(t);
			if (s) {
				let t = s.advType,
					n = s.arg,
					o = s.statisticsAdvertiser,
					r = s.statisticsType;
				r && "" != r && (t = r);
				let l = a.userData || "",
					c = a.tag || "",
					h = this.searchAdvGroupIdByAdvId(i),
					d = new ULAdvItem(i, l, c);
				d.showAdvType = t, d.advGroupId = h, d.statisChannelName = o, d.statisSdkAdvId = n, ULSdkManager.getInstance().statisManager.reportAdvFail(d, "errCode=" + e.code + ";errMsg=" + e.msg)
			}
		}
		addAdvFailCount(t) {
			this.addAdvCountLog(t, countExp.fc)
		}
		addAdvCountLog(t, e) {
			let a = this.advKey_2_templateIdArray[t];
			if (a && a.length > 0)
				for (const i of a) {
					let a = ULConst.EXP_ADV_TEMPLATE_CONST + i + ULConst.EXP_ADV_POINT_CONST + e;
					this.updateAdvCountStoreNum(a), this.advSlotRefreshValidAdvKeys(t)
				}
			let i = this.advKey_2_advObject[t];
			if (i) {
				let a = i.advType,
					s = ULConst.EXP_ADV_TYPE_CONST + a + ULConst.EXP_ADV_POINT_CONST + e;
				this.updateAdvCountStoreNum(s), this.advSlotRefreshValidAdvKeys(t)
			}
		}
		updateAdvCountStoreNum(t) {
			ULAdvExpManager.updateExpValue(dataExp.d + t), ULAdvExpManager.updateExpValue(dataExp.w + t), ULAdvExpManager.updateExpValue(dataExp.m + t), ULAdvExpManager.updateExpValue(dataExp.y + t)
		}
		advSlotRefreshValidAdvKeys(t) {
			let e = this.advKey_2_advIdArray[t];
			if (e)
				for (const t of e) {
					let e = this.advId_2_advSlot[t];
					e && e.refreshValidAdvKeys()
				}
		}
	}
	ULAdvManager.instance = null;
	class ULAdvFaceBook$1 extends ULAdvBase {
		constructor() {
			super(), this.className = "ULAdvFaceBook"
		}
		onInitModule() {
			this.initState = !0, this.notifyInitState(this.initState)
		}
		notifyInitState(t) {
			let e = ULSdkManager.getInstance().advManager.getAdvObjectsByName("ULAdvFaceBook");
			if (e)
				for (const a of e) a.receiveMainClassInitState(t)
		}
		initAdv() {}
	}
	ULAdvFaceBook$1.NORMAL_ADVERTISER = "ULAdvFaceBook";
	class ULAdvFaceBookInter extends ULAdvObjectBase {
		constructor(t) {
			super(t, typeExp.inter, ULTools.format("%s%s%s", "ULAdvFaceBookInter", "_", t)), this.className = "ULAdvFaceBookInter", this.interAdPreloadArray = [], this.interAdArray = [], this.statisticsAdvertiser = ULAdvFaceBook$1.NORMAL_ADVERTISER, this.statisticsType = oldTypeExp.interstitial, this.setSupportLoadType = [ULConst.ADV_LOAD_TYPE_UNPRELOAD], this.setLoadType = ULConst.ADV_LOAD_TYPE_UNPRELOAD
		}
		initAdv() {
			let t = this.getLoadType;
			null != t && -1 != this.getSupportLoadType.indexOf(t) || (ULLog.console.log(`ULAdvFaceBookInter-initAdv-当前加载类型${t}模块不支持`), t = ULConst.ADV_LOAD_TYPE_UNPRELOAD), this.mLoadType = t, this.startTime = ULTools.time(), this.preLoadState = ULConst.ADV_PRELOAD_STATE_READY, setTimeout(() => {
				this.preLoadInterAd()
			}, 1e4)
		}
		preLoadInterAd() {
			this.interAdArray.length + this.interAdPreloadArray.length < 3 && this.getInterAd(), setTimeout(() => {
				this.preLoadInterAd()
			}, 3e4)
		}
		getInterAd() {
			ULConfig.getConfig();
			0 != (this.arg || "").replace(/(^\s*)|(\s*$)/g, "").length ? window.FBInstant && window.FBInstant.getInterstitialAdAsync(this.arg).then(t => {
				ULLog.console.log("ULAdvFaceBookInter.getInterAd....实例加载成功 "), this.interAdPreloadArray.push(t), this.interADLoadData(t, 0)
			}).catch(t => {
				console.error("ULAdvFaceBookInter.getInterAd....加载失败: " + t.message)
			}) : ULLog.console.log("ULAdvFaceBookInter arg 为空")
		}
		interADLoadData(t, e) {
			t.loadAsync().then(() => {
				ULLog.console.log("ULAdvFaceBookInter.interADLoadData.videoAd.loadAsync.then 加载成功 "), this.interAdArray.push(t);
				let e = this.interAdPreloadArray.indexOf(t);
				e >= 0 && this.interAdPreloadArray.splice(e, 1)
			}).catch(a => {
				if (console.error("ULAdvFaceBookInter.interADLoadData....加载失败: " + a.message), e > 3) {
					let e = this.interAdPreloadArray.indexOf(t);
					e >= 0 && this.interAdPreloadArray.splice(e, 1)
				} else setTimeout(() => {
					this.interADLoadData(t, e + 1)
				}, 2e4)
			})
		}
		loadAdv() {}
		showAdv(t) {
			ULLog.console.log("ULAdvFaceBookInter showAdv");
			let e = ULConfig.getConfig();
			if (this.preLoadState == ULConst.ADV_PRELOAD_STATE_LOADING) return console.warn("ULAdvFaceBookInter-showAdv:广告未加载就绪,直接跳过当前广告展示"), void this.advSkip(t, {
				code: "",
				msg: "adv is loading"
			});
			if (this.preLoadState == ULConst.ADV_PRELOAD_STATE_NOAD) return console.warn("ULAdvFaceBookInter-showAdv:广告未加载就绪,直接跳过当前广告展示"), void this.advSkip(t, this.onLoadFailErr);
			let a = ULTools.time(),
				i = e.i_sdk_adv_inter_launch_cd || 0,
				s = Math.max(30, i / 1e3);
			if (a - this.startTime < s) return ULLog.console.log("ULAdvFaceBook.showInterAdv:未达到请求启动cd限制，无法展示广告"), void this.advSkip(t, {
				code: "",
				msg: "请启动cd限制中"
			});
			let n = e.i_sdk_adv_inter_cd || 0,
				o = Math.max(30, n / 1e3);
			if (a - this.lastShowInterTime < o) return ULLog.console.log("ULAdvFaceBook.showInterAdv:未达到展示cd限制，无法展示广告"), void this.advSkip(t, {
				code: "",
				msg: "请求cd限制中"
			});
			var r = this.interAdArray.shift();
			if (!r) return ULLog.console.log("ULAdvFaceBookInter-showAdv：未预加载好"), void this.advSkip(t, {
				code: "",
				msg: "未加载好"
			});
			this.showData = t, this.isOpened = !0, r.showAsync().then(() => {
				ULLog.console.log("ULAdvFaceBookInter.showAsync then"), this.isOpened = !1, this.getInterAd(), this.lastShowInterTime = ULTools.time(), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleShow(this.advKey, ULConst.ADV_RESULT_MSG_SUCCESS, this.showData), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleClose(this.advKey, this.showData)
			}).catch(t => {
				console.error("ULAdvFaceBookInter.showAsync catch: ", t.message), this.getInterAd(), this.isOpened = !1, this.advSkip(this.showData, {
					code: String(t.code),
					msg: t.message
				})
			})
		}
		closeAdv(t) {
			ULLog.console.log("ULAdvFaceBookInter closeAdv:")
		}
		getMainClassName() {
			return "ULAdvFaceBook"
		}
		receiveInitState(t) {
			t ? (this.initState = t, this.initAdv()) : console.warn("ULAdvFaceBookInter-receiveInitState:初始化失败")
		}
	}
	class ULAdvFaceBookVideo extends ULAdvObjectBase {
		constructor(t) {
			super(t, typeExp.video, ULTools.format("%s%s%s", "ULAdvFaceBookVideo", "_", t)), this.className = "ULAdvFaceBookVideo", this.videoAdPreloadArray = [], this.videoAdArray = [], this.statisticsAdvertiser = ULAdvFaceBook$1.NORMAL_ADVERTISER, this.setSupportLoadType = [ULConst.ADV_LOAD_TYPE_UNPRELOAD], this.setLoadType = ULConst.ADV_LOAD_TYPE_UNPRELOAD
		}
		initAdv() {
			let t = this.getLoadType;
			null != t && -1 != this.getSupportLoadType.indexOf(t) || (ULLog.console.log(`ULAdvFaceBookVideo-initAdv-当前加载类型${t}模块不支持`), t = ULConst.ADV_LOAD_TYPE_UNPRELOAD), this.mLoadType = t, this.preLoadState = ULConst.ADV_PRELOAD_STATE_READY, setTimeout(() => {
				this.preLoadVideoAd()
			}, 1e4)
		}
		preLoadVideoAd() {
			this.videoAdArray.length + this.videoAdPreloadArray.length < 3 && this.getVideoAd(), setTimeout(() => {
				this.preLoadVideoAd()
			}, 3e4)
		}
		getVideoAd() {
			0 != this.arg.replace(/(^\s*)|(\s*$)/g, "").length ? window.FBInstant && window.FBInstant.getRewardedVideoAsync(this.arg).then(t => {
				ULLog.console.log("ULAdvFaceBookVideo.getVideoAd....实例加载成功: "), this.videoAdPreloadArray.push(t), this.videoADLoadData(t, 0)
			}).catch(t => {
				console.error("ULAdvFaceBookVideo.getVideoAd....加载失败: ", t, t.message)
			}) : ULLog.console.log("ULAdvFaceBookVideo arg 为空")
		}
		videoADLoadData(t, e) {
			t.loadAsync().then(() => {
				ULLog.console.log("ULAdvFaceBookVideo.videoADLoadData.videoAd.loadAsync.then 加载成功 "), this.videoAdArray.push(t);
				let e = this.videoAdPreloadArray.indexOf(t);
				e >= 0 && this.videoAdPreloadArray.splice(e, 1)
			}).catch(a => {
				if (console.error("ULAdvFaceBookVideo.videoADLoadData....加载失败: " + a.message), e > 3) {
					let e = this.videoAdPreloadArray.indexOf(t);
					e >= 0 && this.videoAdPreloadArray.splice(e, 1)
				} else setTimeout(() => {
					this.videoADLoadData(t, e + 1)
				}, 2e4)
			})
		}
		loadAdv() {}
		showAdv(t) {
			if (ULLog.console.log("ULAdvFaceBookVideo showAdv"), this.preLoadState == ULConst.ADV_PRELOAD_STATE_LOADING) return console.warn("ULAdvFaceBookVideo-showAdv:广告未加载就绪,直接跳过当前广告展示"), void this.advSkip(t, {
				code: "",
				msg: "adv is loading"
			});
			if (this.preLoadState == ULConst.ADV_PRELOAD_STATE_NOAD) return console.warn("ULAdvFaceBookVideo-showAdv:广告未加载就绪,直接跳过当前广告展示"), void this.advSkip(t, this.onLoadFailErr);
			var e = this.videoAdArray.shift();
			if (!e) return ULLog.console.log("ULAdvFaceBookVideo-showAdv：未预加载好"), void this.advSkip(t, {
				code: "",
				msg: "未加载好"
			});
			this.showData = t, this.isOpened = !0;
			let a = ULConfig.getConfig();
			e.showAsync().then(() => {
				ULLog.console.log("ULAdvFaceBookVideo.showVideoAdv....show.then"), this.isOpened = !1, this.getVideoAd(), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [a.s_sdk_miniplay_user_open_video_event_id, "1"]), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [a.s_sdk_miniplay_video_success_show_event_id]), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleShow(this.advKey, ULConst.ADV_RESULT_MSG_SUCCESS, this.showData), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleClose(this.advKey, this.showData)
			}).catch(t => {
				console.error("ULAdvFaceBookVideo.showVideoAdv....show.catch: ", t.message), this.getVideoAd(), this.isOpened = !1, this.advSkip(this.showData, {
					code: String(t.code),
					msg: t.message
				}), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [a.s_sdk_miniplay_user_open_video_event_id, "2"])
			})
		}
		closeAdv(t) {
			ULLog.console.log("ULAdvFaceBookVideo closeAdv:")
		}
		getMainClassName() {
			return "ULAdvFaceBook"
		}
		receiveInitState(t) {
			t ? (this.initState = t, this.initAdv()) : console.warn("ULAdvFaceBookVideo-receiveInitState:初始化失败")
		}
	}
	class ULAdvFacebookBanner extends ULAdvObjectBase {
		constructor(t) {
			super(t, typeExp.banner, "ULAdvFacebookBanner_" + t), this.className = "ULAdvFacebookBanner", this.channelBannerStyle = {}, this.statisticsAdvertiser = ULAdvFaceBook.NORMAL_ADVERTISER, this.channelBannerStyle = ULConfig.getConfig().t_sdk_adv_banner_tags_style_setting || {}
		}
		onDisposeModule() {
			super.onDisposeModule(), ULLog.console.log("ULAdvFacebookBanner-onDisposeModule arg:", this.arg)
		}
		initAdv() {
			ULLog.console.log("ULAdvFacebookBanner-initAdv"), this.preLoadState = ULConst.ADV_PRELOAD_STATE_READY
		}
		loadAdv() {}
		showAdv(t) {
			ULLog.console.log("ULAdvFacebookBanner-showAdv");
			let e = window.FBInstant;
			if (e && null != e && e.loadBannerAdAsync) {
				if (this.preLoadState != ULConst.ADV_PRELOAD_STATE_READY) return ULLog.console.log("ULAdvFacebookBanner-showAdv:广告未加载就绪，直接跳过"), void this.advSkip(t, {
					code: "",
					msg: "adv not ready"
				});
				this.showData = t, this.isOpened = !0, ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleRequest(this.advKey), e.loadBannerAdAsync(this.arg).then(() => {
					ULLog.console.error("ULAdvFaceBook.loadBannerAdAsync then"), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleRequestSuccess(this.advKey), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleShow(this.advKey, ULConst.ADV_RESULT_MSG_SUCCESS, this.showData), this.isOpened || e.hideBannerAdAsync()
				}).catch(t => {
					ULLog.console.error("ULAdvFaceBook.loadBannerAdAsync cath err: ", t), this.advSkip(this.showData, {
						code: String(t.code),
						msg: t.message
					})
				})
			} else this.advSkip(t, {
				code: "",
				msg: "FBInstant not loadBannerAdAsync"
			})
		}
		closeAdv(t) {
			ULLog.console.log("ULAdvFacebookBanner.closeAdv "), this.isOpened = !1;
			let e = window.FBInstant;
			(e && null != e || e.hideBannerAdAsync) && e.hideBannerAdAsync(), ULSdkManager.getInstance().advManager.onAdvObjectLifeCycleClose(this.advKey, this.showData), ULSdkManager.getInstance().advManager.responseCloseAdvResult(t, ULConst.ADV_RESULT_CODE_SUCCESS, ULConst.ADV_RESULT_MSG_CLOSE)
		}
		getMainClassName() {
			return "ULAdvFacebook"
		}
		receiveInitState(t) {
			t ? (this.initState = t, this.initAdv()) : console.warn("ULAdvDemoInter-receiveInitState:初始化失败")
		}
	}
	class ULModuleFaceBook extends ULChannelModuleWebmobileBase {
		constructor() {
			super(...arguments), this.reportCacheArray = []
		}
		getSubAdModuleClassName() {
			return ["ULAdvFaceBookInter", "ULAdvFaceBookVideo", "ULAdvFacebookBanner"]
		}
		getAdMainClassName() {
			return "ULAdvFaceBook"
		}
		createSubAdObj(t, e) {
			let a, i;
			switch (t) {
				case "ULAdvFaceBookInter":
					a = new ULAdvFaceBookInter(e);
					break;
				case "ULAdvFaceBookVideo":
					a = new ULAdvFaceBookVideo(e);
					break;
				case "ULAdvFacebookBanner":
					a = new ULAdvFacebookBanner(e)
			}
			return a && (i = ULTools.format("%s%s%s", t, "_", e), ULSdkManager.getInstance().advManager.updateAdvKeyObjMap(i, a)), a
		}
		createMainAdObj() {
			return new ULAdvFaceBook
		}
		init() {
			super.init(), ULLog.console.log("ULModuleFaceBook.init()"), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SET_VERSION, 1, this.onCmdSetVersion.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_REPORT_ULSDK_EVENT, 1, this.reportEvent.bind(this)), this.initSdk()
		}
		initSdk() {
			let t = ULConfig.getConfig(),
				e = ULSdkManager.getInstance().channelInfo;
			e.channelName = "facebook", e.uuid = this.sdkUserId, e.isSupportRecordShare = !1, e.isShareEnabled = !!t.i_sdk_share_mode, e.copChannelId = t.s_sdk_cop_channel_id, e.isPayEnabled = !!t.i_sdk_pay_mode, e.isUseSdkRank = !!t.i_sdk_sdk_rank_mode, e.appName = "facebook", e.payInfo = {};
			let a = this;
			ULLog.console.log("ULModuleFaceBook.initSdk 加载facebook广告SDK的js成功！");
			let i = window.FBInstant;
			FBInstant.initializeAsync().then(() => {
				FBInstant.setLoadingProgress(100), FBInstant.startGameAsync(), FBInstant.getSupportedAPIs(), a.initGoogleAnalytics()
			})
		}
		initGoogleAnalytics() {
			let t = window.FBInstant,
				e = this;
			this.googleReport("event", "fb_inited"), t.getEntryPointAsync().then(function(t) {
				ULLog.console.info("ULModuleGoogleAnalytics.initSdk：Entry Point: ", t), e.googleReport("event", "fb_entrypoint", {
					entrypoint: t
				})
			});
			const a = t.context.getType();
			ULLog.console.info("ULModuleGoogleAnalytics.initSdk：contextType: ", a), this.googleReport("event", "fb_context", {
				type: a
			}), this.googleReport("event", "fb_started"), this.cleanUpReportCache()
		}
		googleReport(t, ...e) {
			let a = window.gtag;
			a ? a(arguments) : this.reportCacheArray.push(arguments)
		}
		cleanUpReportCache() {
			for (; this.reportCacheArray.length;) {
				let t = this.reportCacheArray.shift();
				(window.dataLayer || []).push(t)
			}
		}
		onCmdSetVersion(t) {
			ULLog.console.log("ULModuleGoogleAnalytics.onCmdSetVersion........."), this.googleReport("event", "enter_first_scene")
		}
		reportEvent(t) {
			let e = ULConfig.getConfig(),
				a = t.data.parameter,
				i = a.typeid,
				s = a.updata;
			ULLog.console.log("ULModuleGoogleAnalytics type:", i), ULLog.console.log("ULModuleGoogleAnalytics updata:", s);
			let n = e.s_sdk_megadata_server_type_id;
			switch (i = i.replace(n + "-", "")) {
				case ULConst.STATIS_TYPE_LEVEL_START_EVENT: {
					let t = s[3] || "",
						e = s[4] || "";
					this.googleReport("event", "level_start", {
						levelName: t,
						reason: e
					});
					break
				}
				case ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT: {
					let t = s[3] || "",
						e = s[4] || "",
						a = s[5] || "",
						i = s[11] || "";
					this.googleReport("event", "level_complete", {
						levelName: t,
						state: e,
						reason: a,
						time: i
					});
					break
				}
				case ULConst.STATIS_TYPE_COIN_CHANGE_EVENT: {
					let t = s[3] || "",
						e = s[4] || "",
						a = s[5] || "",
						i = s[6] || "";
					this.googleReport("event", "coin_change", {
						coinType: t,
						changeType: e,
						num: a,
						reason: i
					});
					break
				}
				case ULConst.STATIS_TYPE_ITEM_BUY: {
					let t = s[4] || "",
						e = s[5] || "",
						a = s[3] || "";
					this.googleReport("event", "goods_buy", {
						goods: t,
						state: e,
						reason: a
					});
					break
				}
				case ULConst.STATIS_TYPE_PAY_INFO: {
					let t = s[4] || "",
						e = s[5] || "",
						a = s[6] || "";
					this.googleReport("event", "pay_info", {
						payType: t,
						price: e,
						result: a
					});
					break
				}
				case ULConst.STATIS_TYPE_ONLINE_TIME: {
					let t = s[4] || "";
					this.googleReport("event", "online_time", {
						time: t
					});
					break
				}
				case ULConst.STATIS_TYPE_VIDEO_POINT_EVENT: {
					let t = s[3] || "",
						e = s[4] || "";
					this.googleReport("event", "video_point_event", {
						advName: t,
						state: e
					});
					break
				}
				case ULConst.STATIS_TYPE_COMMON_EVENT: {
					let t = s[3] || "",
						e = s[4] || "",
						a = s[5] || "",
						i = s[9] || "";
					this.googleReport("event", "user_common_event", {
						eventId: t,
						parm1: e,
						parm2: a,
						parm3: i
					});
					break
				}
				case ULConst.STATIS_TYPE_ADV_INFO: {
					let t = s[4] || "",
						e = s[5] || "",
						a = s[6] || "",
						i = s[7] || "";
					this.googleReport("event", "adv_event", {
						advType: t,
						state: e,
						reason: a,
						cop: i
					});
					break
				}
			}
		}
	}
	class ULSdkModuleLoader {
		static getObjectByModuleName(t) {
			return ULSdkModuleLoader.moduleName_2_object[t]
		}
		static getSubAdModuleClassName() {
			return ULSdkModuleLoader.moduleName_2_subAdvModuleClassName
		}
		static getSubAdMainClassName() {
			return ULSdkModuleLoader.moduleName_2_subAdvMainClassName
		}
		static initAllModules() {
			let t = [];
			t.push(new ULModuleCdk), t.push(new ULModuleMegadata), t.push(new ULModuleUserData), t.push(new ULModuleClipboard), t.push(new ULModuleFaceBook);
			for (let e = 0, a = t.length; e < a; e++) {
				const a = t[e];
				let i = a.className;
				ULSdkModuleLoader.moduleName_2_subAdvModuleClassName[i] = a.getSubAdModuleClassName(), ULSdkModuleLoader.moduleName_2_subAdvMainClassName[i] = a.getAdMainClassName()
			}
			ULLog.console.log("ULSdkModuleLoader-moduleName_2_subAdvModuleClassName:", ULSdkModuleLoader.moduleName_2_subAdvModuleClassName), ULLog.console.log("ULSdkModuleLoader-moduleName_2_subAdvMainClassName:", ULSdkModuleLoader.moduleName_2_subAdvMainClassName);
			for (let e = 0; e < t.length; e++) {
				let a = t[e].loadSubModules();
				for (let i = 0; i < a.length; i++) {
					const s = a[i];
					t.splice(e + 1, 0, s), e++
				}
			}
			ULLog.console.log("ULSdkModuleLoader--modules:", t);
			for (let e = 0; e < t.length; e++) {
				const a = t[e];
				ULSdkModuleLoader.moduleName_2_object[a.className] = a;
				try {
					a.init()
				} catch (t) {
					ULLog.console.error(t)
				}
			}
			return t
		}
	}
	ULSdkModuleLoader.moduleName_2_object = {}, ULSdkModuleLoader.moduleName_2_subAdvModuleClassName = {}, ULSdkModuleLoader.moduleName_2_subAdvMainClassName = {};
	class ULChannelInfo {
		constructor() {
			this.preparationFlags = {}, this.copInfo = "{}", this.payInfo = {}, this.jumpInfo = [], this.isSupportRecordShare = !1, this.channelName = "default", this.isPayEnabled = !1, this.isShareEnabled = !1, this.isUseSdkRank = !1, this.isShowUrlAdIcon = !1, this.appName = "", this.equipmentModel = "", this.platformVersionMessage = "", this.osVersionMessage = "", this.cardType = 0, this.isThirdExit = !1, this.isAbout = !1, this.isMoreGame = !1, this.isULMoreGame = !1, this.isSupportClipboardData = !1, this.isSupportInstallShortcut = !1, this.isSupportFindMinigames = !1, this.findMinigamesImageUrl = "", this.isSupportRecommendationBtn = !1, this.isSupportJumpList = !1, this.is4399Watermark = !1, this.uuid = "", this.sdcardPath = "", this.packageVersion = "", this.copChannelId = "", this.ulsdkVersion = "", this.cdkChannelId = "", this.channelUserId = "", this.referenceBannerHeight = ULConst.DEFAULT_REFERANCE_BANNER_HEIGHT, this.isNewUser = !0, this.loginDays = 0, this._sdkUserId = "", this.isSupportPasterAdv = !1, this.gameLanguage = "", this.isSupportChannelMoreGameBox = !1, this.isSupportChannelBlockAd = !1, this.isSupportSubscribe = !1, this.isSupportColorSign = !1, this.isSupportGridAd = !1, this.isSupportVideoRank = !1, this.isSupportFavoriteGuide = !1, this.isSupportFollowOfficialAccount = !1, this.appIdOrPkgName = "", this.isSupportContentSecurityCheck = !1, this.isJumpLeisureEnabled = !1, this.isSupportVibrate = !0, this.isSupportOpenUrl = !1, this.isSupportJumpInfoVideoType = !1, ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, ULConst.PRIORITY_NONE, this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
		}
		toBaseChannelInfoData() {
			let t = ULConfig.getConfig();
			ULLog.console.log("config", t);
			let e = null == t.s_sdk_licence_info ? "" : t.s_sdk_licence_info;
			e = e.replace(/\/n/g, "\\n");
			let a = !!t.i_sdk_age_level_info_mode,
				i = t.s_sdk_age_level_info || "",
				s = {
					gameName: t.s_game_name,
					gameLanguage: this.gameLanguage,
					channelName: this.channelName,
					appName: this.appName,
					isShowLicenceInfo: 1 == t.i_sdk_licence_info_mode,
					licenceInfo: e,
					isShowAgeLevelInfo: a,
					isStartGameByTouch: 1 == t.i_sdk_start_game_by_touch
				};
			return i && (s.ageLevelInfo = i), s
		}
		toResponseData() {
			let t = [];
			for (let e = 0; e < this.jumpInfo.length; e++) {
				const a = this.jumpInfo[e];
				a.index && a.url ? t.push({
					index: a.index,
					url: a.url,
					rewards: a.rewards || [],
					bReceived: a.bReceived || !1,
					appName: a.appName || ""
				}) : ULLog.console.warn("ULChannelInfo.toResponseData jump data error!", a)
			}
			let e = ULConfig.getConfig();
			return null != e.i_sdk_adv_reference_banner_height && (this.referenceBannerHeight = e.i_sdk_adv_reference_banner_height), this.isJumpLeisureEnabled = this.isJumpLeisureEnabled && !!e.i_sdk_moreWonderful_mode, this.isSupportInstallShortcut = this.isSupportInstallShortcut && !!e.i_sdk_installShortcut_mode, this.isSupportRecommendationBtn = this.isSupportRecommendationBtn && !!e.i_sdk_moregame_mode, this.isSupportJumpList = this.isSupportJumpList && !!e.i_sdk_jumplist_mode, this.isSupportVibrate = this.isSupportVibrate && !!e.i_sdk_phone_vibrate, this.isSupportOpenUrl = this.isSupportOpenUrl && !!e.i_sdk_support_open_url, this.isSupportRecordShare = this.isSupportRecordShare && !!e.i_sdk_support_record_share, {
				copInfo: this.copInfo,
				cardType: this.cardType,
				isThirdExit: this.isThirdExit,
				isAbout: this.isAbout,
				payInfo: this.payInfo,
				isMoreGame: this.isMoreGame,
				isULMoreGame: this.isULMoreGame,
				uuid: this.uuid,
				sdcardPath: this.sdcardPath,
				packageVersion: this.packageVersion,
				copChannelId: this.copChannelId,
				ulsdkVersion: this.ulsdkVersion,
				isShowUrlAdIcon: this.isShowUrlAdIcon,
				cdkChannelId: this.cdkChannelId,
				isPayEnabled: this.isPayEnabled,
				isShareEnabled: this.isShareEnabled,
				isUseSdkRank: this.isUseSdkRank,
				isSupportRecordShare: this.isSupportRecordShare,
				isSupportInstallShortcut: this.isSupportInstallShortcut,
				isSupportClipboardData: this.isSupportClipboardData,
				isSupportFindMinigames: this.isSupportFindMinigames,
				findMinigamesImageUrl: this.findMinigamesImageUrl,
				isSupportRecommendationBtn: this.isSupportRecommendationBtn,
				isSupportJumpList: this.isSupportJumpList,
				is4399Watermark: this.is4399Watermark,
				appName: this.appName.toLocaleLowerCase(),
				jumpInfo: t,
				channelUserId: this.channelUserId,
				referenceBannerHeight: this.referenceBannerHeight,
				isNewUser: this.isNewUser,
				loginDays: this.loginDays,
				isSupportPasterAdv: this.isSupportPasterAdv,
				gameLanguage: this.gameLanguage,
				isSupportChannelMoreGameBox: this.isSupportChannelMoreGameBox,
				isSupportChannelBlockAd: this.isSupportChannelBlockAd,
				isSupportSubscribe: this.isSupportSubscribe,
				isSupportGridAd: this.isSupportGridAd,
				isSupportVideoRank: this.isSupportVideoRank,
				isSupportFavoriteGuide: this.isSupportFavoriteGuide,
				isSupportFollowOfficialAccount: this.isSupportFollowOfficialAccount,
				customerServiceInfo: e.t_customer_service_info,
				appIdOrPkgName: this.appIdOrPkgName,
				isSupportContentSecurityCheck: this.isSupportContentSecurityCheck,
				isJumpLeisureEnabled: this.isJumpLeisureEnabled,
				isSupportVibrate: this.isSupportVibrate,
				isSupportOpenUrl: this.isSupportOpenUrl,
				isSupportJumpInfoVideoType: this.isSupportJumpInfoVideoType
			}
		}
		isReady() {
			return ULTools.getObjSize(this.preparationFlags) <= 0
		}
		getPreparationFlags() {
			let t = [];
			return ULTools.forEachMap(this.preparationFlags, (e, a) => {
				t.push(e)
			}), t
		}
		addPreparationFlag(t) {
			this.preparationFlags[t] = !0
		}
		removePreparationFlag(t) {
			delete this.preparationFlags[t]
		}
		onCmdSdkCollectionModuleCheckerConfig(t) {
			let e = t.getReturnValue() || [];
			e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "渠道信息:"
			}), e.push({
				type: "newLine"
			});
			let a = "",
				i = this.toResponseData(),
				s = Object.keys(i);
			s.sort();
			for (let t = 0; t < s.length; t++) {
				const e = s[t];
				let n = i[e];
				a += ULTools.format("[%s] = [%s]\n", e, JSON.stringify(n))
			}
			e.push({
				type: "labelArea",
				text: a
			}), e.push({
				type: "newLine"
			}), t.setReturnValue(e, !0)
		}
	}
	class MCConsts {}
	MCConsts.COP_CITY_ID_2_NAME = {
		"": "关闭城市模拟"
	};
	class ULCopManager {
		constructor() {
			this.localCop = {}, this.serverCop = {}, this.cop = {}, this.simulateCityId = "", this.simulateTemplateId = ""
		}
		init() {
			this.loadRecord();
			let t = ULConfig.getConfig();
			this.localCop = t.t_sdk_cop_default_cop, this.localCop = ULTools.jsonValToStr(this.localCop), ULLog.console.log(`ULCopManager-init-localCop:${JSON.stringify(this.localCop)}`), this.processCop(), this.requestServerCop(!1), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, 10, this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
		}
		loadRecord() {
			let t, e = ULStorageManager.getInstance().getStorage(this._getRecordKey()) || "{}";
			try {
				t = JSON.parse(e)
			} catch (e) {
				t = {}
			}
			this.setSimulateCityId(t.simulateCityId || ""), this.setSimulateTemplateId(t.simulateTemplateId || "")
		}
		saveRecord() {
			let t = {
					simulateCityId: this.simulateCityId || "",
					simulateTemplateId: this.simulateTemplateId || ""
				},
				e = JSON.stringify(t);
			ULStorageManager.getInstance().setStorage(this._getRecordKey(), e)
		}
		_getRecordKey() {
			let t = ULConfig.getConfig();
			return ULTools.format("ULCopManager_record_%d", t.s_sdk_megadata_game_id)
		}
		requestServerCop(t) {
			let e = ULConfig.getConfig();
			if (!e.s_sdk_cop_game_id || "0" == e.s_sdk_cop_game_id) return void ULLog.console.log("禁用cop");
			t || ULSdkManager.getInstance().channelInfo.addPreparationFlag("cop");
			let a = e.s_sdk_cop_addr,
				i = e.s_sdk_cop_game_id,
				s = e.s_sdk_cop_channel_id,
				n = e.s_sdk_cop_version,
				o = ULSdkManager.getInstance().channelInfo._sdkUserId;
			RegExp(/^[0-9a-zA-Z_]{1,}$/).test(o) || (o = "");
			let r = e.i_net_timeout,
				l = ULTools.format("%s?gameid=%d&qudao=%d&version=%d&uid=%s", a, i, s, n, o);
			(this.simulateCityId || this.simulateTemplateId) && (ULLog.console.warn("使用debug模式cop地址"), l = l.replace("getdata/", "getdatadebug"), this.simulateCityId && (l += "&carrierid=0&zoneid=" + this.simulateCityId), this.simulateTemplateId && (l += "&templateId=" + this.simulateTemplateId)), ULLog.console.log("ULCopManager.requestServerCop:", l), ULTools.httpGet({
				url: l,
				timeoutMillisecond: r,
				success: e => {
					let a = null;
					try {
						a = JSON.parse(e), ULSdkManager.getInstance().statisManager.reportCopSuccess(e)
					} catch (t) {
						ULLog.console.error(t), ULSdkManager.getInstance().statisManager.reportCopFail(t.message)
					}
					ULLog.console.log("copJsonData", a), this.serverCop = a || {}, this.processCop(), this.triggerCopInfoResult(), t || ULSdkManager.getInstance().channelInfo.removePreparationFlag("cop")
				},
				fail: e => {
					ULLog.console.warn("ULCopManager.requestServerCop http fail!", e), t || ULSdkManager.getInstance().channelInfo.removePreparationFlag("cop"), ULSdkManager.getInstance().statisManager.reportCopFail("timeout"), ULTimer.callLater(ULConst.COP_RETRY_TIME_SEC, () => {
						ULLog.console.log(ULTools.format("ULCopManager.requestServerCop 失败后，等待%d秒重新请求cop", ULConst.COP_RETRY_TIME_SEC)), this.requestServerCop(!0)
					})
				}
			})
		}
		processCop() {
			let t = {};
			ULTools.forEachMap(this.localCop, (e, a) => {
				t[e] = a
			}), ULTools.forEachMap(this.serverCop, (e, a) => {
				if ("i_" != e.substr(0, 2) || isNaN(parseFloat(a)) || (a = parseFloat(a)), "t_" == e.substr(0, 2)) try {
					a = JSON.parse(a)
				} catch (t) {
					ULLog.console.log("processCop error --key:", e, " val:", a), a = ""
				}
				t[e] = a
			}), ULLog.console.log("processCop.copresult cop:", t), this.cop = t;
			let e = ULConfig.getConfig(),
				a = ULTools.clone(this.cop);
			a.cop_game_id = e.s_sdk_cop_game_id || "unknown", a.cop_channel_id = e.s_sdk_cop_channel_id || "unknown", a.cop_version = e.s_sdk_cop_version || "unknown", ULSdkManager.getInstance().channelInfo.copInfo = JSON.stringify(a), ULConfig.updateValueByCop(this.cop), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_COP_CHANGED, {})
		}
		get(t, e) {
			let a = this.cop[t];
			return null == a && (a = e), a
		}
		getNumberValue(t, e) {
			let a = this.get(t, e),
				i = parseFloat(a);
			return isNaN(i) ? 0 : i
		}
		getNumberValueInRange(t, e, a, i) {
			let s = this.getNumberValue(t, e);
			return s = ULTools.clampf(s, a, i)
		}
		getBooleanValue(t, e) {
			return 1 == this.get(t, e)
		}
		setSimulateCityId(t) {
			if (this.simulateCityId = t, this.saveRecord(), "" != t) {
				let e = ULTools.format("已开启COP调试模式，模拟城市：%s_%s", t, ULConfig.getConfig().t_sdk_cop_simulate_city_data[t]);
				ULSdkManager.getInstance().moduleCheckerManager.addDebugInfo("cop", e)
			} else ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("cop")
		}
		setSimulateTemplateId(t) {
			if (this.simulateTemplateId = t, this.saveRecord(), "" != t) {
				let e = ULTools.format("已开启COP调试模式，模板id：%s", t);
				ULSdkManager.getInstance().moduleCheckerManager.addDebugInfo("cop_templateId", e)
			} else ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("cop_templateId")
		}
		triggerCopInfoResult() {
			let t = ULConst.DEFAULT_REFERANCE_BANNER_HEIGHT,
				e = ULConfig.getConfig();
			null != e.i_sdk_adv_reference_banner_height && (t = e.i_sdk_adv_reference_banner_height), ULSdkManager.getInstance().response(ULConst.CMD_COP_INFO_RESULT, {
				copInfo: ULSdkManager.getInstance().channelInfo.copInfo,
				referenceBannerHeight: t
			})
		}
		onCmdSdkCollectionModuleCheckerConfig(t) {
			let e = t.getReturnValue() || [],
				a = ULTools.clone(MCConsts.COP_CITY_ID_2_NAME),
				i = ULConfig.getConfig();
			i.t_sdk_cop_simulate_city_data && (ULLog.console.log("t_sdk_cop_simulate_city_data", i.t_sdk_cop_simulate_city_data), ULTools.forEachMap(i.t_sdk_cop_simulate_city_data, (t, e) => {
				a[t] = e
			})), ULLog.console.log("cityId_2_name", a), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "Cop模块信息:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "cop调试模式 模板id："
			}), e.push({
				type: "label",
				text: this.simulateTemplateId ? ULTools.format("%s(已开启) ", this.simulateTemplateId) : "已关闭 ",
				name: "labelCopTemplate"
			}), e.push({
				type: "inputBox",
				name: "inputCopTemplate"
			}), e.push({
				type: "button",
				text: "切换开关",
				onClick: () => {
					let t = "";
					if (this.simulateTemplateId) t = "";
					else if (!(t = ULSdkManager.getInstance().moduleCheckerManager.getItemText("inputCopTemplate"))) return void ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("请先设置 模板id");
					this.setSimulateTemplateId(t), ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCopTemplate", t ? ULTools.format("%s(已开启) ", t) : "已关闭 "), ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("已开启cop调试模式，策略将在下次启动游戏时生效")
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "cop调试模式 城市id："
			}), e.push({
				type: "label",
				text: ULTools.format("%s_%s", this.simulateCityId, a[this.simulateCityId]),
				name: "labelCopCity"
			}), e.push({
				type: "button",
				text: "选择城市..",
				onClick: () => {
					let t = Object.keys(a),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						let s = parseInt(i);
						isNaN(s) || e.push(s)
					}
					e.sort((t, e) => t - e), e.unshift("");
					let i = [];
					for (let t = 0; t < Math.min(15, e.length); t++) {
						const s = e[t];
						i.push({
							text: ULTools.format("%s_%s", s, a[s]),
							value: s
						})
					}
					i.push({
						text: "加载其他城市...",
						value: "more"
					});
					let s = [];
					for (let t = 0; t < e.length; t++) {
						const i = e[t];
						s.push({
							text: ULTools.format("%s_%s", i, a[i]),
							value: i
						})
					}
					let n = t => {
						"more" != t ? (ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCopCity", ULTools.format("%s_%s", t, a[t])), this.setSimulateCityId(t), "" != t ? ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("已开启cop调试模式，策略将在下次启动游戏时生效") : ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("cop调试模式已关闭")) : ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("选择需要模拟的城市：", s, n)
					};
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("选择需要模拟的城市：", i, n)
				}
			}), e.push({
				type: "button",
				text: "重新请求cop",
				onClick: () => {
					ULSdkManager.getInstance().moduleCheckerManager.alertPrompt("温馨提示", "重新请求cop不能保证所有功能生效，仅供查看cop使用。切换cop城市模拟后，请重新启动游戏测试功能", "知道了", () => {
						ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("已重新请求cop，不能保证所有功能生效"), this.requestServerCop(!1)
					})
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "查看cop："
			}), e.push({
				type: "button",
				text: "默认cop",
				onClick: () => {
					let t = this.localCop,
						e = Object.keys(t);
					e.sort();
					let a = "默认cop：\n";
					for (let i = 0; i < e.length; i++) {
						const s = e[i];
						let n = t[s];
						a += ULTools.format("[%s] = [%s]\n", s, n)
					}
					ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCop", a)
				}
			}), e.push({
				type: "button",
				text: "远程cop",
				onClick: () => {
					let t = this.serverCop,
						e = Object.keys(t);
					e.sort();
					let a = "远程cop：\n";
					for (let i = 0; i < e.length; i++) {
						const s = e[i];
						let n = t[s];
						a += ULTools.format("[%s] = [%s]\n", s, n)
					}
					ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCop", a)
				}
			}), e.push({
				type: "button",
				text: "生效cop",
				onClick: () => {
					let t = this.cop,
						e = Object.keys(t);
					e.sort();
					let a = "生效cop：\n";
					for (let i = 0; i < e.length; i++) {
						const s = e[i];
						let n = t[s];
						a += ULTools.format("[%s] = [%s]\n", s, n)
					}
					ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelCop", a)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "labelArea",
				text: "<<这里显示cop信息>>",
				name: "labelCop"
			}), e.push({
				type: "newLine"
			}), t.setReturnValue(e, !0)
		}
	}
	class ULStatisManager {
		constructor() {
			this.bUploading = !1, this.lastTimerLoopTime = null, this.pointEventLog = {}, this.pointEventCategoryId_2_enabled = null, this.gameStartDataPreparationFlags = {}, this.commonEventLog = {}, this.levelStartLog = {}, this.levelCompletetLog = {}, this.videoPointLog = {}, this.buyActionLog = {}, this.coinChangeLog = {}
		}
		init() {
			this.channelInfoUuid = ULSdkManager.getInstance().channelInfo.uuid, this.megadataId = ULConfig.getConfig().s_sdk_megadata_server_type_id, this.loadRecord(), ULTimer.callLoop(ULConfig.getConfig().i_sdk_megadata_upload_span / 1e3, this.onTimerLoop.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_START, ULConst.PRIORITY_NONE, this.onCmdSdkOnGameStart.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_PAUSE, ULConst.PRIORITY_NONE, this.onCmdSdkOnGamePause.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_GAME_RESUME, ULConst.PRIORITY_NONE, this.onCmdSdkOnGameResume.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_ON_COP_CHANGED, ULConst.PRIORITY_NONE, this.onCmdSdkOnCopChanged.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, 9, this.onCmdSdkCollectionModuleCheckerConfig.bind(this))
		}
		loadRecord() {
			let t, e = ULStorageManager.getInstance().getStorage(this._getRecordKey()) || "{}";
			try {
				t = JSON.parse(e)
			} catch (e) {
				t = {}
			}
			this.cacheItems = t.cacheItems || [];
			let a = t.postMegadataTestMode || 0;
			this.postMegadataTestUserId = t.postMegadataTestUserId, this.setPostMegadataMode(a)
		}
		saveRecord() {
			let t = {
					cacheItems: this.cacheItems || [],
					postMegadataTestUserId: this.postMegadataTestUserId,
					postMegadataTestMode: this.postMegadataTestMode
				},
				e = JSON.stringify(t);
			ULStorageManager.getInstance().setStorage(this._getRecordKey(), e)
		}
		_getRecordKey() {
			let t = ULConfig.getConfig();
			return ULTools.format("ULStatisManager_record_%d", t.s_sdk_megadata_game_id)
		}
		onTimerLoop(t) {
			this.cacheItems.length <= 0 ? ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatisManager.onTimerLoop no cacheItems") : this.tryUploadToServer()
		}
		setPostMegadataMode(t) {
			if (this.postMegadataTestMode = t, this.saveRecord(), this.postMegadataTestMode) {
				this.channelInfoUuid = this.postMegadataTestUserId;
				let t = "数据上传已开启测试模式\n测试用户id:" + this.postMegadataTestUserId;
				ULSdkManager.getInstance().moduleCheckerManager.addDebugInfo("postMegadataTestModeInfo", t)
			} else this.channelInfoUuid = ULSdkManager.getInstance().channelInfo.uuid, ULSdkManager.getInstance().moduleCheckerManager.removeDebugInfo("postMegadataTestModeInfo")
		}
		getPostMegadataMode() {
			return this.postMegadataTestMode
		}
		_report(t, e) {
			let a = ULConfig.getConfig(),
				i = (a.s_sdk_megadata_close_table_type_ids || "").split(";");
			for (let e = 0; e < i.length; e++) {
				let a = ULTools.format("%s-%s", this.megadataId, i[e]);
				if (a == t) return void ULLog.console.log("ULStatisManager._report 大数据分表控制表数据上传closeId:", a)
			}
			ULLog.console.log("ULStatisManager._report i_sdk_megadata_mode 1 ", a.i_sdk_megadata_mode);
			try {
				let a = {
					typeid: t,
					updata: e
				};
				ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_REPORT_ULSDK_EVENT, {
					parameter: a
				})
			} catch (t) {
				ULLog.console.log("ULStatisManager.CMD_SDK_ON_REPORT_ULSDK_EVENT error:", t)
			}
			if (!a.i_sdk_megadata_mode) return void ULLog.console.log("ULStatisManager._report !i_sdk_megadata_mode 关闭统计功能");
			if (this.postMegadataTestMode) {
				let e = this.megadataId + "-";
				t = t.replace(e, "1-"), ULLog.console.log("ULStatisManager._report postMegadataTestMode 已打开 typeid:", t)
			}
			if (0 == e.length) return void ULLog.console.log("ULStatisManager._report !updata 无有效数据，无法上报:", e);
			for (let t = 0; t < e.length; t++) {
				let a = e[t];
				"string" != typeof a && (a = null == a ? "" : "" + a), e[t] = a
			}
			let s = {
				typeid: t,
				updata: e
			};
			this.cacheItems.push(s), this.cacheItems.length >= ULConst.STATIS_UPLOAD_SINGLE_REQUEST_MAX_COUNT && this.tryUploadToServer()
		}
		tryUploadToServer() {
			if (this.bUploading) return void(ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatisManager.tryUploadToServer 数据上传中"));
			let t = Math.min(this.cacheItems.length, ULConst.STATIS_UPLOAD_SINGLE_REQUEST_MAX_COUNT);
			if (t <= 0) return void(ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatisManager.tryUploadToServer 没有数据需要上传"));
			this.bUploading = !0;
			let e = this.cacheItems.slice(0, t);
			this.cacheItems.splice(0, t), this.saveRecord();
			let a = ULConfig.getConfig(),
				i = a.s_sdk_megadata_url;
			if (this.postMegadataTestMode && (i = a.s_sdk_megadata_test_url), a.i_sdk_megadata_encrypt) return void ULTools.httpPostEncryption({
				url: i,
				postString: JSON.stringify(e),
				timeoutMillisecond: a.i_net_timeout,
				success: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  加密统计上报成功!"), this.bUploading = !1
				},
				fail: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  加密统计上报错误!", t), this.cacheItems = e.concat(this.cacheItems), this.saveRecord(), this.bUploading = !1
				}
			});
			let s = "updata=" + JSON.stringify(e);
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatisManager.tryUploadToServer"), ULConst.B_INNER_DEBUG && ULLog.console.log("  url:", i), ULConst.B_INNER_DEBUG && ULLog.console.log("  postData:", s), s = s.replace(";", ","), ULTools.httpPost({
				url: i,
				postData: s,
				timeoutMillisecond: a.i_net_timeout,
				success: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  统计上报成功!"), this.bUploading = !1
				},
				fail: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  统计上报错误!", t), this.cacheItems = e.concat(this.cacheItems), this.saveRecord(), this.bUploading = !1
				}
			})
		}
		uploadToServerRightNow(t, e) {
			let a = ULConfig.getConfig(),
				i = a.s_sdk_megadata_url;
			if (!a.i_sdk_megadata_mode) return void ULLog.console.log("ULStatisManager.uploadToServerRightNow !i_sdk_megadata_mode 关闭统计功能");
			if (this.postMegadataTestMode) {
				i = a.s_sdk_megadata_test_url;
				let e = this.megadataId + "-";
				t = t.replace(e, "1-"), ULLog.console.log("ULStatisManager.uploadToServerRightNow postMegadataTestMode 已打开 typeid:", t)
			}
			let s = {
					typeid: t,
					updata: e
				},
				n = [];
			if (n.push(s), a.i_sdk_megadata_encrypt) return void ULTools.httpPostEncryption({
				url: i,
				postString: JSON.stringify(n),
				timeoutMillisecond: a.i_net_timeout,
				success: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  统计上报成功!")
				},
				fail: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  统计上报错误!", t)
				}
			});
			let o = "updata=" + JSON.stringify(n);
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatisManager.uploadToServerRightNow"), ULConst.B_INNER_DEBUG && ULLog.console.log("  url:", i), ULConst.B_INNER_DEBUG && ULLog.console.log("  postData:", o), ULTools.httpPost({
				url: i,
				postData: o,
				timeoutMillisecond: a.i_net_timeout,
				success: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  统计上报成功!")
				},
				fail: t => {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  统计上报错误!", t)
				}
			})
		}
		genPointEventLog() {
			let t = this.pointEventLog,
				e = [],
				a = [];
			ULTools.forEachMap(t, (t, e) => {
				let i = parseInt(t);
				a.push({
					eventId: i,
					v: e
				})
			}), a = ULTools.sortArrayByField(a, "eventId");
			for (let t = 0; t < a.length; t++) {
				const i = a[t];
				let s = [];
				ULTools.forEachMap(i.v, (t, e) => {
					let a = parseInt(t);
					s.push({
						paramId: a,
						count: e
					})
				}), s = ULTools.sortArrayByField(s, "paramId");
				for (let t = 0; t < s.length; t++) {
					const a = s[t];
					e.push(ULTools.format("%d-%d: %d", i.eventId, a.paramId, a.count))
				}
			}
			return e
		}
		getCommonEventLog() {
			let t = [],
				e = [],
				a = this.commonEventLog;
			ULLog.console.log("ULStatisManager.getCommonEventLog rawLog:", a), ULTools.forEachMap(a, (t, a) => {
				e.push(t)
			}), e.sort();
			for (let i = 0; i < e.length; i++) {
				let s = e[i];
				t.push(ULTools.format("%s: %d", s, a[s]))
			}
			return t
		}
		getLevelStartLog() {
			let t = [],
				e = [],
				a = this.levelStartLog;
			ULLog.console.log("ULStatisManager.getLevelStartLog rawLog:", a), ULTools.forEachMap(a, (t, a) => {
				e.push(t)
			}), e.sort();
			for (let i = 0; i < e.length; i++) {
				let s = e[i];
				t.push(ULTools.format("%s: %d", s, a[s]))
			}
			return t
		}
		getLevelCompletetLog() {
			let t = [],
				e = [],
				a = this.levelCompletetLog;
			ULLog.console.log("ULStatisManager.getLevelCompletetLog rawLog:", a), ULTools.forEachMap(a, (t, a) => {
				e.push(t)
			}), e.sort();
			for (let i = 0; i < e.length; i++) {
				let s = e[i];
				t.push(ULTools.format("%s: %d   时长：%d", s, a[s].count, a[s].playTime))
			}
			return t
		}
		getVideoPointLog() {
			let t = [],
				e = [],
				a = this.videoPointLog;
			ULLog.console.log("ULStatisManager.getVideoPointLog rawLog:", a), ULTools.forEachMap(a, (t, a) => {
				e.push(t)
			}), e.sort();
			for (let i = 0; i < e.length; i++) {
				let s = e[i];
				t.push(ULTools.format("%s: %d", s, a[s]))
			}
			return t
		}
		getBuyActionLog() {
			let t = [],
				e = [],
				a = this.buyActionLog;
			ULLog.console.log("ULStatisManager.getBuyActionLog rawLog:", a), ULTools.forEachMap(a, (t, a) => {
				e.push(t)
			}), e.sort();
			for (let i = 0; i < e.length; i++) {
				let s = e[i];
				t.push(ULTools.format("%s: %d", s, a[s]))
			}
			return t
		}
		getCoinChangeLog() {
			let t = [],
				e = [],
				a = this.coinChangeLog;
			ULLog.console.log("ULStatisManager.coinChangeLog rawLog:", a), ULTools.forEachMap(a, (t, a) => {
				e.push(t)
			}), e.sort();
			for (let i = 0; i < e.length; i++) {
				let s = e[i];
				t.push(ULTools.format("%s  次数：%d   货币数量：%d", s, a[s].count, a[s].changeCount))
			}
			return t
		}
		isReady() {
			return ULTools.getObjSize(this.gameStartDataPreparationFlags) <= 0
		}
		getPreparationFlags() {
			let t = [];
			return ULTools.forEachMap(this.gameStartDataPreparationFlags, (e, a) => {
				t.push(e)
			}), t
		}
		addPreparationFlag(t) {
			this.gameStartDataPreparationFlags[t] = !0
		}
		removePreparationFlag(t) {
			delete this.gameStartDataPreparationFlags[t]
		}
		setGameStartSourceMsg(t) {
			this.gameStartSourceMsg = t
		}
		reportGameStart() {
			let t = ULSdkManager.getInstance().channelInfo,
				e = ULConfig.getConfig(),
				a = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_BASE_INFO),
				i = [];
			i.push(this.gameStartTimeFormattedStr), i.push(this.channelInfoUuid), i.push(""), i.push(""), i.push(""), i.push(e.s_game_name), i.push(e.s_sdk_cop_game_id), i.push(t.appName), i.push(e.s_sdk_cop_channel_id), i.push(e.s_sdk_cop_version), i.push(t.osVersionMessage || ""), i.push("gameStart"), i.push(""), i.push(e.s_sdk_version), i.push(t.equipmentModel || ""), i.push(this.gameStartSourceMsg), i.push(t.platformVersionMessage || ""), this._report(a, i)
		}
		reportPayRequest() {
			this.reportPayResult("", "", "requestPay")
		}
		reportPaySuccess(t, e) {
			let a = e || 0,
				i = ULTools.format("%.2f", a / 100);
			this.reportPayResult(t, i, "success")
		}
		reportPayCancel(t, e) {
			let a = e || 0,
				i = ULTools.format("%.2f", a / 100);
			this.reportPayResult(t, i, "cancel")
		}
		reportPayFail(t, e) {
			let a = e || 0,
				i = ULTools.format("%.2f", a / 100);
			this.reportPayResult(t, i, "failed")
		}
		reportPayResult(t, e, a) {
			let i = ULSdkManager.getInstance().channelInfo,
				s = ULConfig.getConfig(),
				n = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_PAY_INFO),
				o = [];
			o.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")), o.push(this.channelInfoUuid), o.push(""), o.push(i.channelName), o.push(t || ""), o.push(e || ""), o.push(a || ""), o.push(s.s_sdk_cop_version), o.push(s.s_sdk_version), this._report(n, o)
		}
		reportAdvBranchRequest(t, e, a) {
			t.statisChannelName = e, t.statisSdkAdvId = a, this.reportAdvInfo(e, t.showAdvType, "branchAdvRequest", "", t.advGroupId, t.advId, t.tag, "", a, "")
		}
		reportAdvTotalRequest(t) {
			this.reportAdvInfo("", t.advType, "totalAdvRequest", "", t.advGroupId, t.advId, t.tag, "", "", "")
		}
		reportAdvSuccess(t, e) {
			t.statisNativeAdTitle = e, this.reportAdvInfo(t.statisChannelName, t.showAdvType, "success", "", t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvClicked(t) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "clicked", "", t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvPlayStart(t) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "playStart", "", t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvPlayCompletion(t) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "playCompletion", "", t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvLoadAdvRequest(t) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "loadAdvRequest", "", t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvLoadAdvSuccess(t) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "loadAdvSuccess", "", t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvLoadAdvFailed(t, e) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "loadAdvFailed", e, t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvFail(t, e) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "failed", e, t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, "")
		}
		reportAdvClose(t, e) {
			this.reportAdvInfo(t.statisChannelName, t.showAdvType, "hide", "", t.advGroupId, t.advId, t.tag, t.statisNativeAdTitle, t.statisSdkAdvId, e)
		}
		reportAdvInfo(t, e, a, i, s, n, o, r, l, c) {
			ULSdkManager.getInstance().channelInfo;
			let h = ULConfig.getConfig(),
				d = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_ADV_INFO),
				_ = [];
			r && r.length > 6 && (r = r.substr(0, 6)), _.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")), _.push(this.channelInfoUuid), _.push(""), _.push(t || ""), _.push(e || ""), _.push(a || ""), _.push(i || ""), _.push(h.s_sdk_cop_version), _.push(h.s_sdk_version), _.push(s || ""), _.push(n || ""), _.push(o || ""), _.push(r || ""), _.push(l || ""), _.push(c || ""), ULLog.console.log("reportAdvInfo result:", a), "hide" == a ? this.uploadToServerRightNow(d, _) : this._report(d, _)
		}
		reportCopSuccess(t) {
			this.reportCopResult("success", "", t)
		}
		reportCopFail(t) {
			this.reportCopResult("filed", t, "")
		}
		reportCopResult(t, e, a) {
			ULSdkManager.getInstance().channelInfo;
			let i = ULConfig.getConfig(),
				s = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_COP_REQUEST),
				n = [];
			n.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")), n.push(this.channelInfoUuid), n.push(""), n.push("coprequest"), n.push(t || ""), n.push(i.s_sdk_cop_version), n.push(i.s_sdk_version), n.push(e || ""), n.push(""), this._report(s, n)
		}
		reportUserEvent(t) {
			let e = ULSdkManager.getInstance().channelInfo,
				a = ULConfig.getConfig(),
				i = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_USER_EVENT),
				s = [];
			s.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")), s.push(this.channelInfoUuid), s.push("");
			for (let e = 0; e < t.length; e++) {
				const a = t[e];
				s.push(a)
			}
			s.push(a.s_sdk_cop_version), s.push(a.s_sdk_version), s.push(e.channelName), this._report(i, s)
		}
		reportUserActionEvent(t, e) {
			let a = ULSdkManager.getInstance().channelInfo,
				i = ULConfig.getConfig(),
				s = [0, 1, 2, 5, 6, 7],
				n = [0, 1, 2, 11, 12, 13, 14],
				o = [0, 1, 2, 7, 8, 9],
				r = [0, 1, 2, 6, 7, 8],
				l = [0, 1, 2, 6, 7, 8],
				c = [0, 1, 2, 6, 7, 8],
				h = [0, 1, 2, 5, 6, 7],
				d = [ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss"), this.channelInfoUuid, "", i.s_sdk_cop_version, i.s_sdk_version, a.copChannelId],
				_ = [];
			if (e == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_COMMON_EVENT)) {
				_ = this.rebuildData(c, d, t);
				let e = t[0] + "-" + t[1];
				this.commonEventLog[e] = this.commonEventLog[e] ? this.commonEventLog[e] + 1 : 1
			} else if (e == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_START_EVENT)) {
				_ = this.rebuildData(s, d, t);
				let e = t[0];
				this.levelStartLog[e] = this.levelStartLog[e] ? this.levelStartLog[e] + 1 : 1
			} else if (e == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_LEVEL_COMPLETE_EVENT)) {
				let e = t[0] + "-" + t[1];
				this.levelCompletetLog[e] || (this.levelCompletetLog[e] = {
					count: 0,
					playTime: 0
				}), this.levelCompletetLog[e].count = this.levelCompletetLog[e].count ? this.levelCompletetLog[e].count + 1 : 1, this.levelCompletetLog[e].playTime = this.levelCompletetLog[e].playTime ? this.levelCompletetLog[e].playTime + parseInt(t[t.length - 1]) : parseInt(t[t.length - 1]);
				let a = t.pop();
				d.splice(3, 0, a), _ = this.rebuildData(n, d, t)
			} else if (e == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_VIDEO_POINT_EVENT)) {
				_ = this.rebuildData(h, d, t);
				let e = t[0] + "-" + t[1];
				this.videoPointLog[e] = this.videoPointLog[e] ? this.videoPointLog[e] + 1 : 1
			} else if (e == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_BUY_ACTION)) {
				_ = this.rebuildData(l, d, t);
				let e = t[0] + "-" + t[1] + "-" + t[2];
				this.buyActionLog[e] = this.buyActionLog[e] ? this.buyActionLog[e] + 1 : 1
			} else if (e == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_COIN_CHANGE_EVENT)) {
				_ = this.rebuildData(o, d, t);
				let e = t[0] + "-" + t[1] + "-" + t[3];
				this.coinChangeLog[e] || (this.coinChangeLog[e] = {
					count: 0,
					changeCount: 0
				}), this.coinChangeLog[e].count = this.coinChangeLog[e].count ? this.coinChangeLog[e].count + 1 : 1, this.coinChangeLog[e].changeCount = this.coinChangeLog[e].changeCount ? this.coinChangeLog[e].changeCount + parseInt(t[2]) : parseInt(t[2])
			} else e == ULTools.format("%s-%s", i.s_sdk_megadata_server_type_id, ULConst.STATIS_TYPE_ITEM_BUY) && (_ = this.rebuildData(r, d, t));
			this._report(e, _)
		}
		rebuildData(t, e, a) {
			let i = ULTools.clone(t),
				s = ULTools.clone(e),
				n = ULTools.clone(a),
				o = [];
			for (; s.length || n.length;) {
				i[0] == o.length ? (o.push(s.shift()), i.shift()) : n.length ? o.push(n.shift()) : o.push("")
			}
			return o
		}
		reportOnlineTime(t) {
			ULSdkManager.getInstance().channelInfo;
			let e = ULConfig.getConfig(),
				a = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_ONLINE_TIME),
				i = [];
			i.push(ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss")), i.push(this.channelInfoUuid), i.push(""), i.push(this.gameStartTimeFormattedStr || ""), i.push(t.toString() || "0"), i.push(e.s_sdk_cop_version), i.push(e.s_sdk_version), this.uploadToServerRightNow(a, i)
		}
		reportShareSuccess(t) {
			let e = ["openShare", "success", t || 0].join("_"),
				a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {};
			(a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", e]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.open_share || "100", 1, t || 0])
		}
		reportShareFail(t) {
			let e = ["openShare", "fail", t || 0].join("_"),
				a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {};
			(a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", e]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.open_share || "100", 0, t || 0])
		}
		reportAppShare(t) {
			let e = ["openShare", "appShare", t || 0].join("_"),
				a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {};
			(a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", e]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.open_share || "100", 2, t || 0])
		}
		reportShareClick(t) {
			let e = ["clickShare", t || ""].join("_"),
				a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {};
			(a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", e]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.click_share || "101", t || "", ""])
		}
		reportAddSubcrible(t) {
			let e = ["addSubscrible", t || ""].join("_"),
				a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {};
			(a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", e]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.add_subscrible || "102", t || "", ""])
		}
		reportSubcribleClick(t) {
			let e = ["clickSubscrible", t || ""].join("_"),
				a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {};
			(a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", e]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.click_subscrible || "103", t || "", ""])
		}
		reportClickMoreGameIcon(t, e) {
			let a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {},
				s = i.click_more_game_icon_list || "106";
			"single" == t ? s = i.click_more_game_icon_single || "104" : "reward" == t && (s = i.click_more_game_icon_reward || "105"), (a.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? this.reportPointEvent(s, parseInt(e)) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", s, e || "", ""])
		}
		reportClickMoreGameButtonToChannelSystem() {
			let t = ULConfig.getConfig(),
				e = (t.t_sdk_common_event_ids || {}).click_more_game_channel_system_button || "108";
			(t.s_sdk_megadata_url || "").indexOf("megadata.ultralisk.cn") >= 0 ? this.reportPointEvent(e, 0) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", e, "", ""])
		}
		reportOpenCdk(t) {
			let e = ["openCdk", t].join("_"),
				a = ULConfig.getConfig(),
				i = a.t_sdk_common_event_ids || {},
				s = a.s_sdk_megadata_url || "";
			ULLog.console.log("ULStatisManager.reportOpenCdk code:", t), s.indexOf("megadata.ultralisk.cn") >= 0 ? ULEventDispatcher.getInstance().dispatch(ULConst.CMD_MEGADATA_SERVER, ["commonEvent", e]) : ULEventDispatcher.getInstance().dispatch(ULConst.CMD_POST_MEGADATA, ["commonEvent", i.open_cdk || "107", t || 0, ""])
		}
		reportJumpGame(t, e, a, i, s) {
			let n = ULConfig.getConfig(),
				o = (n.s_sdk_jump_game_statis_game_indexes || "").split(";"),
				r = {};
			for (let t = 0; t < o.length; t++) r[o[t]] = !0;
			if (!r[s.split("_")[0]]) return void ULLog.console.log("ULStatisManager.reportJumpGame 当前跳转的游戏数据上报没开,targetIconId:", s);
			let l = n.s_sdk_megadata_server_jump_game_type_id,
				c = [];
			c.push(t), c.push(e), c.push(a), c.push(i), c.push(s), this._report(l, c)
		}
		_checkPointEventSwitch(t) {
			if (!this.pointEventCategoryId_2_enabled) {
				let t = ULConfig.getConfig().s_sdk_megadata_point_event_open_category_ids.split(";"),
					e = {};
				for (let a = 0; a < t.length; a++) {
					e[t[a]] = !0
				}
				this.pointEventCategoryId_2_enabled = e
			}
			let e = Math.floor(t / 1e3);
			return !!this.pointEventCategoryId_2_enabled[e]
		}
		reportPointEvent(t, e) {
			if (t = parseInt(t) || 0, isNaN(t) && (t = 0), t = ULTools.clampf(t, 0, 65535), e = parseInt(e) || 0, isNaN(e) && (e = 0), e = ULTools.clampf(e, 0, 65535), ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatisManager.reportPointEvent", t, e), !this._checkPointEventSwitch(t)) return void(ULConst.B_INNER_DEBUG && ULLog.console.log("  打点统计上报未开启：", ULConfig.getConfig().s_sdk_megadata_point_event_open_category_ids));
			let a = "",
				i = ULSdkManager.getInstance().channelInfo._sdkUserId;
			ULConst.B_INNER_DEBUG && ULLog.console.log(ULTools.format("  sdkUserId = [%s]", i));
			/(\d+)_(.*)_(\d+)/.test(i) ? (a = RegExp.$2) && 22 == a.length ? a = a.substr(2, a.length - 2) : (ULConst.B_INNER_DEBUG && ULLog.console.log("  核心长度不匹配，直接使用sdkUserId"), a = i) : (ULConst.B_INNER_DEBUG && ULLog.console.log("  userId规则不匹配，直接使用sdkUserId"), a = i), ULConst.B_INNER_DEBUG && ULLog.console.log(ULTools.format("  shortUserId = [%s]", a));
			ULSdkManager.getInstance().channelInfo;
			let s = ULConfig.getConfig(),
				n = ULTools.format("%s-%s", this.megadataId, ULConst.STATIS_TYPE_POINT_EVENT),
				o = [];
			o.push(a), o.push(s.s_sdk_cop_channel_id), o.push(t.toString()), o.push(e.toString()), this._report(n, o);
			let r = this.pointEventLog,
				l = r[t];
			l || (l = {}, r[t] = l), l[e] = (l[e] || 0) + 1, ULConst.B_INNER_DEBUG && ULLog.console.log("  log", r)
		}
		onCmdSdkOnGameStart(t) {
			if (this.gameStartTimeFormattedStr = ULTools.formatDate(new Date, "yyyy-MM-dd HH:mm:ss"), this.gameLastResumeTime = ULTools.time(), ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatiManager.onCmdSdkOnGameStart", this.gameStartTimeFormattedStr, this.gameLastResumeTime), this.isReady()) return this.reportGameStart(), void this.tryUploadToServer();
			let e = this.getPreparationFlags();
			ULLog.console.log("ULStatiManager.onCmdSdkOnGameStart 上报数据没有准备好,flags:", e.join(","));
			let a = ULConfig.getConfig().i_game_start_ready_timeout / 1e3;
			ULTimer.callLoop(1 / 60, t => {
				if (t.usedTime >= a) {
					t.stop();
					let e = this.getPreparationFlags();
					return ULLog.console.log("ULStatiManager.onCmdSdkOnGameStart 等待超时！直接触发reportGameStart flags:", e.join(",")), this.reportGameStart(), void this.tryUploadToServer()
				}
				if (this.isReady()) return t.stop(), ULLog.console.log("ULStatiManager.onCmdSdkOnGameStart 准备完毕！触发reportGameStart"), this.reportGameStart(), void this.tryUploadToServer()
			})
		}
		onCmdSdkOnGamePause(t) {
			if (!this.gameLastResumeTime) return void ULLog.console.warn("ULStatiManager.onCmdSdkOnGamePause gameLastResumeTime not found! 无法上报在线时间");
			let e = ULTools.time() - this.gameLastResumeTime;
			if (ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatiManager.onCmdSdkOnGamePause", e), e <= 5 || e > 86400) return;
			this.gameLastResumeTime = ULTools.time(), this.reportOnlineTime(Math.floor(e));
			let a = ULConfig.getConfig();
			ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_CHANNEL_MEGADATA_POST, [a.s_sdk_miniplay_user_play_game_time_event_id, Math.floor(e)]), this.saveRecord()
		}
		onCmdSdkOnGameResume(t) {
			this.gameLastResumeTime = ULTools.time(), ULConst.B_INNER_DEBUG && ULLog.console.log("ULStatiManager.onCmdSdkOnGameResume", this.gameLastResumeTime)
		}
		onCmdSdkOnCopChanged(t) {
			this.pointEventCategoryId_2_enabled = null
		}
		onCmdSdkCollectionModuleCheckerConfig(t) {
			let e = t.getReturnValue() || [];
			e.push({
				type: "newLine"
			});
			let a = ["正式模式", "测试模式"],
				i = "当前数据上传模式:" + a[this.postMegadataTestMode];
			e.push({
				type: "label",
				text: i,
				name: "labelPostDataMode"
			}), e.push({
				type: "button",
				text: "切换数据上传模式..",
				onClick: () => {
					let t = ULSdkManager.getInstance().moduleCheckerManager.getItemText("labelPostTestModeUserId"),
						e = [];
					e.push({
						text: "测试模式 ( 用户id:" + t + ")",
						value: 1
					}), e.push({
						text: "正式模式",
						value: 0
					});
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("切换数据上传模式:", e, e => {
						let i = "当前数据上传模式:" + a[this.postMegadataTestMode];
						if (e) {
							if (t.length < 1) return void ULSdkManager.getInstance().moduleCheckerManager.alertPrompt("提示", "请设置测试用户id", "好的");
							this.postMegadataTestUserId = t, ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("已开启测试模式")
						} else this.postMegadataTestUserId = null, ULSdkManager.getInstance().moduleCheckerManager.showMsgTip("测试模式已关闭");
						this.setPostMegadataMode(e), ULSdkManager.getInstance().moduleCheckerManager.setItemText("labelPostDataMode", i)
					})
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "测试用户id"
			}), e.push({
				type: "inputBox",
				text: this.postMegadataTestUserId,
				name: "labelPostTestModeUserId"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "清理游戏存档:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "清理游戏存档",
				onClick: () => {
					ULSdkManager.getInstance().response(ULConst.CMD_CLEAN_UP_GAME_ARCHIVE, {})
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "跳过新手引导:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "跳过新手引导",
				onClick: () => {
					ULSdkManager.getInstance().response(ULConst.CMD_JUMP_NEW_USER_GUIDE, {})
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "是否显示客户端打点信息界面开关:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "打开",
				onClick: () => {
					ULSdkManager.getInstance().response(ULConst.CMD_SHOW_POINT_DEBUG_INFO, {
						state: 1
					})
				}
			}), e.push({
				type: "button",
				text: "关闭",
				onClick: () => {
					ULSdkManager.getInstance().response(ULConst.CMD_SHOW_POINT_DEBUG_INFO, {
						state: 0
					})
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "打点统计记录:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "点击查看..",
				onClick: () => {
					let t = this.genPointEventLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						e.push({
							text: i,
							value: i
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("打点统计记录(事件id-状态：次数)：", e, () => {}, !0)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "自定义统计记录:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "点击查看..",
				onClick: () => {
					let t = this.getCommonEventLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						e.push({
							text: i,
							value: i
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("自定义统计记录(事件id-状态：次数)：", e, () => {}, !0)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "关卡开始统计记录:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "点击查看..",
				onClick: () => {
					let t = this.getLevelStartLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						e.push({
							text: i,
							value: i
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("关卡开始统计记录(关卡名：次数):", e, () => {}, !0)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "关卡结束统计记录:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "点击查看..",
				onClick: () => {
					let t = this.getLevelCompletetLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						e.push({
							text: i,
							value: i
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("关卡结束统计记录(关卡名-结果-次数):", e, () => {}, !0)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "视频埋点转化统计记录:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "点击查看..",
				onClick: () => {
					let t = this.getVideoPointLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						e.push({
							text: i,
							value: i
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("视频埋点转化统计记录(视频点-状态：次数)", e, () => {}, !0)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "内购行为统计记录:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "点击查看..",
				onClick: () => {
					let t = this.getBuyActionLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						e.push({
							text: i,
							value: i
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("内购行为统计记录(弹出理由-商品名-结果)", e, () => {}, !0)
				}
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "label",
				text: "货币统计记录:"
			}), e.push({
				type: "newLine"
			}), e.push({
				type: "button",
				text: "点击查看..",
				onClick: () => {
					let t = this.getCoinChangeLog(),
						e = [];
					for (let a = 0; a < t.length; a++) {
						const i = t[a];
						e.push({
							text: i,
							value: i
						})
					}
					ULSdkManager.getInstance().moduleCheckerManager.showPickerDialog("货币统计记录(货币名称-变化类型-变化原因)", e, () => {}, !0)
				}
			}), t.setReturnValue(e, !0)
		}
	}
	class MCItem {
		initByData(t) {
			this.type = t.type, this.type = t.type || "newLine", this.name = t.name || "", this.text = t.text || "", this.width = t.width || 0, this.height = t.height || 0, this.fOnClick = t.onClick, this.fOnTextChanged = t.onTextChanged
		}
		setText(t) {
			this.text = t, this.fOnTextChanged instanceof Function && this.fOnTextChanged(t)
		}
		triggerOnClick() {
			this.fOnClick instanceof Function && this.fOnClick()
		}
	}
	const BUTTON_WIDTH = 150,
		BUTTON_HEIGHT = 40,
		NEW_LINE_HEIGHT = 20,
		FONT_SIZE = 20,
		PENDING = 10,
		GAP = 4;
	let _cc = window.cc;
	class MCPanelCreator {
		constructor() {
			this.nodeReferenceRects = {}
		}
		getNodeCanvas() {
			if (!_cc) return ULLog.console.warn("MCPanelCreator.getNodeCanvas 未检测到creator环境！"), null;
			let t = _cc.director.getScene();
			if (!t) return ULLog.console.warn("MCPanelCreator.getNodeCanvas scene not found!"), null;
			let e = t.getChildByName("Canvas");
			return e || (ULLog.console.warn("MCPanelCreator.getNodeCanvas nodeCanvas not found!"), null)
		}
		addFillerSprite(t, e) {
			let a = t.getContentSize(),
				i = t.addComponent(_cc.Sprite);
			i.sizeMode = _cc.Sprite.SizeMode.CUSTOM, i.type = _cc.Sprite.Type.SIMPLE, _cc.loader.loadRes("_ulsdk_ui/white_dot", _cc.SpriteFrame, (e, s) => {
				e ? ULLog.console.warn("MCPanelCreator.addFillerSprite err!", e) : (i.spriteFrame = s, t.setContentSize(a))
			}), t.color = e, t.opacity = e.getA()
		}
		registerTouchHandler(t, e, a = !1, i = !0, s = !1) {
			let n = t;
			if (!n) return;
			if (!e) return;
			n.on(_cc.Node.EventType.TOUCH_START, t => {
				let s = t.getID() || 0;
				return !(!a && null != n.__touch_id || (t.name = "began", i && t.stopPropagation(), n.__touch_id = s, e(t), 0))
			}, null, s), n.on(_cc.Node.EventType.TOUCH_MOVE, t => {
				let i = t.getID() || 0;
				(a || i == n.__touch_id) && (t.name = "moved", e(t))
			}, null, s), n.on(_cc.Node.EventType.TOUCH_END, t => {
				let i = t.getID() || 0;
				(a || i == n.__touch_id) && (t.name = "ended", n.__touch_id = null, e(t))
			}, null, s), n.on(_cc.Node.EventType.TOUCH_CANCEL, t => {
				let i = t.getID() || 0;
				(a || i == n.__touch_id) && (t.name = "cancelled", n.__touch_id = null, e(t))
			}, null, s)
		}
		isTouchEventClick(t) {
			if ("ended" != t.name && "cancelled" != t.name) return !1;
			let e = t.getStartLocation(),
				a = t.getLocation(),
				i = e.x - a.x,
				s = e.y - a.y;
			return i * i + s * s <= 400
		}
		createItemByData(t) {
			let e = new MCItem;
			e.initByData(t);
			let a = this.nodeContainer;
			switch (t.type) {
				case "label": {
					let t = new _cc.Node;
					t.parent = a, t.setAnchorPoint(.5, .5), t.on(_cc.Node.EventType.SIZE_CHANGED, () => {
						e.width = t.width, e.height = t.height, this.onItemNodeResize()
					}), t.addComponent(_cc.Label).string = e.text, t.getComponent(_cc.Label).fontSize = FONT_SIZE, t.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.LEFT, t.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, e.renderNode = t;
					break
				}
				case "labelArea": {
					let t = new _cc.Node;
					t.parent = a, t.setAnchorPoint(.5, .5), t.on(_cc.Node.EventType.SIZE_CHANGED, () => {
						e.width = t.width, e.height = t.height, this.onItemNodeResize()
					}), t.addComponent(_cc.Label).string = e.text, t.getComponent(_cc.Label).fontSize = FONT_SIZE, t.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.LEFT, t.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, t.getComponent(_cc.Label).overflow = _cc.Label.Overflow.RESIZE_HEIGHT, t.width = a.width - 2 * PENDING, t.height = FONT_SIZE, e.renderNode = t;
					break
				}
				case "button": {
					let t = new _cc.Node;
					t.parent = a, t.on(_cc.Node.EventType.SIZE_CHANGED, () => {
						e.width = t.width, e.height = t.height, this.onItemNodeResize()
					}), t.width = e.width || BUTTON_WIDTH, t.height = e.height || BUTTON_HEIGHT;
					let i = new _cc.Node;
					i.parent = t, i.setContentSize(i.parent.getContentSize()), this.addFillerSprite(i, _cc.color(200, 200, 200, 255));
					let s = new _cc.Node;
					s.parent = t, s.setAnchorPoint(.5, .5), s.addComponent(_cc.Label).string = e.text, s.getComponent(_cc.Label).fontSize = FONT_SIZE, s.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, s.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, s.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, s.width = t.width, s.height = t.height, s.color = _cc.Color.BLACK, this.registerTouchHandler(t, t => {
						switch (t.name) {
							case "began":
								s.color = _cc.Color.GREEN;
								break;
							case "moved":
								break;
							default:
								s.color = _cc.Color.BLACK
						}
						this.isTouchEventClick(t) && e.triggerOnClick()
					}), e.renderNode = t;
					break
				}
				case "inputBox": {
					let t = new _cc.Node;
					t.parent = a, t.on(_cc.Node.EventType.SIZE_CHANGED, () => {
						e.width = t.width, e.height = t.height, this.onItemNodeResize()
					}), t.width = e.width || BUTTON_WIDTH, t.height = e.height || BUTTON_HEIGHT;
					let i = new _cc.Node;
					i.parent = t, i.setContentSize(i.parent.getContentSize()), this.addFillerSprite(i, _cc.color(200, 200, 200, 255));
					let s = t.addComponent(_cc.EditBox);
					s.fontSize = FONT_SIZE, s.fontColor = _cc.Color.BLACK, s.lineHeight = t.height, s.inputMode = _cc.EditBox.InputMode.SINGLE_LINE, s.maxLength = 1024, s.placeholder = "<<输入框>>", s.placeholderFontSize = FONT_SIZE, s.placeholderFontColor = _cc.Color.GRAY;
					let n = t.getComponentsInChildren(_cc.Label);
					for (let t = 0; t < n.length; t++) {
						n[t].verticalAlign = _cc.Label.VerticalAlign.CENTER
					}
					s.node.on("text-changed", () => {
						let t = s.string;
						e.setText(t)
					}), e.renderNode = t;
					break
				}
				case "newLine":
					e.width = a.width - 2 * PENDING, e.height = NEW_LINE_HEIGHT
			}
			return e
		}
		doLayout() {
			if (!this.items) return;
			let t = this.nodePanel.width - 20,
				e = [],
				a = PENDING,
				i = -PENDING,
				s = 0;
			for (let n = 0; n < this.items.length; n++) {
				let o = this.items[n],
					r = o.renderNode || {
						x: 0,
						y: 0
					};
				if (a + o.width > t) {
					a = 0;
					for (let t = 0; t < e.length; t++) {
						(e[t].renderNode || {
							x: 0,
							y: 0
						}).y = i - s / 2
					}
					a = PENDING, i -= s + GAP, e = [], s = 0
				}
				s = Math.max(s, o.height), e.push(o), r.x = a + o.width / 2, a += o.width + GAP
			}
			for (let t = 0; t < e.length; t++) {
				(e[t].renderNode || {
					x: 0,
					y: 0
				}).y = i - s / 2
			}
			i -= s - PENDING, this.nodeContainer.height = Math.max(this.nodePanel.height, -i)
		}
		onItemNodeResize() {
			this.doLayout()
		}
		getItemByName(t) {
			for (let e = 0; e < this.items.length; e++) {
				const a = this.items[e];
				if (a.name == t) return a
			}
			return null
		}
		show(t) {
			let e = this.getNodeCanvas();
			if (!e) return;
			let a = new _cc.Node;
			a.parent = e, a.setContentSize(e.getContentSize()), a.zIndex = _cc.macro.MAX_ZINDEX, this.nodePanel = a;
			let i = new _cc.Node;
			i.parent = a, i.setContentSize(i.parent.getContentSize()), this.addFillerSprite(i, _cc.color(0, 0, 0, 191)), this.registerTouchHandler(this.nodePanel, t => {
				this.isTouchEventClick(t)
			});
			let s = new _cc.Node;
			s.setAnchorPoint(0, 1), s.parent = this.nodePanel, s.setContentSize(e.getContentSize()), this.nodeContainer = s;
			let n = this.nodePanel.addComponent(_cc.ScrollView);
			n.horizontal = !1, n.vertical = !0, n.content = s, n.cancelInnerEvents = !1, n.elastic = !0;
			let o = [];
			for (let e = 0; e < t.length; e++) {
				const a = t[e];
				let i = this.createItemByData(a);
				o.push(i)
			}
			this.items = o, this.doLayout()
		}
		close() {
			_cc.isValid(this.nodePanel) && this.nodePanel.destroy(), this.nodePanel = null, this.items = []
		}
		getItemText(t) {
			let e = this.getItemByName(t);
			return e ? e.text : ""
		}
		setItemText(t, e) {
			let a = this.getItemByName(t);
			if (!a) return;
			a.setText(e);
			let i = a.renderNode;
			if (i instanceof _cc.Node) {
				let t = i.getComponent(_cc.Label) || i.getComponentInChildren(_cc.Label);
				t && (t.string = e);
				let a = i.getComponent(_cc.EditBox) || i.getComponentInChildren(_cc.EditBox);
				a && (a.string = e)
			}
		}
		showMsgTip(t) {
			let e = this.getNodeCanvas();
			if (!e) return;
			let a = new _cc.Node;
			a.parent = e, a.width = e.width, a.height = 20, a.zIndex = _cc.macro.MAX_ZINDEX;
			let i = a.addComponent(_cc.Label);
			i.string = t, i.fontSize = 20, i.enableWrapText = !0, a.x = 0, a.y = .25 * e.height, a.runAction(_cc.sequence(_cc.moveBy(1.5, 0, 50), _cc.callFunc(() => {
				a.destroy()
			})))
		}
		showPickerDialog(t, e, a, i) {
			let s = this.getNodeCanvas();
			if (!s) return;
			let n = ULTools.scaleInRange(e.length, 8.5, 17.5, 430, 826),
				o = new _cc.Node;
			o.parent = s, o.setContentSize(s.getContentSize()), o.zIndex = _cc.macro.MAX_ZINDEX, this.registerTouchHandler(o, t => {
				this.isTouchEventClick(t) && o.destroy()
			});
			let r = new _cc.Node;
			r.parent = o, r.setContentSize(r.parent.getContentSize()), this.addFillerSprite(r, _cc.color(0, 0, 0, 127));
			let l = new _cc.Node;
			l.parent = o, l.width = s.width - 100, l.height = n, this.registerTouchHandler(l, t => {}), (r = new _cc.Node).parent = l, r.setContentSize(r.parent.getContentSize()), this.addFillerSprite(r, _cc.color(167, 167, 167, 255));
			let c = new _cc.Node;
			c.parent = l, c.y = l.height / 2 - 25, c.x = 0, c.addComponent(_cc.Label).string = t, c.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, c.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, c.getComponent(_cc.Label).fontSize = 40, c.width = l.width - 10, c.height = 40;
			let h = new _cc.Node;
			h.parent = l, h.width = l.width - 10, h.height = l.height - 50, h.x = 0, h.y = -l.height / 2 + h.height / 2 + 5, this.addFillerSprite(h, _cc.color(97, 97, 97, 255));
			let d = new _cc.Node;
			d.parent = l, d.width = l.width - 10, d.height = l.height - 50, d.x = 0, d.y = -l.height / 2 + d.height / 2 + 5, d.addComponent(_cc.Mask);
			let _ = new _cc.Node;
			_.setAnchorPoint(0, 1), _.parent = d, _.setContentSize(d.getContentSize());
			let g = d.addComponent(_cc.ScrollView);
			g.horizontal = !1, g.vertical = !0, g.content = _, g.cancelInnerEvents = !1, g.elastic = !0;
			let u = 0;
			for (let t = 0; t < e.length; t++) {
				const s = e[t];
				let n = new _cc.Node;
				n.parent = _, n.width = d.width, n.height = 40, n.x = _.width / 2, n.y = u - n.height / 2;
				let r = new _cc.Node;
				r.parent = n, r.setContentSize(r.parent.getContentSize()), this.addFillerSprite(r, _cc.color(0, 0, 0, 63));
				let l = new _cc.Node;
				l.parent = n, l.setAnchorPoint(0, .5), l.x = -n.width / 2 + 5, l.y = 0;
				let c = l.addComponent(_cc.Label);
				c.fontSize = FONT_SIZE, c.lineHeight = FONT_SIZE, c.verticalAlign = _cc.Label.VerticalAlign.CENTER, c.horizontalAlign = _cc.Label.HorizontalAlign.LEFT, c.string = s.text, this.registerTouchHandler(n, t => {
					this.isTouchEventClick(t) && (a(s.value), i || o.destroy())
				}), u -= n.height + 4
			}
			_.height = Math.max(d.height, -u)
		}
		showPromptDialog(t, e, a, i) {
			let s = this.getNodeCanvas();
			if (!s) return ULLog.console.warn("MCPanelCreator.showPromptDialog nodeCanvas not found!"), void ULTimer.callLater(.1, () => {
				this.showPromptDialog(t, e, a, i)
			});
			let n = new _cc.Node;
			n.parent = s, n.setContentSize(s.getContentSize()), n.zIndex = _cc.macro.MAX_ZINDEX, this.registerTouchHandler(n, t => {
				this.isTouchEventClick(t) && ULLog.console.log("click bg")
			});
			let o = new _cc.Node;
			o.parent = n, o.setContentSize(o.parent.getContentSize()), this.addFillerSprite(o, _cc.color(0, 0, 0, 127));
			let r = !1,
				l = new _cc.Node;
			l.parent = n, l.addComponent(_cc.Component).onDestroy = (() => {
				ULLog.console.log("MCPanelCreator.showPromptDialog triggerNode onDestroy", r), r || (ULLog.console.log("MCPanelCreator.showPromptDialog nodeShadow被意外销毁，0.1秒后尝试重新创建提示"), ULTimer.callLater(.1, () => {
					this.showPromptDialog(t, e, a, i)
				}))
			});
			let c = new _cc.Node;
			c.parent = n, c.width = 460, c.height = 320, this.registerTouchHandler(c, t => {});
			let h = new _cc.Node;
			h.parent = c, h.setContentSize(h.parent.getContentSize()), _cc.loader.loadRes("_ulsdk_ui/bg_01", _cc.SpriteFrame, (t, e) => {
				if (t) return void ULLog.console.warn("MCPanelCreator.showPromptDialog nodeDialogBg load sprite error", t);
				let a = h.getContentSize(),
					i = e.getOriginalSize();
				e.insetLeft = i.width / 3, e.insetRight = i.width / 3, e.insetTop = i.height / 3, e.insetBottom = i.height / 3;
				let s = h.addComponent(_cc.Sprite);
				s.spriteFrame = e, s.type = _cc.Sprite.Type.SLICED, s.sizeMode = _cc.Sprite.SizeMode.CUSTOM, h.setContentSize(a)
			});
			let d = new _cc.Node;
			d.parent = c, d.y = c.height / 2 - 45, d.x = 0, d.color = _cc.color(38, 38, 38, 255), d.addComponent(_cc.Label).string = t || "标题", d.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, d.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, d.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, d.getComponent(_cc.Label).fontSize = 32, d.width = c.width - 10, d.height = 40;
			let _ = new _cc.Node;
			_.parent = c, _.y = c.height / 2 - 155, _.x = 0, _.color = _cc.color(96, 96, 96, 255), _.addComponent(_cc.Label).string = e || "内容", _.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, _.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, _.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, _.getComponent(_cc.Label).fontSize = 24, _.width = c.width - 50, _.height = 160;
			let g = -(160 * a.length + 30 * (a.length - 1)) / 2,
				u = [];
			for (let t = 0; t < a.length; t++) {
				const e = a[t];
				let s = new _cc.Node;
				s.parent = c, s.x = g + 160 * (t + .5) + 30 * t, s.y = -c.height / 2 + 50, s.setContentSize(160, 56), u.push(s);
				let o = new _cc.Node;
				o.parent = s, o.setContentSize(s.getContentSize()), _cc.loader.loadRes("_ulsdk_ui/btn_01", _cc.SpriteFrame, (t, e) => {
					if (t) return void ULLog.console.warn("MCPanelCreator.showPromptDialog nodeButtonBg load sprite error", t);
					let a = o.getContentSize(),
						i = e.getOriginalSize();
					e.insetLeft = i.width / 3, e.insetRight = i.width / 3, e.insetTop = i.height / 3, e.insetBottom = i.height / 3;
					let s = o.addComponent(_cc.Sprite);
					s.spriteFrame = e, s.type = _cc.Sprite.Type.SLICED, s.sizeMode = _cc.Sprite.SizeMode.CUSTOM, o.setContentSize(a)
				});
				let l = new _cc.Node;
				l.parent = s, l.y = 0, l.x = 0, l.color = _cc.color(255, 255, 255, 255), l.addComponent(_cc.Label).string = e || "按钮" + (t + 1), l.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, l.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, l.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, l.getComponent(_cc.Label).fontSize = 30, l.width = o.width - 10, l.height = o.height - 10, this.registerTouchHandler(s, e => {
					if ("began" == e.name ? s.scale = 1.1 : "moved" == e.name || (s.scale = 1), this.isTouchEventClick(e)) {
						let e = i[t];
						if (e instanceof Function) {
							e() || (r = !0, n.destroy())
						} else r = !0, n.destroy()
					}
				})
			}
		}
		showWebView(t, e) {
			this.closeWebView();
			let a = this.getNodeCanvas();
			if (!a) return;
			let i = new _cc.Node;
			i.parent = a, i.setContentSize(2048, 2048), i.zIndex = _cc.macro.MAX_ZINDEX, this.showWebViewNode = i;
			let s = new _cc.Node;
			s.parent = i, s.setContentSize(i.getContentSize()), this.addFillerSprite(s, _cc.color(0, 0, 0, 127)), this.registerTouchHandler(s, t => {
				this.isTouchEventClick(t) && this.closeWebView()
			});
			let n = new _cc.Node;
			n.parent = i;
			let o = Math.min(.8 * a.width, 500),
				r = Math.min(.8 * a.height, 800);
			a.width > a.height && (o = Math.min(.8 * a.width, 800), r = Math.min(.8 * a.height, 500)), n.setContentSize(o, r), _cc.loader.loadRes("_ulsdk_ui/bg_01", _cc.SpriteFrame, (t, e) => {
				if (t) return void ULLog.console.warn("MCPanelCreator.showPrivacyDialog nodeDialogBg load sprite error", t);
				let a = n.getContentSize(),
					i = e.getOriginalSize();
				e.insetLeft = i.width / 3, e.insetRight = i.width / 3, e.insetTop = i.height / 3, e.insetBottom = i.height / 3;
				let s = n.addComponent(_cc.Sprite);
				s.spriteFrame = e, s.type = _cc.Sprite.Type.SLICED, s.sizeMode = _cc.Sprite.SizeMode.CUSTOM, n.setContentSize(a)
			});
			let l = new _cc.Node;
			l.parent = n, l.color = _cc.color(38, 38, 38, 255), l.addComponent(_cc.Label).string = t, l.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, l.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, l.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, l.getComponent(_cc.Label).fontSize = 32, l.width = o - 10, l.height = 40, l.y = r / 2 - 40, l.x = 0;
			let c = new _cc.Node;
			c.parent = n, c.setContentSize(o - 50, r - 80), c.x = 0, c.y = -20;
			let h = c.addComponent(_cc.ScrollView);
			h.horizontal = !1, h.vertical = !0, h.cancelInnerEvents = !1, h.elastic = !0;
			let d = new _cc.Node;
			d.parent = c, d.setContentSize(c.getContentSize()), d.addComponent(_cc.Mask).type = _cc.Mask.Type.RECT, d.getComponent(_cc.Mask).inverted = !1;
			let _ = new _cc.Node;
			_.parent = d, _.setAnchorPoint(.5, 1), _.setContentSize(c.getContentSize()), _.addComponent(_cc.Layout).resizeMode = _cc.Layout.ResizeMode.CONTAINER, h.content = _, ULTools.httpGet({
				url: e,
				timeoutMillisecond: 5e3,
				success: t => {
					let e = JSON.parse(t).policyText;
					ULLog.console.log("content:", e);
					let a = new _cc.Node;
					a.color = _cc.color(0, 0, 0, 255), a.parent = _, a.setAnchorPoint(.5, 1), a.addComponent(_cc.Label).string = e, a.getComponent(_cc.Label).overflow = _cc.Label.Overflow.RESIZE_HEIGHT, a.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.TOP, a.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.LEFT, a.getComponent(_cc.Label).fontSize = 18, a.getComponent(_cc.Label).lineHeight = 26;
					let i = a,
						s = _cc.Label;
					i.hasOwnProperty("cacheMode") && s.hasOwnProperty("CacheMode") && (i.cacheMode = s.CacheMode.CHAR), a.setContentSize(_.getContentSize())
				},
				fail: () => {}
			})
		}
		closeWebView() {
			_cc.isValid(this.showWebViewNode) && (this.showWebViewNode.__b_manual_destroy = !0, this.showWebViewNode.destroy()), this.showWebViewNode = null
		}
		showPrivacyDialog(t, e, a, i) {
			if (ULLog.console.log("MCPanelCreator.showPrivacyDialog"), this.showPrivacyNode) return;
			let s = this.getNodeCanvas();
			if (!s) return ULLog.console.warn("MCPanelCreator.showPrivacyDialog nodeCanvas not found!"), void ULTimer.callLater(.1, () => {
				this.showPrivacyDialog(t, e, a, i)
			});
			let n = new _cc.Node;
			n.parent = s, n.setContentSize(2048, 2048), n.zIndex = _cc.macro.MAX_ZINDEX, this.showPrivacyNode = n;
			let o = new _cc.Node;
			o.parent = n, o.setContentSize(n.getContentSize()), this.addFillerSprite(o, _cc.color(0, 0, 0, 127)), this.registerTouchHandler(o, t => {
				this.isTouchEventClick(t) && ULLog.console.log("click bg")
			});
			let r = !1,
				l = new _cc.Node;
			l.parent = o, l.addComponent(_cc.Component).onDestroy = (() => {
				ULLog.console.log("MCPanelCreator.showPrivacyDialog triggerNode onDestroy", r), this.showPrivacyNode = null, r || (ULLog.console.log("MCPanelCreator.showPrivacyDialog nodeShadow被意外销毁，0.1秒后尝试重新创建提示"), ULTimer.callLater(1 / 60, () => {
					ULLog.console.log("ontimer"), this.showPrivacyDialog(t, e, a, i)
				}))
			});
			let c = new _cc.Node;
			c.parent = n;
			c.setContentSize(400, 400), _cc.loader.loadRes("_ulsdk_ui/bg_01", _cc.SpriteFrame, (t, e) => {
				if (t) return void ULLog.console.warn("MCPanelCreator.showPrivacyDialog nodeDialogBg load sprite error", t);
				let a = c.getContentSize(),
					i = e.getOriginalSize();
				e.insetLeft = i.width / 3, e.insetRight = i.width / 3, e.insetTop = i.height / 3, e.insetBottom = i.height / 3;
				let s = c.addComponent(_cc.Sprite);
				s.spriteFrame = e, s.type = _cc.Sprite.Type.SLICED, s.sizeMode = _cc.Sprite.SizeMode.CUSTOM, c.setContentSize(a)
			});
			let h = new _cc.Node;
			h.parent = c, h.color = _cc.color(0, 0, 0, 255), h.addComponent(_cc.Label).string = "隐私政策", h.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, h.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, h.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, h.getComponent(_cc.Label).fontSize = 32, h.width = 390, h.height = 40, h.y = 160, h.x = 0;
			let d = new _cc.Node;
			d.parent = c, d.setContentSize(350, 260), d.x = 0, d.y = 3;
			let _ = d.addComponent(_cc.ScrollView);
			_.horizontal = !1, _.vertical = !0, _.cancelInnerEvents = !1, _.elastic = !0;
			let g = new _cc.Node;
			g.parent = d, g.setContentSize(d.getContentSize()), g.addComponent(_cc.Mask).type = _cc.Mask.Type.RECT, g.getComponent(_cc.Mask).inverted = !1;
			let u = new _cc.Node;
			u.parent = g, u.setAnchorPoint(.5, 1), u.setContentSize(d.getContentSize()), u.addComponent(_cc.Layout).resizeMode = _cc.Layout.ResizeMode.CONTAINER, _.content = u;
			let m = this,
				p = "感谢您对本公司游戏的支持，在体验我们的游戏前，请仔细阅读开发商的",
				S = {};
			for (let t = 0; t < e.length; t++) {
				const a = e[t];
				let i = a.name || "",
					s = a.url || "";
				S[i] = s, t > 0 && (p += "、"), p += `<color=#6495ED><outline color=#ffffff width=2><on click="onUserProtocolClicked" param="${i}">《${i}》</on></outline></color>`
			}
			p += "中的所有条款，包括\n        1.为了您有良好的游戏体验，我们会基于具体的场景收集您的个人信息\n        2.我们会基于先进的技术和管理措施保证您的个人信息安全\n        3.基于您的授权，我们会收集以下权限\n设备信息：包括设备标识符、MAC、机型、品牌、App包名、App版本号、IP地址、设备分辨率及像素密度。\n网络信息：网络连接状态、接入网络的方式和类型、IP地址。\n使用信息：包括广告内容的展现、点击、下载。\n        如果您对本隐私政策有任何疑问,请通过kefu@ultralisk.cn与我们联系。\n        ";
			class b extends _cc.RichText {
				onUserProtocolClicked(t, e) {
					m.showWebView(e, S[e] || "")
				}
			}
			let L = new _cc.Node;
			L.color = _cc.color(0, 0, 0, 255), L.parent = u, L.setAnchorPoint(.5, 1), L.addComponent(b).string = p, L.getComponent(b).maxWidth = 344, L.getComponent(b).fontSize = 18, L.getComponent(b).lineHeight = 26, L.setContentSize(u.getContentSize());
			let I = (c.width - 20) / a.length;
			for (let t = 0; t < a.length; t++) {
				const e = a[t];
				let s = new _cc.Node;
				s.parent = c, s.width = Math.min(.8 * I, 120), s.height = 40, s.x = -(a.length / 2 - t) * I + I / 2, s.y = (s.height - c.height) / 2 + 20;
				let n = new _cc.Node;
				n.parent = s, n.addComponent(_cc.Label).string = e, n.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, n.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, n.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, n.getComponent(_cc.Label).fontSize = 22, n.width = s.width, n.height = s.height, 1 == a.length || t % 2 == 1 ? (this.addFillerSprite(s, _cc.color(100, 149, 237, 255)), n.color = _cc.color(255, 255, 255, 255)) : (this.addFillerSprite(s, _cc.color(230, 230, 230, 255)), n.color = _cc.color(156, 176, 222, 255), n.addComponent(_cc.LabelOutline), n.getComponent(_cc.LabelOutline), n.getComponent(_cc.LabelOutline).width = 1, n.getComponent(_cc.LabelOutline).color = _cc.color(230, 230, 230, 255)), this.registerTouchHandler(n, e => {
					if (!this.isTouchEventClick(e)) return;
					let a = i[t];
					if (a instanceof Function) {
						a() || (r = !0, this.showPrivacyNode.destroy(), this.showPrivacyNode = null)
					} else r = !0, this.showPrivacyNode.destroy(), this.showPrivacyNode = null
				})
			}
		}
		getCanvasSize() {
			let t = 0,
				e = 0,
				a = this.getNodeCanvas();
			return {
				width: t = a.width,
				height: e = a.height
			}
		}
		getCanvasOriginSize() {
			let t = 0,
				e = 0,
				a = this.getNodeCanvas(),
				i = (a.getComponent(_cc.Canvas), _cc.view.getFrameSize()),
				s = i.width / i.height,
				n = a.width / a.height;
			return t = a.width, e = a.height, s < n ? e = Math.floor(e * n / s) : t = Math.floor(t * s / n), {
				width: t,
				height: e
			}
		}
		showReferenceRect(t, e, a, i, s, n, o) {
			ULLog.console.log("MCPanelCreator.showReferenceRect", t, e, a, i, s);
			let r = _cc.view.getFrameSize(),
				l = e * r.width,
				c = r.height - a * r.height;
			ULLog.console.log("  center", l, c);
			let h = this.getNodeCanvas(),
				d = this.getCanvasSize(),
				_ = this.getCanvasOriginSize(),
				g = l / r.width * _.width - (_.width - d.width) / 2,
				u = _.height - c / r.height * _.height - (_.height - d.height) / 2,
				m = h.convertToNodeSpaceAR(_cc.v2(g, u));
			ULLog.console.log("  pInWorld", m), this.hideReferenceRect(t), _cc.loader.loadRes("_ulsdk_ui/white_dot", _cc.SpriteFrame, (r, l) => {
				let c = new _cc.Node;
				c.parent = h, c.addComponent(_cc.Sprite).spriteFrame = l, c.setAnchorPoint(null == n ? .5 : n, null == o ? .5 : o), c.color = _cc.color(0, 0, 0, 127), c.opacity = 127, c.position = m, c.width = i, c.height = s, c.zIndex = _cc.macro.MAX_ZINDEX;
				let d = new _cc.Node;
				d.parent = c;
				let _ = d.addComponent(_cc.Label);
				_.string = t, _.fontSize = 18, _.verticalAlign = _cc.Label.VerticalAlign.CENTER, _.horizontalAlign = _cc.Label.HorizontalAlign.CENTER;
				let g = d.addComponent(_cc.Widget);
				g.isAlignVerticalCenter = !0, g.isAlignHorizontalCenter = !0, this.nodeReferenceRects[t] = c, c.__b_manual_destroy = !1;
				let u = new _cc.Node;
				u.parent = c, u.addComponent(_cc.Component).onDestroy = (() => {
					ULLog.console.log("MCPanelCreator.showReferenceRect triggerNode onDestroy", c.__b_manual_destroy), c.__b_manual_destroy || (ULLog.console.log("MCPanelCreator.showReferenceRect nodeRect被意外销毁，0.1秒后尝试重新创建提示"), ULTimer.callLater(.1, () => {
						this.showReferenceRect(t, e, a, i, s)
					}))
				})
			})
		}
		showReferenceRectFromViewPoint(t, e, a, i, s, n, o) {
			ULLog.console.log("MCPanelCreator.showReferenceRectFromViewPoint", t, e, a, i, s);
			let r = _cc.view.getFrameSize(),
				l = e / r.width,
				c = 1 - a / r.height;
			this.showReferenceRect(t, l, c, i, s, n, o)
		}
		showReferenceRectFromScale(t, e, a, i, s, n, o) {
			let r = this.getCanvasSize(),
				l = r.width * i,
				c = r.height * s;
			this.showReferenceRect(t, e, a, l, c, n, o)
		}
		hideReferenceRect(t) {
			ULLog.console.log("MCPanelCreator.hideReferenceRect", t);
			let e = this.nodeReferenceRects[t];
			_cc.isValid(e) && (e.__b_manual_destroy = !0, e.destroy(), e = null, delete this.nodeReferenceRects[t])
		}
		hideAllReferenceRects() {
			ULLog.console.log("MCPanelCreator.hideAllReferenceRects"), ULTools.forEachMap(this.nodeReferenceRects, (t, e) => {
				this.hideReferenceRect(t)
			})
		}
		showNationBanner(t, e) {
			ULLog.console.log("MCPanelCreator.showNationBanner"), t = t || {
				nationData: {
					title: null,
					desc: null,
					icon: null,
					url: null,
					targetTitle: null
				},
				onShow: null,
				onError: null,
				onClick: null,
				onClose: null
			};
			let a = this.getNodeCanvas();
			if (!a) return ULLog.console.warn("MCPanelCreator.showNationBanner nodeCanvas not found!"), void(t.onError && t.onError("nodeCanvas not found!"));
			if (this.bannerRootNode) return ULLog.console.warn("MCPanelCreator.showNationBanner 已经有 banner 正在展示中"), void(t.onError && t.onError("已经有 banner 正在展示中"));
			let i = e.width;
			this.bannerShowingObj = t;
			let s = this.getCanvasSize(),
				n = Math.min(s.width, s.height) * i,
				o = n / 3.5,
				r = new _cc.Node;
			r.parent = a, r.setContentSize(n, o), r.zIndex = _cc.macro.MAX_ZINDEX - 10, r.y = (s.height - o) * (e.y - .5), r.x = (s.width - n) * (e.x - .5), this.addFillerSprite(r, _cc.color(255, 255, 255, 255)), this.bannerRootNode = r, this.registerTouchHandler(r, e => {
				this.isTouchEventClick(e) && (ULLog.console.log("MCPanelCreator:click nationBanner"), t.onClick && t.onClick())
			});
			let l = new _cc.Node;
			l.parent = r, l.setContentSize(34 * i, 34 * i), l.y = (r.height - l.height) / 2, l.x = (r.width - l.width) / 2, _cc.loader.loadRes("_ulsdk_ui/native_adv_close", _cc.SpriteFrame, (t, e) => {
				if (t) return void ULLog.console.warn("MCPanelCreator.showNationBanner closeButton load sprite error", t);
				let a = l.getContentSize();
				l.addComponent(_cc.Sprite).spriteFrame = e, l.setContentSize(a)
			}), this.registerTouchHandler(l, t => {
				this.isTouchEventClick(t) && this.closeNationBanner(!0)
			});
			let c = new _cc.Node;
			c.parent = r, c.setContentSize(44 * i, 24 * i), c.y = (c.height - r.height) / 2, c.x = (r.width - c.width) / 2, _cc.loader.loadRes("_ulsdk_ui/native_adv_tag", _cc.SpriteFrame, (t, e) => {
				if (t) return void ULLog.console.warn("MCPanelCreator.showNationBanner advTag load sprite error", t);
				let a = c.getContentSize();
				c.addComponent(_cc.Sprite).spriteFrame = e, c.setContentSize(a)
			});
			let h = new _cc.Node;
			h.parent = r, h.setContentSize(o / 9 * 16, o);
			let d = t.nationData.url || null;
			d && (ULLog.console.warn("MCPanelCreator.showNationBanner load imageUrl:", d), _cc.loader.load({
				url: d,
				type: "png"
			}, (t, e) => {
				if (ULLog.console.warn("MCPanelCreator.showNationBanner load imageUrl callback err:", t), t) return void ULLog.console.warn("MCPanelCreator.showNationBanner imageNode load sprite error", t);
				let a = h.getContentSize(),
					i = h.addComponent(_cc.Sprite),
					s = new _cc.SpriteFrame;
				s.setTexture(e), i.spriteFrame = s, h.setContentSize(a)
			}));
			let _ = h.getContentSize(),
				g = .6 * Math.min(o, (n - _.width) / 2),
				u = g,
				m = {
					width: g,
					height: g / 16 * 5
				},
				p = new _cc.Node;
			p.parent = r, p.setContentSize(g, u), p.y = m.height / 2, p.x = -(n - _.width) / 4 - _.width / 2;
			let S = t.nationData.icon || null;
			S ? (ULLog.console.warn("MCPanelCreator.showNationBanner load iconUrl:", S), _cc.loader.load({
				url: S,
				type: "png"
			}, (t, e) => {
				if (ULLog.console.warn("MCPanelCreator.showNationBanner load iconUrl callback err:", t), t) return void ULLog.console.warn("MCPanelCreator.showNationBanner iconNode load sprite error", t);
				let a = p.getContentSize(),
					i = p.addComponent(_cc.Sprite),
					s = new _cc.SpriteFrame;
				s.setTexture(e), i.spriteFrame = s, p.setContentSize(a)
			})) : this.addFillerSprite(p, _cc.color(220, 0, 50, 255));
			let b = new _cc.Node;
			b.parent = r, b.setContentSize(m.width, m.height), b.y = -o / 2 + ((o - u) / 2 + p.y) / 2, b.x = p.x, this.addFillerSprite(b, _cc.color(100, 220, 50, 255));
			let L = new _cc.Node;
			L.parent = b, L.addComponent(_cc.Label).string = t.nationData.targetTitle || "点击查看", L.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, L.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, L.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, L.getComponent(_cc.Label).fontSize = 18, L.addComponent(_cc.LabelOutline), L.getComponent(_cc.LabelOutline), L.getComponent(_cc.LabelOutline).width = 1, L.getComponent(_cc.LabelOutline).color = _cc.color(100, 220, 50, 255), L.setContentSize(m.width, m.height);
			let I = (n - _.width) / 2 * .8,
				A = new _cc.Node;
			A.parent = r, A.color = _cc.color(0, 0, 0, 255), A.addComponent(_cc.Label).string = t.nationData.title || "", A.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, A.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, A.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.LEFT, A.getComponent(_cc.Label).fontSize = 24, A.getComponent(_cc.Label).lineHeight = 24, A.setContentSize(I, 36 * i), A.y = (p.height - 36 * i) / 2, A.x = +(n - _.width) / 4 + _.width / 2;
			let E = new _cc.Node;
			E.parent = r, E.color = _cc.color(0, 0, 0, 255), E.addComponent(_cc.Label).string = t.nationData.desc || "", E.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, E.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.TOP, E.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.LEFT, E.getComponent(_cc.Label).fontSize = 18, E.getComponent(_cc.Label).lineHeight = 20, E.setContentSize(I, 80 * i), E.y = (p.height - 80 * i) / 2 - A.height, E.x = +(n - _.width) / 4 + _.width / 2, t.onShow && t.onShow()
		}
		closeNationBanner(t = !1) {
			this.bannerRootNode && (this.bannerRootNode.destroy(), this.bannerRootNode = null, ULLog.console.log("MCPanelCreator:close nationBanner"), this.bannerShowingObj && this.bannerShowingObj.onClose && this.bannerShowingObj.onClose(t), this.bannerShowingObj = null)
		}
		showNationInter(t) {
			ULLog.console.log("MCPanelCreator.showNationInter"), t = t || {
				nationData: {
					title: null,
					desc: null,
					icon: null,
					url: null,
					targetTitle: null
				},
				onShow: null,
				onError: null,
				onClick: null,
				onClose: null
			};
			let e = this.getNodeCanvas();
			if (!e) return ULLog.console.warn("MCPanelCreator.showNationInter nodeCanvas not found!"), void(t.onError && t.onError("nodeCanvas not found!"));
			if (this.interRootNode) return ULLog.console.warn("MCPanelCreator.showNationInter 已经有 inter 正在展示中"), void(t.onError && t.onError("已经有 inter 正在展示中"));
			this.interShowingObj = t;
			let a = this.getCanvasSize(),
				i = new _cc.Node;
			i.parent = e, i.setContentSize(a.width, a.height), i.zIndex = _cc.macro.MAX_ZINDEX - 11, this.interRootNode = i;
			let s = new _cc.Node;
			s.parent = i, s.setContentSize(i.getContentSize()), this.addFillerSprite(s, _cc.color(0, 0, 0, 127)), this.registerTouchHandler(s, t => {
				this.isTouchEventClick(t) && console.log("MCPanelCreator:click nationInter bg")
			});
			let n = .86 * Math.min(a.width, a.height),
				o = n,
				r = new _cc.Node;
			r.parent = i, r.setContentSize(n, o), this.registerTouchHandler(r, t => {
				this.isTouchEventClick(t) && console.log("MCPanelCreator:click contentNode bg")
			});
			let l = new _cc.Node;
			l.parent = r, l.setContentSize(n, n / 16 * 9), l.y = (r.height - l.height) / 2, l.x = (l.width - r.width) / 2, this.addFillerSprite(l, _cc.color(255, 255, 255, 255));
			let c = t.nationData.url || null;
			if (c) {
				let t = new _cc.Node;
				t.parent = l, t.setContentSize(n, n / 16 * 9), ULLog.console.warn("MCPanelCreator.showNationInter load imageUrl:", c), _cc.loader.load({
					url: c,
					type: "png"
				}, (e, a) => {
					if (ULLog.console.warn("MCPanelCreator.showNationInter load imageUrl callback err:", e), e) return void ULLog.console.warn("MCPanelCreator.showNationInter imageNode load sprite error", e);
					let i = t.getContentSize(),
						s = t.addComponent(_cc.Sprite),
						n = new _cc.SpriteFrame;
					n.setTexture(a), s.spriteFrame = n, t.setContentSize(i)
				})
			}
			this.registerTouchHandler(l, e => {
				this.isTouchEventClick(e) && (ULLog.console.log("MCPanelCreator:click nationInter"), t.onClick && t.onClick())
			});
			let h = new _cc.Node;
			h.parent = l, h.setContentSize(34, 34), h.y = (l.height - h.height) / 2, h.x = (l.width - h.width) / 2, _cc.loader.loadRes("_ulsdk_ui/native_adv_close", _cc.SpriteFrame, (t, e) => {
				if (t) return void ULLog.console.warn("MCPanelCreator.showNationBanner closeButton load sprite error", t);
				let a = h.getContentSize();
				h.addComponent(_cc.Sprite).spriteFrame = e, h.setContentSize(a)
			}), this.registerTouchHandler(h, t => {
				this.isTouchEventClick(t) && this.closeNationInter(!0)
			});
			let d = new _cc.Node;
			d.parent = l, d.setContentSize(44, 24), d.y = (d.height - l.height) / 2, d.x = (l.width - d.width) / 2, _cc.loader.loadRes("_ulsdk_ui/native_adv_tag", _cc.SpriteFrame, (t, e) => {
				if (t) return void ULLog.console.warn("MCPanelCreator.showNationBanner advTag load sprite error", t);
				let a = d.getContentSize();
				d.addComponent(_cc.Sprite).spriteFrame = e, d.setContentSize(a)
			});
			let _ = n / 7,
				g = _,
				u = new _cc.Node;
			u.parent = l, u.setContentSize(_, g), u.y = (l.height - g) / 2 - .02 * o, u.x = (_ - l.width) / 2 + .02 * n;
			let m = t.nationData.icon || null;
			m ? (ULLog.console.warn("MCPanelCreator.showNationInter load iconUrl:", m), _cc.loader.load({
				url: m,
				type: "png"
			}, (t, e) => {
				if (ULLog.console.warn("MCPanelCreator.showNationInter load iconUrl callback err:", t), t) return void ULLog.console.warn("MCPanelCreator.showNationInter iconNode load sprite error", t);
				let a = u.getContentSize(),
					i = u.addComponent(_cc.Sprite),
					s = new _cc.SpriteFrame;
				s.setTexture(e), i.spriteFrame = s, u.setContentSize(a)
			})) : this.addFillerSprite(u, _cc.color(220, 0, 50, 255));
			let p = new _cc.Node;
			p.parent = i, p.color = _cc.color(255, 255, 255, 255), p.addComponent(_cc.Label).string = t.nationData.desc || t.nationData.title || "", p.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, p.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.TOP, p.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, p.getComponent(_cc.Label).fontSize = 24, p.getComponent(_cc.Label).lineHeight = 24, p.addComponent(_cc.LabelOutline), p.getComponent(_cc.LabelOutline), p.getComponent(_cc.LabelOutline).width = 1, p.getComponent(_cc.LabelOutline).color = _cc.color(0, 0, 0, 255), p.setContentSize(r.width, 36), p.y = (r.height - p.height) / 2 - l.height - 10;
			let S = n / 2.5,
				b = new _cc.Node;
			b.parent = r, b.setContentSize(S, S / 16 * 5), b.y = (r.height - b.height) / 2 - l.height - 10 - p.height - 10, this.addFillerSprite(b, _cc.color(100, 220, 50, 255));
			let L = new _cc.Node;
			L.parent = b, L.addComponent(_cc.Label).string = t.nationData.targetTitle || "点击查看", L.getComponent(_cc.Label).overflow = _cc.Label.Overflow.SHRINK, L.getComponent(_cc.Label).verticalAlign = _cc.Label.VerticalAlign.CENTER, L.getComponent(_cc.Label).horizontalAlign = _cc.Label.HorizontalAlign.CENTER, L.getComponent(_cc.Label).fontSize = 24, L.addComponent(_cc.LabelOutline), L.getComponent(_cc.LabelOutline), L.getComponent(_cc.LabelOutline).width = 1, L.getComponent(_cc.LabelOutline).color = _cc.color(100, 220, 50, 255), L.width = b.width, L.height = b.height, this.registerTouchHandler(L, e => {
				this.isTouchEventClick(e) && (ULLog.console.log("MCPanelCreator:click nationInter"), t.onClick && t.onClick())
			}), t.onShow && t.onShow()
		}
		closeNationInter(t = !1) {
			this.interRootNode && (this.interRootNode.destroy(), this.interRootNode = null, ULLog.console.log("MCPanelCreator:close nationInter"), this.interShowingObj && this.interShowingObj.onClose && this.interShowingObj.onClose(t), this.interShowingObj = null)
		}
	}
	const BUTTON_WIDTH$1 = 150,
		BUTTON_HEIGHT$1 = 40,
		NEW_LINE_HEIGHT$1 = 20,
		FONT_SIZE$1 = 20,
		PENDING$1 = 10,
		GAP$1 = 4;
	class MCPanelLaya {
		constructor() {
			this.nodeReferenceRects = {}
		}
		getRootNode() {
			return Laya.stage.getChildByName("__ulsdk_ui_node_root__")
		}
		registerTouchHander(t, e) {
			let a, i;
			t.on(Laya.Event.MOUSE_DOWN, t, s => {
				t.__b_touch = !0, a = s.stageX, i = s.stageY, e({
					name: "began",
					pos: {
						x: s.stageX,
						y: s.stageY
					}
				})
			}), t.on(Laya.Event.MOUSE_UP, t, a => {
				t.__b_touch && (t.__b_touch = !1, e({
					name: "ended",
					pos: {
						x: a.stageX,
						y: a.stageY
					}
				}))
			}), t.on(Laya.Event.MOUSE_MOVE, t, a => {
				1 == t.__b_touch && e({
					name: "moved",
					pos: {
						x: a.stageX,
						y: a.stageY
					}
				})
			}), t.on(Laya.Event.MOUSE_OUT, t, a => {
				t.__b_touch && (t.__b_touch = !1, e({
					name: "cancelled",
					pos: {
						x: a.stageX,
						y: a.stageY
					}
				}))
			}), t.on(Laya.Event.CLICK, t, t => {
				if (t.stopPropagation(), null != a && null != i) {
					let e = t.stageX - a,
						s = t.stageY - i;
					if (e * e + s * s >= 400) return
				}
				e({
					name: "click",
					pos: {
						x: t.stageX,
						y: t.stageY
					}
				})
			})
		}
		createItemByData(t) {
			let e = new MCItem;
			e.initByData(t);
			let a = this.nodeContainer;
			switch (ULConst.B_INNER_DEBUG && ULLog.console.log("createItemByData", t), t.type) {
				case "label": {
					let t = a.addChild(new Laya.Label);
					t.fontSize = FONT_SIZE$1, t.align = "left", t.color = "#ffffff", t.text = e.text, ULConst.B_INNER_DEBUG && ULLog.console.log("createLabel", t.width, t.height), e.width = t.width, e.height = t.height, e.renderNode = t;
					break
				}
				case "labelArea": {
					let t = a.addChild(new Laya.Label);
					t.width = a.width - 2 * PENDING$1, t.wordWrap = !0, t.fontSize = FONT_SIZE$1, t.align = "left", t.color = "#ffffff", t.text = e.text, ULConst.B_INNER_DEBUG && ULLog.console.log("createLabel", t.width, t.height), e.width = t.width, e.height = t.height, e.renderNode = t;
					break
				}
				case "button": {
					let t = a.addChild(new Laya.Sprite);
					t.size(BUTTON_WIDTH$1, BUTTON_HEIGHT$1), t.graphics.drawRect(0, 0, BUTTON_WIDTH$1, BUTTON_HEIGHT$1, "#c8c8c8ff");
					let i = t.addChild(new Laya.Label);
					i.fontSize = FONT_SIZE$1, i.color = "#000000", i.align = "center", i.text = e.text, i.pos(BUTTON_WIDTH$1 / 2 - i.width / 2, BUTTON_HEIGHT$1 / 2 - i.height / 2), this.registerTouchHander(t, t => {
						ULConst.B_INNER_DEBUG && ULLog.console.log("onTouch button", e.text, t.name), "began" == t.name ? (i.color = "#00ff00", i._tf.isChanged = !0) : "moved" == t.name || (i.color = "#000000", i._tf.isChanged = !0), ULConst.B_INNER_DEBUG && ULLog.console.log("  label.color", i.color), "click" == t.name && e.triggerOnClick()
					}), e.width = t.width, e.height = t.height, e.renderNode = t;
					break
				}
				case "inputBox": {
					let t = a.addChild(new Laya.Sprite);
					t.size(e.width || BUTTON_WIDTH$1, e.height || BUTTON_HEIGHT$1), t.graphics.drawRect(0, 0, BUTTON_WIDTH$1, BUTTON_HEIGHT$1, "#c8c8c8ff");
					let i = t.addChild(new Laya.TextInput);
					i.size(t.width - 4, t.height), i.pos(2, 0), i.fontSize = FONT_SIZE$1, i.color = "#000000", i.align = "left", i.on("keyup", this, t => {
						e.setText(i.text)
					}), t.textInput = i, e.width = t.width, e.height = t.height, e.renderNode = t;
					break
				}
				case "newLine":
					e.width = a.width - 2 * PENDING$1, e.height = NEW_LINE_HEIGHT$1
			}
			return e
		}
		doLayout() {
			if (!this.items) return;
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelCreator.doLayout"), ULConst.B_INNER_DEBUG && ULLog.console.log("  items", this.items);
			let t = this.nodePanel.width - 20,
				e = [],
				a = PENDING$1,
				i = PENDING$1,
				s = 0;
			for (let n = 0; n < this.items.length; n++) {
				let o = this.items[n],
					r = o.renderNode || {
						x: 0,
						y: 0
					};
				if (a + o.width > t) {
					a = 0, ULConst.B_INNER_DEBUG && ULLog.console.log("清空一行"), ULConst.B_INNER_DEBUG && ULLog.console.log("  rowHeight", s);
					for (let t = 0; t < e.length; t++) {
						let a = e[t].renderNode || {
							x: 0,
							y: 0
						};
						a.y = i + s / 2 - a.height / 2, ULConst.B_INNER_DEBUG && ULLog.console.log("  set y", t, a.y)
					}
					a = PENDING$1, i += s + GAP$1, e = [], s = 0
				}
				s = Math.max(s, o.height), e.push(o), r.x = a, a += o.width + GAP$1
			}
			for (let t = 0; t < e.length; t++) {
				(e[t].renderNode || {
					x: 0,
					y: 0
				}).y = i
			}
			i += s + PENDING$1, ULConst.B_INNER_DEBUG && ULLog.console.log("finish"), ULConst.B_INNER_DEBUG && ULLog.console.log("  rowTop", i), this.nodeContainer.height = Math.max(this.nodePanel.height, i)
		}
		onItemNodeResize() {
			this.doLayout()
		}
		getItemByName(t) {
			for (let e = 0; e < this.items.length; e++) {
				const a = this.items[e];
				if (a.name == t) return a
			}
			return null
		}
		show(t) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.show", t);
			let e = this.getRootNode();
			if (!e) return;
			let a = Laya.stage.width,
				i = Laya.stage.height,
				s = e.addChild(new Laya.Sprite);
			s.size(a, i), s.pos(-a / 2, -i / 2), this.nodePanel = s;
			let n = s.addChild(new Laya.Sprite);
			n.size(a, i), n.graphics.drawRect(0, 0, a, i, "#000000BF", null, null), this.registerTouchHander(n, t => {
				"click" == t.name && ULConst.B_INNER_DEBUG && ULLog.console.log("click spriteBg")
			});
			let o = s.addChild(new Laya.Panel);
			o.size(a, i), this.registerTouchHander(o, t => {
				if ("began" == t.name) o._downX = o.x, o._downY = o.y, o._downTouchX = t.pos.x, o._downTouchY = t.pos.y;
				else if ("moved" == t.name) {
					let e = t.pos.x - o._downTouchX,
						a = t.pos.y - o._downTouchY,
						i = o._downY + a;
					i = Math.min(0, i), ULConst.B_INNER_DEBUG && ULLog.console.log("move", e, a, i), o.y = i
				}
			}), this.nodeContainer = o;
			let r = [];
			for (let e = 0; e < t.length; e++) {
				const a = t[e];
				let i = this.createItemByData(a);
				r.push(i)
			}
			this.items = r, this.doLayout()
		}
		close() {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.close"), this.nodePanel && this.nodePanel.destroy(), this.nodePanel = null, this.items = []
		}
		showPickerDialog(t, e, a, i) {
			let s = this.getRootNode();
			if (!s) return;
			let n = Laya.stage.width,
				o = Laya.stage.height,
				r = ULTools.scaleInRange(e.length, 8.5, 17.5, 430, 826),
				l = s.addChild(new Laya.Sprite);
			l.size(n, o), l.pos(-n / 2, -o / 2), l.graphics.drawRect(0, 0, n, o, "#00000080"), this.registerTouchHander(l, t => {
				"click" == t.name && (ULConst.B_INNER_DEBUG && ULLog.console.log("click nodeShadow"), l.destroy())
			});
			let c = l.addChild(new Laya.Sprite);
			c.size(n - 100, r), c.pos(n / 2 - c.width / 2, o / 2 - c.height / 2), c.graphics.drawRect(0, 0, c.width, c.height, "#a7a7a7ff"), this.registerTouchHander(c, t => {
				"click" == t.name && ULConst.B_INNER_DEBUG && ULLog.console.log("click nodeDialog")
			});
			let h = c.addChild(new Laya.Label);
			h.fontSize = 36, h.align = "left", h.pos(5, 10), h.text = t || "标题";
			let d = c.addChild(new Laya.Sprite);
			d.size(c.width - 10, c.height - 55), d.pos(5, 50), d.graphics.drawRect(0, 0, d.width, d.height, "#616161ff");
			let _ = d.width,
				g = 40,
				u = this;
			let m = d.addChild(new Laya.List);
			m.itemRender = class extends Laya.Box {
				constructor() {
					super(), ULConst.B_INNER_DEBUG && ULLog.console.log("item.construct", this), this.size(_, g), this.graphics.drawRect(0, 0, _, g, "#0000003f");
					let t = this.addChild(new Laya.Label);
					t.fontSize = FONT_SIZE$1, t.align = "left", t.color = "#ffffff", t.text = "文字", t.pos(5, g / 2 - t.height / 2), u.registerTouchHander(this, t => {
						"click" == t.name && (a(this.data.value), i || l.destroy())
					}), this.label = t
				}
				fillData(t) {
					this.label.text = t.text, this.label.y = g / 2 - this.label.height / 2, this.data = t
				}
			}, m.vScrollBarSkin = "", m.spaceY = 4, m.array = e, m.pos(0, 0), m.size(d.width, d.height), m.selectEnable = !0, m.selectHandler = new Laya.Handler(this, (t, e, a) => {
				ULConst.B_INNER_DEBUG && ULLog.console.log("selectHander", t, e, a)
			}), m.renderHandler = new Laya.Handler(this, (t, e) => {
				ULConst.B_INNER_DEBUG && ULLog.console.log("renderHandler", t, e), t.fillData(t._dataSource)
			})
		}
		getItemText(t) {
			let e = this.getItemByName(t);
			return e ? e.renderNode.textInput.text ? e.renderNode.textInput.text : e.text : ""
		}
		setItemText(t, e) {
			let a = this.getItemByName(t);
			if (ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelCreator.setItemText", t, e, a), !a) return;
			a.setText(e);
			let i = a.renderNode;
			i instanceof Laya.Label ? (i.text = e, a.width = i.width, a.height = i.height, this.onItemNodeResize()) : i.textInput instanceof Laya.TextInput && (i.textInput.text = e)
		}
		showMsgTip(t) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.showMsgTip");
			let e = this.getRootNode();
			if (!e) return;
			let a = Laya.stage.width,
				i = Laya.stage.height,
				s = e.addChild(new Laya.Label);
			s.width = a - 10, s.wordWrap = !0, s.fontSize = 20, s.align = "center", s.color = "#ffffff", s.text = t, s.pos(-a / 2, .25 * -i), Laya.Tween.to(s, {
				y: .25 * -i - 100
			}, 1e3, null, new Laya.Handler(this, () => {
				Laya.Tween.to(s, {
					alpha: 0,
					y: .25 * -i - 150
				}, 500, null, new Laya.Handler(this, () => {
					s.destroy()
				}))
			}))
		}
		showPromptDialog(t, e, a, i) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.showPromptDialog");
			let s = this.getRootNode();
			if (!s) return ULLog.console.warn("MCPanelLaya.showPromptDialog nodeRoot not found!"), void ULTimer.callLater(.1, () => {
				this.showPromptDialog(t, e, a, i)
			});
			let n = Laya.stage.width,
				o = Laya.stage.height,
				r = s.addChild(new Laya.Sprite);
			r.size(n, o), r.pos(-n / 2, -o / 2), r.graphics.drawRect(0, 0, n, o, "#00000080"), this.registerTouchHander(r, t => {
				"click" == t.name && ULConst.B_INNER_DEBUG && ULLog.console.log("click nodeShadow")
			});
			let l = r.addChild(new Laya.Image);
			l.skin = "res/_ulsdk_ui/bg_01.png", l.sizeGrid = "40,40,40,40,0", l.size(460, 320), l.pos(n / 2 - l.width / 2, o / 2 - l.height / 2);
			let c = l.addChild(new Laya.Label);
			c.fontSize = 32, c.align = "center", c.color = "#262626", c.text = t || "标题", c._tf.isChanged = !0, c.pos(l.width / 2 - c.width / 2, 20);
			let h = l.addChild(new Laya.Label);
			h.fontSize = 24, h.align = "center", h.color = "#606060", h.wordWrap = !0, h.width = l.width - 50, h.text = e || "正文", h._tf.isChanged = !0, h.pos(l.width / 2 - h.width / 2, 145 - h.height / 2);
			let d = -(160 * a.length + 30 * (a.length - 1)) / 2;
			for (let t = 0; t < a.length; t++) {
				const e = a[t];
				let s = l.addChild(new Laya.Image);
				s.pos(l.width / 2 + d + 160 * (t + .5) + 30 * t, l.height - 50), s.skin = "res/_ulsdk_ui/btn_01.png", s.sizeGrid = "27,27,27,27,1", s.size(160, 56), s.anchorX = .5, s.anchorY = .5;
				let n = s.addChild(new Laya.Label);
				n.fontSize = 30, n.align = "center", n.text = e || "按钮" + (t + 1), n.color = "#ffffff", n.pos(s.width / 2 - n.width / 2, s.height / 2 - n.height / 2), this.registerTouchHander(s, e => {
					if ("began" == e.name ? s.scale(1.1, 1.1) : "moved" == e.name || s.scale(1, 1), "click" == e.name) {
						let e = i[t];
						if (e instanceof Function) {
							e() || r.destroy()
						} else r.destroy()
					}
				})
			}
		}
		showWebView(t, e) {
			this.closeWebView();
			let a = this.getRootNode();
			if (!a) return;
			let i = Laya.stage.width,
				s = Laya.stage.height,
				n = a.addChild(new Laya.Sprite);
			n.size(i, s), n.pos(-i / 2, -s / 2), n.graphics.drawRect(0, 0, i, s, "#0000007F"), this.showWebViewNode = n, this.registerTouchHander(n, t => {
				"click" == t.name && (ULConst.B_INNER_DEBUG && ULLog.console.log("click nodeShadow"), n.destroy())
			});
			let o = Math.min(.8 * i, 500),
				r = Math.min(.8 * s, 800);
			i > s && (o = Math.min(.8 * i, 800), r = Math.min(.8 * s, 500));
			let l = n.addChild(new Laya.Image);
			l.skin = "res/_ulsdk_ui/bg_01.png", l.sizeGrid = "40,40,40,40,0", l.size(o, r), l.pos(i / 2 - l.width / 2, s / 2 - l.height / 2);
			let c = l.addChild(new Laya.Label);
			c.fontSize = 32, c.align = "center", c.color = "#262626", c.text = t || "标题", c._tf.isChanged = !0, c.pos(l.width / 2 - c.width / 2, 20), ULTools.httpGet({
				url: e,
				timeoutMillisecond: 5e3,
				success: t => {
					let e = JSON.parse(t).policyText;
					let a = l.addChild(new Laya.List);
					a.repeatY = 1, a.itemRender = class extends Laya.Box {
						constructor() {
							super(), ULConst.B_INNER_DEBUG && ULLog.console.log("item.construct", this);
							let t = this.addChild(new Laya.Label);
							t.fontSize = 18, t.leading = 8, t.align = "left", t.color = "#606060", t.wordWrap = !0, t.width = o - 50, t.text = e, t.pos(0, 2), t._tf.isChanged = !0
						}
					}, a.vScrollBarSkin = "", a.spaceY = 4, a.array = ["正文"], a.pos(25, 65), a.size(o - 50, r - 70), a.selectEnable = !0, a.selectHandler = new Laya.Handler(this, (t, e, a) => {
						ULConst.B_INNER_DEBUG && ULLog.console.log("selectHander", t, e, a)
					})
				},
				fail: () => {}
			})
		}
		closeWebView() {
			this.showWebViewNode && (this.showWebViewNode.destroy(), this.showWebViewNode = null)
		}
		showPrivacyDialog(t, e, a, i) {
			if (ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.showPrivacyDialog"), this.showPrivacyNode) return;
			let s = this.getRootNode();
			if (!s) return ULLog.console.warn("MCPanelLaya.showPrivacyDialog nodeRoot not found!"), void ULTimer.callLater(.1, () => this.showPrivacyDialog(t, e, a, i));
			let n = Laya.stage.width,
				o = Laya.stage.height,
				r = s.addChild(new Laya.Sprite);
			r.size(n, o), r.pos(-n / 2, -o / 2), r.graphics.drawRect(0, 0, n, o, "#0000007F"), this.showPrivacyNode = r;
			let l = 400,
				c = r.addChild(new Laya.Image);
			c.skin = "res/_ulsdk_ui/bg_01.png", c.sizeGrid = "40,40,40,40,0", c.size(l, 400), c.pos(n / 2 - c.width / 2, o / 2 - c.height / 2);
			let h = c.addChild(new Laya.Label);
			h.fontSize = 32, h.align = "center", h.color = "#606060", h.text = t || "标题", h._tf.isChanged = !0, h.pos(c.width / 2 - h.width / 2, 20);
			let d = "感谢您对本公司游戏的支持，在体验我们的游戏前，请仔细阅读开发商的",
				_ = [],
				g = {};
			for (let t = 0; t < e.length; t++) {
				const a = e[t];
				let i = a.name || "",
					s = a.url || "";
				_.push(i), g[i] = s
			}
			let u = "中的所有条款，包括\n        1.为了您有良好的游戏体验，我们会基于具体的场景收集您的个人信息\n        2.我们会基于先进的技术和管理措施保证您的个人信息安全\n        3.基于您的授权，我们会收集以下权限\n设备信息：包括设备标识符、MAC、机型、品牌、App包名、App版本号、IP地址、设备分辨率及像素密度。\n网络信息：网络连接状态、接入网络的方式和类型、IP地址。\n使用信息：包括广告内容的展现、点击、下载。\n        如果您对本隐私政策有任何疑问,请通过kefu@ultralisk.cn与我们联系。\n        ",
				m = this;
			let p = c.addChild(new Laya.List);
			p.repeatY = 1, p.itemRender = class extends Laya.Box {
				constructor() {
					super(), ULConst.B_INNER_DEBUG && ULLog.console.log("item.construct", this);
					let t = this.addChild(new Laya.Label);
					t.fontSize = 18, t.leading = 8, t.align = "left", t.color = "#606060", t.wordWrap = !0, t.width = l - 50, t.text = d, t.pos(0, 2), t._tf.isChanged = !0;
					let e = t.height;
					for (let t = 0; t < _.length; t++) {
						const a = _[t];
						let i = this.addChild(new Laya.Label);
						i.fontSize = 18, i.leading = 8, i.align = "left", i.color = "#6495ED", i.wordWrap = !0, i.width = l - 50, i.text = `《${a}》`, i.pos(0, e), i._tf.isChanged = !0, e += i.height, m.registerTouchHander(i, t => {
							"click" == t.name && m.showWebView(a, g[a])
						})
					}
					let a = this.addChild(new Laya.Label);
					a.fontSize = 18, a.leading = 8, a.align = "left", a.color = "#606060", a.wordWrap = !0, a.width = l - 50, a.text = u, a.pos(0, e), a._tf.isChanged = !0
				}
			}, p.vScrollBarSkin = "", p.spaceY = 4, p.array = ["正文"], p.pos(25, 65), p.size(l - 50, 260), p.selectEnable = !0, p.selectHandler = new Laya.Handler(this, (t, e, a) => {
				ULConst.B_INNER_DEBUG && ULLog.console.log("selectHander", t, e, a)
			});
			let S = (l - 20) / a.length;
			for (let t = 0; t < a.length; t++) {
				const e = a[t];
				let s = c.addChild(new Laya.Label);
				s.fontSize = 22, s.align = "center", s.valign = "middle", s.text = e, 1 == a.length || t % 2 == 1 ? (s.color = "#ffffff", s.bgColor = "#6495ED") : (s.color = "#9CB0DE", s.bgColor = "#E6E6E6"), s.width = Math.min(.8 * S, 120), s.height = 40, s.x = S * t + (S - s.width) / 2 + 10, s.y = c.height - 60, this.registerTouchHander(s, e => {
					if ("click" == e.name) {
						let e = i[t];
						if (e instanceof Function) {
							e() || (this.showPrivacyNode.destroy(), this.showPrivacyNode = null)
						} else this.showPrivacyNode.destroy(), this.showPrivacyNode = null
					}
				})
			}
		}
		showReferenceRect(t, e, a, i, s, n, o) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.showReferenceRect", t, e, a, i, s, n, o);
			let r = this.getRootNode();
			if (!r) return ULLog.console.warn("MCPanelLaya.showReferenceRect nodeRoot not found!"), void ULTimer.callLater(.1, () => {
				this.showReferenceRect(t, e, a, i, s, n, o)
			});
			null == n && (n = .5), null == o && (o = .5), this.hideReferenceRect(t);
			let l = Laya.stage.width,
				c = Laya.stage.height,
				h = e * l,
				d = c - a * c,
				_ = r.addChild(new Laya.Sprite);
			_.size(i, s), _.pivot(i * n, s * (1 - o));
			let g = r.globalToLocal(new Laya.Point(h, d));
			_.pos(g.x, g.y), _.graphics.drawRect(0, 0, i, s, "#00000080");
			let u = _.addChild(new Laya.Label);
			u.fontSize = 30, u.align = "center", u.text = t, u.color = "#ffffff", u.pos(_.width / 2 - u.width / 2, _.height / 2 - u.height / 2), this.nodeReferenceRects[t] = _
		}
		showReferenceRectFromViewPoint(t, e, a, i, s, n, o) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.showReferenceRectFromViewPoint", t, e, a, i, s, n, o), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.clientWidth", Laya.Browser.clientWidth), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.clientHeight", Laya.Browser.clientHeight), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.pixelRatio", Laya.Browser.pixelRatio), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.width", Laya.Browser.width), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.height", Laya.Browser.height), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.stage.width", Laya.stage.width), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.stage.height", Laya.stage.height);
			let r = Laya.Browser.clientWidth / Laya.stage.width,
				l = Laya.Browser.clientHeight / Laya.stage.height,
				c = Math.min(r, l);
			ULConst.B_INNER_DEBUG && ULLog.console.log("widthRatio", r), ULConst.B_INNER_DEBUG && ULLog.console.log("heightRatio", l), ULConst.B_INNER_DEBUG && ULLog.console.log("ratio", c);
			let h = Laya.stage.width * c,
				d = Laya.stage.height * c;
			ULConst.B_INNER_DEBUG && ULLog.console.log("viewWidth", h), ULConst.B_INNER_DEBUG && ULLog.console.log("viewHeight", d);
			let _ = e / h,
				g = 1 - a / d;
			this.showReferenceRect(t, _, g, i, s, n, o)
		}
		showReferenceRectFromScale(t, e, a, i, s, n, o) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.clientWidth", Laya.Browser.clientWidth), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.clientHeight", Laya.Browser.clientHeight), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.pixelRatio", Laya.Browser.pixelRatio), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.width", Laya.Browser.width), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.Browser.height", Laya.Browser.height), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.stage.width", Laya.stage.width), ULConst.B_INNER_DEBUG && ULLog.console.log("Laya.stage.height", Laya.stage.height);
			let r = Laya.Browser.clientWidth / Laya.stage.width,
				l = Laya.Browser.clientHeight / Laya.stage.height,
				c = Math.min(r, l);
			ULConst.B_INNER_DEBUG && ULLog.console.log("widthRatio", r), ULConst.B_INNER_DEBUG && ULLog.console.log("heightRatio", l), ULConst.B_INNER_DEBUG && ULLog.console.log("ratio", c);
			let h = Laya.stage.width * c,
				d = Laya.stage.height * c;
			ULConst.B_INNER_DEBUG && ULLog.console.log("viewWidth", h), ULConst.B_INNER_DEBUG && ULLog.console.log("viewHeight", d);
			let _ = h * i,
				g = d * s;
			this.showReferenceRect(t, e, a, _, g, n, o)
		}
		hideReferenceRect(t) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.hideReferenceRect", t);
			let e = this.nodeReferenceRects[t];
			e && !e.destroyed && e.destroy(), delete this.nodeReferenceRects[t]
		}
		hideAllReferenceRects() {
			ULConst.B_INNER_DEBUG && ULLog.console.log("MCPanelLaya.hideAllReferenceRects"), ULTools.forEachMap(this.nodeReferenceRects, (t, e) => {
				this.hideReferenceRect(t)
			})
		}
		showNationBanner(t, e) {
			ULLog.console.log("MCPanelLaya showNationBanner"), t = t || {
				nationData: {
					title: null,
					desc: null,
					icon: null,
					url: null,
					targetTitle: null
				},
				onShow: null,
				onError: null,
				onClick: null,
				onClose: null
			};
			let a = this.getRootNode();
			if (!a) return ULLog.console.warn("MCPanelLaya.showNationBanner nodeCanvas not found!"), void(t.onError && t.onError("nodeCanvas not found!"));
			if (this.bannerRootNode) return ULLog.console.warn("MCPanelLaya.showNationBanner 已经有 banner 正在展示中"), void(t.onError && t.onError("已经有 banner 正在展示中"));
			let i = e.width;
			this.bannerShowingObj = t;
			let s = {
					width: Laya.stage.width,
					height: Laya.stage.height
				},
				n = Math.min(s.width, s.height) * i,
				o = n / 3.5,
				r = (s.height - o) * (.5 - e.y) - o / 2,
				l = (s.width - n) * (e.x - .5) - n / 2,
				c = a.addChild(new Laya.Sprite);
			c.zOrder = 1010, c.size(n, o), c.pos(l, r), c.graphics.drawRect(0, 0, n, o, "#FFFFFFFF"), this.bannerRootNode = c, this.registerTouchHander(c, e => {
				"click" == e.name && (ULLog.console.log("MCPanelLaya:click nationBanner"), t.onClick && t.onClick())
			});
			let h = {
					width: 34 * i,
					height: 34 * i
				},
				d = c.addChild(new Laya.Image);
			d.skin = "res/_ulsdk_ui/native_adv_close.png", d.size(h.width, h.height), d.pos(n - h.width, 0), this.registerTouchHander(d, t => {
				"click" == t.name && this.closeNationBanner(!0)
			});
			let _ = {
					width: 44 * i,
					height: 24 * i
				},
				g = c.addChild(new Laya.Image);
			g.skin = "res/_ulsdk_ui/native_adv_tag.png", g.size(_.width, _.height), g.pos(n - _.width, o - _.height);
			let u = {
					width: o / 9 * 16,
					height: o
				},
				m = c.addChild(new Laya.Image);
			m.size(u.width, u.height), m.pos((n - u.width) / 2, 0);
			let p = t.nationData.url || null;
			p && (m.skin = p);
			let S = .6 * Math.min(o, (n - u.width) / 2),
				b = S,
				L = {
					width: S,
					height: S / 16 * 5
				},
				I = c.addChild(new Laya.Image);
			I.size(S, b), I.pos(((n - u.width) / 2 - S) / 2, (o - b) / 2 - L.height / 2);
			let A = t.nationData.icon || null;
			A ? I.skin = A : I.graphics.drawRect(0, 0, S, b, "#DC0032FF");
			let E = c.addChild(new Laya.Label);
			E.fontSize = 18 * i, E.align = "center", E.valign = "middle", E.color = "#ffffff", E.bgColor = "#64DC32", E.text = t.nationData.targetTitle || "点击查看", E.size(L.width, L.height), E.pos(((n - u.width) / 2 - S) / 2, (o + b + I.y) / 2 - L.height / 2);
			let f = {
					width: (n - u.width) / 2 * .8,
					height: 36 * i
				},
				C = c.addChild(new Laya.Label);
			C.fontSize = 24 * i, C.align = "left", C.valign = "middle", C.color = "#000000", C.text = t.nationData.title || "", C.size(f.width, f.height), C.pos(((n - u.width) / 2 - f.width) / 2 + n / 2 + u.width / 2, (o - b) / 2);
			let y = {
					width: f.width,
					height: 80 * i
				},
				T = c.addChild(new Laya.Label);
			T.fontSize = 18 * i, T.wordWrap = !0, T.align = "left", T.valign = "top", T.color = "#000000", T.text = t.nationData.desc || "", T.size(y.width, y.height), T.pos(((n - u.width) / 2 - f.width) / 2 + n / 2 + u.width / 2, (o - b) / 2 + f.height), t.onShow && t.onShow()
		}
		closeNationBanner(t = !1) {
			this.bannerRootNode && (this.bannerRootNode.destroy(), this.bannerRootNode = null, ULLog.console.log("MCPanelLaya:close nationBanner"), this.bannerShowingObj && this.bannerShowingObj.onClose && this.bannerShowingObj.onClose(t), this.bannerShowingObj = null)
		}
		showNationInter(t) {
			console.log("MCPanelLaya showNationInter"), t = t || {
				nationData: {
					title: null,
					desc: null,
					icon: null,
					url: null,
					targetTitle: null
				},
				onShow: null,
				onError: null,
				onClick: null,
				onClose: null
			};
			let e = this.getRootNode();
			if (!e) return ULLog.console.warn("MCPanelLaya.showNationInter nodeCanvas not found!"), void(t.onError && t.onError("nodeCanvas not found!"));
			if (this.interRootNode) return ULLog.console.warn("MCPanelLaya.showNationInter 已经有 inter 正在展示中"), void(t.onError && t.onError("已经有 inter 正在展示中"));
			this.interShowingObj = t;
			let a = {
					width: Laya.stage.width,
					height: Laya.stage.height
				},
				i = e.addChild(new Laya.Sprite);
			i.zOrder = 1e3, i.size(a.width, a.height), i.pos(-a.width / 2, -a.height / 2), i.graphics.drawRect(0, 0, a.width, a.height, "#0000007F"), this.interRootNode = i, this.registerTouchHander(i, t => {
				"click" == t.name && ULLog.console.log("MCPanelLaya:click nationInter bg")
			});
			let s = .86 * Math.min(a.width, a.height),
				n = s,
				o = i.addChild(new Laya.Sprite);
			o.size(s, n), o.pos((a.width - s) / 2, (a.height - n) / 2);
			let r = {
					width: s,
					height: s / 16 * 9
				},
				l = o.addChild(new Laya.Image);
			l.size(r.width, r.height), l.pos(0, 0);
			let c = t.nationData.url || null;
			c ? l.skin = c : l.graphics.drawRect(0, 0, r.width, r.height, "#FFFFFF"), this.registerTouchHander(l, e => {
				"click" == e.name && (ULLog.console.log("MCPanelLaya:click nationInter"), t.onClick && t.onClick())
			});
			let h = 34,
				d = 34,
				_ = o.addChild(new Laya.Image);
			_.skin = "res/_ulsdk_ui/native_adv_close.png", _.size(h, d), _.pos(s - h, 0), this.registerTouchHander(_, t => {
				"click" == t.name && this.closeNationInter(!0)
			});
			let g = 44,
				u = 24,
				m = o.addChild(new Laya.Image);
			m.skin = "res/_ulsdk_ui/native_adv_tag.png", m.size(g, u), m.pos(s - g, r.height - u);
			let p = {
					width: s / 7,
					height: s / 7
				},
				S = o.addChild(new Laya.Image);
			S.size(p.width, p.height), S.pos(.02 * s, .02 * n);
			let b = t.nationData.icon || null;
			b ? S.skin = b : S.graphics.drawRect(0, 0, p.width, p.height, "#DC0032FF");
			let L = {
					width: s,
					height: 36
				},
				I = o.addChild(new Laya.Label);
			I.fontSize = 24, I.align = "center", I.valign = "middle", I.color = "#FFFFFF", I.text = t.nationData.desc || t.nationData.title || "desc", I.size(L.width, L.height), I.pos(0, l.height + 10);
			let A = {
					width: s / 2.5,
					height: s / 2.5 / 16 * 5
				},
				E = o.addChild(new Laya.Label);
			E.fontSize = 24, E.align = "center", E.valign = "middle", E.color = "#ffffff", E.bgColor = "#64DC32", E.text = t.nationData.targetTitle || "点击查看", E.size(A.width, A.height), E.pos((s - A.width) / 2, r.height + L.height + 20), this.registerTouchHander(E, e => {
				"click" == e.name && (ULLog.console.log("MCPanelLaya:click nationInter"), t.onClick && t.onClick())
			}), t.onShow && t.onShow()
		}
		closeNationInter(t = !1) {
			this.interRootNode && (this.interRootNode.destroy(), this.interRootNode = null, ULLog.console.log("MCPanelLaya:close nationInter"), this.interShowingObj && this.interShowingObj.onClose && this.interShowingObj.onClose(t), this.interShowingObj = null)
		}
	}
	const TOUCH_AREA_WIDTH = 100,
		TOUCH_AREA_HEIGHT = 200,
		TOUCH_GAP = 2,
		RIGHT_CODE = "lrlrllrr";
	class ULModuleCheckerManager {
		constructor() {
			this.inputCode = "", this.lastInputTime = 0, this.debugInfos = {}, this.debugInfoRenderNode = null
		}
		init() {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.init"), this.registerTouchListener(), this.refreshDebugInfo(), window.cc && window.cc.director.on(window.cc.Director.EVENT_AFTER_SCENE_LAUNCH, t => {
				ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager on EVENT_AFTER_SCENE_LAUNCH"), this.registerTouchListener(), this.debugInfoRenderNode = null, this.refreshDebugInfo()
			})
		}
		showPanel(t) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.showPanel"), (t = t || []).splice(0, 0, {
				type: "newLine"
			}), t.splice(0, 0, {
				type: "button",
				text: "关闭",
				onClick: () => {
					this.closePanel()
				}
			}), t.splice(0, 0, {
				type: "label",
				text: "小游戏模块调试器"
			}), t.splice(0, 0, {
				type: "newLine"
			}), t.splice(0, 0, {
				type: "newLine"
			}), t.push({
				type: "newLine"
			}), t.push({
				type: "newLine"
			}), t.push({
				type: "newLine"
			}), t.push({
				type: "label",
				text: ULTools.format("©%d Ultralisk Chengdu", (new Date).getFullYear())
			}), this.closePanel();
			let e = this.getOrCreatePanel();
			e && e.show(t)
		}
		closePanel() {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.closePanel"), this.panel && this.panel.close()
		}
		showReferenceRect(t, e, a, i, s, n, o) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.showReferenceRect", t, e, a, i, s, n, o), this.getOrCreatePanel(), this.panel && this.panel.showReferenceRect(t, e, a, i, s, n, o)
		}
		showReferenceRectFromViewPoint(t, e, a, i, s, n, o) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.showReferenceRectFromViewPoint", t, e, a, i, s), this.getOrCreatePanel(), this.panel && this.panel.showReferenceRectFromViewPoint(t, e, a, i, s, n, o)
		}
		showReferenceRectFromScale(t, e, a, i, s, n, o) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.showReferenceRectFromScale", t, e, a, i, s, n, o), this.getOrCreatePanel(), this.panel && this.panel.showReferenceRectFromScale(t, e, a, i, s, n, o)
		}
		hideReferenceRect(t) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.hideReferenceRect", t), this.getOrCreatePanel(), this.panel && this.panel.hideReferenceRect(t)
		}
		hideAllReferenceRects() {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.hideAllReferenceRects"), this.getOrCreatePanel(), this.panel && this.panel.hideAllReferenceRects()
		}
		showNationBanner(t, e = null) {
			if (ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.showNationBanner"), this.getOrCreatePanel(), !this.panel) return;
			e = e || {
				x: .5,
				y: 0,
				width: 1
			}, console.log("ULModuleCheckerManager style:", e);
			let a = null == e.x ? .5 : e.x;
			a = Math.min(a, 1), a = Math.max(a, 0), console.log(a);
			let i = null == e.y ? 0 : e.y;
			i = Math.min(i, 1), i = Math.max(i, 0), console.log(i);
			let s = e.width || 1;
			s = Math.min(s, 1);
			let n = {
				x: a,
				y: i,
				width: s = Math.max(s, 0)
			};
			console.log("ULModuleCheckerManager trimWidth:", n), this.panel.showNationBanner(t, n)
		}
		closeNationBanner() {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.closeNationBanner"), this.getOrCreatePanel(), this.panel && this.panel.closeNationBanner()
		}
		showNationInter(t) {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.showNationInter"), this.getOrCreatePanel(), this.panel && this.panel.showNationInter(t)
		}
		closeNationInter() {
			ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.closeNationInter"), this.getOrCreatePanel(), this.panel && this.panel.closeNationInter()
		}
		getItemText(t) {
			if (this.panel) return this.panel.getItemText(t)
		}
		setItemText(t, e) {
			this.panel && this.panel.setItemText(t, e)
		}
		showMsgTip(t) {
			this.getOrCreatePanel(), this.panel && this.panel.showMsgTip(t)
		}
		alertPrompt(t, e, a, i) {
			return this._alertPrompt(t, e, [a], [i])
		}
		alertPrompt2(t, e, a, i, s, n) {
			return this._alertPrompt(t, e, [a, i], [s, n])
		}
		_alertPrompt(t, e, a, i) {
			this.getOrCreatePanel(), this.panel && this.panel.showPromptDialog(t, e, a, i)
		}
		alertPrivacy(t, e, a, i) {
			this.getOrCreatePanel(), this.panel && this.panel.showPrivacyDialog(t, e, a, i)
		}
		showPickerDialog(t, e, a, i) {
			this.getOrCreatePanel(), this.panel && this.panel.showPickerDialog(t, e, a, i)
		}
		addDebugInfo(t, e) {
			this.debugInfos[t] = e, this.refreshDebugInfo()
		}
		removeDebugInfo(t) {
			delete this.debugInfos[t], this.refreshDebugInfo()
		}
		showBigTextWithPickerDialog(t, e, a) {
			let i = [];
			for (let t = 0; t < e.length; t += a) {
				let s = e.substr(t, a);
				i.push({
					text: s,
					value: s
				})
			}
			this.showPickerDialog(t, i, t => {
				this.alertPrompt("完整内容", t, "好的", null)
			}, !0)
		}
		getOrCreatePanel() {
			return this.panel || (window.cc ? this.panel = new MCPanelCreator : window.Laya ? this.panel = new MCPanelLaya : ULLog.console.warn("ULModuleCheckerManager.getOrCreatePanel unknown platform!")), this.panel
		}
		registerTouchListener() {
			if (ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.registerTouchListener"), ULConst.B_INNER_DEBUG && ULLog.console.log("  cc", window.cc), ULConst.B_INNER_DEBUG && ULLog.console.log("  laya", window.laya), ULConst.B_INNER_DEBUG && ULLog.console.log("  Laya", window.Laya), window.cc && window.cc.systemEvent) {
				window.cc;
				let t = window.cc.director.getScene();
				if (!t) return ULConst.B_INNER_DEBUG && ULLog.console.log("  scene not found!"), null;
				let e = t.getChildByName("Canvas");
				if (!e) return ULConst.B_INNER_DEBUG && ULLog.console.log("  nodeCanvas not found!"), null;
				ULConst.B_INNER_DEBUG && ULLog.console.log("nodeCanvas", e), e.on(window.cc.Node.EventType.TOUCH_START, t => {
					let a = t.getLocation(),
						i = e.getContentSize(),
						s = window.cc.rect(0, i.height - TOUCH_AREA_HEIGHT, TOUCH_AREA_WIDTH, TOUCH_AREA_HEIGHT),
						n = window.cc.rect(i.width - TOUCH_AREA_WIDTH, i.height - TOUCH_AREA_HEIGHT, TOUCH_AREA_WIDTH, TOUCH_AREA_HEIGHT);
					s.contains(a) ? this.onTouchSpecialArea("l") : n.contains(a) ? this.onTouchSpecialArea("r") : this.onTouchSpecialArea(null)
				}, null, !0), e.on(window.cc.Node.EventType.TOUCH_END, t => {
					ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_TOUCH_SCREEN_END, {
						lastTouchScreenEnd: ULTools.time()
					})
				}, null, !0)
			} else if (window.Laya && window.Laya.stage) {
				let t = window.Laya,
					e = t.stage.getChildByName("__ulsdk_ui_node_root__");
				if (!e) {
					ULConst.B_INNER_DEBUG && ULLog.console.log("create laya nodeRoot"), (e = t.stage.addChild(new t.Sprite)).size(0, 0), e.pos(t.stage.width / 2, t.stage.height / 2), e.name = "__ulsdk_ui_node_root__", e.zOrder = 4e4;
					let a = this;
					class i extends t.Script {
						onStageClick(e) {
							ULConst.B_INNER_DEBUG && ULLog.console.log("LayaStageToucher.onStageClick", e), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_TOUCH_SCREEN_END, {
								lastTouchScreenEnd: ULTools.time()
							});
							let i = e.stageX,
								s = e.stageY;
							ULConst.B_INNER_DEBUG && ULLog.console.log(i, s, t.stage.width, t.stage.height), s > TOUCH_AREA_HEIGHT ? a.onTouchSpecialArea(null) : i <= TOUCH_AREA_WIDTH ? a.onTouchSpecialArea("l") : i >= t.stage.width - TOUCH_AREA_WIDTH ? a.onTouchSpecialArea("r") : a.onTouchSpecialArea(null)
						}
					}
					e.addComponent(i), ULTimer.callLoop(1, () => {
						let e = t.stage.getChildByName("__ulsdk_ui_node_root__");
						e && e.pos(t.stage.width / 2, t.stage.height / 2)
					})
				}
				ULConst.B_INNER_DEBUG && ULLog.console.log("  nodeRoot", e)
			}
		}
		refreshDebugInfo() {
			if (ULTools.getObjSize(this.debugInfos) <= 0) return void(this.debugInfoRenderNode && (window.cc ? window.cc.isValid(this.debugInfoRenderNode) && this.debugInfoRenderNode.destroy() : window.Laya && this.debugInfoRenderNode.destroy(), this.debugInfoRenderNode = null));
			let t = [];
			ULTools.forEachMap(this.debugInfos, (e, a) => {
				t.push(a)
			});
			let e = t.join("\n");
			if (!this.debugInfoRenderNode)
				if (window.cc) {
					window.cc;
					let t = window.cc.director.getScene();
					if (!t) return ULConst.B_INNER_DEBUG && ULLog.console.log("  scene not found!"), null;
					let e = t.getChildByName("Canvas");
					if (!e) return ULConst.B_INNER_DEBUG && ULLog.console.log("  nodeCanvas not found!"), null;
					let a = new window.cc.Node;
					a.parent = e, a.zIndex = window.cc.macro.MAX_ZINDEX, a.y = 0, a.x = 0, a.width = e.width - 10, a.setAnchorPoint(.5, 1), a.color = window.cc.Color.RED, a.addComponent(window.cc.Label).fontSize = 24, a.getComponent(window.cc.Label).enableWrapText = !0, a.getComponent(window.cc.Label).horizontalAlign = window.cc.Label.HorizontalAlign.CENTER, a.getComponent(window.cc.Label).verticalAlign = window.cc.Label.VerticalAlign.CENTER, a.runAction(window.cc.repeatForever(window.cc.sequence(window.cc.fadeTo(1, 63), window.cc.fadeTo(1, 255)))), this.debugInfoRenderNode = a
				} else if (window.Laya) {
				let t = window.Laya,
					e = t.stage.getChildByName("__ulsdk_ui_node_root__");
				if (!e) return void(ULConst.B_INNER_DEBUG && ULLog.console.log("  nodeRoot not found!"));
				let a = e.addChild(new t.Label);
				a.fontSize = 24, a.color = "#ff0000ff", a.align = "center", a.width = t.stage.width - 10, a.pos(-a.width / 2, 0), a.wordWrap = !0, this.debugInfoRenderNode = a
			}
			if (this.debugInfoRenderNode)
				if (window.cc) {
					window.cc;
					this.debugInfoRenderNode.getComponent(window.cc.Label).string = e
				} else if (window.Laya) {
				this.debugInfoRenderNode.text = e
			}
		}
		onTouchSpecialArea(t) {
			if (ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager.onTouchSpecialArea", t), ULTools.time() - this.lastInputTime >= TOUCH_GAP && this.inputCode && (ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager inputCode: touch gap is too long time, cancel."), this.inputCode = ""), t) {
				if (this.inputCode += t, this.lastInputTime = ULTools.time(), ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager inputCode:", this.inputCode), this.inputCode == RIGHT_CODE) {
					ULConst.B_INNER_DEBUG && ULLog.console.log("  right!"), this.inputCode = "";
					let t = this.moreGameAbTestConfig() || [];
					t = t.concat(this.collectionConfig()), this.showPanel(t)
				}
			} else this.inputCode && (ULConst.B_INNER_DEBUG && ULLog.console.log("ULModuleCheckerManager inputCode: touch invalid area, cancel."), this.inputCode = "")
		}
		collectionConfig() {
			return ULEventDispatcher.getInstance().dispatchWithReturn(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_CONFIG, {})
		}
		moreGameAbTestConfig() {
			return ULEventDispatcher.getInstance().dispatchWithReturn(ULConst.CMD_SDK_COLLECTION_MODULE_CHECKER_MORE_GAME_AB_TEST_CONFIG, {})
		}
	}
	class ULSdkManager {
		constructor() {
			this.responseCallback = null, this.bChannelInfoResultResponsed = !1, this.bAllowStartGame = !0, this.version = "0.1", this.modules = [], this.channelInfo = new ULChannelInfo, this.copManager = new ULCopManager, this.advManager = new ULAdvManager, this.statisManager = new ULStatisManager, this.moduleCheckerManager = new ULModuleCheckerManager, this.bChannelInfoResultResponsed = !1, this.responsePending = [], this.sdkCommunicationLog = [], ULTools._hack_console_print_method(), ULTools._start_console_print_LAN()
		}
		static getInstance() {
			return this._instance || (this._instance = new ULSdkManager), this._instance
		}
		initUlsdk(t) {
			ULLog.console.log("ULSdkManger.init"), this.responseCallback = t, this.modules = ULSdkModuleLoader.initAllModules(), ULTools._start_console_print_LAN(), this.advManager.init(), this.statisManager.init(), this.copManager.init(), this.moduleCheckerManager.init(), ULEventDispatcher.getInstance().addListener(ULConst.CMD_GET_BASE_CHANNEL_INFO, ULConst.PRIORITY_NONE, this.onCmdGetBaseChannelInfo.bind(this)), ULEventDispatcher.getInstance().addListener(ULConst.CMD_SET_VERSION, ULConst.PRIORITY_NONE, this.onCmdSetVersion.bind(this)), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_INIT_USER_LOGIN, {}), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_START, {}), window.cc && window.cc.game && window.cc.game.on instanceof Function ? (ULLog.console.log("register cocos EVENT_SHOW & EVENT_HIDE"), window.cc.game.on(window.cc.game.EVENT_SHOW, () => {
				ULLog.console.log("ULSdkManager on EVENT_SHOW"), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_RESUME, {})
			}), window.cc.game.on(window.cc.game.EVENT_HIDE, () => {
				ULLog.console.log("ULSdkManager on CC_EVENT_HIDE"), ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_PAUSE, {})
			})) : window.Laya && this._register_laya_life_cycle_listener()
		}
		_register_laya_life_cycle_listener() {
			var t, e = window;
			void 0 !== document.hidden ? t = "hidden" : void 0 !== document.mozHidden ? t = "mozHidden" : void 0 !== document.msHidden ? t = "msHidden" : void 0 !== document.webkitHidden && (t = "webkitHidden");
			var a = !1;

			function onHidden() {
				ULLog.console.log("Laya.onHidden"), a || (a = !0, ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_PAUSE, {}))
			}

			function onShown() {
				ULLog.console.log("Laya.onShown"), a && (a = !1, ULEventDispatcher.getInstance().dispatch(ULConst.CMD_SDK_ON_GAME_RESUME, {}))
			}
			if (t)
				for (var i = ["visibilitychange", "mozvisibilitychange", "msvisibilitychange", "webkitvisibilitychange", "qbrowserVisibilityChange"], s = 0; s < i.length; s++) document.addEventListener(i[s], function(e) {
					var a = document[t];
					(a = a || e.hidden) ? onHidden(): onShown()
				});
			else e.addEventListener("blur", onHidden), e.addEventListener("focus", onShown);
			navigator.userAgent.indexOf("MicroMessenger") > -1 && (e.onfocus = onShown), window.wx && (window.wx.onShow && window.wx.onShow(onShown), window.wx.onHide && window.wx.onHide(onHidden)), window.qg && (window.qg.onShow && window.qg.onShow(onShown), window.qg.onHide && window.qg.onHide(onHidden));
			window.hbs && (window.hbs.onShow && window.hbs.onShow(onShown), window.hbs.onHide && window.hbs.onHide(onHidden)), window.ks && (window.ks.onShow && window.ks.onShow(onShown), window.ks.onHide && window.ks.onHide(onHidden)), "onpageshow" in window && "onpagehide" in window && (e.addEventListener("pagehide", onHidden), e.addEventListener("pageshow", onShown), document.addEventListener("pagehide", onHidden), document.addEventListener("pageshow", onShown))
		}
		onRequest(t) {
			let e = null;
			this.recordSdkCommunicationLog(t);
			try {
				e = JSON.parse(t)
			} catch (t) {
				ULLog.console.error(t)
			}
			if (!e) return void ULLog.console.error("请仔细阅读文档,消息必须为json字符串类型");
			let a = e.cmd,
				i = e.data || {};
			if (a) switch (ULLog.console.log("ULSdkManager.onRequest", a, i), a) {
				default:
					ULEventDispatcher.getInstance().dispatch(a, i) || ULLog.console.warn(ULTools.format("未检测到[%s]监听器", a));
					break
			} else ULLog.console.error("cmd为空,请检查是否按照文档规范配置消息")
		}
		response(t, e, a) {
			if (ULLog.console.log("ULSdkManager.response", t, e), !this.bChannelInfoResultResponsed && !a) return ULLog.console.log("  尚未发送/c/channelInfoResult，暂存消息"), void this.responsePending.push({
				cmd: t,
				data: e
			});
			let i = JSON.stringify({
				cmd: t,
				data: e
			});
			this.responseCallback && this.responseCallback(i), this.recordSdkCommunicationLog(i)
		}
		uploadMegadata(t) {
			let e = t.join("_");
			this.statisManager.reportUserEvent(["commonEvent", e])
		}
		isAllowStartGame() {
			return ULLog.console.log("ULSdkManagaer.isAllowStartGame", this.bAllowStartGame), this.bAllowStartGame
		}
		getModuleByName(t) {
			for (let e = 0; e < this.modules.length; e++) {
				const a = this.modules[e];
				if (a.name == t) return a
			}
			return null
		}
		getSdkCommunicationLog() {
			return this.sdkCommunicationLog
		}
		recordSdkCommunicationLog(t) {
			this.sdkCommunicationLog && (this.sdkCommunicationLog.length >= 100 && this.sdkCommunicationLog.splice(0, 1), this.sdkCommunicationLog.push(t))
		}
		_doResponseChannelInfoResult() {
			this.bChannelInfoResultResponsed = !0, this.response(ULConst.CMD_CHANNEL_INFO_RESULT, this.channelInfo.toResponseData());
			for (let t = 0; t < this.responsePending.length; t++) {
				const e = this.responsePending[t];
				this.response(e.cmd, e.data)
			}
			this.responsePending = []
		}
		onCmdGetBaseChannelInfo(t) {
			this.response(ULConst.CMD_GET_BASE_CHANNEL_INFO_RESULT, this.channelInfo.toBaseChannelInfoData(), !0)
		}
		onCmdSetVersion(t) {
			t.data;
			if (t.stopImmediatePropagation(), this.channelInfo.isReady()) return void this._doResponseChannelInfoResult();
			ULLog.console.log("ULSdkManager.onEventSetVersion channelInfo准备中，开启timer进行监听");
			let e = ULConfig.getConfig().i_channel_info_timeout / 1e3;
			ULTimer.callLoop(1 / 60, t => {
				if (t.usedTime >= e) {
					t.stop();
					let e = this.channelInfo.getPreparationFlags();
					return ULLog.console.log("等待channelInfo超时！直接触发channelInfoResult。flags:", e.join(",")), void this._doResponseChannelInfoResult()
				}
				if (this.channelInfo.isReady()) return t.stop(), ULLog.console.log("channelInfo准备完毕！触发channelInfoResult"), void this._doResponseChannelInfoResult()
			})
		}
	}
	ULSdkManager._instance = null;
	class ULSdkMiddleware {
		static initUlsdk() {
			if (ULSdkManager) try {
				return ULSdkManager.getInstance().initUlsdk(this.onResponse), !0
			} catch (t) {
				return ULLog.console.error(t), !1
			} else ULLog.console.log("ULSdkMiddleware.initUlsdk ULSdkManager not found!")
		}
		static request(t) {
			if (!ULSdkManager) return ULLog.console.log("ULSdkMiddleware.request ULSdkManager not found!"), !1;
			try {
				return ULSdkManager.getInstance().onRequest(t), !0
			} catch (t) {
				return ULLog.console.error(t), !1
			}
		}
		static isAllowStartGame() {
			return ULSdkManager ? ULSdkManager.getInstance().isAllowStartGame() : (ULLog.console.log("ULSdkMiddleware.isAllowStartGame ULSdkManager not found!"), !0)
		}
		static registerOnResponseCallback(t) {
			this.fOnResponseCallback = t
		}
		static onResponse(t) {
			(ULSdkMiddleware.fOnResponseCallback instanceof Function || "function" == typeof ULSdkMiddleware.fOnResponseCallback) && ULSdkMiddleware.fOnResponseCallback(t)
		}
	}
	ULSdkMiddleware.fOnResponseCallback = null, window.ULSdkMiddleware = ULSdkMiddleware;
	class ULNativeControllerHtml5 {
		static init(t) {
			this.isEnabled(!0) ? (this.fOnGameCallback = t, ULSdkMiddleware.registerOnResponseCallback(t => {
				this.sendMsgToGame(t)
			})) : console.warn("ULNativeControllerHtml5.init !isEnabled()")
		}
		static isEnabled(t) {
			if (t) try {
				console.log("ULNativeControllerHtml5.isEnabled"), console.log("  wx", window.wx), console.log("  qq", window.qq), console.log("  tt", window.tt), console.log("  swan", window.swan), console.log("  hbs", window.hbs), console.log("  qg", window.qg), console.log("  document", document), console.log("  weibo", window.loadRuntime), console.log("  cc.sys.isBrowser", window.cc && window.cc.sys && window.cc.sys.isBrowser), console.log("  laya conch", window.Laya && window.conch)
			} catch (t) {
				console.log(t)
			}
			return !(!window || !window.Laya || window.conch) || (!(!window || !window.wx) || (!(!window || !window.qq) || (!(!window || !window.tt) || (!(!window || !window.swan) || (!(!window || !window.hbs) || (!(!window || !window.qg) || (!(!window || !window.loadRuntime) || !!(window.cc && window.cc.sys && window.cc.sys.isBrowser))))))))
		}
		static initUlsdk() {
			let t = ULSdkMiddleware.initUlsdk();
			return JSON.stringify({
				ret: t
			})
		}
		static sendMsgToSdk(t) {
			let e = ULSdkMiddleware.request(t);
			return JSON.stringify({
				ret: e
			})
		}
		static sendMsgToGame(t) {
			this.fOnGameCallback instanceof Function && this.fOnGameCallback(t)
		}
		static isAllowStartGame() {
			return ULSdkMiddleware.isAllowStartGame()
		}
	}
	ULNativeControllerHtml5.fOnGameCallback = null;
	const JAVA_FILE_PATH = "demo/ULNativeController",
		JAVA_PARAMS_RETURN = "(Ljava/lang/String;)Ljava/lang/String;",
		JAVA_CALLBACK_NAME = "JAVACALLBACK",
		OC_FILE_NAME = "ULNativeController",
		OC_CALLBACK_NAME = "OCCALLBACK";

	function JAVACALLBACK(t) {
		console.log("on JAVACALLBACK", t);
		try {
			let e = Base64.decode(t);
			mgrNative._onNativeCallbackJava(e)
		} catch (e) {
			console.warn("JAVACALLBACK decode base64 faild! direct use base64JsonStr"), mgrNative._onNativeCallbackJava(t)
		}
	}

	function OCCALLBACK(t) {
		console.log("on OCCALLBACK", t);
		try {
			let e = Base64.decode(t);
			mgrNative._onNativeCallbackObjc(e)
		} catch (e) {
			console.warn("OCCALLBACK decode base64 faild! direct use base64JsonStr"), mgrNative._onNativeCallbackObjc(t)
		}
	}

	function ONHTML5CALLBACK(t) {
		console.log("on ONHTML5CALLBACK", t), mgrNative._onNativeCallbackHtml5(t)
	}
	class mgrNative {
		static onLoad() {
			window[JAVA_CALLBACK_NAME] = JAVACALLBACK, window[OC_CALLBACK_NAME] = OCCALLBACK, window.conch && (this._js2JavaBridge = window.PlatformClass.createClass(JAVA_FILE_PATH), this._js2OCBridge = window.PlatformClass.createClass(OC_FILE_NAME)), this.nativeCallbackPending = [], this.bRegisterNativeCallback || (this.bRegisterNativeCallback = !0, this.registerNativeCallback()), Timer.callLoop(1 / 60, this.onTimer.bind(this))
		}
		static onTimer() {
			let t = this.nativeCallbackPending;
			for (; t.length > 0;) {
				let e = t.shift();
				this.m_receeveFromSdk && this.m_receeveFromSdk(e)
			}
		}
		static registerNativeCallback() {
			ULNativeControllerHtml5.isEnabled() ? this._registernativeCallbackHtml5() : Laya.Browser.onAndroid ? this._registerNativeCallbackJava() : Laya.Browser.onIOS ? this._registerNativeCallbackObjc() : console.warn(`[warn] mgrNative.registerNativeCallback, platform = ${Laya.Browser}, don't have native controller`)
		}
		static isHtml5Platform() {
			return ULNativeControllerHtml5.isEnabled()
		}
		static onNativeCallback(t) {
			t && this.nativeCallbackPending.push(t)
		}
		static _registerNativeCallbackJava() {
			this._js2JavaBridge.call("setCallFuncName", JAVA_CALLBACK_NAME)
		}
		static _registerNativeCallbackObjc() {
			this._callNativeObjc("setCallbackName", {
				callbackName: OC_CALLBACK_NAME
			})
		}
		static _registernativeCallbackHtml5() {
			ULNativeControllerHtml5.init(ONHTML5CALLBACK), this._callNativeHtml5("initUlsdk", null)
		}
		static _onNativeCallbackJava(t) {
			let e = {};
			try {
				e = JSON.parse(t || "")
			} catch (a) {
				console.warn("mgrNative._onNativeCallbackJava jsonStr error!"), e.text = t
			}
			this.onNativeCallback(e)
		}
		static _onNativeCallbackObjc(t) {
			let e = {};
			try {
				e = JSON.parse(t || "")
			} catch (a) {
				console.warn("mgrNative._onNativeCallbackObjc jsonStr error!"), e.text = t
			}
			this.onNativeCallback(e)
		}
		static _onNativeCallbackHtml5(t) {
			let e = {};
			try {
				e = JSON.parse(t || "")
			} catch (a) {
				console.warn("mgrNative._onNativeCallbackJs jsonStr error!"), e.text = t
			}
			this.onNativeCallback(e)
		}
		static isAllowStartGame() {
			return !ULNativeControllerHtml5.isEnabled() || ULNativeControllerHtml5.isAllowStartGame()
		}
		static callNative(t, e) {
			return e = e || {}, console.log(`mgrNative.callNative: ${t}`), ULNativeControllerHtml5.isEnabled() ? this._callNativeHtml5(t, e) : Laya.Browser.onAndroid ? this._callNativeJava(t, e) : Laya.Browser.onIOS ? this._callNativeObjc(t, e) : (console.warn(`[warn] mgrNative.callNative, platform = ${Laya.Browser}, don't have native controller`), null)
		}
		static _callNativeJava(t, e) {
			console.log(`--\x3e: js: 调用本地${t}: ${JSON.stringify(e)}`);
			try {
				let a = JSON.stringify(e),
					i = this._js2JavaBridge.call(t, a);
				return JSON.parse(i)
			} catch (t) {
				return console.warn("mgrNative._onNativeCallbackJava jsonStr error!"), {
					error: t
				}
			}
		}
		static _callNativeObjc(t, e) {
			try {
				let a = JSON.stringify(e),
					i = this._js2OCBridge.call(t + ":", a);
				return JSON.parse(i)
			} catch (t) {
				return console.warn("mgrNative._callNativeObjc jsonStr error!"), console.log(t), {
					error: t
				}
			}
		}
		static _callNativeHtml5(t, e) {
			try {
				let a = JSON.stringify(e),
					i = ULNativeControllerHtml5[t](a);
				return JSON.parse(i)
			} catch (t) {
				return console.warn("mgrNative._callNativeHtml5 jsonStr error!"), {
					error: t
				}
			}
		}
		static setReceiver(t) {
			this.m_receeveFromSdk = t
		}
	}
	mgrNative.nativeCallbackPending = null, mgrNative.bRegisterNativeCallback = !1;
	class SDKBridge {
		static init() {
			this.bInited || (this.bInited = !0, mgrNative.onLoad(), mgrNative.setReceiver(this.recieveFromSdk.bind(this)), mgrNative.callNative("initULSDK", {}), this.m_msgSender = function(t) {
				mgrNative.callNative("sendMsgToSdk", t)
			})
		}
		static registerCmd(t, e) {
			this.m_callbacks.hasOwnProperty(t) && Logger.warn("the cmd has registed:", t), this.m_callbacks[t] = e
		}
		static sendToSdk(t, e) {
			let a = {
				cmd: t,
				data: e
			};
			this.m_msgSender(a)
		}
		static recieveFromSdk(t) {
			let e = t.cmd,
				a = t.data;
			this.m_callbacks[e] ? this.m_callbacks[e](a) : Logger.warn(`SDKBridge.recieveFromSdk can't find callback with cmd: ${e}`)
		}
	}
	let globalEventDis;
	SDKBridge.m_msgSender = function(t) {}, SDKBridge.m_callbacks = {}, SDKBridge.bInited = !1;
	class MsgHandler {
		constructor(t) {
			globalEventDis || (globalEventDis = new Laya.EventDispatcher), this._eventTarget = t || globalEventDis, this._registeredListeners = Object.create(null), this._startedListeners = Object.create(null), this._bStarted = !1
		}
		registerListeners(t, e) {
			for (let a in t) {
				null != this._registeredListeners[a] && console.log(`[警告] MsgHandler.registerListeners msg重复注册！ msgName=${a}`);
				let i = t[a];
				this._registeredListeners[a] = (t => {
					e && e.destroyed ? this.stopProcMsg() : i(t)
				})
			}
			this._bStarted && this.startProcMsg()
		}
		startProcMsg() {
			this._bStarted = !0;
			for (const t in this._registeredListeners)
				if (!this._startedListeners[t]) {
					const e = this._registeredListeners[t];
					this._eventTarget.on(t, this, e), this._startedListeners[t] = e
				}
		}
		stopProcMsg() {
			for (const t in this._startedListeners) {
				let e = this._startedListeners[t];
				this._eventTarget.off(t, this, e)
			}
			this._bStarted = !1, this._startedListeners = Object.create(null)
		}
		sendMsg(t, e) {
			try {
				this._eventTarget.event(t, e)
			} catch (e) {
				Logger.catchError(`MsgHandler.sendMsg:${t}`, e)
			}
		}
		sendMsgWithArray(t, e) {
			try {
				this._eventTarget.event(t, [e])
			} catch (e) {
				Logger.catchError(`MsgHandler.sendMsgWithArray:${t}`, e)
			}
		}
	}

	function safeAdd(t, e) {
		var a = (65535 & t) + (65535 & e);
		return (t >> 16) + (e >> 16) + (a >> 16) << 16 | 65535 & a
	}

	function bitRotateLeft(t, e) {
		return t << e | t >>> 32 - e
	}

	function md5cmn(t, e, a, i, s, n) {
		return safeAdd(bitRotateLeft(safeAdd(safeAdd(e, t), safeAdd(i, n)), s), a)
	}

	function md5ff(t, e, a, i, s, n, o) {
		return md5cmn(e & a | ~e & i, t, e, s, n, o)
	}

	function md5gg(t, e, a, i, s, n, o) {
		return md5cmn(e & i | a & ~i, t, e, s, n, o)
	}

	function md5hh(t, e, a, i, s, n, o) {
		return md5cmn(e ^ a ^ i, t, e, s, n, o)
	}

	function md5ii(t, e, a, i, s, n, o) {
		return md5cmn(a ^ (e | ~i), t, e, s, n, o)
	}

	function binlMD5(t, e) {
		var a, i, s, n, o;
		t[e >> 5] |= 128 << e % 32, t[14 + (e + 64 >>> 9 << 4)] = e;
		var r = 1732584193,
			l = -271733879,
			c = -1732584194,
			h = 271733878;
		for (a = 0; a < t.length; a += 16) i = r, s = l, n = c, o = h, r = md5ff(r, l, c, h, t[a], 7, -680876936), h = md5ff(h, r, l, c, t[a + 1], 12, -389564586), c = md5ff(c, h, r, l, t[a + 2], 17, 606105819), l = md5ff(l, c, h, r, t[a + 3], 22, -1044525330), r = md5ff(r, l, c, h, t[a + 4], 7, -176418897), h = md5ff(h, r, l, c, t[a + 5], 12, 1200080426), c = md5ff(c, h, r, l, t[a + 6], 17, -1473231341), l = md5ff(l, c, h, r, t[a + 7], 22, -45705983), r = md5ff(r, l, c, h, t[a + 8], 7, 1770035416), h = md5ff(h, r, l, c, t[a + 9], 12, -1958414417), c = md5ff(c, h, r, l, t[a + 10], 17, -42063), l = md5ff(l, c, h, r, t[a + 11], 22, -1990404162), r = md5ff(r, l, c, h, t[a + 12], 7, 1804603682), h = md5ff(h, r, l, c, t[a + 13], 12, -40341101), c = md5ff(c, h, r, l, t[a + 14], 17, -1502002290), r = md5gg(r, l = md5ff(l, c, h, r, t[a + 15], 22, 1236535329), c, h, t[a + 1], 5, -165796510), h = md5gg(h, r, l, c, t[a + 6], 9, -1069501632), c = md5gg(c, h, r, l, t[a + 11], 14, 643717713), l = md5gg(l, c, h, r, t[a], 20, -373897302), r = md5gg(r, l, c, h, t[a + 5], 5, -701558691), h = md5gg(h, r, l, c, t[a + 10], 9, 38016083), c = md5gg(c, h, r, l, t[a + 15], 14, -660478335), l = md5gg(l, c, h, r, t[a + 4], 20, -405537848), r = md5gg(r, l, c, h, t[a + 9], 5, 568446438), h = md5gg(h, r, l, c, t[a + 14], 9, -1019803690), c = md5gg(c, h, r, l, t[a + 3], 14, -187363961), l = md5gg(l, c, h, r, t[a + 8], 20, 1163531501), r = md5gg(r, l, c, h, t[a + 13], 5, -1444681467), h = md5gg(h, r, l, c, t[a + 2], 9, -51403784), c = md5gg(c, h, r, l, t[a + 7], 14, 1735328473), r = md5hh(r, l = md5gg(l, c, h, r, t[a + 12], 20, -1926607734), c, h, t[a + 5], 4, -378558), h = md5hh(h, r, l, c, t[a + 8], 11, -2022574463), c = md5hh(c, h, r, l, t[a + 11], 16, 1839030562), l = md5hh(l, c, h, r, t[a + 14], 23, -35309556), r = md5hh(r, l, c, h, t[a + 1], 4, -1530992060), h = md5hh(h, r, l, c, t[a + 4], 11, 1272893353), c = md5hh(c, h, r, l, t[a + 7], 16, -155497632), l = md5hh(l, c, h, r, t[a + 10], 23, -1094730640), r = md5hh(r, l, c, h, t[a + 13], 4, 681279174), h = md5hh(h, r, l, c, t[a], 11, -358537222), c = md5hh(c, h, r, l, t[a + 3], 16, -722521979), l = md5hh(l, c, h, r, t[a + 6], 23, 76029189), r = md5hh(r, l, c, h, t[a + 9], 4, -640364487), h = md5hh(h, r, l, c, t[a + 12], 11, -421815835), c = md5hh(c, h, r, l, t[a + 15], 16, 530742520), r = md5ii(r, l = md5hh(l, c, h, r, t[a + 2], 23, -995338651), c, h, t[a], 6, -198630844), h = md5ii(h, r, l, c, t[a + 7], 10, 1126891415), c = md5ii(c, h, r, l, t[a + 14], 15, -1416354905), l = md5ii(l, c, h, r, t[a + 5], 21, -57434055), r = md5ii(r, l, c, h, t[a + 12], 6, 1700485571), h = md5ii(h, r, l, c, t[a + 3], 10, -1894986606), c = md5ii(c, h, r, l, t[a + 10], 15, -1051523), l = md5ii(l, c, h, r, t[a + 1], 21, -2054922799), r = md5ii(r, l, c, h, t[a + 8], 6, 1873313359), h = md5ii(h, r, l, c, t[a + 15], 10, -30611744), c = md5ii(c, h, r, l, t[a + 6], 15, -1560198380), l = md5ii(l, c, h, r, t[a + 13], 21, 1309151649), r = md5ii(r, l, c, h, t[a + 4], 6, -145523070), h = md5ii(h, r, l, c, t[a + 11], 10, -1120210379), c = md5ii(c, h, r, l, t[a + 2], 15, 718787259), l = md5ii(l, c, h, r, t[a + 9], 21, -343485551), r = safeAdd(r, i), l = safeAdd(l, s), c = safeAdd(c, n), h = safeAdd(h, o);
		return [r, l, c, h]
	}

	function binl2rstr(t) {
		var e, a = "",
			i = 32 * t.length;
		for (e = 0; e < i; e += 8) a += String.fromCharCode(t[e >> 5] >>> e % 32 & 255);
		return a
	}

	function rstr2binl(t) {
		var e, a = [];
		for (a[(t.length >> 2) - 1] = void 0, e = 0; e < a.length; e += 1) a[e] = 0;
		var i = 8 * t.length;
		for (e = 0; e < i; e += 8) a[e >> 5] |= (255 & t.charCodeAt(e / 8)) << e % 32;
		return a
	}

	function rstrMD5(t) {
		return binl2rstr(binlMD5(rstr2binl(t), 8 * t.length))
	}

	function rstrHMACMD5(t, e) {
		var a, i, s = rstr2binl(t),
			n = [],
			o = [];
		for (n[15] = o[15] = void 0, s.length > 16 && (s = binlMD5(s, 8 * t.length)), a = 0; a < 16; a += 1) n[a] = 909522486 ^ s[a], o[a] = 1549556828 ^ s[a];
		return i = binlMD5(n.concat(rstr2binl(e)), 512 + 8 * e.length), binl2rstr(binlMD5(o.concat(i), 640))
	}

	function rstr2hex(t) {
		var e, a, i = "";
		for (a = 0; a < t.length; a += 1) e = t.charCodeAt(a), i += "0123456789abcdef".charAt(e >>> 4 & 15) + "0123456789abcdef".charAt(15 & e);
		return i
	}

	function str2rstrUTF8(t) {
		return unescape(encodeURIComponent(t))
	}

	function rawMD5(t) {
		return rstrMD5(str2rstrUTF8(t))
	}

	function hexMD5(t) {
		return rstr2hex(rawMD5(t))
	}

	function rawHMACMD5(t, e) {
		return rstrHMACMD5(str2rstrUTF8(t), str2rstrUTF8(e))
	}

	function hexHMACMD5(t, e) {
		return rstr2hex(rawHMACMD5(t, e))
	}

	function md5(t, e, a) {
		return e ? a ? rawHMACMD5(e, t) : hexHMACMD5(e, t) : a ? rawMD5(t) : hexMD5(t)
	}
	const version = "3.5.2",
		VERSION = version,
		_hasatob = "function" == typeof atob,
		_hasbtoa = "function" == typeof btoa,
		_hasBuffer = "function" == typeof Buffer,
		_TD = "function" == typeof TextDecoder ? new TextDecoder : void 0,
		_TE = "function" == typeof TextEncoder ? new TextEncoder : void 0,
		b64ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
		b64chs = [...b64ch],
		b64tab = (t => {
			let e = {};
			return b64chs.forEach((t, a) => e[t] = a), e
		})(),
		b64re = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,
		_fromCC = String.fromCharCode.bind(String),
		_U8Afrom = "function" == typeof Uint8Array.from ? Uint8Array.from.bind(Uint8Array) : (t, e = (t => t)) => new Uint8Array(Array.prototype.slice.call(t, 0).map(e)),
		_mkUriSafe = t => t.replace(/[+\/]/g, t => "+" == t ? "-" : "_").replace(/=+$/m, ""),
		_tidyB64 = t => t.replace(/[^A-Za-z0-9\+\/]/g, ""),
		btoaPolyfill = t => {
			let e, a, i, s, n = "";
			const o = t.length % 3;
			for (let o = 0; o < t.length;) {
				if ((a = t.charCodeAt(o++)) > 255 || (i = t.charCodeAt(o++)) > 255 || (s = t.charCodeAt(o++)) > 255) throw new TypeError("invalid character found");
				n += b64chs[(e = a << 16 | i << 8 | s) >> 18 & 63] + b64chs[e >> 12 & 63] + b64chs[e >> 6 & 63] + b64chs[63 & e]
			}
			return o ? n.slice(0, o - 3) + "===".substring(o) : n
		},
		_btoa = _hasbtoa ? t => btoa(t) : _hasBuffer ? t => Buffer.from(t, "binary").toString("base64") : btoaPolyfill,
		_fromUint8Array = _hasBuffer ? t => Buffer.from(t).toString("base64") : t => {
			let e = [];
			for (let a = 0, i = t.length; a < i; a += 4096) e.push(_fromCC.apply(null, t.subarray(a, a + 4096)));
			return _btoa(e.join(""))
		},
		fromUint8Array = (t, e = !1) => e ? _mkUriSafe(_fromUint8Array(t)) : _fromUint8Array(t),
		cb_utob = t => {
			if (t.length < 2) return (e = t.charCodeAt(0)) < 128 ? t : e < 2048 ? _fromCC(192 | e >>> 6) + _fromCC(128 | 63 & e) : _fromCC(224 | e >>> 12 & 15) + _fromCC(128 | e >>> 6 & 63) + _fromCC(128 | 63 & e);
			var e = 65536 + 1024 * (t.charCodeAt(0) - 55296) + (t.charCodeAt(1) - 56320);
			return _fromCC(240 | e >>> 18 & 7) + _fromCC(128 | e >>> 12 & 63) + _fromCC(128 | e >>> 6 & 63) + _fromCC(128 | 63 & e)
		},
		re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,
		utob = t => t.replace(re_utob, cb_utob),
		_encode = _hasBuffer ? t => Buffer.from(t, "utf8").toString("base64") : _TE ? t => _fromUint8Array(_TE.encode(t)) : t => _btoa(utob(t)),
		encode = (t, e = !1) => e ? _mkUriSafe(_encode(t)) : _encode(t),
		encodeURI = t => encode(t, !0),
		re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,
		cb_btou = t => {
			switch (t.length) {
				case 4:
					var e = ((7 & t.charCodeAt(0)) << 18 | (63 & t.charCodeAt(1)) << 12 | (63 & t.charCodeAt(2)) << 6 | 63 & t.charCodeAt(3)) - 65536;
					return _fromCC(55296 + (e >>> 10)) + _fromCC(56320 + (1023 & e));
				case 3:
					return _fromCC((15 & t.charCodeAt(0)) << 12 | (63 & t.charCodeAt(1)) << 6 | 63 & t.charCodeAt(2));
				default:
					return _fromCC((31 & t.charCodeAt(0)) << 6 | 63 & t.charCodeAt(1))
			}
		},
		btou = t => t.replace(re_btou, cb_btou),
		atobPolyfill = t => {
			if (t = t.replace(/\s+/g, ""), !b64re.test(t)) throw new TypeError("malformed base64.");
			t += "==".slice(2 - (3 & t.length));
			let e, a, i, s = "";
			for (let n = 0; n < t.length;) e = b64tab[t.charAt(n++)] << 18 | b64tab[t.charAt(n++)] << 12 | (a = b64tab[t.charAt(n++)]) << 6 | (i = b64tab[t.charAt(n++)]), s += 64 === a ? _fromCC(e >> 16 & 255) : 64 === i ? _fromCC(e >> 16 & 255, e >> 8 & 255) : _fromCC(e >> 16 & 255, e >> 8 & 255, 255 & e);
			return s
		},
		_atob = _hasatob ? t => atob(_tidyB64(t)) : _hasBuffer ? t => Buffer.from(t, "base64").toString("binary") : atobPolyfill,
		_toUint8Array = _hasBuffer ? t => _U8Afrom(Buffer.from(t, "base64")) : t => _U8Afrom(_atob(t), t => t.charCodeAt(0)),
		toUint8Array = t => _toUint8Array(_unURI(t)),
		_decode = _hasBuffer ? t => Buffer.from(t, "base64").toString("utf8") : _TD ? t => _TD.decode(_toUint8Array(t)) : t => btou(_atob(t)),
		_unURI = t => _tidyB64(t.replace(/[-_]/g, t => "-" == t ? "+" : "/")),
		decode = t => _decode(_unURI(t)),
		_noEnum = t => ({
			value: t,
			enumerable: !1,
			writable: !0,
			configurable: !0
		}),
		extendString = function() {
			const t = (t, e) => Object.defineProperty(String.prototype, t, _noEnum(e));
			t("fromBase64", function() {
				return decode(this)
			}), t("toBase64", function(t) {
				return encode(this, t)
			}), t("toBase64URI", function() {
				return encode(this, !0)
			}), t("toBase64URL", function() {
				return encode(this, !0)
			}), t("toUint8Array", function() {
				return toUint8Array(this)
			})
		},
		extendUint8Array = function() {
			const t = (t, e) => Object.defineProperty(Uint8Array.prototype, t, _noEnum(e));
			t("toBase64", function(t) {
				return fromUint8Array(this, t)
			}), t("toBase64URI", function() {
				return fromUint8Array(this, !0)
			}), t("toBase64URL", function() {
				return fromUint8Array(this, !0)
			})
		},
		extendBuiltins = () => {
			extendString(), extendUint8Array()
		},
		gBase64 = {
			version: version,
			VERSION: VERSION,
			atob: _atob,
			atobPolyfill: atobPolyfill,
			btoa: _btoa,
			btoaPolyfill: btoaPolyfill,
			fromBase64: decode,
			toBase64: encode,
			encode: encode,
			encodeURI: encodeURI,
			encodeURL: encodeURI,
			utob: utob,
			btou: btou,
			decode: decode,
			fromUint8Array: fromUint8Array,
			toUint8Array: toUint8Array,
			extendString: extendString,
			extendUint8Array: extendUint8Array,
			extendBuiltins: extendBuiltins
		},
		LOG10 = Math.log(10);
	class Mathf {
		static log(t, e) {
			return null == e ? Math.log(t) / LOG10 : Math.log(t) / Math.log(e)
		}
		static getDigits(t) {
			return Math.floor(this.log(t))
		}
		static random(t, e) {
			return null == t ? Math.random() : null == e ? Math.random() * t + 1 | 0 : Math.random() * (e - t + 1) + t | 0
		}
		static randomPlusOrMinus() {
			return 2 * (this.random(2) - 1) - 1
		}
		static trueOrFalse() {
			return Math.random() > .5
		}
		static randomEnable(t) {
			return this.random(100) <= t
		}
		static clamp01(t) {
			return t > 1 ? 1 : t < 0 ? 0 : t
		}
		static clamp(t, e, a) {
			return t < e ? e : t > a ? a : t
		}
		static sign(t) {
			return t >= 0 ? 1 : -1
		}
		static fuzzyEquals(t, e) {
			return Math.abs(t - e) < this.EPSILON
		}
		static lerp(t, e, a) {
			return t + (e - t) * this.clamp01(a)
		}
		static inverseLerp(t, e, a) {
			return t != e ? this.clamp01((a - t) / (e - t)) : 0
		}
		static lerpFromInverseLerp(t, e, a, i, s) {
			return this.lerp(t, e, this.inverseLerp(a, i, s))
		}
		static getFitScale(t, e, a, i) {
			let s = a / t,
				n = i / e;
			return Math.min(s, n)
		}
		static round(t, e) {
			e = e || 0;
			let a = this.roundPower10Double[e];
			return t *= a, Math.round(t) / a
		}
		static loop(t, e, a) {
			if (null == a && (a = e, e = 0), t < e) return e;
			return e + (t - e) % (a - e)
		}
		static pingPong(t, e, a) {
			if (null == a && (a = e, e = 0), t < e) return e; {
				let i = a - e,
					s = t - e,
					n = s % i;
				return Math.floor(s / i) % 2 == 0 ? n + e : a - n
			}
		}
		static nextGaussian(t, e) {
			return t + this.uniform2NormalDistribution() * e
		}
		static uniform2NormalDistribution() {
			for (var t = 0, e = 0; e < 12; e++) t += Math.random();
			return t - 6
		}
		static circleRandom(...t) {
			return this.arrCircleRandom(t)
		}
		static arrCircleRandom(t) {
			let e = 0;
			for (let a = 0; a < t.length; a++) e += t[a];
			if (e <= 0) return -1;
			let a = Mathf.random(e);
			for (let e = 0; e < t.length; e++) {
				if (a <= t[e]) return e;
				a -= t[e]
			}
			return -1
		}
		static makeRandomArray(t) {
			let e = new Array(t);
			for (let a = 0; a < t; a++) e[a] = a;
			return this.shuffle(e), e
		}
		static randomFromArray(t, e) {
			if (t && t.length) {
				let a = this.random(t.length) - 1;
				return e ? t.splice(a, 1)[0] : t[a]
			}
			return null
		}
		static shuffle(t) {
			let e, a;
			for (let i = t.length - 1; i > 0; i--) a = this.random(0, i), e = t[i], t[i] = t[a], t[a] = e
		}
		static swap(t, e, a) {
			let i = t[e];
			t[e] = t[a], t[a] = i
		}
		static minIndex(t) {
			let e = Number.MAX_SAFE_INTEGER,
				a = -1;
			for (let i = t.length - 1; i >= 0; i--) t[i] <= e && (e = t[i], a = i);
			return a
		}
		static distance(t, e) {
			let a = t.x - e.x,
				i = t.y - e.y;
			return Math.sqrt(a * a + i * i)
		}
		static distance2(t, e) {
			return Math.sqrt(t * t + e * e)
		}
		static distanceSqr(t, e) {
			let a = t.x - e.x,
				i = t.y - e.y;
			return a * a + i * i
		}
		static distanceSqr2(t, e) {
			return t * t + e * e
		}
		static easeInLogic(t) {
			return 1 - Math.sin(.5 * Math.PI * (1 - t))
		}
		static easeOutLogic(t) {
			return Math.sin(.5 * Math.PI * t)
		}
		static easeInOutLogic(t) {
			let e = 2 * Math.PI;
			return t - Math.sin(t * e) / e
		}
		static bounceLogic(t) {
			return t < .363636 ? t *= 7.5685 * t : t = t < .727272 ? 7.5625 * (t -= .545454) * t + .75 : t < .90909 ? 7.5625 * (t -= .818181) * t + .9375 : 7.5625 * (t -= .9545454) * t + .984375, t
		}
		static point2Ray(t, e, a) {
			return Laya.Vector3.add(t, e, this._TEMP_VEC3), this.point2line(t, this._TEMP_VEC3, a)
		}
		static point2line(t, e, a) {
			let i = Math.sqrt,
				s = Math.pow,
				n = i(s(t.x - e.x, 2) + s(t.y - e.y, 2) + s(t.z - e.z, 2)),
				o = i(s(t.x - a.x, 2) + s(t.y - a.y, 2) + s(t.z - a.z, 2)),
				r = i(s(a.x - e.x, 2) + s(a.y - e.y, 2) + s(a.z - e.z, 2)),
				l = (s(o, 2) + s(n, 2) - s(r, 2)) / (2 * n * o);
			return o * i(1 - s(l, 2))
		}
		static intersectTriangle(t, e, a, i, s, n) {
			let o = 0,
				r = 0,
				l = 0,
				c = this.TEMP_VEC3S[0];
			Laya.Vector3.subtract(i, a, c);
			let h = this.TEMP_VEC3S[1];
			Laya.Vector3.subtract(s, a, h);
			let d = this.TEMP_VEC3S[2];
			Laya.Vector3.cross(e, h, d);
			let _ = Laya.Vector3.dot(c, d),
				g = this.TEMP_VEC3S[3];
			if (_ > 0 ? Laya.Vector3.subtract(t, a, g) : (Laya.Vector3.subtract(a, t, g), _ = -_), _ < 1e-8) return !1;
			if ((r = Laya.Vector3.dot(g, d)) < 0 || r > _) return !1;
			let u = this.TEMP_VEC3S[4];
			if (Laya.Vector3.cross(g, c, u), (l = Laya.Vector3.dot(e, u)) < 0 || r + l > _) return !1;
			if (o = Laya.Vector3.dot(h, u), n) {
				let a = 1 / _;
				o *= a, r *= a, l *= a, n.t = o, n.u = r, n.v = l;
				let i = e.clone();
				Laya.Vector3.scale(i, o, i), Laya.Vector3.add(t, i, i), n.p = i
			}
			return !0
		}
	}
	Mathf.roundPower10Double = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13, 1e14, 1e15], Mathf.PI = 3.14159274, Mathf.Deg2Rad = .0174532924, Mathf.Rad2Deg = 57.295779, Mathf.TEMP_POINT = new Laya.Point, Mathf.TEMP_POINTS = [new Laya.Point, new Laya.Point, new Laya.Point, new Laya.Point], Mathf.TempRect = Laya.Rectangle.create(), Mathf.TEMP_VEC3 = new Laya.Vector3, Mathf.TEMP_VEC3S = [new Laya.Vector3, new Laya.Vector3, new Laya.Vector3, new Laya.Vector3, new Laya.Vector3], Mathf._TEMP_VEC3 = new Laya.Vector3, Mathf.EPSILON = 1e-6, Mathf.calcPointOnArc = function(t, e, a, i) {
		let s, n, o = i * Math.PI / 180;
		return [s = Math.cos(o) * a + t, n = Math.sin(o) * a + e]
	};
	let pako = window.pako;

	function _dump(t, e) {
		let a = "";
		e || (e = 0);
		let i = "";
		for (let t = 0; t < e + 1; t++) i += "    ";
		if (t instanceof Array)
			for (let s = 0; s < t.length; s++) {
				let n = t[s];
				"object" == typeof n ? (a += i + s + " ...\n", a += _dump(n, e + 1)) : a += "number" == typeof n ? i + s + " => " + n + "\n" : i + s + ' => "' + n + '"\n'
			} else if ("object" == typeof t)
				for (let s in t) {
					let n = t[s];
					"object" == typeof n ? (a += i + "'" + s + "' ...\n", a += _dump(n, e + 1)) : a += "number" == typeof n ? i + "'" + s + "' => " + n + "\n" : i + "'" + s + "' => \"" + n + '"\n'
				} else a = "===>" + t + "<===(" + typeof t + ")";
		return a
	}
	class Tools {
		static isOneDay(t, e) {
			let a = new Date(1e3 * t),
				i = new Date(1e3 * e);
			return a.getFullYear() == i.getFullYear() && a.getMonth() == i.getMonth() && a.getDate() == i.getDate()
		}
		static getMidnightTime(t) {
			let e;
			return (e = null == t ? new Date(Date.now()) : new Date(1e3 * t)).setHours(0, 0, 0, 0), e.getTime() / 1e3
		}
		static getObjSize(t) {
			if (!t) return 0;
			if (Array.isArray(t)) return t.length;
			let e = 0;
			return Tools.forEachMap(t, (t, a) => {
				e++
			}), e
		}
		static forEachMap(t, e) {
			if (t)
				for (var a, i, s = Object.keys(t), n = 0, o = s.length; n < o && (null == (i = t[a = s[n]]) || !e(a, i)); n++);
		}
		static clearNullValue(t) {
			for (var e, a = Object.keys(t), i = 0, s = a.length; i < s; i++) null == t[e = a[i]] && delete t[e]
		}
		static splitToNumber(t, e) {
			if (!t || !e) return [];
			let a = t.split(e),
				i = [];
			for (let t = 0; t < a.length; t++) i[t] = this.safeParseInt(a[t], null);
			return i
		}
		static formatNumber(t, e, a) {
			let i = t = Math.floor(t),
				s = 1;
			for (;
				(i /= 10) >= 1;) s++;
			if (s >= a) return t.toString(); {
				let i = a - s,
					n = "";
				for (let t = 0; t < i; t++) n += e;
				return n + t
			}
		}
		static _formatTime(t, e) {
			let a = Math.floor(t / 3600),
				i = Math.floor(t / 60) % 60,
				s = Math.floor(t) % 60;
			return e.match("%h") && (e = e.replace("%h", a.toString())), e.match("%H") && (e = e.replace("%h", Tools.formatNumber(a, "0", 2))), e.match("%m") && (e = e.replace("%m", i.toString())), e.match("%M") && (e = e.replace("%M", Tools.formatNumber(i, "0", 2))), e.match("%s") && (e = e.replace("%s", s.toString())), e.match("%S") && (e = e.replace("%S", Tools.formatNumber(s, "0", 2))), e
		}
		static formatTime(t) {
			if ((t = Math.ceil(t)) <= 0) return "00:00";
			let e = Math.floor(t / 3600),
				a = Math.floor(t / 60) % 60,
				i = Math.ceil(t) % 60,
				s = "";
			return e > 0 && (s = e + ":"), s = a > 9 ? `${s}${a}:` : `${s}0${a}:`, s = i > 9 ? `${s}${i}` : `${s}0${i}`
		}
		static formatFullTime(t = Date.now()) {
			var e = new Date(t),
				a = e.getFullYear(),
				i = e.getMonth() + 1,
				s = e.getDate(),
				n = e.getHours(),
				o = e.getMinutes(),
				r = e.getSeconds();
			return `${a}-${i<10?"0"+i:i}-${s<10?"0"+s:s} ${n<10?"0"+n:n}:${o<10?"0"+o:o}:${r<10?"0"+r:r}`
		}
		static formatSimpleTime(t) {
			return (t = Math.max(Math.ceil(t), 0)) < 60 ? `0:0${t}` : t < 3600 ? `0:${Math.ceil(t/60)}0` : `${Math.ceil(t/3600)}:00`
		}
		static formatDate(t) {
			var e = new Date(t);
			return `${e.getFullYear()}-${e.getMonth()+1}-${e.getDate()}`
		}
		static generateUUID() {
			let t = (new Date).getTime();
			return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, e => {
				var a = (t + 16 * Math.random()) % 16 | 0;
				return t = Math.floor(t / 16), ("x" == e ? a : 3 & a | 8).toString(16)
			})
		}
		static deepCopy(t, e) {
			if (!t) return t;
			if (t instanceof Array) {
				let a = e || [],
					i = t.length;
				for (let e = 0; e < i; e++) {
					const i = t[e];
					a.push(this.deepCopy(i))
				}
				return a
			}
			if (t instanceof Object) {
				let a = e || {},
					i = Object.keys(t);
				for (let e = 0; e < i.length; e++) {
					let s = i[e],
						n = t[s];
					a[s] = this.deepCopy(n)
				}
				return a
			}
			return t
		}
		static testDeepCopy() {
			console.log(this.deepCopy("haha"));
			console.log(this.deepCopy(3));
			console.log(this.deepCopy(["1", "3"]));
			console.log(this.deepCopy({
				a: "h",
				b: "m"
			}))
		}
		static mergeArray(t, e) {
			for (let a = 0; a < t.length; a++) e.push(t[a])
		}
		static swap(t, e, a) {
			let i = t[e];
			t[e] = t[a], t[a] = i
		}
		static getMd5(t) {
			return md5(null == t ? "null" : t)
		}
		static getMax(t) {
			let e = -Number.MAX_VALUE;
			for (let a = 0; a < t.length; a++) e < t[a] && (e = t[a]);
			return e
		}
		static getMaxIndex(t) {
			let e = -Number.MAX_VALUE,
				a = -1;
			for (let i = 0; i < t.length; i++) e < t[i] && (e = t[i], a = i);
			return a
		}
		static isValueType(t) {
			let e = typeof t;
			return "number" == e || "boolean" == e || "string" == e
		}
		static serializeObject(t) {
			let e = this.deepCopy(t);
			return JSON.stringify(e)
		}
		static copyTo(t, e) {
			if (t instanceof Array)
				for (let a = 0; a < t.length; a++) e[a] = t[a];
			if (t instanceof Object) {
				let a = Object.keys(t);
				for (let i = 0; i < a.length; i++) {
					let s = a[i];
					e[s] = t[s]
				}
			}
		}
		static deserializeObject(t, e) {
			let a = JSON.parse(t);
			this.copyTo(a, e)
		}
		static safeParseInt(t, e, a) {
			let i = parseInt(t, a);
			return isNaN(i) ? e : i
		}
		static safeParseFloat(t, e) {
			let a = parseFloat(t);
			return isNaN(a) ? e : a
		}
		static safeParseBool(t) {
			return !!t && ("0" != (t = t.toString()) && "false" != (t = t.toLowerCase()))
		}
		static arrayCopy(t, e, a, i, s) {
			if (t.length < e + s) throw "arrayCopy: src out of bound";
			if (a.length < i + s) throw "arrayCopy: dest out of bound";
			for (let n = 0; n < s; n++) a[i + n] = t[e + n]
		}
		static arrayFill(t, e) {
			for (let a = t.length - 1; a >= 0; a--) t[a] = e
		}
		static sort_db_by_order(t, e) {
			return t.order - e.order
		}
		static dump(t, e, a) {
			let i = _dump(t);
			console.log("dump-begin", e), console.log(i), console.log("dump-end")
		}
		static utf8Len(t) {
			var e = 0;
			if (t)
				for (var a = 0; a < t.length; a++) {
					let i = t.charCodeAt(a);
					i > 127 || 94 == i ? e += 2 : e++
				}
			return e
		}
		static bitSub(t, e) {
			return (t & e) > 0 ? t - e : t
		}
		static compress(t) {
			return pako.gzip(t, {
				to: "string"
			})
		}
		static decompress(t) {
			try {
				return pako.ungzip(t, {
					to: "string"
				})
			} catch (t) {
				return Logger.catchError("Tools.decompress", t), null
			}
		}
		static compressToBase64(t) {
			let e = this.compress(t);
			return Base64.encode(e)
		}
		static decompressFromBase64(t) {
			let e = Base64.decode(t);
			return this.decompress(e)
		}
		static compressToBase64New(t) {
			let e = this.compress(t);
			return gBase64.encode(e, !0)
		}
		static decompressFromBase64New(t) {
			let e = gBase64.decode(t);
			return this.decompress(e)
		}
		static compressArr(t) {
			return pako.deflate(t)
		}
		static decompressArr(t) {
			try {
				return pako.inflate(t)
			} catch (t) {
				Logger.catchError("Tools.decompressArr", t)
			}
		}
		static decompressArrToStr(t) {
			return pako.ungzip(t, {
				to: "string"
			})
		}
		static printTrace() {
			Logger.isDebugLevel && console.trace && Logger.log(console.trace())
		}
		static getPath(t) {
			let e = t.lastIndexOf("/");
			return e > 0 ? t.slice(0, e + 1) : ";;"
		}
		static _toHexColor(t) {
			let e;
			return e = (e = Math.floor(t).toString(16)).length > 1 ? e : "0" + e
		}
		static toHexColor(t) {
			return "#" + this._toHexColor(t.r) + this._toHexColor(t.g) + this._toHexColor(t.b)
		}
		static requestHttp(t, e, a, i) {
			var s = new Laya.HttpRequest;
			s.http.timeout = 1e4, s.once(Laya.Event.COMPLETE, e, a), s.once(Laya.Event.ERROR, e, i), s.send("res/data.data", "", "get", "text")
		}
		static reverseBitmap(t, e, a) {
			var i = new Uint8Array(e * a * 4);
			let s = 4 * e,
				n = 0,
				o = (a - 1) * s;
			for (var r = a - 1; r >= 0; r--) i.set(t.slice(o, o + s), n), n += s, o -= s;
			return i
		}
		static getTex2dFromTex2d(t, e, a, i, s) {
			e |= 0, a |= 0, i |= 0, s |= 0;
			var n = this.getTexturePixels(t, e, a, i, s);
			let o = new Laya.Texture2D(i, s, t.format, !1, !0);
			return o.setPixels(n), o
		}
		static getTexturePixels(t, e, a, i, s) {
			e |= 0, a |= 0, i |= 0, s |= 0;
			let n = t.width,
				o = t.height,
				r = t.getPixels();
			if (0 == e && 0 == a && i == n && s == o) return r;
			let l = Laya.Texture.DEF_UV,
				c = Math.round(l[0] * n),
				h = Math.round(l[1] * o);
			var d = new Uint8Array(i * s * 4);
			let _ = 4 * n,
				g = 4 * c + 4 * e + (h + a) * _;
			for (var u = 0; u < s; u++) d.set(r.slice(g, g + 4 * i), 4 * i * (u + 0) + 0), g += _;
			return d
		}
		static calcWheelTarget(t, e) {
			let a = 0;
			for (let i = 0; i < t.length; i++) {
				const s = t[i];
				let n = parseInt(s[e]);
				if (isNaN(n)) return console.warn(`Tools.calcWheelTarget weight field not found! key=[${e}]`), null;
				a += n
			}
			let i = Mathf.random(a);
			for (let a = 0; a < t.length; a++) {
				const s = t[a];
				let n = parseInt(s[e]);
				if (i <= n) return s;
				i -= n
			}
			return null
		}
		static sortArrayByField(t, e) {
			e = "string" == typeof e ? [e] : e;
			let a = [];
			for (let t in e) {
				let i = e[t];
				if (i && "" != i)
					if ("-" === i.substring(0, 1)) {
						let t = i.substring(1, i.length);
						t && "" != t && a.push([t, !0])
					} else a.push([i, !1])
			}
			let i = [];
			for (let e = 0; e < t.length; e++) {
				const a = t[e];
				i.push(a)
			}
			return i.sort((t, e) => {
				let i = 0;
				for (let s in a) {
					let n = a[s],
						o = n[0],
						r = n[1],
						l = t[o],
						c = e[o];
					if (null != l && 0 != (i = r ? c - l : l - c)) return i
				}
				return i
			}), i
		}
		static calcAngleA2B(t, e) {
			if (!t) return 0;
			if (!e) return 0;
			let a = Laya.Vector3.scalarLength(t),
				i = Laya.Vector3.scalarLength(e);
			if (!a) return 0;
			if (!i) return 0;
			let s = Laya.Vector3.dot(t, e) / (a * i);
			return Math.acos(s)
		}
	}
	class Queue {
		constructor(t = 128, e = !0) {
			this.autoGrow = !0, this.autoGrow = e, this.maxLen = t, this.tail = 0, this.head = 0, this.count = 0, this.queue = new Array(t)
		}
		get size() {
			return this.count
		}
		get max() {
			return this.maxLen
		}
		enqueue(t) {
			if (this.autoGrow) this.count >= this.maxLen - 1 && this.grow();
			else if (this.count >= this.maxLen) return !1;
			return this.queue[this.tail] = t, this.tail = ++this.tail % this.maxLen, this.count++, !0
		}
		dequeue() {
			for (; this.count <= 0;) return null;
			let t = this.queue[this.head];
			return this.queue[this.head] = null, this.head = ++this.head % this.maxLen, this.count--, t
		}
		peek() {
			for (; this.count <= 0;) return null;
			return this.queue[this.head]
		}
		grow() {
			let t = this.maxLen + (this.maxLen >> 1);
			this.maxLen = this.hugeLen(t);
			let e = new Array(this.maxLen);
			this.count > 0 && (this.head < this.tail ? Tools.arrayCopy(this.queue, this.head, e, 0, this.count) : (Tools.arrayCopy(this.queue, this.head, e, 0, this.queue.length - this.head), Tools.arrayCopy(this.queue, 0, e, this.queue.length - this.head, this.tail))), this.queue = e, this.head = 0, this.tail = this.count == this.maxLen ? 0 : this.count
		}
		hugeLen(t) {
			if (t < 0) throw "Queue.hugeLen: OutOfMemoryError";
			return t > Queue.MAX_ARRAY_SIZE ? Queue.MAX_ARRAY_SIZE : t
		}
		clear() {
			this.tail = 0, this.head = 0, this.count = 0, this.queue = new Array(this.queue.length)
		}
		reset() {
			this.tail = 0, this.head = 0, this.count = 0
		}
		indexOf(t) {
			if (t < 0 || t >= this.count) return null;
			return this.queue[(this.head + t) % this.maxLen]
		}
		contains(t) {
			for (let e = 0; e < this.count; e++)
				if (t == this.indexOf(e)) return !0;
			return !1
		}
	}
	Queue.MAX_ARRAY_SIZE = Number.MAX_VALUE - 8;
	const KEY_POOL_ID = "__pool_id",
		KEY_POOL_KEY = "__pool_key",
		KEY_FLAG_IN_POOL = "__pool_flag_inpool";
	class PoolStack {
		constructor() {
			this.m_queue = new Queue(16, !0), this.m_referenceCount = 0
		}
		get length() {
			return this.m_queue.size
		}
		push(t) {
			this.m_queue.enqueue(t)
		}
		pop() {
			return this.m_queue.dequeue()
		}
		retain() {
			this.m_referenceCount++
		}
		release() {
			this.m_referenceCount--
		}
		get referenceCount() {
			return this.m_referenceCount
		}
		get totalCount() {
			return this.m_referenceCount + this.m_queue.size
		}
	}
	class PoolManager {
		constructor() {
			this.pools = [], this.poolConfigs = []
		}
		_getPool(t, e) {
			let a = this.pools[t];
			a || (a = {}, this.pools[t] = a);
			let i = a[e];
			return i || (i = new PoolStack, a[e] = i), i
		}
		register(t, e, a = !0) {
			if (t[KEY_POOL_ID]) {
				if (this.poolConfigs[t[KEY_POOL_ID]].reuseClass === t) return void Logger.error("PoolManager.register class is registed.", t)
			}
			let i = {
				reuseClass: t,
				maxCount: e,
				bOverload: a
			};
			t[KEY_POOL_ID] = this.poolConfigs.length, this.poolConfigs.push(i)
		}
		get(t, e) {
			let a = t[KEY_POOL_ID];
			if (null == a) return Logger.warn("PoolManager.get class is not register.", t), this.register(t, 1e3), this.get(t, e);
			let i = this.poolConfigs[a];
			if (!i) return void Logger.warn(`"PoolManager.get config not found! poolId = ${a}"`);
			null == e && (e = "__default_pool_key__");
			let s = this._getPool(a, e),
				n = s.pop();
			if (!n) {
				if (!i.bOverload && s.totalCount >= i.maxCount) return null;
				(n = new t(e))[KEY_POOL_ID] = a, n[KEY_POOL_KEY] = e
			}
			return s.retain(), n.reuse(), n[KEY_FLAG_IN_POOL] = !1, n
		}
		put(t) {
			if (!t) return Logger.warn("PoolManager.put node is nil!"), !1;
			let e = t[KEY_POOL_ID],
				a = t[KEY_POOL_KEY];
			if (null == e) return Logger.warn("PoolManager.put obj[KEY_POOL_ID] not found!"), !1;
			if (!a) return Logger.warn("PoolManager.put obj[KEY_POOL_KEY] not found!"), !1;
			let i = this.poolConfigs[e];
			if (!i) return Logger.warn(`PoolManager.put config not found! poolId:[${e}] key:[${a}]`), !1;
			if (t[KEY_FLAG_IN_POOL]) return Logger.warn(`PoolManager.put obj is already in pool! [${e}] key:[${a}]`), !1;
			if (t.destroyed || t.isResNodeDestroyed) return Logger.warn(`PoolManager.put obj is destroyed! [${e}] key:[${a}]`), !1;
			t.unuse();
			let s = this._getPool(e, a);
			return s.length < i.maxCount ? (t[KEY_FLAG_IN_POOL] = !0, s.push(t)) : (Logger.debug(`PoolManager.put pool:[${e}] key:[${a}] is full!`), t.dispose()), s.release(), !0
		}
		clean(t, e) {
			let a = t[KEY_POOL_ID];
			for (const t in this.pools)
				if (null != a || a == t) {
					const a = this.pools[t];
					for (const t in a)
						if (!e || e == t) {
							const e = a[t];
							let i = e.length;
							for (let t = 0; t < i; t++) {
								e.pop().dispose()
							}
						}
				}
		}
		debugInfo() {
			console.log("\n------ debug PoolManager ------");
			for (const t in this.pools) {
				const e = this.pools[t];
				for (const a in e) {
					const i = e[a],
						s = this.poolConfigs[t];
					console.log(`pool:${t}    class:${s.reuseClass.name}    key:${a}    cached:${i.length}    used:${i.referenceCount}`)
				}
			}
			console.log("\n------ debug pool class info ------")
		}
		debugClassId() {
			for (let t = 0; t < this.poolConfigs.length; t++) {
				let e = this.poolConfigs[t],
					a = e.reuseClass.toString(),
					i = a.indexOf("{");
				i && i > 9 && (a = a.substring(9, i)), console.log(`class:${a}    name:${e.reuseClass.name}    poolId:${e.reuseClass[KEY_POOL_ID]}`)
			}
		}
	}
	class Stack {
		constructor(t = 128, e = !0) {
			this.autoGrow = !0, this.autoGrow = e, this.count = 0, this.stack = new Array(t)
		}
		get size() {
			return this.count
		}
		push(t) {
			return !(!this.autoGrow && this.count >= this.stack.length) && (this.stack[this.count++] = t, !0)
		}
		pop() {
			if (this.count <= 0) return null;
			let t = this.stack[--this.count];
			return this.stack[this.count] = null, t
		}
		peek() {
			for (; this.count <= 0;) return null;
			return this.stack[this.count - 1]
		}
		clear() {
			this.count = 0, this.stack = new Array(this.stack.length)
		}
		reset() {
			this.count = 0
		}
		indexOf(t) {
			return t < 0 || t >= this.count ? null : this.stack[t]
		}
		contains(t) {
			for (let e = 0; e < this.count; e++)
				if (t == this.stack[e]) return !0;
			return !1
		}
	}
	const KEY_POOL_ID$1 = "__pool_id2",
		KEY_FLAG_IN_POOL$1 = "__pool_flag_inpool";
	class Pool {
		constructor() {
			this._pools = [], this._classNames = [], this._key2id = Object.create(null)
		}
		get(t) {
			let e = t[KEY_POOL_ID$1];
			null == e && (e = this._pools.length, t[KEY_POOL_ID$1] = e, this._classNames.push(t.name || "unkown"), this._pools.push(new Stack(32, !0)));
			let a = this._pools[e].pop();
			return a ? (a[KEY_FLAG_IN_POOL$1] = !1, a) : ((a = new t)[KEY_POOL_ID$1] = e, a)
		}
		put(t) {
			let e = t[KEY_POOL_ID$1];
			null != e ? t[KEY_FLAG_IN_POOL$1] ? Logger.warn(`Pool.put obj is already in pool! [${e}].`) : (t[KEY_FLAG_IN_POOL$1] = !0, this._pools[e].push(t)) : Logger.warn("Pool.put obj[KEY_POOL_ID] not found!")
		}
		getObject(t) {
			let e = this._key2id[t];
			null == e && (e = this._pools.length, this._key2id[t] = e, this._classNames.push(t), this._pools.push(new Stack(32, !0)));
			let a = this._pools[e].pop();
			return a ? (a[KEY_FLAG_IN_POOL$1] = !1, a) : ((a = Object.create(null))[KEY_POOL_ID$1] = e, a)
		}
		debugInfo() {
			console.log("\n------ debug pools ------");
			for (let t = 0; t < this._pools.length; t++) {
				const e = this._pools[t];
				console.log(`pool:${t}    name:${this._classNames[t]}    cached:${e.size}`)
			}
			console.log("")
		}
	}
	var SDK_VERSIONS_VALUE;
	! function(t) {
		t.NONE = "None", t.V5 = "V5", t.V6 = "V6"
	}(SDK_VERSIONS_VALUE || (SDK_VERSIONS_VALUE = {}));
	class _G {
		static sendMsg(t, e) {
			this.m_MsgHandler.sendMsg(t, e)
		}
		static get canvasWidth() {
			return UIRoot.canvasWidth
		}
		static get canvasHeight() {
			return UIRoot.canvasHeight
		}
		static get canvasFitWidth() {
			return UIRoot.canvasFitWidth
		}
		static get canvasFitHeight() {
			return UIRoot.canvasFitHeight
		}
		static get top() {
			return UIRoot.fitTop
		}
		static get bottom() {
			return this.canvasHeight - this.top
		}
		static get left() {
			return UIRoot.fitLeft
		}
		static get right() {
			return this.canvasWidth - this.left
		}
		static get centerX() {
			return this.canvasWidth / 2
		}
		static get centerY() {
			return this.canvasHeight / 2
		}
	}
	_G.H5_TEST = !1, _G.DEBUG = !1, _G.GAME_ID = "83", _G.SDK_VERSION = SDK_VERSIONS_VALUE.NONE, _G.RECORD_VERSION = 16, _G.GAME_VERSION = "v1224.2002", _G.PATCH_VERSION = "0", _G.PATCH_INFO = {
		PATCH_LIST: [],
		PATCH_PATH: "",
		B_ID: 0,
		PATCH_INFO_FILENAME: "patch_info.json",
		APP: "",
		P_ID: 1,
		HOST_CDN: "h005up.ultralisk.cn",
		HOST: "h005.ultralisk.cn:4022",
		VERSION: "",
		CONF: {
			CONFIG_VERSION: "",
			PUBLISH_CHANNEL: "",
			B_SKIP_PAYMENT: !0,
			LOGO_TEXTURES: [],
			PATCH_FILTER: {},
			B_DISABLE_DEVTEST_BUTTON: !1
		},
		GIT_HASH: "",
		CHANNEL: ""
	}, _G.gameFrameRate = 50, _G.isGuiding = !1, _G.poolManager = new PoolManager, _G.pool = new Pool, _G.m_MsgHandler = new MsgHandler, _G.FPS = 0, _G.EMPTY_FUN = function() {}, _G.SDK_VERSION = SDK_VERSIONS_VALUE.V6;
	class db {
		static setAllDbs(t) {
			this._allDbs = t
		}
		static getDb(t) {
			let e = this._allDbs[t];
			return e || console.error(`[警告] db.getDb db not found! dbName=[${t}]`), e
		}
		static get_adv_db_map() {
			return this.getDb("adv_db")
		}
		static get_adv_db(t) {
			let e = this.get_adv_db_map()[t];
			return null == e && console.error(`can't find data in adv_db by advName [${t}]`), e
		}
		static get_animation_db_map() {
			return this.getDb("animation_db")
		}
		static get_animation_db(t) {
			let e = this.get_animation_db_map()[t];
			return null == e && console.error(`can't find data in animation_db by id [${t}]`), e
		}
		static get_animation_face_db_map() {
			return this.getDb("animation_face_db")
		}
		static get_animation_face_db(t) {
			let e = this.get_animation_face_db_map()[t];
			return null == e && console.error(`can't find data in animation_face_db by id [${t}]`), e
		}
		static get_attr_up_db_map() {
			return this.getDb("attr_up_db")
		}
		static get_attr_up_db(t, e) {
			let a = this.get_attr_up_db_map()[t][e];
			return null == a && console.error(`can't find data in attr_up_db by level [${e}]`), a
		}
		static get_auto_increase_db_map() {
			return this.getDb("auto_increase_db")
		}
		static get_auto_increase_db(t) {
			let e = this.get_auto_increase_db_map()[t];
			return null == e && console.error(`can't find data in auto_increase_db by itemId [${t}]`), e
		}
		static get_brush_db_map() {
			return this.getDb("brush_db")
		}
		static get_brush_db(t) {
			let e = this.get_brush_db_map()[t];
			return null == e && console.error(`can't find data in brush_db by id [${t}]`), e
		}
		static get_caizhuang_db_arr() {
			return this.getDb("caizhuang_db")
		}
		static get_caizhuang_db(t) {
			let e = this.get_caizhuang_db_arr()[t];
			return null == e && console.error(`can't find data in caizhuang_db by idx [${t}]`), e
		}
		static get_class_matching_db_map() {
			return this.getDb("class_matching_db")
		}
		static get_class_matching_db(t) {
			let e = this.get_class_matching_db_map()[t];
			return null == e && console.error(`can't find data in class_matching_db by id [${t}]`), e
		}
		static get_class_matching_item_db_map() {
			return this.getDb("class_matching_item_db")
		}
		static get_class_matching_item_db(t) {
			let e = this.get_class_matching_item_db_map()[t];
			return null == e && console.error(`can't find data in class_matching_item_db by id [${t}]`), e
		}
		static get_class_math_stage_db_map() {
			return this.getDb("class_math_stage_db")
		}
		static get_class_math_stage_db(t) {
			let e = this.get_class_math_stage_db_map()[t];
			return null == e && console.error(`can't find data in class_math_stage_db by id [${t}]`), e
		}
		static get_class_room_level_db_map() {
			return this.getDb("class_room_level_db")
		}
		static get_class_room_level_db(t) {
			let e = this.get_class_room_level_db_map()[t];
			return null == e && console.error(`can't find data in class_room_level_db by id [${t}]`), e
		}
		static get_class_room_role_db_map() {
			return this.getDb("class_room_role_db")
		}
		static get_class_room_role_db(t) {
			let e = this.get_class_room_role_db_map()[t];
			return null == e && console.error(`can't find data in class_room_role_db by id [${t}]`), e
		}
		static get_class_room_seat_db_map() {
			return this.getDb("class_room_seat_db")
		}
		static get_class_room_seat_db(t) {
			let e = this.get_class_room_seat_db_map()[t];
			return null == e && console.error(`can't find data in class_room_seat_db by id [${t}]`), e
		}
		static get_color_egg_db_map() {
			return this.getDb("color_egg_db")
		}
		static get_color_egg_db(t) {
			let e = this.get_color_egg_db_map()[t];
			return null == e && console.error(`can't find data in color_egg_db by id [${t}]`), e
		}
		static get_cp_animations_map() {
			return this.getDb("cp_animations")
		}
		static get_cp_animations(t) {
			let e = this.get_cp_animations_map()[t];
			return null == e && console.error(`can't find data in cp_animations by id [${t}]`), e
		}
		static get_cp_items_map() {
			return this.getDb("cp_items")
		}
		static get_cp_items(t) {
			let e = this.get_cp_items_map()[t];
			return null == e && console.error(`can't find data in cp_items by id [${t}]`), e
		}
		static get_cp_npc_map() {
			return this.getDb("cp_npc")
		}
		static get_cp_npc(t) {
			let e = this.get_cp_npc_map()[t];
			return null == e && console.error(`can't find data in cp_npc by id [${t}]`), e
		}
		static get_cp_npc_fixed_map() {
			return this.getDb("cp_npc_fixed")
		}
		static get_cp_npc_fixed(t) {
			let e = this.get_cp_npc_fixed_map()[t];
			return null == e && console.error(`can't find data in cp_npc_fixed by id [${t}]`), e
		}
		static get_cp_test_map() {
			return this.getDb("cp_test")
		}
		static get_cp_test(t) {
			let e = this.get_cp_test_map()[t];
			return null == e && console.error(`can't find data in cp_test by id [${t}]`), e
		}
		static get_cp_test_npc_map() {
			return this.getDb("cp_test_npc")
		}
		static get_cp_test_npc(t) {
			let e = this.get_cp_test_npc_map()[t];
			return null == e && console.error(`can't find data in cp_test_npc by id [${t}]`), e
		}
		static get_dance_anim_db_map() {
			return this.getDb("dance_anim_db")
		}
		static get_dance_anim_db(t) {
			let e = this.get_dance_anim_db_map()[t];
			return null == e && console.error(`can't find data in dance_anim_db by id [${t}]`), e
		}
		static get_dance_box_animation_map() {
			return this.getDb("dance_box_animation")
		}
		static get_dance_box_animation(t) {
			let e = this.get_dance_box_animation_map()[t];
			return null == e && console.error(`can't find data in dance_box_animation by id [${t}]`), e
		}
		static get_dance_draw_color_map() {
			return this.getDb("dance_draw_color")
		}
		static get_dance_draw_color(t) {
			let e = this.get_dance_draw_color_map()[t];
			return null == e && console.error(`can't find data in dance_draw_color by id [${t}]`), e
		}
		static get_drop_db_map() {
			return this.getDb("drop_db")
		}
		static get_drop_db(t) {
			let e = this.get_drop_db_map()[t];
			return null == e && console.error(`can't find data in drop_db by id [${t}]`), e
		}
		static get_effect_db_map() {
			return this.getDb("effect_db")
		}
		static get_effect_db(t) {
			let e = this.get_effect_db_map()[t];
			return null == e && console.error(`can't find data in effect_db by id [${t}]`), e
		}
		static get_en_random_name_part1_db_arr() {
			return this.getDb("en_random_name_part1_db")
		}
		static get_en_random_name_part1_db(t) {
			let e = this.get_en_random_name_part1_db_arr()[t];
			return null == e && console.error(`can't find data in en_random_name_part1_db by word [${t}]`), e
		}
		static get_en_random_name_part2_db_arr() {
			return this.getDb("en_random_name_part2_db")
		}
		static get_en_random_name_part2_db(t) {
			let e = this.get_en_random_name_part2_db_arr()[t];
			return null == e && console.error(`can't find data in en_random_name_part2_db by word [${t}]`), e
		}
		static get_follow_rewards_db_map() {
			return this.getDb("follow_rewards_db")
		}
		static get_follow_rewards_db(t) {
			let e = this.get_follow_rewards_db_map()[t];
			return null == e && console.error(`can't find data in follow_rewards_db by id [${t}]`), e
		}
		static get_game_cfg_map() {
			return this.getDb("game_cfg")
		}
		static get_game_cfg(t) {
			let e = this.get_game_cfg_map()[t];
			return null == e && console.error(`can't find data in game_cfg by name [${t}]`), e
		}
		static get_goal_db_map() {
			return this.getDb("goal_db")
		}
		static get_goal_db(t) {
			let e = this.get_goal_db_map()[t];
			return null == e && console.error(`can't find data in goal_db by id [${t}]`), e
		}
		static get_hot_activity_db_map() {
			return this.getDb("hot_activity_db")
		}
		static get_hot_activity_db(t) {
			let e = this.get_hot_activity_db_map()[t];
			return null == e && console.error(`can't find data in hot_activity_db by id [${t}]`), e
		}
		static get_id_random_name_part1_db_arr() {
			return this.getDb("id_random_name_part1_db")
		}
		static get_id_random_name_part1_db(t) {
			let e = this.get_id_random_name_part1_db_arr()[t];
			return null == e && console.error(`can't find data in id_random_name_part1_db by word [${t}]`), e
		}
		static get_id_random_name_part2_db_arr() {
			return this.getDb("id_random_name_part2_db")
		}
		static get_id_random_name_part2_db(t) {
			let e = this.get_id_random_name_part2_db_arr()[t];
			return null == e && console.error(`can't find data in id_random_name_part2_db by word [${t}]`), e
		}
		static get_item_db_map() {
			return this.getDb("item_db")
		}
		static get_item_db(t) {
			let e = this.get_item_db_map()[t];
			return null == e && console.error(`can't find data in item_db by id [${t}]`), e
		}
		static get_laji_db_arr() {
			return this.getDb("laji_db")
		}
		static get_laji_db(t) {
			let e = this.get_laji_db_arr()[t];
			return null == e && console.error(`can't find data in laji_db by idx [${t}]`), e
		}
		static get_laji_level_db_arr() {
			return this.getDb("laji_level_db")
		}
		static get_laji_level_db(t) {
			let e = this.get_laji_level_db_arr()[t];
			return null == e && console.error(`can't find data in laji_level_db by idx [${t}]`), e
		}
		static get_level_db_arr() {
			return this.getDb("level_db")
		}
		static get_level_db(t) {
			let e = this.get_level_db_arr()[t];
			return null == e && console.error(`can't find data in level_db by id [${t}]`), e
		}
		static get_linggan_db_arr() {
			return this.getDb("linggan_db")
		}
		static get_linggan_db(t) {
			let e = this.get_linggan_db_arr()[t];
			return null == e && console.error(`can't find data in linggan_db by idx [${t}]`), e
		}
		static get_manicure_model_db_map() {
			return this.getDb("manicure_model_db")
		}
		static get_manicure_model_db(t) {
			let e = this.get_manicure_model_db_map()[t];
			return null == e && console.error(`can't find data in manicure_model_db by id [${t}]`), e
		}
		static get_manicure_nail_decoration_db_map() {
			return this.getDb("manicure_nail_decoration_db")
		}
		static get_manicure_nail_decoration_db(t) {
			let e = this.get_manicure_nail_decoration_db_map()[t];
			return null == e && console.error(`can't find data in manicure_nail_decoration_db by id [${t}]`), e
		}
		static get_manicure_part_container_db_map() {
			return this.getDb("manicure_part_container_db")
		}
		static get_manicure_part_container_db(t) {
			let e = this.get_manicure_part_container_db_map()[t];
			return null == e && console.error(`can't find data in manicure_part_container_db by id [${t}]`), e
		}
		static get_manicure_part_db_map() {
			return this.getDb("manicure_part_db")
		}
		static get_manicure_part_db(t) {
			let e = this.get_manicure_part_db_map()[t];
			return null == e && console.error(`can't find data in manicure_part_db by id [${t}]`), e
		}
		static get_manicure_part_type_db_map() {
			return this.getDb("manicure_part_type_db")
		}
		static get_manicure_part_type_db(t) {
			let e = this.get_manicure_part_type_db_map()[t];
			return null == e && console.error(`can't find data in manicure_part_type_db by id [${t}]`), e
		}
		static get_manicure_shape_db_map() {
			return this.getDb("manicure_shape_db")
		}
		static get_manicure_shape_db(t, e) {
			let a = this.get_manicure_shape_db_map()[t][e];
			return null == a && console.error(`can't find data in manicure_shape_db by fid [${e}]`), a
		}
		static get_manicure_stage_db_map() {
			return this.getDb("manicure_stage_db")
		}
		static get_manicure_stage_db(t) {
			let e = this.get_manicure_stage_db_map()[t];
			return null == e && console.error(`can't find data in manicure_stage_db by id [${t}]`), e
		}
		static get_model_db_map() {
			return this.getDb("model_db")
		}
		static get_model_db(t) {
			let e = this.get_model_db_map()[t];
			return null == e && console.error(`can't find data in model_db by id [${t}]`), e
		}
		static get_name_db_arr() {
			return this.getDb("name_db")
		}
		static get_name_db(t) {
			let e = this.get_name_db_arr()[t];
			return null == e && console.error(`can't find data in name_db by name [${t}]`), e
		}
		static get_paishou_db_arr() {
			return this.getDb("paishou_db")
		}
		static get_paishou_db(t) {
			let e = this.get_paishou_db_arr()[t];
			return null == e && console.error(`can't find data in paishou_db by idx [${t}]`), e
		}
		static get_part_animation_change_db_map() {
			return this.getDb("part_animation_change_db")
		}
		static get_part_animation_change_db(t) {
			let e = this.get_part_animation_change_db_map()[t];
			return null == e && console.error(`can't find data in part_animation_change_db by id [${t}]`), e
		}
		static get_part_type_db_map() {
			return this.getDb("part_type_db")
		}
		static get_part_type_db(t) {
			let e = this.get_part_type_db_map()[t];
			return null == e && console.error(`can't find data in part_type_db by id [${t}]`), e
		}
		static get_path_db_map() {
			return this.getDb("path_db")
		}
		static get_path_db(t) {
			let e = this.get_path_db_map()[t];
			return null == e && console.error(`can't find data in path_db by id [${t}]`), e
		}
		static get_pay_db_map() {
			return this.getDb("pay_db")
		}
		static get_pay_db(t) {
			let e = this.get_pay_db_map()[t];
			return null == e && console.error(`can't find data in pay_db by id [${t}]`), e
		}
		static get_pt_random_name_part1_db_arr() {
			return this.getDb("pt_random_name_part1_db")
		}
		static get_pt_random_name_part1_db(t) {
			let e = this.get_pt_random_name_part1_db_arr()[t];
			return null == e && console.error(`can't find data in pt_random_name_part1_db by word [${t}]`), e
		}
		static get_pt_random_name_part2_db_arr() {
			return this.getDb("pt_random_name_part2_db")
		}
		static get_pt_random_name_part2_db(t) {
			let e = this.get_pt_random_name_part2_db_arr()[t];
			return null == e && console.error(`can't find data in pt_random_name_part2_db by word [${t}]`), e
		}
		static get_pvp_base_award_db_arr() {
			return this.getDb("pvp_base_award_db")
		}
		static get_pvp_base_award_db(t) {
			let e = this.get_pvp_base_award_db_arr()[t];
			return null == e && console.error(`can't find data in pvp_base_award_db by idx [${t}]`), e
		}
		static get_pvp_db_map() {
			return this.getDb("pvp_db")
		}
		static get_pvp_db(t, e) {
			let a = this.get_pvp_db_map()[t][e];
			return null == a && console.error(`can't find data in pvp_db by idx [${e}]`), a
		}
		static get_pvp_part_award_db_map() {
			return this.getDb("pvp_part_award_db")
		}
		static get_pvp_part_award_db(t) {
			let e = this.get_pvp_part_award_db_map()[t];
			return null == e && console.error(`can't find data in pvp_part_award_db by partId [${t}]`), e
		}
		static get_quest_db_map() {
			return this.getDb("quest_db")
		}
		static get_quest_db(t) {
			let e = this.get_quest_db_map()[t];
			return null == e && console.error(`can't find data in quest_db by id [${t}]`), e
		}
		static get_random_name_part1_db_arr() {
			return this.getDb("random_name_part1_db")
		}
		static get_random_name_part1_db(t) {
			let e = this.get_random_name_part1_db_arr()[t];
			return null == e && console.error(`can't find data in random_name_part1_db by word [${t}]`), e
		}
		static get_random_name_part2_db_arr() {
			return this.getDb("random_name_part2_db")
		}
		static get_random_name_part2_db(t) {
			let e = this.get_random_name_part2_db_arr()[t];
			return null == e && console.error(`can't find data in random_name_part2_db by word [${t}]`), e
		}
		static get_role_contract_db_map() {
			return this.getDb("role_contract_db")
		}
		static get_role_contract_db(t) {
			let e = this.get_role_contract_db_map()[t];
			return null == e && console.error(`can't find data in role_contract_db by contractIdx [${t}]`), e
		}
		static get_role_db_map() {
			return this.getDb("role_db")
		}
		static get_role_db(t) {
			let e = this.get_role_db_map()[t];
			return null == e && console.error(`can't find data in role_db by id [${t}]`), e
		}
		static get_role_test_map() {
			return this.getDb("role_test")
		}
		static get_role_test(t) {
			let e = this.get_role_test_map()[t];
			return null == e && console.error(`can't find data in role_test by id [${t}]`), e
		}
		static get_role_test_answer_map() {
			return this.getDb("role_test_answer")
		}
		static get_role_test_answer(t) {
			let e = this.get_role_test_answer_map()[t];
			return null == e && console.error(`can't find data in role_test_answer by id [${t}]`), e
		}
		static get_role_test_color_map() {
			return this.getDb("role_test_color")
		}
		static get_role_test_color(t) {
			let e = this.get_role_test_color_map()[t];
			return null == e && console.error(`can't find data in role_test_color by id [${t}]`), e
		}
		static get_role_up_db_map() {
			return this.getDb("role_up_db")
		}
		static get_role_up_db(t, e) {
			let a = this.get_role_up_db_map()[t][e];
			return null == a && console.error(`can't find data in role_up_db by level [${e}]`), a
		}
		static get_shoe_config_data_map() {
			return this.getDb("shoe_config_data")
		}
		static get_shoe_config_data(t) {
			let e = this.get_shoe_config_data_map()[t];
			return null == e && console.error(`can't find data in shoe_config_data by id [${t}]`), e
		}
		static get_shoe_part_db_map() {
			return this.getDb("shoe_part_db")
		}
		static get_shoe_part_db(t) {
			let e = this.get_shoe_part_db_map()[t];
			return null == e && console.error(`can't find data in shoe_part_db by id [${t}]`), e
		}
		static get_shoe_suit_db_map() {
			return this.getDb("shoe_suit_db")
		}
		static get_shoe_suit_db(t) {
			let e = this.get_shoe_suit_db_map()[t];
			return null == e && console.error(`can't find data in shoe_suit_db by id [${t}]`), e
		}
		static get_sign_db_arr() {
			return this.getDb("sign_db")
		}
		static get_sign_db(t) {
			let e = this.get_sign_db_arr()[t];
			return null == e && console.error(`can't find data in sign_db by idx [${t}]`), e
		}
		static get_skincare_db_arr() {
			return this.getDb("skincare_db")
		}
		static get_skincare_db(t) {
			let e = this.get_skincare_db_arr()[t];
			return null == e && console.error(`can't find data in skincare_db by idx [${t}]`), e
		}
		static get_spine_db_map() {
			return this.getDb("spine_db")
		}
		static get_spine_db(t) {
			let e = this.get_spine_db_map()[t];
			return null == e && console.error(`can't find data in spine_db by id [${t}]`), e
		}
		static get_student_stage_db_map() {
			return this.getDb("student_stage_db")
		}
		static get_student_stage_db(t) {
			let e = this.get_student_stage_db_map()[t];
			return null == e && console.error(`can't find data in student_stage_db by id [${t}]`), e
		}
		static get_student_stage_offset_mapping_db_map() {
			return this.getDb("student_stage_offset_mapping_db")
		}
		static get_student_stage_offset_mapping_db(t) {
			let e = this.get_student_stage_offset_mapping_db_map()[t];
			return null == e && console.error(`can't find data in student_stage_offset_mapping_db by offset [${t}]`), e
		}
		static get_student_stage_score_mapping_db_arr() {
			return this.getDb("student_stage_score_mapping_db")
		}
		static get_student_stage_score_mapping_db(t) {
			let e = this.get_student_stage_score_mapping_db_arr()[t];
			return null == e && console.error(`can't find data in student_stage_score_mapping_db by score [${t}]`), e
		}
		static get_sub_cop_map() {
			return this.getDb("sub_cop")
		}
		static get_sub_cop(t) {
			let e = this.get_sub_cop_map()[t];
			return null == e && console.error(`can't find data in sub_cop by subCopKey [${t}]`), e
		}
		static get_suit_db_map() {
			return this.getDb("suit_db")
		}
		static get_suit_db(t) {
			let e = this.get_suit_db_map()[t];
			return null == e && console.error(`can't find data in suit_db by id [${t}]`), e
		}
		static get_switch_db_map() {
			return this.getDb("switch_db")
		}
		static get_switch_db(t) {
			let e = this.get_switch_db_map()[t];
			return null == e && console.error(`can't find data in switch_db by id [${t}]`), e
		}
		static get_szz_db_arr() {
			return this.getDb("szz_db")
		}
		static get_szz_db(t) {
			let e = this.get_szz_db_arr()[t];
			return null == e && console.error(`can't find data in szz_db by renqi [${t}]`), e
		}
		static get_tag_type_db_arr() {
			return this.getDb("tag_type_db")
		}
		static get_tag_type_db(t) {
			let e = this.get_tag_type_db_arr()[t];
			return null == e && console.error(`can't find data in tag_type_db by idx [${t}]`), e
		}
		static get_talk_db_map() {
			return this.getDb("talk_db")
		}
		static get_talk_db(t) {
			let e = this.get_talk_db_map()[t];
			return null == e && console.error(`can't find data in talk_db by id [${t}]`), e
		}
		static get_talk_role_db_map() {
			return this.getDb("talk_role_db")
		}
		static get_talk_role_db(t) {
			let e = this.get_talk_role_db_map()[t];
			return null == e && console.error(`can't find data in talk_role_db by id [${t}]`), e
		}
		static get_teacher_stage_db_map() {
			return this.getDb("teacher_stage_db")
		}
		static get_teacher_stage_db(t) {
			let e = this.get_teacher_stage_db_map()[t];
			return null == e && console.error(`can't find data in teacher_stage_db by id [${t}]`), e
		}
		static get_ui_role_anim_db_map() {
			return this.getDb("ui_role_anim_db")
		}
		static get_ui_role_anim_db(t, e) {
			let a = this.get_ui_role_anim_db_map()[t][e];
			return null == a && console.error(`can't find data in ui_role_anim_db by weight [${e}]`), a
		}
		static get_vi_random_name_part1_db_arr() {
			return this.getDb("vi_random_name_part1_db")
		}
		static get_vi_random_name_part1_db(t) {
			let e = this.get_vi_random_name_part1_db_arr()[t];
			return null == e && console.error(`can't find data in vi_random_name_part1_db by word [${t}]`), e
		}
		static get_vi_random_name_part2_db_arr() {
			return this.getDb("vi_random_name_part2_db")
		}
		static get_vi_random_name_part2_db(t) {
			let e = this.get_vi_random_name_part2_db_arr()[t];
			return null == e && console.error(`can't find data in vi_random_name_part2_db by word [${t}]`), e
		}
	}
	db.cop = {
		ad_interstitial_ratios: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		ad_banner_ratios: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		ad_embedded_ratios: [0, 0, 0],
		ad_video_ratios: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		ad_video_cds: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		ad_video_counts: [0, 10, 0, 10, 2, 2, 12, 0, 0, 2, 3, 0, 0, 0, 5, 0, 10, 5, 0, 0, 2, 1, 10],
		ad_inst_cd: .5,
		b_inst_or_banner: 0,
		native_insert_mode: 1,
		b_inst_in_guide: 0,
		some_function: [0, 0, 0, 0, 0, 0],
		b_open_statics_item: 0,
		pop_review_ratio: 0,
		url_notice: "",
		b_sign_delay_mode: 0,
		b_video_share_full_screen: 0,
		b_video_share_finger: 0,
		b_adv_reward_confirm: 0,
		b_adv_delay: 0,
		adv_thank_delay_time: 2,
		b_adv_thank_prompt: 0,
		b_adv_thank_prompt_tag: 0,
		b_adv_full_screen: 0,
		b_open_follow: 0,
		b_show_sub: 0,
		b_show_adv_cost: 0,
		b_ad_video_replay_prompt: 0,
		ad_flag_hide_ratios: [0, 0, 0, 0, 0],
		egg_diamond_count: 3,
		egg_count_max: 5,
		share_mode: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		share_close_delta_time: 0,
		cat_ratios: [0, 0, 0, 0, 0, 0],
		cat_delta_time: 20,
		share_tags: ["", "", "", "", "", "", "", "", "", "", "", "", "", ""],
		rule_graph_ratios: [0, 0, 0, 0, 0, 0, 0],
		rule_graph_cd: 20,
		subscribe_cd: 60,
		alert_hud_prompt_cds: [60, 60, 60, 60],
		alert_hud_prompt_ratios: [0, 0, 0, 0],
		alert_hud_prompt_orders: [0, 1, 2, 3],
		isItemGetShareFirst: 0,
		follow_close_delay_time: 0,
		b_follow_finger: 0,
		subscribe_close_delay_time: 0,
		b_subscribe_finger: 0,
		get_video_share_rank_tag: "",
		get_video_share_rank_tag_active: "",
		get_rank_tip_url: "",
		alert_hud_prompt_cds_v2: [60, 60, 60, 60, 60, 60],
		alert_hud_prompt_ratios_v2: [0, 0, 0, 0, 0, 0],
		alert_hud_prompt_list_v2: [0, 1, 2, 3, 4, 5],
		hot_activity_list_v2: [0, 1, 2, 3, 4, 5],
		isThirdExit: !1,
		isAbout: !1,
		isShareEnabled: !1,
		isPayEnabled: !0,
		isULMoreGame: !1,
		isUseSdkRank: !1,
		isWebView: !1,
		isShowUrlAdIcon: !1,
		isSupportRecordShare: !1,
		isSupportInstallShortcut: !1,
		isSupportFindMinigames: !1,
		isSupportRecommendationBtn: !1,
		is4399Watermark: !1,
		isJumpLeisureEnabled: !1,
		isSupportFollowOfficialAccount: !1,
		isSupportFavoriteGuide: !1,
		isSupportVideoRank: !1,
		isSupportSubscribe: !1,
		isSupportChannelMoreGameBox: !1
	}, db.game_cnf = {
		free_coin_time: 4500,
		diamond_coin_time: 27e3,
		daily_quest_count: 6,
		daily_quest_dianmond_count: 10,
		gift_count: 3,
		gift_delta_time: 60,
		egg_click_count: 10,
		egg_click_time: 30,
		bullet_chat_texts: ["你简直弱爆了", "今天的妆容很精致", "不敢看，丑哭", "爱了爱了，甜美暴击", "笑容比糖果还甜", "漂亮呀，有被惊艳到", "实力圈粉", "自带高贵气质", "硬生生给我看顺眼了", "慢慢的迷恋上小姐姐", "控制不住自己想笑", "真的长在了我的审美上"],
		order_star_rate: [0, .5, .6, .7, .85, 1],
		game_bar_max_score: 200,
		role_talk_delta: 1.5,
		like_lottery_count: 12,
		sign_award_delta_time: [60, 300, 600, 900],
		szz_lottery_drop_id: "20",
		szz_lottery_image: ["res/ui/bg/wawa_1.png", "res/ui/bg/wawa_1.png", "res/ui/bg/wawa_2.png"],
		mang_he_show_suits: ["20", "21"],
		pvp_duanwei_names: ["区级比赛", "市级比赛", "省级比赛", "全国大赛", "世界杯"],
		fish_price_origin: 2e3,
		fish_price_addition: 200,
		pai_shou_cost: [1, 10],
		cztg_cost: [1, 10],
		butterfly_cost: [1, 10],
		garbage_cost: [1, 10],
		hu_fu_cost: 90,
		jing_li_per_sec: .05,
		pvp_texts: ["与众不同，可爱无敌", "小小的我，大大的梦 ", "化妆大师，我当仁不让", "追逐梦想，秀出时尚", "努力成为顶级化妆师", "张扬我的个性", "展示最美好的自己", "光芒万丈，无可比拟"],
		default_parts1: ["15026", "11026", "12026"],
		default_parts2: ["15023", "11023", "12023"],
		default_parts3: ["15027", "11027", "12027"],
		default_parts4: ["15029", "11029", "12029"],
		default_parts5: ["15030", "11030", "12030"],
		default_parts6: ["15031", "11031", "12031"],
		default_parts7: ["15032", "11032", "12032"],
		default_parts8: ["15034", "11034", "12034"],
		default_parts9: ["15035", "11035", "12035"],
		default_parts10: ["15036", "11036", "12036"],
		default_parts11: ["15037", "11037", "12037"],
		default_parts12: ["15038", "11038", "12038"],
		dance_default_parts1: ["15026", "11026", "12026", "20009"],
		dance_default_parts2: ["15023", "11023", "12023", "19020", "14023", "24031"],
		dance_default_parts3: ["15027", "11027", "12027", "20017", "14027"],
		dance_default_parts4: ["15029", "11029", "12029", "20022"],
		dance_default_parts5: ["15030", "11030", "12030", "20014"],
		dance_default_parts6: ["15031", "11031", "12031", "20031"],
		dance_default_parts7: ["15032", "11032", "12032", "20032"],
		dance_default_parts8: ["15034", "11034", "12034", "20034", "13034", "16019", "25011"],
		dance_default_parts9: ["15035", "11035", "12035", "20035", "13035", "14035", "19035", "16020"],
		dance_default_parts10: ["15036", "11036", "12036", "19036", "20036", "23036"],
		dance_default_parts11: ["15037", "11037", "12037", "18037", "20037"],
		dance_default_parts12: ["15038", "11038", "12038", "14038", "20038"],
		game_result_texts: ["就差一点了，加油！", "不错不错，继续努力！", "再加把劲就完美了！", "太棒了！你真厉害！"]
	}, db.MODEL_DB_ID = {
		test: "test",
		body: "body",
		face: "face",
		paopao: "paopao",
		mofabang: "mofabang",
		mofabang_anim: "mofabang_anim",
		hudie: "hudie",
		hudie2: "hudie2",
		lihe: "lihe",
		xinfeng: "xinfeng",
		manghe: "manghe",
		shexiangji_come: "shexiangji_come",
		shexiangji_jiechu: "shexiangji_jiechu",
		wawahe: "wawahe",
		gemstone01: "gemstone01",
		gemstone02: "gemstone02",
		gemstone03: "gemstone03",
		gemstone04: "gemstone04",
		gemstone05: "gemstone05",
		gemstone06: "gemstone06",
		gemstone07: "gemstone07",
		gemstone08: "gemstone08",
		gemstone09: "gemstone09",
		gemstone10: "gemstone10",
		gemstone11: "gemstone11",
		gemstone13: "gemstone13",
		shexiangji_gj_jiesuan: "shexiangji_gj_jiesuan",
		come: "come",
		jingzi: "jingzi",
		duihui_01: "duihui_01",
		duihui_02: "duihui_02",
		duihui_03: "duihui_03",
		duihui_11: "duihui_11",
		duihui_12: "duihui_12",
		duihui_13: "duihui_13",
		jiangzhuang: "jiangzhuang",
		body_npc01: "body_npc01",
		face_npc01: "face_npc01",
		toufa_npc01: "toufa_npc01",
		body_npc02: "body_npc02",
		face_npc02: "face_npc02",
		toufa_npc02: "toufa_npc02",
		body_npc03: "body_npc03",
		face_npc03: "face_npc03",
		toufa_npc03: "toufa_npc03",
		body_npc05: "body_npc05",
		face_npc05: "face_npc05",
		toufa_npc05: "toufa_npc05",
		body_npc06: "body_npc06",
		face_npc06: "face_npc06",
		toufa_npc06: "toufa_npc06",
		body_npc08: "body_npc08",
		face_npc08: "face_npc08",
		toufa_npc08: "toufa_npc08",
		body_npc09: "body_npc09",
		face_npc09: "face_npc09",
		toufa_npc09: "toufa_npc09",
		body_npc10: "body_npc10",
		face_npc10: "face_npc10",
		toufa_npc10: "toufa_npc10",
		meimao: "meimao",
		jiemao: "jiemao",
		yanying: "yanying",
		meitong: "meitong",
		meitong_gg: "meitong_gg",
		saihong: "saihong",
		chuncai: "chuncai",
		mianwen: "mianwen",
		heitou: "heitou",
		mianmo_empty: "mianmo_empty",
		ty_douyin: "ty_douyin",
		ty_heitou: "ty_heitou",
		ty_mianmo: "ty_mianmo",
		ty_shuidi: "ty_shuidi",
		ty_zamao01: "ty_zamao01",
		ty_zamao02: "ty_zamao02",
		ty_zamao03: "ty_zamao03",
		ty_zamao04: "ty_zamao04",
		ty_zamao05: "ty_zamao05",
		ty_zamao06: "ty_zamao06",
		ty_zamao07: "ty_zamao07",
		ty_zamao08: "ty_zamao08",
		ty_zamao09: "ty_zamao09",
		ty_zamao10: "ty_zamao10",
		ty_zamao11: "ty_zamao11",
		ty_zamao12: "ty_zamao12",
		mianwen_zang: "mianwen_zang",
		heitoutie: "heitoutie",
		mianmo_fill: "mianmo_fill",
		hf_toushi: "hf_toushi",
		hf_yifu: "hf_yifu",
		hf_xiezi: "hf_xiezi",
		ty_meimao01: "ty_meimao01",
		ty_meimao02: "ty_meimao02",
		ty_meimao03: "ty_meimao03",
		ty_meimao04: "ty_meimao04",
		ty_meimao05: "ty_meimao05",
		ty_meimao06: "ty_meimao06",
		ty_meimao07: "ty_meimao07",
		ty_meimao08: "ty_meimao08",
		ty_meimao09: "ty_meimao09",
		ty_meimao10: "ty_meimao10",
		ty_meimao11: "ty_meimao11",
		ty_meimao12: "ty_meimao12",
		ty_meimao13: "ty_meimao13",
		ty_meimao14: "ty_meimao14",
		ty_meimao15: "ty_meimao15",
		ty_meimao16: "ty_meimao16",
		ty_meimao17: "ty_meimao17",
		ty_meimao18: "ty_meimao18",
		ty_meimao19: "ty_meimao19",
		ty_meimao20: "ty_meimao20",
		ty_meimao21: "ty_meimao21",
		ty_meimao22: "ty_meimao22",
		ty_meimao23: "ty_meimao23",
		ty_meimao24: "ty_meimao24",
		ty_meimao25: "ty_meimao25",
		ty_meimao26: "ty_meimao26",
		ty_meimao27: "ty_meimao27",
		ty_meimao28: "ty_meimao28",
		ty_meimao29: "ty_meimao29",
		ty_meimao30: "ty_meimao30",
		ty_meimao31: "ty_meimao31",
		ty_meimao32: "ty_meimao32",
		ty_meimao33: "ty_meimao33",
		ty_meimao34: "ty_meimao34",
		ty_meimao35: "ty_meimao35",
		ty_meimao36: "ty_meimao36",
		ty_meimao37: "ty_meimao37",
		ty_meimao38: "ty_meimao38",
		ty_jiemao01: "ty_jiemao01",
		ty_jiemao02: "ty_jiemao02",
		ty_jiemao03: "ty_jiemao03",
		ty_jiemao04: "ty_jiemao04",
		ty_jiemao05: "ty_jiemao05",
		ty_jiemao06: "ty_jiemao06",
		ty_jiemao07: "ty_jiemao07",
		ty_jiemao08: "ty_jiemao08",
		ty_jiemao09: "ty_jiemao09",
		ty_jiemao10: "ty_jiemao10",
		ty_jiemao11: "ty_jiemao11",
		ty_jiemao12: "ty_jiemao12",
		ty_jiemao13: "ty_jiemao13",
		ty_jiemao14: "ty_jiemao14",
		ty_jiemao15: "ty_jiemao15",
		ty_jiemao16: "ty_jiemao16",
		ty_jiemao17: "ty_jiemao17",
		ty_jiemao18: "ty_jiemao18",
		ty_jiemao19: "ty_jiemao19",
		ty_jiemao20: "ty_jiemao20",
		ty_jiemao21: "ty_jiemao21",
		ty_jiemao22: "ty_jiemao22",
		ty_jiemao23: "ty_jiemao23",
		ty_jiemao24: "ty_jiemao24",
		ty_jiemao25: "ty_jiemao25",
		ty_jiemao26: "ty_jiemao26",
		ty_jiemao27: "ty_jiemao27",
		ty_jiemao28: "ty_jiemao28",
		ty_jiemao29: "ty_jiemao29",
		ty_jiemao30: "ty_jiemao30",
		ty_jiemao31: "ty_jiemao31",
		ty_jiemao32: "ty_jiemao32",
		ty_jiemao33: "ty_jiemao33",
		ty_jiemao34: "ty_jiemao34",
		ty_jiemao35: "ty_jiemao35",
		ty_jiemao36: "ty_jiemao36",
		ty_jiemao37: "ty_jiemao37",
		ty_jiemao38: "ty_jiemao38",
		ty_yanying01: "ty_yanying01",
		ty_yanying02: "ty_yanying02",
		ty_yanying03: "ty_yanying03",
		ty_yanying04: "ty_yanying04",
		ty_yanying05: "ty_yanying05",
		ty_yanying06: "ty_yanying06",
		ty_yanying07: "ty_yanying07",
		ty_yanying08: "ty_yanying08",
		ty_yanying09: "ty_yanying09",
		ty_yanying10: "ty_yanying10",
		ty_yanying11: "ty_yanying11",
		ty_yanying12: "ty_yanying12",
		ty_yanying13: "ty_yanying13",
		ty_yanying14: "ty_yanying14",
		ty_yanying15: "ty_yanying15",
		ty_yanying16: "ty_yanying16",
		ty_yanying17: "ty_yanying17",
		ty_yanying18: "ty_yanying18",
		ty_yanying19: "ty_yanying19",
		ty_yanying20: "ty_yanying20",
		ty_yanying21: "ty_yanying21",
		ty_yanying22: "ty_yanying22",
		ty_yanying23: "ty_yanying23",
		ty_yanying24: "ty_yanying24",
		ty_yanying25: "ty_yanying25",
		ty_yanying26: "ty_yanying26",
		ty_yanying27: "ty_yanying27",
		ty_yanying28: "ty_yanying28",
		ty_yanying29: "ty_yanying29",
		ty_yanying30: "ty_yanying30",
		ty_yanying31: "ty_yanying31",
		ty_yanying32: "ty_yanying32",
		ty_yanying33: "ty_yanying33",
		ty_yanying34: "ty_yanying34",
		ty_yanying35: "ty_yanying35",
		ty_yanying36: "ty_yanying36",
		ty_yanying37: "ty_yanying37",
		ty_yanying38: "ty_yanying38",
		ty_tongkong01: "ty_tongkong01",
		ty_tongkong02: "ty_tongkong02",
		ty_tongkong03: "ty_tongkong03",
		ty_tongkong04: "ty_tongkong04",
		ty_tongkong05: "ty_tongkong05",
		ty_tongkong06: "ty_tongkong06",
		ty_tongkong07: "ty_tongkong07",
		ty_tongkong08: "ty_tongkong08",
		ty_tongkong09: "ty_tongkong09",
		ty_tongkong10: "ty_tongkong10",
		ty_tongkong11: "ty_tongkong11",
		ty_tongkong12: "ty_tongkong12",
		ty_tongkong13: "ty_tongkong13",
		ty_tongkong14: "ty_tongkong14",
		ty_tongkong15: "ty_tongkong15",
		ty_tongkong16: "ty_tongkong16",
		ty_tongkong17: "ty_tongkong17",
		ty_tongkong18: "ty_tongkong18",
		ty_tongkong19: "ty_tongkong19",
		ty_tongkong20: "ty_tongkong20",
		ty_tongkong21: "ty_tongkong21",
		ty_tongkong22: "ty_tongkong22",
		ty_tongkong23: "ty_tongkong23",
		ty_tongkong24: "ty_tongkong24",
		ty_tongkong25: "ty_tongkong25",
		ty_tongkong26: "ty_tongkong26",
		ty_tongkong27: "ty_tongkong27",
		ty_tongkong28: "ty_tongkong28",
		ty_tongkong29: "ty_tongkong29",
		ty_tongkong30: "ty_tongkong30",
		ty_tongkong31: "ty_tongkong31",
		ty_tongkong32: "ty_tongkong32",
		ty_tongkong33: "ty_tongkong33",
		ty_tongkong34: "ty_tongkong34",
		ty_tongkong35: "ty_tongkong35",
		ty_tongkong36: "ty_tongkong36",
		ty_tongkong37: "ty_tongkong37",
		ty_tongkong38: "ty_tongkong38",
		ty_tongkong01_gg: "ty_tongkong01_gg",
		ty_tongkong02_gg: "ty_tongkong02_gg",
		ty_tongkong03_gg: "ty_tongkong03_gg",
		ty_tongkong04_gg: "ty_tongkong04_gg",
		ty_tongkong05_gg: "ty_tongkong05_gg",
		ty_tongkong06_gg: "ty_tongkong06_gg",
		ty_tongkong07_gg: "ty_tongkong07_gg",
		ty_tongkong08_gg: "ty_tongkong08_gg",
		ty_tongkong09_gg: "ty_tongkong09_gg",
		ty_tongkong10_gg: "ty_tongkong10_gg",
		ty_tongkong11_gg: "ty_tongkong11_gg",
		ty_tongkong12_gg: "ty_tongkong12_gg",
		ty_tongkong13_gg: "ty_tongkong13_gg",
		ty_tongkong14_gg: "ty_tongkong14_gg",
		ty_tongkong15_gg: "ty_tongkong15_gg",
		ty_tongkong16_gg: "ty_tongkong16_gg",
		ty_tongkong17_gg: "ty_tongkong17_gg",
		ty_tongkong18_gg: "ty_tongkong18_gg",
		ty_tongkong19_gg: "ty_tongkong19_gg",
		ty_tongkong20_gg: "ty_tongkong20_gg",
		ty_tongkong21_gg: "ty_tongkong21_gg",
		ty_tongkong22_gg: "ty_tongkong22_gg",
		ty_tongkong23_gg: "ty_tongkong23_gg",
		ty_tongkong24_gg: "ty_tongkong24_gg",
		ty_tongkong25_gg: "ty_tongkong25_gg",
		ty_tongkong26_gg: "ty_tongkong26_gg",
		ty_tongkong27_gg: "ty_tongkong27_gg",
		ty_tongkong28_gg: "ty_tongkong28_gg",
		ty_tongkong29_gg: "ty_tongkong29_gg",
		ty_tongkong30_gg: "ty_tongkong30_gg",
		ty_tongkong31_gg: "ty_tongkong31_gg",
		ty_tongkong32_gg: "ty_tongkong32_gg",
		ty_tongkong33_gg: "ty_tongkong33_gg",
		ty_tongkong34_gg: "ty_tongkong34_gg",
		ty_tongkong35_gg: "ty_tongkong35_gg",
		ty_tongkong36_gg: "ty_tongkong36_gg",
		ty_tongkong37_gg: "ty_tongkong37_gg",
		ty_tongkong38_gg: "ty_tongkong38_gg",
		ty_saihong01: "ty_saihong01",
		ty_saihong02: "ty_saihong02",
		ty_saihong03: "ty_saihong03",
		ty_saihong04: "ty_saihong04",
		ty_saihong05: "ty_saihong05",
		ty_saihong06: "ty_saihong06",
		ty_saihong07: "ty_saihong07",
		ty_saihong08: "ty_saihong08",
		ty_saihong09: "ty_saihong09",
		ty_saihong10: "ty_saihong10",
		ty_saihong11: "ty_saihong11",
		ty_saihong12: "ty_saihong12",
		ty_saihong13: "ty_saihong13",
		ty_saihong14: "ty_saihong14",
		ty_saihong15: "ty_saihong15",
		ty_saihong16: "ty_saihong16",
		ty_saihong17: "ty_saihong17",
		ty_saihong18: "ty_saihong18",
		ty_saihong19: "ty_saihong19",
		ty_saihong20: "ty_saihong20",
		ty_saihong21: "ty_saihong21",
		ty_saihong22: "ty_saihong22",
		ty_saihong23: "ty_saihong23",
		ty_saihong24: "ty_saihong24",
		ty_saihong25: "ty_saihong25",
		ty_saihong26: "ty_saihong26",
		ty_chuncai01: "ty_chuncai01",
		ty_chuncai02: "ty_chuncai02",
		ty_chuncai03: "ty_chuncai03",
		ty_chuncai04: "ty_chuncai04",
		ty_chuncai05: "ty_chuncai05",
		ty_chuncai06: "ty_chuncai06",
		ty_chuncai07: "ty_chuncai07",
		ty_chuncai08: "ty_chuncai08",
		ty_chuncai09: "ty_chuncai09",
		ty_chuncai10: "ty_chuncai10",
		ty_chuncai11: "ty_chuncai11",
		ty_chuncai12: "ty_chuncai12",
		ty_chuncai13: "ty_chuncai13",
		ty_chuncai14: "ty_chuncai14",
		ty_chuncai15: "ty_chuncai15",
		ty_chuncai16: "ty_chuncai16",
		ty_chuncai17: "ty_chuncai17",
		ty_chuncai18: "ty_chuncai18",
		ty_chuncai19: "ty_chuncai19",
		ty_chuncai20: "ty_chuncai20",
		ty_chuncai21: "ty_chuncai21",
		ty_chuncai22: "ty_chuncai22",
		ty_chuncai23: "ty_chuncai23",
		ty_chuncai24: "ty_chuncai24",
		ty_chuncai25: "ty_chuncai25",
		ty_chuncai26: "ty_chuncai26",
		ty_chuncai27: "ty_chuncai27",
		ty_chuncai28: "ty_chuncai28",
		ty_chuncai29: "ty_chuncai29",
		ty_chuncai30: "ty_chuncai30",
		ty_chuncai31: "ty_chuncai31",
		ty_chuncai32: "ty_chuncai32",
		ty_chuncai33: "ty_chuncai33",
		ty_chuncai34: "ty_chuncai34",
		ty_chuncai35: "ty_chuncai35",
		ty_chuncai36: "ty_chuncai36",
		ty_chuncai37: "ty_chuncai37",
		ty_chuncai38: "ty_chuncai38",
		ty_mianwen01: "ty_mianwen01",
		ty_mianwen02: "ty_mianwen02",
		ty_mianwen03: "ty_mianwen03",
		ty_mianwen04: "ty_mianwen04",
		ty_mianwen05: "ty_mianwen05",
		ty_mianwen06: "ty_mianwen06",
		ty_mianwen07: "ty_mianwen07",
		ty_mianwen08: "ty_mianwen08",
		ty_mianwen09: "ty_mianwen09",
		ty_mianwen10: "ty_mianwen10",
		ty_mianwen11: "ty_mianwen11",
		ty_mianwen12: "ty_mianwen12",
		ty_mianwen13: "ty_mianwen13",
		ty_mianwen14: "ty_mianwen14",
		ty_mianwen15: "ty_mianwen15",
		ty_mianwen16: "ty_mianwen16",
		ty_mianwen17: "ty_mianwen17",
		ty_mianwen18: "ty_mianwen18",
		ty_mianwen19: "ty_mianwen19",
		ty_mianwen20: "ty_mianwen20",
		ty_mianwen21: "ty_mianwen21",
		ty_mianwen22: "ty_mianwen22",
		ty_mianwen23: "ty_mianwen23",
		ty_mianwen24: "ty_mianwen24",
		ty_mianwen25: "ty_mianwen25",
		ty_mianwen26: "ty_mianwen26",
		ty_mianwen27: "ty_mianwen27",
		ty_mianwen28: "ty_mianwen28",
		ty_mianwen29: "ty_mianwen29",
		ty_mianwen30: "ty_mianwen30",
		ty_mianwen31: "ty_mianwen31",
		ty_mianwen32: "ty_mianwen32",
		ty_mianwen33: "ty_mianwen33",
		ty_mianwen34: "ty_mianwen34",
		ty_mianwen35: "ty_mianwen35",
		ty_mianwen37: "ty_mianwen37",
		ty_mianshi01: "ty_mianshi01",
		ty_mianshi02: "ty_mianshi02",
		ty_mianshi03: "ty_mianshi03",
		ty_mianshi04: "ty_mianshi04",
		ty_mianshi05: "ty_mianshi05",
		ty_mianshi06: "ty_mianshi06",
		ty_mianshi08: "ty_mianshi08",
		ty_mianshi09: "ty_mianshi09",
		ty_mianshi10: "ty_mianshi10",
		yll_ip011_mianshi: "yll_ip011_mianshi",
		bll_008_toufa: "bll_008_toufa",
		bll_009_toufa: "bll_009_toufa",
		bll_010_toufa: "bll_010_toufa",
		bll_011_toufa: "bll_011_toufa",
		bll_013_toufa: "bll_013_toufa",
		bll_015_toufa: "bll_015_toufa",
		bll_016_toufa: "bll_016_toufa",
		bll_018_toufa: "bll_018_toufa",
		bll_020_toufa: "bll_020_toufa",
		bll_021_toufa: "bll_021_toufa",
		bll_022_toufa: "bll_022_toufa",
		bll_023_toufa: "bll_023_toufa",
		bll_024_toufa: "bll_024_toufa",
		bll_026_toufa: "bll_026_toufa",
		bll_028_toufa: "bll_028_toufa",
		bll_030_toufa: "bll_030_toufa",
		yll_001_toufa: "yll_001_toufa",
		yll_002_toufa: "yll_002_toufa",
		yll_003_toufa: "yll_003_toufa",
		yll_004_toufa: "yll_004_toufa",
		yll_005_toufa: "yll_005_toufa",
		yll_006_toufa: "yll_006_toufa",
		yll_008_toufa: "yll_008_toufa",
		yll_ip001_toufa: "yll_ip001_toufa",
		yll_ip002_toufa: "yll_ip002_toufa",
		yll_ip003_toufa: "yll_ip003_toufa",
		yll_ip004_toufa: "yll_ip004_toufa",
		yll_ip005_toufa: "yll_ip005_toufa",
		yll_ip006_toufa: "yll_ip006_toufa",
		yll_ip007_toufa: "yll_ip007_toufa",
		yll_ip008_toufa: "yll_ip008_toufa",
		yll_ip009_toufa: "yll_ip009_toufa",
		yll_ip010_toufa: "yll_ip010_toufa",
		yll_ip011_toufa: "yll_ip011_toufa",
		yll_ip012_toufa: "yll_ip012_toufa",
		yll_ip013_toufa: "yll_ip013_toufa",
		yll_ip014_toufa: "yll_ip014_toufa",
		yll_ip016_toufa: "yll_ip016_toufa",
		bll_008_toushi: "bll_008_toushi",
		bll_009_toushi: "bll_009_toushi",
		bll_010_toushi: "bll_010_toushi",
		bll_011_toushi: "bll_011_toushi",
		bll_013_toushi: "bll_013_toushi",
		bll_015_toushi: "bll_015_toushi",
		bll_016_toushi: "bll_016_toushi",
		bll_020_toushi: "bll_020_toushi",
		bll_021_toushi: "bll_021_toushi",
		bll_022_toushi: "bll_022_toushi",
		bll_023_toushi: "bll_023_toushi",
		bll_026_toushi: "bll_026_toushi",
		bll_028_toushi: "bll_028_toushi",
		yll_001_toushi: "yll_001_toushi",
		yll_002_toushi: "yll_002_toushi",
		yll_003_toushi: "yll_003_toushi",
		yll_004_toushi: "yll_004_toushi",
		yll_005_toushi: "yll_005_toushi",
		yll_006_toushi: "yll_006_toushi",
		yll_008_toushi: "yll_008_toushi",
		yll_099_toushi: "yll_099_toushi",
		yll_ip001_toushi: "yll_ip001_toushi",
		yll_ip002_toushi: "yll_ip002_toushi",
		yll_ip003_toushi: "yll_ip003_toushi",
		yll_ip004_toushi: "yll_ip004_toushi",
		yll_ip005_toushi: "yll_ip005_toushi",
		yll_ip006_toushi: "yll_ip006_toushi",
		yll_ip007_toushi: "yll_ip007_toushi",
		yll_ip008_toushi: "yll_ip008_toushi",
		yll_ip009_toushi: "yll_ip009_toushi",
		yll_ip010_toushi: "yll_ip010_toushi",
		yll_ip011_toushi: "yll_ip011_toushi",
		yll_ip012_toushi: "yll_ip012_toushi",
		yll_ip013_toushi: "yll_ip013_toushi",
		yll_ip014_toushi: "yll_ip014_toushi",
		yll_ip016_toushi: "yll_ip016_toushi",
		bll_008_ershi: "bll_008_ershi",
		bll_009_ershi: "bll_009_ershi",
		bll_010_ershi: "bll_010_ershi",
		bll_011_ershi: "bll_011_ershi",
		bll_013_ershi: "bll_013_ershi",
		bll_015_ershi: "bll_015_ershi",
		bll_016_ershi: "bll_016_ershi",
		bll_018_ershi: "bll_018_ershi",
		bll_022_ershi: "bll_022_ershi",
		bll_023_ershi: "bll_023_ershi",
		bll_024_ershi: "bll_024_ershi",
		bll_030_ershi: "bll_030_ershi",
		yll_002_ershi: "yll_002_ershi",
		yll_003_ershi: "yll_003_ershi",
		yll_004_ershi: "yll_004_ershi",
		yll_006_ershi: "yll_006_ershi",
		yll_008_ershi: "yll_008_ershi",
		yll_ip001_ershi: "yll_ip001_ershi",
		yll_ip002_ershi: "yll_ip002_ershi",
		yll_ip003_ershi: "yll_ip003_ershi",
		yll_ip004_ershi: "yll_ip004_ershi",
		yll_ip006_ershi: "yll_ip006_ershi",
		yll_ip008_ershi: "yll_ip008_ershi",
		yll_ip009_ershi: "yll_ip009_ershi",
		yll_ip010_ershi: "yll_ip010_ershi",
		yll_ip011_ershi: "yll_ip011_ershi",
		yll_ip012_ershi: "yll_ip012_ershi",
		yll_ip013_ershi: "yll_ip013_ershi",
		yll_ip014_ershi: "yll_ip014_ershi",
		yll_ip016_ershi: "yll_ip016_ershi",
		bll_008_jingshi: "bll_008_jingshi",
		bll_009_jingshi: "bll_009_jingshi",
		bll_010_jingshi: "bll_010_jingshi",
		bll_011_jingshi: "bll_011_jingshi",
		bll_013_jingshi: "bll_013_jingshi",
		bll_018_jingshi: "bll_018_jingshi",
		bll_020_jingshi: "bll_020_jingshi",
		bll_021_jingshi: "bll_021_jingshi",
		bll_024_jingshi: "bll_024_jingshi",
		bll_030_jingshi: "bll_030_jingshi",
		yll_001_jingshi: "yll_001_jingshi",
		yll_002_jingshi: "yll_002_jingshi",
		yll_003_jingshi: "yll_003_jingshi",
		yll_005_jingshi: "yll_005_jingshi",
		yll_006_jingshi: "yll_006_jingshi",
		yll_008_jingshi: "yll_008_jingshi",
		yll_ip001_jingshi: "yll_ip001_jingshi",
		yll_ip002_jingshi: "yll_ip002_jingshi",
		yll_ip005_jingshi: "yll_ip005_jingshi",
		yll_ip006_jingshi: "yll_ip006_jingshi",
		yll_ip007_jingshi: "yll_ip007_jingshi",
		yll_ip008_jingshi: "yll_ip008_jingshi",
		yll_ip009_jingshi: "yll_ip009_jingshi",
		yll_ip010_jingshi: "yll_ip010_jingshi",
		yll_ip012_jingshi: "yll_ip012_jingshi",
		yll_ip013_jingshi: "yll_ip013_jingshi",
		yll_ip014_jingshi: "yll_ip014_jingshi",
		yll_ip016_jingshi: "yll_ip016_jingshi",
		bll_008_yifu: "bll_008_yifu",
		bll_009_yifu: "bll_009_yifu",
		bll_010_yifu: "bll_010_yifu",
		bll_011_yifu: "bll_011_yifu",
		bll_013_yifu: "bll_013_yifu",
		bll_015_yifu: "bll_015_yifu",
		bll_016_yifu: "bll_016_yifu",
		bll_018_yifu: "bll_018_yifu",
		bll_020_yifu: "bll_020_yifu",
		bll_021_yifu: "bll_021_yifu",
		bll_022_yifu: "bll_022_yifu",
		bll_023_yifu: "bll_023_yifu",
		bll_024_yifu: "bll_024_yifu",
		bll_026_yifu: "bll_026_yifu",
		bll_028_yifu: "bll_028_yifu",
		bll_030_yifu: "bll_030_yifu",
		yll_001_yifu: "yll_001_yifu",
		yll_002_yifu: "yll_002_yifu",
		yll_003_yifu: "yll_003_yifu",
		yll_004_yifu: "yll_004_yifu",
		yll_005_yifu: "yll_005_yifu",
		yll_006_yifu: "yll_006_yifu",
		yll_008_yifu: "yll_008_yifu",
		yll_099_yifu: "yll_099_yifu",
		yll_ip001_yifu: "yll_ip001_yifu",
		yll_ip002_yifu: "yll_ip002_yifu",
		yll_ip003_yifu: "yll_ip003_yifu",
		yll_ip004_yifu: "yll_ip004_yifu",
		yll_ip005_yifu: "yll_ip005_yifu",
		yll_ip006_yifu: "yll_ip006_yifu",
		yll_ip007_yifu: "yll_ip007_yifu",
		yll_ip008_yifu: "yll_ip008_yifu",
		yll_ip009_yifu: "yll_ip009_yifu",
		yll_ip010_yifu: "yll_ip010_yifu",
		yll_ip011_yifu: "yll_ip011_yifu",
		yll_ip012_yifu: "yll_ip012_yifu",
		yll_ip013_yifu: "yll_ip013_yifu",
		yll_ip014_yifu: "yll_ip014_yifu",
		yll_ip016_yifu: "yll_ip016_yifu",
		bll_008_xiezi: "bll_008_xiezi",
		bll_009_xiezi: "bll_009_xiezi",
		bll_010_xiezi: "bll_010_xiezi",
		bll_011_xiezi: "bll_011_xiezi",
		bll_013_xiezi: "bll_013_xiezi",
		bll_015_xiezi: "bll_015_xiezi",
		bll_016_xiezi: "bll_016_xiezi",
		bll_018_xiezi: "bll_018_xiezi",
		bll_020_xiezi: "bll_020_xiezi",
		bll_021_xiezi: "bll_021_xiezi",
		bll_022_xiezi: "bll_022_xiezi",
		bll_023_xiezi: "bll_023_xiezi",
		bll_024_xiezi: "bll_024_xiezi",
		bll_026_xiezi: "bll_026_xiezi",
		bll_028_xiezi: "bll_028_xiezi",
		bll_030_xiezi: "bll_030_xiezi",
		yll_001_xiezi: "yll_001_xiezi",
		yll_002_xiezi: "yll_002_xiezi",
		yll_003_xiezi: "yll_003_xiezi",
		yll_004_xiezi: "yll_004_xiezi",
		yll_005_xiezi: "yll_005_xiezi",
		yll_006_xiezi: "yll_006_xiezi",
		yll_008_xiezi: "yll_008_xiezi",
		yll_099_xiezi: "yll_099_xiezi",
		yll_ip001_xiezi: "yll_ip001_xiezi",
		yll_ip002_xiezi: "yll_ip002_xiezi",
		yll_ip003_xiezi: "yll_ip003_xiezi",
		yll_ip004_xiezi: "yll_ip004_xiezi",
		yll_ip005_xiezi: "yll_ip005_xiezi",
		yll_ip006_xiezi: "yll_ip006_xiezi",
		yll_ip007_xiezi: "yll_ip007_xiezi",
		yll_ip008_xiezi: "yll_ip008_xiezi",
		yll_ip009_xiezi: "yll_ip009_xiezi",
		yll_ip010_xiezi: "yll_ip010_xiezi",
		yll_ip011_xiezi: "yll_ip011_xiezi",
		yll_ip012_xiezi: "yll_ip012_xiezi",
		yll_ip013_xiezi: "yll_ip013_xiezi",
		yll_ip014_xiezi: "yll_ip014_xiezi",
		yll_ip016_xiezi: "yll_ip016_xiezi",
		bll_008_wazi: "bll_008_wazi",
		bll_009_wazi: "bll_009_wazi",
		bll_011_wazi: "bll_011_wazi",
		bll_013_wazi: "bll_013_wazi",
		bll_015_wazi: "bll_015_wazi",
		bll_016_wazi: "bll_016_wazi",
		bll_018_wazi: "bll_018_wazi",
		bll_020_wazi: "bll_020_wazi",
		bll_022_wazi: "bll_022_wazi",
		bll_024_wazi: "bll_024_wazi",
		bll_026_wazi: "bll_026_wazi",
		bll_028_wazi: "bll_028_wazi",
		bll_030_wazi: "bll_030_wazi",
		yll_001_wazi: "yll_001_wazi",
		yll_002_wazi: "yll_002_wazi",
		yll_008_wazi: "yll_008_wazi",
		bll_008_shoushi: "bll_008_shoushi",
		bll_009_shoushi: "bll_009_shoushi",
		bll_010_shoushi: "bll_010_shoushi",
		bll_011_shoushi: "bll_011_shoushi",
		bll_015_shoushi: "bll_015_shoushi",
		bll_016_shoushi: "bll_016_shoushi",
		bll_018_shoushi: "bll_018_shoushi",
		bll_020_shoushi: "bll_020_shoushi",
		bll_021_shoushi: "bll_021_shoushi",
		bll_022_shoushi: "bll_022_shoushi",
		yll_001_shoushi: "yll_001_shoushi",
		yll_002_shoushi: "yll_002_shoushi",
		yll_003_shoushi: "yll_003_shoushi",
		yll_005_shoushi: "yll_005_shoushi",
		yll_006_shoushi: "yll_006_shoushi",
		yll_008_shoushi: "yll_008_shoushi",
		yll_ip001_shoushi: "yll_ip001_shoushi",
		yll_ip002_shoushi: "yll_ip002_shoushi",
		yll_ip004_shoushi: "yll_ip004_shoushi",
		yll_ip005_shoushi: "yll_ip005_shoushi",
		yll_ip006_shoushi: "yll_ip006_shoushi",
		yll_ip009_shoushi: "yll_ip009_shoushi",
		yll_ip011_shoushi: "yll_ip011_shoushi",
		bll_008_beibu: "bll_008_beibu",
		bll_009_beibu: "bll_009_beibu",
		bll_010_beibu: "bll_010_beibu",
		bll_011_beibu: "bll_011_beibu",
		bll_013_beibu: "bll_013_beibu",
		bll_015_beibu: "bll_015_beibu",
		bll_016_beibu: "bll_016_beibu",
		bll_018_beibu: "bll_018_beibu",
		bll_020_beibu: "bll_020_beibu",
		bll_021_beibu: "bll_021_beibu",
		bll_022_beibu: "bll_022_beibu",
		bll_023_beibu: "bll_023_beibu",
		yll_001_beibu: "yll_001_beibu",
		yll_002_beibu: "yll_002_beibu",
		yll_004_beibu: "yll_004_beibu",
		yll_005_beibu: "yll_005_beibu",
		yll_008_beibu: "yll_008_beibu",
		yll_098_beibu: "yll_098_beibu",
		yll_ip002_beibu: "yll_ip002_beibu",
		yll_ip011_beibu: "yll_ip011_beibu",
		yll_ip012_beibu: "yll_ip012_beibu",
		yll_ip013_beibu: "yll_ip013_beibu",
		yll_ip014_beibu: "yll_ip014_beibu",
		e_yll_fenwei001: "e_yll_fenwei001",
		e_yll_fenwei002: "e_yll_fenwei002",
		e_yll_fenwei003: "e_yll_fenwei003",
		e_yll_fenwei004: "e_yll_fenwei004",
		e_yll_fenwei005: "e_yll_fenwei005",
		e_yll_fenwei006: "e_yll_fenwei006",
		e_yll_fenwei007: "e_yll_fenwei007",
		e_yll_fenwei008: "e_yll_fenwei008",
		e_yll_fenwei009: "e_yll_fenwei009",
		e_yll_fenwei010: "e_yll_fenwei010",
		e_yll_fenwei011: "e_yll_fenwei011",
		e_yll_fenwei012: "e_yll_fenwei012",
		e_yll_fenwei013: "e_yll_fenwei013",
		e_yll_fenwei014: "e_yll_fenwei014",
		e_yll_fenwei015: "e_yll_fenwei015",
		e_yll_fenwei016: "e_yll_fenwei016",
		e_yll_fenwei017: "e_yll_fenwei017",
		e_yll_fenwei018: "e_yll_fenwei018",
		e_yll_fenwei019: "e_yll_fenwei019",
		e_yll_fenwei020: "e_yll_fenwei020",
		e_yll_fenwei021: "e_yll_fenwei021",
		e_yll_fenwei037: "e_yll_fenwei037",
		e_yll_fenwei041: "e_yll_fenwei041",
		zj_l01: "zj_l01",
		zj_l02: "zj_l02",
		zj_l03: "zj_l03",
		zj_l04: "zj_l04",
		zj_l05: "zj_l05",
		zj_r01: "zj_r01",
		zj_r02: "zj_r02",
		zj_r03: "zj_r03",
		zj_r04: "zj_r04",
		zj_r05: "zj_r05"
	}, db.SPINE_DB_ID = {
		yindao: "yindao",
		lajitong1: "lajitong1",
		lajitong2: "lajitong2",
		jinyu: "jinyu",
		qieping: "qieping",
		ui_pingzi01: "ui_pingzi01",
		ui_pingzi02: "ui_pingzi02",
		ui_pingzi03: "ui_pingzi03",
		ui_pingzi04: "ui_pingzi04",
		ui_pingzi05: "ui_pingzi05",
		role_yanjue: "role_yanjue",
		ui_luping: "ui_luping",
		q_chensisi: "q_chensisi",
		q_linggongzhu: "q_linggongzhu",
		q_luoli: "q_luoli",
		q_manduola: "q_manduola",
		q_shuiwangzi: "q_shuiwangzi",
		q_wangmo: "q_wangmo",
		q_xinling: "q_xinling",
		q_binggongzhu86: "q_binggongzhu86",
		q_wenqianbs: "q_wenqianbs",
		q_yanjue: "q_yanjue",
		cj_heibanca: "cj_heibanca",
		cj_jinyuhei: "cj_jinyuhei",
		q_liangcai: "q_liangcai",
		110100: "110100",
		110300: "110300",
		"110700_l1": "110700_l1",
		"110700_l2": "110700_l2",
		110800: "110800",
		"110200_l1": "110200_l1",
		"110200_l2": "110200_l2",
		110400: "110400",
		110600: "110600",
		ui_lianzi: "ui_lianzi",
		cartoon: "cartoon"
	};
	const RECORD_DATA_KEY = "record_game_hagou" + _G.GAME_ID,
		RECORD_AGE_KEY = "__age__",
		RECORD_VERSION_KEY = "__version__",
		RECORD_FILES_KEY = "__files__";
	class FileRecord {
		static init() {
			this._readRecord(), Timer.callLoop(5, this._onTimerSpan.bind(this))
		}
		static _onTimerSpan(t) {
			this.writeEnable && this.bNeedFlush && (this.bNeedFlush = !1, this._writeRecord())
		}
		static _readRecord(t) {
			if (t || (t = Laya.LocalStorage.getItem(RECORD_DATA_KEY)), !t) return console.log("提示] FileRecord._readRecord 存档未找到！重置存档！"), void this.resetRecord();
			let e = this._decodeData(t);
			return e ? e[RECORD_VERSION_KEY] != _G.RECORD_VERSION ? (console.warn("警告] FileRecord._readRecord 存档版本改变！重置存档！"), void this.resetRecord()) : void(this.record = e) : (console.warn("警告] FileRecord._readRecord 存档数据损坏！重置存档！"), void this.resetRecord())
		}
		static _writeRecord() {
			let t = this._encodeData(this.record);
			Laya.LocalStorage.setItem(RECORD_DATA_KEY, t)
		}
		static markFlush() {
			this.bNeedFlush = !0
		}
		static flush() {
			this._writeRecord(), this.bNeedFlush = !1
		}
		static _encodeData(t) {
			let e = JSON.stringify(t);
			if (this.compressEnable) {
				let t = Tools.compress(e);
				return Base64.encode(t)
			}
			return e
		}
		static _decodeData(t) {
			try {
				if (this.compressEnable) {
					let e = Base64.decode(t),
						a = Tools.decompress(e);
					if (a) {
						return JSON.parse(a)
					}
					return null
				}
				return JSON.parse(t)
			} catch (t) {
				Logger.catchError("FileRecord._decodeData", t)
			}
			return null
		}
		static getData(t) {
			return this.record[t]
		}
		static setData(t, e) {
			this.record[t] = e, this.record[RECORD_AGE_KEY] = (this.record[RECORD_AGE_KEY] || 0) + 1, this.markFlush()
		}
		static resetRecord() {
			this.deletFileData(), this.record = {}, this.record[RECORD_AGE_KEY] = 0, this.record[RECORD_VERSION_KEY] = _G.RECORD_VERSION, this.record[RECORD_FILES_KEY] = {}, this.markFlush(), this.isNewRecord = !0
		}
		static deletAllData(t = !0) {
			this.deletFileData(), t && (this.record = {}, this.record[RECORD_AGE_KEY] = 0), this.record[RECORD_VERSION_KEY] = _G.RECORD_VERSION + 123698745, this.record[RECORD_FILES_KEY] = {}, Laya.LocalStorage.removeItem(RECORD_DATA_KEY)
		}
		static deletFileData() {
			let t = this.record;
			if (t) {
				let e = t[RECORD_FILES_KEY];
				if (e)
					for (const t in e) Laya.LocalStorage.removeItem(t)
			}
		}
		static setDataToFile(t, e, a = !0) {
			let i = this.getData(RECORD_FILES_KEY);
			i[t] = 1, this.setData(RECORD_FILES_KEY, i), Laya.LocalStorage.setItem(t, a ? this._encodeData(e) : e)
		}
		static getDataFromFile(t, e = !0) {
			let a = Laya.LocalStorage.getItem(t);
			return a ? e ? this._decodeData(a) : a : null
		}
	}
	FileRecord.record = {}, FileRecord.bNeedFlush = !1, FileRecord.writeEnable = !0, FileRecord.isNewRecord = !1, FileRecord.compressEnable = !1;
	const test_data = {};
	class GameStatistics {
		static init() {
			this.onceEventId = FileRecord.getData("key_statistics") || {}
		}
		static saveData() {
			FileRecord.setData("key_statistics", this.onceEventId)
		}
		static postMegadata(t) {
			if (this.enable) {
				if (Laya.Browser.onPC && _G.H5_TEST) {
					let e = t.join("-"),
						a = test_data[e];
					test_data[e] = a ? a + 1 : 1
				}
				console.log("mgrSdk:postMegadata(data)", t), SDKBridge.sendToSdk("/c/postMegadata", t)
			}
		}
		static statisOnStageStart(t, e = 0) {
			console.info("mgrSdk:statisOnStageStart(stageName)", t);
			let a = ["levelStart", t + "", e + ""];
			this.postMegadata(a)
		}
		static statisOnStageEnd(t, e = 0, a = 0) {
			console.info("mgrSdk:statisOnStageEnd(stageName)", t, e, a);
			let i = ["levelComplete", t + "", e + "", a + "", "0", "0", "0", "0", "0"];
			this.postMegadata(i)
		}
		static statisOnAddItemAmount(t, e, a) {
			if (_G.isGuiding) return;
			if (!db.cop.b_open_statics_item) return;
			let i = ["coinChange", t + "", "1", e + "", a + ""];
			this.postMegadata(i)
		}
		static statisOnSubItemAmount(t, e, a) {
			if (_G.isGuiding) return;
			if (!db.cop.b_open_statics_item) return;
			let i = ["coinChange", t + "", "0", e + "", a + ""];
			this.postMegadata(i)
		}
		static statisOnItemBought(t, e, a = 0) {
			if (_G.isGuiding) return;
			let i = ["itemBuy", t + "", Math.abs(e) + "", a + ""];
			this.postMegadata(i)
		}
		static statisOnBuyAction(t, e, a) {
			if (_G.isGuiding) return;
			let i = ["buyAction", t + "", e + "", a + ""];
			this.postMegadata(i)
		}
		static statisCommonEvent(t, e = 0, a = 0) {
			let i = ["commonEvent", t + "", e + "", a + ""];
			this.postMegadata(i)
		}
		static statisVideoPointEvent(t, e) {
			if (_G.isGuiding) return;
			let a = ["videoPointEvent", t, e + ""];
			this.postMegadata(a)
		}
		static statisCommonEventOnce(t) {
			this.onceEventId[t] || (this.onceEventId[t] = 1, this.saveData(), this.statisCommonEvent(t))
		}
		static statisLog(t, e, a = "", i = "", s = "") {
			let n = ["commonEvent", t + "", "0", "0", "0", e, a, i, s];
			this.postMegadata(n)
		}
		static logAllData() {
			let t = "",
				e = Object.keys(test_data);
			e.sort();
			for (let a = 0; a < e.length; a++) t += `[${e[a]}] [${test_data[e[a]]}]`, t += "\n";
			Logger.debug("--- statistics start ---"), Logger.debug(t), Logger.debug("--- statistics end ---")
		}
	}
	GameStatistics.enable = !0;
	let pako$1 = window.pako;
	const DEV_REPORT = !1;
	class CrashReporter {
		constructor() {
			this.reportedLog = {}, this.onWindow = !1, this.registerOnErrorCallback();
			let t = Laya.Browser.userAgent;
			this.onWindow = t.indexOf("Windows") >= 0 && t.indexOf("Chrome") >= 0
		}
		static getInstance() {
			return this.reporter ? this.reporter : (this.reporter = new CrashReporter, this.reporter)
		}
		setDataHook(t) {
			this.hookCallback = t
		}
		registerOnErrorCallback() {
			let t, e = this;
			window.onerror && (t = window.onerror), window.onerror = function(a, i, s, n, o) {
				setTimeout(() => {
					e._browser_onerror(a, i, s, n, o)
				}, 0), t instanceof Function && t(a, i, s, n, o)
			}
		}
		_browser_onerror(t, e, a, i, s) {
			i = i || window.event && window.event.errorCharacter || 0;
			let n = {
				message: t.toString(),
				stack: "",
				location: e || "",
				line: a || 0,
				col: i || 0
			};
			if (s && s.stack) n.stack = s.stack.toString();
			else if (window.arguments && window.arguments.callee) {
				for (var o = [], r = window.arguments.callee.caller, l = 3; r && --l > 0 && (o.push(r.toString()), r !== r.caller);) r = r.caller;
				n.stack = o.join(",")
			}
			try {
				this.onError(n)
			} catch (s) {
				console.error("CrashReporter.onError has exception:", s)
			}
		}
		_native_onerror(t, e, a, i) {
			let s = {
				message: a || "",
				stack: i || "",
				location: t || "",
				line: e || 0,
				col: 0
			};
			try {
				this.onError(s)
			} catch (t) {
				console.error("CrashReporter.onError has exception:", t)
			}
		}
		manualReport(t, e, a = "") {
			this.onError({
				message: e || "",
				stack: a || "",
				location: t || "CrashReport.manualReport",
				line: 0,
				col: 0
			})
		}
		onError(t) {
			let e = "",
				a = "",
				i = "none";
			if (this.hookCallback instanceof Function) {
				let t = this.hookCallback();
				e = t.uid || "", a = t.channelName || "", i = t.gameVersion
			}
			let s = t.message,
				n = t.stack;
			n.length > 1024 && (n = n.substr(0, 1024));
			let o = t.location.toString(),
				r = t.line.toString(),
				l = t.col.toString(),
				c = Laya.Browser.userAgent,
				h = `${Laya.Browser.width}x${Laya.Browser.height}`,
				d = `${Laya.stage.width}x${Laya.stage.height}`;
			this.onWindow ? console.error("CrashReport.onError:", t) : console.log("CrashReport.onError:"), console.log("  uid", e), console.log("  channelName", a), console.log("  gameVersion", i), console.log("  message", s), console.log("  stack", n), console.log("  location", o), console.log("  line", r), console.log("  col", l), console.log("  userAgent", c), console.log("  deviceSize", h), console.log("  viewSizeStr", d), console.log("  gitHash", "LOCAL_PATCH_GIT_HASH");
			let _ = t.message + t.location;
			if (this.reportedLog[_]) return void console.log("当前crash信息已上报！");
			let g = [e, a, i, s, n, o, r, l, c, h, d, "LOCAL_PATCH_GIT_HASH"];
			this.uploadCrashInfo(g), this.reportedLog[_] = !0
		}
		uploadCrashInfo(t) {
			if (_G.H5_TEST) console.error("开发模式不需要上报数据");
			else try {
				let e = this.compressUpdata(t);
				e && GameStatistics.statisLog(99999, e[0], e[1], e[2], e[3])
			} catch (t) {
				console.error("mgrSdk._temp_upload_statistics has error!", t)
			}
		}
		compressUpdata(t, e = 0) {
			let a = JSON.stringify(t),
				i = pako$1.gzip(a, {
					to: "byte"
				}),
				s = gBase64.fromUint8Array(i, !0),
				n = s.length;
			if (n > 1250) switch (e) {
				case 0:
					for (let e = t.length - 1; e >= 8; e--) t.splice(e, 1);
					return this.compressUpdata(t, 1);
				case 1:
					return t[4] && (t[4] = t[4].substr(0, 1e3)), this.compressUpdata(t, 2);
				case 2:
					return t[4] = "", this.compressUpdata(t, 3);
				case 3:
					return console.warn("上传数据超长", t), null
			}
			let o = [];
			for (let t = 0; t < n; t += 250) o.push(s.substr(t, 250));
			return o
		}
	}
	let cur_log_level = 2,
		EMPTY_FUN = function() {};
	class Logger {
		static log() {}
		static debug() {}
		static warn() {}
		static error() {}
		static catchError(t, e) {
			e instanceof Error ? CrashReporter.getInstance().manualReport(t, e.message, e.stack) : CrashReporter.getInstance().manualReport(t, e.toString())
		}
		static getErrorStr(t) {
			return t instanceof Error ? `message:${t.message} stack:${t.stack}` : t ? JSON.stringify(t) : t.toString()
		}
		static setLogLevel(t) {
			cur_log_level = t, t >= 3 && (Logger.debug = console.log), t >= 2 && (Logger.log = console.log), t >= 1 && (Logger.warn = console.warn), t >= 0 && (Logger.error = console.error)
		}
		static get isDebugLevel() {
			return 3 == cur_log_level
		}
	}
	const BASE_MSG = {
			VIEW_RESIZE: "VIEW_RESIZE",
			SYS_SHOW: "SYS_SHOW",
			SYS_HIDE: "SYS_HIDE",
			SYS_KEY_DOWN: "SYS_KEY_DOWN",
			SYS_KEY_UP: "SYS_KEY_UP",
			RES_LOAD_START: "RES_LOAD_START",
			RES_LOAD_PROGRESS: "RES_LOAD_PROGRESS",
			RES_LOAD_END: "RES_LOAD_END",
			READY_OPEN_NEW_BANNER: "READY_OPEN_NEW_BANNER",
			CFG_LOAD_FINISH: "CFG_LOAD_FINISH",
			UI_SHOW_TIP: "UI_SHOW_TIP",
			UI_SHOW_ITEMS: "UI_SHOW_ITEMS",
			SDK_EXIT_GAME: "SDK_EXIT_GAME",
			SDK_VIDEO_VISIBLE: "SDK_VIDEO_VISIBLE",
			SDK_SHARE_SUC: "SDK_SHARE_SUC",
			SDK_SHARE_FAIL: "SDK_SHARE_FAIL",
			SDK_LOGIN_STATE: "SDK_LOGIN_STATE",
			SDK_LOGIN_RESULT: "SDK_LOGIN_RESULT",
			SDK_INSTALL_SHORTCUT_SUC: "SDK_INSTALL_SHORTCUT_SUC",
			SDK_GET_SHORTCUT_STATE_SUC: "SDK_GET_SHORTCUT_STATE_SUC",
			SDK_COP_CHANGED: "SDK_COP_CHANGED",
			SDK_VIDEO_SHARE_SUC: "SDK_VIDEO_SHARE_SUC",
			SDK_VIDEO_SHARE_FAIL: "SDK_VIDEO_SHARE_FAIL",
			SDK_OPEN_JUMP_RESULT: "SDK_OPEN_JUMP_RESULT",
			SDK_JUMP_GAME_SUC: "SDK_JUMP_GAME_SUC",
			MSG_ON_ADD_SUBSCRIBE_RESULT: "MSG_ON_ADD_SUBSCRIBE_RESULT",
			SDK_JUMP_GAME_REWARD: "SDK_JUMP_GAME_REWARD",
			SDK_JUMP_TO_VIDEO_VIEW_SUC: "SDK_JUMP_TO_VIDEO_VIEW_SUC",
			SDK_PRE_PAY: "SDK_PRE_PAY",
			SDK_FOLLOW_OFFICIAL_ACCOUNT_SUC: "SDK_FOLLOW_OFFICIAL_ACCOUNT_SUC",
			SDK_GET_FOLLOW_OFFICIAL_ACCOUNT_STATE_SUC: "SDK_GET_FOLLOW_OFFICIAL_ACCOUNT_STATE_SUC",
			SDK_GET_RANK_DATA_RESULT: "SDK_GET_RANK_DATA_RESULT",
			ADV_SHOW_SUC: "ADV_SHOW_SUC",
			ADV_SHOW_FAIL: "ADV_SHOW_FAIL",
			ADV_CLICK_SUC: "ADV_CLICK_SUC",
			NATIVE_ADV_LOADED: "NATIVE_ADV_LOADED",
			ADV_CLOSE_NATIVE_BANNER: "ADV_CLOSE_NATIVE_BANNER",
			BASE_MGR_LOADED: "BASE_MGR_LOADED",
			UI_PANEL_CLOSED: "UI_PANEL_CLOSED",
			ITEM_CHANGE: "ITEM_CHANGE",
			ITEM_USE: "ITEM_USE",
			ITEM_ADD: "ITEM_ADD",
			GOAL_STATE_CHANGE: "GOAL_STATE_CHANGE",
			GOAL_VALUE_CHANGE: "GOAL_VALUE_CHANGE",
			DAILY_SWITCH_ACTIVE: "DAILY_SWITCH_ACTIVE",
			QUEST_STATE_CHANGE: "QUEST_STATE_CHANGE",
			UP_STATE_CHANGE: "UP_STATE_CHANGE",
			PAY_SUC: "PAY_SUC"
		},
		RES_TYPE = {
			BUFFER: Laya.Loader.BUFFER,
			PREFAB2D: Laya.Loader.PREFAB,
			IMAGE: Laya.Loader.IMAGE,
			TEXT: Laya.Loader.TEXT,
			JSON: Laya.Loader.JSON,
			SOUND: Laya.Loader.SOUND,
			ATLAS: Laya.Loader.ATLAS,
			PREFAB3D: Laya.Loader.HIERARCHY,
			MATERIAL: Laya.Loader.MATERIAL,
			TEXTURE2D: Laya.Loader.TEXTURE2D,
			MESH: Laya.Loader.MESH,
			ANIMATIONCLIP: Laya.Loader.ANIMATIONCLIP
		};
	var GOAL_TYPE;
	! function(t) {
		t.QUEST = "QUEST", t.SWITCH = "SWITCH"
	}(GOAL_TYPE || (GOAL_TYPE = {}));
	const BASE_ACTION_ID = {
			ITEM_GET: "ITEM_GET",
			ITEM_USE: "ITEM_USE",
			PAY_SUC: "PAY_SUC",
			SHARE: "SHARE",
			LEVEL_UP: "LEVEL_UP",
			LEVEL_UP_KEY: "LEVEL_UP_KEY",
			LEVEL_UP_KEY_MAX: "LEVEL_UP_KEY_MAX",
			QUEST_FINISH: "QUEST_FINISH",
			QUEST_FINISH_COUNT: "QUEST_FINISH_COUNT",
			VIDEO_SHOW_SUC: "VIDEO_SHOW_SUC"
		},
		BASE_SWITCH_ID = {
			DAILY: "1",
			WEEKLY: "2"
		},
		UpAttrName = {
			Base: "baseUp"
		};
	let _convert = function(t, e) {
		t.sign = e ? "" : t.negative ? "-" : t.sign;
		var a = t.min - t.argument.length + 1 - t.sign.length,
			i = new Array(a < 0 ? 0 : a).join(t.pad);
		return t.left ? "0" == t.pad || e ? t.sign + t.argument + i.replace(/0/g, " ") : t.sign + t.argument + i : "0" == t.pad || e ? t.sign + i + t.argument : i + t.sign + t.argument
	};

	function sprintf(...t) {
		if (void 0 === t) return null;
		if (t.length < 1) return null;
		if ("string" != typeof t[0]) return null;
		if ("undefined" == typeof RegExp) return null;
		for (var e = t[0], a = new RegExp(/(%([%]|(\-)?(\+|\x20)?(0)?(\d+)?(\.(\d)?)?([bcdfosxX])))/g), i = new Array, s = new Array, n = 0, o = 0, r = 0, l = 0, c = "", h = null; h = a.exec(e);) h[9] && (n += 1), o = l, r = a.lastIndex - h[0].length, s[s.length] = e.substring(o, r), l = a.lastIndex, i[i.length] = {
			match: h[0],
			left: !!h[3],
			sign: h[4] || "",
			pad: h[5] || " ",
			min: h[6] || 0,
			precision: h[8],
			code: h[9] || "%",
			negative: parseInt(t[n]) < 0,
			argument: String(t[n])
		};
		if (s[s.length] = e.substring(l), 0 == i.length) return e;
		if (t.length - 1 < n) return null;
		h = null;
		var d = null,
			_ = null;
		for (_ = 0; _ < i.length; _++) "%" == i[_].code ? d = "%" : "b" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(2)), d = _convert(i[_], !0)) : "c" == i[_].code ? (i[_].argument = String(String.fromCharCode(Math.abs(parseInt(i[_].argument)))), d = _convert(i[_], !0)) : "d" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument))), d = _convert(i[_])) : "f" == i[_].code ? (i[_].argument = String(Math.abs(parseFloat(i[_].argument)).toFixed(i[_].precision ? i[_].precision : 6)), d = _convert(i[_])) : "o" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(8)), d = _convert(i[_])) : "s" == i[_].code ? (i[_].argument = i[_].argument.substring(0, i[_].precision ? i[_].precision : i[_].argument.length), d = _convert(i[_], !0)) : "x" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(16)), d = _convert(i[_])) : "X" == i[_].code ? (i[_].argument = String(Math.abs(parseInt(i[_].argument)).toString(16)), d = _convert(i[_]).toUpperCase()) : d = i[_].match, c += s[_], c += d;
		return c += s[_]
	}
	window.UL_DEBUG = !1, String.format = sprintf;
	let proto_onDestroy = Laya.Node.prototype.onDestroy;
	Laya.Node.prototype.onDestroy = function() {
		proto_onDestroy.apply(this), this.event("NODE_DESTROYED")
	}, Laya.Sprite.prototype.setVisible = function(t) {
		this._visible !== t && (this.visible = t, this.event(Laya.Event.VISIBILITY_CHANGE))
	};
	let proto_onCompResize = Laya.Image.prototype.onCompResize;

	function __init_laya_ex__() {}
	Laya.Image.prototype.onCompResize = function() {
		this.destroyed || proto_onCompResize.apply(this)
	}, Object.defineProperty(Laya.Text.prototype, "intText", {
		set: function(t) {
			this.text = Math.floor(t) + ""
		},
		get: function() {
			return parseInt(this.text) || 0
		}
	}), Object.defineProperty(Laya.Label.prototype, "intText", {
		set: function(t) {
			this.text = Math.floor(t) + ""
		},
		get: function() {
			return parseInt(this.text) || 0
		}
	});
	class Vec2 {
		constructor(t = 0, e = 0) {
			this.x = 0, this.y = 0, this.x = t, this.y = e
		}
		static get zero() {
			return new Vec2(0, 0)
		}
		static get one() {
			return new Vec2(1, 1)
		}
		clone() {
			return new Vec2(this.x, this.y)
		}
		setTo(t, e) {
			return this.setValue(t, e), this
		}
		setValue(t, e) {
			this.x = t, this.y = e
		}
		set(t) {
			return this.x = t.x, this.y = t.y, this
		}
		equals(t) {
			return t && this.x === t.x && this.y === t.y
		}
		fuzzyEquals(t, e) {
			return this.x - e <= t.x && t.x <= this.x + e && this.y - e <= t.y && t.y <= this.y + e
		}
		lerp(t, e, a) {
			a = a || new Vec2;
			let i = this.x,
				s = this.y;
			return a.x = i + (t.x - i) * e, a.y = s + (t.y - s) * e, a
		}
		clampf(t, e) {
			return this.x = Mathf.clamp(this.x, t.x, e.x), this.y = Mathf.clamp(this.y, t.y, e.y), this
		}
		addSelf(t) {
			return this.x += t.x, this.y += t.y, this
		}
		add(t, e) {
			return (e = e || new Vec2).x = this.x + t.x, e.y = this.y + t.y, e
		}
		subSelf(t) {
			return this.x -= t.x, this.y -= t.y, this
		}
		sub(t, e) {
			return (e = e || new Vec2).x = this.x - t.x, e.y = this.y - t.y, e
		}
		mulSelf(t) {
			return this.x *= t, this.y *= t, this
		}
		mul(t, e) {
			return (e = e || new Vec2).x = this.x * t, e.y = this.y * t, e
		}
		scaleSelf(t) {
			return this.x *= t.x, this.y *= t.y, this
		}
		scale(t, e) {
			return (e = e || new Vec2).x = this.x * t.x, e.y = this.y * t.y, e
		}
		divSelf(t) {
			return this.x /= t, this.y /= t, this
		}
		div(t, e) {
			return (e = e || new Vec2).x = this.x / t, e.y = this.y / t, e
		}
		negSelf() {
			return this.x = -this.x, this.y = -this.y, this
		}
		neg(t) {
			return (t = t || new Vec2).x = -this.x, t.y = -this.y, t
		}
		dot(t) {
			return this.x * t.x + this.y * t.y
		}
		cross(t) {
			return this.x * t.y - this.y * t.x
		}
		mag() {
			return Math.sqrt(this.x * this.x + this.y * this.y)
		}
		magSqr() {
			return this.x * this.x + this.y * this.y
		}
		normalizeSelf() {
			var t = this.x * this.x + this.y * this.y;
			if (1 === t) return this;
			if (0 === t) return this;
			var e = 1 / Math.sqrt(t);
			return this.x *= e, this.y *= e, this
		}
		normalize(t) {
			return (t = t || new Vec2).x = this.x, t.y = this.y, t.normalizeSelf(), t
		}
		angle(t) {
			var e = this.magSqr(),
				a = t.magSqr();
			if (0 === e || 0 === a) return console.warn("Can't get angle between zero vector"), 0;
			var i = this.dot(t) / Math.sqrt(e * a);
			return i = Mathf.clamp(i, -1, 1), Math.acos(i)
		}
		signAngle(t) {
			let e = this.angle(t);
			return this.cross(t) < 0 ? -e : e
		}
		rotate(t, e) {
			return (e = e || new Vec2).x = this.x, e.y = this.y, e.rotateSelf(t)
		}
		rotateSelf(t) {
			var e = Math.sin(t),
				a = Math.cos(t),
				i = this.x;
			return this.x = a * i - e * this.y, this.y = e * i + a * this.y, this
		}
		project(t) {
			return t.mul(this.dot(t) / t.dot(t))
		}
	}
	Vec2.ZERO = new Vec2(0, 0), Vec2.TEMP = new Vec2(0, 0), Vec2.TEMPS = [new Vec2(0, 0), new Vec2(0, 0), new Vec2(0, 0), new Vec2(0, 0)];
	var Vector2 = Laya.Vector2,
		vec2Proto = Vec2.prototype,
		proto = Vector2.prototype;

	function __init_vector2_ex__() {
		console.log("__init_vector2_ex__")
	}

	function logID(t) {
		console.log(t)
	}

	function errorID(t) {
		console.error(t)
	}

	function warnID(t, e) {
		console.warn(t, e)
	}
	proto.setTo = function(t, e) {
		return this.setValue(t, e), this
	}, proto.set = vec2Proto.set, proto.equals = vec2Proto.equals, proto.fuzzyEquals = vec2Proto.fuzzyEquals, proto.lerp = function(t, e, a) {
		a = a || new Vector2;
		let i = this.x,
			s = this.y;
		return a.x = i + (t.x - i) * e, a.y = s + (t.y - s) * e, a
	}, proto.clampf = vec2Proto.clampf, proto.addSelf = vec2Proto.addSelf, proto.add = function(t, e) {
		return (e = e || new Vector2).x = this.x + t.x, e.y = this.y + t.y, e
	}, proto.subSelf = vec2Proto.subSelf, proto.sub = function(t, e) {
		return (e = e || new Vector2).x = this.x - t.x, e.y = this.y - t.y, e
	}, proto.mulSelf = vec2Proto.mulSelf, proto.mul = function(t, e) {
		return (e = e || new Vector2).x = this.x * t, e.y = this.y * t, e
	}, proto.scaleSelf = vec2Proto.scaleSelf, proto.scale = function(t, e) {
		return (e = e || new Vector2).x = this.x * t.x, e.y = this.y * t.y, e
	}, proto.divSelf = vec2Proto.divSelf, proto.div = function(t, e) {
		return (e = e || new Vector2).x = this.x / t, e.y = this.y / t, e
	}, proto.negSelf = vec2Proto.negSelf, proto.neg = function(t) {
		return (t = t || new Vector2).x = -this.x, t.y = -this.y, t
	}, proto.dot = vec2Proto.dot, proto.cross = vec2Proto.cross, proto.mag = vec2Proto.mag, proto.magSqr = vec2Proto.magSqr, proto.normalizeSelf = vec2Proto.normalizeSelf, proto.normalize = function(t) {
		return (t = t || new Vector2).x = this.x, t.y = this.y, t.normalizeSelf(), t
	}, proto.angle = vec2Proto.angle, proto.signAngle = vec2Proto.signAngle, proto.rotate = function(t, e) {
		return (e = e || new Vector2).x = this.x, e.y = this.y, e.rotateSelf(t)
	}, proto.rotateSelf = vec2Proto.rotateSelf, proto.project = vec2Proto.project;
	let ID_COUNTER = 0;
	class HashElement {
		constructor() {
			this.actions = [], this.target = null, this.actionIndex = 0, this.currentAction = null, this.paused = !1, this.lock = !1
		}
	}
	class ActionManager {
		constructor() {
			this._hashTargets = Object.create(null), this._arrayTargets = [], this._elementPool = []
		}
		_searchElementByTarget(t, e) {
			for (var a = 0; a < t.length; a++)
				if (e === t[a].target) return t[a];
			return null
		}
		_getElement(t, e) {
			var a = this._elementPool.pop();
			return a || (a = new HashElement), a.target = t, a.paused = !!e, a
		}
		_putElement(t) {
			t.actions.length = 0, t.actionIndex = 0, t.currentAction = null, t.paused = !1, t.target = null, t.lock = !1, this._elementPool.push(t)
		}
		addAction(t, e, a) {
			if (t && e) {
				var i = e.$_GID || (e.$_GID = Laya.Utils.getGID()),
					s = this._hashTargets[i];
				s ? s.actions || (s.actions = []) : (s = this._getElement(e, a), this._hashTargets[i] = s, this._arrayTargets.push(s)), s.actions.push(t), t.startWithTarget(e)
			} else errorID(1e3)
		}
		removeAllActions() {
			for (var t = this._arrayTargets, e = 0; e < t.length; e++) {
				var a = t[e];
				a && this._putElement(a)
			}
			this._arrayTargets.length = 0, this._hashTargets = Object.create(null)
		}
		removeAllActionsFromTarget(t, e) {
			if (null != t) {
				var a = this._hashTargets[t.$_GID];
				a && (a.actions.length = 0, this._deleteHashElement(a))
			}
		}
		removeAction(t) {
			if (null != t) {
				var e = t.getOriginalTarget(),
					a = this._hashTargets[e.$_GID];
				if (a)
					for (var i = 0; i < a.actions.length; i++)
						if (a.actions[i] === t) {
							a.actions.splice(i, 1), a.actionIndex >= i && a.actionIndex--;
							break
						}
			}
		}
		getNumberOfRunningActionsInTarget(t) {
			var e = this._hashTargets[t.$_GID];
			return e && e.actions ? e.actions.length : 0
		}
		pauseTarget(t) {
			var e = this._hashTargets[t.$_GID];
			e && (e.paused = !0)
		}
		resumeTarget(t) {
			var e = this._hashTargets[t.$_GID];
			e && (e.paused = !1)
		}
		pauseAllRunningActions() {
			for (var t = [], e = this._arrayTargets, a = 0; a < e.length; a++) {
				var i = e[a];
				i && !i.paused && (i.paused = !0, t.push(i.target))
			}
			return t
		}
		resumeTargets(t) {
			if (t)
				for (var e = 0; e < t.length; e++) t[e] && this.resumeTarget(t[e])
		}
		pauseTargets(t) {
			if (t)
				for (var e = 0; e < t.length; e++) t[e] && this.pauseTarget(t[e])
		}
		purgeSharedManager() {
			Laya.stage.timer.clearAll(this)
		}
		_removeActionAtIndex(t, e) {
			e.actions[t];
			e.actions.splice(t, 1), e.actionIndex >= t && e.actionIndex--, 0 === e.actions.length && this._deleteHashElement(e)
		}
		_deleteHashElement(t) {
			var e = !1;
			if (t && !t.lock && this._hashTargets[t.target.$_GID]) {
				delete this._hashTargets[t.target.$_GID];
				for (var a = this._arrayTargets, i = 0, s = a.length; i < s; i++)
					if (a[i] === t) {
						a.splice(i, 1);
						break
					} this._putElement(t), e = !0
			}
			return e
		}
		update(t) {
			for (var e, a = this._arrayTargets, i = 0; i < a.length; i++) {
				if (this._currentTarget = a[i], !(e = this._currentTarget).paused && e.actions) {
					for (e.lock = !0, e.actionIndex = 0; e.actionIndex < e.actions.length; e.actionIndex++)
						if (e.currentAction = e.actions[e.actionIndex], e.currentAction) {
							if (e.currentAction.step(t * (e.currentAction._speedMethod ? e.currentAction._speed : 1)), e.currentAction && e.currentAction.isDone()) {
								e.currentAction.stop();
								var s = e.currentAction;
								e.currentAction = null, this.removeAction(s)
							}
							e.currentAction = null
						} e.lock = !1
				}
				0 === e.actions.length && this._deleteHashElement(e) && i--
			}
		}
	}
	class TweenSystem {
		constructor() {
			this.actionMgr = new ActionManager
		}
		static create() {
			if (!this.instance) {
				let t = new TweenSystem;
				this.instance = t;
				let e = Laya.timer;
				e.frameLoop(1, this, function() {
					t.postUpdate(e.delta / 1e3)
				})
			}
		}
		get ActionManager() {
			return this.actionMgr
		}
		postUpdate(t) {
			try {
				this.actionMgr.update(t)
			} catch (t) {
				Logger.catchError("TweenSystem.postUpdate", t)
			}
		}
	}
	TweenSystem.ID = "tween";
	class _mgrBase {
		static onload() {
			Logger.warn("please override this function")
		}
		static start() {}
		static registerMsg(t) {
			this.m_MsgHandler || (this.m_MsgHandler = new MsgHandler), this.m_MsgHandler.registerListeners(t), this.m_MsgHandler.startProcMsg()
		}
		static startProcMsg() {
			this.m_MsgHandler && this.m_MsgHandler.startProcMsg()
		}
		static stopProcMsg() {
			this.m_MsgHandler && this.m_MsgHandler.stopProcMsg()
		}
	}
	_mgrBase.m_MsgHandler = null;
	class PanelQueue extends Laya.Script {
		constructor() {
			super(...arguments), this.m_Dirty = !1, this.m_panelQueue = []
		}
		onAwake() {
			this.m_MsgHandler = new MsgHandler, this.m_MsgHandler.registerListeners({
				[BASE_MSG.UI_PANEL_CLOSED]: this.onMsgPanelClosed.bind(this)
			}), this.m_MsgHandler.startProcMsg()
		}
		onDestroy() {
			this.m_MsgHandler.stopProcMsg()
		}
		onUpdate() {
			this.m_Dirty && (this.m_Dirty = !1, this.openPanelFromQueue())
		}
		onMsgPanelClosed(t) {
			this.m_Dirty = !0
		}
		openPanelWithPriority(t, e, a = 0, i = !0) {
			i && (this.m_Dirty = !0);
			let s = this.m_panelQueue;
			if (s.length > 0)
				for (let i = 0; i < s.length; i++)
					if (s[i].priority > a) return void s.splice(i, 0, {
						panel: t,
						context: e,
						priority: a
					});
			s.push({
				panel: t,
				context: e,
				priority: a
			})
		}
		openPanelFromQueue() {
			if (this.m_panelQueue.length > 0) {
				let t = this.m_panelQueue.pop();
				mgrPanel.openPanel(t.panel, t.context, this.m_panelQueue.length > 0)
			}
		}
	}
	class mgrRes {
		static tryLoadRes(t) {
			return Laya.loader.getRes(t)
		}
		static loadRes(t, e, a) {
			a = a || _G.EMPTY_FUN;
			let i, s = Laya.loader.getRes(t);
			null == s ? this.loadingCallback[t] ? this.loadingCallback[t].calls.push(a) : (this.loadingCallback[t] = {
				calls: [a],
				loadCount: 1
			}, i = (a => {
				let s = this.loadingCallback[t];
				if (s)
					if (a) {
						let e = s.calls;
						delete this.loadingCallback[t];
						for (let t = 0; t < e.length; t++) e[t](a)
					} else if (Logger.error(`mgrRes.loadRes load [${t}] err.`), s.loadCount <= this.retryCount) s.loadCount++, this._loadRes(t, e, i);
				else {
					let e = s.calls;
					delete this.loadingCallback[t];
					for (let t = 0; t < e.length; t++) e[t](null)
				} else Logger.warn("mgrRes loadCallback: No Loaded Callback Exists! ", t)
			}), this._loadRes(t, e, i)) : a(s)
		}
		static _loadRes(t, e, a) {
			let i = Laya.Handler.create(this, function(t) {
				try {
					a(t)
				} catch (t) {
					Logger.catchError("mgrRes._loadRes complete", t)
				}
			});
			switch (e) {
				case RES_TYPE.PREFAB2D:
				case RES_TYPE.IMAGE:
				case RES_TYPE.TEXT:
				case RES_TYPE.JSON:
				case RES_TYPE.SOUND:
				case RES_TYPE.ATLAS:
				case RES_TYPE.BUFFER:
					return void Laya.loader.load(t, i, null, e);
				case RES_TYPE.PREFAB3D:
				case RES_TYPE.MATERIAL:
				case RES_TYPE.TEXTURE2D:
				case RES_TYPE.MESH:
				case RES_TYPE.ANIMATIONCLIP:
					return void Laya.loader.create(t, i, null, e);
				default:
					Logger.error("未知资源类型:", e)
			}
		}
		static promiseLoadAsset(t, e) {
			return new Promise((a, i) => {
				this.loadRes(t, e, function(t) {
					t ? a(t) : i(null)
				})
			})
		}
		static loadImageFromWeb(t, e) {
			t ? this.webResCache[t] ? e(this.webResCache[t]) : Logger.error("本方法暂未实现.") : e(null)
		}
		static loadTexture2D(t, e) {
			this.loadRes(t, RES_TYPE.TEXTURE2D, function(t) {
				e && e(t)
			})
		}
		static loadBmfontWithText(t, e) {
			this.loadRes(t, RES_TYPE.TEXT, a => {
				let i = a.indexOf('file="');
				if (i > 0) {
					let s = a.indexOf(".png", i + 1),
						n = a.slice(i + 6, s + 4),
						o = Tools.getPath(t);
					this.loadRes(o + n, RES_TYPE.IMAGE, i => {
						if (!i) return;
						let s = new Laya.BitmapFont;
						s._texture = i;
						let n = function(t, e = 0) {
								if (t += "=", (e = a.indexOf(t, e)) >= 0) {
									let i = a.indexOf(" ", e);
									return i >= 0 ? a.slice(e + t.length, i) : (console.warn("parse end error:", a, e, t), null)
								}
								return console.warn("parse start error:", a, e, t), null
							},
							o = function(t, e = 0) {
								let a = n(t, e);
								if (a) return parseInt(a)
							};
						s.fontSize = o("size");
						var r = n("padding");
						s._padding = Tools.splitToNumber(r, ",");
						let l = a.indexOf("char "),
							c = 0;
						for (; l > 0;) {
							c++;
							var h = o("id", l),
								d = o("xoffset", l),
								_ = o("yoffset", l),
								g = o("xadvance", l),
								u = o("x", l),
								m = o("y", l),
								p = o("width", l),
								S = o("height", l),
								b = Laya.Texture.create(i, u, m, p, S, d, _);
							s._maxWidth = Math.max(s._maxWidth, g + s.letterSpacing), s._fontCharDic[h] = b, s._fontWidthMap[h] = g, l = a.indexOf("char ", l + "char ".length)
						}
						Logger.debug("load fnt char:", t, c), Laya.Text.registerBitmapFont(t, s), e && e()
					})
				}
			})
		}
	}
	mgrRes.retryCount = 0, mgrRes.loadingCallback = {}, mgrRes.webResCache = {};
	const SOUND_TYPE_MUSIC = 1,
		SOUND_TYPE_EFFECT = 2;
	let sound_url_map = Object.create(null),
		WTF = "wtf";
	class mgrSound extends _mgrBase {
		static get musicEnabled() {
			return 0 != this.musicVolume
		}
		static set musicEnabled(t) {
			this.musicVolume = t ? 1 : 0, this.saveRecord(), t ? this.resumeMusic() : this.pauseMusic()
		}
		static get soundEnabled() {
			return 0 != this.effectVolume
		}
		static set soundEnabled(t) {
			this.effectVolume = t ? 1 : 0, this.saveRecord(), t ? this.resumeEffect() : this.pauseEffect()
		}
		static onload() {
			this.loadRecord(), Laya.SoundManager.autoStopMusic = !0, this.loadRecord()
		}
		static loadRecord() {
			let t, e = FileRecord.getData("sound") || {};
			this.musicVolume = null != e.musicVolume ? e.musicVolume : 1, this.effectVolume = null != e.effectVolume ? e.effectVolume : 1, window && window.wx && window.wx.onShow && window.wx.onHide && (t = window.wx), window && window.swan && window.swan.onShow && window.swan.onHide && (t = window.swan), t && (console.log("=== 注册窗口消息, mgrsound ===="), t.onShow(() => {
				Laya.SoundManager.musicMuted = !0, Timer.callLater(.1, () => {
					Laya.SoundManager.musicMuted = !1
				})
			}), t.onHide(() => {})), this.setMusicVomue(this.musicVolume, !0), this.setEffectVolume(this.effectVolume, !0)
		}
		static saveRecord() {
			let t = {
				musicVolume: this.musicVolume,
				effectVolume: this.effectVolume
			};
			FileRecord.setData("sound", t)
		}
		static playMusic(t, e = !1) {
			Logger.debug("play music:", t), this.play(t, !0, e)
		}
		static playSound(t, e = !1) {
			this.play(t, !1, e)
		}
		static getPlayingMusicSoundId() {
			return this.playingMusicSoundId
		}
		static playTalk(t) {
			this._lastTalkId && this.stopSound(this._lastTalkId), this._lastTalkId = t, this.play(t, !1, !1)
		}
		static playSoundIfTimeout(t, e, a) {
			let i = this._lastSoundPlayTime[t];
			i && Timer.time - i < a || (this._lastSoundPlayTime[t] = Timer.time, this.playSound(t))
		}
		static play(t, e, a = !1) {
			if (e) {
				if (t == this.playingMusicSoundId) return;
				this.playingMusicSoundId = t;
				var i = `res/audio/${t}.mp3`;
				let e = () => {
					Logger.debug(`开始播放音乐:${i} ${this.musicVolume}`), Laya.SoundManager.playMusic(i, 0), !Laya.SoundManager.musicMuted && (this.bPlayedMusic = !0)
				};
				window.document && window.document.__custom_web_platform_tag__ ? mgrRes.loadRes(i, Laya.Loader.SOUND, t => {
					t && e()
				}) : e()
			} else {
				if (this.bLoadingEffect) return;
				i = this.getUrl(t);
				let e = () => {
					this.bLoadingEffect = !1, Laya.SoundManager.playSound(i, a ? 0 : 1)
				};
				window.document && window.document.__custom_web_platform_tag__ ? (this.bLoadingEffect = !0, mgrRes.loadRes(i, Laya.Loader.SOUND, t => {
					e()
				})) : e()
			}
		}
		static getUrl(t) {
			let e = sound_url_map[t];
			return e || (e = window.conch ? `res/audio/${t}.ogg` : `res/audio/${t}.mp3`, sound_url_map[t] = e), e
		}
		static stopAll() {
			this.playingMusicSoundId = null, Laya.SoundManager.stopAll()
		}
		static stopBgm() {
			Laya.SoundManager.stopMusic()
		}
		static stopSound(t) {
			Laya.SoundManager.stopSound(this.getUrl(t))
		}
		static stopSoundAll() {
			Laya.SoundManager.stopAllSound()
		}
		static pauseSound(t = WTF) {
			this.pauseMusic(t), this.pauseEffect(t)
		}
		static resumeSound(t = WTF) {
			this.resumeMusic(t), this.resumeEffect(t)
		}
		static pauseEffect(t = WTF) {
			console.info(`暂停音效:${t}`);
			let e = this.pauseEffectRouters.length > 0; - 1 == this.pauseEffectRouters.indexOf(t) && this.pauseEffectRouters.push(t), e || this.setEffectVolume(0)
		}
		static resumeEffect(t = WTF) {
			console.info(`恢复音效:${t}`);
			let e = this.pauseEffectRouters.indexOf(t);
			e >= 0 && this.pauseEffectRouters.splice(e, 1), this.pauseEffectRouters.length > 0 || this.setEffectVolume(1)
		}
		static pauseMusic(t = WTF) {
			console.info(`暂停背景音:${t} count:${this.pauseMusicRouters.length}`);
			let e = this.pauseMusicRouters.length > 0; - 1 == this.pauseMusicRouters.indexOf(t) && this.pauseMusicRouters.push(t), e || this.setMusicVomue(0)
		}
		static resumeMusic(t = WTF) {
			console.info(`恢复背景音:${t} count:${this.pauseMusicRouters.length}`);
			let e = this.pauseMusicRouters.indexOf(t);
			e >= 0 && this.pauseMusicRouters.splice(e, 1), this.pauseMusicRouters.length > 0 || this.setMusicVomue(1)
		}
		static getMusicVolmue() {
			return this.musicVolume
		}
		static setMusicVomue(t, e) {
			if (this.musicVolume = t, 0 == t ? Laya.SoundManager.setMusicVolume(1e-4) : Laya.SoundManager.setMusicVolume(t), window.swan || window.__b_jkw_platform__ || window.wx)
				if (0 == t) Laya.SoundManager.musicMuted = !0;
				else if (Laya.SoundManager.musicMuted = !1, !this.bPlayedMusic) {
				let t = this.playingMusicSoundId;
				this.playingMusicSoundId = null, this.playMusic(t)
			}
			this.saveRecord()
		}
		static getEffectVolume() {
			return this.effectVolume
		}
		static setEffectVolume(t, e) {
			this.effectVolume = t, 0 == t ? (Laya.SoundManager.setSoundVolume(.001), Laya.SoundManager.soundMuted = !0) : (Laya.SoundManager.setSoundVolume(t), Laya.SoundManager.soundMuted = !1), this.saveRecord()
		}
	}
	mgrSound.playingMusicSoundId = null, mgrSound.musicVolume = 1, mgrSound.effectVolume = 1, mgrSound.effectCd = .1, mgrSound.effectPlayStartTime = 0, mgrSound.pauseMusicRouters = [], mgrSound.pauseEffectRouters = [], mgrSound.bPlayedMusic = !1, mgrSound._lastSoundPlayTime = Object.create(null);
	let emtpy_fun = function() {};
	class UpdateCom extends Laya.Script {
		constructor() {
			super(...arguments), this.update = emtpy_fun, this.lateUpdate = emtpy_fun
		}
		onUpdate() {
			this.update()
		}
		onLateUpdate() {
			this.lateUpdate()
		}
	}
	const SYNC_TEST = !1;
	class AsyncObject {
		constructor(t) {
			this.delayCalls = [], this.destroyed = !1, this.context = null, this.context = t, this._isDisposed = !1, this._isLoaded = !1, this._isLoading = !1
		}
		get isDisposed() {
			return this._isDisposed
		}
		get isLoaded() {
			return this._isLoaded
		}
		get isLoading() {
			return this._isLoading
		}
		setContext(t) {
			this.context = t
		}
		create(t) {
			if (this._isLoaded) return void(t && t(!1));
			if (this._isLoading) return void(t && t(!1));
			if (!this.resourceName) return Logger.error("AsyncObject.create: can't find resourceName."), void(t && t(!1));
			this._isLoading = !0;
			let e = mgrRes.tryLoadRes(this.resourceName);
			e ? this.onResLoaded(e, t) : (Logger.debug("异步加载资源:", this.resourceName), mgrRes.loadRes(this.resourceName, this.resourceType, e => {
				SYNC_TEST ? Timer.callLater(30 * Math.random() + 20, () => {
					this.onResLoaded(e, t)
				}) : this.onResLoaded(e, t)
			}))
		}
		onResLoaded(t, e) {
			this._isLoading = !1, t ? (e && e(!0), this._isDisposed || (this._isLoaded = !0, this.onResourceLoaded(t), this._isDisposed || this.processDelayCalls())) : (e && e(!1), this.onResourceLoadedFail())
		}
		tryCreate() {
			this._isDisposed || this._isLoaded || this._isLoading || this.create()
		}
		onResourceLoadedFail() {
			this._isLoading = !1, this.clearDelayCalls()
		}
		pushDelayCall(t, e) {
			this.delayCalls.push({
				method: t,
				params: e
			})
		}
		callIfLoaded(t) {
			this.isDisposed || (this.isLoaded ? this.callDelayFunc(t) : this.pushDelayCall(this.callDelayFunc, [t]))
		}
		callDelayFunc(t) {
			t && t()
		}
		get callable() {
			return this._isLoaded && !this._isDisposed
		}
		logNotFinishError() {
			Logger.error("对象未加载完成")
		}
		safeCall(t, ...e) {
			this._isDisposed || (this._isLoaded ? t.apply(this, e) : this.pushDelayCall(t, e))
		}
		processDelayCalls() {
			let t = this.delayCalls,
				e = t.length;
			if (e > 0) {
				this.delayCalls = [];
				for (let a = 0; a < e; a++) {
					const e = t[a];
					e.method.apply(this, e.params)
				}
			}
		}
		clearDelayCalls() {
			this.delayCalls.length > 0 && (this.delayCalls.length = 0)
		}
		dispose() {
			this._isDisposed ? Logger.warn("AsyncObject has already disposed. resourceName:", this.resourceName) : (this.destroyed = !0, this._isDisposed = !0, this._isLoaded = !1, this.delayCalls = null)
		}
	}
	class Action {
		constructor() {
			this.originalTarget = null, this.target = null, this.tag = Action.TAG_INVALID
		}
		clone() {
			var t = new Action;
			return t.originalTarget = null, t.target = null, t.tag = this.tag, t
		}
		isDone() {
			return !0
		}
		startWithTarget(t) {
			this.originalTarget = t, this.target = t
		}
		stop() {
			this.target = null
		}
		step(t) {
			logID(1006)
		}
		update(t) {
			logID(1007)
		}
		getTarget() {
			return this.target
		}
		setTarget(t) {
			this.target = t
		}
		getOriginalTarget() {
			return this.originalTarget
		}
		setOriginalTarget(t) {
			this.originalTarget = t
		}
		getTag() {
			return this.tag
		}
		setTag(t) {
			this.tag = t
		}
		reverse() {
			return logID(1008), null
		}
		retain() {}
		release() {}
	}
	Action.TAG_INVALID = -1;
	class FiniteTimeAction extends Action {
		constructor() {
			super(...arguments), this._duration = 0, this._timesForRepeat = 1
		}
		getDuration() {
			return this._duration * (this._timesForRepeat || 1)
		}
		setDuration(t) {
			this._duration = t
		}
		clone() {
			return new FiniteTimeAction
		}
	}
	class Speed extends Action {
		constructor(t, e = 1) {
			super(), this._speed = 0, this._innerAction = null, t && this.initWithAction(t, e)
		}
		getSpeed() {
			return this._speed
		}
		setSpeed(t) {
			this._speed = t
		}
		initWithAction(t, e) {
			return t ? (this._innerAction = t, this._speed = e, !0) : (errorID(1021), !1)
		}
		clone() {
			var t = new Speed;
			return t.initWithAction(this._innerAction.clone(), this._speed), t
		}
		startWithTarget(t) {
			Action.prototype.startWithTarget.call(this, t), this._innerAction.startWithTarget(t)
		}
		stop() {
			this._innerAction.stop(), Action.prototype.stop.call(this)
		}
		step(t) {
			this._innerAction.step(t * this._speed)
		}
		isDone() {
			return this._innerAction.isDone()
		}
		reverse() {
			return new Speed(this._innerAction.reverse(), this._speed)
		}
		setInnerAction(t) {
			this._innerAction !== t && (this._innerAction = t)
		}
		getInnerAction() {
			return this._innerAction
		}
	}
	class ActionInstant extends FiniteTimeAction {
		isDone() {
			return !0
		}
		step(t) {
			this.update(1)
		}
		update(t) {}
		reverse() {
			return this.clone()
		}
		clone() {
			return new ActionInstant
		}
	}
	class Show extends ActionInstant {
		update(t) {
			this.target.setVisible(!0)
		}
		reverse() {
			return new Hide
		}
		clone() {
			return new Show
		}
	}

	function show() {
		return new Show
	}
	class Hide extends ActionInstant {
		update(t) {
			this.target.setVisible(!1)
		}
		reverse() {
			return new Show
		}
		clone() {
			return new Hide
		}
	}

	function hide() {
		return new Hide
	}
	class RemoveSelf extends ActionInstant {
		constructor(t) {
			super(), this._isNeedCleanUp = !0, void 0 !== t && this.init(t)
		}
		update(t) {
			this.target.removeSelf(), this._isNeedCleanUp && this.target.destroy()
		}
		init(t) {
			return this._isNeedCleanUp = t, !0
		}
		reverse() {
			return new RemoveSelf(this._isNeedCleanUp)
		}
		clone() {
			return new RemoveSelf(this._isNeedCleanUp)
		}
	}

	function removeSelf(t) {
		return new RemoveSelf(t)
	}
	class CallFunc extends ActionInstant {
		constructor(t, e, a) {
			super(), this._selectorTarget = null, this._function = null, this._data = null, this.initWithFunction(t, e, a)
		}
		initWithFunction(t, e, a) {
			return t && (this._function = t), e && (this._selectorTarget = e), void 0 !== a && (this._data = a), !0
		}
		execute() {
			this._function && this._function.call(this._selectorTarget, this.target, this._data)
		}
		update(t) {
			this.execute()
		}
		getTargetCallback() {
			return this._selectorTarget
		}
		setTargetCallback(t) {
			t !== this._selectorTarget && (this._selectorTarget && (this._selectorTarget = null), this._selectorTarget = t)
		}
		clone() {
			var t = new CallFunc;
			return t.initWithFunction(this._function, this._selectorTarget, this._data), t
		}
	}

	function callFunc(t, e, a) {
		return new CallFunc(t, e, a)
	}
	class ActionInterval extends FiniteTimeAction {
		constructor(t) {
			super(), this.MAX_VALUE = 2, this._elapsed = 0, this._firstTick = !1, this._easeList = [], this._speed = 1, this._repeatForever = !1, this._repeatMethod = !1, this._speedMethod = !1, void 0 === t || isNaN(t) || this.initWithDuration(t)
		}
		getElapsed() {
			return this._elapsed
		}
		initWithDuration(t) {
			return this._duration = 0 === t ? 1.192092896e-7 : t, this._elapsed = 0, this._firstTick = !0, !0
		}
		isDone() {
			return this._elapsed >= this._duration
		}
		_cloneDecoration(t) {
			t._repeatForever = this._repeatForever, t._speed = this._speed, t._timesForRepeat = this._timesForRepeat, t._easeList = this._easeList, t._speedMethod = this._speedMethod, t._repeatMethod = this._repeatMethod
		}
		_reverseEaseList(t) {
			if (this._easeList) {
				t._easeList = [];
				for (var e = 0; e < this._easeList.length; e++) t._easeList.push(this._easeList[e])
			}
		}
		clone() {
			var t = new ActionInterval(this._duration);
			return this._cloneDecoration(t), t
		}
		easing(...t) {
			this._easeList ? this._easeList.length = 0 : this._easeList = [];
			for (var e = 0; e < t.length; e++) this._easeList.push(t[e]);
			return this
		}
		_computeEaseTime(t) {
			var e = this._easeList;
			if (!e || 0 === e.length) return t;
			for (var a = 0, i = e.length; a < i; a++) t = e[a](t);
			return t
		}
		step(t) {
			this._firstTick ? (this._firstTick = !1, this._elapsed = 0) : this._elapsed += t;
			var e = this._elapsed / (this._duration > 1.192092896e-7 ? this._duration : 1.192092896e-7);
			e = 1 > e ? e : 1, this.update(e > 0 ? e : 0), this._repeatMethod && this._timesForRepeat > 1 && this.isDone() && (this._repeatForever || this._timesForRepeat--, this.startWithTarget(this.target), this.step(this._elapsed - this._duration))
		}
		startWithTarget(t) {
			Action.prototype.startWithTarget.call(this, t), this._elapsed = 0, this._firstTick = !0
		}
		reverse() {
			return logID(1010), this
		}
		setAmplitudeRate(t) {
			logID(1011)
		}
		getAmplitudeRate() {
			return logID(1012), 0
		}
		speed(t) {
			return t <= 0 ? (logID(1013), this) : (this._speedMethod = !0, this._speed *= t, this)
		}
		getSpeed() {
			return this._speed
		}
		setSpeed(t) {
			return this._speed = t, this
		}
		repeat(t) {
			return t = Math.round(t), isNaN(t) || t < 1 ? (logID(1014), this) : (this._repeatMethod = !0, this._timesForRepeat *= t, this)
		}
		repeatForever() {
			return this._repeatMethod = !0, this._timesForRepeat = this.MAX_VALUE, this._repeatForever = !0, this
		}
	}

	function actionInterval(t) {
		return new ActionInterval(t)
	}
	class Sequence extends ActionInterval {
		constructor(t) {
			super(), this._actions = [], this._split = 0, this._last = 0, this._reversed = !1;
			var e = t instanceof Array ? t : arguments;
			if (1 !== e.length) {
				var a = e.length - 1;
				if (a >= 0 && null == e[a] && logID(1015), a >= 0) {
					for (var i, s = e[0], n = 1; n < a; n++) e[n] && (i = s, s = Sequence._actionOneTwo(i, e[n]));
					this.initWithTwoActions(s, e[a])
				}
			} else errorID(1019)
		}
		initWithTwoActions(t, e) {
			if (!t || !e) return errorID(1025), !1;
			var a = t._duration,
				i = e._duration,
				s = (a *= t._repeatMethod ? t._timesForRepeat : 1) + (i *= e._repeatMethod ? e._timesForRepeat : 1);
			return this.initWithDuration(s), this._actions[0] = t, this._actions[1] = e, !0
		}
		clone() {
			var t = new Sequence;
			return this._cloneDecoration(t), t.initWithTwoActions(this._actions[0].clone(), this._actions[1].clone()), t
		}
		startWithTarget(t) {
			ActionInterval.prototype.startWithTarget.call(this, t), this._split = this._actions[0]._duration / this._duration, this._split *= this._actions[0]._repeatMethod ? this._actions[0]._timesForRepeat : 1, this._last = -1
		}
		stop() {
			-1 !== this._last && this._actions[this._last].stop(), Action.prototype.stop.call(this)
		}
		update(t) {
			var e, a, i = 0,
				s = this._split,
				n = this._actions,
				o = this._last;
			(t = this._computeEaseTime(t)) < s ? (e = 0 !== s ? t / s : 1, 0 === i && 1 === o && this._reversed && (n[1].update(0), n[1].stop())) : (i = 1, e = 1 === s ? 1 : (t - s) / (1 - s), -1 === o && (n[0].startWithTarget(this.target), n[0].update(1), n[0].stop()), 0 === o && (n[0].update(1), n[0].stop())), a = n[i], o === i && a.isDone() || (o !== i && a.startWithTarget(this.target), e *= a._timesForRepeat, a.update(e > 1 ? e % 1 : e), this._last = i)
		}
		reverse() {
			var t = Sequence._actionOneTwo(this._actions[1].reverse(), this._actions[0].reverse());
			return this._cloneDecoration(t), this._reverseEaseList(t), t._reversed = !0, t
		}
	}

	function sequence(t) {
		var e = t instanceof Array ? t : arguments;
		if (1 === e.length) return errorID(1019), null;
		var a = e.length - 1;
		a >= 0 && null == e[a] && logID(1015);
		var i = null;
		if (a >= 0) {
			i = e[0];
			for (var s = 1; s <= a; s++) e[s] && (i = Sequence._actionOneTwo(i, e[s]))
		}
		return i
	}
	Sequence._actionOneTwo = function(t, e) {
		var a = new Sequence;
		return a.initWithTwoActions(t, e), a
	};
	class Repeat extends ActionInterval {
		constructor(t, e) {
			super(), this._times = 0, this._total = 0, this._nextDt = 0, this._actionInstant = !1, this._innerAction = null, void 0 !== e && this.initWithAction(t, e)
		}
		initWithAction(t, e) {
			var a = t._duration * e;
			return !!this.initWithDuration(a) && (this._times = e, this._innerAction = t, t instanceof ActionInstant && (this._actionInstant = !0, this._times -= 1), this._total = 0, !0)
		}
		clone() {
			var t = new Repeat;
			return this._cloneDecoration(t), t.initWithAction(this._innerAction.clone(), this._times), t
		}
		startWithTarget(t) {
			this._total = 0, this._nextDt = this._innerAction._duration / this._duration, ActionInterval.prototype.startWithTarget.call(this, t), this._innerAction.startWithTarget(t)
		}
		stop() {
			this._innerAction.stop(), Action.prototype.stop.call(this)
		}
		update(t) {
			t = this._computeEaseTime(t);
			var e = this._innerAction,
				a = this._duration,
				i = this._times,
				s = this._nextDt;
			if (t >= s) {
				for (; t > s && this._total < i;) e.update(1), this._total++, e.stop(), e.startWithTarget(this.target), s += e._duration / a, this._nextDt = s > 1 ? 1 : s;
				t >= 1 && this._total < i && (e.update(1), this._total++), this._actionInstant || (this._total === i ? e.stop() : e.update(t - (s - e._duration / a)))
			} else e.update(t * i % 1)
		}
		isDone() {
			return this._total === this._times
		}
		reverse() {
			var t = new Repeat(this._innerAction.reverse(), this._times);
			return this._cloneDecoration(t), this._reverseEaseList(t), t
		}
		setInnerAction(t) {
			this._innerAction !== t && (this._innerAction = t)
		}
		getInnerAction() {
			return this._innerAction
		}
	}

	function repeat(t, e) {
		return new Repeat(t, e)
	}
	class RepeatForever extends ActionInterval {
		constructor(t) {
			super(), this._innerAction = null, t && this.initWithAction(t)
		}
		initWithAction(t) {
			return t ? (this._innerAction = t, !0) : (errorID(1026), !1)
		}
		clone() {
			var t = new RepeatForever;
			return this._cloneDecoration(t), t.initWithAction(this._innerAction.clone()), t
		}
		startWithTarget(t) {
			ActionInterval.prototype.startWithTarget.call(this, t), this._innerAction.startWithTarget(t)
		}
		step(t) {
			var e = this._innerAction;
			e.step(t), e.isDone() && (e.startWithTarget(this.target), e.step(e.getElapsed() - e._duration))
		}
		isDone() {
			return !1
		}
		reverse() {
			var t = new RepeatForever(this._innerAction.reverse());
			return this._cloneDecoration(t), this._reverseEaseList(t), t
		}
		setInnerAction(t) {
			this._innerAction !== t && (this._innerAction = t)
		}
		getInnerAction() {
			return this._innerAction
		}
	}

	function repeatForever(t) {
		return new RepeatForever(t)
	}
	class Spawn extends ActionInterval {
		constructor(t) {
			super(), this._one = null, this._two = null;
			var e = t instanceof Array ? t : arguments;
			if (1 !== e.length) {
				var a = e.length - 1;
				if (a >= 0 && null == e[a] && logID(1015), a >= 0) {
					for (var i, s = e[0], n = 1; n < a; n++) e[n] && (i = s, s = Spawn._actionOneTwo(i, e[n]));
					this.initWithTwoActions(s, e[a])
				}
			} else errorID(1020)
		}
		initWithTwoActions(t, e) {
			if (!t || !e) return errorID(1027), !1;
			var a = !1,
				i = t._duration,
				s = e._duration;
			return this.initWithDuration(Math.max(i, s)) && (this._one = t, this._two = e, i > s ? this._two = Sequence._actionOneTwo(e, delayTime(i - s)) : i < s && (this._one = Sequence._actionOneTwo(t, delayTime(s - i))), a = !0), a
		}
		clone() {
			var t = new Spawn;
			return this._cloneDecoration(t), t.initWithTwoActions(this._one.clone(), this._two.clone()), t
		}
		startWithTarget(t) {
			ActionInterval.prototype.startWithTarget.call(this, t), this._one.startWithTarget(t), this._two.startWithTarget(t)
		}
		stop() {
			this._one.stop(), this._two.stop(), Action.prototype.stop.call(this)
		}
		update(t) {
			t = this._computeEaseTime(t), this._one && this._one.update(t), this._two && this._two.update(t)
		}
		reverse() {
			var t = Spawn._actionOneTwo(this._one.reverse(), this._two.reverse());
			return this._cloneDecoration(t), this._reverseEaseList(t), t
		}
	}

	function spawn(t) {
		var e = t instanceof Array ? t : arguments;
		if (1 === e.length) return errorID(1020), null;
		e.length > 0 && null == e[e.length - 1] && logID(1015);
		for (var a = e[0], i = 1; i < e.length; i++) null != e[i] && (a = Spawn._actionOneTwo(a, e[i]));
		return a
	}
	Spawn._actionOneTwo = function(t, e) {
		var a = new Spawn;
		return a.initWithTwoActions(t, e), a
	};
	class DelayTime extends ActionInterval {
		update(t) {}
		reverse() {
			var t = new DelayTime(this._duration);
			return this._cloneDecoration(t), this._reverseEaseList(t), t
		}
		clone() {
			var t = new DelayTime;
			return this._cloneDecoration(t), t.initWithDuration(this._duration), t
		}
	}

	function delayTime(t) {
		return new DelayTime(t)
	}
	class ReverseTime extends ActionInterval {
		constructor(t) {
			super(), this._other = null, t && this.initWithAction(t)
		}
		initWithAction(t) {
			return t ? t === this._other ? (errorID(1029), !1) : !!ActionInterval.prototype.initWithDuration.call(this, t._duration) && (this._other = t, !0) : (errorID(1028), !1)
		}
		clone() {
			var t = new ReverseTime;
			return this._cloneDecoration(t), t.initWithAction(this._other.clone()), t
		}
		startWithTarget(t) {
			ActionInterval.prototype.startWithTarget.call(this, t), this._other.startWithTarget(t)
		}
		update(t) {
			t = this._computeEaseTime(t), this._other && this._other.update(1 - t)
		}
		reverse() {
			return this._other.clone()
		}
		stop() {
			this._other.stop(), Action.prototype.stop.call(this)
		}
	}

	function reverseTime(t) {
		return new ReverseTime(t)
	}
	var Easing;

	function TweenEasinAdapter(t) {
		let e = t.charAt(0);
		if (/[A-Z]/.test(e)) {
			const a = (t = t.replace(e, e.toLowerCase())).split("-");
			if (2 == a.length) {
				const e = a[0];
				if ("linear" == e) t = "linear";
				else {
					const i = a[1];
					switch (e) {
						case "quadratic":
							t = "quad" + i;
							break;
						case "quartic":
							t = "quart" + i;
							break;
						case "quintic":
							t = "quint" + i;
							break;
						case "sinusoidal":
							t = "sine" + i;
							break;
						case "exponential":
							t = "expo" + i;
							break;
						case "circular":
							t = "circ" + i;
							break;
						default:
							t = e + i
					}
				}
			}
		}
		return t
	}

	function TweenOptionChecker(t) {}! function(t) {
		function quadIn(t) {
			return t * t
		}

		function quadOut(t) {
			return t * (2 - t)
		}

		function cubicIn(t) {
			return t * t * t
		}

		function cubicOut(t) {
			return --t * t * t + 1
		}

		function quartIn(t) {
			return t * t * t * t
		}

		function quartOut(t) {
			return 1 - --t * t * t * t
		}

		function quintIn(t) {
			return t * t * t * t * t
		}

		function quintOut(t) {
			return --t * t * t * t * t + 1
		}

		function sineIn(t) {
			return 1 - Math.cos(t * Math.PI / 2)
		}

		function sineOut(t) {
			return Math.sin(t * Math.PI / 2)
		}

		function expoIn(t) {
			return 0 === t ? 0 : Math.pow(1024, t - 1)
		}

		function expoOut(t) {
			return 1 === t ? 1 : 1 - Math.pow(2, -10 * t)
		}

		function circIn(t) {
			return 1 - Math.sqrt(1 - t * t)
		}

		function circOut(t) {
			return Math.sqrt(1 - --t * t)
		}

		function elasticIn(t) {
			let e, a = .1;
			return 0 === t ? 0 : 1 === t ? 1 : (!a || a < 1 ? (a = 1, e = .1) : e = .4 * Math.asin(1 / a) / (2 * Math.PI), -a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4))
		}

		function elasticOut(t) {
			let e, a = .1;
			return 0 === t ? 0 : 1 === t ? 1 : (!a || a < 1 ? (a = 1, e = .1) : e = .4 * Math.asin(1 / a) / (2 * Math.PI), a * Math.pow(2, -10 * t) * Math.sin((t - e) * (2 * Math.PI) / .4) + 1)
		}

		function backIn(t) {
			const e = 1.70158;
			return t * t * ((e + 1) * t - e)
		}

		function backOut(t) {
			const e = 1.70158;
			return --t * t * ((e + 1) * t + e) + 1
		}

		function bounceIn(t) {
			return 1 - bounceOut(1 - t)
		}

		function bounceOut(t) {
			return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375
		}

		function _makeOutIn(t, e) {
			return a => a < .5 ? e(2 * a) / 2 : t(2 * a - 1) / 2 + .5
		}
		t.constant = function() {
			return 0
		}, t.linear = function(t) {
			return t
		}, t.quadIn = quadIn, t.quadOut = quadOut, t.quadInOut = function(t) {
			return (t *= 2) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1)
		}, t.cubicIn = cubicIn, t.cubicOut = cubicOut, t.cubicInOut = function(t) {
			return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2)
		}, t.quartIn = quartIn, t.quartOut = quartOut, t.quartInOut = function(t) {
			return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2)
		}, t.quintIn = quintIn, t.quintOut = quintOut, t.quintInOut = function(t) {
			return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2)
		}, t.sineIn = sineIn, t.sineOut = sineOut, t.sineInOut = function(t) {
			return .5 * (1 - Math.cos(Math.PI * t))
		}, t.expoIn = expoIn, t.expoOut = expoOut, t.expoInOut = function(t) {
			return 0 === t ? 0 : 1 === t ? 1 : (t *= 2) < 1 ? .5 * Math.pow(1024, t - 1) : .5 * (2 - Math.pow(2, -10 * (t - 1)))
		}, t.circIn = circIn, t.circOut = circOut, t.circInOut = function(t) {
			return (t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1)
		}, t.elasticIn = elasticIn, t.elasticOut = elasticOut, t.elasticInOut = function(t) {
			let e, a = .1;
			return 0 === t ? 0 : 1 === t ? 1 : (!a || a < 1 ? (a = 1, e = .1) : e = .4 * Math.asin(1 / a) / (2 * Math.PI), (t *= 2) < 1 ? a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4) * -.5 : a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4) * .5 + 1)
		}, t.backIn = backIn, t.backOut = backOut, t.backInOut = function(t) {
			const e = 2.5949095;
			return (t *= 2) < 1 ? t * t * ((e + 1) * t - e) * .5 : .5 * ((t -= 2) * t * ((e + 1) * t + e) + 2)
		}, t.bounceIn = bounceIn, t.bounceOut = bounceOut, t.bounceInOut = function(t) {
			return t < .5 ? .5 * bounceIn(2 * t) : .5 * bounceOut(2 * t - 1) + .5
		}, t.smooth = function(t) {
			return t <= 0 ? 0 : t >= 1 ? 1 : t * t * (3 - 2 * t)
		}, t.fade = function(t) {
			return t <= 0 ? 0 : t >= 1 ? 1 : t * t * t * (t * (6 * t - 15) + 10)
		}, t.quadOutIn = _makeOutIn(quadIn, quadOut), t.cubicOutIn = _makeOutIn(cubicIn, cubicOut), t.quartOutIn = _makeOutIn(quartIn, quartOut), t.quintOutIn = _makeOutIn(quintIn, quintOut), t.sineOutIn = _makeOutIn(sineIn, sineOut), t.expoOutIn = _makeOutIn(expoIn, expoOut), t.circOutIn = _makeOutIn(circIn, circOut), t.elasticOutIn = _makeOutIn(elasticIn, elasticOut), t.backOutIn = _makeOutIn(backIn, backOut), t.bounceOutIn = _makeOutIn(bounceIn, bounceOut)
	}(Easing || (Easing = {}));
	class TweenAction extends ActionInterval {
		constructor(t, e, a) {
			if (super(), null == a) a = TweenAction.EMPTY_OPTION;
			else if (TweenOptionChecker(a), a.easing && "string" == typeof a.easing && (a.easing = TweenEasinAdapter(a.easing)), a.progress || (a.progress = this.progress), a.easing && "string" == typeof a.easing) {
				let t = a.easing;
				a.easing = Easing[t], a.easing || warnID(1031, t)
			}
			this._opts = a, this._props = Object.create(null);
			for (let t in e) {
				let a, i, s = e[t];
				void 0 !== s.value && (s.easing || s.progress) && ("string" == typeof s.easing ? !(a = a[s.easing]) && warnID(1031, s.easing) : a = s.easing, i = s.progress, s = s.value);
				let n = Object.create(null);
				n.value = s, n.easing = a, n.progress = i, this._props[t] = n
			}
			this._originProps = e, this.initWithDuration(t)
		}
		clone() {
			var t = new TweenAction(this._duration, this._originProps, this._opts);
			return this._cloneDecoration(t), t
		}
		startWithTarget(t) {
			super.startWithTarget(t);
			const e = !!this._opts.relative,
				a = this._props;
			for (var i in a) {
				const n = t[i];
				if (void 0 === n) continue;
				const o = a[i],
					r = o.value;
				if ("number" == typeof n) o.start = n, o.current = n, o.end = e ? n + r : r;
				else if ("object" == typeof n)
					for (var s in null == o.start && (o.start = {}, o.current = {}, o.end = {}), r) o.start[s] = n[s], o.current[s] = n[s], o.end[s] = e ? n[s] + r[s] : r[s]
			}
			this._opts.onStart && this._opts.onStart(this.target)
		}
		update(t) {
			const e = this.target;
			if (!e || e.destroyed) return;
			const a = this._props,
				i = this._opts;
			let s = t;
			i.easing && (s = i.easing(t));
			let n = i.progress;
			for (const i in a) {
				let o = a[i],
					r = o.easing ? o.easing(t) : s,
					l = o.progress ? o.progress : n;
				const c = o.start,
					h = o.end;
				if ("number" == typeof c) o.current = l(c, h, o.current, r);
				else if ("object" == typeof c)
					for (const t in c) o.current[t] = l(c[t], h[t], o.current[t], r);
				e[i] = o.current
			}
			i.onUpdate && i.onUpdate(this.target, t), 1 == t && i.onComplete && i.onComplete(this.target)
		}
		progress(t, e, a, i) {
			return t + (e - t) * i
		}
	}
	TweenAction.EMPTY_OPTION = Object.create(null);
	class SetAction extends ActionInstant {
		constructor(t) {
			super(), this._props = {}, void 0 !== t && this.init(t)
		}
		init(t) {
			for (let e in t) this._props[e] = t[e];
			return !0
		}
		update() {
			let t = this._props,
				e = this.target;
			for (let a in t) e[a] = t[a]
		}
		clone() {
			var t = new SetAction;
			return t.init(this._props), t
		}
	}
	let _default_progress = function(t, e, a, i) {
			return t + (e - t) * i
		},
		DEFAULT_OPT1 = {
			easing: Easing.linear,
			progress: _default_progress
		},
		DEFAULT_OPT2 = {
			easing: Easing.linear,
			progress: _default_progress
		};
	class Tween {
		constructor(t) {
			this._actions = [], this._finalAction = null, this._target = null, this._target = void 0 === t ? null : t, this._target && this._target instanceof Laya.EventDispatcher && this._target.on("NODE_DESTROYED", this, this._destroy)
		}
		then(t) {
			return t instanceof Action ? this._actions.push(t) : this._actions.push(t._union()), this
		}
		target(t) {
			return this._target && this._target instanceof Laya.EventDispatcher && this._target.off("NODE_DESTROYED", this, this._destroy), this._target = t, this._target && this._target instanceof Laya.EventDispatcher && this._target.on("NODE_DESTROYED", this, this._destroy), this
		}
		start() {
			return this._target ? (this._finalAction && TweenSystem.instance.ActionManager.removeAction(this._finalAction), this._finalAction = this._union(), TweenSystem.instance.ActionManager.addAction(this._finalAction, this._target, !1), this) : (console.warn("Please set target to tween first"), this)
		}
		stop() {
			return this._finalAction && TweenSystem.instance.ActionManager.removeAction(this._finalAction), this
		}
		clone(t) {
			let e = this._union();
			return new Tween(t).then(e.clone())
		}
		union() {
			let t = this._union();
			return this._actions.length = 0, this._actions.push(t), this
		}
		to(t, e, a) {
			(a = a || DEFAULT_OPT1).relative = !1;
			const i = new TweenAction(t, e, a);
			return this._actions.push(i), this
		}
		by(t, e, a) {
			(a = a || DEFAULT_OPT2).relative = !0;
			const i = new TweenAction(t, e, a);
			return this._actions.push(i), this
		}
		set(t) {
			const e = new SetAction(t);
			return this._actions.push(e), this
		}
		delay(t) {
			const e = delayTime(t);
			return this._actions.push(e), this
		}
		call(t) {
			const e = callFunc(t);
			return this._actions.push(e), this
		}
		sequence(...t) {
			const e = Tween._wrappedSequence(...t);
			return this._actions.push(e), this
		}
		parallel(...t) {
			const e = Tween._wrappedParallel(...t);
			return this._actions.push(e), this
		}
		repeat(t, e) {
			if (t == 1 / 0) return this.repeatForever(e);
			const a = this._actions;
			let i;
			return i = e ? e._union() : a.pop(), a.push(repeat(i, t)), this
		}
		repeatForever(t) {
			const e = this._actions;
			let a;
			return a = t ? t._union() : e.pop(), e.push(repeatForever(a)), this
		}
		reverseTime(t) {
			const e = this._actions;
			let a;
			return a = t instanceof Tween ? t._union() : e.pop(), e.push(reverseTime(a)), this
		}
		hide() {
			let t = hide();
			return this._actions.push(t), this
		}
		show() {
			let t = show();
			return this._actions.push(t), this
		}
		removeSelf(t = !1) {
			let e = removeSelf(t);
			return this._actions.push(e), this
		}
		_union() {
			let t, e = this._actions;
			return t = 1 === e.length ? e[0] : sequence(e)
		}
		_destroy() {
			this.stop()
		}
		static _wrappedSequence(...t) {
			const e = Tween._tmp_args;
			e.length = 0;
			for (let a = t.length, i = 0; i < a; i++) {
				let a = e[i] = t[i];
				a instanceof Tween && (e[i] = a._union())
			}
			return sequence.apply(sequence, e)
		}
		static _wrappedParallel(...t) {
			const e = Tween._tmp_args;
			e.length = 0;
			for (let a = t.length, i = 0; i < a; i++) {
				let a = e[i] = t[i];
				a instanceof Tween && (e[i] = a._union())
			}
			return spawn.apply(spawn, e)
		}
	}
	Tween._tmp_args = [];
	class JumpBy extends ActionInterval {
		constructor(t, e, a, i, s) {
			super(), this._previousPosition = new Vec2(0, 0), this._startPosition = new Vec2(0, 0), this._delta = new Vec2(0, 0), this._height = 0, this._jumps = 0, void 0 !== i && this.initWithDuration(t, e, a, i, s)
		}
		initWithDuration(t, e, a, i, s) {
			return !!super.initWithDuration(t) && (this._delta.x = e, this._delta.y = a, this._height = i, this._jumps = s, !0)
		}
		clone() {
			var t = new JumpBy;
			return this._cloneDecoration(t), t.initWithDuration(this._duration, this._delta.x, this._delta.y, this._height, this._jumps), t
		}
		startWithTarget(t) {
			super.startWithTarget(t);
			var e = t.x,
				a = t.y;
			this._previousPosition.x = e, this._previousPosition.y = a, this._startPosition.x = e, this._startPosition.y = a
		}
		update(t) {
			t = this._computeEaseTime(t);
			let e = this.target;
			if (e) {
				var a = t * this._jumps % 1,
					i = 4 * this._height * a * (1 - a);
				i += this._delta.y * t;
				var s = this._delta.x * t,
					n = this._startPosition;
				e.pos(n.x + s, n.y + i, !0)
			}
		}
		reverse() {
			var t = new JumpBy(this._duration, -this._delta.x, -this._delta.y, this._height, this._jumps);
			return this._cloneDecoration(t), this._reverseEaseList(t), t
		}
	}
	class JumpTo extends JumpBy {
		constructor(t, e, a, i, s) {
			super(), this._endPosition = new Vec2(0, 0), void 0 !== i && this.initWithDuration(t, e, a, i, s)
		}
		initWithDuration(t, e, a, i, s) {
			return !!super.initWithDuration(t, e, a, i, s) && (this._endPosition.x = e, this._endPosition.y = a, !0)
		}
		startWithTarget(t) {
			super.startWithTarget(t), this._delta.x = this._endPosition.x - this._startPosition.x, this._delta.y = this._endPosition.y - this._startPosition.y
		}
		clone() {
			var t = new JumpTo;
			return this._cloneDecoration(t), t.initWithDuration(this._duration, this._endPosition.x, this._endPosition.y, this._height, this._jumps), t
		}
	}
	let default_number_formater = function(t) {
		return (0 | t).toString()
	};
	class NumberTo extends ActionInterval {
		constructor(t, e, a, i) {
			super(), this._from = e, this._to = a, this._formater = i || default_number_formater, this.initWithDuration(t)
		}
		clone() {
			var t = new NumberTo(this._duration, this._from, this._to, this._formater);
			return this._cloneDecoration(t), t
		}
		initWithDuration(t) {
			return !!super.initWithDuration(t)
		}
		startWithTarget(t) {
			super.startWithTarget(t), this.m_label = t
		}
		update(t) {
			if (this.m_label) {
				t = this._computeEaseTime(t);
				let e = this._from + (this._to - this._from) * t;
				this.m_label.text = this._formater(e)
			}
		}
	}
	class StringOneByOne extends ActionInterval {
		constructor(t, e) {
			super(), this._text = e, this.initWithDuration(t)
		}
		clone() {
			var t = new StringOneByOne(this._duration, this._text);
			return this._cloneDecoration(t), t
		}
		update(t) {
			let e = this.target;
			if (e) {
				t = this._computeEaseTime(t);
				let a = Math.floor(Mathf.lerp(0, this._text.length, t));
				e.text = this._text.substring(0, a)
			}
		}
	}
	class Follow3DTo2D extends ActionInterval {
		constructor(t, e, a, i = 0, s = 0) {
			super(), this._followTarget = e, this._orthographicCamera = a, this._offsetX = i, this._offsetY = s, t <= 0 && (t = 1e8), this.initWithDuration(t)
		}
		clone() {
			var t = new Follow3DTo2D(this._duration, this._followTarget, this._orthographicCamera);
			return this._cloneDecoration(t), t
		}
		update(t) {
			let e = this.target;
			if (e) {
				let t = this._followTarget;
				if (t && !t.destroyed) {
					let a = Laya.Point.TEMP;
					a.setTo(this._offsetX + t.pivotX, this._offsetY + t.pivotY), t.localToGlobal(a, !1);
					let i = Mathf.TEMP_VEC3;
					i.setValue(a.x, a.y, 0), this._orthographicCamera.convertScreenCoordToOrthographicCoord(i, i), e.transform.position = i
				}
			}
		}
	}

	function bezierAt(t, e, a, i, s) {
		return Math.pow(1 - s, 3) * t + 3 * s * Math.pow(1 - s, 2) * e + 3 * Math.pow(s, 2) * (1 - s) * a + Math.pow(s, 3) * i
	}
	class BezierBy extends ActionInterval {
		constructor(t, e) {
			super(), this._config = [], this._startPosition = new Vec2, this._previousPosition = new Vec2, e && this.initWithDuration(t, e)
		}
		initWithDuration(t, e) {
			return !!super.initWithDuration(t) && (this._config = e, !0)
		}
		clone() {
			var t = new BezierBy;
			this._cloneDecoration(t);
			for (var e = [], a = 0; a < this._config.length; a++) {
				var i = this._config[a];
				e.push(new Vec2(i.x, i.y))
			}
			return t.initWithDuration(this._duration, e), t
		}
		startWithTarget(t) {
			super.startWithTarget(t);
			var e = t.x,
				a = t.y;
			this._previousPosition.x = e, this._previousPosition.y = a, this._startPosition.x = e, this._startPosition.y = a
		}
		update(t) {
			if (t = this._computeEaseTime(t), this.target) {
				var e = this.target,
					a = this._config,
					i = a[0].x,
					s = a[1].x,
					n = a[2].x,
					o = a[0].y,
					r = a[1].y,
					l = a[2].y,
					c = bezierAt(0, i, s, n, t),
					h = bezierAt(0, o, r, l, t),
					d = this._startPosition;
				e.pos(d.x + c, d.y + h, !0)
			}
		}
		reverse() {
			var t = this._config,
				e = t[0].x,
				a = t[0].y,
				i = t[1].x,
				s = t[1].y,
				n = t[2].x,
				o = t[2].y,
				r = [new Vec2(i - n, s - o), new Vec2(e - n, a - o), new Vec2(-n, -o)],
				l = new BezierBy(this._duration, r);
			return this._cloneDecoration(l), this._reverseEaseList(l), l
		}
	}
	class BezierTo extends ActionInterval {
		constructor(t, e, a = 5, i = 2) {
			super(), this.initWithDuration(t, e, a, i)
		}
		initWithDuration(t, e, a, i) {
			if (super.initWithDuration(t)) {
				let t = (new Laya.Bezier).getBezierPoints(e, a, i);
				this._path = t;
				let n = 0;
				for (var s = 0; s < t.length - 2; s += 2) n += Mathf.distance2(t[s] - t[s + 2], t[s + 1] - t[s + 3]);
				return !0
			}
			return !1
		}
		clone() {
			return console.error("暂无clone实现，偷懒而已"), null
		}
		startWithTarget(t) {
			super.startWithTarget(t)
		}
		update(t) {
			if (t = this._computeEaseTime(t), this.target) {
				var e = Vec2.TEMP;
				BezierTo.lerpPath(this._path, t, e), this.target.pos(e.x, e.y, !0)
			}
		}
		reverse() {
			return console.error("暂无reverse实现，偷懒而已"), null
		}
		static lerpPath(t, e, a) {
			if (0 != t.length) {
				if (e = Mathf.clamp01(e), null == a && (a = new Vec2(0, 0)), 0 == e) a.setValue(t[0], t[1]);
				else if (1 == e) a.setValue(t[t.length - 2], t[t.length - 1]);
				else {
					let i = (t.length / 2 - 1) * e,
						s = 0 | i,
						n = Math.ceil(i);
					s != n ? (a.x = Mathf.lerp(t[2 * s], t[2 * n], i - s), a.y = Mathf.lerp(t[2 * s + 1], t[2 * n + 1], i - s)) : a.setValue(t[2 * n], t[2 * n + 1])
				}
				return a
			}
		}
	}
	class LookAt extends ActionInterval {
		constructor(t, e) {
			super(), this.looAtTarget = e, this.lookAtPos = new Laya.Vector3, t <= 0 && (t = 1e8), this.initWithDuration(t)
		}
		startWithTarget(t) {
			super.startWithTarget(t);
			let e = Mathf.TEMP_VEC3;
			t.transform.getForward(e), Laya.Vector3.normalize(e, e);
			let a = Laya.Vector3.distance(t.transform.position, this.looAtTarget.transform.position);
			Laya.Vector3.scale(e, a, e), Laya.Vector3.add(t.transform.position, e, this.lookAtPos)
		}
		clone() {
			var t = new LookAt(this._duration, this.looAtTarget);
			return this._cloneDecoration(t), t
		}
		update(t) {
			let e = this.target;
			if (e) {
				let t = this.looAtTarget;
				t && !t.destroyed && (Laya.Vector3.lerp(this.lookAtPos, t.transform.position, .1, this.lookAtPos), e.transform.lookAt(this.lookAtPos, LookAt.UP, !1))
			}
		}
	}
	LookAt.UP = new Laya.Vector3(0, 1, 0);
	class Follow3D extends ActionInterval {
		constructor(t, e, a = 0) {
			super(), this.followTarget = e, this.distance = a, this.originPos = new Laya.Vector3, t <= 0 && (t = 1e8), this.initWithDuration(t)
		}
		startWithTarget(t) {
			super.startWithTarget(t), this.distance <= 0 && (this.distance = Laya.Vector3.distance(t.transform.position, this.followTarget.transform.position)), t.transform.position.cloneTo(this.originPos)
		}
		clone() {
			var t = new Follow3D(this._duration, this.followTarget, this.distance);
			return this._cloneDecoration(t), t
		}
		update(t) {
			let e = this.target;
			if (e) {
				let t = this.followTarget;
				t && !t.destroyed && (Laya.Vector3.lerp(this.originPos, t.transform.position, .1, this.originPos), e.transform.position = this.originPos)
			}
		}
	}
	Follow3D.UP = new Laya.Vector3(0, 1, 0);
	class Follow2D extends ActionInterval {
		constructor(t, e, a) {
			super(), this.followTarget = e, this.offset = a || new Laya.Point, t <= 0 && (t = 1e8), this.initWithDuration(t)
		}
		startWithTarget(t) {
			super.startWithTarget(t)
		}
		clone() {
			var t = new Follow2D(this._duration, this.followTarget, this.offset);
			return this._cloneDecoration(t), t
		}
		update(t) {
			let e = this.target;
			if (e) {
				let t = this.followTarget;
				if (t && !t.destroyed) {
					let a = Follow2D.temp_point;
					a.setTo(this.offset.x, this.offset.y), t.localToGlobal(a, !1), e.parent && (e.parent.globalToLocal(a, !1), e.pos(Mathf.lerp(e.x, a.x, .1), Mathf.lerp(e.y, a.y, .1), !0))
				}
			}
		}
	}
	var cc;
	Follow2D.temp_point = new Laya.Point,
		function(t) {
			function clearTween(t) {
				TweenSystem.instance.ActionManager.removeAllActionsFromTarget(t)
			}

			function bezierTo(t, e, a) {
				return new BezierTo(t, e, a, e.length / 2 - 1)
			}
			t.tween = function(t, e = !1) {
				return e && clearTween(t), new Tween(t)
			}, t.clearTween = clearTween, t.Ease = Easing, t.jumpBy = function(t, e, a, i, s) {
				return new JumpBy(t, e, a, -i, s)
			}, t.jumpTo = function(t, e, a, i, s) {
				return new JumpTo(t, e, a, -i, s)
			}, t.numberTo = function(t, e, a, i) {
				return new NumberTo(t, e, a, i)
			}, t.stringOneByOne = function(t, e) {
				return new StringOneByOne(t, e)
			}, t.lookAt = function(t, e) {
				return new LookAt(t, e)
			}, t.bezierTo = bezierTo, t.bezierFromTo = function(t, e, a, i = .5) {
				let s = Mathf.distance(e, a) * i,
					n = Mathf.random(200 * Math.PI) / 100,
					o = Math.cos(n) * s,
					r = Math.sin(n) * s;
				return bezierTo(t, [e.x, e.y, e.x + o, e.y + r, a.x, a.y], 10)
			}, t.follow2d = function(t, e = 0, a) {
				return new Follow2D(e, t, a)
			}, t.PROP = {
				EMPTY: {},
				SCALE0: {
					scaleX: 0,
					scaleY: 0
				},
				SCALE1: {
					scaleX: 1,
					scaleY: 1
				},
				SCALE1_2: {
					scaleX: 1.2,
					scaleY: 1.2
				},
				SCALE1_3: {
					scaleX: 1.3,
					scaleY: 1.3
				},
				ALPHA0: {
					alpha: 0
				},
				ALPHA1: {
					alpha: 1
				},
				SCALE_ALPHA0: {
					scaleX: 0,
					scaleY: 0,
					alpha: 0
				},
				SCALE_ALPHA1: {
					scaleX: 1,
					scaleY: 1,
					alpha: 1
				}
			}, t.OPTION = {
				BACK_OUT: {
					easing: Easing.backOut
				},
				BACK_IN: {
					easing: Easing.backIn
				},
				SINE_IN: {
					easing: Easing.sineIn
				},
				SINE_OUT: {
					easing: Easing.sineOut
				},
				SINE_IN_OUT: {
					easing: Easing.sineInOut
				},
				SINE_OUT_IN: {
					easing: Easing.sineOutIn
				},
				CIRC_IN: {
					easing: Easing.circIn
				},
				CIRC_OUT: {
					easing: Easing.circOut
				},
				EXPO_IN: {
					easing: Easing.expoIn
				},
				EXPO_OUT: {
					easing: Easing.expoOut
				},
				CUBIC_IN: {
					easing: Easing.cubicIn
				},
				CUBIC_OUT: {
					easing: Easing.cubicOut
				}
			}
		}(cc || (cc = {}));
	class UIButton extends Laya.Script {
		constructor() {
			super(...arguments), this._pressed = !1, this.time = 0, this._transitionFinished = !0, this._lastClickTime = 0, this.transition = "SCALE", this._interactable = !0, this._gray = !1, this.enableAutoGrayEffect = !1, this.stopPropagation = !1, this.pressToKeepClick = !1, this.duration = .1, this.zoomScale = 1.2, this.clickDelta = .5
		}
		get interactable() {
			return this._interactable
		}
		set interactable(t) {
			this._interactable !== t && (this._interactable = t, !t && this._pressed && (this._pressed = !1))
		}
		get gray() {
			return this._gray
		}
		set gray(t) {
			t !== this._gray && (this._gray = !!t, Laya.UIUtils.gray(this.node, t))
		}
		get node() {
			return this.owner
		}
		onAwake() {
			this._applyTarget(), this._updateDisabledState()
		}
		onDestroy() {}
		onEnable() {}
		onDisable() {
			let t = this._fromScale;
			t && this.node.scale(t.scaleX, t.scaleY, !0), this._transitionFinished = !0
		}
		onUpdate() {
			let t = .001 * Laya.timer.delta;
			this._lastClickTime -= t, this._transitionFinished || (this.time += t, this._interactable && this._pressed && this.pressToKeepClick && this.clickDelta > 0 ? this._emitClickEvent() : this.time >= this.duration && (this._transitionFinished = !0))
		}
		_applyTarget() {
			let t = this.node;
			this._fromScale = {
				scaleX: t.scaleX,
				scaleY: t.scaleY
			}, this._toScale = {
				scaleX: t.scaleX * this.zoomScale,
				scaleY: t.scaleY * this.zoomScale
			}
		}
		onMouseDown(t) {
			this.stopPropagation && t && t.stopPropagation(), this.interactable && this.enabled && (this._lastClickTime > 0 || (this._pressed = !0, this._transitionFinished = !1, "SCALE" == this.transition && cc.tween(this.node, !0).to(.05, this._toScale).to(.05, this._fromScale).start()))
		}
		onMouseMove(t) {
			this.stopPropagation && t && t.stopPropagation(), this.interactable && this.enabled && this._pressed && (this._transitionFinished = !1)
		}
		onMouseUp(t) {
			this.stopPropagation && t && t.stopPropagation(), this.interactable && this.node.activeInHierarchy && (this._pressed && this._emitClickEvent(), this._pressed = !1, this._transitionFinished = !0)
		}
		_emitClickEvent() {
			this._lastClickTime <= 0 && (this._lastClickTime = this.clickDelta, this.node.event("uibutton_click", this))
		}
		onMouseOut(t) {
			this._pressed && (this._pressed = !1)
		}
		onClick(t) {
			t && t.stopPropagation()
		}
		_updateDisabledState() {
			!this._sprite || !this.enableAutoGrayEffect || this.interactable
		}
		stopTransition() {
			this._transitionFinished = !0
		}
	}
	UIButton.TRANSITION_NONE = "NONE", UIButton.TRANSITION_SCALE = "SCALE";
	class GConfig {
		static changeValue(t, e) {
			this[t] = e
		}
	}

	function calc_level_award(t) {
		return Math.pow(t, 2.9) / 3 + 4e3
	}
	GConfig.tile_width = 64, GConfig.tile_height = 64, GConfig.offline_delta_time = 10, GConfig.per_profit_time = 60, GConfig.img_single_color = "res/singleColor.png", GConfig.img_alpha_mask = "res/alpha_mask.png", GConfig.bmf_score = "res/font/num_score.fnt", GConfig.bmf_rank = "res/font/num_rank.fnt", GConfig.bmf_laji = "res/font/num_laji.fnt", GConfig.bmf_over = "res/font/num_over.fnt", GConfig.bmf_class = "res/font/num_class.fnt", GConfig.bmf_math = "res/font/num_math.fnt", GConfig.qte_time = 2, GConfig.qte_cd_time = 2, GConfig.qte_suc_rate = .2, GConfig.qte_fail_rate = .05, GConfig.db_award_info = {
		delta: 10,
		duration: 60
	}, GConfig.big_sell_info = {
		delta: 25
	}, GConfig.fast_sell_info = {
		duration: 25,
		moveRate: 2,
		progressRate: 2
	}, GConfig.show_part_coin_rate = .1, GConfig.letter_share_rate = 7500, GConfig.renqi_rate = 1.5, GConfig.renqi_award_limit = [120], GConfig.renqi_award_count = 2, GConfig.chn_data = {
		appName: "toutiao",
		isShareEnabled: !0,
		isPayEnabled: !0,
		isSupportRecordShare: !0,
		isSupportFindMinigames: !0,
		isSupportInstallShortcut: !0,
		findMinigamesImageUrl: "https://gamesres.ultralisk.cn/h5_games_res/common/find_me/default.png",
		jumpInfo: [{
			index: "61",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/61.png"
		}, {
			index: "64",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/64.png"
		}, {
			index: "49",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/49.png"
		}, {
			index: "60",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/60.png"
		}, {
			index: "61",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/61.png"
		}, {
			index: "64",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/64.png"
		}, {
			index: "49",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/49.png"
		}, {
			index: "60",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/60.png"
		}, {
			index: "61",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/61.png"
		}, {
			index: "64",
			bReceived: !1,
			rewards: [
				[1e3, 10]
			],
			url: "https://gamesres.ultralisk.cn/h5_games_res/common/jump_games/64.png"
		}],
		copInfo: '{\n            "share_rate":"10",\n\n            "ad_mode":0,\n            "ad_h5":"0",\n            "ad_interstitial_ratios": "0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;100;100;100;100;100;100;100;100",\n            "ad_banner_ratios": "0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;100;100;100;100;100;100;100;100",\n            "ad_embedded_ratios":"0;0;0",\n            "ad_video_ratios_":"",\n            "ad_video_ratios": "0;0;0;0;0;0;0;100;0;0;0;0;0;0;0;0;0;0;0;100;0;0;100;100",\n            "ad_video_cds":"",\n            "ad_inst_cd":"10",\n            "native_insert_mode":1,\n            "some_function":"0;0;0;0;0",\n            "b_open_statics_item":1,\n            "url_notice":"0",\n\n            "share_mode":"2;2;2;2;2;2;2;2;2;2;2",\n            "share_close_delta_time":1,\n\n            "cat_ratios": "100;100;100;100;100;100",\n            "cat_delta_time": 30,\n    \n            "rule_graph_ratios": "100;100;100;100;100;100;100",\n            "get_video_share_rank_tag_active": "",\n            "get_rank_tip_url": "https://gamesres.ultralisk.cn/h5_games_res/common/videoranknotice/game83/ranknotice.png",\n\n            "follow_close_delay_time":2,\n            "b_follow_finger": 1,\n\n            "b_open_follow": 1,\n            \n            "video_mode":"0;0",\n            "b_sign_delay_mode":0,\n            "b_video_share_full_screen":1,\n            "b_video_share_finger":1,\n            "b_adv_reward_confirm":1,\n            "b_adv_delay":1,\n            "b_adv_full_screen":1\n        }'
	};
	var exchange_rate_fun = {
		1001: function(t, e) {
			return Math.ceil((500 + 25 * (e - 1)) * t)
		},
		1002: function(t, e) {
			return 5 * t
		}
	};
	class DbExt {
		static getBrushId(t) {
			return t.p1
		}
		static getSkincareScore(t) {
			return t.num0
		}
		static getTagWeights(t) {
			return t.it
		}
		static getTag1(t) {
			return t.num0
		}
		static getTag2(t) {
			return t.num1
		}
		static getTgPrice(t) {
			return t.num2
		}
		static getJumpType(t) {
			return t.num3
		}
		static getCustEventWeights(t) {
			return t.it
		}
		static getGuideId(t) {
			return t.num1
		}
		static getGuideParam(t) {
			return t.num1
		}
		static isMan(t) {
			return 1 == t.num2
		}
	}
	class SpriteBase3D extends AsyncObject {
		constructor() {
			super(...arguments), this.resNode = null
		}
		get isResNodeDestroyed() {
			return !!this.resNode && this.resNode.destroyed
		}
		setLayer(t) {
			if (this.callable) {
				if (this._layer == t) return;
				this._layer = t, UiHelper.setLayer(this.resNode, t)
			} else this.safeCall(this.setLayer, t)
		}
		once(t, e, a) {
			this.callable ? this.resNode.once(t, e, a) : this.safeCall(this.once, t, e, a)
		}
		on(t, e, a) {
			this.callable ? this.resNode.on(t, e, a) : this.safeCall(this.on, t, e, a)
		}
		off(t, e, a) {
			this.callable ? this.resNode.off(t, e, a) : this.safeCall(this.off, t, e, a)
		}
		offAll(t) {
			this.callable ? this.resNode.offAll(t) : this.safeCall(this.offAll, t)
		}
		setWorldPosition(t, e, a) {
			this.callable ? null == e ? this.resNode.transform.position = t : (SpriteBase3D._tempVec3.setValue(t, e, a), this.resNode.transform.position = SpriteBase3D._tempVec3) : null == e ? this.safeCall(this.setWorldPosition, t.x, t.y, t.z) : this.safeCall(this.setWorldPosition, t, e, a)
		}
		findChild(t) {
			if (this.callable) return UiHelper.findChild(this.resNode, t);
			this.logNotFinishError()
		}
		dispose() {
			this.resNode && (this.resNode.destroy(!0), this.resNode = null), super.dispose()
		}
		get enable() {
			return this._isLoaded && this.resNode.active
		}
		set enable(t) {
			this.callable ? this.resNode.active = t : this.safeCall(t ? this.show : this.hide)
		}
		setName(t) {
			this.callable ? this.resNode.name = t : this.safeCall(this.setName, t)
		}
		addNodeChild(t) {
			this.callable ? t.setParent(this.resNode) : this.safeCall(this.addNodeChild, t)
		}
		addChild(t) {
			this.callable ? this.resNode.addChild(t) : this.safeCall(this.addChild, t)
		}
		getChild(t) {
			return this.callable ? UiHelper.getChild(this.resNode, t) : (this.logNotFinishError(), null)
		}
		getChildAt(t) {
			return this.callable ? this.resNode.getChildAt(t) : (this.logNotFinishError(), null)
		}
		setParent(t) {
			this.callable ? t.addChild(this.resNode) : this.safeCall(this.setParent, t)
		}
		getParent() {
			return this.callable ? this.resNode.parent : (this.logNotFinishError(), null)
		}
		removeFromParent() {
			this.callable ? this.resNode.removeSelf() : this.safeCall(this.removeFromParent)
		}
		setSize(t, e) {
			console.error("Model 没有size属性")
		}
		setPosition(t, e, a) {
			this.callable ? null == e ? this.resNode.transform.localPosition = t : (SpriteBase3D._tempVec3.setValue(t, e, a), this.resNode.transform.localPosition = SpriteBase3D._tempVec3) : null == e ? this.safeCall(this.setPosition, t.x, t.y, t.z) : this.safeCall(this.setPosition, t, e, a)
		}
		setScale(t, e, a) {
			this.callable ? null == e ? this.resNode.transform.localScale = t : (SpriteBase3D._tempVec3.setValue(t, e, a), this.resNode.transform.localScale = SpriteBase3D._tempVec3) : null == e ? this.safeCall(this.setScale, t.x, t.y, t.z) : this.safeCall(this.setScale, t, e, a)
		}
		setRotation(t, e, a) {
			this.callable ? null == e ? this.resNode.transform.localRotationEuler = t : (SpriteBase3D._tempVec3.setValue(t, e, a), this.resNode.transform.localRotationEuler = SpriteBase3D._tempVec3) : null == e ? this.safeCall(this.setRotation, t.x, t.y, t.z) : this.safeCall(this.setRotation, t, e, a)
		}
		setAlpha(t) {
			console.log("模型没有alpha")
		}
		show() {
			this.enable = !0
		}
		hide() {
			this.enable = !1
		}
		setSiblingIndex(t) {
			if (this.callable) {
				if (!this.resNode.parent) return; - 1 === t && (t = this.resNode.parent.numChildren - 1), this.resNode.parent.setChildIndex(this.resNode, t)
			} else this.safeCall(this.setSiblingIndex, t)
		}
		setTop() {
			this.setSiblingIndex(-1)
		}
		setBottom() {
			this.setSiblingIndex(0)
		}
		addComponent(t) {
			if (this.callable) return this.resNode.addComponent(t);
			this.safeCall(this.addComponent, t)
		}
		getComponent(t) {
			return this._isLoaded ? this.resNode.getComponent(t) : (this.logNotFinishError(), null)
		}
		convertToWorldSpaceOut(t, e) {
			return console.error("暂未实现"), null
		}
	}
	SpriteBase3D._tempVec3 = new Laya.Vector3;
	class Particle extends SpriteBase3D {
		constructor(t) {
			super(), this.resourceName = null, this.resourceType = RES_TYPE.PREFAB3D, this._pss = [], this.effectId = t;
			let e = db.get_effect_db(t);
			this.resourceName = e.res
		}
		onResourceLoaded(t) {
			this.resNode = Laya.Sprite3D.instantiate(t), Particle._findPs(this.resNode, this._pss)
		}
		static _findPs(t, e) {
			for (var a = t.numChildren - 1; a >= 0; a--) {
				var i = t.getChildAt(a);
				i.particleSystem && (i.particleSystem.playOnAwake = !1, e.push(i.particleSystem)), this._findPs(i, e)
			}
		}
		reuse() {
			this.tryCreate(), this.show()
		}
		unuse() {
			this.stop(), this.stopFollow(), this.removeFromParent(), this.hide(), this.clearDelayCalls()
		}
		dispose() {
			this._pss = null, super.dispose()
		}
		play(t, e, a, i) {
			if (this.callable) {
				i && i.addChild(this.resNode), t && this.setPosition(t);
				for (var s = this._pss.length - 1; s >= 0; s--) this._pss[s].play();
				e && Laya.timer.once(1e3 * e, this, this.stopAndPutback, [a])
			} else this.safeCall(this.play, t, e, a, i)
		}
		stopAndPutback(t) {
			this.callable ? (this.stop(), t ? Laya.timer.once(1e3 * t, this, this.putBack) : this.putBack()) : this.safeCall(this.stopAndPutback, t)
		}
		stop() {
			if (this.callable)
				for (var t = this._pss.length - 1; t >= 0; t--) this._pss[t].stop();
			else this.safeCall(this.stop)
		}
		putBack() {
			this.callable ? this.resNode.destroyed || _G.poolManager.put(this) : this.safeCall(this.putBack)
		}
		resetTrail(t) {
			if ((t = t || this.resNode) instanceof Laya.TrailSprite3D) {
				let e = t.trailFilter.time;
				t.trailFilter.time = 0, Laya.timer.frameOnce(1, t, function() {
					t.trailFilter.time = e
				})
			}
			for (let e = 0; e < t.numChildren; e++) {
				let a = t.getChildAt(e);
				this.resetTrail(a)
			}
		}
		simulate(t, e) {
			if (this.callable)
				for (var a = this._pss.length - 1; a >= 0; a--) this._pss[a].simulate(t, e);
			else this.safeCall(this.simulate, t, e)
		}
		setCurrentTime(t) {
			if (this.callable)
				for (var e = this._pss.length - 1; e >= 0; e--) {
					var a = t - this._pss[e]._currentTime;
					this._pss[e]._updateParticles(a)
				} else this.safeCall(this.setCurrentTime, t)
		}
		followTarget(t, e, a = 0, i = 0) {
			if (!this.callable) return this.safeCall(this.followTarget, t, e, a, i);
			t instanceof Laya.Sprite3D ? this._target3D = t : (this._target = t, this._camera = e, this._offsetX = a, this._offsetY = i), Laya.timer.frameLoop(1, this, this.updateFollow, null, !0), this.updateFollow()
		}
		followScale(t) {
			this.callable ? this._bScale = t : this.safeCall(this.followScale, t)
		}
		stopFollow() {
			if (!this.callable) return this.safeCall(this.stopFollow);
			this._target = null, this._target3D = null, this._camera = null, this._bScale = !1, Laya.timer.clearAll(this)
		}
		updateFollow() {
			this._target ? this._target.destroyed || this._camera.destroyed ? this.stopAndPutback() : this.align(this._target, this._camera, this._offsetX, this._offsetY) : this._target3D.destroyed ? this.stopAndPutback() : this.align3D(this._target3D)
		}
		align(t, e, a = 0, i = 0) {
			let s = Particle._TEMP_P,
				n = Particle._TEMP_VEC3;
			t.parent && (s.setTo(t.x + a, t.y + i), t.parent.localToGlobal(s, !1)), n.setValue(s.x, s.y, 0), e.convertScreenCoordToOrthographicCoord(n, n), n.z = 0, this.setWorldPosition(n)
		}
		align3D(t) {
			let e = Particle._TEMP_VEC3;
			t.transform.position.cloneTo(e), this.setWorldPosition(e), this._bScale && this.setScale(t.transform.localScale)
		}
	}
	Particle._TEMP_P = new Laya.Point, Particle._TEMP_VEC3 = new Laya.Vector3;
	class ReuseSprite extends Laya.Sprite {
		constructor(t) {
			super(), this.effect = _G.poolManager.get(Particle, "131")
		}
		dispose() {
			this.effect && (_G.poolManager.put(this.effect), this.effect = null), this.destroy()
		}
		reuse() {
			this.visible = !0, _G.effectScene && (this.effect.show(), this.effect.setParent(_G.effectScene), this.effect.setLayer(1), this.effect.play(), this.effect.followTarget(this, _G.effectCamera))
		}
		unuse() {
			this.removeSelf(), this.effect.stopFollow(), this.effect.setScale(1, 1, 1), this.effect.stop(), this.effect.removeFromParent(), this.effect.hide(), this.visible = !1
		}
		loadUrl(t) {
			this.loadImage(t, Laya.Handler.create(this, this.onLoaded))
		}
		onLoaded() {
			if (this.destroyed) return;
			let t = this.texture;
			t && this.pivot(t.width / 2, t.height / 2)
		}
	}
	class UiHelper {
		static get MASK_TEXTURE2D() {
			if (!this.maskTexture2d) {
				var t = new Uint8Array(4);
				t[0] = 1, t[1] = 1, t[2] = 1, t[3] = .7;
				let e = new Laya.Texture2D(1, 1, Laya.Texture2D.FORMAT_R8G8B8A8, !1, !1);
				e.setPixels(t), e.lock = !0, this.maskTexture2d = e
			}
			return this.maskTexture2d
		}
		static get MASK_TEXTURE() {
			return this.maskTexture || (this.maskTexture = Laya.Texture.create(this.MASK_TEXTURE2D, 0, 0, 1, 1)), this.maskTexture
		}
		static get WHITE_TEXTURE2D() {
			return Laya.Texture2D.whiteTexture
		}
		static get WHITE_TEXTURE() {
			return this.whiteTexture || (this.whiteTexture = Laya.Texture.create(this.WHITE_TEXTURE2D, 0, 0, 1, 1)), this.whiteTexture
		}
		static get BLACK_TEXTURE() {
			if (!this.blackTexture) {
				let t = Laya.Texture2D.blackTexture;
				this.blackTexture = new Laya.Texture(t)
			}
			return this.blackTexture
		}
		static addClickEvent(t, e, a, i = .5, s = !1) {
			let n = 0;
			t.on(Laya.Event.CLICK, t, function(o) {
				UiHelper.stopEventHandler(o), ViewBase.playButtonClickSound(a), n > Timer.time || (i && (n = Timer.time + i), s && cc.tween(t).to(.05, cc.PROP.SCALE1_2).to(.05, cc.PROP.SCALE1).start(), e && e())
			})
		}
		static addUIButtonClick(t, e, a) {
			t.on("uibutton_click", t, function() {
				ViewBase.playButtonClickSound(a), e()
			})
		}
		static addUIToggleClick(t, e, a) {
			t.on("ui_toggle", t, function(t) {
				ViewBase.playButtonClickSound(a), e(t)
			})
		}
		static addScrollViewClick(t, e, a, i) {
			let s, n, o;

			function on_click(t) {
				ViewBase.playButtonClickSound(a), e(), UiHelper.stopEventHandler(t)
			}
			t.on(Laya.Event.MOUSE_DOWN, t, function(e) {
				s = !0, n = Laya.stage.mouseX, o = Laya.stage.mouseY, i && cc.tween(t).to(.05, cc.PROP.SCALE1_2).to(.05, cc.PROP.SCALE1).start()
			}), t.on(Laya.Event.MOUSE_MOVE, t, function(t) {
				if (!s) return;
				let e = Laya.stage.mouseX,
					a = Laya.stage.mouseY;
				Mathf.distanceSqr2(e - n, a - o) > 16 && (s = !1), n = e, o = a
			}), t.on(Laya.Event.CLICK, t, function(t) {
				s && on_click(t)
			}), t.on("uibutton_click", t, on_click)
		}
		static getChildComponent(t, e, a) {
			if (e && "" != e) {
				let i = this.getChild(t, e);
				return i ? i.getComponent(a) : null
			}
			return t.getComponent(a)
		}
		static getComponentsInChildren(t, e, a) {
			a = a || [];
			for (let i = 0; i < t.numChildren; i++) {
				let s = t.getChildAt(i);
				if (s) {
					let t = s.getComponent(e);
					t && a.push(t), this.getComponentsInChildren(s, e, a)
				}
			}
			return a
		}
		static registerTouchEvent(t, e, a, i, s) {
			e && t.on(Laya.Event.MOUSE_DOWN, this, e), a && t.on(Laya.Event.MOUSE_MOVE, this, a), i && t.on(Laya.Event.MOUSE_UP, this, i), s && t.on(Laya.Event.MOUSE_OUT, this, s)
		}
		static unregisterTouchEvent(t) {
			t.offAllCaller(this)
		}
		static calcRecursiveScale(t) {
			let e = 1;
			do {
				e *= t.scaleX, t = t.parent
			} while (null != t);
			return e
		}
		static resetAnchor(t, e, a, i) {
			let s = 0;
			_G.canvasFitHeight < _G.canvasHeight && (s = (_G.canvasHeight - _G.canvasFitHeight) / 2);
			let n = 0;
			_G.canvasFitWidth < _G.canvasWidth && (n = (_G.canvasWidth - _G.canvasFitWidth) / 2), t && (t.y = s), a && (a.y = _G.canvasHeight - s), e && (e.x = n), i && (i.x = _G.canvasWidth - n)
		}
		static setButtonToNormal(t) {
			let e = t.getComponent(UIButton);
			e && (e.interactable = !0), console.error("setButtonToNormal")
		}
		static formatLastTime(t) {
			let e = (1e3 * Timer.now - t) / 3600 / 1e3;
			if (e > 24) return Tools.formatDate(t);
			if (e >= 1) return `${Math.round(e)}小时前`; {
				let t = 60 * e;
				return t >= 1 ? `${Math.round(t)}分钟前` : "刚刚"
			}
		}
		static playBigSmallOnce(t, e, a, i = .1) {
			cc.tween(t).to(i, {
				scaleX: a,
				scaleY: a
			}).to(i, {
				scaleX: e,
				scaleY: e
			}).start()
		}
		static playBreathe(t, e = .9, a = 1.1, i = .8) {
			cc.tween(t).repeatForever(cc.tween().to(i, {
				scaleX: a,
				scaleY: a
			}).to(i, {
				scaleX: e,
				scaleY: e
			})).start()
		}
		static removeBreathe(t) {
			cc.clearTween(t), t.scale(1, 1, !0)
		}
		static playScaleOneByOne(t, e, ...a) {
			for (var i = 0, s = a.length; i < s; i++) {
				var n = a[i];
				n && (this.playScaleOnce(n, t), t += e)
			}
		}
		static playScaleOnce(t, e = 0, a = .2) {
			t.alpha = 0, t.scale(0, 0, !0), Laya.Tween.to(t, cc.PROP.SCALE_ALPHA1, 1e3 * a, Laya.Ease.backOut, null, 1e3 * e)
		}
		static playRotShake(t, e = 1, a) {
			let i = t.rotation;
			cc.tween(t).repeat(e / .06 / 2, cc.tween().to(.06, {
				rotation: i - 10
			}).to(.06, {
				rotation: i + 10
			})).to(.03, {
				rotation: i
			}).call(a).start()
		}
		static playTipRot(t) {
			cc.tween(t, !0).repeatForever(cc.tween().repeat(2, cc.tween().to(.2, {
				rotation: 15
			}, cc.OPTION.SINE_IN_OUT).to(.2, {
				rotation: -15
			}, cc.OPTION.SINE_IN_OUT)).to(.1, {
				rotation: 0
			}).delay(2)).start()
		}
		static playRotCycle(t) {
			cc.tween(t).repeatForever(cc.tween().to(.05, {
				rotation: 10
			}).to(.1, {
				rotation: -10
			}).to(.1, {
				rotation: 10
			}).to(.1, {
				rotation: -10
			}).to(.05, {
				rotation: 0
			}).delay(1)).start()
		}
		static playFadein(t, e = 0) {
			t && (t.alpha = 0, Laya.Tween.to(t, cc.PROP.ALPHA1, 200, null, null, 1e3 * e))
		}
		static playScaleThenFadeOut(t, e) {
			if (t) {
				let a = t.scaleX,
					i = t.scaleY;
				cc.tween(t).parallel(cc.tween().to(.5, {
					scaleX: 1.5 * a,
					scaleY: 1.5 * i
				}), cc.tween().delay(.4).to(.1, cc.PROP.ALPHA0)).call(e).start()
			}
		}
		static playAlert(t, e) {
			t.scale(0, 0, !0), cc.clearTween(t);
			let a = cc.tween(t).to(.2, {
				scaleX: .2,
				scaleY: 1.2
			}).to(.2, {
				scaleX: 1.1,
				scaleY: .9
			}, {
				easing: cc.Ease.quadOut
			}).to(.1, {
				scaleX: .9,
				scaleY: 1.1
			}, {
				easing: cc.Ease.quadOut
			}).to(.1, {
				scaleX: 1,
				scaleY: 1
			}, {
				easing: cc.Ease.backOut
			});
			e && (a = a.call(function() {
				cc.tween(t).repeatForever(cc.tween().to(.8, {
					y: 60
				}).to(.8, {
					y: 74
				})).start()
			})), a.start()
		}
		static playMoveOut(t, e, a = .3) {
			cc.tween(t, !0).to(a, {
				x: e
			}, cc.OPTION.SINE_OUT).hide().start()
		}
		static playMoveIn(t, e = 0, a = .3, i = 0) {
			cc.tween(t, !0).show().delay(i).to(a, {
				x: e
			}, cc.OPTION.BACK_OUT).start()
		}
		static getCircleConverter(t, e, a = !0) {
			let i, s, n, o = (t * t + (e /= 2) * e) / (2 * t);
			return i = e, s = o - t, n = o * o,
				function(e) {
					let o;
					return o = a ? -(-Math.sqrt(n - Math.pow(e - i, 2)) + s) : -Math.sqrt(n - Math.pow(e - i, 2)) + s + t
				}
		}
		static getChild(t, e) {
			if (!e) return null;
			if ("/" == e) return t;
			if (~e.indexOf("/")) {
				let a = e.split("/");
				for (let e = 0; e < a.length; e++)
					if (!(t = t.getChildByName(a[e]))) return null;
				return t
			}
			return t.getChildByName(e)
		}
		static findChild(t, e) {
			if (!e) return null;
			if (t.name == e) return t;
			for (let a = t.numChildren - 1; a >= 0; a--) {
				let i = this.findChild(t.getChildAt(a), e);
				if (i) return i
			}
		}
		static findAllMeshRenderers(t, e, a = !1) {
			e = e || [];
			for (let i = 0; i < t.numChildren; i++) {
				let s = t.getChildAt(i);
				if (s) {
					let t = s.meshRenderer;
					t && e.push(t), a && this.findAllMeshRenderers(s, e, a)
				}
			}
			return e
		}
		static findAllSkinnedMeshRenderers(t, e, a = !1) {
			e = e || [];
			for (let i = 0; i < t.numChildren; i++) {
				let s = t.getChildAt(i);
				if (s) {
					let t = s.skinnedMeshRenderer;
					t && e.push(t), a && this.findAllSkinnedMeshRenderers(s, e, a)
				}
			}
			return e
		}
		static findSkinnedMeshSprite(t, e = !1) {
			if (t.skinnedMeshRenderer) return t;
			if (e)
				for (let a = 0; a < t.numChildren; a++) {
					let i = t.getChildAt(a),
						s = this.findSkinnedMeshSprite(i, e);
					if (s) return s
				}
			return null
		}
		static findMeshSprite(t, e = !1) {
			if (t.meshRenderer) return t;
			if (e)
				for (let a = 0; a < t.numChildren; a++) {
					let i = t.getChildAt(a),
						s = this.findMeshSprite(i, e);
					if (s) return s
				}
			return null
		}
		static findAllShurikenParticleSystem(t, e) {
			e = e || [];
			for (var a = t.numChildren - 1; a >= 0; a--) {
				var i = t.getChildAt(a);
				i.particleSystem && e.push(i.particleSystem), this.findAllShurikenParticleSystem(i, e)
			}
			return e
		}
		static setLayer(t, e) {
			t.layer = e;
			for (var a = 0; a < t.numChildren; a++) this.setLayer(t.getChildAt(a), e)
		}
		static cloneSprite(t) {
			let e = this._cloneSingleSprite(t);
			for (var a = 0; a < t.numChildren; a++) {
				var i = this.cloneSprite(t.getChildAt(a));
				i && e.addChild(i)
			}
			return e
		}
		static _cloneSingleSprite(t) {
			if (!t.name) return null;
			let e;
			if (t instanceof Laya.Image) {
				let a = new Laya.Image(t.skin);
				t.anchorX && (a.anchorX = t.anchorX), t.anchorY && (a.anchorY = t.anchorY), a.sizeGrid = t.sizeGrid, a.pivot(t.pivotX, t.pivotY), e = a
			} else if (t instanceof Laya.Label) {
				let a = new Laya.Label;
				a.fontSize = t.fontSize, a.color = t.color, a.strokeColor = t.strokeColor, a.stroke = t.stroke, t.anchorX && (a.anchorX = t.anchorX), t.anchorY && (a.anchorY = t.anchorY), a.align = t.align, a.wordWrap = t.wordWrap, a.text = t.text, e = a
			} else if (t instanceof Laya.Text) {
				let a = new Laya.Label;
				a.fontSize = t.fontSize, a.color = t.color, a.strokeColor = t.strokeColor, a.stroke = t.stroke, a.align = t.align, a.wordWrap = t.wordWrap, a.text = t.text, e = a
			} else t instanceof Laya.Sprite && ((e = new Laya.Sprite).texture = t.texture, e.pivot(t.pivotX, t.pivotY));
			return t._width && (e.width = t.width), t._height && (e.height = t.height), e.pos(t.x, t.y, !0).scale(t.scaleX, t.scaleY).rotation = t.rotation, e.name = t.name, e
		}
		static screenShot(t, e, a) {
			e = Math.floor(e), a = Math.floor(a);
			let i = new Laya.Camera(t.aspectRatio, t.nearPlane, t.farPlane);
			i.clearFlag = t.clearFlag, i.cullingMask = t.cullingMask, i.fieldOfView = t.fieldOfView, t.parent.addChild(i), i.transform.position = t.transform.position, i.transform.rotation = t.transform.rotation;
			let s = new Laya.RenderTexture(e, a);
			i.renderTarget = s, i.render(), i.destroy();
			let n = new Uint8Array(e * a * 4);
			s.getData(0, 0, e, a, n), s.destroy();
			let o = new Laya.Texture2D(e, a, void 0, !1, !0);
			return o.setPixels(n), o
		}
		static testPlayPhoto(t) {
			let e = new Laya.Sprite,
				a = Laya.Texture.create(t, 0, 0, t.width, t.height);
			e.size(t.width, t.height).pivot(t.width / 2, t.height / 2), e.texture = a, mgrPanel.getLayerNode(PANEL_LAYER.TOP).addChild(e), e.pos(_G.canvasWidth / 2, _G.canvasHeight / 2, !0), cc.tween(e).delay(2).to(.5, {
				scaleX: .3,
				scaleY: .3,
				alpha: 0
			}).call(function() {
				e.destroy()
			}).start()
		}
		static playPhotoFlash() {
			let t = new Laya.Sprite;
			t.loadImage(GConfig.img_single_color), t.size(_G.canvasWidth, _G.canvasHeight), t.alpha = 0, mgrPanel.getLayerNode(PANEL_LAYER.TOP).addChild(t), cc.tween(t).to(.08, cc.PROP.ALPHA1).to(.5, cc.PROP.ALPHA0).call(() => {
				t.destroy()
			}).start()
		}
		static playBlackFlash(t = 1, e) {
			let a = new Laya.Sprite;
			a.texture = this.BLACK_TEXTURE, a.size(_G.canvasWidth, _G.canvasHeight), a.alpha = 0, mgrPanel.getLayerNode(PANEL_LAYER.TOP).addChild(a), cc.tween(a).to(.3, cc.PROP.ALPHA1).call(e).delay(t).to(.3, cc.PROP.ALPHA0).call(() => {
				a.destroy()
			}).start()
		}
		static spriteScreenShot(t, e = !0) {
			let a = t.width,
				i = t.height;
			if (!a || !i) return void Logger.error("sprite 必须要有尺寸");
			let s = new Laya.RenderTexture2D(a, i, Laya.RenderTexture2D.FORMAT_R8G8B8A8);
			t.drawToTexture(a, i, 0, 0, s);
			let n = s.getData(0, 0, a, i);
			s.destroy();
			let o = new Laya.Texture2D(a, i, Laya.Texture2D.FORMAT_R8G8B8A8, !1);
			return e ? o.setPixels(Tools.reverseBitmap(n, a, i)) : o.setPixels(n), o
		}
		static addFilterWithSingleton(t, e) {
			var a = t.filters || [];
			a.indexOf(e) >= 0 || (a.push(e), t.filters = a)
		}
		static addMaskFilter(t) {
			this._maskFilter || (this._maskFilter = new Laya.ColorFilter, this._maskFilter.adjustContrast(-100)), this.addFilterWithSingleton(t, this._maskFilter)
		}
		static removeColorMaskFilter(t) {
			Laya.UIUtils.clearFilter(t, Laya.ColorFilter)
		}
		static addMaskFilter2(t) {
			this._maskFilter2 || (this._maskFilter2 = new Laya.ColorFilter, this._maskFilter2.adjustContrast(-80)), this.addFilterWithSingleton(t, this._maskFilter2)
		}
		static local2local(t, e, a) {
			return a = a || new Laya.Point, t.localToGlobal(a, !1), e.globalToLocal(a, !1), a
		}
		static getSelfGlobalPos(t, e, a) {
			return e = e || new Laya.Point, t.parent && (e.setTo(t.x, t.y), t.parent.localToGlobal(e, !1, a)), e
		}
		static node2camera(t, e, a) {
			let i = this.getSelfGlobalPos(t, new Laya.Point);
			return this.global2camera(i, e, a)
		}
		static global2camera(t, e, a) {
			return (a = a || new Laya.Vector3).x = t.x, a.y = t.y, a.z = 0, e.convertScreenCoordToOrthographicCoord(a, a), a
		}
		static worldToScreen(t, e, a) {
			let i = UiHelper.vec3_temp;
			t.viewport.project(e, t.projectionViewMatrix, i), a.x = i.x / Laya.stage.clientScaleX, a.y = i.y / Laya.stage.clientScaleY
		}
		static screenToRay(t, e, a) {
			return a = a || new Laya.Ray(new Laya.Vector3, new Laya.Vector3), this.convertScreenToCanvas(t, this.vec2_temp), e.viewportPointToRay(this.vec2_temp, a), a
		}
		static convertScreenToCanvas(t, e) {
			return (e = e || new Laya.Vector2).x = t.x * Laya.stage.clientScaleX, e.y = t.y * Laya.stage.clientScaleY, e
		}
		static clampSpriteSize(t, e) {
			let a = Math.max(t.width, t.height);
			if (a > 0) {
				if (a > e) {
					let i = e / a;
					t.scale(i, i, !0)
				}
			} else {
				let a = t.texture;
				if (a) {
					let i = function() {
						if (t.destroyed) return;
						let i = Math.max(a.width, a.height);
						if (i > e) {
							let a = e / i;
							t.scale(a, a, !0)
						}
					};
					a.getIsReady() ? i() : a.once(Laya.Event.READY, t, i)
				}
			}
		}
		static playNodeElasticAndMove(t, e, a, i, s, n) {
			i && i.addChild(t);
			let o = this.point_temp;
			o.setTo(e.x, e.y), e.parent.localToGlobal(o, !1), i && i.globalToLocal(o, !1), t.pos(o.x, o.y, !0);
			let r = Mathf.TEMP_POINTS[0];
			r.setTo(a.x, a.y), a.parent.localToGlobal(r, !1), i && i.globalToLocal(r, !1), t.scale(e.globalScaleX, e.globalScaleY, !0);
			let l = Mathf.TEMP_POINTS[1];
			l.setTo(a.globalScaleX, a.globalScaleY), this.playElasticAndMove(t, r, l, s, n)
		}
		static playElasticAndMove(t, e, a, i, s) {
			if (s = s || _G.EMPTY_FUN, i) {
				let t = mgrPanel.getLayerNode(PANEL_LAYER.DIALOG),
					e = new Laya.Sprite;
				t.addChild(e), e.loadImage(GConfig.img_alpha_mask).size(_G.canvasWidth, _G.canvasHeight), e.alpha = 0, cc.tween(e).to(.3, cc.PROP.ALPHA1).delay(1.3).to(.2, cc.PROP.ALPHA0).call(function() {
					e.destroy()
				}).start()
			}
			let n = Math.abs(t.scaleX) * Mathf.sign(a.x),
				o = Math.abs(t.scaleY) * Mathf.sign(a.y);
			cc.tween(t).delay(.2).to(.1, cc.PROP.SCALE0).to(.3, {
				scaleX: 1.2 * n,
				scaleY: 1.2 * o
			}, {
				easing: cc.Ease.backOut
			}).delay(.2).to(1, {
				scaleX: a.x,
				scaleY: a.y,
				x: e.x,
				y: e.y
			}, {
				easing: cc.Ease.sineInOut
			}).call(s).start()
		}
		static playNodeScaleAndJump(t, e, a, i = !0, s = !0, n, o) {
			n = n || mgrPanel.getLayerNode(PANEL_LAYER.DIALOG);
			let r = this.point_temp,
				l = Mathf.TEMP_POINTS[0],
				c = Mathf.TEMP_POINTS[1].setTo(1, 1);
			r.setTo(e.x, e.y), e.parent.localToGlobal(r, !1), n.globalToLocal(r, !1), t.pos(r.x, r.y, !0), l.setTo(a.x, a.y), a.parent.localToGlobal(l, !1), n.globalToLocal(l, !1), i && t.scale(e.globalScaleX, e.globalScaleY, !0), s ? c.setTo(a.globalScaleX, a.globalScaleY) : c.setTo(t.scaleX, t.scaleY), n.addChild(t), this.playScaleAndJump(t, l, c.x, c.y, 1, o)
		}
		static playItemScaleAndJumpToEmpty(t, e, a, i, s) {
			let n = db.get_item_db(t);
			if (!n) return;
			i = i || mgrPanel.getLayerNode(PANEL_LAYER.TIP);
			let o = _G.poolManager.get(ReuseSprite);
			i.addChild(o), o.loadUrl(n.icon), o.pos(e.x, e.y, !0).scale(1, 1, !0).alpha = 1, this.playScaleAndJump(o, a, .3, .3, 0, function() {
				_G.poolManager.put(o), s && s()
			})
		}
		static playItemScaleAndJump(t, e, a, i, s) {
			let n = db.get_item_db(t);
			n && this.playImageScaleAndJump(n.icon, e, a, i, s)
		}
		static playImageScaleAndJump(t, e, a, i, s) {
			i = i || mgrPanel.getLayerNode(PANEL_LAYER.TIP);
			let n = _G.poolManager.get(ReuseSprite);
			return i.addChild(n), n.loadUrl(t), n.pos(e.x, e.y, !0).scale(1, 1, !0).alpha = 1, this.playScaleAndJump(n, a, 1, 1, 1, function() {
				_G.poolManager.put(n), s && s()
			}), n
		}
		static playScaleAndJump(t, e, a = 1, i = 1, s = 1, n) {
			n = n || _G.EMPTY_FUN;
			let o = Mathf.distance2(t.x - e.x, t.y - e.y),
				r = Mathf.lerpFromInverseLerp(.3, 1, 100, 800, o);
			cc.tween(t).to(.2, {
				scaleX: 1.2 * t.scaleX,
				scaleY: 1.2 * t.scaleY
			}, {
				easing: cc.Ease.backOut
			}).parallel(cc.tween().to(r, {
				scaleX: a,
				scaleY: i
			}), cc.tween().delay(.7 * r).to(.3 * r, {
				alpha: s
			}), cc.tween().then(cc.jumpTo(r, e.x, e.y, 100, 1))).call(n).start()
		}
		static playColorEgg(t, e) {
			cc.tween(t).to(.3, {
				scaleX: 1.5 * t.scaleX,
				scaleY: 1.5 * t.scaleY
			}, {
				easing: cc.Ease.backOut
			}).parallel(cc.tween().to(.5, {
				scaleX: 1,
				scaleY: 1
			}), cc.tween().then(cc.jumpTo(.5, e.x, e.y, 100, 1))).hide().start()
		}
		static playMoveTo(t, e, a, i) {
			i = i || _G.EMPTY_FUN, cc.tween(t).delay(.2).to(1, {
				scaleX: a,
				scaleY: a,
				x: e.x,
				y: e.y
			}, {
				easing: cc.Ease.sineInOut
			}).call(i).start()
		}
		static playScaleAndMoveTo(t, e, a, i, s) {
			s = s || _G.EMPTY_FUN, cc.tween(t).delay(.2).to(.2, {
				scaleX: a,
				scaleY: a
			}, {
				easing: cc.Ease.backOut
			}).to(1, {
				scaleX: i,
				scaleY: i,
				x: e.x,
				y: e.y
			}, {
				easing: cc.Ease.sineInOut
			}).call(s).start()
		}
		static playStampEffect(t, e, a = 2) {
			let i, s = !1;

			function playEffect() {
				i.pivot(i.width / 2, i.height / 2), i.scale(3, 3, !0);
				let t = cc.tween(i).to(.2, cc.PROP.SCALE1).call(function() {
					let t = new Laya.Sprite;
					i instanceof Laya.Image ? t.texture = i.source : t.texture = i.texture, i.parent.addChild(i), t.pivot(i.pivotX, i.pivotY), t.pos(i.x, i.y, !0), cc.tween(t).to(.2, {
						scaleX: 1.4,
						scaleY: 1.4,
						alpha: 0
					}).removeSelf(!0).start()
				}).delay(a);
				s && (t = t.to(.2, cc.PROP.ALPHA0).call(function() {
					i.destroy(!0)
				})), t.call(e).start()
			}
			"string" == typeof t ? ((i = new Laya.Sprite).loadImage(t), s = !0) : i = t, i.texture.getIsReady() ? playEffect() : i.texture.once(Laya.Event.LOADED, this, playEffect)
		}
		static setStars(t, e, a, i = !1, s = 0) {
			let n = t.node;
			if (a > n.numChildren) Logger.error("UIHelper.setStars error: max > numChildren.");
			else {
				for (let t = 0; t < e; t++) {
					n.getChildAt(t).visible = !0
				}
				for (let t = e; t < a; t++) {
					n.getChildAt(t).visible = !1
				}
				if (t.updateLayout(0, !0), i)
					for (let t = 0; t < e; t++) {
						let e = n.getChildAt(t);
						e.scale(0, 0, !0), Laya.Tween.to(e, cc.PROP.SCALE1, 200, Laya.Ease.backOut, null, 1e3 * s + 150 * t)
					}
			}
		}
		static changeStars(t, e, a, i = 0) {
			let s = t.node;
			if (a > s.numChildren) return void Logger.error("UIHelper.setStars error: max > numChildren.");
			let n = 0;
			for (let t = 0; t < e; t++) {
				let e = s.getChildAt(t);
				e.visible ? (cc.clearTween(e), e.scale(1, 1, !0)) : (e.visible = !0, e.scale(0, 0, !0), cc.tween(e).delay(i + .15 * n).to(.2, cc.PROP.SCALE1, {
					easing: cc.Ease.backOut
				}).start(), n++)
			}
			n = 0;
			for (let t = a - 1; t >= e; t--) {
				let e = s.getChildAt(t);
				e.visible && (cc.clearTween(e), cc.tween(e).delay(i + .15 * n).to(.2, cc.PROP.SCALE0, {
					easing: cc.Ease.backIn
				}).call(function() {
					e.visible = !1, e.scale(1, 1, !0)
				}).start(), n++)
			}
		}
		static loadTagIconWithPart(t, e, a) {
			let i = db.get_item_db(t);
			this.loadTagIcon(DbExt.getTag1(i), e), this.loadTagIcon(DbExt.getTag2(i), a)
		}
		static loadTagIconWithData(t, e, a) {
			this.loadTagIcon(t.tag1, e), this.loadTagIcon(t.tag2, a)
		}
		static loadTagIcon(t, e) {
			if (e)
				if (t) {
					let a = db.get_tag_type_db(t - 1);
					a && (e.visible = !0, e.loadImage(a.icon))
				} else e.loadImage(null)
		}
		static debug_sprite(t, e = !1) {
			var a, i;
			if (t instanceof Laya.Texture2D) i = Laya.Texture.create(t, 0, 0, t.width, t.height);
			else if (t instanceof Laya.RenderTexture) {
				a = new Laya.Texture2D(t.width, t.height, void 0, !1, !0);
				var s = new Uint8Array(t.width * t.height * 4);
				a.setPixels(t.getData(0, 0, t.width, t.height, s)), i = Laya.Texture.create(a, 0, 0, t.width, t.height)
			} else(a = new Laya.Texture2D(t.width, t.height, void 0, !1, !0)).setPixels(t.getData(0, 0, t.width, t.height)), i = Laya.Texture.create(a, 0, 0, t.width, t.height);
			let n = (new Laya.Sprite).size(t.width, t.height);
			n.texture = i, mgrPanel.getLayerNode(PANEL_LAYER.TOP).addChild(n), n.pivot(t.width / 2, t.height / 2).pos(_G.canvasWidth / 2, _G.canvasHeight / 2, !0), cc.tween(n).to(2, {
				scaleX: 1.5,
				scaleY: 1.5
			}).call(function() {
				i.destroy(), a && a.destroy(), n.destroy(), e && t.destroy()
			}).start()
		}
		static debug_line(t, e, a) {
			t.addChild(new Laya.PixelLineSprite3D(1)).addLine(e, a, Laya.Color.RED, Laya.Color.RED)
		}
		static debug_point(t, e, a = .1) {
			t.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(a, 10, 10))).transform.position = e
		}
		static tweenCamera(t, e, a, i, s, n, o) {
			cc.tween(t, !0).to(e, {
				fieldOfView: s
			}).start();
			let r = _G.pool.get(Laya.Vector3);
			t.transform.localPosition.cloneTo(r);
			let l = _G.pool.get(Laya.Quaternion);
			t.transform.localRotation.cloneTo(l);
			let c = _G.pool.get(Laya.Vector3),
				h = _G.pool.get(Laya.Quaternion);
			cc.tween(t.transform, !0).to(e, {}, {
				easing: n,
				onUpdate: (t, e) => {
					Laya.Vector3.lerp(r, a, e, c), t.localPosition = c, Laya.Quaternion.lerp(l, i, e, h), t.localRotation = h
				}
			}).call(function() {
				_G.pool.put(r), _G.pool.put(l), _G.pool.put(c), _G.pool.put(h), o && o()
			}).start()
		}
		static tweenPosition(t, e, a, i, s = 0, n) {
			let o = _G.pool.get(Laya.Vector3);
			t.transform.localPosition.cloneTo(o);
			let r = _G.pool.get(Laya.Vector3);
			cc.tween(t.transform, !0).delay(s).to(a, {}, {
				easing: i,
				onUpdate: (t, a) => {
					Laya.Vector3.lerp(o, e.transform.localPosition, a, r), t.localPosition = r
				}
			}).call(function() {
				_G.pool.put(o), _G.pool.put(r), n && n()
			}).start()
		}
		static tweenTransform(t, e, a, i, s = 0, n) {
			let o = _G.pool.get(Laya.Vector3);
			t.transform.localPosition.cloneTo(o);
			let r = _G.pool.get(Laya.Quaternion);
			t.transform.localRotation.cloneTo(r);
			let l = _G.pool.get(Laya.Vector3),
				c = _G.pool.get(Laya.Quaternion);
			cc.tween(t.transform, !0).delay(s).to(a, {}, {
				easing: i,
				onUpdate: (t, a) => {
					Laya.Vector3.lerp(o, e.transform.localPosition, a, l), t.localPosition = l, Laya.Quaternion.lerp(r, e.transform.localRotation, a, c), t.localRotation = c
				}
			}).call(function() {
				_G.pool.put(o), _G.pool.put(r), _G.pool.put(l), _G.pool.put(c), n && n()
			}).start()
		}
		static drawToRtx(t, e, a, i, s) {
			e -= t.x, a -= t.y, e |= 0, a |= 0, s._targets = i, i.start(), Laya.RenderSprite.renders[t._renderType]._fun(t, s, e, a), s.flush(), i.end(), i.restore(), s._targets = null
		}
		static playPopup(t, e) {
			mgrRes.loadRes(t, RES_TYPE.IMAGE, function(t) {
				let a = new Laya.Sprite;
				a.texture = t, a.pivot(t.width / 2, t.height / 2).pos(e.x, e.y, !0).scale(0, 0, !0), mgrPanel.getLayerNode(PANEL_LAYER.TIP).addChild(a), cc.tween(a).parallel(cc.tween().to(.3, {
					scaleX: 1,
					scaleY: 1
				}, {
					easing: cc.Ease.backOut
				}), cc.tween().by(1, {
					y: -100
				}), cc.tween().delay(.5).to(.2, {
					alpha: 0
				})).call(function() {
					a.destroy()
				}).start()
			})
		}
		static playItemJumpFromTo(t, e, a, i) {
			let s = db.get_item_db(t);
			if (!s) return;
			let n = _G.poolManager.get(ReuseSprite);
			n.loadUrl(s.icon), mgrPanel.getLayerNode(PANEL_LAYER.TIP).addChild(n), n.pos(e.x, e.y, !0), this.playJumpTo(n, .5, a, function() {
				_G.poolManager.put(n), i && i()
			})
		}
		static playJumpTo(t, e, a, i) {
			t.alpha = 0, t.scale(0, 0, !0), cc.tween(t).parallel(cc.tween().then(cc.jumpTo(e, a.x, a.y, 200, 1)), cc.tween().to(e, {
				alpha: 1,
				scaleX: 1,
				scaleY: 1
			})).call(i).start()
		}
		static playBezierTo(t, e, a, i, s = 1, n) {
			let o = _G.poolManager.get(ReuseSprite);
			mgrPanel.getLayerNode(PANEL_LAYER.TIP).addChild(o), o.loadUrl(t), o.pos(e.x, e.y, !0), o.scale(s, s, !0), cc.tween(o, !0).then(cc.bezierFromTo(i, e, a)).call(function() {
				n && n(), _G.poolManager.put(o)
			}).start()
		}
		static isTouched(t, e) {
			let a = new Laya.Point;
			return this.getSelfGlobalPos(t, a), a.distance(Laya.stage.mouseX, Laya.stage.mouseY) < e
		}
		static setTransformVec3Prop(t, e, a, i, s) {
			let n = t[e];
			n.setValue(a, i, s), t[e] = n
		}
		static tweenTransformVec3Prop(t, e, a, i, s, n) {
			let o = t[e],
				r = o.x,
				l = o.y,
				c = o.z;
			cc.tween(t).to(a, cc.PROP.EMPTY, {
				onUpdate: function(a, h) {
					o.setValue(Mathf.lerp(r, i, h), Mathf.lerp(l, s, h), Mathf.lerp(c, n, h)), t[e] = o
				}
			}).start()
		}
	}
	UiHelper.vec2_temp = new Laya.Vector2, UiHelper.vec3_temp = new Laya.Vector3, UiHelper.point_temp = new Laya.Point, UiHelper.stopEventHandler = function(t) {
		t && t.stopPropagation && t.stopPropagation()
	};
	class SpriteBase2D extends AsyncObject {
		get isResNodeDestroyed() {
			return !!this.resNode && this.resNode.destroyed
		}
		setZorder(t) {
			this.callable ? this.resNode.zOrder = t : this.safeCall(this.setZorder, t)
		}
		get node() {
			if (this.callable) return this.resNode;
			this.logNotFinishError()
		}
		get x() {
			if (this.callable) return this.resNode.x;
			this.logNotFinishError()
		}
		set x(t) {
			this.callable ? this.resNode.x = t : this.callIfLoaded(() => {
				this.resNode.x = t
			})
		}
		get y() {
			if (this.callable) return this.resNode.y;
			this.logNotFinishError()
		}
		set y(t) {
			this.callable ? this.resNode.y = t : this.callIfLoaded(() => {
				this.resNode.y = t
			})
		}
		get scaleX() {
			return this.callable ? this.resNode.scaleX : (this.logNotFinishError(), 0)
		}
		once(t, e, a) {
			this.callable ? this.resNode.once(t, e, a) : this.safeCall(this.once, t, e, a)
		}
		on(t, e, a) {
			this.callable ? this.resNode.on(t, e, a) : this.safeCall(this.on, t, e, a)
		}
		off(t, e, a) {
			this.callable ? this.resNode.off(t, e, a) : this.safeCall(this.off, t, e, a)
		}
		offAll(t) {
			this.callable ? this.resNode.offAll(t) : this.safeCall(this.offAll, t)
		}
		runTween(t) {
			this.callable ? cc.tween(this.resNode).then(t).start() : this.safeCall(this.runTween, t)
		}
		clearTween() {
			this.callable ? cc.clearTween(this.resNode) : this.safeCall(this.clearTween)
		}
		dispose() {
			this.resNode && (this.resNode.destroy(!0), this.resNode = null), super.dispose()
		}
		get enable() {
			return this._isLoaded && this.resNode.visible && this.resNode.active
		}
		set enable(t) {
			this.callable ? (this.resNode.visible = t, this.resNode.active = t) : this.safeCall(t ? this.show : this.hide)
		}
		setName(t) {
			this.callable ? this.resNode.name = t : this.safeCall(this.setName, t)
		}
		addNodeChild(t) {
			this.callable ? t.setParent(this.resNode) : this.safeCall(this.addNodeChild, t)
		}
		addChild(t) {
			if (this.callable) return this.resNode.addChild(t), t
		}
		getChild(t) {
			return this.callable ? UiHelper.getChild(this.resNode, t) : (this.logNotFinishError(), null)
		}
		setParent(t) {
			this.callable ? t.addChild(this.resNode) : this.safeCall(this.setParent, t)
		}
		getParent() {
			return this.callable ? this.resNode.parent : (this.logNotFinishError(), null)
		}
		removeFromParent() {
			this.callable ? this.resNode.removeSelf() : this.safeCall(this.removeFromParent)
		}
		setSize(t, e) {
			this.callable ? this.resNode.size(t, e) : this.safeCall(this.setSize, t, e)
		}
		setPosition(t, e) {
			this.callable ? null == e ? this.resNode.pos(t.x, t.y, !0) : this.resNode.pos(t, e, !0) : null == e ? this.safeCall(this.setPosition, t.x, t.y) : this.safeCall(this.setPosition, t, e)
		}
		setScale(t, e) {
			this.callable ? null == e ? this.resNode.scale(t.x, t.y, !0) : this.resNode.scale(t, e, !0) : null == e ? this.safeCall(this.setScale, t.x, t.y) : this.safeCall(this.setScale, t, e)
		}
		setScaleX(t) {
			this.callable ? this.resNode.scaleX = t : this.safeCall(this.setScaleX, t)
		}
		setRotation(t) {
			this.callable ? this.resNode.rotation = t : this.safeCall(this.setRotation, t)
		}
		setAlpha(t) {
			this.callable ? this.resNode.alpha = t : this.safeCall(this.setAlpha, t)
		}
		show() {
			this.enable = !0
		}
		hide() {
			this.enable = !1
		}
		setSiblingIndex(t) {
			if (this.callable) {
				if (!this.resNode.parent) return; - 1 === t && (t = this.resNode.parent.numChildren - 1), this.resNode.parent.setChildIndex(this.resNode, t)
			} else this.safeCall(this.setSiblingIndex, t)
		}
		setTop() {
			this.setSiblingIndex(-1)
		}
		setBottom() {
			this.setSiblingIndex(0)
		}
		addComponent(t) {
			if (this.callable) return this.resNode.addComponent(t);
			this.safeCall(this.addComponent, t)
		}
		getComponent(t) {
			return this._isLoaded ? this.resNode.getComponent(t) : (this.logNotFinishError(), null)
		}
		convertToWorldSpaceOut(t, e) {
			if (this.callable) {
				let a = Laya.Point.TEMP;
				return a.setTo(t.x, t.y), this.resNode.localToGlobal(a, !1), e || (e = new Vec2), e.x = a.x, e.y = a.y, e
			}
			return this.logNotFinishError(), null
		}
	}
	var ClassUtils = Laya.ClassUtils;
	class ViewBase extends SpriteBase2D {
		constructor() {
			super(...arguments), this.resourceType = Laya.Loader.PREFAB, this._exportNodeInfo = null, this.btnsClickSound = null, this.m_MsgHandler = null, this._needClearTimer = !1
		}
		onResourceLoaded(t) {
			if (!t) return;
			let e = t.create();
			this.createFromNode(e)
		}
		createFromNode(t) {
			if (t) {
				if (this._isLoaded = !0, this.resNode = t, this._exportNodeInfo && this.loadExportNode(t, this._exportNodeInfo), this.onCreateComplete(), this.update && !this.isDisposed) {
					let t = this.resNode.getComponent(UpdateCom);
					t || (t = this.resNode.addComponent(UpdateCom)), t.update = this.update.bind(this)
				}
				return this
			}
		}
		static setClickSound(t, e) {
			this.m_buttonClickSoundName = t, this.m_toggleClickSoundName = e
		}
		static playButtonClickSound(t) {
			"" !== t && (t ? mgrSound.playSound(t) : mgrSound.playSoundIfTimeout(this.m_buttonClickSoundName, "default_click", .1))
		}
		static playToggleClickSound(t) {
			t ? mgrSound.playSound(t) : this.m_toggleClickSoundName && mgrSound.playSoundIfTimeout(this.m_toggleClickSoundName, "default_click", .1)
		}
		static getClass(t) {
			let e = ClassUtils.getClass(t);
			return e || (e = ClassUtils.getRegClass(`script/extensions/component/${t}.ts`)) && ClassUtils.regClass(t, e), e
		}
		loadExportNode(t, e) {
			let a, i, s;
			for (let o = t.numChildren - 1; o >= 0; o--) {
				if (s = e[(a = t.getChildAt(o)).name]) switch (i = a.name.substring(3), s) {
					case "Laya.Button":
						Logger.warn("LayaButton 不会自动注册点击事件");
					case "Laya.Sprite":
					case "Laya.Text":
					case "Laya.Label":
					case "Laya.Image":
					case "Laya.Box":
					case "Laya.View":
					case "Laya.TextInput":
						this[i] = a;
						break;
					default:
						var n = a.getComponent(ViewBase.getClass(s));
						let t, e;
						switch (n || (n = a.addComponent(ViewBase.getClass(s))), this[i] = n, s) {
							case "UIButton":
							case "UIToggle":
								t = `on_click_${i}`, e = this.btnsClickSound && this.btnsClickSound[i], this._bindClickFunc(t, a, e)
						}
				}
				this.loadExportNode(a, e)
			}
		}
		_bindClickFunc(t, e, a) {
			this[t] && "function" == typeof this[t] && e.on("uibutton_click", this, () => {
				ViewBase.playButtonClickSound(a), this[t]()
			})
		}
		dispose() {
			this.resNode && this._needClearTimer && this.unscheduleAllCallbacks(), super.dispose()
		}
		getChildText(t) {
			return this.getChild(t)
		}
		getChildLabel(t) {
			return this.getChild(t)
		}
		getChildSprite(t) {
			return this.getChild(t)
		}
		getChildImage(t) {
			return this.getChild(t)
		}
		registerMsg(t) {
			this.m_MsgHandler || (this.m_MsgHandler = new MsgHandler), this.m_MsgHandler.registerListeners(t, this)
		}
		startProcMsg() {
			this.m_MsgHandler && this.m_MsgHandler.startProcMsg()
		}
		stopProcMsg() {
			this.m_MsgHandler && this.m_MsgHandler.stopProcMsg()
		}
		schedule(t, e) {
			this.resNode.timerLoop(1e3 * t, this, e), this._needClearTimer = !0
		}
		scheduleOnce(t, e) {
			this.resNode.timerOnce(1e3 * t, this, e), this._needClearTimer = !0
		}
		unschedule(t) {
			this.resNode.clearTimer(this, t)
		}
		unscheduleAllCallbacks() {
			this.resNode.timer.clearAll(this)
		}
	}
	ViewBase.m_buttonClickSoundName = null, ViewBase.m_toggleClickSoundName = null;
	class ResLoader {
		constructor(t = "", e = Logger.isDebugLevel) {
			this.destroyed = !1, this.isLoaded = !1, this.isLoading = !1, this.taskName = "", this.urls = [], this.urlData = {
				prefab: [],
				d3: [],
				d2: []
			}, this.calls = [], this.resStartTime = 0, this.callStartTime = 0, this.progressCallback = null, this.completeCallback = null, t && (this.taskName = `(${t})`), this.bLog = e
		}
		get resCount() {
			return this.urls.length
		}
		get totalCallWeight() {
			let t = 0;
			for (var e = this.calls.length - 1; e >= 0; e--) t += this.calls[e].weight;
			return t
		}
		dispose() {
			this.destroyed = !0, this.urlData = null, this.urls = null, this.calls = null, this.completeCallback = null, this.progressCallback = null
		}
		setLoadingCallback(t, e) {
			this.completeCallback = t, this.progressCallback = e || _G.EMPTY_FUN
		}
		add(t, e = Laya.Loader.PREFAB) {
			if (!t) return;
			if (this.isLoading) return void Logger.error(`ResLoader${this.taskName} is loading!`);
			this.bLog && Logger.log(`ResLoader${this.taskName} add:${t} ${e}`);
			let a = this.urls;
			if (t instanceof Array)
				for (let i = 0; i < t.length; i++) {
					let s = t[i];
					"string" == typeof s ? a.push({
						url: s,
						type: e
					}) : a.push(s)
				} else "string" == typeof t ? a.push({
					url: t,
					type: e
				}) : a.push(t)
		}
		addModel(t) {
			this.add(t, RES_TYPE.PREFAB3D)
		}
		addAnimationClip(t) {
			this.add(t, RES_TYPE.ANIMATIONCLIP)
		}
		addPrefab2D(t) {
			this.add(t, RES_TYPE.PREFAB2D)
		}
		addTexture2D(t) {
			this.add(t, RES_TYPE.TEXTURE2D)
		}
		addImage(t) {
			this.add(t, RES_TYPE.IMAGE)
		}
		addBuffer(t) {
			this.add(t, RES_TYPE.BUFFER)
		}
		addCall(t, e = 1) {
			this.calls.push({
				fuc: t,
				weight: e
			})
		}
		clearDuplicateRes() {
			let t = this.urls,
				e = Object.create(null);
			for (let a = t.length - 1; a >= 0; a--) {
				let i = t[a];
				Laya.loader.getRes(i.url) ? t.splice(a, 1) : e[i.url] ? t.splice(a, 1) : e[i.url] = !0
			}
		}
		classifyRes() {
			if (this.clearDuplicateRes(), this.urlData.prefab.length > 0 || this.urlData.d2.length > 0 || this.urlData.d3.length > 0) return;
			let t = this.urls;
			for (let e = t.length - 1; e >= 0; e--) {
				let a = t[e];
				switch (a.type) {
					case RES_TYPE.PREFAB2D:
						this.urlData.prefab.push(a);
						break;
					case RES_TYPE.IMAGE:
					case RES_TYPE.TEXT:
					case RES_TYPE.JSON:
					case RES_TYPE.SOUND:
					case RES_TYPE.ATLAS:
					case RES_TYPE.BUFFER:
						this.urlData.d2.push(a);
						break;
					case RES_TYPE.PREFAB3D:
					case RES_TYPE.MATERIAL:
					case RES_TYPE.TEXTURE2D:
					case RES_TYPE.MESH:
					case RES_TYPE.ANIMATIONCLIP:
						this.urlData.d3.push(a);
						break;
					default:
						t.splice(e, 1), Logger.error(`ResLoader${this.taskName}.classifyRes 未知资源类型:${a.type}`)
				}
			}
		}
		get isEmpty() {
			return 0 == this.resCount
		}
		loadAll() {
			if (this.isLoading) return void Logger.error(`ResLoader${this.taskName} is loading!`);
			if (this.isLoading = !0, this.resStartTime = Timer.time, this.classifyRes(), 0 == this.resCount) return void this.onResLoadComplete(!0);
			let t = this.urlData.prefab.length,
				e = this.urlData.d2.length,
				a = this.urlData.d3.length,
				i = t + e + a + this.totalCallWeight,
				s = 0,
				n = 0,
				o = 0,
				r = 0,
				l = !1,
				c = () => {
					var r = s * t + n * e + o * a;
					this.onProgress(r / i)
				},
				h = t => {
					t || (l = !0), 3 == ++r && (l ? (this.onResLoadComplete(!1), Logger.error(`ResLoader${this.taskName} 资源加载错误.`)) : this.onResLoadComplete(!0))
				};
			this._loadPrefab(h, function(t) {
				s = t, c()
			}), this._load2d(h, function(t) {
				n = t, c()
			}), this._load3d(h, function(t) {
				o = t, c()
			})
		}
		_loadPrefab(t, e, a = 0) {
			if (a < this.urlData.prefab.length) {
				let i = this.urlData.prefab[a++],
					s = i => {
						i ? (e(a / this.urlData.prefab.length), this._loadPrefab(t, e, a)) : this.onComplete(!1)
					},
					n = t => {
						if (t) {
							if (t.json && t.json.loadList && t.json.loadList.length > 0) return void Laya.loader.load(t.json.loadList, Laya.Handler.create(this, s));
							s(!0)
						} else s(!1)
					};
				Laya.loader.load(i.url, Laya.Handler.create(this, n), null, i.type)
			} else t(!0)
		}
		_load2d(t, e) {
			this.urlData.d2.length > 0 ? Laya.loader.load(this.urlData.d2, Laya.Handler.create(this, t), Laya.Handler.create(this, e)) : t(!0)
		}
		_load3d(t, e) {
			this.urlData.d3.length > 0 ? Laya.loader.create(this.urlData.d3, Laya.Handler.create(this, t), Laya.Handler.create(this, e)) : t(!0)
		}
		loadOneByOne(t = 1) {
			this.isLoading ? Logger.error(`ResLoader${this.taskName} is loading!`) : (this.isLoading = !0, this.resStartTime = Timer.time, this.clearDuplicateRes(), this._loadOneByOne(1e3 * t))
		}
		_loadOneByOne(t) {
			if (this.destroyed) return;
			let e = this.urls.shift();
			e ? mgrRes.loadRes(e.url, e.type, a => {
				a ? Laya.timer.once(t, this, this._loadOneByOne, [t]) : (Logger.error(`ResLoader${this.taskName}.loadOneByOne error, url:${e.url}`), this.onResLoadComplete(!1))
			}) : this.onResLoadComplete(!0)
		}
		onResLoadComplete(t) {
			this.bLog && Logger.log(`ResLoader 资源加载结束:${t}，耗时：${Mathf.round(Timer.time-this.resStartTime,2)}`), t ? (this.bLog && Logger.log(`ResLoader${this.taskName} 开始执行call!`), this.callStartTime = Timer.time, this._processCalls()) : this.onComplete(!1)
		}
		_processCalls(t = 0) {
			if (this.destroyed || !this.calls) return void(this.bLog && Logger.log(`ResLoader${this.taskName} _processCalls already dispose!`));
			if (this.curCallIndex = t, t >= this.calls.length) return this.onProgress(1), void this.onComplete(!0);
			this.bLog && Logger.log(`ResLoader${this.taskName} 执行索引：`, t);
			let e = 0;
			for (var a = 0; a < t; a++) e += this.calls[a].weight;
			this.onProgress((e + this.resCount) / (this.totalCallWeight + this.resCount));
			let i = this.calls[t];
			try {
				let e = () => {
					Laya.timer.frameOnce(1, this, this._processCalls, [t + 1])
				};
				i.fuc(e)
			} catch (e) {
				Logger.catchError(`ResLoader${this.taskName}._processCalls index:${t}`, e), this.onComplete(!1)
			}
		}
		setParent(t) {
			this.parent && Logger.warn(`ResLoader${this.taskName}.setParent: parent already exists.`), this.parent = t
		}
		setCallProgress(t) {
			if (this.curCallIndex < this.calls.length) {
				let a = 0;
				for (var e = 0; e < this.curCallIndex; e++) a += this.calls[e].weight;
				a += this.calls[this.curCallIndex].weight * t, this.onProgress((a + this.resCount) / (this.totalCallWeight + this.resCount))
			}
		}
		onProgress(t) {
			this.progressCallback && this.progressCallback(t), this.parent && this.parent.setCallProgress(t), this.bLog && Logger.log(`ResLoader${this.taskName} 加载进度: [${Mathf.round(t,2)}]`)
		}
		onComplete(t) {
			if (Logger.log(`ResLoader${this.taskName} 执行完成，耗时：${Mathf.round(Timer.time-this.callStartTime,2)}`), Logger.log(`ResLoader${this.taskName} 总耗时：${Mathf.round(Timer.time-this.resStartTime,2)}`), this.isLoaded = !0, this.completeCallback) try {
				this.completeCallback(t)
			} catch (e) {
				Logger.catchError(`ResLoader${this.taskName}.onComplete[${t}]`, e)
			}
			this.dispose()
		}
	}
	class PanelBase extends ViewBase {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.UI, this.panelStyle = 2, this.isFocus = !1, this.bCloseMsg = !1, this.bResetRootNode = !0
		}
		create(t) {
			if (this._isLoaded) return void(t && t(!1));
			if (this._isLoading) return void(t && t(!1));
			if (!this.resourceName) return Logger.error("AsyncObject.create: can't find resourceName."), void(t && t(!1));
			this._isLoading = !0;
			let e = mgrRes.tryLoadRes(this.resourceName);
			e ? this.onResLoaded(e, t) : (Logger.debug("异步加载资源:", this.resourceName), mgrRes.loadRes(this.resourceName, this.resourceType, e => {
				this.onResLoaded(e, t)
			}))
		}
		onResLoaded(t, e) {
			this._isLoading = !1, t ? this.isDisposed ? e && e(!0) : (this._isLoaded = !0, this.fCreateCallback = e, this.onResourceLoaded(t), this.isDisposed || this.processDelayCalls()) : (e && e(!1), this.onResourceLoadedFail())
		}
		onCreateComplete() {
			let t = new ResLoader(this.resourceName);
			this.addPreloadRes(t), t.setLoadingCallback(() => {
				this.fCreateCallback && this.fCreateCallback(!0), mgrPanel.addPanel(this), this.bResetRootNode && this.resNode.size(_G.canvasFitWidth, _G.canvasFitHeight).pos(_G.left, _G.top), this.mask && this.mask.size(_G.canvasWidth, _G.canvasHeight).pos(-_G.left, -_G.top, !0), this.openAndCloseAnimEnabled && this.onDialogOpenAnim(this.onOpenComplete.bind(this)), this.buildUi(), this.openAndCloseAnimEnabled || this.onOpenComplete()
			}), t.loadAll()
		}
		onOpenComplete() {
			this.regGuide()
		}
		regGuide() {}
		addPreloadRes(t) {}
		onFocus(t) {
			this.isFocus = t
		}
		close(t) {
			!t && this.openAndCloseAnimEnabled ? this.onDialogCloseAnim(this._close.bind(this)) : this._close()
		}
		_close() {
			this.isLoaded ? mgrPanel.closePanel(this) : this.dispose(), this.bCloseMsg && _G.sendMsg(BASE_MSG.UI_PANEL_CLOSED, this)
		}
		onDialogOpenAnim(t) {
			let e = this.mask;
			e && (e.alpha = 0, Laya.Tween.to(e, cc.PROP.ALPHA1, 300));
			let a = this.bg;
			a && (a.scale(0, 1.4, !0).alpha = 0, Laya.Tween.to(a, PanelBase.OPEN_PROP, 400, Laya.Ease.backOut)), this.scheduleOnce(.4, t)
		}
		onDialogCloseAnim(t) {
			let e = this.mask;
			e && Laya.Tween.to(e, {
				alpha: 0
			}, 150);
			let a = this.bg;
			a && Laya.Tween.to(a, PanelBase.CLOSE_PROP, 200, Laya.Ease.backIn), this.scheduleOnce(.2, t)
		}
	}
	PanelBase.OPEN_PROP = {
		scaleX: 1,
		scaleY: 1,
		alpha: 1
	}, PanelBase.CLOSE_PROP = {
		scaleX: 1.4,
		scaleY: 0,
		alpha: 0
	};
	const tip_str = [".", "..", "..."];
	class PanelFadeIn extends PanelBase {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.resourceName = "PanelFadeIn", this.mask = null, this.text = null, this.m_tipString = "", this.m_tipDeltaTime = 0, this.m_tipIndex = 0
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), UiHelper.registerTouchEvent(e, UiHelper.stopEventHandler, UiHelper.stopEventHandler, UiHelper.stopEventHandler);
			let a = new Laya.Sprite;
			e.addChild(a), a.size(_G.canvasWidth, _G.canvasHeight), a.graphics.drawRect(0, 0, _G.canvasWidth, _G.canvasHeight, "#000000"), this.mask = a;
			let i = new Laya.Label;
			e.addChild(i), i.color = "#ffffff", i.centerX = 0, i.centerY = -100, i.fontSize = 30, this.text = i, this.createFromNode(e)
		}
		buildUi() {
			PanelFadeIn.isWorking = !0, this.mask.alpha = 0, this.fadeIn()
		}
		dispose() {
			PanelFadeIn.isWorking = !1, PanelFadeIn.bCloseMsg = !1, super.dispose()
		}
		update(t) {
			tip_str && this.m_tipString && (this.m_tipDeltaTime -= t, this.m_tipDeltaTime <= 0 && (this.m_tipDeltaTime = .5, this.text.text = this.m_tipString + tip_str[this.m_tipIndex++ % 3]))
		}
		fadeIn() {
			let t, e = this.context;
			e.maskColor && this.mask.graphics.drawRect(0, 0, 100, 500, e.maskColor), e.tip ? (t = .7, this.text.text = e.tip, this.m_tipString = e.tip, this.text.alpha = 0, cc.tween(this.text).delay(1).to(.2, cc.PROP.ALPHA1)) : (t = 1, this.text.text = "", this.m_tipString = "");
			let a = e.fadinTime || .2;
			cc.tween(this.mask).delay(1).to(a, {
				alpha: t
			}).start(), this.startLoading()
		}
		startLoading() {
			let t = this.context.loader;
			t ? (t.setLoadingCallback(this.beforeOpenPanel.bind(this)), t.loadAll()) : this.beforeOpenPanel()
		}
		beforeOpenPanel() {
			let t = this.context;
			t.callbackBeforOpen ? t.callbackBeforOpen().then(() => this.openPanel()) : this.openPanel()
		}
		openPanel() {
			let t = this.context;
			t.panelClass ? (PanelFadeIn.isOpening = !0, mgrPanel.openPanel(t.panelClass, t.context, PanelFadeIn.bCloseMsg, () => this.fadeOut())) : this.fadeOut()
		}
		fadeOut() {
			Laya.Tween.to(this.mask, {
				alpha: 0
			}, 200, Laya.Ease.linearNone, Laya.Handler.create(this, this.close))
		}
	}
	var PANEL_LAYER;
	PanelFadeIn.isWorking = !1, PanelFadeIn.isOpening = !1, PanelFadeIn.bCloseMsg = !1,
		function(t) {
			t[t.BOTTOM = 0] = "BOTTOM", t[t.UI = 1] = "UI", t[t.DIALOG = 2] = "DIALOG", t[t.TIP = 3] = "TIP", t[t.FUNCTION = 4] = "FUNCTION", t[t.TOP = 5] = "TOP"
		}(PANEL_LAYER || (PANEL_LAYER = {}));
	const CLASS_KEY = "__mgr_class__",
		FLAG_OPENING = "__mgr_flag_open__",
		FLAG_LOADED = "__mgr_flag_loaded__";
	class mgrPanel extends _mgrBase {
		static onload() {
			if (this.isLoaded) return;
			this.panelQueue = UIRoot.instance.owner.addComponent(PanelQueue);
			let t = PANEL_LAYER.TOP + 1;
			UIRoot.instance.createLayerNode(t);
			for (let e = 0; e < t; e++) this.view_stack.push([]);
			this.isLoaded = !0
		}
		static onDestory() {
			this.isLoaded = !1, this.view_stack = [
				[],
				[],
				[],
				[],
				[]
			]
		}
		static getLayerNode(t) {
			return UIRoot.instance.getLayerNode(t)
		}
		static pushStack(t, e) {
			let a = this.view_stack[e];
			a ? a.push(t) : Logger.error(`push panel invalid layer: ${e}`)
		}
		static popStack(t) {
			let e = this.view_stack[t];
			if (e) return e.pop();
			Logger.error(`pop panel invalid layer:${t}}`)
		}
		static peekStack(t, e) {
			let a = this.view_stack[t];
			if (a) {
				if (null == e) return a[a.length - 1];
				for (var i = e; i >= 0; i--)
					if (a[i]) return a[i];
				return null
			}
			Logger.error(`pop panel invalid layer:${t}}`)
		}
		static removeAndDispose(t) {
			if (t) {
				let e = this.view_stack[t.panelLayer],
					a = -1;
				for (let i = 0; i < e.length; i++)
					if (e[i] === t) {
						t[CLASS_KEY][FLAG_OPENING] = !1, e.splice(i, 1), a = i;
						break
					} return a < 0 && Logger.error(`can't remove panel:${t.resourceName} in layer:${t.panelLayer}`), t.dispose(), a
			}
			return -1
		}
		static closePanel(t) {
			if (!t || !t.isLoaded) return;
			t.isFocus && t.onFocus(!1);
			let e = t.panelLayer,
				a = t.panelStyle,
				i = this.removeAndDispose(t);
			if (i > 0) {
				let t = this.peekStack(e, i - 1);
				if (!t) return;
				0 == t.panelStyle || (t.panelStyle == a ? t.show() : 1 == a && t.show()), this.peekStack(e) === t && t.onFocus(!0)
			}
		}
		static hasLoaded(t) {
			return !!t[FLAG_LOADED]
		}
		static getPanelClass(t) {
			return "string" == typeof t ? _G.requireModule(t) : t
		}
		static openPanel(t, e, a = !1, i) {
			let s = this.getPanelClass(t),
				n = new s(e);
			this.openPanelInstance(n, s, a, i)
		}
		static openPanelInstance(t, e, a = !1, i) {
			let s = this.getPanelClass(e);
			t[CLASS_KEY] = s, t.bCloseMsg = a, t.create(function(e) {
				e && (s[FLAG_LOADED] = !0), i && i(e), Logger.debug("打开:" + t.resourceName, e)
			})
		}
		static openPanelWithFadeIn(t, e, a) {
			let i = this.getPanelClass(t);
			if (this.hasLoaded(i)) this.openPanel(i, e, !1, a);
			else {
				let t;
				t = {
					panelClass: i,
					context: e,
					tip: ""
				}, a && (t.callbackBeforOpen = function() {
					return new Promise(function(t, e) {
						a(!0), t()
					})
				}), PanelFadeIn.isWorking ? PanelFadeIn.isOpening ? (Logger.error("PanelFadeIn.isOpening."), this.openPanel(i, e, !1, a)) : (PanelFadeIn.bCloseMsg = !0, this.openPanelWithPriority(PanelFadeIn, t, void 0, !1), Logger.warn("mgrPanel.openPanelWithFadeIn: PanelFadeIn is opening.")) : this.openPanel(PanelFadeIn, t)
			}
		}
		static openPanelWithPriority(t, e, a = 0, i = !0) {
			this.panelQueue.openPanelWithPriority(t, e, a, i)
		}
		static openPanelWithSingleton(t, e, a) {
			let i = this.getPanelClass(t),
				s = this.findPanel(i);
			if (s) {
				a && a(!0), s.setContext(e), s.setTop(), s.show();
				let t = this.view_stack[s.panelLayer],
					i = t.indexOf(s);
				i >= 0 && (t.splice(i, 1), t.push(s))
			} else {
				if (i[FLAG_OPENING]) return void Logger.debug(`${i} is opening`);
				i[FLAG_OPENING] = !0, this.openPanel(i, e, void 0, function(t) {
					i[FLAG_OPENING] = !1, a && a(t)
				})
			}
		}
		static findPanel(t, e) {
			for (let a = 0; a < this.view_stack.length; a++)
				if (null == e || e == a) {
					const e = this.view_stack[a];
					for (let a = 0; a < e.length; a++) {
						const i = e[a];
						if (i[CLASS_KEY] == t) return i
					}
				} return null
		}
		static findViewByName(t) {
			let e = this.getPanelClass(t);
			return this.findPanel(e)
		}
		static addPanel(t) {
			if (!t.isLoaded) return void Logger.error("panel has not loaded, please create first!");
			let e = t.panelLayer,
				a = t.panelStyle,
				i = this.peekStack(e);
			this.pushStack(t, e), t.setParent(this.getLayerNode(e)), i && (0 == i.panelStyle || (i.panelStyle == a ? i.hide() : 1 == a && i.hide()), i.onFocus(!1)), t.onFocus(!0)
		}
		static disposeAllPanel() {
			for (let t = 0; t < this.view_stack.length; t++) {
				const e = this.view_stack[t];
				for (let t = 0; t < e.length; t++) {
					const a = e[t];
					a[CLASS_KEY][FLAG_OPENING] = !1, a.dispose()
				}
				this.view_stack[t] = []
			}
		}
		static closeTop(t) {
			if (null == t)
				for (let t = this.view_stack.length - 1; t >= 0; t--) {
					const e = this.view_stack[t];
					for (let t = e.length - 1; t >= 0; t--) {
						const a = e[t];
						if (a.isLoaded) return a.close(), void Logger.debug("close top:", a.resourceName)
					}
				} else {
					const e = this.view_stack[t];
					for (let t = e.length - 1; t >= 0; t--) {
						const a = e[t];
						if (a.isLoaded) return a.close(), void Logger.debug("close top:", a.resourceName)
					}
				}
		}
		static closeLayer(t) {
			for (let e = this.view_stack.length - 1; e >= 0; e--)
				if (null == t || e == t) {
					const t = this.view_stack[e];
					for (let e = t.length - 1; e >= 0; e--) {
						const a = t[e];
						a.isLoaded && a.close()
					}
				}
		}
		static debugPanels() {
			console.log("------ debug panels start ------");
			for (let t = 0; t < this.view_stack.length; t++) {
				const e = this.view_stack[t];
				for (let a = 0; a < e.length; a++) {
					const i = e[a];
					console.log(`layer:[${t}]  name:[${i.resourceName}] active:[${i.enable}]`)
				}
			}
			console.log("------ debug panels end ------")
		}
	}
	mgrPanel.isLoaded = !1, mgrPanel.view_stack = [];
	class mgrScene extends _mgrBase {
		static onLoad() {}
		static get isBusy() {
			return this._isBusy
		}
		static runScene(t, e, a) {
			Logger.log("mgrScene startRun."), this._isBusy ? Logger.error("mgr scene is busy") : (this._isBusy = !0, e ? (mgrPanel.isLoaded || mgrPanel.onload(), mgrPanel.openPanelWithSingleton(e, void 0, e => {
				this.startLoading(t, a)
			})) : this.startLoading(t, a))
		}
		static startLoading(t, e) {
			let a;
			_G.sendMsg(BASE_MSG.RES_LOAD_START, "收集能量"), this.runningScene && (this.runningScene.onExit(), this.runningScene = null);
			try {
				a = new t
			} catch (t) {
				return void Logger.error("mgrScene.runScene:", t)
			}
			this.nextScene = a, this.nextSceneparams = e;
			let i = a.getResLoader();
			null == i ? this.onResComplete(!0) : (i.setLoadingCallback(this.onResComplete.bind(this), this.onResProgress.bind(this)), i.loadAll(), Logger.log("mgrScene 开始加载."))
		}
		static onResProgress(t) {
			_G.sendMsg(BASE_MSG.RES_LOAD_PROGRESS, t)
		}
		static onResComplete(t) {
			if (Logger.log("mgrScene 加载完成.", t), t) {
				this.runningScene = this.nextScene, this.nextScene = null;
				let t = this.nextSceneparams;
				this.nextSceneparams = null, this._isBusy = !1, _G.sendMsg(BASE_MSG.RES_LOAD_END), this.runningScene.onEnter(t)
			} else Logger.error("mgrSceen.onResComplete error.")
		}
	}
	mgrScene._isBusy = !1, mgrScene.runningScene = null, mgrScene.nextScene = null, mgrScene.nextSceneparams = null;
	class SceneBase {
		constructor() {
			this.msgHandler = null
		}
		registerMsg(t) {
			this.msgHandler || (this.msgHandler = new MsgHandler), this.msgHandler.registerListeners(t), this.msgHandler.startProcMsg()
		}
		stopMsgHandler() {
			this.msgHandler && this.msgHandler.stopProcMsg()
		}
	}
	let merged_cfg = !0,
		compress_cfg = !0;
	class CfgLoader {
		static init(t) {
			let e = e => {
				this.loaded = !0, _G.sendMsg(BASE_MSG.CFG_LOAD_FINISH), t && t(e)
			};
			this.loaded ? e(!0) : (merged_cfg ? compress_cfg ? this.loadFromText(e) : this.loadFromJson(e) : console.error("暂时未接入非合并配置表的读取方式!!!"), this.loaded = !0, _G.sendMsg(BASE_MSG.CFG_LOAD_FINISH))
		}
		static loadFromJson(t) {
			mgrRes.loadRes("res/cfg/allCfgDb.json", Laya.Loader.JSON, e => {
				e && this.initCfg(e), t(!!e)
			})
		}
		static loadFromText(t) {
			mgrRes.loadRes("res/cfg/allCfgDb.txt", RES_TYPE.BUFFER, e => {
				if (e) {
					let t = Tools.decompressArrToStr(e),
						a = JSON.parse(t);
					this.initCfg(a)
				}
				t(!!e)
			})
		}
		static initCfg(t) {
			db.setAllDbs(t), this.processCfg()
		}
		static processCfg() {
			let t = db.get_item_db_map(),
				e = db.get_shoe_part_db_map();
			Tools.forEachMap(e, function(e, a) {
				t[e] && console.error("物品重复"), a.type = 2, a.subType = 2, t[e] = a
			});
			let a = db.get_quest_db_map(),
				i = db.get_color_egg_db_map();
			Tools.forEachMap(i, function(t, e) {
				a[t] && console.error("任务重复"), e.type = 11, a[t] = e
			})
		}
	}
	CfgLoader.loaded = !1;
	class _mBase {
		constructor(t) {
			this.m_MsgHandler = null, this.m_MsgHandler = t
		}
		start() {}
		stop() {}
		registerMsg(t) {
			this.m_MsgHandler ? (this.m_MsgHandler.registerListeners(t), this.m_MsgHandler.startProcMsg()) : Logger.error("找不到MsgHandler")
		}
		startProcMsg() {
			this.m_MsgHandler && this.m_MsgHandler.startProcMsg()
		}
		stopProcMsg() {
			this.m_MsgHandler && this.m_MsgHandler.stopProcMsg()
		}
		sendMsg(t, e) {
			this.m_MsgHandler && this.m_MsgHandler.sendMsg(t, e)
		}
	}
	class mUp extends _mBase {
		constructor() {
			super(...arguments), this.allUpDbs = []
		}
		onload() {
			this.loadData(), this.m_data || (this.m_data = {
				levels: {},
				exps: {},
				autoUp: {
					byItem: {},
					byGoal: {}
				}
			}, this.saveData()), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				[BASE_MSG.GOAL_STATE_CHANGE]: this.onMsgGoalStateChange.bind(this)
			})
		}
		loadData() {
			this.m_data = FileRecord.getData("up_data")
		}
		saveData() {
			FileRecord.setData("up_data", this.m_data)
		}
		onMsgItemChange(t) {
			if (t.changeCount > 0) {
				let e = this.m_data.autoUp.byItem[t.itemId];
				if (e)
					for (let a = e.length - 1; a >= 0; a--) e[a].costCount <= t.count && this.tryAutoLvupAttrByItem(t.itemId, e[a])
			}
		}
		onMsgGoalStateChange(t) {
			if (t.isDone) {
				let e = this.m_data.autoUp.byGoal[t.goalId];
				if (e)
					for (let a = e.length - 1; a >= 0; a--) this.tryAutoLvupAttrByGoal(t.goalId, e[a])
			}
		}
		getUpId(t, e) {
			let a = db.get_item_db(t);
			return a ? a[e] : null
		}
		setDbs(t, e) {
			this.allUpDbs[t] = e
		}
		initDbGetter(t) {
			this._upGetter = t
		}
		getAllUp(t, e = "baseUp") {
			let a = db.get_item_db(t),
				i = a[e];
			if (!i) return null;
			let s = this.allUpDbs[a.subType];
			return s ? s[i] : (Logger.error(`mUp.setDbs first! type:${a.subType}.`), null)
		}
		getMaxLevel(t, e = "baseUp") {
			return this.getAllUp(t, e).length - 1
		}
		getUpDb(t, e, a = "baseUp") {
			null == e && (e = this.getLevel(t, a));
			let i = this.getAllUp(t, a);
			if (i) {
				return i[e]
			}
			return null
		}
		getLevel(t, e = "baseUp") {
			let a = this.getUpId(t, e);
			return this.m_data.levels[a] || 0
		}
		isUnlock(t, e = "baseUp") {
			return this.getLevel(t, e) > 0
		}
		isMax(t, e = "baseUp") {
			return this.getLevel(t, e) >= this.getMaxLevel(t, e)
		}
		isUpable(t, e = "baseUp", a = !1) {
			let i = db.get_item_db(t);
			if (!i) return !1;
			let s = i[e];
			if (!s) return !1;
			if (this.isMax(t, e)) return !1;
			if (a) return !0;
			let n = this.getUpDb(t, void 0, e);
			if (n.goalId && BaseFacade.mGoal.exists(n.goalId) && !BaseFacade.mGoal.isDone(n.goalId)) return !1;
			let o = this.m_data.exps[s];
			if (null == o) {
				if (this.getLackItemId(n)) return !1
			} else if (o < n.reqCnt1) return !1;
			return !0
		}
		tryActive(t, e = "baseUp") {
			let a = this.getUpId(t, e);
			if (null == this.m_data.levels[a]) {
				let a = this.getAllUp(t, e);
				if (a) {
					let i = 0;
					"" !== a[0].reqId1 || 0 !== a[0].reqCnt1 || a[0].goalId ? this.registerAutoUp(t, e, a[i]) : (this.lvupAttr(t, e), i = 1);
					for (let t = 0; t < a.length; t++) a[t].goalId && BaseFacade.mGoal.register(a[t].goalId, {
						type: "",
						data: ""
					})
				}
			}
		}
		registerAutoUp(t, e, a) {
			let i = this.m_data.autoUp;
			if (!a.reqId1 || !a.goalId)
				if (a.reqId1) {
					let s = i.byItem[a.reqId1],
						n = {
							itemId: t,
							attrName: e,
							costCount: a.reqCnt1
						};
					if (null == s) i.byItem[a.reqId1] = [n];
					else {
						for (let i = s.length - 1; i >= 0; i--) {
							let n = s[i];
							if (n.itemId == t && n.attrName == e) return void Logger.error(`registerAutoUp reqId:[${a.reqId1}] is exists. itemId:[${t}] attrName:[${e}]`)
						}
						s.push(n)
					}
				} else if (a.goalId) {
				let s = i.byGoal[a.goalId],
					n = {
						itemId: t,
						attrName: e
					};
				if (null == s) i.byGoal[a.goalId] = [n];
				else {
					for (let i = s.length - 1; i >= 0; i--) {
						let n = s[i];
						if (n.itemId == t && n.attrName == e) return void Logger.error(`registerAutoUp goalId:[${a.goalId}] is exists. itemId:[${t}] attrName:[${e}]`)
					}
					s.push(n)
				}
			}
		}
		addExp(t, e = "baseUp", a) {
			let i = this.getUpId(t, e),
				s = this.m_data.exps,
				n = s[i] || 0;
			n += a, s[i] = n, this.saveData(), this.onUpStateChange(t, e, null, n)
		}
		getExp(t, e = "baseUp") {
			let a = this.getUpId(t, e);
			return this.m_data.exps[a] || 0
		}
		lvupAttr(t, e = "baseUp", a = !1) {
			return !!this.isUpable(t, e, a) && this._produce(t, e, a)
		}
		tryAutoLvupAttrByItem(t, e) {
			if (this.lvupAttr(e.itemId, e.attrName)) {
				let a = this.getLevel(e.itemId, e.attrName),
					i = this.getUpDb(e.itemId, a, e.attrName),
					s = this.m_data.autoUp.byItem[t],
					n = s.indexOf(e);
				n >= 0 ? s.splice(n, 1) : Logger.error(`找不到自动升级数据[item] upItem:${e.itemId} attr:${e.attrName}`), this.saveData(), i.autoUp && a !== this.getMaxLevel(e.itemId, e.attrName) && this.registerAutoUp(e.itemId, e.attrName, i)
			} else Logger.error("自动升级是一定会成功的.")
		}
		tryAutoLvupAttrByGoal(t, e) {
			if (this.lvupAttr(e.itemId, e.attrName)) {
				let a = this.getLevel(e.itemId, e.attrName),
					i = this.getUpDb(e.itemId, a, e.attrName),
					s = this.m_data.autoUp.byGoal[t],
					n = s.indexOf(e);
				n >= 0 ? s.splice(n, 1) : Logger.error(`找不到自动升级数据[goal] upItem:${e.itemId} attr:${e.attrName}`), this.saveData(), i.autoUp && a !== this.getMaxLevel(e.itemId, e.attrName) && this.registerAutoUp(e.itemId, e.attrName, i)
			} else Logger.error("自动升级是一定会成功的")
		}
		_produce(t, e, a) {
			let i = this.getUpDb(t, void 0, e);
			i.goalId && BaseFacade.mGoal.exists(i.goalId) && BaseFacade.mGoal.unregister(i.goalId);
			let s = this.getUpId(t, e),
				n = this.m_data.exps[s],
				o = this.m_data.levels,
				r = null;
			if (a || (null == n ? i.reqId1 && BaseFacade.mItem.subItem(i.reqId1, i.reqCnt1, 8) : (this.m_data.exps[s] = 0, r = 0), i.reqId2 && BaseFacade.mItem.subItem(i.reqId2, i.reqCnt2, 8)), o[s] ? o[s]++ : o[s] = 1, this.saveData(), this.onUpStateChange(t, e, o[s], r), BaseFacade.mGoal.commit(BASE_ACTION_ID.LEVEL_UP, o[s], s, 2), i.commitKey && (BaseFacade.mGoal.commit(BASE_ACTION_ID.LEVEL_UP_KEY, 1, i.commitKey), BaseFacade.mGoal.commit(BASE_ACTION_ID.LEVEL_UP_KEY_MAX, o[s], i.commitKey, 2)), i.dropId) {
				let t = BaseFacade.mDrop.makeDrop(i.dropId);
				for (let e = 0; e < t.length; e++) {
					const a = t[e];
					BaseFacade.mItem.addItem(a.itemId, a.count, 8)
				}
			}
			return i.statistics && GameStatistics.statisCommonEvent(i.statistics), !0
		}
		getLackItemId(t) {
			return BaseFacade.mItem.enoughItem(t.reqId1, t.reqCnt1) ? t.reqId2 ? BaseFacade.mItem.enoughItem(t.reqId2, t.reqCnt2) ? null : t.reqId2 : null : t.reqId1
		}
		onUpStateChange(t, e, a, i) {
			let s = _G.pool.getObject("UpChangeEvent");
			s.itemId = t, s.attr = e, s.level = a, s.exp = i, this.sendMsg(BASE_MSG.UP_STATE_CHANGE, s), _G.pool.put(s)
		}
		getGoalId(t, e, a = "baseUp") {
			if (null == e) {
				let e = this.getNextGoalLevel(t, null, a);
				return e >= 0 ? this.getUpDb(t, e, a).goalId : null
			}
			return this.getUpDb(t, e, a).goalId
		}
		checkGoal(t, e, a = "baseUp") {
			let i = this.getUpDb(t, e, a);
			return !i.goalId || !BaseFacade.mGoal.exists(i.goalId) || BaseFacade.mGoal.isDone(i.goalId)
		}
		getNextGoalLevel(t, e, a = "baseUp") {
			null == e && (e = this.getLevel(t, a));
			let i = this.getMaxLevel(t, a) - 1;
			for (let s = e; s <= i; s++)
				if (!this.checkGoal(t, s, a)) return s;
			return -1
		}
	}

	function sort_item_id_by_order(t, e) {
		return Tools.sort_db_by_order(db.get_item_db(t), db.get_item_db(e))
	}
	class mItem extends _mBase {
		constructor() {
			super(...arguments), this.uid = "", this._bNeedInited = !1
		}
		onload() {
			this.loadData(), this.m_data || (this._bNeedInited = !0, this.m_data = {}), this.registerMsg({
				[BASE_MSG.ITEM_ADD]: this.onMsgItemAdd.bind(this)
			})
		}
		start() {
			this._bNeedInited && this.resetItems()
		}
		resetItems() {
			let t = this.m_data,
				e = db.get_item_db_map();
			Tools.forEachMap(e, (e, a) => {
				t[e] = a.initCount, a.initCount > 0 && this.tryActiveUp(e)
			}), this.m_data = t, this.saveData()
		}
		loadData() {
			this.m_data = FileRecord.getData("items_data")
		}
		saveData() {
			FileRecord.setData("items_data", this.m_data)
		}
		onMsgItemAdd(t) {
			this.addItem(t.itemId, t.count, t.reason), _G.sendMsg(BASE_MSG.UI_SHOW_ITEMS, t)
		}
		getAllItemInBag() {
			return this.m_data
		}
		getItemByType(t, e, a) {
			let i = [],
				s = this.getAllItemInBag();
			if (s) {
				let n;
				Tools.forEachMap(s, (s, o) => {
					o > 0 && (n = db.get_item_db(s)).type == t && (null == e ? i.push(s) : e == n.subType && (null == a ? i.push(s) : a == n.gid && i.push(s)))
				})
			}
			return i
		}
		static getAllItem(t, e, a) {
			let i = [],
				s = db.get_item_db_map();
			return s && Tools.forEachMap(s, (s, n) => {
				n.type == t && (null == e ? i.push(s) : e == n.subType && (null == a ? i.push(s) : a == n.gid && i.push(s)))
			}), i
		}
		getItemCountByType(t, e, a) {
			let i = 0,
				s = this.getAllItemInBag();
			if (s) {
				let n;
				Tools.forEachMap(s, (s, o) => {
					o > 0 && (n = db.get_item_db(s)).type == t && (null == e ? i++ : e == n.subType && (null == a ? i++ : a == n.gid && i++))
				})
			}
			return i
		}
		getItemCount(t) {
			return BaseFacade.mAutoIncreaseItem.refresh(t), this.m_data[t] || 0
		}
		enoughItem(t, e) {
			return e <= 0 || this.getItemCount(t) >= e
		}
		isOwned(t) {
			return this.enoughItem(t, 1)
		}
		addItem(t, e, a) {
			if (null == e) return Logger.error("add item null count"), !1;
			if (e <= 0) return !1;
			let i = this.getItemCount(t);
			0 == i && this.tryActiveUp(t);
			let s = db.get_item_db(t);
			if (s.autoSell) {
				if (0 != i) return void this.autoSellItem(t, e);
				this.autoSellItem(t, e - 1), e = 1
			}
			let n = i + e;
			this.m_data[t] = n, this.saveData();
			let o = _G.pool.getObject("ItemChangeEvent");
			return o.uid = this.uid, o.itemId = t, o.count = n, o.lastCount = i, o.changeCount = e, o.reason = a, o.itemDb = s, BaseFacade.mSwitch.active(s.switch), BaseFacade.mGoal.commit(BASE_ACTION_ID.ITEM_GET, e, t), a && 1 == s.type && GameStatistics.statisOnAddItemAmount(parseInt(t), e, a), this.sendMsg(BASE_MSG.ITEM_CHANGE, o), _G.pool.put(o), !1
		}
		autoSellItem(t, e) {
			let a = db.get_item_db(t);
			return !!a.sellItemId && (this.addItem(a.sellItemId, a.sellPrice * e, 0), !0)
		}
		tryActiveUp(t) {
			return 4 == db.get_item_db(t).type && (BaseFacade.mUp.tryActive(t), !0)
		}
		subItem(t, e, a) {
			if (e <= 0) return !0;
			if (!t) return !1;
			let i = this.getItemCount(t);
			if (i < e) return !1;
			let s = i - e;
			this.m_data[t] = s, this.saveData();
			let n = db.get_item_db(t),
				o = _G.pool.getObject("ItemChangeEvent");
			return o.uid = this.uid, o.itemId = t, o.count = s, o.lastCount = i, o.changeCount = -e, o.reason = a, o.itemDb = n, BaseFacade.mGoal.commit(BASE_ACTION_ID.ITEM_USE, e, t), a && 1 == n.type && GameStatistics.statisOnSubItemAmount(parseInt(t), e, a), this.sendMsg(BASE_MSG.ITEM_CHANGE, o), _G.pool.put(o), !0
		}
		sellItem(t, e) {
			if (null == e && (e = this.getItemCount(t)), this.subItem(t, e, 1)) {
				let a = db.get_item_db(t);
				a.sellItemId && this.addItem(a.sellItemId, a.sellPrice * e, 1)
			}
		}
		useItem(t, e) {
			if (this.enoughItem(t, e)) {
				let a = {
					uid: this.uid,
					itemId: t,
					count: e
				};
				this.sendMsg(BASE_MSG.ITEM_USE, a)
			}
		}
		setItem(t, e) {
			if (e < 0) return;
			if (!t) return;
			let a = this.getItemCount(t);
			if (a == e) return;
			this.m_data[t] = e, this.saveData();
			let i = db.get_item_db(t),
				s = {
					uid: this.uid,
					itemId: t,
					count: e,
					lastCount: a,
					changeCount: e - a,
					itemDb: i
				};
			this.sendMsg(BASE_MSG.ITEM_CHANGE, s)
		}
		addWrapItem(t, e, a) {
			let i, s = this.unpackItemToMap(t, e),
				n = Object.keys(s),
				o = n.length;
			for (let t = 0; t < o; t++)(i = s[n[t]]) > 0 ? this.addItem(n[t], i, a) : delete s[n[t]];
			return s
		}
		addWrapItemToList(t, e, a) {
			let i = this.unpackItemToList(t, e),
				s = i.length;
			for (let t = 0; t < s; t++) this.addItem(i[t].itemId, i[t].count, a) && (i[t].bSell = !0);
			return i
		}
		getWrapItem(t, e) {
			return this.unpackItemToList(t, e, [], !1)
		}
		getWrapItemPreview(t, e) {
			return this.unpackItemToList(t, e, [], !0)
		}
		unpackItemToList(t, e, a, i = !1) {
			e = e || 1, a = a || [];
			let s = db.get_item_db(t);
			t: for (let n = 0; n < e; n++) switch (s.type) {
				case 3:
					let n = BaseFacade.mDrop.makeDrop(s.wrapId, i);
					if (n)
						for (let t = 0; t < n.length; t++) {
							const e = n[t];
							this.unpackItemToList(e.itemId, e.count, a, i)
						} else Logger.error(`mItem.unpackItemToList: can't drop by item:[${t}], dropId:[${s.wrapId}]`);
					break;
				default:
					a.push({
						itemId: t,
						count: e
					});
					break t
			}
			return a
		}
		unpackItemToMap(t, e, a) {
			e = e || 1, a = a || {};
			let i = db.get_item_db(t);
			t: for (let s = 0; s < e; s++) switch (i.type) {
				case 3:
					let s = BaseFacade.mDrop.makeDrop(i.wrapId);
					if (s)
						for (let t = 0; t < s.length; t++) {
							const e = s[t];
							this.unpackItemToMap(e.itemId, e.count, a)
						} else Logger.error(`mItem.unpackItemToMap: can't drop by item:[${t}], dropId:[${i.wrapId}]`);
					break;
				default:
					let n = a[t] || 0;
					n += e, a[t] = n;
					break t
			}
			return a
		}
	}
	let lock_tag = !1;
	class mAutoIncreaseItem extends _mBase {
		constructor() {
			super(...arguments), this.m_data = null
		}
		onload() {
			this.loadData()
		}
		loadData() {
			if (this.m_data = FileRecord.getData("aotu_increase_data"), !this.m_data) {
				let t = db.get_auto_increase_db_map(),
					e = Object.create(null);
				Tools.forEachMap(t, function(t, a) {
					e[t] = {
						time: Timer.time,
						added: 0
					}
				}), this.m_data = e, this.saveData()
			}
		}
		saveData() {
			FileRecord.setData("aotu_increase_data", this.m_data)
		}
		refresh(t) {
			if (lock_tag) return;
			lock_tag = !0;
			let e, a = this.m_data;
			if (null == t)
				for (const t in a)(e = a[t]).time = this.refreshItemTime(t, e.time);
			else(e = a[t]) && (e.time = this.refreshItemTime(t, e.time));
			lock_tag = !1
		}
		refreshItemTime(t, e) {
			if (e >= Timer.time) return e;
			let a = BaseFacade.mItem.getItemCount(t),
				i = this.getMaxCount(t);
			if (a >= i) return e = Timer.time;
			let s = db.get_auto_increase_db(t);
			if (e + s.increaseDelta > Timer.time) return e;
			let n = a,
				o = s.increaseCount + this.m_data[t].added,
				r = 0 | (Timer.time - e) / s.increaseDelta;
			return a += r * o, e += r * s.increaseDelta, a > i && (a = i, e = Timer.time), BaseFacade.mItem.addItem(t, a - n, 6), this.saveData(), e
		}
		resetTime(t) {
			let e = this.m_data[t];
			e && (e.time = Timer.time)
		}
		getMaxCount(t) {
			let e = db.get_auto_increase_db(t);
			return e && e.maxCheckItemId ? BaseFacade.mItem.getItemCount(e.maxCheckItemId) : Number.MAX_VALUE
		}
		getNextTime(t) {
			if (this.m_data[t]) {
				let e = db.get_auto_increase_db(t);
				return this.m_data[t].time + e.increaseDelta
			}
			return 0
		}
		getIncreaseDelta(t) {
			if (this.m_data && this.m_data[t]) {
				return db.get_auto_increase_db(t).increaseDelta
			}
		}
		isMax(t) {
			let e = db.get_auto_increase_db(t);
			return !(!e || !e.maxCheckItemId) && BaseFacade.mItem.getItemCount(t) >= BaseFacade.mItem.getItemCount(e.maxCheckItemId)
		}
		setIncreaseItemAddedPerSec(t, e) {
			let a = this.m_data;
			if (a && a[t]) {
				let i = a[t],
					s = db.get_auto_increase_db(t);
				i.added = e * s.increaseDelta, this.saveData()
			}
		}
		getItemIncreasePerSec(t) {
			let e = this.m_data;
			if (e && e[t]) {
				let a = db.get_auto_increase_db(t);
				if (a.increaseDelta > 0) return e[t].added / a.increaseDelta
			}
			return 0
		}
		getItemIncreaseCount(t) {
			let e = this.m_data;
			return e && e[t] ? e[t].added : 0
		}
		accItem(t, e, a) {
			if (e <= 0) return !1;
			let i = this.getMaxCount(t),
				s = BaseFacade.mItem.getItemCount(t);
			return s < i && (e = Math.min(i - s, e), BaseFacade.mItem.addItem(t, e, a), !0)
		}
	}
	class mDrop extends _mBase {
		constructor() {
			super(...arguments), this.m_lotteryData = null, this.m_dropData = null
		}
		onload() {
			this.loadData()
		}
		loadData() {
			this.m_lotteryData = FileRecord.getData("lotter_data") || {}, this.m_dropData = FileRecord.getData("drop_data") || {}
		}
		saveData() {
			FileRecord.setData("drop_data", this.m_dropData)
		}
		getAllDropItems(t) {
			let e = [];
			if (!t) return e;
			let a = db.get_drop_db(t);
			if (!a) return e;
			for (let t = 0; t < a.items.length; t++) {
				const i = a.items[t];
				e.push({
					itemId: i.id,
					count: i.max
				})
			}
			return e
		}
		getDropActive(t) {
			let e = db.get_drop_db(t);
			return !!e && BaseFacade.mSwitch.check(e.switchId)
		}
		makeDrop(t, e = !1) {
			if (!t) return [];
			let a = db.get_drop_db(t);
			if (!BaseFacade.mSwitch.check(a.switchId)) return [];
			let i, s = a.items;
			switch (a.type) {
				case 1:
					i = (a.dis, this.makeDrop_singleRate(s));
					break;
				case 2:
					i = this.makeDrop_roundRate(s);
					break;
				case 3:
					let n = this.makeLottery(t, e);
					return n ? [n] : [];
				default:
					return []
			}
			return BaseFacade.mSwitch.active(a.switchId), i
		}
		makeDrop_singleRate(t) {
			let e, a = [];
			if (t)
				for (let i = 0; i < t.length; i++) {
					const s = t[i];
					(e = Mathf.random(1e4)) <= s.rate && a.push({
						itemId: s.id,
						count: Mathf.random(s.min, s.max),
						index: i
					})
				}
			return a
		}
		makeDrop_roundRate(t) {
			if (t) {
				let e = Mathf.random(1e4);
				for (let a = 0; a < t.length; a++) {
					const i = t[a];
					if (e <= i.rate) return [{
						itemId: i.id,
						count: Mathf.random(i.min, i.max),
						index: a
					}];
					e -= i.rate
				}
			}
			return []
		}
		saveLotteryRecord() {
			FileRecord.setData("lotter_data", this.m_lotteryData)
		}
		getLotteryActive(t) {
			if (!t) return !1;
			let e = db.get_drop_db(t);
			return !(!e || 3 != e.type) && (!(0 == e.loop && this.getCurLotteryIndex(t) >= e.items.length) && BaseFacade.mSwitch.check(e.switchId))
		}
		getCurLotteryIndex(t) {
			let e = this.m_lotteryData[t];
			return null == e ? 0 : e
		}
		getLotteryState(t, e) {
			let a = this.getLotteryActive(t),
				i = this.getCurLotteryIndex(t);
			return e < i ? 1 : e == i && a ? 0 : 2
		}
		makeLottery(t, e = !1) {
			if (!t) return null;
			let a = db.get_drop_db(t);
			if (!a || 3 != a.type) return null;
			if (!BaseFacade.mSwitch.check(a.switchId)) return null;
			e || BaseFacade.mSwitch.active(a.switchId);
			let i = this.m_lotteryData[t];
			if (null == i && (i = 0), i < 0) return null;
			let s = i,
				n = a.items[s];
			if (!n) return null;
			if (!e) {
				if (++i >= a.items.length) switch (a.loop) {
					case 0:
						i = a.items.length;
						break;
					case 1:
						i = 0;
						break;
					case 2:
						i = a.items.length - 1;
						break;
					default:
						return Logger.error(`未知循环类型，lotteryId:[${t}]`), null
				}
				this.m_lotteryData[t] = i, this.saveLotteryRecord()
			}
			return {
				itemId: n.id,
				count: Mathf.random(n.min, n.max),
				index: s
			}
		}
	}
	const SECONDS_IN_DAY = 86400,
		LONG_DELTA_TIME = 365 * SECONDS_IN_DAY * 1e3;
	class mSwitch extends _mBase {
		constructor() {
			super(...arguments), this.m_data = null, this.dailyActive = !1, this.weeklyActive = !1
		}
		onload() {
			if (this.loadData(), !this.m_data) {
				this.m_data = {};
				let t = db.get_switch_db_map();
				for (const e in t) {
					const a = t[e];
					this.initSwitch(a)
				}
			}
			this.registerMsg({
				[BASE_MSG.GOAL_STATE_CHANGE]: this.onMsgGoalStateChange.bind(this)
			})
		}
		start() {
			this.active(BASE_SWITCH_ID.DAILY) && (this.dailyActive = !0, this.sendMsg(BASE_MSG.DAILY_SWITCH_ACTIVE), Logger.log("---\x3e daily switch active true.")), this.active(BASE_SWITCH_ID.WEEKLY) && (this.weeklyActive = !0, Logger.log("---\x3e weekly switch active true."))
		}
		loadData() {
			this.m_data = FileRecord.getData("switch_data")
		}
		saveData() {
			FileRecord.setData("switch_data", this.m_data)
		}
		onMsgGoalStateChange(t) {
			if (t.userData.type != GOAL_TYPE.SWITCH) return;
			if (!t.isDone) return;
			let e = t.userData.data,
				a = this.m_data[e];
			if (a) {
				let t = db.get_switch_db(e);
				t && (this.updateUnlockSwitch(a, t), this.saveData())
			}
			return !1
		}
		initSwitch(t) {
			let e = this.m_data;
			if (e[t.id]) return;
			let a = {
				count: t.count,
				startTime: 0,
				endTime: 0
			};
			switch (t.type) {
				case 0:
					this.updateCycleSwitch(a, t);
					break;
				case 1:
					return void this.updateCdSwitch(a, t);
				case 2:
					this.updateUnlockSwitch(a, t);
					break;
				case 3:
				case 4:
					t.count = 1
			}
			e[t.id] = a, this.saveData()
		}
		query(t) {
			let e = this.m_data[t];
			return e || (Logger.error("mSwitch: can't find switch by switchId " + t), null)
		}
		check(t) {
			if (!t) return !0;
			let e = this.query(t);
			return !!e && (Timer.time >= e.startTime && (Timer.time <= e.endTime ? 0 != e.count : (this.updateCheck(t), this.check(t))))
		}
		active(t) {
			if (!t) return !0;
			if (!this.check(t)) return !1;
			let e = this.m_data[t];
			if (e.count--, 0 == e.count) {
				let a = db.get_switch_db(t);
				1 == a.type && this.updateCdSwitch(e, a)
			}
			return this.pushChangeToSession(t, null, null, e.count), this.saveData(), !0
		}
		getCount(t) {
			let e = this.query(t);
			return e ? e.count : 0
		}
		getCycleStartTime(t) {
			let e = this.query(t);
			return e ? e.startTime : 0
		}
		getCycleEndTime(t) {
			let e = this.query(t);
			return e ? e.endTime : 0
		}
		updateCheck(t) {
			let e = this.m_data[t],
				a = db.get_switch_db(t);
			switch (a.type) {
				case 0:
					this.updateCycleSwitch(e, a);
					break;
				case 1:
					this.updateCdSwitch(e, a);
					break;
				case 2:
					e.endTime = LONG_DELTA_TIME, Logger.error(`解锁类型开关无法重复check id: ${t}`);
					break;
				default:
					Logger.error(`暂不支持类型更新 ${a.type}`)
			}
		}
		updateCycleSwitch(t, e) {
			let a, i = Tools.splitToNumber(e.params, ":");
			5 == i.length ? a = new Date(i[2], i[3] - 1, i[4], i[0], i[1], 0, 0) : 2 == i.length ? (a = 0 == t.startTime ? new Date(Date.now()) : new Date(1e3 * t.startTime)).setHours(i[0], i[1], 0, 0) : Logger.error(`开关[${e.id}]起始时间[${e.params}]错误.`);
			let s = a.getTime() / 1e3,
				n = 0;
			n = e.duration <= 0 ? LONG_DELTA_TIME : s + 3600 * e.duration;
			let o = 3600 * e.delta;
			(o = Math.ceil((Timer.time - n) / o) * o) > 0 && (s += o, n += o), t.startTime = s, t.endTime = n, t.count = e.count
		}
		updateCdSwitch(t, e) {
			0 == t.endTime ? (t.startTime = Timer.time, t.endTime = LONG_DELTA_TIME) : t.startTime = Timer.time + e.delta, t.count = e.count
		}
		updateUnlockSwitch(t, e) {
			0 == t.endTime ? (BaseFacade.mGoal.register(e.params, {
				type: GOAL_TYPE.SWITCH,
				data: e.id
			}), t.startTime = LONG_DELTA_TIME, t.endTime = t.startTime) : (BaseFacade.mGoal.unregister(e.params), t.startTime = Timer.time, e.duration <= 0 ? t.endTime = LONG_DELTA_TIME : t.endTime = Timer.time + 3600 * e.duration, t.count = e.count)
		}
		pushChangeToSession(t, e, a, i) {}
	}
	const DEFAULT_TARGET_ID = "_default_";
	class mGoal extends _mBase {
		constructor() {
			super(...arguments), this.m_data = null
		}
		onload() {
			this.loadData(), this.m_data || (this.m_data = {
				goalList: {}
			})
		}
		loadData() {
			this.m_data = FileRecord.getData("s_goal_data")
		}
		saveData() {
			FileRecord.setData("s_goal_data", this.m_data)
		}
		getGoalList(t, e, a) {
			let i = this.m_data[t];
			if (!i) {
				if (!a) return null;
				i = {}, this.m_data[t] = i, this.saveData()
			}
			if (!i[e = e || DEFAULT_TARGET_ID]) {
				if (!a) return null;
				i[e] = {}, this.saveData()
			}
			return i[e]
		}
		register(t, e) {
			let a, i = db.get_goal_db(t);
			if (!i) return;
			a = "" == i.targetId ? DEFAULT_TARGET_ID : i.targetId;
			let s = this.getGoalList(i.actionId, a, !0);
			s[t] && Logger.isDebugLevel && Logger.warn(`mGoal.registerGold: goal[${t}] is registered and it will be reset!!!`), s[t] = {
				userData: e,
				commits: 0
			}, this.saveData()
		}
		unregister(t) {
			let e = db.get_goal_db(t);
			if (!e) return;
			let a = this.getGoalList(e.actionId, e.targetId, !1);
			a && a[t] && (delete a[t], this.saveData())
		}
		commit(t, e = 1, a, i = 0) {
			"" === a || null == a ? a = DEFAULT_TARGET_ID : a += "", a != DEFAULT_TARGET_ID && this.commit(t, e, DEFAULT_TARGET_ID, i);
			let s, n, o = this.getGoalList(t, a, !1);
			o && Tools.forEachMap(o, (t, a) => {
				if (s = db.get_goal_db(t)) {
					switch (n = this._isDone(a.commits, s.value, s.type), i) {
						case 0:
							a.commits += e;
							break;
						case 1:
							a.commits = e;
							break;
						case 2:
							a.commits = Math.max(a.commits, e)
					}
					if (a.userData) {
						let e = this._isDone(a.commits, s.value, s.type),
							i = _G.pool.getObject("GoalStateChangeEvent");
						i.userData = a.userData, i.goalId = t, i.isDone = e, i.commits = a.commits, this.sendMsg(BASE_MSG.GOAL_VALUE_CHANGE, i), e != n && this.sendMsg(BASE_MSG.GOAL_STATE_CHANGE, i), _G.pool.put(i)
					}
					this.saveData()
				}
			})
		}
		_isDone(t, e, a) {
			return "min" == a ? t >= e : "max" == a ? t <= e : (Logger.error(`can't find goal type ${a}`), !1)
		}
		isDone(t) {
			let e = db.get_goal_db(t);
			if (!e) return !1;
			let a = this.getCurValue(t);
			return this._isDone(a, e.value, e.type)
		}
		getCurValue(t) {
			let e = db.get_goal_db(t);
			if (!e) return 0;
			let a = this.getGoalList(e.actionId, e.targetId, !1);
			if (!a) return Logger.warn(`can't find goal list by goalId ${t}`), 0;
			let i = a[t];
			return i ? i.commits : (Logger.warn(`can't find goal entry by entryId ${t}`), 0)
		}
		getDbValue(t) {
			let e = db.get_goal_db(t);
			return e ? e.value : 0
		}
		getDeltaValue(t) {
			let e = this.getCurValue(t);
			return this.getDbValue(t) - e
		}
		getProgress(t) {
			let e = this.getCurValue(t),
				a = this.getDbValue(t);
			return a > 0 ? Mathf.clamp01(e / a) : 0
		}
		exists(t) {
			let e = db.get_goal_db(t);
			if (!e) return !1;
			let a = this.getGoalList(e.actionId, e.targetId, !1);
			return !!a && null != a[t]
		}
	}
	var QUEST_STATE;

	function sort_quest_id_by_order(t, e) {
		return Tools.sort_db_by_order(db.get_quest_db(t), db.get_quest_db(e))
	}

	function sort_quest_id_by_state(t, e) {
		return sort_quest_db_by_state(db.get_quest_db(t), db.get_quest_db(e))
	}

	function sort_quest_db_by_order(t, e) {
		return Tools.sort_db_by_order(t, e)
	}

	function sort_quest_db_by_state(t, e) {
		let a = BaseFacade.mQuest.query(t.id).state,
			i = BaseFacade.mQuest.query(e.id).state;
		if (a != i) {
			if (a == QUEST_STATE.COMMITABLE) return -1;
			if (i == QUEST_STATE.COMMITABLE) return 1;
			if (a == QUEST_STATE.UPDATABLE) return -1;
			if (i == QUEST_STATE.UPDATABLE) return 1;
			if (a == QUEST_STATE.FINISHED) return 1;
			if (i == QUEST_STATE.FINISHED) return -1
		}
		return Tools.sort_db_by_order(t, e)
	}! function(t) {
		t[t.NONE = 0] = "NONE", t[t.UPDATABLE = 1] = "UPDATABLE", t[t.FAIL = 2] = "FAIL", t[t.COMMITABLE = 3] = "COMMITABLE", t[t.FINISHED = 4] = "FINISHED"
	}(QUEST_STATE || (QUEST_STATE = {}));
	class mQuest extends _mBase {
		constructor() {
			super(...arguments), this.m_data = null, this.m_cdQuests = [], this.statisticsQueue = new Queue(256, !0), this.statisticsTimer = null, this._hasMainQuests = !0
		}
		onload() {
			this.prepareData(), this.loadData(), this.m_data || (this.m_data = {});
			let t = db.get_quest_db_map();
			Tools.forEachMap(t, (t, e) => {
				switch (e.type) {
					case 0:
					case 3:
					case 10:
						this.isAccept(t) || this.accept(t)
				}
			}), this.registerMsg({
				[BASE_MSG.GOAL_STATE_CHANGE]: this.onMsgGoalStateChange.bind(this),
				[BASE_MSG.DAILY_SWITCH_ACTIVE]: this.onMsgUserDailySwitchActive.bind(this),
				[BASE_MSG.ITEM_USE]: this.onMsgItemUse.bind(this)
			})
		}
		loadData() {
			this.m_data = FileRecord.getData("quest_data")
		}
		saveData() {
			FileRecord.setData("quest_data", this.m_data)
		}
		prepareData() {}
		onMsgGoalStateChange(t) {
			if (t.userData.type != GOAL_TYPE.QUEST) return;
			let e = t.userData.data,
				a = this.query(e);
			if (!a || a.state != QUEST_STATE.UPDATABLE) return;
			let i = db.get_quest_db(e);
			for (let e = 0; e < i.goals.length; e++) {
				const a = i.goals[e];
				if (a != t.goalId && BaseFacade.mGoal.isDone(a) != t.isDone) return
			}
			this.onQuestFinish(e, t.isDone)
		}
		onMsgUserDailySwitchActive() {
			let t = mQuest.getAllQuest(1);
			for (let e = 0; e < t.length; e++) this.accept(t[e]);
			let e = mQuest.getAllQuest(2);
			for (let t = 0; t < e.length; t++) this.accept(e[t]);
			let a = mQuest.getAllQuest(4);
			for (let t = 0; t < a.length; t++) this.accept(a[t])
		}
		onMsgItemUse(t) {}
		query(t) {
			return this.m_data[t]
		}
		getState(t) {
			let e = this.query(t);
			return e ? e.state : QUEST_STATE.NONE
		}
		isAccept(t) {
			return !!this.query(t)
		}
		isFinish(t) {
			let e = this.query(t);
			return !!e && e.state == QUEST_STATE.FINISHED
		}
		isUpdatable(t) {
			let e = this.query(t);
			return !!e && e.state == QUEST_STATE.UPDATABLE
		}
		isCommitable(t) {
			let e = this.query(t);
			return !!e && e.state == QUEST_STATE.COMMITABLE
		}
		accept(t, e = !0) {
			let a = db.get_quest_db(t);
			if (!a) return !1;
			if (!BaseFacade.mSwitch.active(a.switchId)) return !1;
			let i = !0,
				s = this.query(t);
			if (s) {
				if (!e) return !1;
				for (let t = 0; t < a.goals.length; t++) BaseFacade.mGoal.unregister(a.goals[t]);
				i = s.state != QUEST_STATE.FINISHED && s.first
			}
			for (let e = 0; e < a.goals.length; e++) BaseFacade.mGoal.register(a.goals[e], {
				type: GOAL_TYPE.QUEST,
				data: t
			});
			let n = 0 != a.goals.length ? QUEST_STATE.UPDATABLE : QUEST_STATE.COMMITABLE;
			return this.m_data[t] = {
				state: n,
				first: i
			}, this.onQuestStateChange(n, a), a.statistics && this.statisticsQueue.enqueue(t), this.uploadStatisticsLater(), this.saveData(), !0
		}
		uploadStatisticsLater() {
			this.statisticsTimer || (this.statisticsTimer = new Timer(.1, 1, () => {
				Logger.isDebugLevel && Logger.log("mQuest.uploadStatisticsLater"), this.statisticsTimer = null;
				for (let t = 0; t < 50; t++) {
					if (!this.statisticsQueue.dequeue()) break
				}
				this.statisticsQueue.size > 0 && this.uploadStatisticsLater()
			}), this.statisticsTimer.start())
		}
		commit(t, e = !1) {
			let a = this.query(t);
			if (!a) return null;
			let i = db.get_quest_db(t);
			if (a.state == QUEST_STATE.UPDATABLE) {
				let a = !0;
				if (!e)
					for (let t = 0; t < i.goals.length; t++)
						if (!BaseFacade.mGoal.isDone(i.goals[t])) {
							a = !1;
							break
						} this.onQuestFinish(t, a)
			}
			if (a.state != QUEST_STATE.COMMITABLE) return null;
			a.first;
			let s = BaseFacade.mDrop.makeDrop(i.dropId);
			for (let t = 0; t < s.length; t++) {
				const e = s[t];
				BaseFacade.mItem.addItem(e.itemId, e.count, 7)
			}
			switch (a.state = QUEST_STATE.FINISHED, i.statistics && GameStatistics.statisCommonEvent(i.statistics, 1), this.saveData(), this.onQuestStateChange(a.state, i), BaseFacade.mGoal.commit(BASE_ACTION_ID.QUEST_FINISH_COUNT, 1, i.type), i.completion && BaseFacade.mGoal.commit(BASE_ACTION_ID.QUEST_FINISH, i.completion, i.type), i.type) {
				case 0:
				case 5:
					break;
				case 6:
					this.accept(t, !0)
			}
			return s
		}
		cancel(t) {
			if (!this.query(t)) return;
			delete this.m_data[t];
			let e = db.get_quest_db(t);
			for (let t = 0; t < e.goals.length; t++) BaseFacade.mGoal.unregister(e.goals[t]);
			this.onQuestStateChange(QUEST_STATE.NONE, e), this.saveData()
		}
		onQuestFinish(t, e) {
			let a = this.query(t);
			if (!a || a.state != QUEST_STATE.UPDATABLE) return;
			let i = db.get_quest_db(t);
			e ? (a.state = QUEST_STATE.COMMITABLE, i.statistics && GameStatistics.statisCommonEvent(i.statistics, 0)) : a.state = QUEST_STATE.FAIL;
			for (let t = 0; t < i.goals.length; t++) BaseFacade.mGoal.unregister(i.goals[t]);
			this.onQuestStateChange(a.state, i), this.saveData()
		}
		onQuestStateChange(t, e) {
			let a = {
				state: t,
				questDb: e
			};
			this.sendMsg(BASE_MSG.QUEST_STATE_CHANGE, a)
		}
		getQuestByType(t, e) {
			let a, i = [];
			return Tools.forEachMap(this.m_data, (s, n) => {
				(a = db.get_quest_db(s)).type != t || null != e && a.gid != e || i.push(s)
			}), i
		}
		getQuestDbByType(t, e) {
			let a, i = [];
			return Tools.forEachMap(this.m_data, (s, n) => {
				(a = db.get_quest_db(s)).type != t || null != e && e != a.gid || i.push(a)
			}), i
		}
		static getAllQuest(t, e) {
			let a = [],
				i = db.get_quest_db_map();
			return Tools.forEachMap(i, function(i, s) {
				s.type == t && (null != e && e != s.gid || a.push(i))
			}), a
		}
		getLastQuestDbByGid(t, e, a) {
			let i = [];
			t: for (let s = e; s <= a; s++) {
				let e = this.getQuestDbByType(t, s);
				if (e.sort(Tools.sort_db_by_order), 0 == e.length) e.push(null), Logger.error("任务分组为空:", s);
				else {
					for (let t = 0; t < e.length; t++)
						if (!this.isFinish(e[t].id)) {
							i.push(e[t]);
							continue t
						} i.push(e[e.length - 1])
				}
			}
			return i
		}
		getCurValue(t, e = 0) {
			if (this.query(t).state == QUEST_STATE.UPDATABLE) {
				let a = db.get_quest_db(t).goals[e];
				return BaseFacade.mGoal.getCurValue(a)
			}
			return -1
		}
		getDbValue(t, e = 0) {
			let a = db.get_quest_db(t).goals[e];
			return BaseFacade.mGoal.getDbValue(a)
		}
		getDeltaValue(t, e = 0) {
			if (this.query(t).state == QUEST_STATE.UPDATABLE) {
				let a = db.get_quest_db(t).goals[e];
				return BaseFacade.mGoal.getDeltaValue(a)
			}
			return -1
		}
		getProgress(t, e = 0) {
			if (this.query(t).state == QUEST_STATE.UPDATABLE) {
				let a = db.get_quest_db(t).goals[e];
				return BaseFacade.mGoal.getProgress(a)
			}
			return 0
		}
		getAwardItems(t) {
			let e = db.get_quest_db(t);
			return e ? BaseFacade.mDrop.getAllDropItems(e.dropId) : []
		}
		hasCommitQuest(t) {
			let e = this.getQuestByType(t);
			for (let t = e.length - 1; t >= 0; t--)
				if (this.query(e[t]).state == QUEST_STATE.COMMITABLE) return !0;
			return !1
		}
		isAllFinish(t) {
			let e = this.getQuestByType(t);
			for (let t = e.length - 1; t >= 0; t--)
				if (this.query(e[t]).state != QUEST_STATE.FINISHED) return !1;
			return !0
		}
		finishQuest(t) {
			if (!this.query(t)) return void Logger.warn(`mQuest.finishQuest 未接此任务[${t}]`);
			let e = db.get_quest_db(t);
			for (let t = 0; t < e.goals.length; t++) {
				let a = db.get_goal_db(e.goals[t]);
				BaseFacade.mGoal.commit(a.actionId, a.value, a.targetId, 1)
			}
		}
		getHeadMainQuest() {
			if (this._hasMainQuests) {
				let t = this.getQuestByType(0);
				t.sort(sort_quest_id_by_order);
				for (let e = 0; e < t.length; e++)
					if (!this.isFinish(t[e])) return t[e];
				return this._hasMainQuests = !1, null
			}
			return null
		}
	}
	const h_count = 20,
		v_count = 30;
	class ScreenPieceEffect extends Laya.Sprite {
		constructor(t) {
			super(), this.paperNodes = [], this.paperTextures = [], this.name = "effectNode", this.createScreenShotFromSprite(t)
		}
		dispose() {
			for (let t = 0; t < this.paperTextures.length; t++) {
				let e = this.paperTextures[t];
				for (let t = 0; t < e.length; t++) e[t].destroy(!0)
			}
			this.paperTextures = null, this._texture && (this._texture.destroy(), this._texture = null), this.destroy(!0)
		}
		createScreenShotFromSprite(t) {
			this._texture = UiHelper.spriteScreenShot(t), this.generatePaper(this._texture)
		}
		generatePaper(t) {
			let e = t.width,
				a = t.height,
				i = Math.ceil(e / h_count),
				s = Math.ceil(a / v_count);
			for (let e = 0; e < h_count; e++)
				for (let a = 0; a < v_count; a++) {
					let n = this.addChild(new Laya.Sprite);
					n.name = `${e}_${a}`, n.pivotX = i / 2, n.pivotY = s / 2;
					let o = e * i,
						r = a * s;
					n.size(i, s), n.pos(o + n.pivotX, r + n.pivotY, !0);
					let l = Laya.Texture.create(t, o, r, i, s);
					n.texture = l, this.paperNodes[e] || (this.paperNodes[e] = [], this.paperTextures[e] = []), this.paperNodes[e][a] = n, this.paperTextures[e][a] = l
				}
		}
		playEffect(t) {
			for (let t = 0; t < h_count; t++)
				for (let e = 0; e < v_count; e++) {
					let a = this.paperNodes[t][e];
					cc.tween(a).delay(.015 * (t + e)).to(.3, {
						scaleX: 0,
						scaleY: 0,
						alpha: 0
					}).start()
				}
			return Timer.callLater(.015 * (h_count + v_count) + .3, () => {
				this.dispose(), t && t()
			}), this
		}
		playEffectRnd(t) {
			let e = [];
			for (let t = 0; t < h_count; t++)
				for (let a = 0; a < v_count; a++) {
					let i = this.paperNodes[t][a];
					e.push(i)
				}
			let a = 0;
			for (let i = 0; i < e.length; i++) {
				const s = e[i];
				cc.tween(s).delay(.25 * Math.random()).to(.3, {
					scaleX: 0,
					scaleY: 0,
					alpha: 0
				}).call(() => {
					++a == e.length && (this.dispose(), t && t())
				}).start()
			}
			return this
		}
	}
	let delta = .02,
		update_count = 0;
	class PanelLoadingBase extends PanelBase {
		constructor(t) {
			super(t), this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.barSytle = 0, this.state = 0, this.curProgress = 0, this.maxProgress = 0, this.startTime = 0, this.registerMsg({
				[BASE_MSG.RES_LOAD_START]: this.onMsgLoadStart.bind(this),
				[BASE_MSG.RES_LOAD_PROGRESS]: this.onMsgLoadProgress.bind(this),
				[BASE_MSG.RES_LOAD_END]: this.onMsgLoadEnd.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgLoadStart(t) {
			this.startTime = Timer.time, this.onLoadStart(t)
		}
		onMsgLoadProgress(t) {
			(t = Mathf.clamp01(t)) > this.maxProgress && (this.maxProgress = t)
		}
		onMsgLoadEnd(t) {
			this.maxProgress = 1, t || this.curProgress < .95 && (this.curProgress = .95)
		}
		update() {
			switch (this.state) {
				case 0:
					switch (this.barSytle) {
						case 0:
							this.curProgress = Mathf.clamp(this.curProgress + delta, 0, this.maxProgress);
							break;
						case 1:
							if ((update_count = (update_count + 1) % 5) > 0) return;
							this.curProgress = this.maxProgress
					}
					this.curProgress >= 1 ? (this.state = 1, this.onLoadProgress(1)) : this.onLoadProgress(this.curProgress);
					break;
				case 1:
					this.state = 2, _G.sendMsg("LOADING_COMPLETED"), console.log("loading time:", Mathf.round(Timer.time - this.startTime, 2)), this.onLoadComplete() && this.close()
			}
		}
	}
	class PanelResLoaderLoading extends PanelLoadingBase {
		startLoader() {
			let t = this.context;
			if (t && t.loader) {
				return t.loader.setLoadingCallback(function(t) {
					_G.sendMsg(BASE_MSG.RES_LOAD_END)
				}, function(t) {
					_G.sendMsg(BASE_MSG.RES_LOAD_PROGRESS, t)
				}), _G.sendMsg(BASE_MSG.RES_LOAD_START), t.loader.loadAll(), !0
			}
			return Logger.error("PanelSPELoading 参数异常."), !1
		}
	}
	class PanelSPELoading extends PanelResLoaderLoading {
		constructor() {
			super(...arguments), this.resourceName = "PanelSPELoading"
		}
		create(t) {
			if (!this.startLoader()) return void(t && t(!1)); {
				t && t(!0);
				let e = new ScreenPieceEffect(mgrPanel.getLayerNode(PANEL_LAYER.UI));
				mgrPanel.getLayerNode(PANEL_LAYER.TIP).addChild(e), this._effect = e
			}
			let e = new Laya.Box;
			e.size(_G.canvasWidth, _G.canvasHeight);
			let a = e.addChild(new Laya.Label);
			(a = new Laya.Label).fontSize = 32, a.anchorX = .5, a.anchorY = .5, a.centerX = 0, a.centerY = -100, a.text = "0%", a.color = "#ff0000", this.label = a, this.createFromNode(e)
		}
		buildUi() {}
		onLoadStart(t) {}
		onLoadProgress(t) {
			this.label.text = Math.floor(100 * t) + "%"
		}
		onLoadComplete() {
			let t = this.context,
				e = this._effect;
			return this._effect = null, mgrPanel.openPanel(t.panel, t.context, !1, function() {
				e.playEffect(t.callback)
			}), !0
		}
	}
	class DropIcon extends Laya.Sprite {
		constructor() {
			super(), this.userData = Object.create(null), this.size(1, 1), this.image = new Laya.Image, this.image.anchorX = .5, this.image.anchorY = .5, this.effect = _G.poolManager.get(Particle, "131"), this.addChild(this.image)
		}
		reuse() {
			this.visible = !0
		}
		unuse() {
			this.visible = !1, this._onClick = null, this.alpha = 1, this._itemId = null, this.image.anchorY = .5, this.image.y = 0, this.effect.stopFollow(), this.effect.stop(), this.effect.removeFromParent(), this.effect.hide(), cc.clearTween(this), this.removeSelf()
		}
		dispose() {
			this.effect && (_G.poolManager.put(this.effect), this.effect = null), this.destroy()
		}
		onClick() {
			this._onClick ? (this._onClick(this), this._onClick = null) : this.putBack()
		}
		autoClick() {
			this._onClick ? (this._onClick(this, !0), this._onClick = null) : this.putBack()
		}
		setAutoAddItem(t, e, a) {
			this._itemId = t, this._itemCount = e, this._reason = a
		}
		setIcon(t) {
			return this.image.skin = t, this
		}
		showTuowei() {
			_G.effectScene && (this.effect.show(), this.effect.setParent(_G.effectScene), this.effect.play(), this.effect.followTarget(this, _G.effectCamera))
		}
		putBack() {
			this._itemId && (BaseFacade.mItem.addItem(this._itemId, this._itemCount, this._reason), this._itemId = null, this._effect && mgrAlert.playParticleEffect("125", mgrAlert.uiCoinPos, .6)), _G.poolManager.put(this)
		}
		jumpOutAndJumpTo(t, e, a, i, s = !1) {
			let n = 1.5 * a;
			this.scale(n, n, !0);
			let o = Mathf.randomPlusOrMinus(),
				r = t.x + o * Mathf.random(10, 120),
				l = t.y + Mathf.random(10, 150),
				c = .01 * Mathf.random(-10, 10);
			this.image.anchorY = 1, this.image.y = this.image.height / 2;
			let h = Mathf.random(40, 70),
				d = cc.tween(this);
			this.pos(t.x, t.y, !0), d.parallel(cc.tween().then(cc.jumpTo(.5 + c, r, l, h, 1)), cc.tween().repeat(3, cc.tween().to(.1, {
				scaleX: .2 * n,
				scaleY: 1.2 * n
			}).to(.1, {
				scaleX: n,
				scaleY: n
			}))).parallel(cc.tween().then(cc.jumpTo(.3 + c, r, l, h / 3, 1)), cc.tween().to(.15, {
				scaleX: .7 * n,
				scaleY: 1.2 * n
			}).to(.15, {
				scaleX: n,
				scaleY: n
			})).call(() => {
				this.image.anchorY = .5, this.image.y = 0, this.showTuowei()
			}), s ? d.delay(Mathf.random(5, 15) / 100) : d.delay(.1), d.parallel(cc.tween().then(cc.jumpTo(.6, e.x, e.y, 50, 1)), cc.tween().to(.6, {
				scaleX: a,
				scaleY: a
			})).to(.1, cc.PROP.ALPHA0).call(() => {
				i && i(), this.putBack()
			}).start()
		}
		burstOutAndJumpTo(t, e, a, i, s = !1) {
			let n = 1.5 * a;
			this.scale(n, n, !0), this.pos(t.x, t.y, !0);
			let o = Mathf.random(100 * Math.PI) / 100,
				r = Mathf.random(50, 150),
				l = {
					x: t.x + Math.cos(o) * r,
					y: t.y + Math.sin(o) * r
				},
				c = .6 + .02 * Mathf.random(-10, 10);
			cc.tween(this, !0).to(.2, l, cc.OPTION.SINE_OUT).parallel(cc.tween().then(cc.bezierFromTo(c, l, e, .3)), cc.tween().to(c, {
				scaleX: a,
				scaleY: a
			})).call(() => {
				i && i(), this.putBack()
			}).start()
		}
		playJumpFrom(t, e, a, i, s = 0, n = .6, o) {
			let r, l;
			this.pos(t, e, !0), this.scale(n, n, !0), o ? (r = t + o.offsetX, l = e + o.offsetY) : (r = t + Mathf.randomPlusOrMinus() * Mathf.random(10, 120), l = e + Mathf.random(10, 100));
			let c = .01 * Mathf.random(-10, 10);
			this.image.anchorY = 1, this.image.y = this.image.height / 2;
			let h = Mathf.random(40, 70),
				d = cc.tween(this).parallel(cc.tween().then(cc.jumpTo(.5 + c, r, l, h, 1)), cc.tween().repeat(3, cc.tween().to(.1, {
					scaleX: .2 * n,
					scaleY: 1.2 * n
				}).to(.1, {
					scaleX: n,
					scaleY: n
				}))).parallel(cc.tween().then(cc.jumpTo(.3 + c, r, l, h / 3, 1)), cc.tween().to(.15, {
					scaleX: .7 * n,
					scaleY: 1.2 * n
				}).to(.15, {
					scaleX: n,
					scaleY: n
				})).call(() => {
					this.image.anchorY = .5, this.image.y = 0, i && i(this)
				});
			s > 0 ? d.delay(s).call(this.autoClick.bind(this)).start() : d.start(), this._onClick = a
		}
		playFlyTo(t, e) {
			cc.clearTween(this), cc.tween(this).then(cc.jumpTo(.6, t, e, 50, 1)).to(.1, {
				scaleX: 1.2,
				scaleY: 1.2,
				alpha: 0
			}).call(this.putBack.bind(this)).start()
		}
		playHappyJump() {
			this.image.anchorY = 1, this.image.y = this.image.height / 2, cc.tween(this).repeatForever(cc.tween().parallel(cc.tween().then(cc.jumpTo(.5, this.x, this.y, 50, 1)), cc.tween().repeat(3, cc.tween().to(.1, {
				scaleX: .2,
				scaleY: 1.2
			}).to(.1, {
				scaleX: 1,
				scaleY: 1
			}))).parallel(cc.tween().then(cc.jumpTo(.3, this.x, this.y, 50 / 3, 1)), cc.tween().to(.15, {
				scaleX: .7,
				scaleY: 1.2
			}).to(.15, {
				scaleX: 1,
				scaleY: 1
			})).call(() => {
				this.image.anchorY = .5, this.image.y = 0
			}).delay(1)).start()
		}
	}
	class CoinCount extends Laya.Label {
		reuse() {
			this.visible = !0
		}
		unuse() {
			this.visible = !1, cc.clearTween(this), this.removeSelf()
		}
		dispose() {
			this.destroy()
		}
		constructor() {
			super(), this.anchorX = .5, this.fontSize = 22, this.color = "#cc5b2f", this.strokeColor = "#ffffff", this.stroke = 2
		}
		setCount(t) {
			return this.text = "+" + t, this
		}
		play(t) {
			this.pos(t.x, t.y, !0).scale(0, 0, !0).alpha = 1, cc.tween(this).parallel(cc.tween().then(cc.jumpBy(.5, 20, -60, 10, 1)), cc.tween().to(.1, cc.PROP.SCALE1).delay(.6).to(.1, cc.PROP.ALPHA0)).call(this.putback.bind(this)).start()
		}
		putback() {
			_G.poolManager.put(this)
		}
	}
	class UIHVLayout extends Laya.Script {
		constructor() {
			super(...arguments), this.horizon = !0, this.align = "middle", this.space = 0, this.itemSize = 0, this.ignoreInvisible = !0, this._totalLen = 0, this._bDirty = !1
		}
		get totalLen() {
			return this._totalLen
		}
		get node() {
			return this.owner
		}
		onStart() {
			let t = this.node;
			if (this.ignoreInvisible)
				for (var e = 0, a = t.numChildren; e < a; e++) {
					t.getChildAt(e).on(Laya.Event.VISIBILITY_CHANGE, this, this._updateLayoutLater)
				}
			this._bDirty = !0, this.updateLayout()
		}
		onDestroy() {
			Laya.timer.clearAll(this)
		}
		_updateLayoutLater() {
			this._bDirty = !0, Laya.timer.callLater(this, this.updateLayout)
		}
		addChild(t) {
			return this.node.addChild(t), this.ignoreInvisible && t.on(Laya.Event.VISIBILITY_CHANGE, this, this._updateLayoutLater), this._bDirty = !0, Laya.timer.callLater(this, this.updateLayout), t
		}
		updateIfDirty() {
			Laya.timer.runCallLater(this, this.updateLayout)
		}
		updateLayout(t = 0, e = !1) {
			if (!this._bDirty && !e) return;
			let a, i, s, n;
			this._bDirty = !1, this.horizon ? (a = "x", i = "displayWidth", s = "pivotX", n = "scaleX") : (a = "y", i = "displayHeight", s = "pivotY", n = "scaleY");
			let o = this.node,
				r = this.space,
				l = -r;
			var c = [];
			let h = 0 == this.itemSize;
			for (var d = 0, _ = o.numChildren; d < _; d++) {
				var g = o.getChildAt(d);
				if (g) {
					if (this.ignoreInvisible && !g.visible) continue;
					c.push(g), l = h ? l + g[i] + r : l + this.itemSize + r
				}
			}
			var u;
			switch (this._totalLen = l, this.align) {
				case "head":
					u = 0;
					break;
				case "middle":
					u = -.5 * l;
					break;
				case "tail":
					u = -l
			}
			for (d = 0, _ = c.length; d < _; d++) {
				var m = u + (g = c[d])[s] * g[n];
				t > 0 ? Laya.Tween.to(g, {
					[a]: m
				}, 1e3 * t, Laya.Ease.sineInOut) : g[a] = m, u += h ? g[i] + r : this.itemSize + r
			}
		}
		foreachChild(t) {
			for (var e = 0; e < this.node.numChildren; e++)
				if (t(this.node.getChildAt(e), e)) return
		}
	}
	class Script2dEvent extends Laya.Script {
		constructor() {
			super(), this._msgHander = new MsgHandler, this._msgHander.startProcMsg()
		}
		onDestroy() {
			this._msgHander.stopProcMsg()
		}
		sendMsg(t, e) {
			this._msgHander && this._msgHander.sendMsg(t, e)
		}
		registerListeners(t) {
			Tools.forEachMap(t, (e, a) => {
				t[e] = a.bind(this)
			}), this._msgHander.registerListeners(t)
		}
	}
	class I18nComponent extends Script2dEvent {
		constructor() {
			super(...arguments), this.__key__ = ""
		}
		get key() {
			return this.__key__
		}
		set key(t) {
			this.__key__ = t, this.refresh()
		}
		get artistFont() {
			return this.__artistFont__
		}
		set artistFont(t) {
			this.__artistFont__ = t, this.key = "font", this.refresh()
		}
		onStart() {
			this.registerListeners({
				MSG_I18N_REFRESH: this.refresh.bind(this)
			}), this.refresh()
		}
		refresh() {
			if (!this.key || this.key.length <= 0) return;
			let t = this.owner;
			console.log("owner===", t);
			t._tf;
			"label2222" == t.name && console.log(t), t._tf ? this.artistFont ? mgrI18n.loadFont(this.artistFont, t) : (console.log("当前语言=====", mgrI18n.getLanguage()), t.text = mgrI18n.getText(this.key)) : t._text ? t.text = mgrI18n.getText(this.key) : t._skin ? t.skin = mgrI18n.getImage(this.key) : t.loadImage(mgrI18n.getImage(this.key))
		}
	}
	var E_LANGUAGE;
	! function(t) {
		t[t.zhcn = 0] = "zhcn", t[t.zhtw = 1] = "zhtw", t[t.en = 2] = "en", t[t.id = 3] = "id", t[t.hi = 4] = "hi", t[t.vi = 5] = "vi", t[t.pt = 6] = "pt"
	}(E_LANGUAGE || (E_LANGUAGE = {}));
	const LANGUAGE2FLAG = {
			[E_LANGUAGE.zhcn]: "zhcn",
			[E_LANGUAGE.zhtw]: "zhtw",
			[E_LANGUAGE.en]: "en",
			[E_LANGUAGE.id]: "id",
			[E_LANGUAGE.hi]: "hi",
			[E_LANGUAGE.vi]: "vi",
			[E_LANGUAGE.pt]: "pt"
		},
		I18N_RES_PATH = "res/i18n/";
	class mgrI18n extends _mgrBase {
		static onload() {
			super.onload(), this.bonLoad = !0, this.loadRecord()
		}
		static loadRecord() {
			let t = FileRecord.getData("mgrI18n1");
			t ? this.isLanguage = !0 : (t = this.sdkLanguage ? {
				curLanguage: this.sdkLanguage
			} : {
				curLanguage: E_LANGUAGE.zhcn
			}, this.isLanguage = !1), this.recordLanguage = t.curLanguage, this.saveRecord(), console.log("this.recordLanguage", this.recordLanguage), this._updateLanguage()
		}
		static saveRecord() {
			let t = {
				curLanguage: this.curLanguage
			};
			FileRecord.setData("mgrI18n1", t)
		}
		static getLanguage() {
			return null == this.curLanguage && (this.curLanguage = this.sdkLanguage || E_LANGUAGE.zhcn), this.curLanguage
		}
		static setLanguage(t) {
			this.curLanguage = t, this.saveRecord(), _G.sendMsg("MSG_I18N_REFRESH")
		}
		static _updateLanguage() {
			null != this.recordLanguage ? this.setLanguage(this.recordLanguage) : null != this.sdkLanguage ? this.setLanguage(this.sdkLanguage) : this.setLanguage(this.defaultLanguage)
		}
		static setSdkLanguage(t) {
			switch (t) {
				case "en-us":
					this.sdkLanguage = E_LANGUAGE.en;
					break;
				case "zh":
					this.sdkLanguage = E_LANGUAGE.zhcn;
					break;
				case "pt-br":
					this.sdkLanguage = E_LANGUAGE.pt;
					break;
				case "vi":
					this.sdkLanguage = E_LANGUAGE.vi;
					break;
				case "id":
					this.sdkLanguage = E_LANGUAGE.id;
					break;
				case "hi":
					this.sdkLanguage = E_LANGUAGE.hi;
					break;
				default:
					this.sdkLanguage = E_LANGUAGE.en
			}
		}
		static isReceiveSdkLanguage() {
			return null != this.sdkLanguage
		}
		static getText(t) {
			let e = this.parseKey(t);
			return e || t
		}
		static parseKey(t) {
			let e = ((window.i18n || {}).languages || {})[LANGUAGE2FLAG[this.curLanguage]] || {},
				a = t.split("."),
				i = e;
			for (let t = 0; t < a.length; t++) {
				if (!(i = i[a[t]])) return null
			}
			return i
		}
		static getImage(t) {
			if (!this.bonLoad) return;
			this.curLanguage || (this.curLanguage = E_LANGUAGE.zhcn);
			let e = "";
			e = /\.png/.test(t) ? ".png" : ".jpg", t = t.replace(e, "");
			let a = `res/i18n/${LANGUAGE2FLAG[this.curLanguage]}`,
				i = t.split(".");
			for (let t = 0; t < i.length; t++) {
				a += "/", a += i[t]
			}
			return a += e
		}
		static loadFont(t, e, a) {
			if (!this.bonLoad) return;
			if (!e) return;
			this.curLanguage || (this.curLanguage = E_LANGUAGE.zhcn, this.saveRecord());
			let i = `${t}_${LANGUAGE2FLAG[this.curLanguage]}`,
				s = () => {
					if (!e || e.destroyed) return;
					e.font = i;
					let t = e.text;
					e.text = "", e.text = t
				};
			if (this.loadedFontname[i]) return void s();
			let n = new Laya.BitmapFont,
				o = `res/i18n/${LANGUAGE2FLAG[this.curLanguage]}/font/${t}.fnt`;
			n.loadFont(o, new Laya.Handler(this, () => {
				Laya.loader.getRes(o) ? (Laya.Text.registerBitmapFont(i, n), this.loadedFontname[i] = !0, s()) : (o = `res/font/${t}.fnt`, n.loadFont(o, new Laya.Handler(this, () => {
					Laya.loader.getRes(o) && (Laya.Text.registerBitmapFont(i, n), this.loadedFontname[i] = !0, s())
				})))
			}))
		}
		static trySetI18nArtistFont(t, e) {
			let a = t.getComponent(I18nComponent);
			a || (a = t.addComponent(I18nComponent)), a.artistFont = e
		}
		static trySetI18nText(t, e) {
			let a = t.getComponent(I18nComponent);
			a || (a = t.addComponent(I18nComponent)), a.key = e
		}
		static trySetI18nImage(t, e) {
			if (!t) return void console.error("多语言图片节点为空", t, e);
			let a = t.getComponent(I18nComponent);
			a || (a = t.addComponent(I18nComponent)), a.key = e
		}
		static getRecordLanguage() {
			return this.recordLanguage
		}
		static getSdkLanguage() {
			return this.sdkLanguage
		}
		static getDefaultLanguage() {
			return this.defaultLanguage
		}
	}
	mgrI18n.isLanguage = !1, mgrI18n.bonLoad = !1, mgrI18n.loadedFontname = {};
	class PanelPanelLoading extends PanelBase {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.resourceName = "PanelPanelLoading"
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), UiHelper.registerTouchEvent(e, UiHelper.stopEventHandler, UiHelper.stopEventHandler, UiHelper.stopEventHandler), this._loadSprite = new Laya.Image, e.addChild(this._loadSprite), this._loadSprite.skin = `res/ui/pnl_loading/load${PanelPanelLoading.imgIndex++%3}.png`, this._loadSprite.anchorX = .5, this._loadSprite.anchorY = 1, this._loadSprite.pos(_G.canvasWidth / 2, _G.canvasHeight / 2 - 80, !0), this._loadSprite.alpha = 0;
			let a = (new Laya.Sprite).addComponent(UIHVLayout);
			e.addChild(a.node), this._textLayout = a, a.ignoreInvisible = !1, a.node.pos(_G.canvasWidth / 2, _G.canvasHeight / 2 - 50, !0);
			let i = [mgrI18n.getText("panelPanelLoading.1"), ".", ".", "."];
			for (var s = 0; s < i.length; s++) {
				let t = new Laya.Text;
				a.addChild(t), t.color = "#6884c1", t.stroke = 2, t.strokeColor = "#ffffff", t.fontSize = 30, t.pivotY = 30, t.text = i[s], t.visible = !1
			}
			this.createFromNode(e), this.scheduleOnce(.5, this.startAnim)
		}
		buildUi() {
			let t = new(mgrPanel.getPanelClass(this.context.panelClass))(this.context.context),
				e = new ResLoader;
			t.resourceName.endsWith(".json") && e.add(t.resourceName), e.setLoadingCallback(this.openPanel.bind(this, t)), e.loadAll()
		}
		startAnim() {
			cc.tween(this._loadSprite).sequence(cc.tween().to(.1, cc.PROP.ALPHA1), cc.tween().repeatForever(cc.tween().to(.6, cc.PROP.SCALE1_2).to(.6, cc.PROP.SCALE1))).start(), this._textLayout.foreachChild(function(t, e) {
				cc.tween(t).delay(.1 * e).show().set({
					scaleX: 0,
					scaleY: 0,
					alpha: 0
				}).to(.3, {
					scaleX: 1,
					scaleY: 1,
					alpha: 1
				}, {
					easing: cc.Ease.backOut
				}).call(function() {
					cc.tween(t).repeatForever(cc.tween().delay(1).to(.1, {
						scaleX: 1.2,
						scaleY: 1.2
					}).to(.15, {
						scaleX: 1,
						scaleY: 1
					})).start()
				}).start()
			})
		}
		openPanel(t) {
			Laya.timer.frameOnce(1, this, () => {
				mgrPanel.openPanelInstance(t, this.context.panelClass, this.context.bCloseMsg, t => {
					this.context.callback && this.context.callback(t), this.fadeOut()
				})
			})
		}
		fadeOut() {
			cc.tween(this._loadSprite).to(.2, cc.PROP.ALPHA0).call(this.close.bind(this)).start(), cc.tween(this._textLayout.node).to(.2, cc.PROP.ALPHA0).start()
		}
	}
	PanelPanelLoading.imgIndex = 0;
	class PanelWait extends PanelPanelLoading {
		constructor() {
			super(...arguments), this.resourceName = "PanelWait"
		}
		buildUi() {
			this.scheduleOnce(.01, this.startAnim), this.registerMsg({
				[BASE_MSG.RES_LOAD_END]: this.onMsgLoadEnd.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgLoadEnd() {
			this.fadeOut()
		}
	}
	const SYNC_TEST$1 = !1;
	let warn_once = !0;
	class Spine extends SpriteBase2D {
		constructor(t) {
			super(), this.resourceType = Laya.Loader.BUFFER, this._bAddCallback = !1, this.spineDb = db.get_spine_db(t), this.resourceName = this.spineDb.skeletonData
		}
		get curAnimName() {
			return this._curAnimName
		}
		create(t) {
			if (this._isLoaded) return void(t && t(!1));
			if (this._isLoading) return void(t && t(!1));
			if (!this.resourceName) return Logger.error("Spine.create: can't find resourceName."), void(t && t(!1));
			this._isLoading = !0;
			let e = Spine.allTemplets[this.resourceName];
			e ? e.isParseFail ? (t && t(!1), this.onResourceLoadedFail()) : e.isParserComplete ? this.onResLoaded(!0, t) : (e.on(Laya.Event.COMPLETE, this, e => {
				this.onResLoaded(e, t)
			}), e.on(Laya.Event.ERROR, this, this.onResourceLoadedFail)) : ((e = new Laya.Templet).on(Laya.Event.COMPLETE, this, e => {
				this.onResLoaded(e, t)
			}), e.on(Laya.Event.ERROR, this, this.onResourceLoadedFail), SYNC_TEST$1 ? Timer.callLater(30 * Math.random() + 20, () => {
				e.loadAni(this.resourceName)
			}) : e.loadAni(this.resourceName), Spine.allTemplets[this.resourceName] = e, Logger.debug("异步加载资源:", this.resourceName))
		}
		onResourceLoaded(t) {
			let e = this.spineDb,
				a = Spine.allTemplets[this.resourceName].buildArmature(e.aniMode);
			this.resNode = a, this._skinName = e.skin, a.scale(e.scaleX, e.scaleY, !0), a.showSkinByName(e.skin), a.playbackRate(e.timeScale), warn_once && (warn_once = !1, Logger.warn("spine动画统一设置为30帧，原因请查阅源码，本警告只触发一次.")), a.player.cacheFrameRate = 30, e.anim && this.play(e.anim, e.loop)
		}
		reuse() {
			this.tryCreate(), this.show()
		}
		unuse() {
			this.clearAllListener(), this.stop(), this.hide(), this.removeFromParent(), this.clearTween(), this.setScale(this.spineDb.scaleX, this.spineDb.scaleY), this.setAlpha(1), this.setTimeScale(this.spineDb.timeScale), this.clearDelayCalls()
		}
		dispose() {
			super.dispose()
		}
		play(t, e = !0) {
			this.callable ? (this._curAnimName = t, this.resNode.play(t, e, !0)) : this.safeCall(this.play, t, e)
		}
		playDefaultAnim() {
			this.play(this.spineDb.anim, this.spineDb.loop)
		}
		stop() {
			this.callable ? (this.resNode.stop(), this._curAnimName = null, this._animPlayList && (this._animPlayList = null)) : this.safeCall(this.stop)
		}
		setTimeScale(t) {
			this.callable ? this.resNode.playbackRate(t) : this.safeCall(this.setTimeScale, t)
		}
		_onAnimStoped() {
			if (this._animPlayList && this._animPlayList.length > 0) {
				let t = this._animPlayList.shift();
				this.play(t, 0 == this._animPlayList.length)
			}
		}
		playAnims(...t) {
			if (this.callable) switch (t.length) {
				case 0:
					return;
				case 1:
					this.play(t[0], !0);
					break;
				default:
					this._bAddCallback || (this._bAddCallback = !0, this.resNode.on(Laya.Event.STOPPED, this, this._onAnimStoped)), this._animPlayList = t.slice(1), this.play(t[0], !1)
			} else this.safeCall(this.playAnims, ...t)
		}
		setCompleteListener(t, e, a = !0) {
			this.callable ? a ? this.resNode.once(Laya.Event.COMPLETE, t, e) : this.resNode.on(Laya.Event.COMPLETE, t, e) : this.safeCall(this.setCompleteListener, t, e, a)
		}
		setStopListener(t, e, a = !0) {
			this.callable ? a ? this.resNode.once(Laya.Event.STOPPED, t, e) : this.resNode.on(Laya.Event.STOPPED, t, e) : this.safeCall(this.setStopListener, t, e, a)
		}
		clearAllListener() {
			if (!this.callable) return this.safeCall(this.clearAllListener);
			this.resNode.offAll(Laya.Event.COMPLETE), this.resNode.offAll(Laya.Event.STOPPED)
		}
		setSkin(t) {
			if (this.callable) {
				if (t == this._skinName) return;
				this._skinName = t, this.resNode.showSkinByName(t)
			} else this.safeCall(this.setSkin, t)
		}
		getSkeleton() {
			return this.resNode
		}
	}
	Spine.allTemplets = Object.create(null);
	class PanelGameLoading1 extends PanelResLoaderLoading {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelGameLoading1.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_roleSprite: "Laya.Sprite",
				cc_animNode: "Laya.Sprite",
				cc_button: "UIButton",
				cc_followTarget: "Laya.Sprite",
				cc_kouHong: "Laya.Sprite"
			}
		}
		buildUi() {
			this._anim = _G.poolManager.get(Spine, db.SPINE_DB_ID.qieping), this._anim.setParent(this.animNode), this._anim.setPosition(0, 0), this._anim.setAlpha(0), this.bg.alpha = 0, this.roleSprite.alpha = 0, this._startTime = Timer.time, this.roleSprite.loadImage(`res/ui/pnl_loading/role${PanelGameLoading1.nextRoleIdx}.png`), mgrAlert.playParticleEffect("129", new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2), 1.5, .5), cc.tween(this.bg).to(.5, cc.PROP.ALPHA1).call(() => {
				this._anim.setAlpha(1), this._anim.play("idle" + Mathf.random(2), !1);
				let t = this.context;
				t && t.onOpenBefore && t.onOpenBefore(), cc.tween(this.roleSprite).delay(.2).to(.4, {
					alpha: .4
				}).delay(.6).to(.4, {
					alpha: 1
				}).start()
			}).start(), PanelGameLoading1.nextRoleIdx = (PanelGameLoading1.nextRoleIdx + Mathf.random(2)) % 3, mgrRes.loadRes(`res/ui/pnl_loading/role${PanelGameLoading1.nextRoleIdx}.png`, RES_TYPE.IMAGE), this.initLoader(), this.scheduleOnce(.5, this.startLoader)
		}
		dispose() {
			this._anim && (_G.poolManager.put(this._anim), this._anim = null), super.dispose()
		}
		update() {
			super.update();
			let t = Laya.Point.TEMP;
			UiHelper.getSelfGlobalPos(this.followTarget, t, this.bg), this.kouHong.pos(t.x, t.y, !0)
		}
		initLoader() {
			let t = this.context;
			if (t && t.panel) {
				let e = t.loader || new ResLoader,
					a = mgrPanel.getPanelClass(t.panel);
				this.panelInstance = new a(t.context), this.panelInstance.resourceName.endsWith(".json") && e.add(this.panelInstance.resourceName), this.panelInstance.addPreloadRes(e), t.loader = e
			}
		}
		onLoadStart(t) {}
		onLoadProgress(t) {}
		onLoadComplete() {
			let t = this.context,
				e = Math.max(0, 2.5 - (Timer.time - this._startTime));
			return cc.tween(this.bg).delay(e).call(() => {
				this.panelInstance && mgrPanel.openPanelInstance(this.panelInstance, t.panel), mgrAlert.playParticleEffect("128", new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2), 1.5, .5)
			}).delay(.5).to(.5, cc.PROP.ALPHA0).call(this.close.bind(this)).start(), !1
		}
		on_click_button() {}
	}
	PanelGameLoading1.nextRoleIdx = 0;
	const ACTION_ID = {
			SIGN: "SIGN",
			PART_COUNT: "PART_COUNT",
			LEVEL_FINISH: "LEVEL_FINISH",
			LOTTERY: "LOTTERY",
			JIN_JI: "JIN_JI",
			PVP_SUC: "PVP_SUC",
			PVP_ALWAYS_SUC: "PVP_ALWAYS_SUC",
			SKINCARE: "SKINCARE",
			GET_FISH: "GET_FISH",
			OPEN_BOX: "OPEN_BOX",
			PLAY_GAME: "PLAY_GAME",
			PVP_FINISH: "PVP_FINISH",
			BUY_CAT_SHOP: "BUY_CAT_SHOP",
			ADD_LIKE: "ADD_LIKE",
			NEW_SUIT: "NEW_SUIT",
			SWITCH_ROLE: "SWITCH_ROLE",
			ROLE_TEST: "ROLE_TEST",
			DANCE_DRAW: "DANCE_DRAW",
			PLAY_DANCE: "PLAY_DANCE",
			CP_TEST: "CP_TEST",
			CLASS_TEACHER: "CLASS_TEACHER",
			EGG_CLICK_BUTTERFLY: "EGG_CLICK_BUTTERFLY",
			EGG_GET_FISH: "EGG_GET_FISH",
			EGG_CLEAR_TUYA: "EGG_CLEAR_TUYA",
			EGG_STEP: "EGG_STEP"
		},
		PAY_ID = {
			FREE_DIAMON: "101",
			COIN_GIFT: "102"
		},
		GOAL_ID = {
			CD_QUEST_FINISH: "10"
		},
		SWITCH_ID = {
			DAILY_RANK: "4",
			WEEKLY_RANK: "5"
		};
	var LayerMask;
	! function(t) {
		t[t.Default = 0] = "Default", t[t.Ground = 1] = "Ground", t[t.Object = 2] = "Object", t[t.Effect = 3] = "Effect"
	}(LayerMask || (LayerMask = {}));
	var GuideInfo = {
			start_time: 0
		},
		MODEL_ANIM, GUD_EVENT, GUD_REG_NODE, JUMP_PANEL, MPartType, ColorEggTargetId, UI_NAME;
	! function(t) {
		t.IDLE1 = "idle-idle01", t.IDLE2 = "idle-idle02", t.IDLE_T1 = "idle-transiting01", t.IDLE_T2 = "idle-transiting02", t.BEI_KE_OPEN = "beike_open", t.WIN = "jiesuan-shengli", t.LOSE = "jiesuan-shibai", t.MAIN_IDLE = "zjm-idle_01", t.MAIN_HUDONG1 = "zjm-dianji01", t.MAIN_HUDONG2 = "zjm-dianji02", t.MAIN_HUDONG3 = "zjm-dianji03", t.MAIN_XIUBIAO = "zsdh-zsdh", t.MAIN_MEIJIA_SHOW1 = "meijia-show01", t.MAIN_MEIJIA_SHOW2 = "meijia-show02", t.MEIJIA_ZHANSHI = "meijia-zhanshi", t.MEIJIA_ZHANSHI_IDLE = "meijia-zhanshi_idle", t.HUFU_WANCHENG = "hufu-wancheng", t.HUFU_KAISHI = "hufu-kaishi", t.HUFU_ZANTONG1 = "hufu-zantong01", t.HUFU_ZANTONG2 = "hufu-zantong02", t.HUFU_ZANTONG3 = "hufu-zantong03", t.HUFU_ZAMAO_R = "hufu-zamao_you", t.HUFU_ZAMAO_L = "hufu-zamao_zuo", t.HUFU_IDLE = "hufu-hufu_idle", t.PAISHOU01 = "paishou-paishou01", t.PAISHOU02 = "paishou-paishou02", t.PAISHOU03 = "paishou-paishou03", t.PAISHOU04 = "paishou-paishou04", t.PAISHOU05 = "paishou-paishou05", t.PAISHOU06 = "paishou-paishou06", t.PAISHOU07 = "paishou-paishou07", t.PAISHOU08 = "paishou-paishou08", t.PAISHOU09 = "paishou-paishou09", t.PAISHOU_IDLE = "paishou-paishou_idle", t.FACE_BIYAN_01 = "face_hufu-face_biyan_01", t.FACE_BIYAN_02 = "face_hufu-face_biyan_02", t.FACE_IDLE01 = "face_hufu-face_idle01", t.FACE_IDLE02 = "face_hufu-face_idle02", t.FACE_ZHAYAN = "face_hufu-face_zhayan", t.FACE_PAISHOU01 = "face_paishou-face_paishou01", t.FACE_PAISHOU02 = "face_paishou-face_paishou02", t.FACE_PAISHOU03 = "face_paishou-face_paishou03", t.FACE_PAISHOU04 = "face_paishou-face_paishou04", t.FACE_PAISHOU_IDLE = "face_paishou-face_paishou_idle", t.LAJI_1 = "ljxyx-laji_diu01", t.LAJI_2 = "ljxyx-laji_diu02", t.LAJI_IDLE = "ljxyx-laji_idle", t.LAJI_CUO = "ljxyx-laji_cuo", t.LAJI_WANCHENG = "ljxyx-laji_wancheng", t.FACE_LAJI_DIU01 = "face_ljxyx-face_laji_diu01", t.FACE_LAJI_DIU02 = "face_ljxyx-face_laji_diu02", t.FACE_LAJI_IDLE = "face_ljxyx-laji_idle", t.FACE_LAJI_CUO = "face_ljxyx-face_laji_cuo", t.FACE_LAJI_WANCHENG = "face_ljxyx-face_laji_wancheng", t.ZHUAN_SHEN = "lgxyx-zhuanshen", t.LIHE_IDLE = "lihe-idle", t.LIHE_CLOSE = "lihe-close", t.MFB_IDLE = "mozhang_anim-mz_idle", t.P_LIHE_IDLE = "lihe-lihe_idle", t.P_LIHE_CLOSE = "lihe-lihe_close", t.ZBS_XI_HUAN = "zbs-xihuan", t.ZBS_BU_XI_HUAN = "zbs-buxihuan", t.MH_IDLE1 = "manghe-idle01", t.MH_IDLE2 = "manghe-idle02", t.MH_OPEN = "manghe-open", t.FACE_COME = "face_come-face_come", t.FACE_IDLE = "face_come-face_idle", t.SHENTI_COME = "come-come", t.SHENTI_IDLE = "come-idle", t.WAWAHE_COME01 = "wawahe_come-wawahe_come01", t.WAWAHE_COME02 = "wawahe_come-wawahe_come02", t.WAWAHE_COME03 = "wawahe_come-wawahe_come03", t.GEMSTONE_COME = "come-gemstone_come", t.GEMSTONE_IDLE = "come-gemstone_idle", t.GEMSTONE_ZHANSHI = "come-gemstone_zhanshi", t.SHEXIANGJI_COME01 = "shexiangji_come-shexiangji_come01", t.SHEXIANGJI_COME02 = "shexiangji_come-shexiangji_come02", t.SHEXIANGJI_COME03 = "shexiangji_come-shexiangji_come03", t.COME_ZHANSHI = "come-zhanshi", t.SHEXIANGJI_ZHANSHI = "shexiangji_come-shexiangji_zhanshi", t.FACE_ZHANSHI = "face_come-face_zhanshi", t.FACE_ZHANSHI_LC = "face_come_liangcai-face_zhanshi_liangcai", t.COME_ZHANSHI_LC = "come_liangcai-zhanshi_liangcai", t.SHEXIANGJI_ZHANSHI_LC = "shexiangji_come_liangcai-shexiangji_zhanshi_liangcai", t.FACE_JIECHU = "face_jiechu-jiechu", t.SHENTI_JIECHU = "shenti_jiechu-jiechu", t.WAWAHE_JIECHU = "wawahe_jiechu-jiechu", t.GEMSTONE_JIECHU = "gs_jiechu-jiechu", t.SHEXIANGJI_JIECHU = "shexiangji_jiechu-jiechu", t.PIJUAN01 = "pijuan-pijuan01", t.PIJUAN02 = "pijuan-pijuan02", t.PIJUAN03 = "pijuan-pijuan03", t.PIJUAN_IDLE = "pijuan-pijuan_idle", t.CHEN_SHUI = "zjm_chenshui-chenshui", t.XING_LAI = "zjm_chenshui-xinglai", t.GEMSTONE_YUANDIAN = "come-gemstone_yuandian", t.GJ_JIESUAN = "gj_jiesuan-gj_jiesuan", t.SANLIANPAI = "gj_jiesuan-sanlianpai", t.PTJS00 = "pt_jiesuan-ptjs00", t.PTJS01 = "pt_jiesuan-ptjs01", t.PTJS02 = "pt_jiesuan-ptjs02", t.PTJS03 = "pt_jiesuan-ptjs03", t.REALLY = "pt_jiesuan-really", t.FACE_GJ_JIESUAN = "face_gj_jiesuan-face_gj_jiesuan", t.FACE_SANLIANPAI = "face_gj_jiesuan-face_sanlianpai", t.FACE_PTJS00 = "face_pt_jiesuan-face_ptjs00", t.FACE_PTJS01 = "face_pt_jiesuan-face_ptjs01", t.FACE_PTJS02 = "face_pt_jiesuan-face_ptjs02", t.FACE_PTJS03 = "face_pt_jiesuan-face_ptjs03", t.FACE_REALLY = "face_pt_jiesuan-face_really", t.SHEXIANGJI_GJ_JIESUAN = "shexiangji_gj_jiesuan-shexiangji_gj_jiesuan", t.WAWAHE_GJ_JIESUAN = "wawahe_gj_jiesuan-wawahe_gj_jiesuan", t.LAOYU_IDLE = "laoyu-idle", t.LAOYU_LOOK = "laoyu-look", t.SHENGJI = "shengji-shengji", t.FACE_SHENGJI = "face_shengji-face_shengji", t.ZJZ = "zjm_zjz-zjm_zjz", t.FACE_ZJZ = "face_zjm_zjz-face_zjm_zjz", t.HUDIE_IDLE = "hudie-idle", t.HUDIE_SHOW = "hudie_show-show", t.SHOW01 = "show-show01", t.SHOW02 = "show-show02", t.DANCE_XIANDAI01 = "dance_xiandai-dance_xiandai01", t.DANCE_XIANDAI02 = "dance_xiandai-dance_xiandai02", t.DANCE_XIANDAI03 = "dance_xiandai-dance_xiandai03", t.DANCE_XIANDAI04 = "dance_xiandai-dance_xiandai04", t.DANCE_XIANDAI05 = "dance_xiandai-dance_xiandai05", t.DANCE_XIANDAI06 = "dance_xiandai-dance_xiandai06", t.DANCE_XIANDAI07 = "dance_xiandai-dance_xiandai07", t.DANCE_XIANDAI08 = "dance_xiandai-dance_xiandai08", t.DANCE_XIANDAI09 = "dance_xiandai-dance_xiandai09", t.DANCE_XIANDAI10 = "dance_xiandai-dance_xiandai10", t.DANCE_XIANDAI11 = "dance_xiandai-dance_xiandai11", t.DANCE_XIANDAI12 = "dance_xiandai-dance_xiandai12", t.DANCE_XIANDAI13 = "dance_xiandai-dance_xiandai13", t.DANCE_XIANDAI14 = "dance_xiandai-dance_xiandai14", t.DANCE_XIANDAI15 = "dance_xiandai-dance_xiandai15", t.DANCE_XIANDAI16 = "dance_xiandai-dance_xiandai16"
	}(MODEL_ANIM || (MODEL_ANIM = {})),
	function(t) {
		t.START_GAME = "START_GAME", t.START_CONTRACT = "START_CONTRACT", t.START_CONTRACT2 = "START_CONTRACT2", t.ENTER_ROOM = "ENTER_ROOM", t.ENTER_MAIN = "ENTER_MAIN", t.ENTER_SKINCARE = "ENTER_SKINCARE", t.GOTO_CAT_COIN = "GOTO_CAT_COIN", t.GOTO_DREAM = "GOTO_DREAM", t.ENTER_DREAM = "ENTER_DREAM", t.ENTER_FISH = "ENTER_FISH", t.ENTER_PHONE = "ENTER_PHONE", t.ENTER_TALK = "ENTER_TALK", t.ENTER_SZZ = "ENTER_SZZ", t.ENTER_MANGHE = "ENTER_MANGHE", t.ENTER_MANGHE_OPEN = "ENTER_MANGHE_OPEN", t.ENTER_PLAY = "ENTER_PLAY", t.ENTER_LAJI = "ENTER_LAJI", t.ENTER_PAISHOU = "ENTER_PAISHOU", t.ENTER_HUDIE = "ENTER_HUDIE", t.ENTER_LINGGAN = "ENTER_LINGGAN", t.ENTER_CZTG = "ENTER_CZTG", t.ENTER_ORDER = "ENTER_ORDER", t.OPT_IDLE_SI_MIAN_MO = "OPT_IDLE_SI_MIAN_MO", t.OPT_IDLE_TU_LIAN = "OPT_IDLE_TU_LIAN", t.OPT_IDLE_TU_BI_ZI = "OPT_IDLE_TU_BI_ZI", t.OPT_IDLE_XIU_MEI_MAO = "OPT_IDLE_XIU_MEI_MAO", t.QUEST_GOTO_IN = "QUEST_GOTO_IN", t.QUEST_GOTO_OUT = "QUEST_GOTO_OUT", t.QUEST_GOTO_MOHE = "QUEST_GOTO_MOHE", t.QUEST_GOTO_DREAM = "QUEST_GOTO_DREAM", t.QUEST_GOTO_WEITUO = "QUEST_GOTO_WEITUO", t.QUEST_GOTO_CAT_SHOP = "QUEST_GOTO_CAT_SHOP", t.QUEST_GOTO_SZZ = "QUEST_GOTO_SZZ", t.QUEST_GOTO_SKINCARE = "QUEST_GOTO_SKINCARE", t.QUEST_GOTO_PVP = "QUEST_GOTO_PVP", t.QUEST_GOTO_SUIT = "QUEST_GOTO_SUIT", t.PANEL_DANCE_DRAW = "PANEL_DANCE_DRAW", t.PANEL_DANCE_PREVIEW = "PANEL_DANCE_PREVIEW", t.PANEL_DANCE_DRAW_IDLE_DRAW = "PANEL_DANCE_DRAW_IDLE_DRAW", t.PANEL_DANCE_DRAW_IDLE_OK = "PANEL_DANCE_DRAW_IDLE_OK", t.ENTER_CP_TEST = "ENTER_CP_TEST", t.ENTER_CLASS_ROOM = "ENTER_CLASS_ROOM", t.ENTER_STUDENT_STAGE = "ENTER_STUDENT_STAGE", t.PANEL_STUDENT_STAGE_ENTER_IDLE = "PANEL_STUDENT_STAGE_ENTER_IDLE", t.PANEL_STUDENT_STAGE_MOVE_IDLE = "PANEL_STUDENT_STAGE_MOVE_IDLE", t.PANEL_TEACHER_STAGE_IDLE = "PANEL_TEACHER_STAGE_IDLE", t.PANEL_TEACHER_CHANGE_SCORE_IDLE = "PANEL_TEACHER_CHANGE_SCORE_IDLE"
	}(GUD_EVENT || (GUD_EVENT = {})),
	function(t) {
		t.PANELCONTRACT_BUTTONOK = "PanelContract.buttonOk", t.PANELCONTRACT_BUTTONCIRCLE = "PanelContract.buttonCircle", t.PANELCONTRACT_BUTTONBOX = "PanelContract.buttonBox", t.PANELROOM_PART_18024 = "PanelRoom.part18024", t.PANELROOM_YANYING = "PanelRoom.menuYanYing", t.PANELROOM_CHUNCAI = "PanelRoom.menuChunCai", t.PANELROOM_BRUSH = "PanelRoom.brush", t.PANELROOM_PART_19011 = "PanelRoom.part19011", t.PANELROOM_PART_23003 = "PanelRoom.part23003", t.PANELROOM_BTNOK = "PanelRoom.btnOk", t.PANELMAIN_BUTTONPLAY = "PanelMain.buttonPlay", t.PANELMAIN_BUTTONCOIN = "PanelMain.buttonCoin", t.PANELMAIN_BUTTONDREAM = "PanelMain.buttonDream", t.PANELMAIN_BUTTONWEITUO = "PanelMain.buttonWeiTuo", t.PANELDANCEDRAW_BUTTONCOLOR0 = "PanelDanceDraw.buttonColor0", t.PANELDANCEDRAW_BUTTONOK = "PanelDanceDraw.buttonOk", t.PANELDANCEPREVIEW_BUTTONTODANCEDRAW = "PanelDancePreview.buttonToDanceDraw", t.PANELCPTEST_BUTTONGUIDE = "PanelCpTest.buttonGuide", t.PANELCLASSROOM_BUTTONSTUDENT = "PanelClassRoom.buttonStudent", t.PANELSKINCARE_BUTTONSTART = "PanelSkincare.buttonPlay", t.PANELSKINCARE_ITEM0 = "PanelSkincare.item0", t.PANELSKINCARE_BRUSH = "PanelSkincare.brush", t.PANELSKINCARE_BUTTONCLOSE = "PanelSkincare.buttonClose", t.PANELDREAM_SUITITEM0 = "PanelDream.suitItem0", t.PANELFISH_BUTTONFIND = "PanelFishGame.buttonFind", t.PANELFISH_TOUCHNODE = "PanelFishGame.touchNode", t.PANELPHONE_BUTTONYES = "PanelPhone.buttonYes", t.PANELTALK_BUTTONSTART = "PanelTalk.buttonStart", t.PANELSZZ_BUTTONYES = "PanelSzz.buttonYes", t.PANELSZZ_BUTTONAWARD = "PanelSzz.buttonAward", t.PLAY_NODE_BUTTONOUT = "PlayBottomNode.outsideNode", t.PLAY_NODE_BUTTONSKINCARE = "PlayBottomNode.skincareNode", t.PANELOUT_BUTTONLAJI = "PanelOutside.buttonStartLaJi", t.PANELOUT_LAJITONG = "PanelOutside.lajiTong", t.PANELOUT_DIALOG = "PanelOutside.dialog", t.PANELIN_ORDER = "PanelOutside.orderItem", t.PANELORDER_ITEM = "PanelOrder.orderItem", t.PANELORDER_BUTTONOK = "PanelOrder.buttonOk", t.PANELMANGHE_BUTTONOPEN = "PanelMangHeOpen.buttonOpenBox"
	}(GUD_REG_NODE || (GUD_REG_NODE = {})),
	function(t) {
		t[t.SKINCARE = 1] = "SKINCARE", t[t.DREAM = 2] = "DREAM", t[t.ENTRUST = 3] = "ENTRUST", t[t.PVP = 4] = "PVP", t[t.MANG_HE = 5] = "MANG_HE", t[t.INSIDE = 6] = "INSIDE", t[t.SWITCH_ROLE = 7] = "SWITCH_ROLE", t[t.ROLE_TEST = 8] = "ROLE_TEST", t[t.DANCE_DRAW = 9] = "DANCE_DRAW", t[t.CP_TEST = 10] = "CP_TEST", t[t.CLASS_ROOM = 11] = "CLASS_ROOM", t[t.ROOM = 12] = "ROOM", t[t.OUTSIDE = 13] = "OUTSIDE", t[t.SZZ = 14] = "SZZ"
	}(JUMP_PANEL || (JUMP_PANEL = {})),
	function(t) {
		t[t.SHAPE = 10] = "SHAPE", t[t.VARNISH = 20] = "VARNISH", t[t.DECAL_BOTTOM = 30] = "DECAL_BOTTOM", t[t.DECAL_FRONT = 31] = "DECAL_FRONT", t[t.NAIL_DECORATION = 40] = "NAIL_DECORATION", t[t.RING = 50] = "RING", t[t.HAND_DECORATION = 60] = "HAND_DECORATION", t[t.WRIST_DECORATION = 70] = "WRIST_DECORATION", t[t.BACKGROUND = 80] = "BACKGROUND", t[t.PET_DECORATION = 90] = "PET_DECORATION", t[t.BODY = 99] = "BODY"
	}(MPartType || (MPartType = {})),
	function(t) {
		t.huai_biao = "huaibiao", t.mian_ju = "mianju", t.man_du_la = "mandula"
	}(ColorEggTargetId || (ColorEggTargetId = {})),
	function(t) {
		t.PanelActiveClass = "PanelActiveClass", t.PanelActiveCp = "PanelActiveCp", t.PanelActiveCpTestPreview = "PanelActiveCpTestPreview", t.PanelActiveDance = "PanelActiveDance", t.PanelActiveDanceNew = "PanelActiveDanceNew", t.PanelActiveTest = "PanelActiveTest", t.PanelAdvCostDialog = "PanelAdvCostDialog", t.PanelAdvDialog = "PanelAdvDialog", t.PanelCat = "PanelCat", t.PanelCatLvup = "PanelCatLvup", t.PanelChallengePreview = "PanelChallengePreview", t.PanelClassColorEggs = "PanelClassColorEggs", t.PanelClassOutSide = "PanelClassOutSide", t.PanelClassReward = "PanelClassReward", t.PanelClassRoleDetail = "PanelClassRoleDetail", t.PanelClassRoleGet = "PanelClassRoleGet", t.PanelClassRoom = "PanelClassRoom", t.PanelClassStudenMatchingStageResult = "PanelClassStudenMatchingStageResult", t.PanelClassStudenMathStageResult = "PanelClassStudenMathStageResult", t.PanelClassStudenStageResult = "PanelClassStudenStageResult", t.PanelClassStudentMatchingStage = "PanelClassStudentMatchingStage", t.PanelClassStudentMathStage = "PanelClassStudentMathStage", t.PanelClassStudentStage = "PanelClassStudentStage", t.PanelClassTeacherChangeScore = "PanelClassTeacherChangeScore", t.PanelClassTeacherMatchingStage = "PanelClassTeacherMatchingStage", t.PanelClassTeacherMathStage = "PanelClassTeacherMathStage", t.PanelClassTeacherStage = "PanelClassTeacherStage", t.PanelCoinGift = "PanelCoinGift", t.PanelColorEggGet = "PanelColorEggGet", t.PanelContract = "PanelContract", t.PanelCpBooks = "PanelCpBooks", t.PanelCpTest = "PanelCpTest", t.PanelCpTestPreview = "PanelCpTestPreview", t.PanelDanceAnswer = "PanelDanceAnswer", t.PanelDanceDraw = "PanelDanceDraw", t.PanelDancePastRole = "PanelDancePastRole", t.PanelDancePreDestination = "PanelDancePreDestination", t.PanelDancePreview = "PanelDancePreview", t.PanelDanceRoleGet = "PanelDanceRoleGet", t.PanelDialog = "PanelDialog", t.PanelDiamondGift = "PanelDiamondGift", t.PanelDream = "PanelDream", t.PanelEgg = "PanelEgg", t.PanelFind = "PanelFind", t.PanelFishGame = "PanelFishGame", t.PanelFishGet = "PanelFishGet", t.PanelFishShow = "PanelFishShow", t.PanelFollow = "PanelFollow", t.PanelFriends = "PanelFriends", t.PanelGameLoading1 = "PanelGameLoading1", t.PanelGuide = "PanelGuide", t.PanelHotActivity = "PanelHotActivity", t.PanelInside = "PanelInside", t.PanelInstall = "PanelInstall", t.PanelItemGet = "PanelItemGet", t.PanelJoinSuc = "PanelJoinSuc", t.PanelLanguageDialog = "PanelLanguageDialog", t.PanelLingGan = "PanelLingGan", t.PanelLoading = "PanelLoading", t.PanelLottery = "PanelLottery", t.PanelMain = "PanelMain", t.PanelMangHe = "PanelMangHe", t.PanelMangHeOpen = "PanelMangHeOpen", t.PanelManicure = "PanelManicure", t.PanelManicurePreview = "PanelManicurePreview", t.PanelManicureResult = "PanelManicureResult", t.PanelMoreGame = "PanelMoreGame", t.PanelNativeAdv = "PanelNativeAdv", t.PanelNativeBanner = "PanelNativeBanner", t.PanelNotice = "PanelNotice", t.PanelOffline = "PanelOffline", t.PanelOrder = "PanelOrder", t.PanelOutside = "PanelOutside", t.PanelOver = "PanelOver", t.PanelOverCommon = "PanelOverCommon", t.PanelOverRemedy = "PanelOverRemedy", t.PanelPartInfo = "PanelPartInfo", t.PanelPhone = "PanelPhone", t.PanelPhoto = "PanelPhoto", t.PanelPvp = "PanelPvp", t.PanelPvpCard = "PanelPvpCard", t.PanelPvpDeclare = "PanelPvpDeclare", t.PanelPvpOver = "PanelPvpOver", t.PanelPvpReward = "PanelPvpReward", t.PanelPvpRongYao = "PanelPvpRongYao", t.PanelPvpSelect = "PanelPvpSelect", t.PanelQuest = "PanelQuest", t.PanelQuestGift = "PanelQuestGift", t.PanelRank = "PanelRank", t.PanelRankHuDong = "PanelRankHuDong", t.PanelRankVideo = "PanelRankVideo", t.PanelReconnectDialog = "PanelReconnectDialog", t.PanelRoleLvup = "PanelRoleLvup", t.PanelRolePreDestination = "PanelRolePreDestination", t.PanelRoleTest = "PanelRoleTest", t.PanelRoleTestOver = "PanelRoleTestOver", t.PanelRoom = "PanelRoom", t.PanelSchoolYearbook = "PanelSchoolYearbook", t.PanelSetting = "PanelSetting", t.PanelShare = "PanelShare", t.PanelShoe = "PanelShoe", t.PanelShoeColorEggs = "PanelShoeColorEggs", t.PanelShoeColorEggTip = "PanelShoeColorEggTip", t.PanelShoeSelect = "PanelShoeSelect", t.PanelShoeSelectResult = "PanelShoeSelectResult", t.PanelShop = "PanelShop", t.PanelShopLvup = "PanelShopLvup", t.PanelSign = "PanelSign", t.PanelSkincare = "PanelSkincare", t.PanelStory = "PanelStory", t.PanelSubscribe = "PanelSubscribe", t.PanelSuit = "PanelSuit", t.PanelSuitAward = "PanelSuitAward", t.PanelSuitDetail = "PanelSuitDetail", t.PanelSuitList = "PanelSuitList", t.PanelSuitSelect = "PanelSuitSelect", t.PanelSzz = "PanelSzz", t.PanelSzzShow = "PanelSzzShow", t.PanelTalk = "PanelTalk", t.PanelTryGame = "PanelTryGame", t.PanelVideoRankShare = "PanelVideoRankShare", t.PanelVideoRankTips = "PanelVideoRankTips", t.PanelVideoRankTipsRemote = "PanelVideoRankTipsRemote", t.PanelVideoShareReward = "PanelVideoShareReward", t.PanelWaitTime = "PanelWaitTime", t.Temp = "Temp"
	}(UI_NAME || (UI_NAME = {}));
	var Keyboard = Laya.Keyboard,
		MaskStyle, GUD;
	class KeyboardDebugTool extends MsgHandler {
		constructor(t) {
			super(), this.props = {}, this.bindPanel = t, this.registerListeners({
				[BASE_MSG.SYS_KEY_DOWN]: this.onMsgKeyDown.bind(this)
			}), this.startProcMsg()
		}
		static create(t) {
			this.remove(t);
			let e = new KeyboardDebugTool(t);
			return this._instance.push(e), e
		}
		static remove(t) {
			for (let e = 0; e < this._instance.length; e++)
				if (this._instance[e].bindPanel == t) {
					this._instance[e].dispose(), this._instance.splice(e, 1);
					break
				}
		}
		dispose() {
			this.setter1 = null, this.getter1 = null, this.setter2 = null, this.getter2 = null, this.stopProcMsg()
		}
		onMsgKeyDown(t) {
			if (this.bindPanel && !this.bindPanel.destroyed) {
				if (this.bindPanel.isFocus) switch (t.keyCode) {
					case Keyboard.W:
					case Keyboard.S:
					case Keyboard.A:
					case Keyboard.D:
						(e = this.props[t.keyCode]) && this.updateValue1(e[0], e[1]);
						break;
					case Keyboard.UP:
					case Keyboard.DOWN:
					case Keyboard.LEFT:
					case Keyboard.RIGHT:
						var e;
						(e = this.props[t.keyCode]) && this.updateValue2(e[0], e[1]);
						break;
					case Keyboard.P:
						this.debugInfo()
				}
			} else this.dispose()
		}
		updateValue1(t, e) {
			this.setter1(t, this.getter1(t) + e)
		}
		updateValue2(t, e) {
			this.setter2(t, this.getter2(t) + e)
		}
		setProp(t, e, a) {
			this.props[t] = [e, a]
		}
		createFromTarget(t) {
			this.setter2 = function(e, a) {
				t[e] = a
			}, this.getter2 = function(e) {
				return t[e]
			}
		}
		target(t, e) {
			return this.setter1 ? t instanceof Function ? (this.setter2 = t, this.getter2 = e) : this.createFromTarget(t) : (t instanceof Function ? (this.setter2 = t, this.getter2 = e) : this.createFromTarget(t), this.setter1 = this.setter2, this.getter1 = this.getter2), this
		}
		up(t, e = -1) {
			return this.setProp(Keyboard.W, t, e), this
		}
		down(t, e = 1) {
			return this.setProp(Keyboard.S, t, e), this
		}
		left(t, e = -1) {
			return this.setProp(Keyboard.A, t, e), this
		}
		right(t, e = 1) {
			return this.setProp(Keyboard.D, t, e), this
		}
		up2(t, e = -1) {
			return this.setProp(Keyboard.UP, t, e), this
		}
		down2(t, e = 1) {
			return this.setProp(Keyboard.DOWN, t, e), this
		}
		left2(t, e = -1) {
			return this.setProp(Keyboard.LEFT, t, e), this
		}
		right2(t, e = 1) {
			return this.setProp(Keyboard.RIGHT, t, e), this
		}
		debugInfo() {
			let t = {};
			for (const e in this.props) {
				let a = parseInt(e),
					i = this.props[a][0];
				t[i] = a < 50 ? Mathf.round(this.getter1(i), 4) : Mathf.round(this.getter2(i), 4)
			}
			console.log("------ start ctrl key info ------");
			for (const e in t) console.log(`key:[${e}]=[${t[e]}]`);
			console.log("------ end ctrl key info ------")
		}
		trasform(t, e = .02) {
			return this.target(t), this.up("localPositionY", -e), this.down("localPositionY", e), this.left("localPositionX", e), this.right("localPositionX", -e), this.up2("localRotationEulerX", 1), this.down2("localRotationEulerX", -1), this.left2("localPositionZ", e), this.right2("localPositionZ", -e), this
		}
	}
	KeyboardDebugTool._instance = [];
	class PanelBase3D extends PanelBase {
		static setDefaultLightEular(t, e, a) {}
		dispose() {
			if (this.panelEffects) {
				for (let t = 0; t < this.panelEffects.length; t++) _G.poolManager.put(this.panelEffects[t]);
				this.panelEffects.length = 0
			}
			KeyboardDebugTool.remove(this), this.scene3DBack && (this.scene3DBack.destroy(), this.scene3DBack = null), this.scene3DEffect && (this.scene3DEffect.destroy(), this.scene3DEffect = null, this.cameraEffect = null), super.dispose()
		}
		createScene3DBack(t = 0, e) {
			this.scene3DBack || (this.scene3DBack = this.createScene3D(t), e && (this.camera = this.createCamera(e, this.scene3DBack), this.lightBack = this.camera.addChild(this.createLight())))
		}
		createScene3DEffect(t = 1) {
			if (!this.scene3DEffect) {
				this.scene3DEffect = this.createScene3D();
				var e = this.scene3DEffect.addChild(new Laya.Camera(0, .1, 100));
				e.transform.localPositionZ = 1, e.clearFlag = Laya.Camera.CLEARFLAG_DEPTHONLY, e.orthographic = !0, e.orthographicVerticalSize *= _G.canvasHeight / 1024, this.cameraEffect = e
			}
		}
		global2camer(t, e) {
			return UiHelper.global2camera(t, this.cameraEffect, e)
		}
		node2Camera(t, e) {
			return UiHelper.node2camera(t, this.cameraEffect, e)
		}
		createScene3D(t) {
			let e = new Laya.Scene3D;
			return this.addChild(e), null != t && this.resNode.setChildIndex(e, t), e
		}
		createLight() {
			let t = new Laya.DirectionLight;
			return t.transform.localRotationEuler = PanelBase3D.defaultLightEular, t.color = new Laya.Vector3(1, 1, 1), t
		}
		createCamera(t, e) {
			let a = e.addChild(new Laya.Camera(0, .01, 100));
			return a.fieldOfView = t, a.clearFlag = Laya.Camera.CLEARFLAG_DEPTHONLY, KeyboardDebugTool.create(this).trasform(a.transform), a
		}
		addEffect(t) {
			this.panelEffects || (this.createScene3DEffect(), this.panelEffects = []);
			let e = _G.poolManager.get(Particle, t);
			return e.setParent(this.scene3DEffect), this.panelEffects.push(e), e
		}
		getEffect(t, e = !0) {
			if (this.panelEffects)
				for (let e = 0; e < this.panelEffects.length; e++) {
					let a = this.panelEffects[e];
					if (a.effectId == t) return a
				}
			return e ? this.addEffect(t) : null
		}
		removeEffect(t) {
			if (this.panelEffects)
				for (let e = 0; e < this.panelEffects.length; e++) {
					let a = this.panelEffects[e];
					if (a.effectId == t) {
						this.panelEffects.splice(e, 1), _G.poolManager.put(a);
						break
					}
				}
		}
	}
	PanelBase3D.defaultLightEular = new Laya.Vector3(-5, -11, 0),
		function(t) {
			t.All = "all", t.ExceptCenter = "center", t.None = "none"
		}(MaskStyle || (MaskStyle = {}));
	class PanelGuide extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.UI, this.panelStyle = 0, this.resourceName = "res/ui/PanelGuide.json", this.bResetRootNode = !1, this._exportNodeInfo = {
				cc_blockNode: "Laya.Sprite",
				cc_maskNode: "Laya.Sprite",
				cc_leftNode: "Laya.Image",
				cc_rightNode: "Laya.Image",
				cc_topNode: "Laya.Image",
				cc_bottomNode: "Laya.Image",
				cc_centerNode: "UIButton",
				cc_msgMask: "UIButton",
				cc_anchorCenter: "Laya.Sprite",
				cc_msgNode: "Laya.Sprite",
				cc_msgPnl: "Laya.Sprite",
				cc_headSprite: "Laya.Sprite",
				cc_msgLabel: "Laya.Label",
				cc_nameLabel: "Laya.Label",
				cc_continueSprite: "Laya.Sprite",
				cc_btnJump: "UIButton",
				cc_fingerNode: "Laya.Sprite",
				cc_fingerAnimNode: "Laya.Sprite",
				cc_moveFinger: "Laya.Sprite"
			}, this.btnsClickSound = {
				centerNode: ""
			}, this.curStepIndex = 0, this.curSteps = null, this.curState = "empty", this._clickHandler = null, this._msgKey = null, this._msgFinishTag = null, this._msgFinishCallback = null, this.curWaitTime = 0, this.leftSpine = null, this._jumpCount = 0, this.msgNodeOffset = Vec2.zero
		}
		buildUi() {
			this.resNode.mouseThrough = !0, this.maskNode.visible = !1, this.maskNode.alpha = 0, this.msgNode.visible = !1, this.msgMask.node.alpha = 0, this.blockNode.size(_G.canvasWidth, _G.canvasHeight), this.msgMask.node.size(_G.canvasWidth, _G.canvasHeight), this.anchorCenter.pos(_G.canvasWidth / 2, _G.canvasHeight / 2, !0), this.btnJump.node.pos(_G.canvasWidth - this.btnJump.node.pivotX - 10, 100 + this.btnJump.node.pivotY, !0), this.btnJump.node.visible = !1, this.btnJump.clickDelta = 0, this.initFinger(), this.moveFinger.visible = !1, UiHelper.registerTouchEvent(this.blockNode, UiHelper.stopEventHandler, UiHelper.stopEventHandler, UiHelper.stopEventHandler), this.msgLabel.text = "", this.msgRichText = this.msgLabel, this.curSteps = this.context.script, this.curStepIndex = 0, this.params = this.context.context, this.registerMsg({
				GUD_COMPLETE_KEY: this.onMsgCompleteKey.bind(this),
				GUIDE_FORCE_CLOSE: this.onMsgForceClose.bind(this)
			}), this.startProcMsg(), this.switchToUpdateState()
		}
		dispose() {
			this.stopProcMsg(), this.stopMoveToTimer(), this.leftSpine && (_G.poolManager.put(this.leftSpine), this.leftSpine = null), this._msgFingerAnim && (this._msgFingerAnim.clearTween(), this._msgFingerAnim.setAlpha(1), _G.poolManager.put(this._msgFingerAnim), this._msgFingerAnim = null), super.dispose()
		}
		onMsgCompleteKey(t) {
			"wait_msg" == this.curState && t && t == this._msgKey && (this._msgKey = null, this._msgFinishTag && (this.gotoTag(this._msgFinishTag), this._msgFinishTag = null), this.curState = "update", this._msgFinishCallback && (this._msgFinishCallback(this), this._msgFinishCallback = null), "update" == this.curState && this.switchToUpdateState())
		}
		onMsgForceClose() {
			this.forceClose()
		}
		initFinger() {
			this.fingerAnim = this.addEffect("135"), this.fingerAnim.followTarget(this.fingerAnimNode, this.cameraEffect, 100, 10), this.fingerAnim.hide()
		}
		nextStep() {
			if (this.curStepIndex < this.curSteps.length) {
				let t = this.curStepIndex++;
				console.log("guide step:" + t), (0, this.curSteps[t])(this), "update" == this.curState && this.nextStep()
			} else this.isDisposed || (Logger.error("guide index out of range"), this.close())
		}
		switchToUpdateState() {
			this.curState = "update", this.nextStep()
		}
		update() {
			switch (this.curState) {
				case "empty":
					break;
				case "update":
					this.nextStep();
					break;
				case "wait_time":
					this.curWaitTime -= Timer.deltaTime, this.curWaitTime <= 0 && this.switchToUpdateState();
					break;
				case "wait_click":
					break;
				case "wait_msg":
					this.curWaitTime -= Timer.deltaTime, this.curWaitTime <= 0 && (this._msgFinishTag = null, this._msgFinishCallback = null, this._msgKey = null, this.switchToUpdateState());
					break;
				case "wait_panel":
					this.checkPanel()
			}
		}
		on_click_centerNode() {
			if (Logger.debug("click centerNode"), "wait_click" == this.curState) {
				if (this._clickHandler) try {
					this._clickHandler()
				} catch (t) {
					Logger.error("guide on click error:", t), this._clickHandler = null
				}
				this.switchToUpdateState()
			}
		}
		on_click_msgMask() {
			Logger.debug("click msgMask"), "wait_talk" == this.curState && (this.curState = "update")
		}
		on_click_btnJump() {
			this._jumpCount++ > 10 && (mgrGuide.skipAll(), this.curState, this.closeGuide(!0))
		}
		forceClose() {
			this.callable ? (mgrGuide.finish(!1), this.curState, this.close()) : this.safeCall(this.forceClose)
		}
		closeGuide(t) {
			this.callable ? this.isDisposed || (mgrGuide.finish(t), this.close()) : this.safeCall(this.closeGuide, t)
		}
		stop() {
			this.callable ? this.curStepIndex = this.curSteps.length : this.safeCall(this.stop)
		}
		moveTo(t, e, a = 128, i = 128) {
			if (!this.callable) return void this.safeCall(this.moveTo, t, e, a, i);
			let s = _G.canvasWidth,
				n = _G.canvasHeight,
				o = !1;
			if (t instanceof Laya.Sprite) {
				var r = new Laya.Vector2(t.pivotX, t.pivotY);
				e && (r.x += e.x, r.y += e.y), t.localToGlobal(r, !1), o = !0
			} else r = t;
			r.x -= a / 2, r.y -= i / 2, r.x = Math.floor(Mathf.clamp(r.x, 0, s - a)), r.y = Math.floor(Mathf.clamp(r.y, 0, n - i)), this.centerNode.node.size(a, i).pos(r.x, r.y, !0), this.fingerNode.pos(r.x, r.y, !0);
			let l = r.x;
			this.leftNode.size(l, n).pos(0, 0, !0);
			let c = s - l - a;
			this.rightNode.size(c, n).pos(r.x + a, 0, !0);
			let h = r.y;
			this.topNode.size(a, h).pos(r.x, 0, !0);
			let d = n - h - i;
			this.bottomNode.size(a, d).pos(r.x, r.y + i, !0), this.fingerAnimNode.pos(a / 2, i / 2, !0), o && (this.stopMoveToTimer(), Laya.timer.frameOnce(1, this, this.moveTo, [t, e, a, i]))
		}
		stopMoveToTimer() {
			Laya.timer.clear(this, this.moveTo)
		}
		showFingerClickAnim() {
			this.callable ? (this.fingerNode.visible = !0, this.moveFinger.visible = !1, cc.clearTween(this.moveFinger), this.centerNode.node.x > _G.canvasWidth - 150 ? (this.fingerAnimNode.scale(-1, 1, !0), this.fingerAnim.setScale(-1, 1, 1), this.fingerAnim._offsetX = -100) : (this.fingerAnimNode.scale(1, 1, !0), this.fingerAnim.setScale(1, 1, 1), this.fingerAnim._offsetX = 100), this.fingerAnim.show(), this.fingerAnim.play(), this.fingerAnimNode.pos(this.centerNode.node.width / 2, this.centerNode.node.height / 2, !0), this.fingerAnimNode.alpha = 0, cc.tween(this.fingerAnimNode, !0).to(.2, cc.PROP.ALPHA1).start()) : this.safeCall(this.showFingerClickAnim)
		}
		showFingerMoveAnim(t, e, a = !1, i = 1) {
			this.callable ? (this.fingerNode.visible = !1, this.stopMoveToTimer(), this.fingerAnim.stop(), this.fingerAnim.hide(), this.moveFinger.visible = !0, a ? (this.moveFinger.alpha = 1, this.moveFinger.pos(t.x, t.y, !0), cc.tween(this.moveFinger, !0).repeatForever(cc.tween().to(i, {
				x: e.x,
				y: e.y
			}).to(i, {
				x: t.x,
				y: t.y
			})).start()) : (this.moveFinger.alpha = 0, cc.tween(this.moveFinger, !0).repeatForever(cc.tween().set({
				x: t.x,
				y: t.y
			}).to(.2, cc.PROP.ALPHA1).to(i, {
				x: e.x,
				y: e.y
			}, cc.OPTION.SINE_OUT).to(.2, cc.PROP.ALPHA0)).start())) : this.safeCall(this.showFingerMoveAnim, t, e, a, i)
		}
		showFingerMovePathAnim(t, e = 450, a = 0) {
			if (!this.callable) return void this.safeCall(this.showFingerMovePathAnim, t, e, a);
			this.fingerNode.visible = !1, this.stopMoveToTimer(), this.fingerAnim.stop(), this.fingerAnim.hide(), this.moveFinger.visible = !0;
			let i = cc.tween();
			for (let a = 0; a < t.length; a++) {
				const s = t[a];
				if (0 == a) i.set({
					x: s.x,
					y: s.y
				}), i.set(cc.PROP.ALPHA0), i.to(.2, cc.PROP.ALPHA1);
				else {
					let n = t[a - 1],
						o = Mathf.distance(s, n) / e;
					i.to(o, {
						x: s.x,
						y: s.y
					})
				}
			}
			i.to(.2, cc.PROP.ALPHA0).delay(a), this.moveFinger.alpha = 0, cc.tween(this.moveFinger, !0).repeatForever(i).start()
		}
		hideMoveFinger() {
			this.callable ? (cc.clearTween(this.moveFinger), this.moveFinger.visible = !1) : this.safeCall(this.hideMoveFinger)
		}
		followSprite(t) {
			this.callable ? (this.moveFinger.alpha = 1, cc.tween(this.moveFinger, !0).then(cc.follow2d(t)).start()) : this.safeCall(this.followSprite, t)
		}
		setMaskStyle(t) {
			if (this.callable) switch (t) {
				case MaskStyle.All:
					this.centerNode.node.mouseEnabled = !0, this.centerNode.node.visible = !0, this.leftNode.visible = !0, this.rightNode.visible = !0, this.topNode.visible = !0, this.bottomNode.visible = !0;
					break;
				case MaskStyle.ExceptCenter:
					this.centerNode.node.mouseEnabled = !1, this.centerNode.node.visible = !0, this.leftNode.visible = !0, this.rightNode.visible = !0, this.topNode.visible = !0, this.bottomNode.visible = !0;
					break;
				case MaskStyle.None:
					this.centerNode.node.visible = !1, this.leftNode.visible = !1, this.rightNode.visible = !1, this.topNode.visible = !1, this.bottomNode.visible = !1
			} else this.safeCall(this.setMaskStyle, t)
		}
		setMaskVisible(t, e = .2) {
			this.callable ? t ? (this.maskNode.visible = !0, cc.clearTween(this.maskNode), 1 != this.maskNode.alpha && cc.tween(this.maskNode).to(e, cc.PROP.ALPHA1).start(), this.setMsgMaskVisible(!1)) : (this.maskNode.visible && cc.tween(this.maskNode, !0).to(e, cc.PROP.ALPHA0).hide().start(), this.stopMoveToTimer(), this.fingerAnim.stop(), this.fingerAnim.hide()) : this.safeCall(this.setMaskVisible, t, e)
		}
		setBlockEnabled(t) {
			this.callable ? this.blockNode.visible = t : this.safeCall(this.setBlockEnabled, t)
		}
		showMsg(t, e = 0, a = 0, i = !1, s = !1) {
			if (!this.callable) return void this.safeCall(this.showMsg, t, e, a, i, s);
			let n = this.msgPnl;
			this.msgNode.pos(e, a + this.msgNodeOffset.y), n.scale(0, 0, !0), n.visible = !0, cc.tween(n, !0).to(.3, {
				scaleX: s ? -1 : 1,
				scaleY: 1
			}, {
				easing: cc.Ease.backOut
			}).start(), this.msgRichText.text = t, this.msgNode.visible = !0, s ? (this.msgLabel.scale(-1, 1, !0), this.nameLabel.scale(-1, 1, !0), this.headSprite.scale(-1, 1, !0)) : (this.msgLabel.scale(1, 1, !0), this.nameLabel.scale(1, 1, !0), this.headSprite.scale(1, 1, !0)), this._msgFingerAnim && (this._msgFingerAnim.clearTween(), this._msgFingerAnim.setAlpha(0)), i && (this.curState = "wait_talk")
		}
		setStateToWaitTalk() {
			this.callable ? this.curState = "wait_talk" : this.safeCall(this.setStateToWaitTalk)
		}
		hideMsg() {
			this.callable ? this.msgNode.visible = !1 : this.safeCall(this.hideMsg)
		}
		setMsgNodeOffset(t, e) {
			this.callable ? (this.msgNodeOffset.x = t, this.msgNodeOffset.y = e) : this.safeCall(this.setMsgNodeOffset, t, e)
		}
		showClickMsg(t, e, a, i = 0, s = !0) {
			this.callable ? (i > 0 ? this.scheduleOnce(i, () => {
				this.showMsg(t, e, a, !1, !s)
			}) : this.showMsg(t, e, a, !1, !s), this.curState = "wait_free", this.scheduleOnce(i + .6, () => {
				this.curState = "wait_talk"
			}), this._msgFingerAnim || (this._msgFingerAnim = _G.poolManager.get(Spine, db.SPINE_DB_ID.yindao), this._msgFingerAnim.setParent(this.continueSprite), this._msgFingerAnim.setPosition(this.continueSprite.pivotX, this.continueSprite.pivotY), this._msgFingerAnim.playDefaultAnim()), this._msgFingerAnim.clearTween(), this._msgFingerAnim.setAlpha(0), this._msgFingerAnim.runTween(cc.tween().delay(1.3).to(.3, cc.PROP.ALPHA1))) : this.safeCall(this.showClickMsg, t, e, a, i, s)
		}
		setHead(t, e, a, i) {
			this.callable ? (this.nameLabel.text = t, e && this.headSprite.loadImage(e), this.headSprite.pos(a, i, !0)) : this.safeCall(this.setHead, t, e, a, i)
		}
		setMsgMaskVisible(t, e = 1, a = .3) {
			this.callable ? t ? (this.msgMask.node.visible = !0, this.msgMask.node.alpha != e && cc.tween(this.msgMask.node, !0).to(a, {
				alpha: e
			}).start(), this.setMaskVisible(!1)) : this.msgMask.node.visible && cc.tween(this.msgMask.node, !0).to(a, cc.PROP.ALPHA0).hide().start() : this.safeCall(this.setMsgMaskVisible, t, e, a)
		}
		wait(t) {
			this.callable ? (this.curWaitTime = t, this.curState = "wait_time") : this.safeCall(this.wait, t)
		}
		waitForMsg(t, e, a = null, i) {
			this.callable ? (this.curWaitTime = e, this._msgKey = t, this._msgFinishTag = a, this._msgFinishCallback = i, this.curState = "wait_msg") : this.safeCall(this.waitForMsg, t, e, a, i)
		}
		gotoTag(t) {
			if (!this.callable) return void this.safeCall(this.gotoTag, t);
			let e = this.curSteps;
			for (let a = 0; a < e.length; a++)
				if (e[a] == t) return void(this.curStepIndex = a + 1);
			Logger.error("jumpToTag error")
		}
		setWaitPanel(t) {
			this.callable ? (this._waitPanel = t, this.curState = "wait_panel") : this.safeCall(this.setWaitPanel, t)
		}
		checkPanel() {
			this.callable ? "wait_panel" == this.curState && (this._waitPanel ? mgrPanel.findPanel(this._waitPanel) && (this._waitPanel = null, this.switchToUpdateState()) : this.switchToUpdateState()) : this.safeCall(this.checkPanel)
		}
		setJumpEnable(t) {
			this.callable ? this.btnJump.node.visible = t : this.safeCall(this.setJumpEnable, t)
		}
	}

	function findUi(t) {
		let e = mgrGuide.getRegisterNode(t);
		if (e) return e;
		let a = t.split("/");
		if (a && a.length > 1) {
			let e = mgrPanel.findViewByName(a[0]);
			if (e) {
				let a = UiHelper.getChild(mgrPanel.getLayerNode(e.panelLayer), t);
				if (a) return a;
				console.warn(`找不到ui:${t}`)
			} else console.warn(`找不到 panel:${t}`)
		} else console.warn(`uiName错误:${t}`);
		return null
	}
	class GUDHelper {
		static getPosByBottomOffset(t, e) {
			return new Laya.Point(_G.canvasWidth / 2 + t, _G.bottom + e)
		}
		static getPosByCenterOffset(t, e) {
			return new Laya.Point(_G.canvasWidth / 2 + t, _G.canvasHeight / 2 + e)
		}
	}

	function sort_rank_by_score(t, e) {
		return t.score < e.score ? 1 : t.score > e.score ? -1 : 0
	}

	function sort_rank_by_rank(t, e) {
		return t.rank < e.rank ? -1 : t.rank > e.rank ? 1 : 0
	}! function(t) {
		function click(t, e = Vec2.zero, a, i, s) {
			return function(n) {
				let o = findUi(t);
				o ? (n.setMaskVisible(!0), n.setMaskStyle(MaskStyle.All), n.moveTo(o, e, a, i), n.showFingerClickAnim(), n._clickHandler = function() {
					function doClick() {
						o.event(Laya.Event.CLICK), o.event("uibutton_click", "dummy")
					}
					s && s(n) || doClick()
				}, n.curState = "wait_click") : n.forceClose()
			}
		}

		function getUiPos(t) {
			if ("string" == typeof t) {
				let e = findUi(t);
				return e ? (new Vec2).set(UiHelper.getSelfGlobalPos(e, new Laya.Point)) : null
			}
			return (new Vec2).set(t)
		}
		t.close = function() {
			return function(t) {
				t.closeGuide(!1)
			}
		}, t.closeAndSave = function() {
			return function(t) {
				t.closeGuide(!0)
			}
		}, t.moveMaskTo = function(t, e) {
			return function(a) {
				let i = findUi(t);
				a.moveTo(i, e)
			}
		}, t.click = click, t.clickOnly = function(t, e, a, i = Vec2.zero) {
			return function(s) {
				let n = findUi(t);
				n ? (s.moveTo(n, i, e, a), s._clickHandler = function() {
					n.event(Laya.Event.CLICK), n.event("uibutton_click")
				}, s.curState = "wait_click") : s.forceClose()
			}
		}, t.waitAndClick = function(t, e = Vec2.zero, a, i, s) {
			return function(n) {
				mgrGuide.getRegisterNode(t) ? click(t, e, a, i, s)(n) : n.waitForMsg(t, 1e5, null, function() {
					click(t, e, a, i, s)(n)
				})
			}
		}, t.waitPanel = function(t) {
			return function(e) {
				e.setWaitPanel(t)
			}
		}, t.waitNode = function(t) {
			return function(e) {
				mgrGuide.getRegisterNode(t) || e.waitForMsg(t, 1e5)
			}
		}, t.moveFingerTo = function(t) {
			return function(e) {
				if ("string" == typeof t) {
					let a = findUi(t);
					e.moveTo(a)
				} else e.moveTo(t)
			}
		}, t.moveFingerBetween = function(t, e, a, i) {
			return function(s) {
				let n = getUiPos(t);
				if (!n) return void s.forceClose();
				let o = getUiPos(e);
				o ? s.showFingerMoveAnim(n, o, a, i) : s.forceClose()
			}
		}, t.hideMoveFinger = function() {
			return function(t) {
				t.hideMoveFinger()
			}
		}, t.setMaskVisible = function(t) {
			return function(e) {
				e.setMaskVisible(t)
			}
		}, t.showMaskAll = function() {
			return function(t) {
				t.setMaskStyle(MaskStyle.All)
			}
		}, t.showMaskExceptCenter = function() {
			return function(t) {
				t.setMaskStyle(MaskStyle.ExceptCenter)
			}
		}, t.showMaskNone = function() {
			return function(t) {
				t.setMaskStyle(MaskStyle.None)
			}
		}, t.showMsg = function(t, e = 0, a = 0, i = !1) {
			return function(s) {
				let n = e,
					o = _G.canvasFitHeight / 2 - 80 + a;
				s.showMsg(t, n, o, i)
			}
		}, t.setHead = function(t, e, a, i) {
			return function(s) {
				s.setHead(t, e, a, i)
			}
		}, t.showClickMsg = function(t, e = 0, a = 0, i = 0) {
			return function(s) {
				s.setMsgMaskVisible(!0);
				let n = e,
					o = _G.canvasFitHeight / 2 - 80 + a;
				s.showClickMsg(t, n, o, i, !0)
			}
		}, t.hideAll = function() {
			return function(t) {
				t.hideMsg(), t.setMsgMaskVisible(!1), t.setMaskVisible(!1)
			}
		}, t.hideMsg = function() {
			return function(t) {
				t.hideMsg()
			}
		}, t.setMsgMaskVisible = function(t, e, a) {
			return function(i) {
				i.setMsgMaskVisible(t, e, a)
			}
		}, t.waitTime = function(t) {
			return function(e) {
				e.wait(t)
			}
		}, t.waitForMsg = function(t, e = 1e6, a = null) {
			return function(i) {
				i.waitForMsg(t, e, a)
			}
		}, t.callFunc = function(t) {
			return function(e) {
				t && t(e)
			}
		}, t.setBlockEnabled = function(t) {
			return function(e) {
				e.setBlockEnabled(t)
			}
		}, t.setJumpEnable = function(t) {
			return function(e) {
				e.setJumpEnable(t)
			}
		}, t.setStateToWaitTalk = function() {
			return function(t) {
				t.setStateToWaitTalk()
			}
		}, t.gotoTag = function(t) {
			return function(e) {
				e.gotoTag(t)
			}
		}, t.saveGuide = function(t, e) {
			mgrGuide.saveGuideStep(t, e)
		}, t.stop = function() {
			return function(t) {
				t.stop()
			}
		}, t.playTalk = function(t) {
			return function() {
				mgrSound.playTalk(t)
			}
		}, t.playSound = function(t) {
			return function() {
				mgrSound.playSound(t)
			}
		}, t.sendMsg = function(t) {
			return function() {
				_G.sendMsg(t)
			}
		}, t.pointEvent = function(t, e) {
			return function() {
				GameStatistics.statisCommonEvent(t, e)
			}
		}
	}(GUD || (GUD = {}));
	const KEY_PLAYER_SCORE = "KEY_PLAYER_SCORE",
		KEY_UID = "KEY_UID",
		KEY_RANK_HEAD = "KEY_RANK_HEAD",
		FILE_RANK = "FILE_RANK";
	class mgrRank extends _mgrBase {
		static onload() {
			SDKBridge.registerCmd("/c/getRankResult", this.onGetRankResult.bind(this)), FileRecord.getData(KEY_PLAYER_SCORE) || FileRecord.setData(KEY_PLAYER_SCORE, []);
			let t = FileRecord.getData(KEY_UID);
			t || (t = _G.H5_TEST ? `uid_${Tools.formatFullTime()}_${Mathf.random(1e3)}` : Tools.generateUUID(), FileRecord.setData(KEY_UID, t)), this.uid = t, this.headRankData = FileRecord.getData(KEY_RANK_HEAD) || [], this.loadRankData()
		}
		static loadRankData() {
			let t = FileRecord.getDataFromFile(FILE_RANK);
			if (t)
				for (let e = 0; e < t.length; e++) {
					let a = t[e];
					for (let t = 0; t < a.length; t++)
						if (a[t].name == this.playerName) {
							this.playerRankData[e] = a[t];
							break
						}
				}
			this.rankDatas = t || [
				[],
				[],
				[]
			]
		}
		static saveRankData() {
			this.rankDatas && FileRecord.setDataToFile(FILE_RANK, this.rankDatas)
		}
		static getRandomHead() {
			return Mathf.random(18) + ""
		}
		static getRandomName() {
			let t = mgrI18n.zhcn1 && mgrI18n.zhcn1.values,
				e = mgrI18n.zhcn2 && mgrI18n.zhcn2.values,
				a = mgrI18n.pt1 && mgrI18n.pt1.values,
				i = mgrI18n.pt2 && mgrI18n.pt2.values,
				s = mgrI18n.vi1 && mgrI18n.vi1.values,
				n = mgrI18n.vi2 && mgrI18n.vi2.values,
				o = mgrI18n.en1 && mgrI18n.en1.values,
				r = mgrI18n.en2 && mgrI18n.en2.values,
				l = mgrI18n.id1 && mgrI18n.id1.values,
				c = mgrI18n.id2 && mgrI18n.id2.values,
				h = "";
			switch (mgrI18n.getLanguage()) {
				case E_LANGUAGE.zhcn:
					h = t[Mathf.random(t.length) - 1] + e[Mathf.random(e.length) - 1];
					break;
				case E_LANGUAGE.pt:
					h = a[Mathf.random(a.length) - 1] + i[Mathf.random(i.length) - 1];
					break;
				case E_LANGUAGE.vi:
					h = s[Mathf.random(s.length) - 1] + n[Mathf.random(n.length) - 1];
					break;
				case E_LANGUAGE.en:
					h = o[Mathf.random(o.length) - 1] + r[Mathf.random(r.length) - 1];
					break;
				case E_LANGUAGE.id:
					h = l[Mathf.random(l.length) - 1] + c[Mathf.random(c.length) - 1]
			}
			return h == this.playerName ? this.getRandomName() : h
		}
		static setPlayerName() {
			this.playerName = FileRecord.getData("player_name"), this.playerName || (this.playerName = this.getRandomName(), FileRecord.setData("player_name", this.playerName))
		}
		static setHttpMode(t, e) {
			t && e ? (this._rankId = t, this._appId = e, this._rankMode = 1) : this._rankMode = 0
		}
		static setSdkMode() {
			this._rankMode = 2
		}
		static setDummyMode() {
			this._rankMode = 3
		}
		static requestRankData(t = 0) {
			switch (console.log("---\x3e mgrRank.requestRankData"), this._rankMode) {
				case 1:
					console.log("服务器排行已经弃用");
					break;
				case 2:
					this.requestSdkRank(t);
					break;
				case 3:
					this.requestDummyRank(t)
			}
		}
		static commit(t, e = 0) {
			switch (this._rankMode) {
				case 1:
					this.commitToHttp(this._rankId, e, t), this.playerRankData[e] = null, this.rankDatas[e] = [];
					break;
				case 2:
					this.commitToSdk(e, t), this.playerRankData[e] = null, this.rankDatas[e] = [];
					break;
				case 3:
					this.commitToDummy(e, t)
			}
		}
		static getPlayerScore(t) {
			return FileRecord.getData(KEY_PLAYER_SCORE)[t] || 0
		}
		static onGetRankResult(t) {
			if (console.log("---\x3e mgrRank.onGetRankResult:", t.code), 1 == t.code) {
				let e = [];
				for (const a in t.msg) {
					let i = JSON.parse(t.msg[a]),
						s = {
							name: i.nickName,
							rank: parseInt(a),
							score: i.score,
							uid: i.userId.toString(),
							headUrl: i.headUrl,
							selfFlag: i.selfFlag
						};
					e.push(s), i.selfFlag && (this.playerRankData[0] = e[e.length - 1])
				}
				e.sort(function(t, e) {
					return t.rank - e.rank
				}), console.error("sdk 排行只有1个。"), this.rankDatas[0] = e, _G.sendMsg("RECEIVE_RANK_DATA"), this.playerRankData[0] && _G.sendMsg("RECEIVE_SELF_RANK_DATA")
			}
		}
		static requestSdkRank(t, e = 20) {
			SDKBridge.sendToSdk("/c/getRankData", {
				dataNum: e,
				rankName: t,
				order: 1,
				rankType: 0
			})
		}
		static commitToSdk(t, e) {
			let a = Math.floor(Timer.now);
			SDKBridge.sendToSdk("/c/saveRankData", {
				startTime: (a - 15).toString(),
				endTime: a.toString(),
				rankName: t + "",
				score: Math.floor(e),
				order: 1
			})
		}
		static commitToHttp(t, e, a) {
			let i = this.uid;
			JSON.stringify;
			let s = {
					cmd: "/set/setPlayerInfoWithScoreArray",
					info: {
						uidarray: [i],
						dataarray: [JSON.stringify({
							name: this.playerName
						})],
						scorearray: [a.toString()],
						rankid: t
					}
				},
				n = JSON.stringify(s);
			n && this.request(n)
		}
		static requestHttpRank(t, e = 1, a = 30) {
			if (e < 1 || a < e) return void Logger.error(`mgrRank.requestServerRank 非法请求 from:${e}, to:${a}`);
			let i = new Array(a - e + 1);
			for (let t = 0; t < i.length; t++) i[t] = (e + t).toString();
			let s = {
					cmd: "/get/getPlayerInoByRankid",
					info: {
						rankarry: i,
						rankid: this._rankId,
						sorttype: "REVRANGE"
					}
				},
				n = JSON.stringify(s);
			n && this.request(n, e => {
				this.refreshHttpRankData(e, t)
			})
		}
		static refreshHttpRankData(t, e = 0) {
			if (!t) return;
			if (1 != parseInt(t.code)) return;
			let a = t.msg;
			if (!a) return;
			let i = [];
			Tools.forEachMap(a, (t, e) => {
				let a = JSON.parse(e);
				if (a && a.data) try {
					let e = JSON.parse(a.data);
					i.push({
						name: e.name,
						score: parseInt(a.score),
						rank: parseInt(t),
						uid: a.uid,
						headUrl: ""
					})
				} catch (t) {}
			}), i.sort(sort_rank_by_rank), this.rankDatas[e] = i, _G.sendMsg("RECEIVE_RANK_DATA")
		}
		static requestSelfHttpRank(t) {
			let e = {
					cmd: "/get/getPlayerInfoByUid",
					info: {
						uidarry: [this.uid],
						rankid: this._rankId,
						sorttype: "REVRANGE"
					}
				},
				a = JSON.stringify(e);
			a && this.request(a, e => {
				this.refreshHttpSelfRankData(e, t)
			})
		}
		static refreshHttpSelfRankData(t, e = 0) {
			let a = this.uid,
				i = t.msg[a];
			if (!i) return;
			let s = JSON.parse(i);
			if (s && s.data) {
				let t = JSON.parse(s.data);
				this.playerRankData[e] = {
					name: t.name,
					score: parseInt(s.score),
					rank: s.rank,
					uid: a,
					headUrl: ""
				}, _G.sendMsg("RECEIVE_SELF_RANK_DATA")
			}
		}
		static request(t, e) {}
		static _calcRank(t, e) {
			let a = this._getMaxScore(t);
			switch (e = Math.min(a, e), t) {
				case 0:
					return 1 + (100 * Math.pow(a - e, 2) | 0);
				case 1:
					return Math.floor(Math.pow(a - e, 2.4)) + 1;
				case 2:
					return Math.floor(Math.pow(a - e, 1.1)) + 1
			}
		}
		static _getMaxScore(t) {
			switch (t) {
				case 0:
					return 25;
				case 1:
					return 100;
				case 2:
					return 2e4;
				default:
					return 9999
			}
		}
		static _randomRankRange(t, e, a) {
			if (a < 2) return null;
			e = Math.min(this._getMaxScore(t), e);
			let i = [],
				s = this._calcRank(t, e);
			if (e < 1) {
				for (let t = 0; t < a; t++) i.push({
					name: this.getRandomName(),
					score: e,
					rank: s + t,
					uid: "",
					headUrl: this.getRandomHead()
				});
				return void(this.rankDatas[t] = i)
			}
			let n = {
				name: this.playerName,
				score: e,
				rank: s,
				uid: this.uid,
				headUrl: "1",
				selfFlag: !0
			};
			if (i.push(n), this.playerRankData[t] = n, 1 == s) {
				for (let t = 0; t < a - 1; t++) i.push({
					name: this.getRandomName(),
					score: e,
					rank: s + 1 + t,
					uid: "",
					headUrl: this.getRandomHead()
				});
				return this.rankDatas[t] = i, void this.updateHeadRank(t)
			}
			for (let t = 0; t < a - 2; t++) i.push({
				name: this.getRandomName(),
				score: e,
				rank: s,
				uid: "",
				headUrl: this.getRandomHead()
			});
			Mathf.shuffle(i);
			let o = Math.min(this._getMaxScore(t), e + 1),
				r = this._calcRank(t, o);
			i.unshift({
				name: this.getRandomName(),
				score: o,
				rank: r,
				uid: "",
				headUrl: this.getRandomHead()
			});
			for (let t = 1; t < i.length; t++) i[t].rank = r + t + 1;
			this.rankDatas[t] = i
		}
		static commitToDummy(t, e) {
			e < 1 && (e = 1);
			let a = FileRecord.getData(KEY_PLAYER_SCORE);
			(a[t] || 0) > e || (a[t] = e, FileRecord.setData(KEY_PLAYER_SCORE, a), this.playerRankData[t] = null, this.rankDatas[t] = [])
		}
		static requestDummyRank(t) {
			let e = FileRecord.getData(KEY_PLAYER_SCORE)[t] || 1;
			this._randomRankRange(t, e, 20), this.headRankData[t] || this.updateHeadRank(t), this.rankDatas[t] && (_G.sendMsg("RECEIVE_RANK_DATA"), this.playerRankData[t] && _G.sendMsg("RECEIVE_SELF_RANK_DATA"), this.saveRankData())
		}
		static updateHeadRank(t) {
			let e = this.playerRankData[t],
				a = this.rankDatas[t];
			if (e && 1 == e.rank) this.headRankData[t] = [a[0], a[1], a[2]];
			else {
				let e = [];
				for (let a = 0; a < 3; a++) e.push({
					name: this.getRandomName(),
					score: this._getMaxScore(t),
					rank: 1,
					uid: "",
					headUrl: this.getRandomHead()
				});
				this.headRankData[t] = e
			}
			FileRecord.setData(KEY_RANK_HEAD, this.headRankData)
		}
		static getRankPercent(t, e) {
			let a = this._calcRank(t, 0);
			return Mathf.lerpFromInverseLerp(0, 1, a, 1, e)
		}
	}
	mgrRank.playerRankData = [], mgrRank._rankMode = 3;
	class mgrSuit extends _mgrBase {
		static onload() {
			this.suitData = FileRecord.getData("KEY_SUIT_DATA") || {}
		}
		static saveData() {
			FileRecord.setData("KEY_SUIT_DATA", this.suitData)
		}
		static getAllSuits(t) {
			let e = [];
			return Tools.forEachMap(db.get_suit_db_map(), function(a, i) {
				null != t && t != i.gid || e.push(a)
			}), e
		}
		static getHasSuits(t) {
			let e = [];
			return Tools.forEachMap(db.get_suit_db_map(), (a, i) => {
				null != t && t != i.gid || this.hasSuit(a) && e.push(a)
			}), e
		}
		static getSuitId(t) {
			let e, a = db.get_suit_db_map();
			return Tools.forEachMap(a, function(a, i) {
				if (i.parts.indexOf(t) >= 0) return e = a, !0
			}), e
		}
		static hasSuit(t) {
			if (!t) return !1;
			let e = db.get_suit_db(t).parts;
			for (let t = e.length - 1; t >= 0; t--)
				if (!BaseFacade.mItem.isOwned(e[t])) return !1;
			return !0
		}
		static hasPartCount(t) {
			if (!t) return 0;
			let e = 0,
				a = db.get_suit_db(t).parts;
			for (let t = a.length - 1; t >= 0; t--) BaseFacade.mItem.isOwned(a[t]) && e++;
			return e
		}
		static isSuitAwarded(t) {
			return !!t && this.suitData[t]
		}
		static getSuitAward(t, e) {
			if (!t) return;
			if (this.isSuitAwarded(t)) return;
			this.suitData[t] = !0, this.saveData();
			let a = db.get_suit_db(t),
				i = {
					itemId: "1000",
					count: a.diamondCount
				};
			return e && (i.count *= 3), BaseFacade.mItem.addItem(i.itemId, i.count, 24), mgrAlert.alertItems(i), _G.sendMsg("SUIT_UPDATE"), GameStatistics.statisCommonEventOnce(7054), a.awardStatistics && GameStatistics.statisCommonEvent(a.awardStatistics, e ? 1 : 0), i
		}
		static findSuit(t) {
			let e = db.get_suit_db_map(),
				a = null;
			return Tools.forEachMap(e, function(e, i) {
				if (~i.parts.indexOf(t)) return a = e, !0
			}), a
		}
		static hasAwardSuit() {
			let t = this.getHasSuits();
			for (let e = t.length - 1; e >= 0; e--)
				if (!this.isSuitAwarded(t[e])) return !0;
			return !1
		}
	}
	const KEY_PART_DEFAULT = "KEY_PART_DEFAULT",
		KEY_PART_SELECT = "KEY_PART_SELECT",
		KEY_PART_WEAR = "KEY_PART_WEAR";
	class mgrPart extends _mgrBase {
		static onload() {
			let t = FileRecord.getData(KEY_PART_WEAR);
			t || (t = this.defaultParts, FileRecord.setData(KEY_PART_WEAR, t)), this.partsWear = t, mgrRes.loadRes("res/cfg/paintData.txt", RES_TYPE.BUFFER, t => {
				let e = Tools.decompressArrToStr(t);
				if (e) {
					let t = JSON.parse(e);
					this.paintData = t
				}
			}), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this)
			})
		}
		static start() {}
		static onMsgItemChange(t) {
			if (0 == t.lastCount) {
				let e = t.itemDb;
				if (2 == e.type) switch (e.subType) {
					case 1:
						this.onGetNewPart(e)
				}
			}
		}
		static onGetNewPart(t) {
			let e = t.id;
			_G.sendMsg("GET_NEW_PART", e), BaseFacade.mGoal.commit(ACTION_ID.PART_COUNT);
			let a = mgrSuit.findSuit(e);
			if (mgrSuit.hasSuit(a)) {
				BaseFacade.mGoal.commit(ACTION_ID.NEW_SUIT);
				let t = db.get_suit_db(a);
				t.finishStatistics && GameStatistics.statisCommonEvent(t.finishStatistics), _G.sendMsg("SUIT_UPDATE")
			}
		}
		static setWearPart(t) {
			if (t instanceof Object) this.partsWear = t;
			else {
				let e = db.get_item_db(t);
				this.partsWear[e.gid] != t && (this.partsWear[e.gid] = t)
			}
			FileRecord.setData(KEY_PART_WEAR, this.partsWear)
		}
		static getSelectParts() {
			return FileRecord.getData(KEY_PART_SELECT)
		}
		static setSelectParts(t) {
			this.resetDefaultParts(t), t = this.checkDefaultParts(t), FileRecord.setData(KEY_PART_SELECT, t), FileRecord.setData(KEY_PART_WEAR, t), this.partsWear = Tools.deepCopy(t)
		}
		static resetDefaultParts(t) {
			let e = db.get_part_type_db_map(),
				a = {};
			Tools.forEachMap(e, function(e, i) {
				i.defaultPartId && (t[e] ? a[e] = t[e] : a[e] = i.defaultPartId)
			}), Tools.forEachMap(t, function(t, e) {
				BaseFacade.mItem.isOwned(e) || BaseFacade.mItem.addItem(e, 1, null)
			}), FileRecord.setData(KEY_PART_DEFAULT, a)
		}
		static get defaultParts() {
			let t = FileRecord.getData(KEY_PART_DEFAULT);
			return t ? Tools.deepCopy(t) : (t = {}, Tools.forEachMap(db.get_part_type_db_map(), function(e, a) {
				a.defaultPartId && (t[e] = a.defaultPartId)
			}), t)
		}
		static checkDefaultParts(t) {
			let e, a = this.defaultParts;
			if (t instanceof Array) {
				e = [];
				for (let i = 0; i < t.length; i++) {
					delete a[db.get_item_db(t[i]).gid], e.push(t[i])
				}
				for (const t in a) {
					let i = a[t];
					i && e.push(i)
				}
			} else {
				e = {};
				for (const i in t) {
					let s = db.get_item_db(t[i]);
					delete a[s.gid], e[s.gid] = s.id
				}
				for (const t in a) {
					let i = a[t];
					i && (e[t] = i)
				}
			}
			return e
		}
		static removeUnchoosePart(t) {
			for (var e = t.length - 1; e >= 0; e--) {
				2 != db.get_item_db(t[e]).type && t.splice(e, 1)
			}
		}
		static addPartResList(t, e, a = !1) {
			for (var i in a && (e.add(db.get_model_db(db.MODEL_DB_ID.body).resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.face).resPath, RES_TYPE.PREFAB3D)), t) {
				var s = t[i];
				let a = db.get_item_db(s).viewList;
				for (let t = 0; t < a.length; t++) {
					let i = db.get_model_db(a[t]);
					0 == i.type ? e.add(i.resPath, RES_TYPE.PREFAB3D) : e.add(i.resPath, RES_TYPE.TEXTURE2D)
				}
			}
		}
		static isMatchTag(t, e, a) {
			return "number" == typeof t ? t == e || t == a : t.tag1 && t.tag2 ? this.isMatchTag(t.tag1, e, a) && this.isMatchTag(t.tag2, e, a) : this.isMatchTag(t.tag1, e, a) || this.isMatchTag(t.tag2, e, a)
		}
		static setRolePhoto(t) {
			this.roleTexture && (this.roleTexture.destroy(!0), this.roleTexture = null), t && (t instanceof Laya.Texture ? this.roleTexture = t : this.roleTexture = Laya.Texture.create(t, 0, 0, t.width, t.height))
		}
		static calcLevelScore(t, e) {
			let a = {},
				i = 0;
			for (const s in t) {
				let n = this.calcPartScore(t[s], e);
				a[s] = n, i += n
			}
			let s = i >= e.score;
			return _G.H5_TEST && Logger.log(`总分数:${i}, 结果:${s}`), this.partScoreResult = {
				partsScore: a,
				totalScore: i,
				suc: s,
				parts: t,
				weight: e
			}, this.partScoreResult
		}
		static calcPartScore(t, e) {
			let a = db.get_item_db(t),
				i = DbExt.getTagWeights(a),
				s = 0;
			return e.tag1 && (s = i[e.tag1 - 1] * e.tag1Weight), e.tag2 && (s += i[e.tag2 - 1] * e.tag2Weight, e.tag1 && (s /= 2)), _G.H5_TEST && Logger.log(`部件id:${t}, 分数:${s}`), s
		}
		static getPaintData(t) {
			if (t) {
				let e = t.replace(/(.*\/)*([^.]+).*/gi, "$2");
				if (e) {
					return this.paintData[e]
				}
			}
			return console.warn("can't find paint data by url:", t), null
		}
		static getPartTypeName(t) {}
		static removePartNotOwned(t) {
			let e = this.defaultParts;
			Tools.forEachMap(t, function(a, i) {
				BaseFacade.mItem.isOwned(i) || (e[a] ? t[a] = e[a] : delete t[a])
			})
		}
		static openPanelRoom(t, e, a, i) {
			e = e || this.partsWear, mgrAlert.openGameLoading(UI_NAME.PanelRoom, {
				type: t,
				parts: e,
				data: i
			}, a)
		}
		static openPanelSuitDetal(t, e = !1) {
			mgrAlert.openGameLoading(UI_NAME.PanelSuitDetail, {
				suitIdOrParts: t,
				bPvpAward: e
			})
		}
	}
	var AnimLoadState;
	mgrPart.photoWidth = 98, mgrPart.photoHeight = 96, mgrPart.popularRateLevel = 0, mgrPart.popularAwardRate = 0,
		function(t) {
			t[t.Empty = 0] = "Empty", t[t.Loading = 1] = "Loading", t[t.Loaded = 2] = "Loaded"
		}(AnimLoadState || (AnimLoadState = {}));
	const DEFAULT_TRANSITION_DURATION = .1;
	class AnimStateScript extends Laya.AnimatorStateScript {
		setEventData(t, e) {
			this._node = t, this._animId = e
		}
		onStateEnter() {
			this._node.destroyed || this._node.event("Enter", this._animId)
		}
		onStateUpdate() {}
		onStateExit() {
			this._node.destroyed || this._node.event("Exit", this._animId)
		}
	}
	class Model extends SpriteBase3D {
		constructor(t) {
			super(), this.resourceType = RES_TYPE.PREFAB3D, this._lastAnimId = "", this._curAnimId = "", this._animStates = Object.create(null), this.modelId = t, this.modelDb = db.get_model_db(t), this.resourceName = this.modelDb.resPath
		}
		get lastAnimationId() {
			return this._lastAnimId
		}
		get curAnimationId() {
			return this._curAnimId
		}
		onResourceLoaded(t) {
			this.resNode = Laya.Sprite3D.instantiate(t), this._animtor = this.resNode.getComponent(Laya.Animator), this._animtor && this.resNode.on("Exit", this, this._onAnimComplete)
		}
		reuse() {
			this.tryCreate(), this.setSpeed(1), this.show()
		}
		unuse() {
			this._curAnimId = "", this._clearAnimList(), this.setSpeed(0), this.removeFromParent(), this.hide(), this.clearDelayCalls()
		}
		dispose() {
			super.dispose()
		}
		initAnimator(t = !0) {
			this.callable ? this._animtor || (this._animtor = this.addComponent(Laya.Animator), t && this._animtor.addControllerLayer(new Laya.AnimatorControllerLayer("")), this.resNode.on("Exit", this, this._onAnimComplete)) : this.safeCall(this.initAnimator)
		}
		getAnimator() {
			if (this.callable) return this._animtor;
			this.logNotFinishError()
		}
		getAnimationDuration(t) {
			let e = this._animtor.getControllerLayer(0).getAnimatorState(t);
			return e ? e.clip.duration() : 0
		}
		playAnim(t, e = DEFAULT_TRANSITION_DURATION, a) {
			this.callable ? (this._clearAnimList(), this._checkAnimAndPlay(t, e, 0, a)) : this.safeCall(this.playAnim, t, e, a)
		}
		_checkAnimAndPlay(t, e, a, i) {
			if (this._animtor) switch (this._curAnimId = t, this._lastAnimId = t, this._animStates[t] || AnimLoadState.Empty) {
				case AnimLoadState.Loaded:
					this._playAnimOnloaded(t, e, a, i);
					break;
				case AnimLoadState.Empty:
					if (t) {
						let s = db.get_animation_db(t);
						s && (this._animStates[t] = AnimLoadState.Loading, mgrRes.loadRes(s.path, RES_TYPE.ANIMATIONCLIP, s => {
							this.isDisposed || (this.addAnimatorState(t, s), this._playAnimOnloaded(t, e, a, i))
						}))
					} else this._playAnimOnloaded(null, e, a, i);
					break;
				case AnimLoadState.Loading:
			}
		}
		addAnimatorStateById(t) {
			if (this._animtor.getControllerLayer(0).getAnimatorState(t)) return;
			let e = db.get_animation_db(t),
				a = mgrRes.tryLoadRes(e.path);
			a ? this.addAnimatorState(t, a) : console.error(`Model.addAnimatorStateById: 动画未加载:${t}`)
		}
		addAnimatorState(t, e) {
			if (!this._animtor) return;
			if (!e) return void console.error(`Model.addAnimatorState: 未知动画:${t}`);
			if (this._animtor.getControllerLayer(0).getAnimatorState(t)) return void console.log("Model.addAnimatorState: 重复添加动画:", t);
			let a = new Laya.AnimatorState;
			a.clip = e, a.clipStart = 0, a.clipEnd = 1, a.name = t, a.addScript(AnimStateScript).setEventData(this.resNode, t), this._animtor.getControllerLayer(0).addState(a), this._animStates[t] = AnimLoadState.Loaded
		}
		_playAnimOnloaded(t, e, a, i) {
			this.isDisposed || (null != i && (this._animtor.getControllerLayer(0).getAnimatorState(t).clip.islooping = i), e ? this._animtor.crossFade(t, e, 0, a) : this._animtor.play(t, 0, a))
		}
		playAnims(t = DEFAULT_TRANSITION_DURATION, e, a) {
			if (this.callable) switch (this._loop = a, e.length) {
				case 0:
					return;
				case 1:
					this._checkAnimAndPlay(e[0], t, 0, a);
					break;
				default:
					this._animPlayList = e.slice(1), this._checkAnimAndPlay(e[0], t, 0, !1)
			} else this.safeCall(this.playAnims, t, e, a)
		}
		_onAnimComplete(t) {
			if (this._curAnimId = "", this._animPlayList && this._animPlayList.length > 0) {
				let t = this._animPlayList.shift();
				this._checkAnimAndPlay(t, .1, 0, this._loop), 0 == this._animPlayList.length && (this._animPlayList = null)
			}
		}
		_clearAnimList() {
			this._animPlayList = null, this._loop = null
		}
		simulate(t, e) {
			this.callable ? (this._clearAnimList(), this._checkAnimAndPlay(t, 0, e, !1)) : this.safeCall(this.simulate, t, e)
		}
		getSpeed() {
			return this._animtor && this._animtor.speed
		}
		setSpeed(t) {
			this.callable ? this._animtor && (this._animtor.speed = t) : this.safeCall(this.setSpeed, t)
		}
		get transform() {
			if (this.callable) return this.resNode.transform
		}
	}
	var UnlitMaterial = Laya.UnlitMaterial;
	class PaintMaterialTest extends Laya.Material {
		constructor() {
			super(), this._screenPos = new Laya.Vector2, this._state = 32, this.setShaderName("PaintMaterialTest"), this._shaderValues.setVector(UnlitMaterial.ALBEDOCOLOR, new Laya.Vector4(1, 1, 1, 1))
		}
		static initShader() {
			var t = {
					s_Cull: Laya.Shader3D.RENDER_STATE_CULL,
					s_Blend: Laya.Shader3D.RENDER_STATE_BLEND,
					s_BlendSrc: Laya.Shader3D.RENDER_STATE_BLEND_SRC,
					s_BlendDst: Laya.Shader3D.RENDER_STATE_BLEND_DST,
					s_DepthTest: Laya.Shader3D.RENDER_STATE_DEPTH_TEST,
					s_DepthWrite: Laya.Shader3D.RENDER_STATE_DEPTH_WRITE
				},
				e = {
					a_Position: Laya.VertexMesh.MESH_POSITION0,
					a_Color: Laya.VertexMesh.MESH_COLOR0,
					a_Texcoord0: Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
					a_BoneWeights: Laya.VertexMesh.MESH_BLENDWEIGHT0,
					a_BoneIndices: Laya.VertexMesh.MESH_BLENDINDICES0,
					a_MvpMatrix: Laya.VertexMesh.MESH_MVPMATRIX_ROW0
				},
				a = {
					u_Bones: Laya.Shader3D.PERIOD_CUSTOM,
					u_AlbedoTexture: Laya.Shader3D.PERIOD_MATERIAL,
					u_AlbedoColor: Laya.Shader3D.PERIOD_MATERIAL,
					u_TilingOffset: Laya.Shader3D.PERIOD_MATERIAL,
					u_MvpMatrix: Laya.Shader3D.PERIOD_SPRITE,
					u_AlphaTestValue: Laya.Shader3D.PERIOD_MATERIAL,
					u_maskTexture: Laya.Shader3D.PERIOD_MATERIAL,
					u_newTexture: Laya.Shader3D.PERIOD_MATERIAL,
					u_transition: Laya.Shader3D.PERIOD_MATERIAL,
					u_screenSize: Laya.Shader3D.PERIOD_MATERIAL,
					u_screenPosition: Laya.Shader3D.PERIOD_MATERIAL,
					u_noiseTexture: Laya.Shader3D.PERIOD_MATERIAL
				};
			let i = Laya.Shader3D.add("PaintMaterialTest", null, null, !0),
				s = new Laya.SubShader(e, a);
			i.addSubShader(s), s.addShaderPass('\n#include "Lighting.glsl";\n\nattribute vec4 a_Position;\n\nattribute vec2 a_Texcoord0;\n\n#ifdef GPU_INSTANCE\n    attribute mat4 a_MvpMatrix;\n#else\n    uniform mat4 u_MvpMatrix;\n#endif\n\nattribute vec4 a_Color;\nvarying vec4 v_Color;\nvarying vec2 v_Texcoord0;\n\n#ifdef TILINGOFFSET\n    uniform vec4 u_TilingOffset;\n#endif\n\n#ifdef BONE\n    const int c_MaxBoneCount = 24;\n    attribute vec4 a_BoneIndices;\n    attribute vec4 a_BoneWeights;\n    uniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\n#if defined(DEF_PAINT_UV) || defined(DEF_TRANSITION_DISSOLVE_DIR)\n    varying vec2 v_Texcoord1;\n#endif\n\nvoid main() {\n    vec4 position;\n    #ifdef BONE\n        mat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n        skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n        skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n        skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n        position=skinTransform*a_Position;\n    #else\n        position=a_Position;\n    #endif\n    #ifdef GPU_INSTANCE\n        gl_Position = a_MvpMatrix * position;\n    #else\n        gl_Position = u_MvpMatrix * position;\n    #endif\n\n    #ifdef TILINGOFFSET\n        v_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n    #else\n        v_Texcoord0=a_Texcoord0;\n    #endif\n\n    #if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n        v_Color = a_Color;\n    #endif\n    gl_Position=remapGLPositionZ(gl_Position);\n\n    #if defined(DEF_PAINT_UV) || defined(DEF_TRANSITION_DISSOLVE_DIR)\n        v_Texcoord1 = gl_Position.xy / gl_Position.w * 0.5 + 0.5;\n    #endif\n}\n        ', "\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\n\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n    varying vec4 v_Color;\n#endif\n\n#ifdef ALBEDOTEXTURE\n    uniform sampler2D u_AlbedoTexture;\n    varying vec2 v_Texcoord0;\n#endif\n\nuniform vec4 u_AlbedoColor;\n\n#ifdef DEF_PAINT_UV\n    varying vec2 v_Texcoord1;\n    uniform vec2 u_screenSize;\n    uniform vec2 u_screenPosition;\n#endif\n\n#ifdef DEF_PAINT_MASK\n    uniform sampler2D u_maskTexture;\n    uniform sampler2D u_newTexture;\n#endif\n\n#if defined(DEF_TRANSITION_COLOR) || defined(DEF_TRANSITION_ALPHA) || defined(DEF_TRANSITION_DISSOLVE)\n    uniform float u_transition;\n#endif\n\n#if defined(DEF_TRANSITION_DISSOLVE) || defined(DEF_TRANSITION_DISSOLVE_DIR)\n    uniform sampler2D u_noiseTexture;\n#endif\n\n#if defined(DEF_TRANSITION_DISSOLVE_DIR)\n    uniform float u_transition;\n    varying vec2 v_Texcoord1;\n#endif\n\n#ifdef ALPHATEST\nuniform float u_AlphaTestValue;\n#endif\n\n\nvoid main()\n{\n    vec4 color =  u_AlbedoColor;\n\n    #ifdef DEF_PAINT_UV\n        // float dx = u_screenPosition.x - v_Texcoord1.x * u_screenSize.x;\n        // float dy = u_screenPosition.y - v_Texcoord1.y * u_screenSize.y;\n        // float r = dx * dx + dy * dy;\n        \n        // color.r = step(r , 4.0);\n        color.r = 1.0;\n        \n        color.g = v_Texcoord0.x;\n        color.b = v_Texcoord0.y;\n        color.a = 1.0;\n    #elif defined(DEF_PAINT_NONE)\n        color.r = 0.0;\n        color.g = 0.0;\n        color.b = 0.0;\n        color.a = 0.0;\n    #elif defined(DEF_PAINT_MASK)\n        #ifdef ALBEDOTEXTURE\n            color *= texture2D(u_AlbedoTexture, v_Texcoord0);\n        #endif\n        #if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n            color *= v_Color;\n        #endif\n\n        vec2 maskTexcoord = v_Texcoord0.xy;\n        maskTexcoord.y = 1.0 - maskTexcoord.y;\n        float maskAlpha = texture2D(u_maskTexture, maskTexcoord).r;\n        vec4 newColor = texture2D(u_newTexture, v_Texcoord0);\n        color = mix(color, newColor, maskAlpha);\n\n        #ifdef DEF_TRANSITION_COLOR\n            color = mix(color, newColor, u_transition);\n        #elif defined(DEF_TRANSITION_ALPHA)\n            color.a = mix(color.a, 0.0, u_transition);\n        #endif\n    #elif defined(DEF_TRANSITION_DISSOLVE)\n        float dissolveValue = texture2D(u_noiseTexture, v_Texcoord0).r;\n        if (dissolveValue <= u_transition) {\n            discard;\n        }\n\n        #ifdef ALBEDOTEXTURE\n            color *= texture2D(u_AlbedoTexture, v_Texcoord0);\n        #endif\n        #ifdef ALPHATEST\n            if(color.a <= u_AlphaTestValue){\n                discard;\n            }\n        #endif\n        #if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n            color *= v_Color;\n        #endif\n\n        float limit = u_transition / dissolveValue;\n\n        float _ThresholdFar = 0.9;\n        float _ThresholdNear = 0.95;\n        vec4 _ColorNear = vec4(0.83, 1.0, 1.0, 1.0);\n        vec4 _ColorFar = vec4(0.28, 0.36, 0.96, 1.0);\n\n        float bFar = step(_ThresholdFar, limit);\n        float bNear = step(_ThresholdNear, limit) * bFar;\n        vec4 disCol = _ColorNear * bNear + (bFar - bNear) * _ColorFar;\n\n        color = color * (1.0 - bFar) + disCol;\n    #elif defined(DEF_TRANSITION_DISSOLVE_DIR)\n        float dissolveValue = texture2D(u_noiseTexture, v_Texcoord0 * 2.0).r;\n        float dis = distance(v_Texcoord1, vec2(0.5, 0.5)) * 1.414 * 6.0;\n        dis = (dis - dissolveValue) / 6.0 - u_transition;\n\n        if(dis <= 0.0){\n            discard;\n        }\n        \n        #ifdef ALBEDOTEXTURE\n            color *= texture2D(u_AlbedoTexture, v_Texcoord0);\n        #endif\n        #if defined(COLOR) && defined(ENABLEVERTEXCOLOR)\n            color *= v_Color;\n        #endif\n\n        float b1 = step(0.0, dis) * step(dis, 0.05);\n        float b2 = step(0.05, dis) * step(dis, 0.1);\n\n        vec4 _ColorNear = vec4(0.84, 0.58, 1, 1.0);\n        vec4 _ColorFar = vec4(0.8, 0.3, 0.5, 1.0);\n\n        vec4 disCol = (_ColorNear * b1 + _ColorFar * b2);\n        color += disCol;\n    #else\n        #ifdef ALBEDOTEXTURE\n            color *= texture2D(u_AlbedoTexture, v_Texcoord0);\n        #endif\n        #ifdef ALPHATEST\n            if(color.a <= u_AlphaTestValue){\n                discard;\n            }\n        #endif\n        #if defined(COLOR) && defined(ENABLEVERTEXCOLOR)\n            color *= v_Color;\n        #endif\n    #endif\n\n    gl_FragColor = color;\n}\n        ", t)
		}
		get albedoTexture() {
			return this._shaderValues.getTexture(UnlitMaterial.ALBEDOTEXTURE)
		}
		set albedoTexture(t) {
			t ? this._defineDatas.add(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE) : this._defineDatas.remove(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE), this._shaderValues.setTexture(UnlitMaterial.ALBEDOTEXTURE, t)
		}
		get albedoColor() {
			return this._shaderValues.getVector(UnlitMaterial.ALBEDOCOLOR)
		}
		set albedoColor(t) {
			this._shaderValues.setVector(UnlitMaterial.ALBEDOCOLOR, t)
		}
		setScreenSize(t, e) {
			this._shaderValues.setVector2(PaintMaterialTest.SCREEN_SIZE, new Laya.Vector2(t, e))
		}
		setScreenPosition(t, e) {
			this._screenPos.setValue(t, e), this._shaderValues.setVector2(PaintMaterialTest.SCREEN_POSITION, this._screenPos)
		}
		get maskTexture() {
			return this._shaderValues.getTexture(PaintMaterialTest.MASK_TEX)
		}
		set maskTexture(t) {
			this._shaderValues.setTexture(PaintMaterialTest.MASK_TEX, t)
		}
		get newTexture() {
			return this._shaderValues.getTexture(PaintMaterialTest.NEW_TEX)
		}
		set newTexture(t) {
			this._shaderValues.setTexture(PaintMaterialTest.NEW_TEX, t)
		}
		get noiseTexture() {
			return this._shaderValues.getTexture(PaintMaterialTest.NOISE_TEX)
		}
		set noiseTexture(t) {
			this._shaderValues.setTexture(PaintMaterialTest.NOISE_TEX, t)
		}
		get transition() {
			return this._shaderValues.getNumber(PaintMaterialTest.TRANSITION)
		}
		set transition(t) {
			this._shaderValues.setNumber(PaintMaterialTest.TRANSITION, t)
		}
		setState(t) {
			if (this._state !== t) switch (this._state = t, this._removeAllState(), t) {
				case 1:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_PAINT_UV);
					break;
				case 2:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_PAINT_NONE);
					break;
				case 4:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_PAINT_MASK);
					break;
				case 8:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_PAINT_MASK), this._shaderValues.addDefine(PaintMaterialTest.DEF_TRANSITION_COLOR);
					break;
				case 16:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_PAINT_MASK), this._shaderValues.addDefine(PaintMaterialTest.DEF_TRANSITION_ALPHA);
					break;
				case 32:
					break;
				case 64:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_TRANSITION_DISSOLVE);
					break;
				case 128:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_TRANSITION_DISSOLVE_DIR)
			}
		}
		get state() {
			return this._state
		}
		_removeAllState() {
			this._shaderValues.removeDefine(PaintMaterialTest.DEF_PAINT_UV), this._shaderValues.removeDefine(PaintMaterialTest.DEF_PAINT_NONE), this._shaderValues.removeDefine(PaintMaterialTest.DEF_PAINT_MASK), this._shaderValues.removeDefine(PaintMaterialTest.DEF_TRANSITION_COLOR), this._shaderValues.removeDefine(PaintMaterialTest.DEF_TRANSITION_ALPHA), this._shaderValues.removeDefine(PaintMaterialTest.DEF_TRANSITION_DISSOLVE), this._shaderValues.removeDefine(PaintMaterialTest.DEF_TRANSITION_DISSOLVE_DIR)
		}
		get cull() {
			return this._shaderValues.getInt(UnlitMaterial.CULL)
		}
		set cull(t) {
			this._shaderValues.setInt(UnlitMaterial.CULL, t)
		}
		get blend() {
			return this._shaderValues.getInt(UnlitMaterial.BLEND)
		}
		set blend(t) {
			this._shaderValues.setInt(UnlitMaterial.BLEND, t)
		}
		get blendSrc() {
			return this._shaderValues.getInt(UnlitMaterial.BLEND_SRC)
		}
		set blendSrc(t) {
			this._shaderValues.setInt(UnlitMaterial.BLEND_SRC, t)
		}
		get blendDst() {
			return this._shaderValues.getInt(UnlitMaterial.BLEND_DST)
		}
		set blendDst(t) {
			this._shaderValues.setInt(UnlitMaterial.BLEND_DST, t)
		}
		get depthTest() {
			return this._shaderValues.getInt(UnlitMaterial.DEPTH_TEST)
		}
		set depthTest(t) {
			this._shaderValues.setInt(UnlitMaterial.DEPTH_TEST, t)
		}
		get depthWrite() {
			return this._shaderValues.getBool(UnlitMaterial.DEPTH_WRITE)
		}
		set depthWrite(t) {
			this._shaderValues.setBool(UnlitMaterial.DEPTH_WRITE, t)
		}
		set renderMode(t) {
			switch (t) {
				case UnlitMaterial.RENDERMODE_OPAQUE:
					this.alphaTest = !1, this.renderQueue = Laya.Material.RENDERQUEUE_OPAQUE, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case UnlitMaterial.RENDERMODE_CUTOUT:
					this.renderQueue = Laya.Material.RENDERQUEUE_ALPHATEST, this.alphaTest = !0, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case UnlitMaterial.RENDERMODE_TRANSPARENT:
					this.renderQueue = Laya.Material.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_ENABLE_ALL, this.blendSrc = Laya.RenderState.BLENDPARAM_SRC_ALPHA, this.blendDst = Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case UnlitMaterial.RENDERMODE_ADDTIVE:
					this.renderQueue = Laya.Material.RENDERQUEUE_TRANSPARENT, this.depthWrite = !1, this.cull = Laya.RenderState.CULL_NONE, this.blend = Laya.RenderState.BLEND_ENABLE_ALL, this.blendSrc = Laya.RenderState.BLENDPARAM_SRC_ALPHA, this.blendDst = Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.alphaTest = !1;
					break;
				default:
					throw new Error("UnlitMaterial : renderMode value error.")
			}
		}
		playDissolveIn(t, e) {
			this.setState(64);
			let a = mgrRes.tryLoadRes("res/texture/sf_noise_clouds_01.png");
			this.noiseTexture = a, this.transition = 1, e ? cc.tween(this).delay(e).to(t, {
				transition: 0
			}).call(this.setToNormal.bind(this)).start() : cc.tween(this).to(t, {
				transition: 0
			}).call(this.setToNormal.bind(this)).start()
		}
		setToNormal() {
			this.clearTween(), this.setState(32)
		}
		playDissolveOut(t, e, a) {
			let i = mgrRes.tryLoadRes("res/texture/sf_noise_clouds_01.png");
			if (this.setState(64), this.noiseTexture = i, this.transition = 0, e) var s = cc.tween(this).delay(e).to(t, {
				transition: 1
			});
			else s = cc.tween(this).to(t, {
				transition: 1
			});
			s.call(a).start()
		}
		playDissolveOutFromCenter(t, e, a) {
			let i = mgrRes.tryLoadRes("res/texture/sf_noise_clouds_01.png");
			if (this.setState(128), this.noiseTexture = i, this.transition = 0, e) var s = cc.tween(this).delay(e).to(t, {
				transition: 1
			});
			else s = cc.tween(this).to(t, {
				transition: 1
			});
			s.call(a).start()
		}
		clearTween() {
			cc.clearTween(this)
		}
	}
	PaintMaterialTest.MASK_TEX = Laya.Shader3D.propertyNameToID("u_maskTexture"), PaintMaterialTest.NEW_TEX = Laya.Shader3D.propertyNameToID("u_newTexture"), PaintMaterialTest.TRANSITION = Laya.Shader3D.propertyNameToID("u_transition"), PaintMaterialTest.SCREEN_SIZE = Laya.Shader3D.propertyNameToID("u_screenSize"), PaintMaterialTest.SCREEN_POSITION = Laya.Shader3D.propertyNameToID("u_screenPosition"), PaintMaterialTest.NOISE_TEX = Laya.Shader3D.propertyNameToID("u_noiseTexture"), PaintMaterialTest.DEF_PAINT_UV = Laya.Shader3D.getDefineByName("DEF_PAINT_UV"), PaintMaterialTest.DEF_PAINT_NONE = Laya.Shader3D.getDefineByName("DEF_PAINT_NONE"), PaintMaterialTest.DEF_PAINT_MASK = Laya.Shader3D.getDefineByName("DEF_PAINT_MASK"), PaintMaterialTest.DEF_TRANSITION_COLOR = Laya.Shader3D.getDefineByName("DEF_TRANSITION_COLOR"), PaintMaterialTest.DEF_TRANSITION_ALPHA = Laya.Shader3D.getDefineByName("DEF_TRANSITION_ALPHA"), PaintMaterialTest.DEF_TRANSITION_DISSOLVE = Laya.Shader3D.getDefineByName("DEF_TRANSITION_DISSOLVE"), PaintMaterialTest.DEF_TRANSITION_DISSOLVE_DIR = Laya.Shader3D.getDefineByName("DEF_TRANSITION_DISSOLVE_DIR");
	class CartoonMaterial extends Laya.Material {
		constructor() {
			super(), this.baseAlbedoIntensity = 1, this._state = 32, this.setShaderName("CartoonShader"), this._shaderValues.setVector(CartoonMaterial.SHADOWCOLOR, new Laya.Vector4(.6663285, .6544118, 1, 1)), this._shaderValues.setNumber(CartoonMaterial.SHADOWRANGE, .002), this._shaderValues.setNumber(CartoonMaterial.SHADOWINTENSITY, .98), this._shaderValues.setNumber(CartoonMaterial.SHADOWBOUNDARY, .015), this._shaderValues.setNumber(CartoonMaterial.SPECULARRANGE, .99), this._shaderValues.setNumber(CartoonMaterial.SPECULARINTENSITY, .09), this._shaderValues.setVector(CartoonMaterial.SPECULARCOLOR, new Laya.Vector4(1, 1, 1, 1)), this._shaderValues.setNumber(CartoonMaterial.OUTLINEWIDTH, .001), this._shaderValues.setNumber(CartoonMaterial.OUTLINELIGHTNESS, .25), this._shaderValues.setVector(CartoonMaterial.OUTLINECOLOR, new Laya.Vector4(1, 1, 1, 1)), this._shaderValues.setNumber(CartoonMaterial.ALBEDOIDENTITY, .5), this._shaderValues.setVector(CartoonMaterial.ALBEDOCOLOR, new Laya.Vector4(1, 1, 1, 1)), this._shaderValues.setVector(CartoonMaterial.SECOND_SHADOWCOLOR, new Laya.Vector4(1, 1, 1, 1)), this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWRANGE, 0), this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWINTENSITY, .98), this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWBOUNDARY, 0), this._shaderValues.setVector(CartoonMaterial.EDGE_HIGHLIGHT_COLOR, new Laya.Vector4(0, 1, 0, 1)), this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_RANGE, 0), this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_INTENSITY, .98), this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_BOUNDARY, 0), this._shaderValues.setNumber(CartoonMaterial.ALPHATESTVALUE, .5)
		}
		static initShader() {
			var t = {
					s_Cull: Laya.Shader3D.RENDER_STATE_CULL,
					s_Blend: Laya.Shader3D.RENDER_STATE_BLEND,
					s_BlendSrc: Laya.Shader3D.RENDER_STATE_BLEND_SRC,
					s_BlendDst: Laya.Shader3D.RENDER_STATE_BLEND_DST,
					s_DepthTest: Laya.Shader3D.RENDER_STATE_DEPTH_TEST,
					s_DepthWrite: Laya.Shader3D.RENDER_STATE_DEPTH_WRITE
				},
				e = {
					a_Position: Laya.VertexMesh.MESH_POSITION0,
					a_Normal: Laya.VertexMesh.MESH_NORMAL0,
					a_Texcoord0: Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
					a_BoneWeights: Laya.VertexMesh.MESH_BLENDWEIGHT0,
					a_BoneIndices: Laya.VertexMesh.MESH_BLENDINDICES0
				},
				a = {
					u_MvpMatrix: Laya.Shader3D.PERIOD_SPRITE,
					u_WorldMat: Laya.Shader3D.PERIOD_SPRITE,
					u_CameraPos: Laya.Shader3D.PERIOD_CAMERA,
					u_AlbedoTexture: Laya.Shader3D.PERIOD_MATERIAL,
					u_AlbedoIdentity: Laya.Shader3D.PERIOD_MATERIAL,
					u_AlbedoColor: Laya.Shader3D.PERIOD_MATERIAL,
					u_ShadowColor: Laya.Shader3D.PERIOD_MATERIAL,
					u_ShadowRange: Laya.Shader3D.PERIOD_MATERIAL,
					u_ShadowIntensity: Laya.Shader3D.PERIOD_MATERIAL,
					u_ShadowBoundary: Laya.Shader3D.PERIOD_MATERIAL,
					u_SpecularRange: Laya.Shader3D.PERIOD_MATERIAL,
					u_SpecularColor: Laya.Shader3D.PERIOD_MATERIAL,
					u_SpecularIntensity: Laya.Shader3D.PERIOD_MATERIAL,
					u_OutlineWidth: Laya.Shader3D.PERIOD_MATERIAL,
					u_OutlineLightness: Laya.Shader3D.PERIOD_MATERIAL,
					u_OutlineColor: Laya.Shader3D.PERIOD_MATERIAL,
					u_AlphaTestValue: Laya.Shader3D.PERIOD_MATERIAL,
					"u_SunLight.direction": Laya.Shader3D.PERIOD_SCENE,
					"u_SunLight.color": Laya.Shader3D.PERIOD_SCENE,
					u_Bones: Laya.Shader3D.PERIOD_CUSTOM,
					u_Second_ShadowColor: Laya.Shader3D.PERIOD_MATERIAL,
					u_Second_ShadowRange: Laya.Shader3D.PERIOD_MATERIAL,
					u_Second_ShadowIntensity: Laya.Shader3D.PERIOD_MATERIAL,
					u_Second_ShadowBoundary: Laya.Shader3D.PERIOD_MATERIAL,
					u_Edge_HighlightColor: Laya.Shader3D.PERIOD_MATERIAL,
					u_Edge_HighlightRange: Laya.Shader3D.PERIOD_MATERIAL,
					u_Edge_HighlightIntensity: Laya.Shader3D.PERIOD_MATERIAL,
					u_Edge_HighlightBoundary: Laya.Shader3D.PERIOD_MATERIAL,
					u_RandomDiscardFactor: Laya.Shader3D.PERIOD_MATERIAL,
					u_alpha: Laya.Shader3D.PERIOD_MATERIAL,
					"u_SpotLight.color": Laya.Shader3D.PERIOD_SCENE,
					"u_SpotLight.direction": Laya.Shader3D.PERIOD_SCENE,
					"u_SpotLight.range": Laya.Shader3D.PERIOD_SCENE,
					"u_SpotLight.spot": Laya.Shader3D.PERIOD_SCENE,
					"u_SpotLight.position": Laya.Shader3D.PERIOD_SCENE
				},
				i = Laya.Shader3D.add("CartoonShader"),
				s = new Laya.SubShader(e, a);
			i.addSubShader(s);
			s.addShaderPass("\n\t\tattribute vec4 a_Position; \n\t\tattribute vec3 a_Normal;\n\t\tattribute vec2 a_Texcoord0;\t\n\t\tuniform mat4 u_MvpMatrix;\n\t\tuniform mat4 u_WorldMat;\n\t\tuniform vec3 u_CameraPos;\t\n\t\tvarying vec2 v_Texcoord0;\n\t\tvarying vec3 v_Normal;\n\t\tvarying vec3 v_PositionWorld;\n\t\tvarying vec3 v_ViewDir;\n\n\t\t#if defined(CASTSHADOW)\n\t\tvarying vec4 v_posView;\n\t\t#endif\n\n\t\t#ifdef BONE\n\t\t\tconst int c_MaxBoneCount = 24;\n\t\t\tattribute vec4 a_BoneIndices;\n\t\t\tattribute vec4 a_BoneWeights;\n\t\t\tuniform mat4 u_Bones[c_MaxBoneCount];\n\t\t#endif\n\t\t\n\t\tvoid main()\n\t\t{\n\t\t\t#ifdef BONE\n\t\t\t\t//计算骨骼对位置的影响\n\t\t\t\tmat4 skinTransform=mat4(0.0);\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\t\t\tvec4 position = skinTransform * a_Position;\n\t\t\t\t\n\t\t\t\tgl_Position=u_MvpMatrix * position;\n\t\t\t\tmat3 worldMat=mat3(u_WorldMat * skinTransform);\n\t\t\t#else\n\t\t\t\tgl_Position=u_MvpMatrix * a_Position;\n\t\t\t\tmat3 worldMat=mat3(u_WorldMat);\n\t\t\t#endif\n\n\t\t\t//法线\n\t\t\tv_Normal=worldMat*a_Normal;\n\t\t\t//纹理贴图\n\t\t\tv_Texcoord0 = a_Texcoord0;\t\t\n\t\t\t\n\t\t\t#ifdef BONE\n\t\t\t\tv_PositionWorld=(u_WorldMat*position).xyz;\n\t\t\t#else\n\t\t\t\tv_PositionWorld=(u_WorldMat*a_Position).xyz;\n\t\t\t#endif\n\t\t\t//eye vec\n\t\t\tv_ViewDir = u_CameraPos - v_PositionWorld; \n\n\t\t\t#if defined(CASTSHADOW)\n\t\t\t\tv_posView = gl_Position.xyzw;\n\t\t\t#endif\n\t\t\tgl_Position.z=gl_Position.z * 2.0 - gl_Position.w;\n\t\t}", "\n\t\t// #ifdef FSHIGHPRECISION\n\t\t// \tprecision highp float;\n\t\t// #else\n\t\t// \tprecision mediump float;\n\t\t// #endif\n\t\tprecision lowp float;\n\t\n\t\tstruct DirectionLight\n\t\t{\n\t\t\tvec3 color;\n\t\t\tvec3 direction;\n\t\t};\n\t\t#ifdef SPOTLIGHT\n\t\t\tstruct SpotLight {\n\t\t\t\tvec3 color;\n\t\t\t\tvec3 position;\n\t\t\t\tfloat range;\n\t\t\t\tvec3 direction;\n\t\t\t\tfloat spot;\n\t\t\t};\n\t\t\tuniform SpotLight u_SpotLight;\n\t\t#endif\n\n\t\n\t\tvarying vec2 v_Texcoord0;\n\t\tvarying vec3 v_Normal;\n\t\tvarying vec3 v_PositionWorld;\n\t\tvarying vec3 v_ViewDir;\n\t\t#if defined(CASTSHADOW)\n\t\tvarying vec4 v_posView;\n\t\t#endif\n\t\n\t\t#ifdef ALBEDOTEXTURE\n\t\tuniform sampler2D u_AlbedoTexture;\t\n\t\t#endif\n\t\t\n\t\t#ifdef ALBEDO_COLOR\n\t\tuniform float u_AlbedoIdentity;\n\t\tuniform vec4 u_AlbedoColor;\n\t\t#endif\n\t\tuniform vec4 u_ShadowColor;\n\t\tuniform float u_ShadowRange;\n\t\tuniform float u_ShadowIntensity;\n\t\tuniform float u_ShadowBoundary;\n\t\tuniform float u_SpecularRange;\n\t\tuniform float u_SpecularIntensity;\n\t\tuniform vec4 u_SpecularColor;\n\t\t//双重阴影参数\n\t\tuniform vec4 u_Second_ShadowColor;\n\t\tuniform float u_Second_ShadowRange;\n\t\tuniform float u_Second_ShadowIntensity;\n\t\tuniform float u_Second_ShadowBoundary;\n\t\tuniform float u_RandomDiscardFactor;\n\t\t//边缘高亮参数\n\t\tuniform vec4 u_Edge_HighlightColor;\n\t\tuniform float u_Edge_HighlightRange;\n\t\tuniform float u_Edge_HighlightIntensity;\n\t\tuniform float u_Edge_HighlightBoundary;\n\t\n\t\tuniform DirectionLight u_SunLight;\n\n\t\t#ifdef WHOLE_ALPHA\n\t\tuniform float u_alpha;\n\t\t#endif\n\n\t\t#ifdef ALPHATEST\n\t\tuniform float u_AlphaTestValue;\n\t\t#endif\n\n\t\tvoid main_castshadow(){\n\t\t\t#ifdef CASTSHADOW\n\t\t\t\tfloat z = v_posView.z/v_posView.w;\n\t\t\t\tz = z*0.5 + 0.5;\n\t\t\t\tgl_FragColor = vec4(0.0, 0, z, 1.0);\n\t\t\t#endif\n\t\t}\n\n\t\tvoid main_normal(){\n\t\t\tvec4 albedoTextureColor = vec4(1.0);\n\t\t#ifdef ALBEDOTEXTURE\n\t\t\talbedoTextureColor = texture2D(u_AlbedoTexture, v_Texcoord0);\n\t\t#endif\n\t\t\t\n\t\t\t#ifdef ALPHATEST\n\t\t\tif(albedoTextureColor.a <= u_AlphaTestValue){\n\t\t\t\tdiscard;\n\t\t\t}\n\t\t\t#endif\n\n\t\t\tvec3 normal = normalize(v_Normal);\n\t\t\tvec3 viewdir = normalize(v_ViewDir);\n\t\t\tvec3 lightDir = normalize(u_SunLight.direction);\n\t\t\n\t\t\t//屏蔽掉卡通色转换, 使用模型原始颜色\n\t\t\tvec3 albedoColor = albedoTextureColor.rgb;\t\t\n\t\t\t\n\t\t\t// 阴影计算部分计算\n\t\t\t// 1.0 -> 0.0\n\t\t\tfloat nl = max(dot(normal, -lightDir), 0.0);\n\t\t\t// +0.01是避免阴影边界等于0时 shadow_allin && shadow_partin 相同\n            float shadow_boundary = u_ShadowBoundary + 0.01;\n            float shadow_allin = step(nl, u_ShadowRange - shadow_boundary*0.5);\n            float shadow_partin = step(nl, u_ShadowRange + shadow_boundary*0.5);\n            //分析:  allin时:  shadow_allin == 1.0;  shadow_partin == 1.0;\n            //      partin时: shadow_allin == 0.0; shadow_partin = 1.0;\n            //      none时:   shadow_allin == 0.0; shadow_partin = 0.0;\n            float shadow = shadow_allin + (u_ShadowRange + shadow_boundary*0.5 - nl)/shadow_boundary * (shadow_partin - shadow_allin);\n\n\t\t\tshadow *= u_ShadowIntensity;\n\t\t\tvec3 albedoAreaColor = (1.0 - shadow) * albedoColor;\n\t\t\tvec3 shadowAreaColor = shadow * albedoColor * u_ShadowColor.rgb;\n\t\t\t\n\t\t\t//高光部分计算\n\t\t\tfloat specular = pow(nl,u_SpecularRange*10.0);\n\t\t\tvec3 speculAreaColor = (1.0 - shadow) * albedoColor * u_SpecularIntensity * specular * u_SpecularColor.rgb;\n\t\t\t//混合漫反射 + 高光 + 阴影\n\t\t\tvec3 finalColor = albedoAreaColor + speculAreaColor + shadowAreaColor;\n\n\t\t\t//阴影补光计算\n            float secondShadowRange = 1.0 - u_Second_ShadowRange;\n            float secondShadowBoundary = u_Second_ShadowBoundary + 0.01;\n            float negativeNl = max(dot(normal, lightDir), 0.0);\n            float secShadowAllin = step(secondShadowRange + secondShadowBoundary*0.5, negativeNl);\n            float secShadowPartin = step(secondShadowRange - secondShadowBoundary*0.5, negativeNl);\n            //分析:\n            //allin时: secShadowAllin == 1.0; secShadowPartin = 1.0;\n            //partin时: secShadowAllin == 0.0; secShadowPartin = 1.0;\n            //none时: secShadowAllin == 0.0; secShadowPartin = 0.0\n            float shadow_second = secShadowAllin + (negativeNl - (secondShadowRange - secondShadowBoundary*0.5))/secondShadowBoundary * (secShadowPartin - secShadowAllin);\n            //\n\t\t\tvec3 secondShadowArenaColor = shadow_second*albedoColor*u_Second_ShadowColor.rgb*u_Second_ShadowIntensity;\n\t\t\tfinalColor += secondShadowArenaColor;\n\t\t\t//边缘高光计算(附加条件， 光照方向才有)\n\t\t\tfloat nv = 1.0 - abs(dot(normal, viewdir));\n            float hf_nvl = nv * nl;\n            float positive_hrange = 1.0 - u_Edge_HighlightRange;\n            float hightLightBoundary = u_Edge_HighlightBoundary + 0.01;\n            float higAllIn = step(positive_hrange + hightLightBoundary*0.5, hf_nvl);\n            float higPartIn = step(positive_hrange - hightLightBoundary*0.5, hf_nvl);\n            //分析:\n            //allin时: higAllIn = 1.0; higPartIn = 1.0;\n            //partin时: higAllIn = 0.0;higPartIn = 1.0;\n            //none时: higAllIn = 0.0;higPartIn = 0.0;\n            float edgehf = higAllIn + (hf_nvl - (positive_hrange - hightLightBoundary*0.5))/hightLightBoundary * (higPartIn - higAllIn);\n\n\t\t\tvec3 edgeHighlightColor = edgehf *albedoColor* u_Edge_HighlightColor.rgb*u_Edge_HighlightIntensity*2.0;\n\t\t\tfinalColor += edgeHighlightColor;\n\n\t\t\t#ifdef WHOLE_ALPHA\n\t\t\t\t//叠加全局透明度\n\t\t\t\tgl_FragColor = vec4(finalColor.rgb, albedoTextureColor.a*u_alpha);\n\t\t\t#else\n\t\t\t\tgl_FragColor = vec4(finalColor.rgb, albedoTextureColor.a);\n\t\t\t#endif\n\n\t\t\t#ifdef ALBEDO_COLOR\n\t\t\t\t//叠加全局颜色\n\t\t\t\tgl_FragColor *= (u_AlbedoColor * (u_AlbedoIdentity+0.5));\n\t\t\t#endif\n\t\t\t\n\t\t\t\n\t\t\t#ifdef SPOTLIGHT\n\t\t\t\tfloat distance = distance(v_PositionWorld.xz, u_SpotLight.position.xz);\n\t\t\t\tfloat inRange = step(distance, u_SpotLight.range);\n\t\t\t\tfloat inTransition = step(distance, u_SpotLight.range+0.01);\n\t\t\t\tfloat factor = (distance - u_SpotLight.range)/0.01;\n\n\t\t\t\tfloat spotValue = 1.0*inRange + (1.0 - factor) * (inTransition - inRange);\n\t\t\t\tvec3 spotColor = u_SpotLight.color * gl_FragColor.rgb * spotValue;\n\t\t\t\t\n\t\t\t\tvec3 sunColor = u_SunLight.color * gl_FragColor.rgb;\n\n\t\t\t\tgl_FragColor.rgb = spotColor + sunColor;\n\t\t\t\t// gl_FragColor.rgb = vec3(distance);\n\t\t\t#else\n\t\t\t\tgl_FragColor.rgb *= u_SunLight.color;\n\t\t\t#endif\n\t\t}\n\t\n\t\tvoid main()\n\t\t{\n\t\t\t#ifdef CASTSHADOW\n\t\t\t\tmain_castshadow();\n\t\t\t#else\n\t\t\t\t#ifdef DEF_PAINT_NONE\n\t\t\t\t\tgl_FragColor.rgba = vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t\t#else\n\t\t\t\t\tmain_normal();\n\t\t\t\t#endif\n\t\t\t#endif\n\t\t}", t)
		}
		get albedoTexture() {
			return this._shaderValues.getTexture(CartoonMaterial.ALBEDOTEXTURE)
		}
		set albedoTexture(t) {
			t ? this._defineDatas.add(CartoonMaterial.SHADERDEFINE_ALBEDOTEXTURE) : this._defineDatas.remove(CartoonMaterial.SHADERDEFINE_ALBEDOTEXTURE), this._shaderValues.setTexture(CartoonMaterial.ALBEDOTEXTURE, t)
		}
		get albedoColor() {
			return this._shaderValues.getVector(CartoonMaterial.ALBEDOCOLOR)
		}
		set albedoColor(t) {
			1 != t.x || 1 != t.y || 1 != t.z || 1 != t.w || .5 != this.albedoIdentity ? this._defineDatas.add(CartoonMaterial.SHADERDEFINE_ALBEDO_COLOR) : this._defineDatas.remove(CartoonMaterial.SHADERDEFINE_ALBEDO_COLOR), this._shaderValues.setVector(CartoonMaterial.ALBEDOCOLOR, t)
		}
		get albedoIdentity() {
			return this._shaderValues.getNumber(CartoonMaterial.ALBEDOIDENTITY)
		}
		set albedoIdentity(t) {
			1 != this.albedoColor.x || 1 != this.albedoColor.y || 1 != this.albedoColor.z || 1 != this.albedoColor.w || .5 != t ? this._defineDatas.add(CartoonMaterial.SHADERDEFINE_ALBEDO_COLOR) : this._defineDatas.remove(CartoonMaterial.SHADERDEFINE_ALBEDO_COLOR), t = Math.max(0, Math.min(10, t)), this._shaderValues.setNumber(CartoonMaterial.ALBEDOIDENTITY, t)
		}
		set albedoIntensity(t) {
			this.albedoIdentity = t * this.baseAlbedoIntensity
		}
		get albedoIntensity() {
			return this.albedoIdentity / this.baseAlbedoIntensity
		}
		get shadowColor() {
			return this._shaderValues.getVector(CartoonMaterial.SHADOWCOLOR)
		}
		set shadowColor(t) {
			this._shaderValues.setVector(CartoonMaterial.SHADOWCOLOR, t)
		}
		get shadowRange() {
			return this._shaderValues.getNumber(CartoonMaterial.SHADOWRANGE)
		}
		set shadowRange(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SHADOWRANGE, t)
		}
		get shadowIntensity() {
			return this._shaderValues.getNumber(CartoonMaterial.SHADOWINTENSITY)
		}
		set shadowIntensity(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SHADOWINTENSITY, t)
		}
		get shadowBoundary() {
			return this._shaderValues.getNumber(CartoonMaterial.SHADOWBOUNDARY)
		}
		set shadowBoundary(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SHADOWBOUNDARY, t)
		}
		get specularRange() {
			return this._shaderValues.getNumber(CartoonMaterial.SPECULARRANGE)
		}
		set specularRange(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SPECULARRANGE, t)
		}
		set specularIntensity(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SPECULARINTENSITY, t)
		}
		get specularIntensity() {
			return this._shaderValues.getNumber(CartoonMaterial.SPECULARINTENSITY)
		}
		get specularColor() {
			return this._shaderValues.getVector(CartoonMaterial.SPECULARCOLOR)
		}
		set specularColor(t) {
			this._shaderValues.setVector(CartoonMaterial.SPECULARCOLOR, t)
		}
		get outlineWidth() {
			return this._shaderValues.getNumber(CartoonMaterial.OUTLINEWIDTH)
		}
		set outlineWidth(t) {
			t = Math.max(0, Math.min(.05, t)), this._shaderValues.setNumber(CartoonMaterial.OUTLINEWIDTH, t)
		}
		get outlineColor() {
			return this._shaderValues.getVector(CartoonMaterial.OUTLINECOLOR)
		}
		set outlineColor(t) {
			this._shaderValues.setVector(CartoonMaterial.OUTLINECOLOR, t)
		}
		get outlineLightness() {
			return this._shaderValues.getNumber(CartoonMaterial.OUTLINELIGHTNESS)
		}
		set outlineLightness(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.OUTLINELIGHTNESS, t)
		}
		get secondShadowColor() {
			return this._shaderValues.getVector(CartoonMaterial.SECOND_SHADOWCOLOR)
		}
		set secondShadowColor(t) {
			this._shaderValues.setVector(CartoonMaterial.SECOND_SHADOWCOLOR, t)
		}
		get secondShadowRange() {
			return this._shaderValues.getNumber(CartoonMaterial.SECOND_SHADOWRANGE)
		}
		set secondShadowRange(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWRANGE, t)
		}
		get secondShadowIntensity() {
			return this._shaderValues.getNumber(CartoonMaterial.SECOND_SHADOWINTENSITY)
		}
		set secondShadowIntensity(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWINTENSITY, t)
		}
		get secondShadowBoundary() {
			return this._shaderValues.getNumber(CartoonMaterial.SECOND_SHADOWBOUNDARY)
		}
		set secondShadowBoundary(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.SECOND_SHADOWBOUNDARY, t)
		}
		get EdgeHightColor() {
			return this._shaderValues.getVector(CartoonMaterial.EDGE_HIGHLIGHT_COLOR)
		}
		set EdgeHightColor(t) {
			this._shaderValues.setVector(CartoonMaterial.EDGE_HIGHLIGHT_COLOR, t)
		}
		get EdgeHightRange() {
			return this._shaderValues.getNumber(CartoonMaterial.EDGE_HIGHLIGHT_RANGE)
		}
		set EdgeHightRange(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_RANGE, t)
		}
		get EdgeHightIntensity() {
			return this._shaderValues.getNumber(CartoonMaterial.EDGE_HIGHLIGHT_INTENSITY)
		}
		set EdgeHightIntensity(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_INTENSITY, t)
		}
		get EdgeHightBoundary() {
			return this._shaderValues.getNumber(CartoonMaterial.EDGE_HIGHLIGHT_BOUNDARY)
		}
		set EdgeHightBoundary(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(CartoonMaterial.EDGE_HIGHLIGHT_BOUNDARY, t)
		}
		get tilingOffset() {
			return this._shaderValues.getVector(CartoonMaterial.TILINGOFFSET)
		}
		set tilingOffset(t) {
			t && (1 != t.x || 1 != t.y || 0 != t.z || 0 != t.w) ? this._defineDatas.add(CartoonMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(CartoonMaterial.SHADERDEFINE_TILINGOFFSET), this._shaderValues.setVector(CartoonMaterial.TILINGOFFSET, t)
		}
		get alpha() {
			return this._shaderValues.getNumber(CartoonMaterial.WHOLE_ALPHA)
		}
		set alpha(t) {
			null != t ? this._defineDatas.add(CartoonMaterial.SHADERDEFINE_WHOLE_ALPHA) : this._defineDatas.remove(CartoonMaterial.SHADERDEFINE_WHOLE_ALPHA), this._shaderValues.setNumber(CartoonMaterial.WHOLE_ALPHA, t)
		}
		get cull() {
			return this._shaderValues.getInt(CartoonMaterial.CULL)
		}
		set cull(t) {
			this._shaderValues.setInt(CartoonMaterial.CULL, t)
		}
		get blend() {
			return this._shaderValues.getInt(CartoonMaterial.BLEND)
		}
		set blend(t) {
			this._shaderValues.setInt(CartoonMaterial.BLEND, t)
		}
		get blendSrc() {
			return this._shaderValues.getInt(CartoonMaterial.BLEND_SRC)
		}
		set blendSrc(t) {
			this._shaderValues.setInt(CartoonMaterial.BLEND_SRC, t)
		}
		get blendDst() {
			return this._shaderValues.getInt(CartoonMaterial.BLEND_DST)
		}
		set blendDst(t) {
			this._shaderValues.setInt(CartoonMaterial.BLEND_DST, t)
		}
		get depthTest() {
			return this._shaderValues.getInt(CartoonMaterial.DEPTH_TEST)
		}
		set depthTest(t) {
			this._shaderValues.setInt(CartoonMaterial.DEPTH_TEST, t)
		}
		get depthWrite() {
			return this._shaderValues.getBool(CartoonMaterial.DEPTH_WRITE)
		}
		set depthWrite(t) {
			this._shaderValues.setBool(CartoonMaterial.DEPTH_WRITE, t)
		}
		get renderMode() {
			return this.__render_mode__
		}
		set renderMode(t) {
			switch (this.__render_mode__ = t, t) {
				case CartoonMaterial.RENDERMODE_OPAQUE:
					this.alphaTest = !1, this.renderQueue = Laya.Material.RENDERQUEUE_OPAQUE, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case CartoonMaterial.RENDERMODE_OPAQUE_CULL_NONE:
					this.alphaTest = !1, this.renderQueue = Laya.Material.RENDERQUEUE_OPAQUE, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_NONE, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case CartoonMaterial.RENDERMODE_CUTOUT:
					this.renderQueue = Laya.Material.RENDERQUEUE_ALPHATEST, this.alphaTest = !0, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case CartoonMaterial.RENDERMODE_CUTOUT_CULL_NONE:
					this.renderQueue = Laya.Material.RENDERQUEUE_ALPHATEST, this.alphaTest = !0, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_NONE, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case CartoonMaterial.RENDERMODE_TRANSPARENT:
					this.renderQueue = Laya.Material.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_ENABLE_ALL, this.blendSrc = Laya.RenderState.BLENDPARAM_SRC_ALPHA, this.blendDst = Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case CartoonMaterial.RENDERMODE_TRANSPARENT_CULL_NONE:
					this.renderQueue = Laya.Material.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, this.cull = Laya.RenderState.CULL_NONE, this.blend = Laya.RenderState.BLEND_ENABLE_ALL, this.blendSrc = Laya.RenderState.BLENDPARAM_SRC_ALPHA, this.blendDst = Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				default:
					this.renderQueue = t
			}
		}
		setState(t) {
			if (this._state !== t) switch (this._state = t, this._removeAllState(), t) {
				case 2:
					this._shaderValues.addDefine(PaintMaterialTest.DEF_PAINT_NONE);
					break;
				case 32:
					break;
				default:
					console.error("CartoonMaterial no state:", t)
			}
		}
		_removeAllState() {
			this._shaderValues.removeDefine(PaintMaterialTest.DEF_PAINT_NONE)
		}
	}
	CartoonMaterial.ALBEDOTEXTURE = Laya.Shader3D.propertyNameToID("u_AlbedoTexture"), CartoonMaterial.ALBEDOIDENTITY = Laya.Shader3D.propertyNameToID("u_AlbedoIdentity"), CartoonMaterial.ALBEDOCOLOR = Laya.Shader3D.propertyNameToID("u_AlbedoColor"), CartoonMaterial.OUTLINEWIDTH = Laya.Shader3D.propertyNameToID("u_OutlineWidth"), CartoonMaterial.OUTLINELIGHTNESS = Laya.Shader3D.propertyNameToID("u_OutlineLightness"), CartoonMaterial.OUTLINECOLOR = Laya.Shader3D.propertyNameToID("u_OutlineColor"), CartoonMaterial.SHADOWCOLOR = Laya.Shader3D.propertyNameToID("u_ShadowColor"), CartoonMaterial.SHADOWRANGE = Laya.Shader3D.propertyNameToID("u_ShadowRange"), CartoonMaterial.SHADOWINTENSITY = Laya.Shader3D.propertyNameToID("u_ShadowIntensity"), CartoonMaterial.SHADOWBOUNDARY = Laya.Shader3D.propertyNameToID("u_ShadowBoundary"), CartoonMaterial.SECOND_SHADOWCOLOR = Laya.Shader3D.propertyNameToID("u_Second_ShadowColor"), CartoonMaterial.SECOND_SHADOWRANGE = Laya.Shader3D.propertyNameToID("u_Second_ShadowRange"), CartoonMaterial.SECOND_SHADOWINTENSITY = Laya.Shader3D.propertyNameToID("u_Second_ShadowIntensity"), CartoonMaterial.SECOND_SHADOWBOUNDARY = Laya.Shader3D.propertyNameToID("u_Second_ShadowBoundary"), CartoonMaterial.EDGE_HIGHLIGHT_COLOR = Laya.Shader3D.propertyNameToID("u_Edge_HighlightColor"), CartoonMaterial.EDGE_HIGHLIGHT_RANGE = Laya.Shader3D.propertyNameToID("u_Edge_HighlightRange"), CartoonMaterial.EDGE_HIGHLIGHT_INTENSITY = Laya.Shader3D.propertyNameToID("u_Edge_HighlightIntensity"), CartoonMaterial.EDGE_HIGHLIGHT_BOUNDARY = Laya.Shader3D.propertyNameToID("u_Edge_HighlightBoundary"), CartoonMaterial.SPECULARRANGE = Laya.Shader3D.propertyNameToID("u_SpecularRange"), CartoonMaterial.SPECULARINTENSITY = Laya.Shader3D.propertyNameToID("u_SpecularIntensity"), CartoonMaterial.SPECULARCOLOR = Laya.Shader3D.propertyNameToID("u_SpecularColor"), CartoonMaterial.DIRECTIONLIGHTDIRECTION = Laya.Shader3D.propertyNameToID("u_SunLight.direction"), CartoonMaterial.DIRECTIONLIGHTCOLOR = Laya.Shader3D.propertyNameToID("u_SunLight.color"), CartoonMaterial.SPOT_LIGHT_COLOR = Laya.Shader3D.propertyNameToID("u_SpotLight.color"), CartoonMaterial.SPOT_LIGHT_DIRECTION = Laya.Shader3D.propertyNameToID("u_SpotLight.direction"), CartoonMaterial.SPOT_LIGHT_RANGE = Laya.Shader3D.propertyNameToID("u_SpotLight.range"), CartoonMaterial.SPOT_LIGHT_SPOT = Laya.Shader3D.propertyNameToID("u_SpotLight.spot"), CartoonMaterial.SPOT_LIGHT_POSITION = Laya.Shader3D.propertyNameToID("u_SpotLight.position"), CartoonMaterial.WHOLE_ALPHA = Laya.Shader3D.propertyNameToID("u_alpha"), CartoonMaterial.SHADERDEFINE_ALBEDOTEXTURE = Laya.Shader3D.getDefineByName("ALBEDOTEXTURE"), CartoonMaterial.SHADERDEFINE_TILINGOFFSET = Laya.Shader3D.getDefineByName("TILINGOFFSET"), CartoonMaterial.SHADERDEFINE_BONE = Laya.Shader3D.getDefineByName("BONE"), CartoonMaterial.SHADERDEFINE_WHOLE_ALPHA = Laya.Shader3D.getDefineByName("WHOLE_ALPHA"), CartoonMaterial.SHADERDEFINE_ALBEDO_COLOR = Laya.Shader3D.getDefineByName("ALBEDO_COLOR"), CartoonMaterial.CULL = Laya.Shader3D.propertyNameToID("s_Cull"), CartoonMaterial.BLEND = Laya.Shader3D.propertyNameToID("s_Blend"), CartoonMaterial.BLEND_SRC = Laya.Shader3D.propertyNameToID("s_BlendSrc"), CartoonMaterial.BLEND_DST = Laya.Shader3D.propertyNameToID("s_BlendDst"), CartoonMaterial.DEPTH_TEST = Laya.Shader3D.propertyNameToID("s_DepthTest"), CartoonMaterial.DEPTH_WRITE = Laya.Shader3D.propertyNameToID("s_DepthWrite"), CartoonMaterial.RENDERMODE_OPAQUE = 0, CartoonMaterial.RENDERMODE_OPAQUE_CULL_NONE = 1, CartoonMaterial.RENDERMODE_CUTOUT = 2, CartoonMaterial.RENDERMODE_CUTOUT_CULL_NONE = 3, CartoonMaterial.RENDERMODE_TRANSPARENT = 4, CartoonMaterial.RENDERMODE_TRANSPARENT_CULL_NONE = 5;
	var Vector3 = Laya.Vector3,
		Quaternion = Laya.Quaternion,
		Script3D = Laya.Script3D,
		BoneColliderPart;
	! function(t) {
		t[t.NONE = 1] = "NONE", t[t.UP = 2] = "UP", t[t.DOWN = 3] = "DOWN"
	}(BoneColliderPart || (BoneColliderPart = {}));
	class Bone extends Script3D {
		constructor() {
			super(...arguments), this.parm1 = .6, this.parm2 = .9, this.radius = .03, this.part = BoneColliderPart.NONE, this.colliders = [], this.deepth = 0, this.boneLength = .1, this.displacementFactor = .3, this.maxDisplacement = .1, this.wind = new Laya.Vector3, this.gravity = new Laya.Vector3
		}
		onAwake() {
			this.transfom = this.owner.transform, this.originLocalRotation = this.transfom.localRotation.clone(), this.originLocalPosition = this.transfom.localPosition.clone(), this.lastWorldRotation = this.transfom.rotation.clone(), this.lastWorldPosition = this.transfom.position.clone(), this.deepth = 1;
			let t = this.owner;
			for (; t.parent && t.getComponent(Bone);) this.deepth++, t = t.parent;
			let e = this.owner.parent;
			e && (this.parent = e.transform, this.parentBone = this.owner.parent.getComponent(Bone)), this.parent ? this.boneLength = Vector3.distance(this.transfom.position, this.parent.position) : this.boneLength = 0
		}
		onStart() {
			this.updateTemplate1 = this.parm1 / this.parm2, this.updateTemplateNormal = new Laya.Vector3
		}
		_ignoreBoneFromNodeToRoot(t) {
			let e = t.getComponent(Bone);
			if (e) {
				if (e.bIgnoredBone) return;
				e.bIgnoredBone = !0
			}
			t.parent && t != Laya.stage && this._ignoreBoneFromNodeToRoot(t.parent)
		}
		UpdateBone(t) {
			if (this.transfom.localRotation = this.originLocalRotation, this.transfom.localPosition = this.originLocalPosition, this.bIgnoredBone) return;
			let e = this.owner.parent.___childBoneIdDict;
			if (e || (e = Object.create(null), this.owner.parent.___childBoneIdDict = e, this.owner.parent.___childBoneIdDictSize = 0), this.owner.parent.___childBoneIdDictSize >= 2) {
				let t = this.owner.parent.numChildren;
				for (let e = 0; e < t; e++) {
					let t = this.owner.parent.getChildAt(e);
					t && this._ignoreBoneFromNodeToRoot(t)
				}
				return
			}
			if (e[this.id] || (e[this.id] = !0, this.owner.parent.___childBoneIdDictSize++), !this.parentBone) return;
			Quaternion.lerp(this.lastWorldRotation, this.transfom.rotation, this.updateTemplate1, this.lastWorldRotation), this.transfom.rotation = this.lastWorldRotation.clone(), Laya.Vector3.add(this.transfom.position, this.gravity, this.transfom.position), Laya.Vector3.lerp(this.lastWorldPosition, this.transfom.position, this.displacementFactor, this.lastWorldPosition), Laya.Vector3.subtract(this.lastWorldPosition, this.transfom.position, this.updateTemplateNormal), Laya.Vector3.scalarLengthSquared(this.updateTemplateNormal) > this.maxDisplacement * this.maxDisplacement && (Laya.Vector3.normalize(this.updateTemplateNormal, this.updateTemplateNormal), Laya.Vector3.scale(this.updateTemplateNormal, this.maxDisplacement, this.updateTemplateNormal), Laya.Vector3.add(this.transfom.position, this.updateTemplateNormal, this.lastWorldPosition)), Laya.Vector3.subtract(this.lastWorldPosition, this.parent.position, this.updateTemplateNormal);
			let a = this.boneLength;
			Laya.Vector3.scalarLengthSquared(this.updateTemplateNormal) > a * a && (Laya.Vector3.normalize(this.updateTemplateNormal, this.updateTemplateNormal), Laya.Vector3.scale(this.updateTemplateNormal, a, this.updateTemplateNormal), Laya.Vector3.add(this.parent.position, this.updateTemplateNormal, this.lastWorldPosition));
			for (let t = 0; t < this.colliders.length; t++) {
				const e = this.colliders[t];
				let a = Laya.Vector3.distanceSquared(e.transform.position, this.lastWorldPosition),
					i = this.radius + e.radius;
				a <= i * i && (Laya.Vector3.subtract(this.lastWorldPosition, e.transform.position, this.updateTemplateNormal), Laya.Vector3.normalize(this.updateTemplateNormal, this.updateTemplateNormal), Laya.Vector3.scale(this.updateTemplateNormal, i, this.updateTemplateNormal), Laya.Vector3.add(e.transform.position, this.updateTemplateNormal, this.lastWorldPosition))
			}
			this.transfom.position = this.lastWorldPosition
		}
	}
	var Script3D$1 = Laya.Script3D;
	class BoneCollider extends Script3D$1 {
		constructor() {
			super(...arguments), this.radius = .1, this.part = BoneColliderPart.NONE
		}
		onAwake() {
			this.transform = this.owner.transform
		}
		onStart() {
			/1/.test(this.owner.name) && (this.radius *= .5), /2/.test(this.owner.name) && (this.radius *= .8), /3/.test(this.owner.name) && (this.radius *= .7), this.preRadius = this.radius
		}
		SetScale(t) {
			this.radius = this.preRadius * t
		}
	}
	var Script3D$2 = Laya.Script3D;
	class BoneManager extends Script3D$2 {
		constructor() {
			super(...arguments), this.bones = [], this.allColliders = [], this.isRefresh = !1, this.COLLIDER_REPXS_DRESS = [/PZD_/], this.COLLIDER_REPXS_HAIR = [/PZH_/], this.BONE_REPXS_DRESS = [/qb_/, /pd_/, /qunbai_/, /mianshi_/, /toushi_/, /tfhudiejie_/, /ershi_/, /beibu_/, /jiansui_/, /cb_/, /Bone_beishi_/, /shouchi_/, /weiba_/, /beibu01_/, /beibu02/, /Bnone_/, /pb_/, /piaodai_/, /yifu/, /qp/, /yw_/, /shoushi_/], this.BONE_REPXS_HAIR = [/tf_/, /toufa_/], this.B_SHOW_GIMOS = !1, this._1Center = new Laya.Vector3, this._2Center = new Laya.Vector3, this._3Center = new Laya.Vector3, this.allGimos = []
		}
		onAwake() {
			let t = this.owner;
			/toufa/.test(this.owner.name) ? (this.part = BoneColliderPart.UP, t = this.owner.parent.parent.parent.parent.parent.parent.parent) : this.part = BoneColliderPart.DOWN, this.part == BoneColliderPart.UP ? (this.AddComponentsInChildren(t, BoneCollider, this.COLLIDER_REPXS_HAIR, {
				part: BoneColliderPart.UP
			}), this.AddBoneInChildren(this.owner, BoneColliderPart.UP)) : (this.AddComponentsInChildren(t, BoneCollider, this.COLLIDER_REPXS_DRESS, {
				part: BoneColliderPart.DOWN
			}), this.AddBoneInChildren(this.owner, BoneColliderPart.DOWN)), this.allColliders = [];
			let e = this.GetComponentsInChildren(t, BoneCollider);
			for (let t = 0; t < e.length; t++) {
				const a = e[t];
				this.allColliders[a.part] || (this.allColliders[a.part] = []), this.allColliders[a.part].push(a)
			}
		}
		onStart() {
			this.CheckBone(), this.onStarted && this.onStarted()
		}
		CheckBone() {
			this.bones = this.GetComponentsInChildren(this.owner, Bone);
			for (let t = 0; t < this.bones.length; t++) {
				this.bones[t];
				this.bones[t].part == BoneColliderPart.UP && (this.bones[t].colliders = this.allColliders[this.bones[t].part] || [], this.bones[t].wind = new Laya.Vector3, this.bones[t].gravity = new Laya.Vector3), this.bones[t].part == BoneColliderPart.DOWN && (this.bones[t].colliders = this.allColliders[this.bones[t].part] || [], this.bones[t].wind = new Laya.Vector3, this.bones[t].gravity = new Laya.Vector3(0, -.01, 0))
			}
		}
		onLateUpdate() {
			for (var t in this._1Center.setValue(0, 0, 0), this._2Center.setValue(0, 0, 0), this._3Center.setValue(0, 0, 0), this.allColliders)
				for (var e = this.allColliders[t], a = 0; a < e.length; a++) {
					(i = e[a]).owner.name.indexOf("PZD_") >= 0 && (i.owner.name.indexOf("1") >= 0 && Laya.Vector3.add(this._1Center, i.transform.position, this._1Center), i.owner.name.indexOf("2") >= 0 && Laya.Vector3.add(this._2Center, i.transform.position, this._2Center), i.owner.name.indexOf("3") >= 0 && Laya.Vector3.add(this._3Center, i.transform.position, this._3Center))
				}
			for (var t in Laya.Vector3.scale(this._1Center, .5, this._1Center), Laya.Vector3.scale(this._2Center, .5, this._2Center), Laya.Vector3.scale(this._3Center, .5, this._3Center), this.allColliders)
				for (e = this.allColliders[t], a = 0; a < e.length; a++) {
					var i;
					(i = e[a]).owner.name.indexOf("PZD_") >= 0 && (i.owner.name.indexOf("4") >= 0 && (i.transform.position = this._1Center), i.owner.name.indexOf("5") >= 0 && (i.transform.position = this._2Center), i.owner.name.indexOf("6") >= 0 && (i.transform.position = this._3Center))
				}
			for (var s = 0; s < this.bones.length; s++) {
				var n = this.bones[s];
				n && n.UpdateBone(0)
			}
			this.isRefresh && (this.isRefresh = !1, this.CheckBone())
		}
		GetComponentsInChildren(t, e) {
			let a = [];
			for (let i = 0; i < t.numChildren; i++) {
				let s = t.getChildAt(i);
				if (s) {
					let t = s.getComponent(e);
					t && a.push(t);
					let i = this.GetComponentsInChildren(s, e);
					for (let t = 0; t < i.length; t++) {
						const e = i[t];
						a.push(e)
					}
				}
			}
			return a
		}
		AddComponentsInChildren(t, e, a, i) {
			for (let s = 0; s < t.numChildren; s++) {
				let n = t.getChildAt(s);
				if (n) {
					let t = !1;
					for (let e = 0; e < a.length; e++) {
						const i = a[e];
						t = t || i.test(n.name)
					}
					if (t) {
						let t = n.addComponent(e);
						if (i)
							for (const e in i) i[e] && (t[e] = i[e])
					}
					this.AddComponentsInChildren(n, e, a, i)
				}
			}
		}
		AddBoneInChildren(t, e) {
			for (let a = 0; a < t.numChildren; a++) {
				let i = t.getChildAt(a),
					s = !1;
				for (let t = 0; t < this.BONE_REPXS_DRESS.length; t++) {
					const e = this.BONE_REPXS_DRESS[t];
					s = s || e.test(i.name)
				}
				for (let t = 0; t < this.BONE_REPXS_HAIR.length; t++) {
					const e = this.BONE_REPXS_HAIR[t];
					s = s || e.test(i.name)
				}
				if (s) {
					i.addComponent(Bone).part = e
				}
				this.AddBoneInChildren(i, e)
			}
		}
		AddBoneFromRoot(t, e) {
			if (!t) return;
			t.addComponent(Bone).part = e;
			let a = t.getChildAt(0);
			a && this.AddBoneFromRoot(a, e)
		}
		Refresh() {
			this.isRefresh = !0
		}
		onUpdate() {}
		setColliderRidus(t) {
			for (let t = 0; t < this.allGimos.length; t++) {
				this.allGimos[t].destroy()
			}
			for (let e = 0; e < this.allColliders.length; e++)
				if (null != this.allColliders[e])
					for (let a = 0; a < this.allColliders[e].length; a++) {
						const i = this.allColliders[e][a];
						if (i && (i.radius = t), this.B_SHOW_GIMOS) {
							let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
							i.owner.addChild(e), this.allGimos.push(e)
						}
					}
		}
		setDisplacementFactor(t) {
			t = parseFloat(t), this.displacementFactor = t;
			for (let e = 0; e < this.bones.length; e++) {
				this.bones[e].displacementFactor = t
			}
		}
		setMaxDisplacement(t) {
			t = parseFloat(t);
			for (let e = 0; e < this.bones.length; e++) {
				this.bones[e].maxDisplacement = t
			}
		}
		setCollider1Size(t) {
			t = parseFloat(t);
			for (const e in this.allColliders) {
				let a = this.allColliders[e];
				for (let e = 0; e < a.length; e++) {
					const i = a[e];
					if (/1/.test(i.owner.name) && (i.radius = t, this.B_SHOW_GIMOS)) {
						i.owner.removeChildByName("gimo");
						let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
						i.owner.addChild(e), e.name = "gimo"
					}
				}
			}
		}
		setCollider2Size(t) {
			t = parseFloat(t);
			for (const e in this.allColliders) {
				let a = this.allColliders[e];
				for (let e = 0; e < a.length; e++) {
					const i = a[e];
					if (/2/.test(i.owner.name) && (i.radius = t, this.B_SHOW_GIMOS)) {
						i.owner.removeChildByName("gimo");
						let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
						i.owner.addChild(e), e.name = "gimo"
					}
				}
			}
		}
		setCollider3Size(t) {
			t = parseFloat(t);
			for (const e in this.allColliders) {
				let a = this.allColliders[e];
				for (let e = 0; e < a.length; e++) {
					const i = a[e];
					if (/3/.test(i.owner.name) && (i.radius = t, this.B_SHOW_GIMOS)) {
						i.owner.removeChildByName("gimo");
						let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
						i.owner.addChild(e), e.name = "gimo"
					}
				}
			}
		}
		setCollider4Size(t) {
			t = parseFloat(t);
			for (const e in this.allColliders) {
				let a = this.allColliders[e];
				for (let e = 0; e < a.length; e++) {
					const i = a[e];
					if (/4/.test(i.owner.name) && (i.radius = t, this.B_SHOW_GIMOS)) {
						i.owner.removeChildByName("gimo");
						let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
						i.owner.addChild(e), e.name = "gimo"
					}
				}
			}
		}
		setCollider5Size(t) {
			t = parseFloat(t);
			for (const e in this.allColliders) {
				let a = this.allColliders[e];
				for (let e = 0; e < a.length; e++) {
					const i = a[e];
					if (/5/.test(i.owner.name) && (i.radius = t, this.B_SHOW_GIMOS)) {
						i.owner.removeChildByName("gimo");
						let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
						i.owner.addChild(e), e.name = "gimo"
					}
				}
			}
		}
		setCollider6Size(t) {
			t = parseFloat(t);
			for (const e in this.allColliders) {
				let a = this.allColliders[e];
				for (let e = 0; e < a.length; e++) {
					const i = a[e];
					if (/6/.test(i.owner.name) && (i.radius = t, this.B_SHOW_GIMOS)) {
						i.owner.removeChildByName("gimo");
						let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
						i.owner.addChild(e), e.name = "gimo"
					}
				}
			}
		}
		setColliderHair(t) {
			t = parseFloat(t);
			for (const e in this.allColliders) {
				let a = this.allColliders[e];
				for (let e = 0; e < a.length; e++) {
					const i = a[e];
					if (/PZH/.test(i.owner.name) && (i.radius = t, this.B_SHOW_GIMOS)) {
						i.owner.removeChildByName("gimo");
						let e = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(t, 20, 20));
						i.owner.addChild(e), e.name = "gimo"
					}
				}
			}
		}
		setGravity(t) {
			if (t)
				for (let e = 0; e < this.bones.length; e++) {
					this.bones[e].gravity = new Laya.Vector3(t.x, t.y, t.z)
				}
		}
	}
	const ST_READ_HEAD = 1,
		ST_READ_DATA = 2;
	class SeasionWS extends Laya.EventDispatcher {
		constructor() {
			super(), this.instanceId = 0, this.uuid = null, this.revDataBuffer = "", this.socket = null, this.readState = ST_READ_HEAD, this.head = {}, this.instanceId = 0, this.uuid = null, this.revDataBuffer = "", this.socket = null, this.readState = ST_READ_HEAD, this.head = {}
		}
		setUuid(t) {
			this.uuid = t
		}
		setSocket(t) {
			this.socket = t, this.socket.onopen = (() => {
				this.event("open")
			}), this.socket.onclose = (() => {
				this.event("close")
			}), this.socket.onerror = (t => {
				this.event("error")
			}), this.socket.onmessage = (t => {
				if (this.revDataBuffer += t.data, this.readState == ST_READ_HEAD) {
					let t = /({.+?})/.exec(this.revDataBuffer);
					if (t) {
						let e = t.shift();
						this.revDataBuffer = this.revDataBuffer.replace(e, ""), this.head = JSON.parse(e), this.readState = ST_READ_DATA
					}
				}
				if (this.readState == ST_READ_DATA && this.revDataBuffer.length >= this.head.dataLength) {
					let t = this.revDataBuffer.slice(0, this.revDataBuffer.length);
					try {
						let e = JSON.parse(t);
						this.event("data", e)
					} catch (t) {
						console.error("ST_READ_DATA error:", t)
					}
					this.revDataBuffer = this.revDataBuffer.replace(t, ""), this.readState = ST_READ_HEAD
				}
			})
		}
		write(t) {
			let e = JSON.stringify(t),
				a = {
					dataLength: e.length
				};
			this.socket.send(JSON.stringify(a) + e)
		}
		close() {
			this.socket.close()
		}
	}
	class NetworkWS {
		static newSeasion(t, e) {
			let a = "ws://" + t + ":" + e.toString();
			console.log("连接地址:", a);
			let i = new WebSocket(a),
				s = new SeasionWS;
			return s.setSocket(i), s
		}
	}
	class GameRemoteRouter {
		constructor(t) {
			this.__seasion = null, this.__registedRouter = null, this.seasion = t, this.seasion ? this.seasion.on("data", this, t => {
				this.__router(t)
			}) : console.error("没有设置seasion")
		}
		static create() {
			if (this._bCreate) return;
			this._bCreate = !0;
			let t = NetworkWS.newSeasion("127.0.0.1", 8082);
			t.on("open", this, () => {
				Timer.callLater(1, () => {
					_G.sendMsg(BASE_MSG.UI_SHOW_TIP, "链接存档服务器成功!可以存档！")
				}), GameRemoteRouter.instance = new GameRemoteRouter(t)
			}), t.on("error", this, () => {
				console.log("链接存档服务器失败!")
			})
		}
		get seasion() {
			return this.__seasion
		}
		set seasion(t) {
			this.__seasion = t
		}
		sendMsgToServer(t) {
			this.seasion.write(t)
		}
		registerRouter(t, e) {
			t && e && (this.__registedRouter[t] = e)
		}
		__router(t) {
			if (!t) return;
			if (!t.route) return;
			if (!this.__registedRouter[t.route]) return;
			(0, this.__registedRouter[t.route])(t.data)
		}
	}
	GameRemoteRouter._bCreate = !1;
	class LightMapMaterial extends Laya.Material {
		constructor() {
			super(), this.setShaderName("lightMapMaterial"), this._shaderValues.setNumber(LightMapMaterial.ALBEDOINTENSITY, 1), this._shaderValues.setVector(LightMapMaterial.ALBEDOCOLOR, new Laya.Vector4(1, 1, 1, 1)), this.alpha = 1
		}
		static __init__() {
			LightMapMaterial.SHADERDEFINE_BONE = Laya.Shader3D.getDefineByName("BONE"), LightMapMaterial.SHADERDEFINE_TILINGOFFSET = Laya.Shader3D.getDefineByName("TILINGOFFSET"), LightMapMaterial.SHADERDEFINE_WHOLE_ALPHA = Laya.Shader3D.getDefineByName("WHOLE_ALPHA")
		}
		static initShader() {
			LightMapMaterial.__init__();
			var t = {
					s_Cull: Laya.Shader3D.RENDER_STATE_CULL,
					s_Blend: Laya.Shader3D.RENDER_STATE_BLEND,
					s_BlendSrc: Laya.Shader3D.RENDER_STATE_BLEND_SRC,
					s_BlendDst: Laya.Shader3D.RENDER_STATE_BLEND_DST,
					s_DepthTest: Laya.Shader3D.RENDER_STATE_DEPTH_TEST,
					s_DepthWrite: Laya.Shader3D.RENDER_STATE_DEPTH_WRITE
				},
				e = {
					a_Position: Laya.VertexMesh.MESH_POSITION0,
					a_Normal: Laya.VertexMesh.MESH_NORMAL0,
					a_Texcoord0: Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
					a_Texcoord1: Laya.VertexMesh.MESH_TEXTURECOORDINATE1,
					a_BoneWeights: Laya.VertexMesh.MESH_BLENDWEIGHT0,
					a_BoneIndices: Laya.VertexMesh.MESH_BLENDINDICES0
				},
				a = {
					u_MvpMatrix: Laya.Shader3D.PERIOD_SPRITE,
					u_WorldMat: Laya.Shader3D.PERIOD_SPRITE,
					u_CameraPos: Laya.Shader3D.PERIOD_CAMERA,
					u_AlbedoTexture: Laya.Shader3D.PERIOD_MATERIAL,
					u_AlbedoIdentity: Laya.Shader3D.PERIOD_MATERIAL,
					u_AlbedoColor: Laya.Shader3D.PERIOD_MATERIAL,
					"u_SunLight.direction": Laya.Shader3D.PERIOD_SCENE,
					"u_SunLight.color": Laya.Shader3D.PERIOD_SCENE,
					u_Bones: Laya.Shader3D.PERIOD_CUSTOM,
					u_alpha: Laya.Shader3D.PERIOD_MATERIAL,
					u_ShadowMap: Laya.Shader3D.PERIOD_MATERIAL,
					u_LightvpMatrix: Laya.Shader3D.PERIOD_MATERIAL,
					u_LightmapScaleOffset: Laya.Shader3D.PERIOD_SPRITE,
					u_LightMap: Laya.Shader3D.PERIOD_SPRITE,
					u_TilingOffset: Laya.Shader3D.PERIOD_MATERIAL
				},
				i = Laya.Shader3D.add("lightMapMaterial"),
				s = new Laya.SubShader(e, a);
			i.addSubShader(s);
			s.addShaderPass("\n\t\tattribute vec4 a_Position; \n\t\tattribute vec3 a_Normal; \n\t\tattribute vec2 a_Texcoord0;\n\t\tuniform mat4 u_MvpMatrix; \n\t\tuniform mat4 u_WorldMat;\n\t\tuniform vec3 u_CameraPos;\n\t\tvarying vec2 v_Texcoord0;    \n\n\n\t\t#ifdef BONE\n\t\t\tconst int c_MaxBoneCount = 24;\n\t\t\tattribute vec4 a_BoneIndices;\n\t\t\tattribute vec4 a_BoneWeights;\n\t\t\tuniform mat4 u_Bones[c_MaxBoneCount];\n\t\t#endif\n\n\t\t#if defined(LIGHTMAP)&&defined(UV1)\n\t\t\tattribute vec2 a_Texcoord1;\n\t\t#endif\n\n\t\t#ifdef LIGHTMAP\n\t\t\tuniform vec4 u_LightmapScaleOffset;\n\t\t\tvarying vec2 v_LightMapUV;\n        #endif\n        \n        #ifdef TILINGOFFSET\n            uniform vec4 u_TilingOffset;\n\t\t#endif\n\t\t\n\n        vec2 TransformUV(vec2 texcoord,vec4 tilingOffset) {\n            vec2 transTexcoord=vec2(texcoord.x,texcoord.y-1.0)*tilingOffset.xy+vec2(tilingOffset.z,-tilingOffset.w);\n            transTexcoord.y+=1.0;\n            return transTexcoord;\n        }\n\n\t\tvoid main() \n\t\t{ \n\t\t\t#ifdef BONE\n\t\t\t\tmat4 skinTransform=mat4(0.0);\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\t\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\t\t\tvec4 position = skinTransform * a_Position;\n\t\t\t\tgl_Position=u_MvpMatrix * position;\n\t\t\t\tmat3 worldMat=mat3(u_WorldMat * skinTransform);\n\t\t\t#else\n\t\t\t\tgl_Position=u_MvpMatrix * a_Position;\n\t\t\t\tmat3 worldMat=mat3(u_WorldMat);\n\t\t\t#endif\n\n            #ifdef TILINGOFFSET\n                v_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n            #else\n                v_Texcoord0=a_Texcoord0;\n            #endif\t\n\n\t\t\tvec3 v_PositionWorld;\n\t\t\t#ifdef BONE\n\t\t\t\tv_PositionWorld=(u_WorldMat*position).xyz;\n\t\t\t#else\n\t\t\t\tv_PositionWorld=(u_WorldMat*a_Position).xyz;\n\t\t\t#endif\n\n\t\t\t#ifdef LIGHTMAP\n\t\t\t\t#ifdef SCALEOFFSETLIGHTINGMAPUV\n\t\t\t\t\t#ifdef UV1\n\t\t\t\t\t\tv_LightMapUV=vec2(a_Texcoord1.x,1.0-a_Texcoord1.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n\t\t\t\t\t#else\n\t\t\t\t\t\tv_LightMapUV=vec2(a_Texcoord0.x,1.0-a_Texcoord0.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n\t\t\t\t\t#endif \n\t\t\t\t\tv_LightMapUV.y=1.0-v_LightMapUV.y;\n\t\t\t\t#else\n\t\t\t\t\t#ifdef UV1\n\t\t\t\t\t\tv_LightMapUV=a_Texcoord1;\n\t\t\t\t\t#else\n\t\t\t\t\t\tv_LightMapUV=a_Texcoord0;\n\t\t\t\t\t#endif \n\t\t\t\t#endif \n\t\t\t#endif\n\n\t\t\tgl_Position.z=gl_Position.z * 2.0 - gl_Position.w;\n\t\t}", "\n\t\tprecision lowp float;\n\t\n\t\tvarying vec2 v_Texcoord0; \n        \n\n\t\t#ifdef WHOLE_ALPHA\n\t\t\tuniform float u_alpha;\n\t\t#endif\n\t\tuniform samplerCube u_reflection_cube;\n\t\tuniform float u_reflection_factor;\n\t\tuniform sampler2D u_AlbedoTexture;\n\n\t\t#ifdef LIGHTMAP\n\t\t\tvarying vec2 v_LightMapUV;\n\t\t\tuniform sampler2D u_LightMap;\n\t\t#endif\n\n\t\tuniform float u_AlbedoIdentity;\n\n\t\tvec3 DecodeLightmap(vec4 color) {\n\t\t\treturn color.rgb*color.a*5.0;\n\t\t}\n\n\t\tvoid main_normal(){\n\t\t\tvec4 albedoTextureColor = texture2D(u_AlbedoTexture, v_Texcoord0);\n\n\t\t\t#ifdef ALPHATEST\n\t\t\tif(albedoTextureColor.a <= 0.5){\n\t\t\t\tdiscard;\n\t\t\t}\n\t\t\t#endif\n\t\t\t\n\t\t\t#ifdef LIGHTMAP\n\t\t\t\t// unity导出后会在laya中会过度曝光，0.75是测试后的一个修正值\n\t\t\t\talbedoTextureColor.rgb *= DecodeLightmap(texture2D(u_LightMap, v_LightMapUV)) * 0.75;\n\t\t\t#endif\n\n\t\t\talbedoTextureColor *= u_AlbedoIdentity;\n\n\t\t\t#ifdef WHOLE_ALPHA\n\t\t\t\t//叠加全局透明度\n\t\t\t\tgl_FragColor = vec4(albedoTextureColor.rgb, albedoTextureColor.a*u_alpha);\n\t\t\t#else\n\t\t\t\tgl_FragColor = vec4(albedoTextureColor.rgb, albedoTextureColor.a);\n\t\t\t#endif\n\t\t}\n\t\n\t\tvoid main() \n\t\t{ \n\t\t\tmain_normal();\n\t\t}", t)
		}
		get albedoTexture() {
			return this._shaderValues.getTexture(LightMapMaterial.ALBEDOTEXTURE)
		}
		set albedoTexture(t) {
			this._shaderValues.setTexture(LightMapMaterial.ALBEDOTEXTURE, t)
		}
		get albedoColor() {
			return this._shaderValues.getVector(LightMapMaterial.ALBEDOCOLOR)
		}
		set albedoColor(t) {
			this._shaderValues.setVector(LightMapMaterial.ALBEDOCOLOR, t)
		}
		get albedoIntensity() {
			return this._shaderValues.getNumber(LightMapMaterial.ALBEDOINTENSITY)
		}
		set albedoIntensity(t) {
			t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(LightMapMaterial.ALBEDOINTENSITY, t)
		}
		get shadowMap() {
			return this._shaderValues.getTexture(LightMapMaterial.SHADOW_MAP)
		}
		get lightvp() {
			return this._shaderValues.getMatrix4x4(LightMapMaterial.LIGHT_VP)
		}
		set lightvp(t) {
			this._shaderValues.setMatrix4x4(LightMapMaterial.LIGHT_VP, t)
		}
		get tilingOffset() {
			return this._shaderValues.getVector(LightMapMaterial.TILINGOFFSET)
		}
		set tilingOffset(t) {
			t && (1 != t.x || 1 != t.y || 0 != t.z || 0 != t.w) ? this._shaderValues.addDefine(LightMapMaterial.SHADERDEFINE_TILINGOFFSET) : this._shaderValues.removeDefine(LightMapMaterial.SHADERDEFINE_TILINGOFFSET), this._shaderValues.setVector(LightMapMaterial.TILINGOFFSET, t)
		}
		get alpha() {
			return this._shaderValues.getNumber(LightMapMaterial.WHOLE_ALPHA)
		}
		set alpha(t) {
			null != t ? this._defineDatas.add(LightMapMaterial.SHADERDEFINE_WHOLE_ALPHA) : this._defineDatas.remove(LightMapMaterial.SHADERDEFINE_WHOLE_ALPHA), this._shaderValues.setNumber(LightMapMaterial.WHOLE_ALPHA, t)
		}
		get cull() {
			return this._shaderValues.getInt(LightMapMaterial.CULL)
		}
		set cull(t) {
			this._shaderValues.setInt(LightMapMaterial.CULL, t)
		}
		get blend() {
			return this._shaderValues.getInt(LightMapMaterial.BLEND)
		}
		set blend(t) {
			this._shaderValues.setInt(LightMapMaterial.BLEND, t)
		}
		get blendSrc() {
			return this._shaderValues.getInt(LightMapMaterial.BLEND_SRC)
		}
		set blendSrc(t) {
			this._shaderValues.setInt(LightMapMaterial.BLEND_SRC, t)
		}
		get blendDst() {
			return this._shaderValues.getInt(LightMapMaterial.BLEND_DST)
		}
		set blendDst(t) {
			this._shaderValues.setInt(LightMapMaterial.BLEND_DST, t)
		}
		get depthTest() {
			return this._shaderValues.getInt(LightMapMaterial.DEPTH_TEST)
		}
		set depthTest(t) {
			this._shaderValues.setInt(LightMapMaterial.DEPTH_TEST, t)
		}
		get depthWrite() {
			return this._shaderValues.getBool(LightMapMaterial.DEPTH_WRITE)
		}
		set depthWrite(t) {
			this._shaderValues.setBool(LightMapMaterial.DEPTH_WRITE, t)
		}
		set renderMode(t) {
			switch (t) {
				case LightMapMaterial.RENDERMODE_OPAQUE:
					this.alphaTest = !1, this.renderQueue = Laya.Material.RENDERQUEUE_OPAQUE, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case LightMapMaterial.RENDERMODE_CUTOUT:
					this.renderQueue = Laya.Material.RENDERQUEUE_ALPHATEST, this.alphaTest = !0, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case LightMapMaterial.RENDERMODE_CUTOUT_CULL_NONE:
					this.renderQueue = Laya.Material.RENDERQUEUE_ALPHATEST, this.alphaTest = !0, this.depthWrite = !0, this.cull = Laya.RenderState.CULL_NONE, this.blend = Laya.RenderState.BLEND_DISABLE, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case LightMapMaterial.RENDERMODE_TRANSPARENT:
					this.renderQueue = Laya.Material.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, this.cull = Laya.RenderState.CULL_BACK, this.blend = Laya.RenderState.BLEND_ENABLE_ALL, this.blendSrc = Laya.RenderState.BLENDPARAM_SRC_ALPHA, this.blendDst = Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				case LightMapMaterial.RENDERMODE_TRANSPARENT_CULL_NONE:
					this.renderQueue = Laya.Material.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, this.cull = Laya.RenderState.CULL_NONE, this.blend = Laya.RenderState.BLEND_ENABLE_ALL, this.blendSrc = Laya.RenderState.BLENDPARAM_SRC_ALPHA, this.blendDst = Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = Laya.RenderState.DEPTHTEST_LESS;
					break;
				default:
					throw new Error("LightMapMaterial : renderMode value error.")
			}
		}
	}
	LightMapMaterial.ALBEDOTEXTURE = Laya.Shader3D.propertyNameToID("u_AlbedoTexture"), LightMapMaterial.ALBEDOINTENSITY = Laya.Shader3D.propertyNameToID("u_AlbedoIdentity"), LightMapMaterial.ALBEDOCOLOR = Laya.Shader3D.propertyNameToID("u_AlbedoColor"), LightMapMaterial.SHADOW_MAP = Laya.Shader3D.propertyNameToID("u_ShadowMap"), LightMapMaterial.LIGHT_VP = Laya.Shader3D.propertyNameToID("u_LightvpMatrix"), LightMapMaterial.TILINGOFFSET = Laya.Shader3D.propertyNameToID("u_TilingOffset"), LightMapMaterial.WHOLE_ALPHA = Laya.Shader3D.propertyNameToID("u_alpha"), LightMapMaterial.CULL = Laya.Shader3D.propertyNameToID("s_Cull"), LightMapMaterial.BLEND = Laya.Shader3D.propertyNameToID("s_Blend"), LightMapMaterial.BLEND_SRC = Laya.Shader3D.propertyNameToID("s_BlendSrc"), LightMapMaterial.BLEND_DST = Laya.Shader3D.propertyNameToID("s_BlendDst"), LightMapMaterial.DEPTH_TEST = Laya.Shader3D.propertyNameToID("s_DepthTest"), LightMapMaterial.DEPTH_WRITE = Laya.Shader3D.propertyNameToID("s_DepthWrite"), LightMapMaterial.RENDERMODE_OPAQUE = 1, LightMapMaterial.RENDERMODE_CUTOUT = 2, LightMapMaterial.RENDERMODE_CUTOUT_CULL_NONE = 3, LightMapMaterial.RENDERMODE_TRANSPARENT = 4, LightMapMaterial.RENDERMODE_TRANSPARENT_CULL_NONE = 5;
	const KEY_MATERIAL_INFO_VERSION = "KEY_MATERIAL_INFO_VERSION",
		MATERIAL_INFO_VERSION = 1;
	class mgrMaterial extends _mgrBase {
		static onload() {
			if (CartoonMaterial.initShader(), PaintMaterialTest.initShader(), LightMapMaterial.initShader(), this.loadFromText(), !this.EMPTY_TEX2D) {
				var t = new Uint8Array(4);
				t[0] = 0, t[1] = 0, t[2] = 0, t[3] = 0;
				let e = new Laya.Texture2D(1, 1, Laya.Texture2D.FORMAT_R8G8B8A8, !1, !1);
				e.setPixels(t), e.lock = !0, this.EMPTY_TEX2D = e
			}
			_G.H5_TEST && mgrRes.loadRes("res/cfg/editorConfig.json", Laya.Loader.JSON, t => {
				t && t[KEY_MATERIAL_INFO_VERSION] == MATERIAL_INFO_VERSION && (this.editorConfig = t)
			})
		}
		static loadFromText() {
			mgrRes.loadRes("res/cfg/3dConfig.txt", Laya.Loader.TEXT, t => {
				if (t) {
					let e = Tools.decompressFromBase64New(t);
					if (e) {
						let t = JSON.parse(e);
						return void(t[KEY_MATERIAL_INFO_VERSION] == MATERIAL_INFO_VERSION && (this.materialInfos = t.materialInfos, this.dynamicBoneInfos = t.dynamicBoneInfos, this.lightRotation = t.lightRotation, this.resetPanel3DLight()))
					}
				}
				this.loadFromJson()
			})
		}
		static loadFromJson() {
			console.log("加载3dConfig.json --- 未压缩格式"), mgrRes.loadRes("res/cfg/3dConfig.json", Laya.Loader.JSON, t => {
				t && t[KEY_MATERIAL_INFO_VERSION] == MATERIAL_INFO_VERSION && (this.materialInfos = t.materialInfos, this.dynamicBoneInfos = t.dynamicBoneInfos, this.lightRotation = t.lightRotation, this.resetPanel3DLight())
			})
		}
		static getSaveData() {
			let t = {
				materialInfos: this.materialInfos,
				dynamicBoneInfos: this.dynamicBoneInfos,
				lightRotation: this.lightRotation
			};
			t[KEY_MATERIAL_INFO_VERSION] = MATERIAL_INFO_VERSION;
			let e = JSON.stringify(t);
			return [e, Tools.compressToBase64New(e)]
		}
		static saveToLocal() {
			if (GameRemoteRouter.instance) {
				let [t, e] = this.getSaveData();
				GameRemoteRouter.instance.sendMsgToServer({
					route: "keepInFile",
					data: {
						filePath: "res/cfg/3dConfig.txt",
						data: e
					}
				}), GameRemoteRouter.instance.sendMsgToServer({
					route: "keepInFile",
					data: {
						filePath: "res/cfg/3dConfig.json",
						data: t
					}
				}), GameRemoteRouter.instance.sendMsgToServer({
					route: "keepInFile",
					data: {
						filePath: "res/cfg/editorConfig.json",
						data: this.editorConfig
					}
				}), this.resetPanel3DLight()
			} else GameRemoteRouter.create()
		}
		static resetPanel3DLight() {
			let t = this.lightRotation;
			t && 3 == t.length && PanelBase3D.setDefaultLightEular(t[0], t[1], t[2])
		}
		static setMaterialInfos(t) {
			this.materialInfos = t
		}
		static setDynamicBoneInfos(t) {
			this.dynamicBoneInfos = t
		}
		static setMaterial(t, e, a, i) {
			this.materialInfos[t] || (this.materialInfos[t] = {}), this.materialInfos[t][e] || (this.materialInfos[t][e] = {}), this.materialInfos[t][e][a] = i
		}
		static getMaterial(t, e, a, i = !0) {
			if (!this.materialInfos[t]) {
				if (!i) return null;
				this.materialInfos[t] = {}
			}
			if (!this.materialInfos[t][e]) {
				if (!i) return null;
				this.materialInfos[t][e] = {}
			}
			return !this.materialInfos[t][e][a] && i && (this.materialInfos[t][e][a] = this.getDefaultCartonMateril()), this.materialInfos[t][e][a]
		}
		static getDefaultCartonMateril() {
			return {
				albedoColor: [1, 1, 1, 1],
				albedoIdentity: .5,
				shadowRange: 0,
				shadowIntensity: 0,
				shadowColor: [0, 0, 0, 0],
				shadowBoundary: 0,
				specularRange: 0,
				specularIntensity: 0,
				specularColor: [1, 1, 1, 1],
				outlineWidth: 0,
				outlineLightness: 1,
				outlineColor: [0, 0, 0, 0],
				secondShadowRange: 0,
				secondShadowIntensity: 1,
				secondShadowBoundary: 0,
				secondShadowColor: [1, 1, 1, 1],
				EdgeHightRange: 0,
				EdgeHightBoundary: 0,
				EdgeHightColor: [1, 1, 1, 1],
				EdgeHightIntensity: 1,
				alphaTestValue: .5,
				renderMode: CartoonMaterial.RENDERMODE_OPAQUE
			}
		}
		static setCartonShader(t, e, a = !0) {
			if (!t) return [];
			let i = [];
			for (let s = 0; s < t.numChildren; s++) {
				let n = t.getChildAt(s),
					o = n.skinnedMeshRenderer || n.meshRenderer;
				if (o) {
					let t = this.__setCartonMaterial(o, e, n.name, a);
					i = i.concat(t)
				}
			}
			return i
		}
		static __setCartonMaterial(t, e, a, i) {
			let s = [],
				n = t.sharedMaterials;
			for (let t = n.length - 1; t >= 0; t--) {
				const o = n[t];
				let r = mgrMaterial.getMaterial(e, a, t, i);
				r ? o ? s[t] = this.createCartoonShader(r, o) : console.error("__setCartonMaterial err") : s[t] = o
			}
			return t.sharedMaterials = s, s
		}
		static createCartoonShader(t, e) {
			let a = new CartoonMaterial;
			return a.name = e.name, a.albedoTexture = e.albedoTexture, Tools.forEachMap(t, function(t, e) {
				e instanceof Array ? a[t] = new Laya.Vector4(e[0], e[1], e[2], 1) : a[t] = e
			}), a
		}
		static setDynamicBone(t, e) {
			this.dynamicBoneInfos[t] || (this.dynamicBoneInfos[t] = []);
			for (let a = 0; a < this.dynamicBoneInfos[t].length; a++) {
				if (this.dynamicBoneInfos[t][a].route == e.route) return void(this.dynamicBoneInfos[t][a] = e)
			}
			this.dynamicBoneInfos[t].push(e)
		}
		static getDynamicBone(t, e) {
			this.dynamicBoneInfos[t] || (this.dynamicBoneInfos[t] = []);
			for (let a = 0; a < this.dynamicBoneInfos[t].length; a++) {
				const i = this.dynamicBoneInfos[t][a];
				if (i.route == e) return i
			}
			return this.dynamicBoneInfos[t].push({
				route: e,
				cr: .05,
				df: .3,
				dl: .01,
				c1s: .05,
				c2s: .05,
				c3s: .05,
				c4s: .05,
				c5s: .05,
				c6s: .05,
				gravity: .02
			}), this.dynamicBoneInfos[t][this.dynamicBoneInfos[t].length - 1]
		}
		static hasDynamicBone(t, e) {
			if (!this.dynamicBoneInfos[t]) return !1;
			for (let a = 0; a < this.dynamicBoneInfos[t].length; a++) {
				if (this.dynamicBoneInfos[t][a].route == e) return !0
			}
			return !1
		}
		static removeDynamicBone(t, e) {
			this.dynamicBoneInfos[t] || (this.dynamicBoneInfos[t] = []);
			for (let a = 0; a < this.dynamicBoneInfos[t].length; a++) {
				if (this.dynamicBoneInfos[t][a].route == e) return void this.dynamicBoneInfos[t].splice(a, 1)
			}
		}
		static useDynamicBone(t, e) {
			let a = this.dynamicBoneInfos[e];
			if (!a) return !1;
			let i = !1;
			for (let e = 0; e < a.length; e++) {
				const s = a[e];
				let n = UiHelper.getChild(t, s.route);
				if (!n) continue;
				let o = n.getComponent(BoneManager);
				o || ((o = n.addComponent(BoneManager)).onStarted = (() => {
					o.setDisplacementFactor(s.df), o.setMaxDisplacement(s.dl), o.setCollider1Size(s.c1s), o.setCollider2Size(s.c2s), o.setCollider3Size(s.c3s), o.setCollider4Size(s.c4s), o.setCollider5Size(s.c5s), o.setCollider6Size(s.c6s), o.setColliderHair(0), o.setGravity({
						x: 0,
						y: -s.gravity,
						z: 0
					})
				}), i = !0)
			}
			return i
		}
		static unuseDynamicBone(t, e) {
			let a = this.dynamicBoneInfos[e];
			if (!a) return !1;
			for (let e = 0; e < a.length; e++) {
				const i = a[e];
				let s = UiHelper.getChild(t, i.route);
				if (!s) continue;
				let n = s.getComponent(BoneManager);
				n && n.destroy()
			}
		}
		static setDrawShader(t) {
			if (!t) return [];
			for (var e = UiHelper.findAllSkinnedMeshRenderers(t), a = [], i = 0; i < e.length; i++) a = a.concat(this.__setDrawMaterial(e[i]));
			if (a.length > 0) return a;
			e = UiHelper.findAllMeshRenderers(t);
			for (i = 0; i < e.length; i++) a = a.concat(this.__setDrawMaterial(e[i]));
			return a
		}
		static __setDrawMaterial(t) {
			let e = [],
				a = t.sharedMaterials;
			for (let t = a.length - 1; t >= 0; t--) {
				const i = a[t];
				let s = this.createPaintShader(i);
				e[t] = s
			}
			return t.sharedMaterials = e, e
		}
		static createPaintShader(t) {
			let e = new PaintMaterialTest;
			return e.name = t.name, e.albedoTexture = t.albedoTexture, e.albedoColor = t.albedoColor, e.depthWrite = t.depthWrite, e.depthTest = t.depthTest, e.cull = t.cull, e.blend = t.blend, e.blendSrc = t.blendSrc, e.blendDst = t.blendDst, e.renderQueue = t.renderQueue, e.alphaTest = t.alphaTest, e.alphaTestValue = t.alphaTestValue, e.maskTexture = this.EMPTY_TEX2D, e.setScreenSize(_G.canvasWidth, _G.canvasHeight), e.setToNormal(), e
		}
		static precompileshader(t) {
			mgrRes.loadRes("res/cfg/shaderCompile.txt", Laya.Loader.TEXT, e => {
				if (e) {
					let a, i = Tools.decompressFromBase64(e);
					if (!i) return void(t && t());
					try {
						a = JSON.parse(i)
					} catch (e) {
						return Logger.catchError("precompileshader:", e), void(t && t())
					}
					if (!a || 0 == a.length) return void(t && t());
					const s = 5;
					! function compile() {
						for (let e = 0; e < s; e++) {
							let e = a.pop();
							if (!e) return void(t && t());
							Laya.Shader3D.compileShaderByDefineNames(e.shaderName, e.subShaderIndex, e.passIndex, e.defineNames)
						}
						Laya.timer.frameOnce(1, this, compile)
					}()
				}
			})
		}
		static enableShaderDebugMode() {
			Laya.Shader3D.debugMode = !0
		}
		static disableShaderDebugMode() {
			Laya.Shader3D.debugMode = !1
		}
		static recordShaderCompileInfo() {
			if (GameRemoteRouter.instance) {
				_G.sendMsg(BASE_MSG.UI_SHOW_TIP, "shader 预编译信息存档!");
				let t = [];
				for (let e = 0; e < Laya.Shader3D.debugShaderVariantCollection.variantCount; e++) {
					let a = Laya.Shader3D.debugShaderVariantCollection.getByIndex(e),
						i = a.shader.name,
						s = {};
					s.shaderName = i, s.defineNames = a.defineNames, s.passIndex = a.passIndex, s.subShaderIndex = a.subShaderIndex, t.push(s)
				}
				console.log("shader存档数据!"), console.log(t);
				let e = JSON.stringify(t),
					a = Tools.compressToBase64(e);
				GameRemoteRouter.instance.sendMsgToServer({
					route: "keepInFile",
					data: {
						filePath: "res/cfg/shaderCompile.txt",
						data: a
					}
				})
			} else _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "未链接存档服务器,尝试重新连接!")
		}
	}
	mgrMaterial.materialInfos = {}, mgrMaterial.lightRotation = [], mgrMaterial.editorConfig = {
		camera: {}
	};
	class BoneBinder {
		constructor() {
			this.bBind = !1
		}
		rebindBone(t, e, a) {
			if (!this.bBind) {
				this.newBuildBones = [], this.boneMap = Object.create(null), this.meshRenders = a, this.buildBone(t, e);
				for (let t = 0; t < a.length; t++) this.syncBones(a[t]);
				this.bBind = !0
			}
		}
		unbindBone() {
			if (this.bBind) {
				this.bBind = !1;
				for (let t = this.meshRenders.length - 1; t >= 0; t--) this.meshRenders[t]._bones = this.meshRenders[t]._origin_bones;
				for (let t = this.newBuildBones.length - 1; t >= 0; t--) this.newBuildBones[t].destroy();
				this.newBuildBones = null, this.boneMap = null
			}
		}
		buildBone(t, e) {
			let a = this.boneMap;
			for (var i = 0; i < e.numChildren; i++) {
				var s = e.getChildAt(i),
					n = t.getChildByName(s.name);
				let o = !1;
				n || (s.particleSystem ? (BoneBinder.particleSystemSeriverNumber++, (n = Laya.ShuriKenParticle3D.instantiate(s)).name = `_auto_create_particle${BoneBinder.particleSystemSeriverNumber}`, s.particleSystem.stop(), o = !0) : n = new Laya.Sprite3D(s.name), t.addChild(n), n.transform.localPosition = s.transform.localPosition, n.transform.localRotation = s.transform.localRotation, this.newBuildBones.push(n)), a[n.name] ? console.warn("骨骼重名.", n.name) : a[n.name] = n, o || this.buildBone(n, s)
			}
		}
		syncBones(t) {
			let e = t.bones,
				a = [];
			for (var i = 0; i < e.length; i++) {
				var s = e[i];
				this.boneMap[s.name] ? a.push(this.boneMap[s.name]) : console.error("找不到骨骼:", s.name)
			}
			e.length == a.length ? (t._bones = a, t._origin_bones = e) : console.error("骨骼数不一致.")
		}
		useDyBone(t, e) {
			this.dyModel = t, this.modelId = e, mgrMaterial.useDynamicBone(t, e)
		}
		unuseDyBone() {
			this.dyModel && (mgrMaterial.unuseDynamicBone(this.dyModel, this.modelId), this.dyModel = null, this.modelId = null)
		}
		hasDyBone() {
			return null != this.dyModel
		}
	}
	let bone_index_map;
	BoneBinder.particleSystemSeriverNumber = 0;
	let bone_count = 0;
	class GModel extends Model {
		constructor() {
			super(...arguments), this._bInit = !1
		}
		get sharedMaterial() {
			return this._bInit ? this.sharedMaterials[0] : null
		}
		dispose() {
			super.dispose()
		}
		unuse() {
			this.boneBinder && (this.boneBinder.unbindBone(), this.boneBinder.unuseDyBone(), this.boneBinder = null), super.unuse()
		}
		initBody() {
			if (this.callable) {
				if (this._bInit) return;
				if (!bone_index_map) {
					let t = Object.create(null);
					! function setChildIndex(e) {
						for (let a = 0; a < e.numChildren; a++) {
							let i = e.getChildAt(a);
							null != t[i.name] && console.error("骨骼重复!", i.name), t[i.name] = bone_count++, setChildIndex(i)
						}
					}(this.getChildAt(0)), bone_index_map = t
				}
				this.initPart(!0)
			} else this.safeCall(this.initBody)
		}
		initPart(t = !1, e) {
			if (this.callable) {
				if (this.initBone(t, e), this._bInit) return;
				return this._bInit = !0, void this.initCartoon()
			}
			this.safeCall(this.initPart, t)
		}
		initFace() {
			if (!this.callable) return this.safeCall(this.initFace);
			if (this._bInit) return;
			this._bInit = !0;
			let t = this.getChild("ty_lian00");
			this.skinnedMeshSprite = t;
			let e = t.skinnedMeshRenderer,
				a = e.sharedMaterials,
				i = [];
			for (let e = 0; e <= 10; e++)
				if (8 == e) {
					let s = mgrMaterial.getMaterial(this.modelId, t.name, e, !0);
					i[e] = mgrMaterial.createCartoonShader(s, a[e])
				} else i[e] = mgrMaterial.createPaintShader(a[e]);
			e.sharedMaterials = i, this.sharedMaterials = i
		}
		initPaint() {
			if (!this.callable) return this.safeCall(this.initPaint);
			this._bInit || (this._bInit = !0, this.skinnedMeshSprite = UiHelper.findSkinnedMeshSprite(this.resNode, !0), this.sharedMaterials = mgrMaterial.setDrawShader(this.resNode))
		}
		initCartoon() {
			this.skinnedMeshSprite = UiHelper.findSkinnedMeshSprite(this.resNode, !0), this.sharedMaterials = mgrMaterial.setCartonShader(this.resNode, this.modelId), mgrMaterial.useDynamicBone(this.resNode, this.modelId)
		}
		initBone(t = !1, e) {
			if (t && e) {
				if (this.boneBinder) return;
				let t = e.resNode.getChildByName("Bip001"),
					a = this.resNode.getChildByName("Bip001"),
					i = UiHelper.findAllSkinnedMeshRenderers(this.resNode);
				i.length && (this.boneBinder = new BoneBinder, this.boneBinder.rebindBone(t, a, i), this.boneBinder.useDyBone(e.resNode, this.modelId))
			}
		}
		_initBoneTransform(t, e) {
			let a = bone_index_map[t.name];
			null != a && (e[a] = t.transform);
			for (let a = 0; a < t.numChildren; a++) this._initBoneTransform(t.getChildAt(a), e)
		}
		debug_reset_shader() {
			this.callable ? mgrMaterial.setCartonShader(this.resNode, this.modelId, !1) : this.safeCall(this.debug_reset_shader)
		}
		static syncNodeA2NodeB(t, e, a) {
			if (t.name != e.name) {
				if (!a.test(t.name)) {
					let a = t.clone();
					e.parent.addChild(a)
				}
			} else
				for (let i = 0; i < t.numChildren; i++) {
					let s = t.getChildAt(i),
						n = e.getChildByName(s.name);
					n ? this.syncNodeA2NodeB(s, n, a) : a.test(s.name) || (n = s.clone(), e.addChild(n))
				}
		}
		addToChild(t, e) {
			if (this.callable) {
				let a = UiHelper.findChild(this.resNode, t);
				a ? e instanceof Model ? e.setParent(a) : a.addChild(e) : (Logger.error("找不到子节点：", t), e instanceof Model ? e.setParent(this.resNode) : this.addChild(e))
			} else this.safeCall(this.addToChild, t, e)
		}
		get node() {
			return this.resNode
		}
		get renderer() {
			for (let t = 0; t < this.resNode.numChildren; t++) {
				let e = this.resNode.getChildAt(t),
					a = e.skinnedMeshRenderer || e.meshRenderer;
				if (a) return a
			}
		}
	}
	GModel.debugShader = !0;
	let KEY_SSZ_DATA = "KEY_SSZ_DATA";
	class mgrSzz extends _mgrBase {
		static onload() {
			if (this.szzData = FileRecord.getData(KEY_SSZ_DATA), this.szzData) {
				var t = (Timer.time - this.szzData.lastTime) / 3600,
					e = Math.floor(5 * t + Mathf.random(10, 30));
				this.szzData.renqi += e, this.saveData()
			} else this.szzData = {
				like: db.game_cnf.like_lottery_count - 1,
				renqi: 15,
				awardIndex: 0,
				lastTime: Timer.time,
				parts: null
			}, this.saveData();
			let a = db.get_item_db_map(),
				i = this._allParts;
			Tools.forEachMap(a, function(t, e) {
				2 == e.type && 1 == e.subType && e.gid <= 14 && (i[e.gid] || (i[e.gid] = []), i[e.gid].push(t))
			}), this._allParts = i
		}
		static start() {
			mgrRank.commit(this.szzData.renqi, 2)
		}
		static saveData() {
			FileRecord.setData(KEY_SSZ_DATA, this.szzData)
		}
		static getNextSzz(t) {
			return {
				parts: this.getOtherParts(t),
				renqi: 0,
				name: mgrRank.getRandomName()
			}
		}
		static get awardIndex() {
			return this.szzData.awardIndex
		}
		static get likeCount() {
			return this.szzData.like
		}
		static getMyParts() {
			return this.szzData.parts
		}
		static setMyParts(t) {
			this.szzData.parts = t, this.saveData(), _G.sendMsg("SZZ_PARTS_CHANGE")
		}
		static getOtherParts(t, e = 0) {
			let a = [];
			for (let t = 0; t <= 14; t++) this._getRandomPart(t, 12 != t, a);
			return t && e < 15 && this._equalsParts(t, a) ? this.getOtherParts(t, e + 1) : a = mgrPart.checkDefaultParts(a)
		}
		static _getRandomPart(t, e, a) {
			let i = this._loadedParts[t];
			if (i)
				if (e) {
					let t = i[Mathf.random(0, i.length)];
					t && a.push(t)
				} else a.push(i[Mathf.random(0, i.length - 1)])
		}
		static _equalsParts(t, e) {
			if (t.length == e.length)
				for (let a = t.length - 1; a >= 0; a--)
					if (t[a] != e[a]) return !1;
			return !1
		}
		static setLoadedParts(t) {
			for (const i in t) {
				var e = db.get_item_db(t[i]);
				if (2 == e.type) {
					var a = this._loadedParts[e.gid];
					if (a || (a = [], this._loadedParts[e.gid] = a), a.indexOf(e.id) < 0) {
						a.push(e.id);
						let t = this._allParts[e.gid];
						if (t) {
							let a = t.indexOf(e.id);
							a >= 0 && t.splice(a, 1)
						}
					}
				}
			}
		}
		static randomLoad(t) {
			let e = this.getRandomUnloadedPart();
			if (e) {
				let s = db.get_item_db(e).viewList,
					n = new ResLoader;
				for (var a = 0; a < s.length; a++) {
					var i = db.get_model_db(s[a]);
					0 == i.type ? n.add(i.resPath, RES_TYPE.PREFAB3D) : n.add(i.resPath, RES_TYPE.TEXTURE2D)
				}
				n.setLoadingCallback(() => {
					this.setLoadedParts([e]), t && t()
				}), n.loadAll()
			} else t && t()
		}
		static getRandomUnloadedPart(t = 0) {
			if (t > 10) return null;
			if (this._allParts.length > 0) {
				let a = Mathf.arrCircleRandom(this.part_load_weight);
				if (a < 0) return;
				var e = this._allParts[a];
				return e && e.length > 0 ? e[Mathf.random(0, e.length - 1)] : (this.part_load_weight[a] = 0, this.getRandomUnloadedPart(t + 1))
			}
			return null
		}
		static addLike() {
			this.szzData.like = Math.min(db.game_cnf.like_lottery_count, this.szzData.like + 1), BaseFacade.mGoal.commit(ACTION_ID.ADD_LIKE), this.likedCount++, this.saveData()
		}
		static canLottery(t = !1) {
			return !!t || this.likeCount >= db.game_cnf.like_lottery_count
		}
		static getAwardItems() {
			let t = BaseFacade.mDrop.getAllDropItems(db.game_cnf.szz_lottery_drop_id),
				e = this.lottery_each_count,
				a = this.szzData.awardIndex;
			return a = this.szzData.awardIndex < t.length ? (a / e | 0) * e : ((t.length - e) / e | 0) * e, t.slice(a, a + this.lottery_each_count)
		}
		static makeLottery(t = !1) {
			if (t || this.canLottery(t)) {
				let t, e = BaseFacade.mDrop.getAllDropItems(db.game_cnf.szz_lottery_drop_id),
					a = this.lottery_each_count;
				if (this.szzData.awardIndex < e.length)(t = e[this.szzData.awardIndex]).index = this.szzData.awardIndex % a;
				else {
					let i = this.szzData.awardIndex % a;
					(t = e[i = ((e.length - a) / a | 0) * a + i]).index = i
				}
				return BaseFacade.mGoal.commit(ACTION_ID.LOTTERY), this.szzData.awardIndex++, this.szzData.like = 0, this.saveData(), t
			}
		}
	}
	mgrSzz._allParts = [], mgrSzz.likedCount = 0, mgrSzz._loadedParts = Object.create(null), mgrSzz.part_load_weight = [1, 1, 1, 1, 1, 2, 3, 3, 5, 2, 1, 1, 20, 0, 0], mgrSzz.lottery_each_count = 8;
	class GView {
		constructor() {
			this.isClear = !1
		}
		create(t, e, a) {
			this.partType = t, this.viewId = e, this.viewDb = db.get_model_db(e), this.avatar = a, this.isClear = !1, 0 == this.viewDb.type ? this.initSprite3D() : this.initTexture2D()
		}
		clear() {
			this.viewId = null, this.viewDb = null, this.avatar = null, this.model && (_G.poolManager.put(this.model), this.model = null), this.clearMaterialMask(), this.material = null, this.depModel = null, this.isClear = !0
		}
		get isLoaded() {
			if (this.model) return this.model.isLoaded
		}
		get isModelLoaded() {
			return this.model && this.model.isLoaded
		}
		initSprite3D() {
			if (this.model = _G.poolManager.get(GModel, this.viewId), this.model) {
				let t = this.viewDb.attachNode,
					e = db.get_part_type_db(this.partType);
				t || (t = e.attachNode), t ? (this.avatar.baseBody.addToChild(t, this.model), this.partType >= 14 ? this.model.initPaint() : this.model.initPart()) : (this.model.setParent(this.avatar), this.model.initPart(e.bBoneTransform, this.avatar.baseBody), this.model.initAnimator(!1))
			}
		}
		get boneTransforms() {
			return this.model && this.model.boneTransforms
		}
		initTexture2D() {
			if (this.viewDb.modelId == db.MODEL_DB_ID.face) this.material = this.avatar.baseFace.sharedMaterials[this.viewDb.matIndex], this.depModel = this.avatar.baseFace;
			else {
				let t = this.avatar.getView(this.viewDb.modelId);
				if (!t) return void console.error("找不到依赖的模型", this.viewId, this.viewDb.modelId);
				this.material = t.model.sharedMaterials[this.viewDb.matIndex], this.depModel = t.model
			}
			mgrRes.loadRes(this.viewDb.resPath, RES_TYPE.TEXTURE2D, t => {
				!this.isClear && this.material && (this.material.albedoTexture = t)
			})
		}
		clearMaterialMask() {
			this.material && (this.material.newTexture = null, this.material.transition = 0, this.material.setToNormal())
		}
		changeView() {
			this.material && (this.viewId = this.newViewId, this.viewDb = db.get_model_db(this.newViewId), this.newViewId = null, this.material.albedoTexture = this.material.newTexture, this.material.maskTexture = mgrMaterial.EMPTY_TEX2D, this.material.transition = 0)
		}
	}
	class AnimatorFixedPlayer extends Laya.EventDispatcher {
		constructor(t) {
			super(), this.destroyed = !1, this.duration = 0, this.modelsInfo = [], this.callbackList = [], this.setDt(t)
		}
		dispose() {
			this.destroyed = !0, this.clear()
		}
		clear() {
			return this.modelsInfo.length = 0, this.duration = 0, this.offAll(), this.clearTimeCallbacks(), Laya.timer.clearAll(this), this
		}
		addModelAnim(t, e) {
			return this.modelsInfo.push([t, e, t.getAnimator().speed]), t.addAnimatorStateById(e), this.setDuration(Math.max(this.duration, t.getAnimationDuration(e))), this
		}
		setDuration(t) {
			return this.duration = t, t || console.error("AnimatorFixedPlayer duration <= 0."), this
		}
		setDt(t) {
			return this.dt = t, this
		}
		addTimeCallback(t, e) {
			return this.callbackList.push([t, e]), this
		}
		clearTimeCallbacks() {
			this.callbackList.length = 0
		}
		play(t = !1) {
			this.loop = t, this.curTime = 0, this.curCallbackIndex = 0, this.callbackList.length && this.callbackList.sort(function(t, e) {
				return t[0] - e[0]
			}), this.simulate(0), Laya.timer.frameLoop(1, this, this.update)
		}
		stop() {
			for (var t = this.modelsInfo.length - 1; t >= 0; t--) {
				var e = this.modelsInfo[t];
				e[0].getAnimator().speed = e[2]
			}
			Laya.timer.clearAll(this)
		}
		update() {
			if (this.destroyed) return;
			let t = null == this.dt ? Laya.timer.delta / 1e3 : this.dt;
			this.curTime += t;
			let e = this.curTime / this.duration;
			this.simulate(e), e >= 1 && (this.loop ? (this.curTime -= this.duration, this.curCallbackIndex = 0) : (this.stop(), this.event(Laya.Event.COMPLETE))), this.callbackList.length && this.curCallbackIndex < this.callbackList.length && e >= this.callbackList[this.curCallbackIndex][0] && this.callbackList[this.curCallbackIndex++][1]()
		}
		simulate(t) {
			for (var e = this.modelsInfo.length - 1; e >= 0; e--) {
				var a = this.modelsInfo[e],
					i = a[0].getAnimator();
				i.speed = 1e-6, i.play(a[1], 0, t)
			}
		}
	}
	var CLASS_ROLE_STATE;
	! function(t) {
		t[t.LOCKED = 0] = "LOCKED", t[t.FREE = 1] = "FREE", t[t.WAIT = 2] = "WAIT", t[t.STUDY = 3] = "STUDY", t[t.STAND = 4] = "STAND"
	}(CLASS_ROLE_STATE || (CLASS_ROLE_STATE = {}));
	const STUDENT_READY_TIME = 300;
	class mgrClassRoom extends _mgrBase {
		static onload() {
			if (this.usedNewRole = FileRecord.getData("KEY_CLASS_ROOM_USED_NEW_ROLE") || {}, this.studentOrder = FileRecord.getData("KEY_CLASS_ROOM_STUDENT_ORDER") || 0, this.standDatas = FileRecord.getData("KEY_CLASS_ROOM_STAND_DATA") || [], this.roleLevelData = FileRecord.getData("KEY_CLASS_ROOM_ROLE_LEVEL_DATA") || {}, this.seatDatas = FileRecord.getData("KEY_CLASS_ROOM_SEATS_DATA"), !this.seatDatas) {
				this.seatDatas = {};
				for (let t = 0; t < 3; t++) this.randomStudent(t, !0)
			}
			let t = !1,
				e = db.get_class_room_role_db_map();
			for (const a in e) {
				let i = e[a];
				i && !this.roleLevelData[i.id] && (this.roleLevelData[i.id] = {
					level: 0,
					flowerCount: 0
				}, t = !0)
			}
			t && FileRecord.setData("KEY_CLASS_ROOM_ROLE_LEVEL_DATA", this.roleLevelData), Timer.callLoop(1, this.onTimer.bind(this))
		}
		static saveData() {
			FileRecord.setData("KEY_CLASS_ROOM_USED_NEW_ROLE", this.usedNewRole), FileRecord.setData("KEY_CLASS_ROOM_STUDENT_ORDER", this.studentOrder), FileRecord.setData("KEY_CLASS_ROOM_STAND_DATA", this.standDatas), FileRecord.setData("KEY_CLASS_ROOM_SEATS_DATA", this.seatDatas), FileRecord.setData("KEY_CLASS_ROOM_ROLE_LEVEL_DATA", this.roleLevelData)
		}
		static onTimer() {
			let t = mgrClassRoom.getEmptySeatIndex();
			if (null == t) return;
			let e = this.seatDatas;
			for (let t = 0; t < 3; t++) {
				let a = e[t];
				if (a && a.startTime > Timer.time) return
			}
			mgrClassRoom.randomStudent(t)
		}
		static getEmptySeatIndex() {
			for (let t = 0; t < 3; t++)
				if (!this.seatDatas[t]) return t;
			return null
		}
		static randomStudent(t, e = !1) {
			let a = db.get_class_room_seat_db(t);
			if (!a) return;
			let i = a.roleIds,
				s = {},
				n = this.seatDatas;
			for (let t in n) {
				let e = n[t];
				e && null != e.roleId && (s[e.roleId] = !0)
			}
			let o = [];
			for (let t = 0; t < i.length; t++) {
				let e = db.get_class_room_role_db(i[t]);
				if (e) {
					let a = !0;
					if (e.unlockQuestId)
						if (a = BaseFacade.mQuest.isCommitable(e.unlockQuestId)) {
							if (!this.usedNewRole[i[t]]) {
								(o = []).push(i[t]), this.usedNewRole[i[t]] = !0, console.log("优先使用新解锁的角色", i[t]);
								break
							}
						} else;
					!s[i[t]] && a && o.push(i[t])
				}
			}
			if (o.length <= 0) return;
			console.log("可用的角色", o);
			let r = o[Mathf.random(o.length) - 1];
			this.seatDatas[t] = {
				roleId: r,
				order: this.studentOrder,
				startTime: e ? Timer.time : Timer.time + STUDENT_READY_TIME
			};
			for (let t = 0; t < this.standDatas.length; t++) {
				let e = this.standDatas[t];
				e && e.roleId == r && (this.standDatas.splice(t, 1), t -= 1)
			}
			this.studentOrder++, this.saveData()
		}
		static summonStudent(t) {
			let e = this.seatDatas;
			for (let a = 0; a < 3; a++) {
				let i = e[a];
				if (i && i.roleId == t) return void(i.startTime > Timer.time ? i.startTime = Timer.time : console.log("教室中已有召唤角色"))
			}
			let a = null,
				i = null,
				s = null,
				n = -1;
			for (let e = 0; e < 3; e++) {
				if (db.get_class_room_seat_db(e).roleIds.indexOf(t) >= 0) {
					let t = this.seatDatas[e];
					if (!t) {
						a = e;
						break
					}(n < 0 || t.order < n) && (n = t.order, i = e), t.startTime > Timer.time && (s = e)
				}
			}
			null != a ? this.seatDatas[a] = {
				roleId: t,
				order: this.studentOrder,
				startTime: Timer.time
			} : null != s ? this.seatDatas[s] = {
				roleId: t,
				order: this.studentOrder,
				startTime: Timer.time
			} : null != i && (this.seatDatas[i] = {
				roleId: t,
				order: this.studentOrder,
				startTime: Timer.time
			}, _G.sendMsg("STUDENT_SEAT_DATA_REPLACE", {
				seatIdx: i
			}));
			for (let e = 0; e < this.standDatas.length; e++) {
				let a = this.standDatas[e];
				a && a.roleId == t && (this.standDatas.splice(e, 1), e -= 1)
			}
			this.studentOrder++, this.saveData()
		}
		static getOperateSeatIdx() {
			let t = null;
			for (let e in this.seatDatas) {
				let a = this.seatDatas[e];
				a && a.startTime <= Timer.time && (null == t || this.seatDatas[t].order > a.order) && (t = parseInt(e))
			}
			return t
		}
		static getSeatDatas() {
			return this.seatDatas
		}
		static setStudentStand(t) {
			let e = this.seatDatas[t];
			if (e) {
				for (let t = 0; t < this.standDatas.length; t++) this.standDatas[t] || (this.standDatas.splice(t, 1), t -= 1);
				this.standDatas.push(e), this.standDatas.length > 3 && this.standDatas.splice(0, 1), this.seatDatas[t] = null, this.saveData()
			} else console.warn("该座位上没有数据 seatIdx = ", t)
		}
		static clearStandData(t) {
			this.standDatas.splice(t, 1), this.saveData()
		}
		static hasStandPos() {
			let t = this.standDatas;
			for (let e = 0; e < 3; e++) {
				if (!t[e]) return !0
			}
			return !1
		}
		static setStandLeave(t) {
			this.standDatas[t] = null, this.saveData()
		}
		static getStandDatas() {
			return this.standDatas
		}
		static setStudentLeave(t) {
			this.seatDatas[t] ? (this.seatDatas[t] = null, this.saveData()) : console.warn("该座位上没有数据 seatIdx = ", t)
		}
		static hasStudentReady() {
			let t = this.seatDatas;
			for (let e = 0; e < 3; e++) {
				let a = t[e];
				if (a && a.startTime > Timer.time) return !0
			}
			return !1
		}
		static setStudentFinishReady() {
			let t = this.seatDatas;
			for (let e = 0; e < 3; e++) {
				let a = t[e];
				a && a.startTime > Timer.time && (a.startTime = Timer.time)
			}
		}
		static calcRating(t) {
			let e = db.get_student_stage_score_mapping_db_arr();
			for (let a = e.length - 1; a >= 0; a--) {
				let i = e[a];
				if (i.score <= t) return i.rating
			}
			return e[0].rating
		}
		static getRoleState(t) {
			let e = db.get_class_room_role_db(t);
			if (e && e.unlockQuestId) {
				if (!BaseFacade.mQuest.isCommitable(e.unlockQuestId)) return CLASS_ROLE_STATE.LOCKED
			}
			let a = this.seatDatas;
			for (let e in a) {
				let i = a[e];
				if (i && i.roleId == t) return i.startTime > Timer.time ? CLASS_ROLE_STATE.WAIT : CLASS_ROLE_STATE.STUDY
			}
			let i = this.standDatas;
			for (let e in i) {
				let a = i[e];
				if (a && a.roleId == t) return CLASS_ROLE_STATE.STAND
			}
			return CLASS_ROLE_STATE.FREE
		}
		static getRoleLevel(t) {
			return this.roleLevelData[t].level || 0
		}
		static upgradeLevel(t) {
			let e = this.getRoleLevel(t);
			e < 4 && GameStatistics.statisCommonEvent(2562 + e, t), this.roleLevelData[t].level = Math.min(e + 1, 4), _G.sendMsg("CLASS_ROLE_LEVEL_CHANGE"), this.saveData()
		}
		static getRoleFlowerCount(t) {
			return this.roleLevelData[t].flowerCount || 0
		}
		static addRoleFlowerCount(t) {
			this.roleLevelData[t].flowerCount = Math.min(this.getRoleFlowerCount(t) + 1, 5), this.saveData()
		}
		static getXiuBiaoModelData() {
			let t = null,
				e = db.get_class_room_role_db_map();
			for (const a in e) {
				let i = e[a];
				if (i && i.contractIdx == mgrGame.contractIndex) {
					t = i.id;
					break
				}
			}
			if (null == t) return console.log("当前角色没有对应的课堂角色，不佩戴袖标！！！"), {
				bYouXiu: null,
				wxModelId: null,
				yxModelId: null
			};
			let a = mgrPart.partsWear,
				i = {};
			for (const t in a) a[t] && (i[a[t]] = !0);
			console.log("已穿戴的部件", i);
			let s = this.getRoleLevel(t),
				n = db.get_class_room_level_db(s);
			if (!n) return console.warn("课堂角色等级错误 roleId = ", t, "level = ", s), {
				bYouXiu: null,
				wxModelId: null,
				yxModelId: null
			};
			let o = !1,
				r = n.yxPartIds;
			for (let t = 0; t < r.length; t++) {
				if (i[r[t]]) {
					o = !0;
					break
				}
			}
			return {
				bYouXiu: o,
				wxModelId: n.wxModelId,
				yxModelId: n.yxModelId
			}
		}
		static getJiangZhuangModelId() {
			let t = null,
				e = db.get_class_room_role_db_map();
			for (const a in e) {
				let i = e[a];
				if (i && i.contractIdx == mgrGame.contractIndex) {
					t = i.id;
					break
				}
			}
			if (null == t) return console.log("当前角色没有对应的课堂角色，不显示奖状！！！"), null;
			let a = this.getRoleLevel(t),
				i = db.get_class_room_level_db(a);
			if (i) return i.jzModelId;
			console.warn("课堂角色等级错误 roleId = ", t, "level = ", a)
		}
	}
	mgrClassRoom.seatDatas = {}, mgrClassRoom.standDatas = [], mgrClassRoom.studentOrder = 0, mgrClassRoom.usedNewRole = {}, mgrClassRoom.roleLevelData = {};
	class RoleAvatar extends Laya.Sprite3D {
		constructor(t, e) {
			super(), this.fingernails = {}, this.isInit = !1, this._bHuDongAnim = !1, this._hudongIdx = 0, this._loop = !1, this._bShowXiuBiao = !1, this.viewMap = {}, this.init(t, e)
		}
		destroy() {
			this.clearJingZi(), this.clearHuDie();
			for (const t in this.viewMap) {
				let e = this.viewMap[t];
				if (e) {
					let t = e.views;
					for (let e = 0; e < t.length; e++) {
						let a = t[e];
						a.clear(), _G.pool.put(a)
					}
				}
			}
			this.viewMap = null;
			for (let t in this.fingernails) this.fingernails[t] && _G.poolManager.put(this.fingernails[t]);
			this.fingernails = [], this.baseBody && (_G.poolManager.put(this.baseBody), this.baseBody.off("Enter", this, this._onBodyAnimEnter), this.baseBody.off("Exit", this, this._onBodyAnimExit), this.baseBody = null), this.baseFace && (_G.poolManager.put(this.baseFace), this.baseFace.off("Exit", this, this._onFaceAnimExit), this.baseFace = null), this.xiubiao_wuxiu && (_G.poolManager.put(this.xiubiao_wuxiu), this.xiubiao_wuxiu = null), this.xiubiao_xiuzi && (_G.poolManager.put(this.xiubiao_xiuzi), this.xiubiao_xiuzi = null), this._resLoader && this._resLoader.dispose(), super.destroy(!1)
		}
		onDisable() {
			this._bHuDongAnim = !1
		}
		init(t, e) {
			let a = new ResLoader;
			this._resLoader = a, t = mgrPart.checkDefaultParts(t || mgrPart.partsWear), mgrPart.addPartResList(t, a, !0), a.setLoadingCallback(a => {
				this.destroyed || a && this.loadParts(t, (t, a) => {
					this.destroyed || (this.baseBody = _G.poolManager.get(GModel, db.MODEL_DB_ID.body), this.baseBody.initBody(), this.baseBody.setParent(this), this.baseBody.on("Enter", this, this._onBodyAnimEnter), this.baseBody.on("Exit", this, this._onBodyAnimExit), this.baseBody.getAnimator().getControllerLayer(0).playOnWake = !1, this.baseFace = _G.poolManager.get(GModel, db.MODEL_DB_ID.face), this.baseBody.addToChild("Guadian_toufa", this.baseFace), this.baseFace.on("Exit", this, this._onFaceAnimExit), this.baseFace.getAnimator().getControllerLayer(0).playOnWake = !1, this.baseFace.initFace(), this._setPartsOnloaded(t, !1), this.isInit = !0, this._animationId && (this.playAnimation(this._animationId, this._loop), this._animationId = null), this._bShowXiuBiao && this.tryShowXiuBiao(), this.refreshFingernails(), e && e(), this.event(Laya.Event.LOADED))
				})
			}), a.loadAll()
		}
		removePart(t) {
			let e = db.get_item_db(t);
			e && this.removePartType(e.gid)
		}
		removePartType(t) {
			let e = this.viewMap[t];
			if (e) {
				let a = e.views;
				for (let t = 0; t < a.length; t++) {
					let e = a[t];
					e.clear(), _G.pool.put(e), Logger.debug(`移除部件: ${e.viewId}`)
				}
				delete this.viewMap[t]
			}
		}
		clearAll(t) {
			let e = this.viewMap;
			Tools.forEachMap(e, function(a, i) {
				if (~t.indexOf(i.partId))
					for (let t = 0; t < i.views.length; t++) {
						i.views[t].clearMaterialMask()
					} else {
						for (let t = 0; t < i.views.length; t++) {
							let e = i.views[t];
							e.clear(), _G.pool.put(e)
						}
						delete e[a]
					}
			})
		}
		setParts(t, e, a, i = !1) {
			this.isInit ? this.loadParts(t, (t, s) => {
				if (i) {
					this.clearAll(t);
					for (let t = 0; t < s.length; t++) this.removePartType(s[t])
				}
				this._setPartsOnloaded(t, e), a && a()
			}) : Logger.error("Avatar尚未加载完成.")
		}
		setPart(t, e) {
			this.setParts([t], e)
		}
		loadParts(t, e) {
			this._resLoader && (this._resLoader.dispose(), this._resLoader = null), mgrPanel.openPanelWithSingleton(PanelWait);
			let a, i = new ResLoader;
			this._resLoader = i;
			let s = [];
			if (t instanceof Array) a = t;
			else {
				a = [];
				let e = Object.keys(t);
				for (let i = 0; i < e.length; i++) t[e[i]] ? a.push(t[e[i]]) : s.push(parseInt(e[i]))
			}
			mgrPart.addPartResList(a, i), a.sort(function(t, e) {
				let a = db.get_item_db(t).viewList,
					i = db.get_item_db(e).viewList,
					s = db.get_model_db(a[0]),
					n = db.get_model_db(i[0]);
				return s.type == n.type ? s.id > n.id ? 1 : -1 : 0 == s.type ? -1 : 1
			}), i.setLoadingCallback(t => {
				this._resLoader.dispose(), this._resLoader = null, _G.sendMsg(BASE_MSG.RES_LOAD_END), t && (mgrSzz.setLoadedParts(a), e(a, s))
			}), i.loadAll()
		}
		_setPartsOnloaded(t, e) {
			for (var a = 0; a < t.length; a++) this._setPartOnloaded(t[a]);
			e && this._playAutoAnim(t)
		}
		_setPartOnloaded(t) {
			let e = db.get_item_db(t),
				a = e.gid,
				i = this.viewMap[a];
			if (!i || i.partId != t) {
				i && this.removePart(i.partId);
				let s = [];
				i = {
					partId: t,
					views: s
				}, this.viewMap[a] = i;
				let n = e.viewList;
				for (let t = 0; t < n.length; t++) {
					let e = _G.pool.get(GView);
					e.create(a, n[t], this), s.push(e)
				}
			}
		}
		_playAutoAnim(t) {
			if (t)
				for (var e = 0; e < t.length; e++) {
					var a = db.get_item_db(t[0]),
						i = db.get_part_type_db(a.gid).changeAnimId;
					if (i) {
						this.playAnimation(i, !1, MODEL_ANIM.MAIN_IDLE);
						break
					}
				} else this.playAnimation(MODEL_ANIM.IDLE1)
		}
		playIdle() {
			if (this.isInit) {
				let t = this.baseBody.lastAnimationId;
				switch (t) {
					case MODEL_ANIM.IDLE1:
						t = MODEL_ANIM.IDLE_T1;
						break;
					case MODEL_ANIM.IDLE2:
						t = MODEL_ANIM.IDLE_T2;
						break;
					default:
						t = Math.random() > .5 ? MODEL_ANIM.IDLE_T1 : MODEL_ANIM.IDLE_T2
				}
				t = MODEL_ANIM.MAIN_IDLE, this.playAnimation(t, !1)
			} else this._loop = !1, this._animationId = MODEL_ANIM.MAIN_IDLE
		}
		playHuDong() {
			if (this._bHuDongAnim) return;
			let t;
			switch (this._bHuDongAnim = !0, this._hudongIdx = (this._hudongIdx + Mathf.random(2)) % 3, this._hudongIdx) {
				case 0:
					t = MODEL_ANIM.MAIN_HUDONG1;
					break;
				case 1:
					t = MODEL_ANIM.MAIN_HUDONG2;
					break;
				case 2:
					t = MODEL_ANIM.MAIN_HUDONG3
			}
			this.playAnimation(t, !1, MODEL_ANIM.MAIN_IDLE)
		}
		playPiJuan(t = !0) {
			if (this._bHuDongAnim) return;
			if (this._bHuDongAnim = !0, t) var e = Mathf.arrCircleRandom(RoleAvatar.pijuanAnimWeight);
			else e = 0;
			let a;
			switch (e) {
				case 0:
					a = MODEL_ANIM.PIJUAN01;
					break;
				case 1:
					a = MODEL_ANIM.PIJUAN02;
					break;
				case 2:
					a = MODEL_ANIM.PIJUAN03
			}
			this.playAnimation(a, !1, MODEL_ANIM.PIJUAN_IDLE)
		}
		playBodyAnim(t, e, a) {
			this.baseBody.playAnim(t, e, a), this.clearAllTimer()
		}
		stopAnimation() {
			this.clearAllTimer()
		}
		playAnimation(t, e, a, i) {
			if (this._loop = e, !this.isInit) return this._animationId = t, !1;
			if (this.baseBody.curAnimationId == t) return;
			if (this.clearAllTimer(), Logger.debug(`RoleAvatar playAnimation: ${t}`), a) {
				let e = [t, a];
				this.baseBody.playAnims(i, e, !1)
			} else this.baseBody.playAnim(t, i, e);
			let s = db.get_animation_face_db_map()[t];
			return s && s.faceAnims.length > 0 && (this._faceAnimDb = s, this._syncFaceAnim(e)), !0
		}
		playAnimations(t, e, a) {
			if (!t) return !1;
			if (this._loop = e, !this.isInit) return this._animationId = t[0], !1;
			if (this.baseBody.curAnimationId == t[0]) return;
			this.clearAllTimer(), Logger.debug(`RoleAvatar playAnimations: ${t.join(",")}`);
			let i = t[0];
			this.baseBody.playAnims(a, t, e);
			let s = db.get_animation_face_db_map()[i];
			return s && s.faceAnims.length > 0 && (this._faceAnimDb = s, this._syncFaceAnim(e)), !0
		}
		tryShowXiuBiao(t = !1) {
			if (!this.isInit) return void(this._bShowXiuBiao = !0);
			let e = mgrClassRoom.getXiuBiaoModelData() || {},
				a = e.bYouXiu,
				i = e.yxModelId,
				s = e.wxModelId;
			t && (this.xiubiao_wuxiu && (_G.poolManager.put(this.xiubiao_wuxiu), this.xiubiao_wuxiu = null), this.xiubiao_xiuzi && (_G.poolManager.put(this.xiubiao_xiuzi), this.xiubiao_xiuzi = null)), a && i && !this.xiubiao_xiuzi ? (this.xiubiao_xiuzi = _G.poolManager.get(GModel, i), this.baseBody.addToChild("Guadian_zuobi1", this.xiubiao_xiuzi)) : a || !s || this.xiubiao_wuxiu || (this.xiubiao_wuxiu = _G.poolManager.get(GModel, s), this.baseBody.addToChild("Guadian_zuobi1", this.xiubiao_wuxiu)), a ? (this.xiubiao_xiuzi && this.xiubiao_xiuzi.show(), this.xiubiao_wuxiu && this.xiubiao_wuxiu.hide()) : (this.xiubiao_xiuzi && this.xiubiao_xiuzi.hide(), this.xiubiao_wuxiu && this.xiubiao_wuxiu.show())
		}
		hideXiuBiao() {
			this.xiubiao_wuxiu && this.xiubiao_wuxiu.hide(), this.xiubiao_xiuzi && this.xiubiao_xiuzi.hide()
		}
		refreshFingernails() {
			if (!this.isInit) return;
			let t = mgrGame.getUsedManicureStageData();
			if (t) {
				let e = db.get_manicure_model_db_map();
				for (let a in e) {
					let i = this.fingernails[e[a].id];
					if (!i) {
						let t = db.get_model_db(e[a].modelId);
						i = _G.poolManager.get(GModel, e[a].modelId), this.baseBody.addToChild(t.attachNode, i), i.initPart(), this.fingernails[e[a].id] = i
					}
					i.callIfLoaded(() => {
						mgrRes.loadTexture2D(t.modelMaps[e[a].modelId], t => {
							i.sharedMaterial.albedoTexture = t
						})
					})
				}
			}
		}
		get curBodyAnim() {
			return this.baseBody.curAnimationId
		}
		get lastBodyAnim() {
			return this.baseBody.lastAnimationId
		}
		_syncFaceAnim(t) {
			let e = this._faceAnimDb;
			if (e) {
				e.faceAnims.length;
				let a = e.faceAnims[Mathf.random(e.faceAnims.length) - 1];
				this.playFaceAnim(a, .1, t)
			}
		}
		clearAllTimer() {
			Laya.timer.clearAll(this)
		}
		playFaceAnim(t, e, a) {
			Logger.debug("play face anim:", t), this.clearAllTimer(), this.baseFace.playAnim(t, e, a)
		}
		get curFaceAnim() {
			return this.baseFace.curAnimationId
		}
		get lastFaceAnim() {
			return this.baseFace.lastAnimationId
		}
		playFaceAnims(t, e, a, i) {
			this.baseFace.playAnims(a, [t, e], i), this._faceAnimDb = null, this.clearAllTimer()
		}
		playZaYang() {
			this.baseFace.playAnim(MODEL_ANIM.FACE_ZHAYAN, 0, !1)
		}
		_onBodyAnimEnter(t) {
			this.destroyed || this.event("Enter", t)
		}
		_onBodyAnimExit(t) {
			if (!this.destroyed)
				if (this._bHuDongAnim = !1, t == this.lastBodyAnim) {
					switch (t) {
						case MODEL_ANIM.IDLE1:
						case MODEL_ANIM.IDLE2:
							this.playIdle();
							break;
						case MODEL_ANIM.IDLE_T1:
							this.playAnimation(MODEL_ANIM.IDLE2);
							break;
						case MODEL_ANIM.IDLE_T2:
							this.playAnimation(MODEL_ANIM.IDLE1);
							break;
						case MODEL_ANIM.LAOYU_IDLE:
							this.baseBody.playAnim(MODEL_ANIM.LAOYU_IDLE, 0, !1), this.lastFaceAnim != MODEL_ANIM.FACE_ZHAYAN && Laya.timer.once(Mathf.random(1800), this, this.playZaYang);
							break;
						case MODEL_ANIM.MAIN_IDLE:
							this.baseBody.playAnim(MODEL_ANIM.MAIN_IDLE, 0, !1), this.lastFaceAnim != MODEL_ANIM.FACE_ZHAYAN && Laya.timer.once(Mathf.random(1500), this, this.playZaYang);
							break;
						case MODEL_ANIM.HUFU_IDLE:
							this.baseBody.playAnim(MODEL_ANIM.HUFU_IDLE, 1, !1), this.lastFaceAnim != MODEL_ANIM.FACE_ZHAYAN && Laya.timer.once(Mathf.random(2800), this, this.playZaYang);
							break;
						case MODEL_ANIM.HUFU_ZANTONG1:
						case MODEL_ANIM.HUFU_ZANTONG2:
						case MODEL_ANIM.HUFU_ZANTONG3:
						case MODEL_ANIM.HUFU_WANCHENG:
						case MODEL_ANIM.HUFU_ZAMAO_L:
						case MODEL_ANIM.HUFU_ZAMAO_R:
							this.playAnimation(MODEL_ANIM.HUFU_IDLE);
							break;
						case MODEL_ANIM.MAIN_HUDONG1:
						case MODEL_ANIM.MAIN_HUDONG2:
						case MODEL_ANIM.MAIN_HUDONG3:
						case MODEL_ANIM.LAJI_CUO:
							break;
						case MODEL_ANIM.PIJUAN01:
						case MODEL_ANIM.PIJUAN02:
						case MODEL_ANIM.PIJUAN03:
							Laya.timer.once(Mathf.random(3e3, 6e3), this, () => {
								this.playPiJuan()
							});
							break;
						case MODEL_ANIM.PIJUAN_IDLE:
							break;
						case MODEL_ANIM.ZJZ:
						case MODEL_ANIM.SHOW01:
							this.playIdle()
					}
					this.event("Exit", t)
				} else this.event("Exit", t)
		}
		_onFaceAnimExit(t) {
			if (!this.destroyed && t == this.lastFaceAnim) {
				if (this._faceAnimDb) {
					let t = this._faceAnimDb.deltaTime;
					if (t) return void Laya.timer.once(Mathf.random(500 * t, 1500 * t), this, this._syncFaceAnim);
					this._faceAnimDb = null
				}
				switch (t) {
					case MODEL_ANIM.FACE_ZHAYAN:
						this.baseFace.playAnim(MODEL_ANIM.FACE_IDLE01, .3, !1);
						break;
					case MODEL_ANIM.FACE_IDLE02:
						this.baseFace.playAnim(MODEL_ANIM.FACE_IDLE01)
				}
			}
		}
		pauseAnim() {
			this.isInit && (this.baseFace.getAnimator().speed = 0, this.baseBody.getAnimator().speed = 0)
		}
		resumeAnim() {
			this.isInit && (this.baseFace.getAnimator().speed = 1, this.baseBody.getAnimator().speed = 1)
		}
		getPartByType(t) {
			return this.viewMap[t]
		}
		getModelByModelId(t) {
			for (var e in this.viewMap) {
				var a = this.viewMap[e];
				if (a)
					for (let e = 0; e < a.views.length; e++)
						if (a.views[e].viewId == t) return a.views[e].model
			}
			return null
		}
		getWearParts() {
			let t = {};
			for (var e in this.viewMap) {
				var a = this.viewMap[e];
				a && (t[e] = a.partId)
			}
			return t
		}
		getView(t) {
			for (const a in this.viewMap) {
				var e = this.viewMap[a];
				if (e)
					for (let a = 0; a < e.views.length; a++)
						if (e.views[a].viewId == t) return e.views[a]
			}
			return null
		}
		debug_add_model(t, e) {
			let a = db.get_model_db(t);
			mgrRes.loadRes(a.resPath, RES_TYPE.PREFAB3D, () => {
				for (var i in this.viewMap) {
					var s = this.viewMap[i];
					if (s)
						for (let o = 0; o < s.views.length; o++) {
							var n = s.views[o];
							if (n.viewDb.editType == a.editType) return n.clear(), n.create(parseInt(i), t, this), void(e && e(n.model))
						}
				}
				let o;
				Tools.forEachMap(db.get_item_db_map(), function(e, a) {
					if (~a.viewList.indexOf(t)) return o = e, !0
				}), o && this.setParts([o], !1, () => {
					let a = this.getModelByModelId(t);
					e && e(a)
				})
			})
		}
		clearJingZi() {
			this.jingZi && (_G.poolManager.put(this.jingZi), this.jingZi = null, this.jingziPlayer.dispose(), this.jingziPlayer = null)
		}
		playJingZi() {
			if (!this.jingZi) {
				this.jingZi = _G.poolManager.get(GModel, db.MODEL_DB_ID.jingzi), this.jingziPlayer = new AnimatorFixedPlayer;
				let t = () => {
					RoleAvatar.jingziLoaded = !0, this.destroyed || (this.jingZi.initPaint(), this.jingZi.hide(), this.baseBody.callIfLoaded(() => {
						this.jingZi.setParent(this.baseBody.findChild("Guadian_jingzi"))
					}), this.jingziPlayer.addModelAnim(this.baseBody, MODEL_ANIM.ZJZ), this.jingziPlayer.addModelAnim(this.baseFace, MODEL_ANIM.FACE_ZJZ), this.jingziPlayer.addTimeCallback(8 / 150, () => {
						this.jingZi.show(), this.jingZi.callIfLoaded(() => {
							this.jingZi.sharedMaterial.playDissolveIn(.5)
						})
					}), this.jingziPlayer.addTimeCallback(143 / 150, () => {
						this.jingZi.callIfLoaded(() => {
							this.jingZi.sharedMaterial.playDissolveOut(.5)
						})
					}), this.jingziPlayer.addTimeCallback(1, () => {
						this.playAnimation(MODEL_ANIM.ZJZ, !1), this.playIdle()
					}))
				};
				RoleAvatar.jingziLoaded ? t() : mgrRes.loadRes(db.get_animation_db(MODEL_ANIM.ZJZ).path, RES_TYPE.ANIMATIONCLIP, () => {
					mgrRes.loadRes(db.get_animation_db(MODEL_ANIM.FACE_ZJZ).path, RES_TYPE.ANIMATIONCLIP, t)
				})
			}
			RoleAvatar.jingziLoaded ? this.jingziPlayer.play() : this.playIdle()
		}
		stopJingZi() {
			this.jingziPlayer && (this.jingziPlayer.stop(), this.jingZi.hide())
		}
		playShowXiuBiao() {
			this.playAnimation(MODEL_ANIM.MAIN_XIUBIAO, !1, MODEL_ANIM.MAIN_IDLE)
		}
		playWantXiuBiao() {
			this.playAnimation(MODEL_ANIM.MAIN_XIUBIAO, !1, MODEL_ANIM.MAIN_IDLE)
		}
		playWantZhiJia() {
			let t = MODEL_ANIM.MAIN_MEIJIA_SHOW2;
			this.playAnimation(t, !1, MODEL_ANIM.MAIN_IDLE), mgrSound.playTalk("mj_04")
		}
		playShowZhiJia() {
			let t = MODEL_ANIM.MAIN_MEIJIA_SHOW1;
			this.playAnimation(t, !1, MODEL_ANIM.MAIN_IDLE), mgrSound.playTalk("mj_03")
		}
		clearHuDie() {
			this.huDie && (this.huDie.off("Exit", this, this.onHuDieAnimFinish), _G.poolManager.put(this.huDie), this.huDie = null)
		}
		playHuDie() {
			this.huDie ? this.huDie.show() : (this.huDie = _G.poolManager.get(GModel, db.MODEL_DB_ID.hudie), this.huDie.setParent(this), this.huDie.on("Exit", this, this.onHuDieAnimFinish), this.huDie.setPosition(0, 0, 0)), this.playAnimation(MODEL_ANIM.SHOW01, !1), this.huDie.playAnim(MODEL_ANIM.HUDIE_SHOW, 0, !1)
		}
		onHuDieAnimFinish(t) {
			this.huDie && this.huDie.hide()
		}
		stopHuDie() {
			this.huDie && this.huDie.hide()
		}
	}
	RoleAvatar.pijuanAnimWeight = [5, 0, 3], RoleAvatar.jingziLoaded = !1;
	class PanelRoleLvupShow extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "", this._exportNodeInfo = {}
		}
		static openPanel(t) {
			let e = new ResLoader;
			e.add("res/ui/bg/dream_bg2.jpg", RES_TYPE.IMAGE), e.add(db.get_animation_db(MODEL_ANIM.SHENGJI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_SHENGJI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_effect_db("143").res, RES_TYPE.PREFAB3D), e.add(db.get_effect_db("136").res, RES_TYPE.PREFAB3D), mgrAlert.openWait(e, () => {
				mgrPanel.openPanel(PanelRoleLvupShow, t)
			})
		}
		create(t) {
			t && t(!0);
			let e = (new Laya.Sprite).size(_G.canvasFitWidth, _G.canvasFitHeight),
				a = e.addChild(new Laya.Image);
			a.centerX = 0, a.centerY = 0, a.skin = "res/ui/bg/dream_bg2.jpg", this.heart = e.addChild(new Laya.Sprite).loadImage("res/ui/pnl_main/lv_bg.png").pivot(53, 55).pos(_G.canvasFitWidth / 2, 100), this.heart.addChild(new Laya.Sprite).loadImage("res/ui/pnl_main/lv_bar.png").pos(6, 28, !0), this.level = this.heart.addChild(new Laya.Label), this.level.anchorX = .5, this.level.pos(55, 53), this.level.fontSize = 24, this.level.color = "#ffffff", this.level.strokeColor = "#ff1cc2", this.level.stroke = 2, this.level.text = mgrGame.getRoleLevel() - 1 + mgrI18n.getText("panelRoleLvupShow.1"), this.createFromNode(e)
		}
		buildUi() {
			this.createScene3DBack(1, 30), this.camera.transform.localPosition = new Laya.Vector3(0, 1.29, 4.12), this.camera.transform.localRotationEuler = new Laya.Vector3(-4, 0, 0), this.avatar = new RoleAvatar, this.scene3DBack.addChild(this.avatar), this.effect = _G.poolManager.get(Particle, "143"), this.effect.setParent(this.camera), this.effect.play(), this.effect2 = _G.poolManager.get(Particle, "136"), this.effect2.setParent(this.avatar.baseBody.findChild("Guadian_handr")), this.effect2.play(), this.avatar.playAnimation(MODEL_ANIM.SHENGJI, !1), this.avatar.once("Exit", this, this.onAnimFinish)
		}
		dispose() {
			this.effect2 && _G.poolManager.put(this.effect2), this.effect && _G.poolManager.put(this.effect), this.avatar && this.avatar.destroy(), super.dispose()
		}
		onAnimFinish(t) {
			this.destroyed || cc.tween(this.heart).to(.2, cc.PROP.SCALE0).call(() => {
				this.level.text = mgrGame.getRoleLevel() + mgrI18n.getText("panelRoleLvupShow.1")
			}).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).delay(.5).call(() => {
				this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelRoleLvup, this.context)
			}).start()
		}
	}
	const KEY_PREVIEW_DATA = "KEY_PREVIEW_DATA",
		SHARE_AWARD_SUIT_ID = "33",
		DANCE_ANSWER_ANIM_ID = "kongquewu-kongquewu",
		DANCE_UNLOCK_CONTRACT_IDX = 9,
		CLASS_UNLOCK_CONTRACT_IDX = 10,
		CLASS_UNLOCK_ROLE_ID = 10,
		TEST_ROLE_ID = "r27",
		ROLE_TEST_UNLOCK_CONTRACT_IDXS = [7, 8],
		SHOE_UNLOCK_CONTRACT_IDX = 11;
	class mgrGame extends _mgrBase {
		static onload() {
			BaseFacade.mSwitch.dailyActive && BaseFacade.mItem.setItem("1010", 3), this.initRole(), this.initRank(), this.initDance(), this.initManicure()
		}
		static start() {
			BaseFacade.mSwitch.dailyActive && (this.resetLotteryCount(), this.resetOpenReview(), FileRecord.setData("notice_opened", !1), FileRecord.setData("findme_opened", !1), FileRecord.setData("SHARE_AWARD_COUNT", 0), FileRecord.setData("VIDEO_SHARE_AWARD_COUNT", 0), FileRecord.setData("RANK_TIP_SHOW_LAST_TIME", 0));
			let t = new Date,
				e = FileRecord.getData("SUBSCRIBE_OUT_TIME") || 0;
			(!e || t.getTime() > e) && FileRecord.setData("SUBSCRIBE_COUNT", 1), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				[BASE_MSG.UP_STATE_CHANGE]: this.onMsgUpStateChange.bind(this),
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this),
				GUIDE_SKIP: this.onMsgGuideSkip.bind(this),
				[BASE_MSG.SDK_SHARE_SUC]: this.onMsgShareSuc.bind(this),
				[BASE_MSG.SDK_SHARE_FAIL]: this.onMsgShareFail.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onMsgVideoShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_FAIL]: this.onMsgShareFail.bind(this),
				[BASE_MSG.MSG_ON_ADD_SUBSCRIBE_RESULT]: this.onMsgSdkAddSubscribeResult.bind(this)
			})
		}
		static initRank() {
			mgrRank.getPlayerScore(1) < 0 && mgrRank.commit(this.getRoleLevel(), 1)
		}
		static onMsgItemChange(t) {
			"1005" == t.itemId && t.changeCount > 0 && BaseFacade.mUp.lvupAttr("role_level")
		}
		static onMsgUpStateChange(t) {
			if ("role_level" == t.itemId) {
				mgrRank.commit(t.level, 1);
				let e = BaseFacade.mUp.getUpDb(t.itemId, t.level);
				if (this.curRoleUpDb = e, BaseFacade.mItem.setItem("1025", e.playMax), t.level > 1) {
					let t = {
						itemId: e.itemId,
						count: e.itemCount
					};
					BaseFacade.mItem.addItem(t.itemId, t.count, 21), Laya.timer.once(200, this, function() {
						PanelRoleLvupShow.openPanel(t)
					})
				}
			}
		}
		static onMsgCopChange() {
			mgrSdk.h5_channel
		}
		static onMsgGuideSkip() {
			null == this.contractIndex && (this.contractIndex = 1)
		}
		static onMsgShareSuc() {
			this.getShareAward()
		}
		static onMsgShareFail() {}
		static onMsgVideoShareSuc() {
			this.getShareAward(!0)
		}
		static onMsgSdkAddSubscribeResult(t) {
			if (console.log("查看订阅回调", t), !FileRecord.getData("SUBSCRIBE_COUNT")) return;
			[
				["1000", 10],
				["1001", 2e3]
			].forEach(t => {
				let e = t[0],
					a = t[1];
				BaseFacade.mItem.addItem(e, a, null), mgrAlert.alertSingleItem({
					itemId: e,
					count: a
				})
			}), GameStatistics.statisCommonEvent(2505, 1);
			let e = new Date;
			e.setDate(e.getDate() + 1), e.setHours(18), e.setMinutes(0), e.setSeconds(0), e.setMilliseconds(0);
			let a = e.getTime();
			FileRecord.setData("SUBSCRIBE_OUT_TIME", a), FileRecord.setData("SUBSCRIBE_COUNT", 0), _G.sendMsg("SUBSCRIBE_SUCCESS")
		}
		static isSupportSubscribe() {
			return !1
		}
		static isSubScrbeCd() {
			let t = FileRecord.getData("SUBSCRIBE_LAST_SHOW_TIME") || 0;
			return console.log("查看剩余cd", t + db.cop.subscribe_cd - Timer.time), Timer.time > t + db.cop.subscribe_cd && (FileRecord.setData("SUBSCRIBE_LAST_SHOW_TIME", Timer.time), !0)
		}
		static tryOpenPanelRankVideoTips(t, e) {
			return !1
		}
		static tryShowPanelFollow() {
			let t = FileRecord.getData("showPanelFollow"),
				e = Tools.isOneDay(t, Timer.time);
			if (db.cop.isSupportFollowOfficialAccount && 1 == db.cop.b_open_follow && 2 == mgrSdk.followState && !e) {
				mgrSdk.getFollowOfficialAccountState();
				let t = Timer.time;
				FileRecord.setData("showPanelFollow", t), mgrAlert.openPanelLoading(UI_NAME.PanelFollow)
			}
		}
		static tryOpenAdvertisingTips() {
			if (_G.isGuiding) return !1;
			if (!db.cop.alert_hud_prompt_list_v2) return !1;
			let t = [UI_NAME.PanelActiveClass, UI_NAME.PanelActiveTest, UI_NAME.PanelActiveDance, UI_NAME.PanelActiveCp, UI_NAME.PanelActiveCpTestPreview, UI_NAME.PanelActiveDanceNew];
			for (let e = 0; e < db.cop.alert_hud_prompt_list_v2.length; e++) {
				let a = db.cop.alert_hud_prompt_list_v2[e];
				if (null != a && t[a]) {
					let e = this.alertPromptCd[a] || 0,
						i = db.cop.alert_hud_prompt_cds_v2[a] || 0,
						s = db.cop.alert_hud_prompt_ratios_v2[a] || 0;
					if (console.log("宣传图数据", a, "lastTime = ", e + i - Timer.time, "cd = ", i, "ratio = ", s), Timer.time > e + i && Mathf.randomEnable(s)) return console.log("弹出宣传图数据", a), this.alertPromptCd[a] = Timer.time, mgrAlert.openPanelLoading(t[a]), !0
				}
			}
			return console.log("没有宣传图可以弹出"), !1
		}
		static initRole() {
			this.roleData = FileRecord.getData("KEY_ROLE_DATA");
			let t = BaseFacade.mUp.getUpDb("role_level");
			this.curRoleUpDb = t, this.roleData ? (this.roleData.unlockContracts || (this.roleData.unlockContracts = {
				[this.roleData.contract]: !0
			}), 1 == this.roleData.state && (this.roleData.state = 0)) : (this.roleData = {
				contract: null,
				state: 2,
				lastWakupTime: Timer.time,
				unlockContracts: {},
				usedManicureStageData: null
			}, this.saveData(), BaseFacade.mItem.setItem("1025", t.playMax), BaseFacade.mItem.setItem("1024", t.playMax), BaseFacade.mItem.setItem("1022", t.playMax), BaseFacade.mItem.setItem("1020", .5 * t.xinQingMax | 0))
		}
		static saveData() {
			FileRecord.setData("KEY_ROLE_DATA", this.roleData)
		}
		static getUsedManicureStageData() {
			return this.roleData.usedManicureStageData
		}
		static setUsedManicureStageData(t) {
			this.roleData.usedManicureStageData = t, this.saveData()
		}
		static get contractIndex() {
			return this.roleData.contract
		}
		static isContractUnlock(t) {
			return this.roleData.unlockContracts[t]
		}
		static contractUnlock(t) {
			this.roleData.unlockContracts[t] = !0
		}
		static set contractIndex(t) {
			this.roleData.contract = t, this.roleData.unlockContracts[t] = !0;
			let e = db.game_cnf["default_parts" + (t + 1)],
				a = {};
			for (let t = 0; t < e.length; t++) a[db.get_item_db(e[t]).gid] = e[t];
			mgrPart.setSelectParts(a), this.saveData()
		}
		static set roleState(t) {
			switch (this.roleData.state = t, t) {
				case 1:
				case 0:
					break;
				case 2:
				case 3:
					this.roleData.lastWakupTime = Timer.time
			}
			this.saveData()
		}
		static get roleState() {
			return this.roleData.state
		}
		static isNeedSleep() {
			Timer.time, this.roleData.lastWakupTime
		}
		static get isPiJuan() {
			return BaseFacade.mItem.getItemCount("1020") <= .3 * mgrGame.curRoleUpDb.xinQingMax
		}
		static playRandomAnim(t, e) {
			let a = db.get_ui_role_anim_db_map()[e];
			if (a) {
				var i = a.slice();
				for (let e = i.length - 1; e >= 0; e--) {
					let a = i[e];
					if (!(t[a.animFuncName] instanceof Function)) {
						i.splice(e, 1);
						continue
					}
					if (a.checkFunName && this[a.checkFunName] && !this[a.checkFunName]()) {
						i.splice(e, 1);
						continue
					}
					let s = a.animId || a.animFuncName;
					if (a.cd && this.getPanelMainRoleAnimLastPlayTime(s) + a.cd >= Timer.time) {
						console.warn("PanelMain cd中:", s), i.splice(e, 1);
						continue
					}
					let n = Tools.calcWheelTarget(i, "weight");
					n && (n.animId ? t.playAnimation(n.animId, !1, MODEL_ANIM.MAIN_IDLE) : n.animFuncName && t[n.animFuncName] && t[n.animFuncName](), n.soundId && mgrSound.playSound(n.soundId), mgrGame.markPanelMainRoleAnimPlayed(s))
				}
			}
		}
		static tryEnterMain(t) {
			mgrPanel.findViewByName(UI_NAME.PanelMain) ? mgrPanel.openPanelWithSingleton(UI_NAME.PanelMain, null, t) : mgrAlert.openGameLoading(UI_NAME.PanelMain, null, t)
		}
		static getPanelMainRoleAnimLastPlayTime(t) {
			return this.panelMainLastPlayAnimTimeLog[t] || 0
		}
		static markPanelMainRoleAnimPlayed(t) {
			this.panelMainLastPlayAnimTimeLog[t] = Timer.time
		}
		static checkShowZhiJia() {
			return !!this.getUsedManicureStageData()
		}
		static checkWantXiuBiao() {
			let t = null,
				e = db.get_class_room_role_db_map();
			for (let a in e) {
				let i = e[a];
				if (i && i.contractIdx == this.contractIndex) {
					t = i.id;
					break
				}
			}
			return !!t
		}
		static checkShowXiuBiao() {
			let t = null,
				e = db.get_class_room_role_db_map();
			for (let a in e) {
				let i = e[a];
				if (i && i.contractIdx == this.contractIndex) {
					t = i.id;
					break
				}
			}
			return !!(t && mgrClassRoom.getRoleLevel(t) >= 2)
		}
		static getRoleLevel() {
			return BaseFacade.mUp.getLevel("role_level")
		}
		static getRoleProgress() {
			return BaseFacade.mUp.isMax("role_level") ? 1 : BaseFacade.mItem.getItemCount("1005") / BaseFacade.mUp.getUpDb("role_level").reqCnt1
		}
		static resetLotteryCount() {
			FileRecord.setData("free_lottery", !1)
		}
		static get isFreeLottery() {
			return !FileRecord.getData("free_lottery")
		}
		static setLottery() {
			FileRecord.setData("free_lottery", !0)
		}
		static resetOpenReview() {
			let t = FileRecord.getData(KEY_PREVIEW_DATA) || {
				enabled: !0,
				today: !0
			};
			t.today = !0, FileRecord.setData(KEY_PREVIEW_DATA, t)
		}
		static tryOpenReview() {
			if (Laya.Browser.onLayaRuntime && Laya.Browser.onIOS && db.cop.pop_review_ratio) {
				let t = FileRecord.getData(KEY_PREVIEW_DATA) || {};
				if (t.enabled && t.today) return t.today = !1, FileRecord.setData(KEY_PREVIEW_DATA, t), mgrAlert.alertDialog("喜欢我们的游戏吗？喜欢就给游戏5星好评吧！", "温馨提示", function() {
					t.enabled = !1, FileRecord.setData(KEY_PREVIEW_DATA, t), mgrSdk.openReview()
				}, function() {}, "好的", "以后"), !0
			}
			return !1
		}
		static get shareAwardCount() {
			return FileRecord.getData("SHARE_AWARD_COUNT") || 0
		}
		static set shareAwardCount(t) {
			FileRecord.setData("SHARE_AWARD_COUNT", t)
		}
		static get videoShareAwardCount() {
			return FileRecord.getData("VIDEO_SHARE_AWARD_COUNT") || 0
		}
		static set videoShareAwardCount(t) {
			FileRecord.setData("VIDEO_SHARE_AWARD_COUNT", t)
		}
		static getShareAward(t = !1) {
			if (db.get_suit_db(SHARE_AWARD_SUIT_ID) && t && (this.videoShareAwardCount < 1 || mgrAdv.checkActive("share_part")) && !mgrSuit.hasSuit(SHARE_AWARD_SUIT_ID)) mgrPanel.openPanel(UI_NAME.PanelVideoShareReward);
			else if (this.shareAwardCount < 3) {
				let t = {
					itemId: "1000",
					count: 10
				};
				mgrAlert.addAndAlert(t, 43), this.shareAwardCount++
			}
		}
		static tryGetShareAward() {
			if (this.shareAwardCount < 3) {
				let t = {
					itemId: "1000",
					count: 10
				};
				mgrAlert.addAndAlert(t, 43), this.shareAwardCount++
			}
		}
		static tryGetSharePartAward(t = !1) {
			let e = SHARE_AWARD_SUIT_ID,
				a = db.get_suit_db(e);
			if (!a) return void console.warn("套装不存在 suitId = ", e);
			let i = mgrSuit.hasSuit(e),
				s = 0;
			if ((this.videoShareAwardCount < 1 || t) && !i) {
				let e = null,
					i = a.parts;
				for (let t = 0; t < i.length; t++) {
					if (!BaseFacade.mItem.isOwned(i[t])) {
						e = i[t];
						break
					}
					s++
				}
				if (e) {
					let a = {
						itemId: e,
						count: 1
					};
					mgrAlert.addAndAlert(a, 43), this.videoShareAwardCount++, GameStatistics.statisCommonEvent(9308 + s, t ? 2 : 1)
				}
			}
		}
		static initDance() {
			this.danceTestedData = FileRecord.getData("DANCE_TESTED_DATA") || {}
		}
		static checkDanceIsTested(t) {
			return !!this.danceTestedData[t]
		}
		static markDanceTested(t) {
			this.danceTestedData[t] = !0, FileRecord.setData("DANCE_TESTED_DATA", this.danceTestedData)
		}
		static addRecordDanceCount(t) {
			let e = FileRecord.getData("DANCE_COUNT_DATA") || {};
			e[t] ? e[t]++ : e[t] = 1, FileRecord.setData("DANCE_COUNT_DATA", e), _G.sendMsg("DANCE_COUNT_CHANGED")
		}
		static getRecordDanceCount(t) {
			return (FileRecord.getData("DANCE_COUNT_DATA") || {})[t] || 0
		}
		static addRecordAdDanceAnswer(t) {
			let e = FileRecord.getData("AD_DANCE_ANSWER_DATA") || {};
			e[t] = !0, FileRecord.setData("AD_DANCE_ANSWER_DATA", e)
		}
		static getRecordAdDanceAnswer(t) {
			return (FileRecord.getData("AD_DANCE_ANSWER_DATA") || {})[t] || !1
		}
		static initManicure() {
			if (!FileRecord.getData("MANICURE_STAGE_DATA")) {
				let t = [],
					e = db.get_manicure_stage_db_map();
				for (let a in e) e[a] && t.push(e[a]);
				let a = t[Mathf.random(t.length) - 1];
				FileRecord.setData("MANICURE_STAGE_DATA", a)
			}
		}
		static debugInfo() {}
	}
	mgrGame.panelMainLastPlayAnimTimeLog = {}, mgrGame.alertPromptCd = {}, mgrGame.danceTestedData = {};
	class mgrOutside extends _mgrBase {
		static onload() {}
		static getGameLevel(t) {
			let e = mgrGame.getRoleLevel(),
				a = Mathf.random(t.length);
			for (var i = 0; i < t.length; i++) {
				var s = (i + a) % t.length,
					n = t[s];
				if (e >= n.levelLimit[0] && e <= n.levelLimit[1]) break
			}
			return s
		}
		static getGameAwardCount(t) {
			return t >= 150 ? 3 : t >= 100 ? 2 : t >= 50 ? 1 : 0
		}
		static getGameAward(t, e) {
			let a = [],
				i = this.getGameAwardCount(e);
			for (let e = 0; e < i; e++) {
				let i = t.items[e];
				a.push({
					itemId: i[0],
					count: i[1]
				})
			}
			return a
		}
		static checkGamePlayable(t, e, a, i) {
			if (BaseFacade.mItem.enoughItem("1020", t))
				if (Timer.time >= this.timeData[e]) {
					mgrAdv.checkActive("one_click_interact") ? (mgrAdv.statisVideoShow("one_click_interact"), mgrAlert.alertAdvDialog(String.format(mgrI18n.getText("mgrOutside.1"), a.toString()), mgrI18n.getText("schoolYearbookItem.2"), () => {
						mgrAdv.statisVideoClick("one_click_interact"), mgrAdv.dispatchAdv("one_click_interact", {
							gameName: a
						}, !0)
					}, mgrI18n.getText("mgrOutside.2"), () => {
						mgrAlert.alertDialog(`${mgrI18n.getText("mgrOutside.3")}${a}?`, mgrI18n.getText("schoolYearbookItem.2"), () => {
							i && i()
						}, function() {})
					})) : mgrAlert.alertDialog(`${mgrI18n.getText("mgrOutside.3")}${a}?`, mgrI18n.getText("schoolYearbookItem.2"), () => {
						i && i()
					}, function() {})
				} else mgrAlert.alertDialog(mgrI18n.getText("mgrOutside.4"));
			else mgrAlert.alertDialog(mgrI18n.getText("mgrOutside.5"))
		}
		static checkLingGanPlayable(t) {
			this.checkGamePlayable(db.game_cnf.butterfly_cost[1], "lingGan", mgrI18n.getText("panelOutside.4"), t)
		}
		static get leftLingGanTime() {
			return this.timeData.lingGan - Timer.time
		}
		static loadLingGanRes(t) {
			this.lingGanScore = 0;
			let e = new ResLoader;
			e.add("res/texture/sf_noise_clouds_01.png", RES_TYPE.TEXTURE2D), e.add(db.get_model_db("mofabang").resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.hudie).resPath, RES_TYPE.PREFAB3D), e.add(db.get_animation_db("mozhang_anim-mz_idle").path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db("mozhang_anim-mz_atk01").path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db("mozhang_anim-mz_atk02").path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.ZHUAN_SHEN).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_effect_db("109").res, RES_TYPE.PREFAB3D), e.add(db.get_effect_db("110").res, RES_TYPE.PREFAB3D), e.add(db.get_effect_db("111").res, RES_TYPE.PREFAB3D), e.add(db.get_effect_db("112").res, RES_TYPE.PREFAB3D), mgrAlert.openWait(e, t)
		}
		static startLingGan() {
			this.lingGanScore = 0, this.curLingGanIndex = this.getGameLevel(db.get_linggan_db_arr()), this.curLingGanDb = db.get_linggan_db(this.curLingGanIndex), BaseFacade.mGoal.commit(ACTION_ID.PLAY_GAME, 1, "linggan"), mgrSdk.tryStartRecord(), GameStatistics.statisOnStageStart(7511)
		}
		static addButterflyScore() {
			this.lingGanScore += this.curLingGanDb.butterflyScore
		}
		static calcSuitShiShangZhi(t) {
			let e = db.get_linggan_db(this.curLingGanIndex),
				a = db.get_suit_db(t).parts,
				i = 0;
			for (let t = a.length - 1; t >= 0; t--) BaseFacade.mItem.isOwned(a[t]) && (i += mgrPart.calcPartScore(a[t], e));
			if (0 == i)
				for (let t = a.length - 1; t >= 0; t--) i += mgrPart.calcPartScore(a[t], e);
			return 0 | i
		}
		static getLingGanSuits(t, e) {
			let a = mgrSuit.getAllSuits();
			for (var i = a.length - 1; i >= 0; i--)
				for (var s = db.get_suit_db(a[i]).parts, n = s.length - 1; n >= 0; n--)
					if (BaseFacade.mItem.isOwned(s[n])) {
						t.push(a[i]), a.splice(i, 1);
						break
					} e.push(...a)
		}
		static finishLingGan(t) {
			if (GameStatistics.statisCommonEvent(3054), GameStatistics.statisOnStageEnd(7511), BaseFacade.mItem.addItem("1005", 5, null), BaseFacade.mItem.subItem("1020", db.game_cnf.butterfly_cost[1], null), this.timeData.lingGan = Timer.time + this.playDeltaTime, t) {
				let t = this.getGameLevel(db.get_linggan_db_arr()),
					e = db.get_linggan_db(t);
				return this.getGameAward(e, 100)
			}
			return this.getGameAward(this.curLingGanDb, this.lingGanScore)
		}
		static checkLaJiPlayable(t) {
			this.checkGamePlayable(db.game_cnf.garbage_cost[1], "laJi", mgrI18n.getText("panelOutside.5"), t)
		}
		static get leftLaJiTime() {
			return this.timeData.laJi - Timer.time
		}
		static loadLajiGame(t) {
			let e = new ResLoader;
			e.add(db.get_animation_db(MODEL_ANIM.LAJI_1).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.LAJI_2).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.LAJI_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.LAJI_CUO).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.LAJI_WANCHENG).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_LAJI_DIU01).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_LAJI_DIU02).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_LAJI_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_LAJI_CUO).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_LAJI_WANCHENG).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_spine_db("lajitong1").skeletonData, RES_TYPE.BUFFER), e.add(db.get_spine_db("lajitong2").skeletonData, RES_TYPE.BUFFER), mgrAlert.openWait(e, t)
		}
		static startLaJi() {
			this.lajiScore = 0, this.curLajiIndex = this.getGameLevel(db.get_laji_level_db_arr()), this.curLajiLevelDb = db.get_laji_level_db(this.curLajiIndex), BaseFacade.mGoal.commit(ACTION_ID.PLAY_GAME, 1, "laji"), mgrSdk.tryStartRecord(), GameStatistics.statisOnStageStart(7512)
		}
		static createLaJi() {
			let t = [],
				e = db.get_laji_db_arr(),
				a = e.length;

			function getLaji(i) {
				let s = Mathf.random(a);
				for (var n = 0; n < a; n++) {
					var o = (n + s) % a;
					if (e[o].bSpe == i) {
						t.push(o);
						break
					}
				}
			}
			for (let t = this.curLajiLevelDb.speLajiCount; t > 0; t--) getLaji(!0);
			for (let t = this.curLajiLevelDb.lajiCount - this.curLajiLevelDb.speLajiCount; t > 0; t--) getLaji(!1);
			return Mathf.shuffle(t), t
		}
		static addLajiScore(t) {
			t.bSpe ? this.lajiScore += this.curLajiLevelDb.speLajiScore : this.lajiScore += this.curLajiLevelDb.lajiScore
		}
		static finishLaJi(t) {
			if (GameStatistics.statisCommonEvent(3043), GameStatistics.statisOnStageEnd(7512), BaseFacade.mItem.addItem("1005", 5, null), BaseFacade.mItem.subItem("1020", db.game_cnf.garbage_cost[1], null), this.timeData.laJi = Timer.time + this.playDeltaTime, t) {
				let t = this.getGameLevel(db.get_laji_level_db_arr()),
					e = db.get_laji_level_db(t);
				return this.getGameAward(e, 100)
			}
			return this.getGameAward(this.curLajiLevelDb, this.lajiScore)
		}
	}
	mgrOutside.timeData = {
		lingGan: 0,
		laJi: 0,
		paiShou: 0,
		cztg: 0
	}, mgrOutside.playDeltaTime = 20, mgrOutside.curLingGanIndex = 0, mgrOutside.lingGanScore = 0, mgrOutside.chooseSuitIndex = 0;
	class mgrSkincare extends _mgrBase {
		static onload() {}
		static checkPlayable(t) {
			if (this.isXinQingFull) mgrAlert.alertDialog(mgrI18n.getText("mgrSkincare.1"));
			else {
				mgrAdv.checkActive("one_click_interact") ? (mgrAdv.statisVideoShow("one_click_interact"), mgrAlert.alertAdvDialog(mgrI18n.getText("mgrSkincare.2"), mgrI18n.getText("schoolYearbookItem.2"), () => {
					mgrAdv.statisVideoClick("one_click_interact"), mgrAdv.dispatchAdv("one_click_interact", {
						gameName: mgrI18n.getText("mgrSkincare.3")
					}, !0)
				}, mgrI18n.getText("mgrOutside.2"), () => {
					mgrAlert.alertDialog(mgrI18n.getText("mgrSkincare.4"), mgrI18n.getText("schoolYearbookItem.2"), () => {
						t && t(), mgrSdk.startRecordVideo()
					}, function() {})
				})) : mgrAlert.alertDialog(mgrI18n.getText("mgrSkincare.4"), mgrI18n.getText("schoolYearbookItem.2"), () => {
					t && t(), mgrSdk.startRecordVideo()
				}, function() {})
			}
		}
		static startSkincare() {
			this.skincareScore = 0;
			let t = mgrOutside.getGameLevel(db.get_skincare_db_arr());
			this.curSkincareDb = db.get_skincare_db(t), mgrSdk.tryStartRecord(), GameStatistics.statisOnStageStart(7508)
		}
		static finishOpt(t) {
			BaseFacade.mItem.subItem(t, 1, null);
			let e = db.get_item_db(t);
			this.skincareScore += DbExt.getSkincareScore(e)
		}
		static finishOptAll(t) {
			BaseFacade.mItem.setItem(t, 0);
			let e = db.get_item_db(t);
			this.skincareScore += DbExt.getSkincareScore(e)
		}
		static finishSkincare(t) {
			GameStatistics.statisOnStageEnd(7508), BaseFacade.mGoal.commit(ACTION_ID.SKINCARE);
			let e = mgrGame.curRoleUpDb.xinQingAddition;
			switch (mgrOutside.getGameAwardCount(t ? 100 : this.skincareScore)) {
				case 3:
					break;
				case 2:
					e *= .75;
					break;
				case 1:
					e *= .5;
					break;
				case 0:
					e = 0
			}
			e |= 0;
			let a = BaseFacade.mItem.getItemCount("1020");
			return a >= mgrGame.curRoleUpDb.xinQingMax ? 0 : (a + e > mgrGame.curRoleUpDb.xinQingMax && (e = mgrGame.curRoleUpDb.xinQingMax - a), BaseFacade.mItem.addItem("1020", e, null), e)
		}
		static get isXinQingFull() {
			return BaseFacade.mItem.getItemCount("1020") >= .7 * mgrGame.curRoleUpDb.xinQingMax
		}
		static getItemPrice(t) {
			let e = mgrGame.curRoleUpDb[t];
			return e || db.get_item_db(t).num1
		}
	}
	class SkincareItem extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/SkincareItem.json", this._exportNodeInfo = {
				cc_normalNode: "Laya.Sprite",
				cc_itemCount: "Laya.Label",
				cc_priceNode: "Laya.Sprite",
				cc_costIcon: "Laya.Sprite",
				cc_costCount: "Laya.Label",
				cc_advNode: "Laya.Sprite",
				cc_score: "Laya.Label"
			}, this.create()
		}
		onCreateComplete() {
			this.addComponent(UIButton), UiHelper.addUIButtonClick(this.resNode, this.onClick.bind(this)), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgItemChange(t) {
			this.itemDb && this.itemDb.id == t.itemId && this.setItem(t.itemId)
		}
		onMsgAdvShowSuc(t) {
			"skincare_item" == t.advName && t.params == this.itemDb.id && (BaseFacade.mItem.addItem(t.params, 1, null), this.setItem(this.itemDb.id), SkincareItem.advCount++, _G.sendMsg("UI_SELECT_OPT_ITEM", {
				itemDb: this.itemDb,
				optType: this.optType,
				item: this
			}))
		}
		setItem(t) {
			if (!this.callable) return this.safeCall(this.setItem, t), this;
			let e = db.get_item_db(t);
			this.itemDb = e, this.resNode.loadImage(e.icon), this.score.text = mgrI18n.getText("skincareItem.1") + "+" + DbExt.getSkincareScore(e);
			var a = BaseFacade.mItem.getItemCount(t);
			if (a > 0) this.normalNode.visible = !0, this.priceNode.visible = !1, this.advNode.visible = !1, this.itemCount.text = a + "", this.resNode.setVisible(!0);
			else switch (e.order) {
				case 0:
				case 1:
					this.normalNode.visible = !1, this.priceNode.visible = !0, this.advNode.visible = !1;
					var i = 0 == e.order ? "1001" : "1000";
					this.costIcon.loadImage(db.get_item_db(i).icon), this._costCount = mgrSkincare.getItemPrice(t), this.costCount.text = this._costCount + "", this._costItem = i;
					break;
				case 2:
					SkincareItem.advCount < 1 && mgrAdv.getActive("skincare_item") ? (this.resNode.setVisible(!0), mgrAdv.statisVideoShow("skincare_item")) : this.resNode.setVisible(!1), this.normalNode.visible = !1, this.priceNode.visible = !1, this.advNode.visible = !0, this._costItem = null
			}
			return this
		}
		setOptType(t) {
			return this.optType = t, this
		}
		getIconPos() {
			return UiHelper.getSelfGlobalPos(this.resNode)
		}
		onClick() {
			_G.isGuiding || BaseFacade.mItem.isOwned(this.itemDb.id) ? _G.sendMsg("UI_SELECT_OPT_ITEM", {
				itemDb: this.itemDb,
				optType: this.optType,
				item: this
			}) : 2 == this.itemDb.order ? (mgrAdv.statisVideoClick("skincare_item"), mgrAdv.dispatchAdv("skincare_item", this.itemDb.id, !0)) : BaseFacade.mItem.subItem(this._costItem, this._costCount, 27) ? (BaseFacade.mItem.addItem(this.itemDb.id, 1, null), this.setItem(this.itemDb.id), _G.sendMsg("UI_SELECT_OPT_ITEM", {
				itemDb: this.itemDb,
				optType: this.optType,
				item: this
			})) : mgrAlert.alertNotEnough(this._costItem)
		}
	}
	SkincareItem.advCount = 0;
	class FillRecoreder {
		constructor(t, e, a = 1) {
			if (this.destroyed = !1, this.checkArr = [], this.fillCount = 0, this.leftFillCount = 0, this.rightFillCount = 0, this.totalCount = 0, this.width = t, this.height = e, a instanceof Array) {
				this.fillData = a, this.scaleX = a.length / t, this.scaleY = a[0].length / e, this.dataWidth = a.length, this.dataHeight = a[0].length;
				for (var i = 0, s = this.dataWidth; i < s; i++)
					for (var n = 0, o = this.dataHeight; n < o; n++) a[i][n] && this.totalCount++
			} else this.scaleX = a, this.scaleY = a, this.dataWidth = Math.floor(t * a), this.dataHeight = Math.floor(e * a), this.totalCount = this.dataWidth * this.dataHeight;
			this.halfWidth = this.dataWidth / 2;
			for (s = 0; s < this.dataWidth; s++) this.checkArr.push(new Array(this.dataHeight))
		}
		dispose() {
			this.destroyed = !0, this.checkArr = null
		}
		fillUV(t, e, a) {
			let i = t.x * this.width,
				s = t.y * this.height;
			this.fill(i, s, e, a)
		}
		fill(t, e, a, i) {
			t = Math.round(t * this.scaleX), e = Math.round(e * this.scaleY), a = Math.ceil(a * this.scaleX), i = Math.ceil(i * this.scaleY);
			let s = Math.max(t - a, 0),
				n = Math.max(e - i, 0),
				o = Math.min(t + a, this.dataWidth),
				r = Math.min(e + i, this.dataHeight);
			for (let t = s; t < o; t++)
				for (let e = n; e < r; e++) this.checkArr[t][e] || (this.checkArr[t][e] = !0, this.fillData ? this.fillData[t][e] && this.onDataChange(t, e) : this.onDataChange(t, e))
		}
		onDataChange(t, e) {
			this.fillCount++, t < this.halfWidth ? this.leftFillCount++ : this.rightFillCount++
		}
		check(t, e) {
			return t = Math.round(t * this.scaleX), e = Math.round(e * this.scaleY), this.checkArr[t][e]
		}
		get percent() {
			return this.fillCount / this.totalCount
		}
		get leftPercent() {
			return this.leftFillCount / (this.totalCount / 2)
		}
		get rightPercet() {
			return this.rightFillCount / (this.totalCount / 2)
		}
	}
	class MeshPicker {
		static pick(t, e, a) {
			let i = e.origin.clone(),
				s = e.direction.clone();
			if (t instanceof Laya.MeshSprite3D) {
				let e = this._temp_mat4;
				t.transform.worldMatrix.invert(e), Laya.Vector3.transformCoordinate(i, e, i), Laya.Vector3.TransformNormal(L, e, L);
				var n = this.getVerts(t)
			} else {
				this.calcSkinnedMeshVerts(t, a);
				n = this.getVertsWorldLocationCache(t)
			}
			let o = t.meshFilter.sharedMesh.subMeshCount,
				r = {};
			for (var l = 0; l < o; l++)
				if (null == a || ~a.indexOf(l))
					for (var c = this.getIndicesInSubMesh(t, l), h = 0, d = c.length; h < d; h += 3) {
						if (this.intersectTriangle(i, s, n[c[h]], n[c[h + 1]], n[c[h + 2]], r)) {
							var _ = c[h],
								g = c[h + 1],
								u = c[h + 2],
								m = this.getUVs(t),
								p = m[_],
								S = m[g],
								b = m[u],
								L = r.u,
								I = r.v,
								A = 1 - L - I,
								E = p.x * A + S.x * L + b.x * I,
								f = p.y * A + S.y * L + b.y * I;
							let e = new Laya.Vector2(E, f);
							return t instanceof Laya.MeshSprite3D && Laya.Vector3.transformCoordinate(r.p, t.transform.worldMatrix, r.p), {
								uv: e,
								point: r.p
							}
						}
						break
					}
			return null
		}
		static pickUVInDistance(t, e, a = .1, i) {
			let s = e.origin.clone(),
				n = e.direction.clone();
			if (t instanceof Laya.MeshSprite3D) {
				let l = this._temp_mat4;
				t.transform.worldMatrix.invert(l), Laya.Vector3.transformCoordinate(s, l, s), Laya.Vector3.TransformNormal(n, l, n);
				var o = this.getMeshNearestVertInfo(t, e, a, i),
					r = this.getVerts(t)
			} else o = this.getSkinnedMeshNearestVertInfo(t, e, a, i), r = this.getVertsWorldLocationCache(t);
			if (o) {
				let e = t.meshFilter.sharedMesh.subMeshCount,
					a = o.index,
					y = {};
				for (var l = 0; l < e; l++)
					if (null == i || ~i.indexOf(l))
						for (var c = this.getIndicesInSubMesh(t, l), h = 0, d = c.length; h < d; h += 3)
							for (var _ = 0; _ < 3; _++)
								if (c[h + _] == a) {
									if (this.intersectTriangle(s, n, r[c[h]], r[c[h + 1]], r[c[h + 2]], y)) {
										var g = c[h],
											u = c[h + 1],
											m = c[h + 2],
											p = this.getUVs(t),
											S = p[g],
											b = p[u],
											L = p[m],
											I = y.u,
											A = y.v,
											E = 1 - I - A,
											f = S.x * E + b.x * I + L.x * A,
											C = S.y * E + b.y * I + L.y * A;
										return new Laya.Vector2(f, C)
									}
									break
								} let T = this.getUVs(t)[a];
				if (T) return T.clone()
			}
		}
		static getMeshNearestVertInfo(t, e, a = .1, i) {
			let s = e.origin.clone(),
				n = e.direction.clone();
			Laya.Vector3.add(s, n, n);
			let o = this._temp_mat4;
			t.transform.worldMatrix.invert(o), Laya.Vector3.transformCoordinate(s, o, s), Laya.Vector3.transformCoordinate(n, o, n);
			let r = t.meshFilter.sharedMesh.subMeshCount;
			var l;
			for (let e = 0; e < r; e++)
				if (null == i || ~i.indexOf(e)) {
					var c = this.getVertsInSubMesh(t, e);
					for (let t = c.length - 1; t >= 0; t--) {
						var h = this.point2line(s, n, c[t].pos);
						h > a || (a = h, l = c[t])
					}
				} if (l) {
				let e = new Laya.Vector3;
				return Laya.Vector3.transformCoordinate(l.pos, t.transform.worldMatrix, e), {
					index: l.index,
					pos: e
				}
			}
		}
		static calcSkinnedMeshVerts(t, e, a = !1) {
			if (!(a || this._lastWorldPosCalcTime <= Date.now())) return;

			function addDataToMatrix(t, e, a, i) {
				for (var s = 0; s < 16; s++) i.elements[s] += t[e + s] * a
			}
			let i = ["x", "y", "z", "w"],
				s = this._temp_mat4;
			var n = this.getBoneIndices(t),
				o = this.getBoneWeights(t),
				r = this.getVerts(t),
				l = this.getVertsWorldLocationCache(t);

			function calcWorldPos(t, e) {
				var a = r[t],
					c = function(t, e) {
						! function(t) {
							for (var e = 0; e < 16; e++) t.elements[e] = 0
						}(s);
						for (var a = n[t], r = o[t], l = 0; l < 4; l++) {
							var c = i[l];
							addDataToMatrix(e, 16 * a[c], r[c], s)
						}
						return s
					}(t, e);
				Laya.Vector3.transformCoordinate(a, c, l[t])
			}
			let c = t.meshFilter.sharedMesh.subMeshCount;
			for (let a = 0; a < c; a++)
				if (null == e || ~e.indexOf(a))
					for (var h = t.meshFilter.sharedMesh.getSubMesh(a)._boneIndicesList, d = t.skinnedMeshRenderer._skinnedData[a], _ = 0; _ < h.length; _++)
						for (var g = this.getSkinnedMeshSubMeshSubVertIndices(t, a, _), u = d[_], m = 0, p = g.length; m < p; m++) {
							calcWorldPos(g[m], u)
						}
			this._lastWorldPosCalcTime = Date.now() + 1e3 * this.skinnedVertsWorldPosCalcDeltaTime
		}
		static getSkinnedMeshNearestVertInfo(t, e, a = .1, i) {
			let s = e.origin.clone(),
				n = e.direction.clone();
			Laya.Vector3.add(s, n, n), this.calcSkinnedMeshVerts(t, i);
			var o = this.getVertsWorldLocationCache(t);
			let r = t.meshFilter.sharedMesh.subMeshCount;
			var l = new Laya.Vector3,
				c = new Laya.Vector3(0, 0, 0),
				h = -1;
			for (let e = 0; e < r; e++)
				if (null == i || ~i.indexOf(e))
					for (var d = t.meshFilter.sharedMesh.getSubMesh(e)._boneIndicesList, _ = 0; _ < d.length; _++)
						for (var g = this.getSkinnedMeshSubMeshSubVertIndices(t, e, _), u = 0, m = g.length; u < m; u++) {
							var p = g[u];
							o[p].cloneTo(l);
							var S = this.point2line(s, n, l);
							S > a || (a = S, h = p, l.cloneTo(c))
						}
			return h < 0 ? null : {
				pos: c,
				index: h
			}
		}
		static getSkinnedMeshSubMeshSubVertIndices(t, e, a) {
			var i = t._all_mesh_vert;
			i || (i = [], t._all_mesh_vert = i);
			var s = i[e];
			if (!s) {
				s = [], i[e] = s;
				let a = t.meshFilter.sharedMesh.getSubMesh(e);
				for (var n = a._boneIndicesList, o = a._subIndexBufferCount, r = this.getIndicesInSubMesh(t, e), l = 0; l < n.length; l++) {
					for (var c = {}, h = 0 == l ? 0 : d, d = h + o[l], _ = h; _ < d; _ += 3) c[r[_]] = !0, c[r[_ + 1]] = !0, c[r[_ + 2]] = !0;
					var g = Object.keys(c),
						u = [];
					for (_ = g.length - 1; _ >= 0; _--) u.push(parseInt(g[_]));
					s[l] = u
				}
			}
			return s[a]
		}
		static getVerts(t) {
			if (t._vert_key) return t._vert_key; {
				let e = [];
				return t.meshFilter.sharedMesh.getPositions(e), t._vert_key = e, e
			}
		}
		static getVertsWorldLocationCache(t) {
			if (t._vert_world_key) return t._vert_world_key; {
				let e = [];
				return t.meshFilter.sharedMesh.getPositions(e), t._vert_world_key = e, e
			}
		}
		static getUVs(t) {
			if (t._uv_key) return t._uv_key; {
				let e = [];
				return t.meshFilter.sharedMesh.getUVs(e), t._uv_key = e, e
			}
		}
		static getBoneIndices(t) {
			if (t._bone_indices) return t._bone_indices; {
				let e = [];
				return t.meshFilter.sharedMesh.getBoneIndices(e), t._bone_indices = e, e
			}
		}
		static getBoneWeights(t) {
			if (t._bone_weights) return t._bone_weights; {
				let e = [];
				return t.meshFilter.sharedMesh.getBoneWeights(e), t._bone_weights = e, e
			}
		}
		static getVertsInSubMesh(t, e) {
			let a = t._vert_group;
			if (a || (a = [], t._vert_group = a), a[e]) return a[e]; {
				let n = this.getVerts(t),
					o = this.getIndicesInSubMesh(t, e),
					r = {};
				for (var i = 0; i < o.length; i++) r[o[i]] = !0;
				let l = Object.keys(r),
					c = [];
				for (i = 0; i < l.length; i++) {
					var s = parseInt(l[i]);
					c.push({
						pos: n[s],
						index: s
					})
				}
				return a[e] = c, c
			}
		}
		static getIndicesInSubMesh(t, e) {
			let a = t._indices_group;
			if (a || (a = [], t._indices_group = a), a[e]) return a[e]; {
				let i = t.meshFilter.sharedMesh.getSubMesh(e).getIndices();
				return a[e] = i, i
			}
		}
		static point2line(t, e, a) {
			let i = Math.sqrt,
				s = Math.pow,
				n = i(s(t.x - e.x, 2) + s(t.y - e.y, 2) + s(t.z - e.z, 2)),
				o = i(s(t.x - a.x, 2) + s(t.y - a.y, 2) + s(t.z - a.z, 2)),
				r = i(s(a.x - e.x, 2) + s(a.y - e.y, 2) + s(a.z - e.z, 2)),
				l = (s(o, 2) + s(n, 2) - s(r, 2)) / (2 * n * o);
			return o * i(1 - s(l, 2))
		}
		static intersectTriangle(t, e, a, i, s, n) {
			let o = 0,
				r = 0,
				l = 0,
				c = this.TEMP_VEC3S[0];
			Laya.Vector3.subtract(i, a, c);
			let h = this.TEMP_VEC3S[1];
			Laya.Vector3.subtract(s, a, h);
			let d = this.TEMP_VEC3S[2];
			Laya.Vector3.cross(e, h, d);
			let _ = Laya.Vector3.dot(c, d),
				g = this.TEMP_VEC3S[3];
			if (_ > 0 ? Laya.Vector3.subtract(t, a, g) : (Laya.Vector3.subtract(a, t, g), _ = -_), _ < 1e-8) return !1;
			if ((r = Laya.Vector3.dot(g, d)) < 0 || r > _) return !1;
			let u = this.TEMP_VEC3S[4];
			if (Laya.Vector3.cross(g, c, u), (l = Laya.Vector3.dot(e, u)) < 0 || r + l > _) return !1;
			if (o = Laya.Vector3.dot(h, u), n) {
				let a = 1 / _;
				o *= a, r *= a, l *= a, n.t = o, n.u = r, n.v = l;
				let i = e.clone();
				Laya.Vector3.scale(i, o, i), Laya.Vector3.add(t, i, i), n.p = i
			}
			return !0
		}
		static debugSkinnedMesh(t, e, a) {
			this.calcSkinnedMeshVerts(t, a, !0);
			let i = t.meshFilter.sharedMesh.subMeshCount;
			this.temp_lineSprite && !this.temp_lineSprite.destroyed && this.temp_lineSprite.destroy(), this.temp_lineSprite = t.scene.addChild(new Laya.PixelLineSprite3D(65536));
			let s = this.getVertsWorldLocationCache(t);
			for (let u = 0; u < i; u++)
				if (null == a || ~a.indexOf(u))
					for (var n = t.meshFilter.sharedMesh.getSubMesh(u), o = n._boneIndicesList, r = t.skinnedMeshRenderer._skinnedData[u], l = n._subIndexBufferCount, c = this.getIndicesInSubMesh(t, u), h = 0; h < o.length; h++) {
						r[h];
						for (var d = 0 == h ? 0 : _, _ = d + l[h], g = d; g < _; g += 3) s[c[g]].cloneTo(this.temp_pos1), s[c[g + 1]].cloneTo(this.temp_pos2), s[c[g + 2]].cloneTo(this.temp_pos3), this.temp_lineSprite.addLine(this.temp_pos1, this.temp_pos2, e, e), this.temp_lineSprite.addLine(this.temp_pos2, this.temp_pos3, e, e), this.temp_lineSprite.addLine(this.temp_pos3, this.temp_pos1, e, e)
					}
		}
	}
	MeshPicker.skinnedVertsWorldPosCalcDeltaTime = .1, MeshPicker._lastWorldPosCalcTime = 0, MeshPicker._temp_mat4 = new Laya.Matrix4x4, MeshPicker.TEMP_VEC3S = [new Laya.Vector3, new Laya.Vector3, new Laya.Vector3, new Laya.Vector3, new Laya.Vector3], MeshPicker.temp_pos1 = new Laya.Vector3, MeshPicker.temp_pos2 = new Laya.Vector3, MeshPicker.temp_pos3 = new Laya.Vector3;
	class RenderMask {
		constructor(t) {
			this.destroyed = !1, this.screenPos = new Laya.Vector2, this.outRay = new Laya.Ray(new Laya.Vector3, new Laya.Vector3), this.bDirty = !1, this.nextTouchTime = 0, this.startPos = new Laya.Vector2, this.startUV = new Laya.Vector2, RenderMask.bWorlking && console.warn("RenderMask is working."), RenderMask.bWorlking = !0, this.brushOffset = new Laya.Vector2, this.init(t)
		}
		dispose() {
			this.destroyed = !0, this.clear(), this.camera && (this.camera.renderTarget = null, this.camera.destroy(), this.camera = null), this.cameraRenderTarget && this.cameraRenderTarget.destroy(), this.fillChecker && (this.fillChecker.dispose(), this.fillChecker = null), this.normalCamera = null, RenderMask.bWorlking = !1
		}
		clear() {
			this.model && (this.model.setLayer(0), this.model = null), this.paintMat && (this.paintMat.maskTexture = mgrMaterial.EMPTY_TEX2D, this.paintMat.newTexture = null, this.paintMat.setState(32), this.paintMat = null), this.clearMask(), this.clearBrush()
		}
		clearMask() {
			RenderMask.CONTEXT && RenderMask.CONTEXT.clear(), this.maskSprite && (this.maskSprite.destroy(), this.maskSprite = null, this.maskRtx.destroy(), this.maskRtx = null)
		}
		clearBrush() {
			this.brushId = null, this.brush && (this.brush.destroy(), this.brush = null)
		}
		init(t) {
			this.normalCamera = t;
			let e = new Laya.Camera(t.aspectRatio, -50, 50);
			e.orthographic = !0, e.orthographicVerticalSize = .001, this.camera = e, e.active = !1, e.clearFlag = Laya.Camera.CLEARFLAG_SOLIDCOLOR, e.clearColor = new Laya.Vector4(0, 0, 0, 0), e.cullingMask = t.cullingMask, t.parent.addChild(e), this.syncCamera(), e.removeAllLayers(), e.addLayer(2), this.cameraRenderTarget = new Laya.RenderTexture(1, 1, Laya.RenderTexture.FORMAT_R8G8B8A8), RenderMask.CONTEXT || (RenderMask.CONTEXT = new Laya.Context);
			let a = this.cameraRenderTarget;
			e.renderTarget = a;
			RenderMask.OUT_BITMAP || (RenderMask.OUT_BITMAP = new Uint8Array(4), RenderMask.EMPTY_SPRITE = (new Laya.Sprite).loadImage(GConfig.img_alpha_mask))
		}
		setBrush(t) {
			if (this.clearBrush(), this.brushId = t, t) {
				let e = db.get_brush_db(t);
				e && e.resPath && mgrRes.loadRes(e.resPath, RES_TYPE.IMAGE, e => {
					this.brushId == t && (this.brush = new Laya.Sprite, this.brush.texture = e)
				})
			} else this.paintMat && this.paintMat.setToNormal()
		}
		setPaintMaterail(t, e, a, i = .5) {
			mgrRes.loadTexture2D(a, s => {
				if (t && !t.destroyed && t.sharedMaterials) {
					this.model = t, t.setLayer(2), this.matIndex = e, this.paintMat = t.sharedMaterials[e], this.paintMat.newTexture = s, this.meshSprite = t.skinnedMeshSprite || UiHelper.findSkinnedMeshSprite(t.resNode, !0), this.clearMask();
					let n = Math.floor(s.width * i),
						o = Math.floor(s.height * i);
					this.maskSprite = (new Laya.Sprite).size(n, o), this.maskRtx = new Laya.RenderTexture2D(n, o, Laya.RenderTexture2D.FORMAT_R8G8B8A8), this.maskRtx.clear(0, 0, 0, 0), RenderMask.CONTEXT.clear(), RenderMask.CONTEXT.size(n, o), this.renderToMask(RenderMask.EMPTY_SPRITE, -1, -1);
					let r = mgrPart.getPaintData(a);
					this.fillChecker = new FillRecoreder(n, o, r || .3), this.maskWidth = n, this.maskHeight = o, this.paintMat.maskTexture = this.maskRtx, this.paintMat.setState(4)
				}
			})
		}
		refreshBrushOffset(t) {
			if (t && this.brushId) {
				let e = db.get_brush_db(this.brushId);
				if (e && e.anchor.length >= 2) {
					let a = Laya.Point.TEMP.setTo(e.anchor[0], e.anchor[1]);
					return t.localToGlobal(a, !1), void this.brushOffset.setValue(a.x - Laya.stage.mouseX, a.y - Laya.stage.mouseY)
				}
			}
			this.brushOffset.setValue(0, 0)
		}
		drawBrush() {
			if (this.brush) {
				if (this.bDirty) return;
				this.bDirty = !0, this.tryRender()
			}
		}
		endDraw() {
			this.startPos = null
		}
		tryRender() {
			if (this.destroyed) return;
			let t = this.pickUVFromPicker();
			if (t) {
				var e = [];
				if (this.startPos) {
					let a = this.startPos.subSelf(this.screenPos).mag(),
						i = t.sub(this.startUV).divSelf(a / 10);
					for (let t = 10; t < a; t += 10) e.push(this.startUV.add(i));
					e.push(t), this.startPos.set(this.screenPos), this.startUV.set(t)
				} else this.startPos = this.screenPos.clone(), this.startUV.set(t), e.push(t);
				Laya.timer.frameOnce(1, this, this.render, [e], !1)
			}
		}
		pickUVFromPicker() {
			let t = (Laya.stage.mouseX + this.brushOffset.x) * Laya.stage.clientScaleX,
				e = (Laya.stage.mouseY + this.brushOffset.y) * Laya.stage.clientScaleY;
			this.screenPos.setValue(t, e), this.normalCamera.viewportPointToRay(this.screenPos, this.outRay);
			let a = MeshPicker.pickUVInDistance(this.meshSprite, this.outRay, .3, [this.matIndex]);
			return a && (a.x *= this.maskWidth, a.y *= this.maskHeight), a
		}
		pickUVFromCamera() {
			let t = (Laya.stage.mouseX + this.brushOffset.x) * Laya.stage.clientScaleX,
				e = (Laya.stage.mouseY + this.brushOffset.y) * Laya.stage.clientScaleY;
			this.screenPos.setValue(t, e), this.normalCamera.viewportPointToRay(this.screenPos, this.outRay), Laya.Vector3.add(this.outRay.origin, this.outRay.direction, this.outRay.direction), this.camera.transform.position = this.outRay.origin, this.camera.transform.lookAt(this.outRay.direction, RenderMask.up), this.renderBefore(), this.camera.render(), this.renderAfter();
			let a = this.cameraRenderTarget,
				i = RenderMask.OUT_BITMAP;
			a.getData(0, 0, 1, 1, i);
			var s = 0,
				n = 0;
			t: for (var o = 0; o < 1; o++)
				for (var r = 0; r < 1; r++) {
					if (n = i[s]) {
						var l = i[s + 1] / 255 * this.maskWidth | 0,
							c = i[s + 2] / 255 * this.maskHeight | 0;
						break t
					}
					s += 4
				}
			if (n) return RenderMask.debug && UiHelper.debug_sprite(a), new Laya.Vector2(l, c)
		}
		render(t) {
			if (this.bDirty = !1, !this.destroyed && this.brush)
				for (var e = 0; e < t.length; e++) {
					var a = t[e];
					this.fillChecker.fill(a.x, a.y, this.brush.width / 2, this.brush.height / 2), this.renderToMask(this.brush, a.x - this.brush.width / 2, a.y - this.brush.height / 2)
				}
		}
		renderToMask(t, e, a) {
			this.maskRtx && t && (UiHelper.drawToRtx(t, e, a, this.maskRtx, RenderMask.CONTEXT), RenderMask.CONTEXT.clear())
		}
		syncCamera() {
			this.camera.fieldOfView = this.normalCamera.fieldOfView, this.camera.transform.position = this.normalCamera.transform.position, this.camera.transform.rotation = this.normalCamera.transform.rotation
		}
		checkPercent(t, e) {
			if (this.fillChecker) {
				let a = 0;
				return this.fillChecker.leftPercent > t && (a += 1), this.fillChecker.rightPercet > e && (a += 2), a
			}
			return 0
		}
		get fillPercent() {
			return this.fillChecker ? this.fillChecker.percent : 0
		}
		fillMask(t) {
			if (this.maskSprite) {
				let e = this.maskWidth,
					a = this.maskHeight,
					i = t ? 0 : e / 2;
				this.maskSprite.graphics.clear(), this.maskSprite.graphics.drawRect(i, 0, e / 2, a, "#ffffff");
				let s = (t ? .25 : .75) * e | 0;
				this.fillChecker.fill(s, a / 2, e / 4, a / 4), this.renderToMask(this.maskSprite, 0, 0)
			}
		}
		renderBefore() {
			if (this.model && this.model.sharedMaterials) {
				let t = this.model.sharedMaterials;
				for (let e = 0; e < t.length; e++) t[e].setState(2);
				this.paintMat.setState(1), this.camera.active = !0
			}
		}
		renderAfter() {
			if (this.model && this.model.sharedMaterials) {
				let t = this.model.sharedMaterials;
				for (let e = 0; e < t.length; e++) t[e].setState(32);
				this.paintMat.setState(4), this.camera.active = !1
			}
		}
		debugMesh() {
			this.meshSprite && MeshPicker.debugSkinnedMesh(this.meshSprite, Laya.Color.RED, [this.matIndex])
		}
	}
	RenderMask.debug = !1, RenderMask.bWorlking = !1, RenderMask.up = new Laya.Vector3(0, 1, 0);
	class OperateBase {
		constructor(t, e, a) {
			this.destroyed = !1, this.isHold = !1, this.isTouched = !1, this.isFinish = !1, this.lockRight = !1, this.brushRadius = 0, this.avatar = t, this.scene = e, this.camera = a, OperateBase.renderMask || (OperateBase.renderMask = new RenderMask(a)), this.onCreate()
		}
		dispose() {
			this.destroyed = !0, this.scene = null, this.camera = null, OperateBase.renderMask && (OperateBase.renderMask.dispose(), OperateBase.renderMask = null), this.faceAttachNodes = null
		}
		finish() {
			this.isFinish || (this.isFinish = !0, OperateBase.renderMask && OperateBase.renderMask.clear(), this.onFinish(), _G.sendMsg("OPT_FINISH"))
		}
		setHoldState(t) {
			this.isHold = t
		}
		touchDown() {
			this.isTouched = !0, this.synchMousePoint(), this.onTouchDown()
		}
		touchMove() {
			if (this.isTouched) {
				if (this.synchMousePoint(), this.lockRight && OperateBase.anchorPos.x > _G.canvasWidth / 2) return;
				OperateBase.renderMask && this.brushDb && OperateBase.renderMask.drawBrush(), this.onTouchMove()
			}
		}
		touchUp() {
			this.isTouched && (this.isTouched = !1, OperateBase.renderMask && OperateBase.renderMask.endDraw(), this.onTouchUp())
		}
		setBrush(t) {
			if (t) {
				let e = db.get_brush_db(t);
				this.brushDb = e
			} else this.brushDb = null;
			OperateBase.renderMask && OperateBase.renderMask.setBrush(t)
		}
		refreshBrushOffset(t) {
			OperateBase.renderMask && OperateBase.renderMask.refreshBrushOffset(t)
		}
		getBrushOffset() {
			if (OperateBase.renderMask) return OperateBase.renderMask.brushOffset
		}
		checkHold() {
			this.isHold || (this.isTouched = !1)
		}
		checkEmpty() {
			this.isHold && (this.isTouched = !1)
		}
		synchMousePoint() {
			OperateBase.anchorPos.setValue(Laya.stage.mouseX + OperateBase.renderMask.brushOffset.x, Laya.stage.mouseY + OperateBase.renderMask.brushOffset.y);
			let t = OperateBase.touchRay;
			UiHelper.screenToRay(OperateBase.anchorPos, this.camera, t), t.origin.cloneTo(OperateBase.rayStart), Laya.Vector3.add(t.origin, t.direction, OperateBase.rayEnd)
		}
		convertWorldToScreen(t, e) {
			UiHelper.worldToScreen(this.camera, t, e)
		}
		testFaceNode(t, e, a) {
			if (!this.faceAttachNodes) {
				let t = [];
				for (var i = 0; i < OperateBase.FACE_ATTACH_NODE.length; i++) t.push(this.avatar.baseFace.findChild(OperateBase.FACE_ATTACH_NODE[i]).transform);
				this.faceAttachNodes = t
			}
			let s = [];
			a = a || this.faceAttachNodes.length;
			let n = OperateBase.rayStart,
				o = OperateBase.rayEnd;
			for (i = e; i < a; i++) Mathf.point2line(n, o, this.faceAttachNodes[i].position) <= t && s.push(OperateBase.FACE_ATTACH_NODE[i]);
			return s
		}
	}
	OperateBase.VEC2_TEMP = new Laya.Vector2, OperateBase.VEC3_TEMP = new Laya.Vector3, OperateBase.vec2 = new Laya.Vector2, OperateBase.FACE_RADIUS = .053, OperateBase.FACE_SCREEN_RADIUS = 150, OperateBase.FACE_ATTACH_NODE = ["doudou_bizi01", "doudou_bizi02", "doudou_bizi03", "doudou_etou01", "doudou_etou02", "doudou_etou03", "doudou_etou04", "doudou_etou05", "doudou_meigong01", "doudou_meigong02", "doudou_youtaiyangxue01", "doudou_youtaiyangxue02", "doudou_zuotaiyangxue01", "doudou_zuotaiyangxue02", "doudou_zuolianjia01", "doudou_youlianjia01", "doudou_zuolianjia02", "doudou_youlianjia02", "doudou_xiaba01", "doudou_xiaba02", "doudou_xiaba03"], OperateBase.anchorPos = new Laya.Vector2, OperateBase.touchRay = new Laya.Ray(new Laya.Vector3, new Laya.Vector3), OperateBase.rayStart = new Laya.Vector3, OperateBase.rayEnd = new Laya.Vector3;
	const FINISH_CHECK_COUNT = 20,
		EFFECT_CHECK_GAP2 = 6400;
	class FeiZaoEffect {
		constructor(t, e, a) {
			this._model = _G.poolManager.get(GModel, "paopao"), this._model.setParent(t), this._model.setPosition(e), this._model.setRotation(0, Mathf.random(-20, 20), Mathf.random(360)), this._model.setScale(0, 0, 0);
			let i = .1 * Mathf.random(5, 8);
			cc.tween(this._model.transform).to(.2, {
				localScaleX: i,
				localScaleY: i,
				localScaleZ: i
			}).start();
			let s = _G.pool.get(Laya.Vector2);
			s.setValue(a.x, a.y), this.pos = s
		}
		get isClear() {
			return null == this._model
		}
		dispose() {
			this._model && (cc.clearTween(this._model.transform), _G.poolManager.put(this._model), this._model = null), _G.pool.put(this.pos)
		}
		clear() {
			if (this._model) {
				let t = this._model;
				this._model = null, cc.tween(t.transform).to(.2, {
					localScaleX: 0,
					localScaleY: 0,
					localScaleZ: 0
				}).call(() => {
					_G.poolManager.put(t)
				}).start()
			}
		}
	}
	class OptFeiZao extends OperateBase {
		constructor() {
			super(...arguments), this.lastSoundTime = 0
		}
		dispose() {
			if (this.centerNode = null, this.centerPoint && (_G.pool.put(this.centerPoint), this.centerPoint = null), this.effects) {
				for (var t = 0; t < this.effects.length; t++) this.effects[t].dispose();
				this.effects = null
			}
			super.dispose()
		}
		onCreate() {
			this.centerNode = this.avatar.baseFace.findChild("c_center"), this.centerPoint = _G.pool.get(Laya.Vector3), this.effects = [];
			let t = this.avatar.baseFace.findChild("face_side");
			this.convertWorldToScreen(t.transform.position, OperateBase.VEC2_TEMP), OperateBase.FACE_RADIUS = Math.abs(t.transform.localPositionX), OperateBase.FACE_SCREEN_RADIUS = Math.max(OperateBase.FACE_SCREEN_RADIUS, Math.abs(OperateBase.VEC2_TEMP.x - _G.canvasWidth / 2)), this.avatar.playAnimation(MODEL_ANIM.HUFU_KAISHI);
			let e = this.avatar.baseFace.findChild("cc_paopao");
			this.paopaoNode = e
		}
		onFinish() {}
		onTouchDown() {
			this.checkHold()
		}
		onTouchMove() {
			if (!this.isTouched) return;
			if (PaoPaoEffect.create(), this.lastSoundTime < Timer.time && (this.lastSoundTime = Timer.time + .2, mgrSound.playTalk("yllsd_04")), Mathf.point2line(OperateBase.rayStart, OperateBase.rayEnd, this.centerNode.transform.position) > .077) return;
			let t = [{
				x: 0,
				y: 0
			}, {
				x: -Mathf.random(70, 100),
				y: Mathf.random(70, 100)
			}, {
				x: -Mathf.random(70, 100),
				y: 0
			}, {
				x: -Mathf.random(70, 100),
				y: -Mathf.random(70, 100)
			}, {
				x: 0,
				y: Mathf.random(70, 100)
			}, {
				x: 0,
				y: -Mathf.random(70, 100)
			}, {
				x: Mathf.random(70, 100),
				y: Mathf.random(70, 100)
			}, {
				x: Mathf.random(70, 100),
				y: 0
			}, {
				x: Mathf.random(70, 100),
				y: -Mathf.random(70, 100)
			}];
			for (let e = 0; e < t.length; e++) {
				const a = t[e];
				this.tryAddEffect(new Laya.Vector2(OperateBase.anchorPos.x + a.x, OperateBase.anchorPos.y + a.y))
			}
		}
		onTouchUp() {}
		getFeiZaoData() {
			return this.effects
		}
		tryAddEffect(t) {
			for (var e = 0; e < this.effects.length; e++) {
				var a = this.effects[e].pos;
				if (Mathf.distanceSqr(t, a) < EFFECT_CHECK_GAP2) return
			}
			console.log("feizao add", t);
			let i = OperateBase.VEC2_TEMP;
			this.convertWorldToScreen(this.paopaoNode.transform.position, i), t.sub(i, i), i.mulSelf(OperateBase.FACE_RADIUS / OperateBase.FACE_SCREEN_RADIUS);
			let s = OperateBase.VEC3_TEMP;
			s.setValue(i.x, -i.y, .14), Laya.Vector3.normalize(s, s), Laya.Vector3.scale(s, Mathf.lerpFromInverseLerp(.14, .11, 0, .46, Math.abs(s.x)), s);
			let n = new FeiZaoEffect(this.paopaoNode, s, t);
			this.effects.push(n), this.effects.length >= FINISH_CHECK_COUNT && this.finish()
		}
	}
	class PaoPaoEffect {
		constructor() {
			this.paopaoSprite = (new Laya.Sprite).loadImage("res/ui/pnl_skincare/eff_qipao_01.png")
		}
		static create() {
			if (this._lastTime > Timer.time) return;
			this._lastTime = Timer.time + Mathf.random(10, 30) / 10, _G.pool.get(PaoPaoEffect).random()
		}
		boom() {
			_G.pool.put(this), mgrAlert.playParticleEffect("108", this.paopaoSprite.localToGlobal(Laya.Point.TEMP.setTo(0, 0), !1), 1, 1), this.paopaoSprite.removeSelf()
		}
		random() {
			mgrPanel.getLayerNode(PANEL_LAYER.TIP).addChild(this.paopaoSprite), this.paopaoSprite.pos(_G.canvasWidth / 2 + Mathf.random(-230, 230), _G.canvasHeight / 2 + Mathf.random(-150, 0), !0);
			let t = Mathf.random(150, 400),
				e = Mathf.lerpFromInverseLerp(.3, .7, 400, 150, t);
			this.paopaoSprite.scale(e, e, !0);
			let a = Mathf.random(20, 25) / 10;
			cc.tween(this.paopaoSprite).to(a, {
				y: this.paopaoSprite.y - t
			}).call(this.boom.bind(this)).start()
		}
	}
	PaoPaoEffect._lastTime = 0;
	let MOVE_DELTA = .02;
	class UIDrag extends Laya.Script {
		constructor() {
			super(...arguments), this.touchStart = new Vec2, this.curLocalPosition = new Vec2, this.lerpRatio = 1, this.inertia = !1, this.userData = null, this.movable = !0, this.isTouched = !1, this.lastTouchPosition = new Vec2, this._deltaMoves = []
		}
		onStart() {
			this.dragTarget || this.setDragTarget(this.owner), Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.onMouseUp)
		}
		onDestroy() {
			this.onTouchEndCallback = null, Laya.timer.clearAll(this), Laya.stage.offAllCaller(this), this.isTouched = !1
		}
		setDragTarget(t) {
			this.dragTarget = t
		}
		setBoundary(t, e) {
			this.maxBoundary = t, this.minBoundary = e
		}
		backToOrigin() {
			this.originLocalPosition && (this.dragTarget.pos(this.originLocalPosition.x, this.originLocalPosition.y, !0), this.originLocalPosition = null)
		}
		get velocity() {
			let t = this._deltaMoves.length,
				e = new Vec2(0, 0);
			if (0 == t) return e;
			for (let a = 0; a < t; a++) e.addSelf(this._deltaMoves[a]);
			return e.divSelf(t * MOVE_DELTA)
		}
		setOffset(t, e) {
			this.offset || (this.offset = new Vec2, this.afterOffset = new Vec2), this.offset.setValue(t, e)
		}
		onMouseDown(t) {
			if (!this.isTouched) {
				this.isTouched = !0, this.touchStart.setValue(Laya.stage.mouseX, Laya.stage.mouseY);
				let t = this.dragTarget;
				if (this.originLocalPosition = new Vec2(t.x, t.y), this.offset) {
					let e = Laya.Point.TEMP.setTo(this.touchStart.x, this.touchStart.y);
					e.x += this.offset.x, e.y += this.offset.y, t.parent.globalToLocal(e, !1), this.afterOffset.set(e).subSelf(this.touchStart), t.pos(e.x, e.y, !0), this.curLocalPosition.set(t)
				}
				if (cc.clearTween(t), this.inertia && (this.lastTouchPosition.set(this.touchStart), this._deltaMoves.length = 0), this.onTouchStartCallback && this.onTouchStartCallback(this, this.userData)) return void(this.originLocalPosition = null);
				Laya.timer.loop(1e3 * MOVE_DELTA, this, this._updateMove)
			}
		}
		_updateMove() {
			if (this.isTouched && this.movable && this.originLocalPosition) {
				let t = Vec2.TEMP;
				if (t.setValue(Laya.stage.mouseX, Laya.stage.mouseY), this.inertia) {
					if (this._deltaMoves.length >= 5) {
						let e = this._deltaMoves.shift();
						e.set(t).subSelf(this.lastTouchPosition), this._deltaMoves.push(e)
					} else {
						let e = t.sub(this.lastTouchPosition);
						this._deltaMoves.push(e)
					}
					this.lastTouchPosition.set(t)
				}
				this.offset ? t.addSelf(this.afterOffset) : t.subSelf(this.touchStart).addSelf(this.originLocalPosition), this.curLocalPosition.lerp(t, this.lerpRatio, this.curLocalPosition), this.setPosition(this.curLocalPosition)
			}
		}
		setPosition(t) {
			this.minBoundary && t.clampf(this.minBoundary, this.maxBoundary), this.dragTarget.pos(t.x, t.y, !0)
		}
		onMouseUp(t) {
			Laya.timer.clear(this, this._updateMove), this.isTouched && (this.isTouched = !1, this.onTouchEndCallback && !this.onTouchEndCallback(this, this.userData) && this.movable ? this.backToOrigin() : this.movable && this.inertia ? this._startAutoScroll() : this.backToOrigin())
		}
		_startAutoScroll() {
			let t = this.velocity,
				e = t.mag(),
				a = Mathf.lerpFromInverseLerp(.5, 1, 100, 3e3, e),
				i = t.mulSelf(.5 * a * a),
				s = Vec2.TEMP;
			s.setValue(this.dragTarget.x, this.dragTarget.y), s.addSelf(i), this.scrollTo(s, a)
		}
		scrollTo(t, e, a) {
			this.minBoundary && t.clampf(this.minBoundary, this.maxBoundary);
			let i = cc.tween(this.dragTarget, !0).to(e, {
				x: t.x,
				y: t.y
			}, {
				easing: cc.Ease.expoOut
			});
			a && (i = i.call(a)), i.start()
		}
		lerpTo(t, e = .02) {
			let a = Vec2.TEMP;
			a.setValue(this.dragTarget.x, this.dragTarget.y), a.lerp(t, e, a), this.setPosition(a)
		}
		onStageMouseUp(t) {
			this.onMouseUp(t)
		}
		cancelDrag() {
			this.onMouseUp(null)
		}
	}
	class ShuiDiEffect {
		constructor(t, e, a) {
			this.model = _G.poolManager.get(GModel, "ty_shuidi"), this.model.setParent(t), this.model.initPaint(), this.model.setRotation(0, 90, 0), this.name = e;
			let i = _G.pool.get(Laya.Vector2);
			a.convertWorldToScreen(t.transform.position, i), this.pos = i
		}
		dispose() {
			this.model && (this.model.sharedMaterial && (cc.clearTween(this.model.sharedMaterial), this.model.sharedMaterial.setState(32), this.model.sharedMaterial.transition = 0), _G.poolManager.put(this.model), this.model = null), _G.pool.put(this.pos)
		}
		clear() {
			this.isClear || (this.isClear = !0, this.model && this.model.sharedMaterial && (this.model.sharedMaterial.setState(16), this.model.sharedMaterial.newTexture = mgrMaterial.EMPTY_TEX2D, cc.tween(this.model.sharedMaterial).to(.5, {}, {
				onUpdate: (t, e) => {
					t.transition = e
				}
			}).start()))
		}
	}
	class OptShuiXi extends OperateBase {
		constructor() {
			super(...arguments), this.curTransition = 0, this.transition = 0
		}
		dispose() {
			this._touchEffect && (this._touchEffect.dispose(), this._touchEffect = null), this.paopaoEffects = null;
			for (var t = 0; t < this.shuidiEffects.length; t++) this.shuidiEffects[t].dispose();
			Laya.timer.clearAll(this)
		}
		onCreate() {
			this._touchEffect = _G.poolManager.get(Particle, "101"), this._touchEffect.setParent(mgrAlert.scene3dfont), this.shuidiEffects = [], this.view = this.avatar.getView(db.MODEL_DB_ID.mianwen_zang), this.view.material.setState(16), this.view.material.transition = 0, Laya.timer.loop(100, this, this.update)
		}
		update() {
			let t = Mathf.lerp(this.view.material.transition, this.transition, .05);
			Mathf.fuzzyEquals(t, 1) ? (Laya.timer.clearAll(this), this.view.material.transition = 1) : this.view.material.transition = t
		}
		onFinish() {
			for (var t = 0; t < this.paopaoEffects.length; t++) this.paopaoEffects[t].clear();
			this._touchEffect && (_G.poolManager.put(this._touchEffect), this._touchEffect = null), this.avatar.playAnimation(MODEL_ANIM.HUFU_ZANTONG1), Timer.callLater(.5, function() {
				mgrAlert.playParticleEffect("104", {
					x: _G.canvasWidth / 2,
					y: _G.canvasHeight / 2 - 60
				}, 1, .5), mgrSound.playSound("yllsd_06")
			})
		}
		onTouchDown() {
			this.isHold ? (this._touchEffect && (this._touchEffect.play(), this._touchEffect.followTarget(this.itemIcon, mgrAlert.camerafont)), this.avatar.playFaceAnim(MODEL_ANIM.FACE_BIYAN_01, .3, !0)) : this.isTouched = !1
		}
		onTouchMove() {
			let t = 0;
			for (var e = .7 * this.paopaoEffects.length, a = 0; a < this.paopaoEffects.length; a++) {
				var i = this.paopaoEffects[a];
				if (i.isClear) t++;
				else if (Mathf.distance(i.pos, OperateBase.anchorPos) < 60) {
					i.clear();
					let t = this.testFaceNode(.03, 3);
					t: for (a = t.length - 1; a >= 0; a--) {
						for (var s = this.shuidiEffects.length - 1; s >= 0; s--)
							if (this.shuidiEffects[s].name == t[a]) continue t;
						var n = new ShuiDiEffect(this.avatar.baseFace.findChild(t[a]), t[a], this);
						this.shuidiEffects.push(n)
					}
					break
				}
				if (this.transition = Mathf.clamp01(t / e), t >= e) {
					this.finish();
					break
				}
			}
		}
		onTouchUp() {
			this._touchEffect && (this._touchEffect.stopFollow(), this._touchEffect.stop()), this.avatar.playFaceAnim(MODEL_ANIM.FACE_IDLE01, .3, !0)
		}
		setFeiZaoData(t) {
			return this.paopaoEffects = t, this
		}
		getShuiDiEffects() {
			return this.shuidiEffects
		}
		setItemIcon(t) {
			return this.itemIcon = t, this
		}
	}
	OptShuiXi.CLEAR_TRANSITION = .4;
	class OptHeiTouTie extends OperateBase {
		onCreate() {
			this.view = this.avatar.getView(db.MODEL_DB_ID.heitou);
			let t = db.get_model_db(db.MODEL_DB_ID.heitoutie);
			mgrRes.loadRes(t.resPath, RES_TYPE.TEXTURE2D, e => {
				this.view && OperateBase.renderMask.setPaintMaterail(this.view.depModel, this.view.viewDb.matIndex, t.resPath)
			})
		}
		dispose() {
			this.view = null, super.dispose()
		}
		onFinish() {
			this.avatar.setPart("heitoutie", !1), this.avatar.playAnimation(MODEL_ANIM.HUFU_ZANTONG1), OperateBase.renderMask.clear()
		}
		onTouchDown() {
			this.checkHold()
		}
		onTouchMove() {
			OperateBase.renderMask.fillPercent > .6 && this.finish()
		}
		onTouchUp() {}
	}
	class OptSiHeiTouTie extends OperateBase {
		constructor() {
			super(...arguments), this._touchDown = new Laya.Vector2, this.normallizeTime = 0
		}
		onCreate() {
			this.heiTou = this.avatar.getView(db.MODEL_DB_ID.ty_heitou);
			let t = this.heiTou.model.getAnimator();
			t.speed = 1e-5, t.play(null, 0, 0), this.animator = t
		}
		onFinish() {
			this.avatar.removePart("ty_heitou"), this.avatar.playAnimation(MODEL_ANIM.HUFU_ZANTONG3)
		}
		onTouchDown() {
			this.checkEmpty(), this._touchDown.setValue(Laya.stage.mouseX, Laya.stage.mouseY)
		}
		onTouchMove() {
			let t = Laya.stage.mouseX - this._touchDown.x,
				e = Mathf.distance2(t, Laya.stage.mouseY - this._touchDown.y);
			this._touchDown.setValue(Laya.stage.mouseX, Laya.stage.mouseY);
			let a = Mathf.lerpFromInverseLerp(0, 1, 0, 200, e);
			this.normallizeTime = t <= 0 ? Mathf.clamp01(this.normallizeTime + a) : Mathf.clamp01(this.normallizeTime - a), this.animator.play(null, 0, this.normallizeTime), this.normallizeTime >= .95 && this.finish()
		}
		onTouchUp() {}
	}
	class OptFuMianMo extends OperateBase {
		onCreate() {
			this.view = this.avatar.getView(db.MODEL_DB_ID.mianmo_empty);
			let t = db.get_model_db(db.MODEL_DB_ID.mianmo_fill);
			mgrRes.loadRes(t.resPath, RES_TYPE.TEXTURE2D, e => {
				this.view && OperateBase.renderMask.setPaintMaterail(this.view.depModel, this.view.viewDb.matIndex, t.resPath, .7)
			})
		}
		dispose() {
			this.view = null, super.dispose()
		}
		onFinish() {
			this.avatar.setPart("mianmo", !1), this.avatar.playAnimation(MODEL_ANIM.HUFU_ZANTONG2), OperateBase.renderMask.clear()
		}
		onTouchDown() {
			this.checkHold()
		}
		onTouchMove() {
			OperateBase.renderMask.fillPercent > .6 && this.finish()
		}
		onTouchUp() {}
	}
	class OptSiMianMo extends OperateBase {
		constructor() {
			super(...arguments), this._touchDown = new Laya.Vector2, this.normallizeTime = 0, this.lastSoundTIme = 0
		}
		onCreate() {
			this.mianMo = this.avatar.getView(db.MODEL_DB_ID.ty_mianmo);
			let t = this.mianMo.model.getAnimator();
			t.speed = 1e-5, t.play(null, 0, 0), this.animator = t
		}
		dispose() {
			let t = this.avatar.getView(db.MODEL_DB_ID.mianmo_fill);
			cc.clearTween(t.material), t.material.setState(32), super.dispose()
		}
		onFinish() {
			let t = this.avatar.getView(db.MODEL_DB_ID.mianmo_fill);
			t.material.setState(16), cc.tween(t.material).to(.5, {}, {
				onUpdate: (t, e) => {
					t.transition = e
				}
			}).start(), this.avatar.playAnimation(MODEL_ANIM.HUFU_ZANTONG3), Timer.callLater(.5, function() {
				mgrAlert.playParticleEffect("104", {
					x: _G.canvasWidth / 2,
					y: _G.canvasHeight / 2 - 60
				}, 1, .5)
			})
		}
		onTouchDown() {
			this.checkEmpty(), this._touchDown.setValue(Laya.stage.mouseX, Laya.stage.mouseY)
		}
		onTouchMove() {
			this.lastSoundTIme < Timer.time && (this.lastSoundTIme = Timer.time + 2, mgrSound.playSound("yllsd_08"));
			let t = Laya.stage.mouseX - this._touchDown.x,
				e = Mathf.distance2(t, Laya.stage.mouseY - this._touchDown.y);
			this._touchDown.setValue(Laya.stage.mouseX, Laya.stage.mouseY);
			let a = Mathf.lerpFromInverseLerp(0, 1, 0, 300, e);
			this.normallizeTime = t <= 0 ? Mathf.clamp01(this.normallizeTime + a) : Mathf.clamp01(this.normallizeTime - a), this.animator.play(null, 0, this.normallizeTime), this.normallizeTime >= 1 && this.finish()
		}
		onTouchUp() {}
	}
	const FINISH_CHECK_RATIO = .6;
	class OptCaGan extends OperateBase {
		onCreate() {
			this.avatar.playFaceAnim(MODEL_ANIM.FACE_IDLE01, .3, !0)
		}
		onFinish() {
			for (var t = 0; t < this.shuiDiEffects.length; t++) this.shuiDiEffects[t].clear();
			this.avatar.playAnimation(MODEL_ANIM.HUFU_ZANTONG2), Timer.callLater(.5, function() {
				mgrAlert.playParticleEffect("104", {
					x: _G.canvasWidth / 2,
					y: _G.canvasHeight / 2 - 60
				}, 1, .5)
			})
		}
		onTouchDown() {
			this.checkHold(), this.isTouched && this.avatar.playFaceAnim(MODEL_ANIM.FACE_BIYAN_01, .3, !0)
		}
		onTouchMove() {
			let t = 0;
			for (var e = 0; e < this.shuiDiEffects.length; e++) {
				var a = this.shuiDiEffects[e];
				if (a.isClear) t++;
				else if (Mathf.distance(a.pos, OperateBase.anchorPos) < 60) {
					a.clear();
					break
				}
				if (t >= this.shuiDiEffects.length * FINISH_CHECK_RATIO) {
					this.finish();
					break
				}
			}
		}
		onTouchUp() {
			this.avatar.playFaceAnim(MODEL_ANIM.FACE_IDLE01, .3, !0)
		}
		setShuiDiEffects(t) {
			return this.shuiDiEffects = t, this
		}
	}
	class DouYinEffect {
		constructor(t, e) {
			this.progress = 0, this.lastTime = 0, this.lastDir = 0, this.model = _G.poolManager.get(GModel, db.MODEL_DB_ID.ty_douyin), this.model.setParent(t), this.model.initPaint(), this.model.setRotation(0, 90, 0), this.name = e
		}
		get isClear() {
			return this.progress >= 1
		}
		dispose() {
			this.model && (this.model.sharedMaterial && (this.model.sharedMaterial.setState(16), this.model.sharedMaterial.transition = 0), _G.poolManager.put(this.model), this.model = null)
		}
		clear(t) {
			this.progress < 1 && (this.progress += t, this.model.sharedMaterial && (this.model.sharedMaterial.setState(16), this.model.sharedMaterial.transition = Mathf.clamp01(this.progress)))
		}
	}
	class OptQuDouYin extends OperateBase {
		onCreate() {}
		onFinish() {
			this.avatar.playAnimation(MODEL_ANIM.HUFU_WANCHENG), Timer.callLater(.5, function() {
				mgrAlert.playParticleEffect("105", {
					x: _G.canvasWidth / 2,
					y: _G.canvasHeight / 2
				}, 5, 1)
			})
		}
		onTouchDown() {
			this.checkHold()
		}
		onTouchMove() {
			let t = this.testFaceNode(.022, 0, 3);
			if (t.length > 0)
				for (var e = 0; e < this.douYinList.length; e++) {
					var a = this.douYinList[e];
					if (a.name == t[0]) {
						if (!a.isClear) {
							var i = Mathf.sign(OperateBase.anchorPos.x);
							(Timer.time - a.lastTime > .2 || a.lastDir != i) && (a.lastDir = i, a.lastTime = Timer.time, a.clear(.35), this.checkFinish())
						}
						break
					}
				}
		}
		onTouchUp() {}
		checkFinish() {
			for (var t = 0; t < this.douYinList.length; t++)
				if (!this.douYinList[t].isClear) return;
			this.finish()
		}
		setDouYin(t) {
			return this.douYinList = t, this
		}
	}
	class ZaMaoEffect {
		constructor(t, e) {
			this.isClear = !1, this.model = _G.poolManager.get(GModel, e), this.model.setParent(t), this.model.initPaint()
		}
		dispose() {
			this.model && (_G.poolManager.put(this.model), this.model = null), this.checkTransform = null
		}
		clear() {
			this.isClear || (this.isClear = !0, this.model && (_G.poolManager.put(this.model), this.model = null))
		}
		initPos() {
			this.checkTransform = this.model.getChildAt(0).transform
		}
	}
	class OptXiuMeiMao extends OperateBase {
		constructor() {
			super(...arguments), this.lastSoundTime = 0
		}
		onCreate() {}
		onFinish() {
			this.avatar.playAnimation(MODEL_ANIM.HUFU_ZANTONG3)
		}
		onTouchDown() {
			this.checkHold()
		}
		onTouchMove() {
			let t = OperateBase.rayStart,
				e = OperateBase.rayEnd;
			for (var a = 0; a < this.zaMaoList.length; a++)
				if (Mathf.point2line(t, e, this.zaMaoList[a].checkTransform.position) < .015 && !this.zaMaoList[a].isClear) return this.zaMaoList[a].clear(), this.checkZaMao(), OperateBase.anchorPos.x > _G.canvasWidth / 2 ? this.avatar.playAnimation(MODEL_ANIM.HUFU_ZAMAO_L) : this.avatar.playAnimation(MODEL_ANIM.HUFU_ZAMAO_R), void(this.lastSoundTime < Timer.time && (this.lastSoundTime = Timer.time + 1))
		}
		onTouchUp() {}
		setZaMao(t) {
			this.zaMaoList = t;
			for (var e = 0; e < t.length; e++) t[e].initPos();
			return this
		}
		checkZaMao() {
			for (var t = 0; t < this.zaMaoList.length; t++)
				if (!this.zaMaoList[t].isClear) return;
			this.finish()
		}
	}
	class RoomBase {
		load(t) {
			Laya.Scene3D.load(this.resourceName, Laya.Handler.create(this, this._onSceneLoaded, [t]))
		}
		dispose() {
			this.destroyed = !0, this.camera && (cc.clearTween(this.camera), cc.clearTween(this.camera.transform), this.camera.destroy(), this.camera = null), this.root && (cc.clearTween(this.root.transform), this.root.destroy(), this.root = null), this.scene && (this.scene.removeSelf(), this.scene.active = !1, this.scene = null)
		}
		_onSceneLoaded(t, e) {
			this.destroyed || (this.scene = e, this.scene.active = !0, this.onSceneLoaded(e), t && t())
		}
		createCamera(t) {
			let e = t.parent.addChild(new Laya.Camera(0, .01, 100));
			e.transform.position = t.transform.position, e.transform.rotation = t.transform.rotation, e.fieldOfView = t.fieldOfView;
			let a = e.addChild(new Laya.DirectionLight);
			a.transform.localRotationEuler = PanelBase3D.defaultLightEular, a.color = new Laya.Vector3(1, 1, 1), this.camera = e
		}
		createRoot(t) {
			let e = Laya.Sprite3D.instantiate(t, t.parent, !0);
			this.root = e
		}
	}
	class RoomBath extends RoomBase {
		constructor() {
			super(...arguments), this.resourceName = "res/unity/Conventional/map_01.ls", this.cameraIndex = -1, this.bNight = !1
		}
		onSceneLoaded(t) {
			this.resetMat(t)
		}
		resetMat(t) {
			if (t.allMaterial) return;
			let e = UiHelper.findAllMeshRenderers(t.getChildByName("map_01"), null, !0);
			if (e) {
				let l = [];
				t.allMaterial = l;
				t: for (var a = 0; a < e.length; a++) {
					for (var i = e[a], s = i.sharedMaterials, n = [], o = 0; o < s.length; o++) {
						var r = s[o];
						if (!(r instanceof Laya.BlinnPhongMaterial)) {
							l.push(r);
							continue t
						} {
							let t = new LightMapMaterial;
							t.albedoTexture = r.albedoTexture, t.tilingOffset = r.tilingOffset, "map_01_02" == r.name ? t.renderMode = LightMapMaterial.RENDERMODE_CUTOUT : t.renderMode = LightMapMaterial.RENDERMODE_OPAQUE, n.push(t), l.push(t)
						}
					}
					i.sharedMaterials = n
				}
			}
		}
		dispose() {
			this.clearAlpha(), this.scene && (this.switchToDay(!0), this.mapNode.active = !0, UiHelper.setTransformVec3Prop(this.mapNode.transform, "localScale", 1, 1, 1)), this.effectJZ && _G.poolManager.put(this.effectJZ), this.jiangzhuang && (_G.poolManager.put(this.jiangzhuang), this.jiangzhuang = null), super.dispose()
		}
		changeToMain() {
			this.camera || (this.createCamera(this.mainCamera), this.createRoot(this.mainNode), this.mainCamera.active = !1, this.skincareCamera.active = !1, this.roomCameraMid.active = !1, this.roomCameraFar.active = !1, this.skybox.active = !1, this.butteryCurve.active = !1)
		}
		changeToSkincare() {
			this.camera || (this.createCamera(this.skincareCamera), this.createRoot(this.skincareNode), this.mainCamera.active = !1, this.skincareCamera.active = !1, this.roomCameraMid.active = !1, this.roomCameraFar.active = !1, this.skybox.active = !1, this.butteryCurve.active = !1, this.playMoveIn())
		}
		chagneToRoom() {
			this.camera ? this.playMoveIn() : (this.createCamera(this.skincareCamera), this.createRoot(this.skincareNode), this.mainCamera.active = !1, this.skincareCamera.active = !1, this.roomCameraMid.active = !1, this.roomCameraFar.active = !1, this.cameraIndex = 0, this.skybox.active = !1, this.butteryCurve.active = !1, this.playMoveIn())
		}
		playMoveIn() {
			let t = this.camera.transform.localPositionZ;
			this.camera.transform.localPositionZ = t + 1, cc.tween(this.camera.transform).delay(.8).to(1, {
				localPositionZ: t
			}, cc.OPTION.SINE_OUT).start()
		}
		initSkyboxMat() {
			this.skybox.paint_shader || (this.skybox.paint_shader = mgrMaterial.setDrawShader(this.skybox)[0]), this.skyboxMat = this.skybox.paint_shader
		}
		moveCamerToNear(t, e = !0) {
			if (0 != this.cameraIndex) {
				if (this.cameraIndex = 0, this.moveCamerTo(this.skincareCamera, cc.Ease.sineInOut, t), e) {
					let t = this.root.transform.position.clone(),
						e = this.skincareNode.transform.position.clone(),
						a = this.root.transform.rotation.clone(),
						i = this.skincareNode.transform.rotation.clone();
					cc.tween(this.root.transform, !0).to(.7, cc.PROP.EMPTY, {
						easing: cc.Ease.sineInOut,
						onUpdate: function(s, n) {
							Laya.Vector3.lerp(t, e, n, s.position), Laya.Quaternion.lerp(a, i, n, s.rotation), s.position = s.position, s.rotation = s.rotation
						}
					}).start()
				}
			} else t && t()
		}
		moveCamerToMid(t) {
			if (1 == this.cameraIndex) return void(t && t());
			this.cameraIndex = 1, this.moveCamerTo(this.roomCameraMid, cc.Ease.sineInOut, t);
			let e = this.root.transform.position.clone(),
				a = this.roomNode.transform.position.clone(),
				i = this.root.transform.rotation.clone(),
				s = this.roomNode.transform.rotation.clone();
			cc.tween(this.root.transform, !0).to(.7, cc.PROP.EMPTY, {
				easing: cc.Ease.sineInOut,
				onUpdate: function(t, n) {
					Laya.Vector3.lerp(e, a, n, t.position), Laya.Quaternion.lerp(i, s, n, t.rotation), t.position = t.position, t.rotation = t.rotation
				}
			}).start()
		}
		moveCamerToFar(t) {
			if (2 == this.cameraIndex) return void(t && t());
			this.cameraIndex = 2, this.moveCamerTo(this.roomCameraFar, cc.Ease.sineInOut, t);
			let e = this.root.transform.position.clone(),
				a = this.roomNode.transform.position.clone(),
				i = this.root.transform.rotation.clone(),
				s = this.roomNode.transform.rotation.clone();
			cc.tween(this.root.transform, !0).to(.7, cc.PROP.EMPTY, {
				easing: cc.Ease.sineInOut,
				onUpdate: function(t, n) {
					Laya.Vector3.lerp(e, a, n, t.position), Laya.Quaternion.lerp(i, s, n, t.rotation), t.position = t.position, t.rotation = t.rotation
				}
			}).start()
		}
		moveCamerToMain(t) {
			3 != this.cameraIndex ? (this.cameraIndex = 3, this.moveCamerTo(this.mainCamera, cc.Ease.sineInOut, t)) : t && t()
		}
		moveCamerTo(t, e, a) {
			UiHelper.tweenCamera(this.camera, .7, t.transform.localPosition, t.transform.localRotation, t.fieldOfView, e, a)
		}
		switchToNight(t = !1) {
			this.bNight = !0;
			let e = this.scene.allMaterial;
			for (var a = 0; a < e.length; a++) {
				var i = e[a];
				t ? i.albedoIntensity = .2 : cc.tween(i, !0).to(1.5, {}, {
					onUpdate: function(t, e) {
						var a = Mathf.lerp(1, .2, e);
						t.albedoIntensity = a
					}
				}).start()
			}
		}
		switchToDay(t = !1) {
			this.bNight = !1;
			let e = this.scene.allMaterial;
			for (var a = 0; a < e.length; a++) {
				var i = e[a];
				t ? (i.albedoIntensity = 1, cc.clearTween(i)) : cc.tween(i, !0).to(1.5, {}, {
					onUpdate: function(t, e) {
						var a = Mathf.lerp(.2, 1, e);
						t.albedoIntensity = a
					}
				}).start()
			}
		}
		playFadeout(t) {
			this.initSkyboxMat(), this.skyboxMat.playDissolveOut(2, 0, t)
		}
		clearAlpha() {
			cc.clearTween(this);
			let t = this.scene.allMaterial;
			for (var e = 0; e < t.length; e++) {
				t[e].alpha = null
			}
		}
		playChuEffect() {
			let t = UiHelper.findChild(this.mapNode, "menEffect"),
				e = _G.poolManager.get(Particle, "119");
			e.setParent(t), e.play(null, 5, .5)
		}
		playJinEffect() {
			let t = UiHelper.findChild(this.mapNode, "menEffect"),
				e = _G.poolManager.get(Particle, "120");
			e.setParent(t), e.play(null, 5, .5)
		}
		tryShowJiangZhuang() {
			let t = mgrClassRoom.getJiangZhuangModelId();
			if (t && !this.jiangzhuang) {
				let e = UiHelper.findChild(this.mapNode, "guadian_jiangzhuang");
				this.jiangzhuang = _G.poolManager.get(GModel, t), this.jiangzhuang.initPart(), this.jiangzhuang.setParent(e), this.jiangzhuang.callIfLoaded(() => {
					let t = this.scene.allMaterial; - 1 == t.indexOf(this.jiangzhuang.sharedMaterial) && t.push(this.jiangzhuang.sharedMaterial);
					let e = this.jiangzhuang.sharedMaterial;
					e.baseAlbedoIntensity = e.albedoIdentity, e.albedoIntensity = this.bNight ? .2 : 1, this.tryPlayJiangZhuangEffect()
				})
			}
			this.jiangzhuang && this.jiangzhuang.show()
		}
		hideJiangZhuang() {
			this.jiangzhuang && this.jiangzhuang.hide()
		}
		tryPlayJiangZhuangEffect() {
			if (this.jiangzhuang) {
				let t = _G.poolManager.get(Particle, "184");
				t.setParent(this.jiangzhuang.node), t.play(), this.effectJZ = t
			}
		}
		get mainCamera() {
			return this.scene.getChildByName("MainCamera")
		}
		get skincareCamera() {
			return this.scene.getChildByName("SkincareCamera")
		}
		get roomCameraMid() {
			return this.scene.getChildByName("RoomCameraMid")
		}
		get roomCameraFar() {
			return this.scene.getChildByName("RoomCameraFar")
		}
		get mainNode() {
			return this.scene.getChildByName("MainNode")
		}
		get skincareNode() {
			return this.scene.getChildByName("SkincareNode")
		}
		get roomNode() {
			return this.scene.getChildByName("RoomNode")
		}
		get gemstoneNode() {
			return this.scene.getChildByName("gemstone")
		}
		get mapNode() {
			return this.scene.getChildByName("map_01")
		}
		get skybox() {
			return this.scene.getChildByName("skybox")
		}
		get butteryCurve() {
			return this.scene.getChildByName("ButterflyCurve")
		}
	}
	class ScoreBar extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/ScoreBar.json", this._exportNodeInfo = {
				cc_barMask: "UIBarMask",
				cc_box0: "Laya.Sprite",
				cc_text0: "Laya.Label",
				cc_box1: "Laya.Sprite",
				cc_text1: "Laya.Label",
				cc_box2: "Laya.Sprite",
				cc_text2: "Laya.Label",
				cc_icon0: "Laya.Sprite",
				cc_icon1: "Laya.Sprite",
				cc_icon2: "Laya.Sprite",
				cc_colorEggMianJu: "Laya.Sprite"
			}, this.btouch = !1, this.create()
		}
		onCreateComplete() {
			this.colorEggMianJu.on(Laya.Event.CLICK, this, () => {
				this.onClickButtonColorEggMianJu()
			}), this.colorEggMianJu.visible = !1
		}
		setValue(t, e, a) {
			this.value != t && (this.value = t, this.unscheduleAllCallbacks(), 0 != t ? e ? this.scheduleOnce(e, () => {
				a ? this.playAnim(a) : this.setProgress(t / db.game_cnf.game_bar_max_score, !0)
			}) : a ? this.playAnim(a) : this.setProgress(t / db.game_cnf.game_bar_max_score, !0) : this.setProgress(0, !1))
		}
		playAnim(t) {
			let e = this.value / db.game_cnf.game_bar_max_score,
				a = ScoreBar.temp_point.setTo(this.barMask.node.width / 2, this.barMask.getProgressPosition(e));
			this.barMask.node.localToGlobal(a, !1);
			for (let e = 0; e < 6; e++) UiHelper.playBezierTo("res/icon/star.png", t, a, .7 + .05 * e);
			this.scheduleOnce(.7, () => {
				this.setProgress(e, !0)
			})
		}
		setProgress(t, e) {
			if (!this.callable) return this.safeCall(this.setProgress, t, e);
			e ? this.barMask.progressTo(t, this.showBox.bind(this)) : this.barMask.progress = 0
		}
		showBox() {
			let t = mgrOutside.getGameAwardCount(this.value);
			for (let e = 0; e < t; e++)
				if (1 == this["box" + e].alpha) {
					cc.tween(this["box" + e]).to(.1, cc.PROP.ALPHA0).start();
					let t = this["icon" + e];
					UiHelper.playRotShake(t, .5), cc.tween(t).to(.5, cc.PROP.SCALE1_2, cc.OPTION.BACK_OUT).to(.1, cc.PROP.ALPHA0).start();
					let a = UiHelper.getSelfGlobalPos(t);
					mgrAlert.playParticleEffect("115", a, 2, 1, .4)
				}
		}
		getProgress() {
			return this.callable ? this.barMask.progress : 0
		}
		moveIn() {
			if (!this.callable) return this.safeCall(this.moveIn);
			cc.tween(this.resNode).show().to(.3, {
				x: 0
			}, cc.OPTION.SINE_IN).start();
			for (let t = 0; t < 3; t++) this["box" + t].alpha = 1, this["icon" + t].scale(1, 1).alpha = 1
		}
		moveOut() {
			this.callable ? cc.tween(this.resNode).to(.3, {
				x: -100
			}, cc.OPTION.SINE_OUT).hide().start() : this.safeCall(this.moveOut)
		}
		checkColorEggMianJu() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.MIAN_JU, EGGS_STEP.FIRST) ? this.colorEggMianJu.visible = !0 : this.colorEggMianJu.visible = !1
		}
		onClickButtonColorEggMianJu() {
			if (this.btouch) return;
			this.btouch = !0;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.colorEggMianJu.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.colorEggMianJu, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.mian_ju)
		}
	}
	ScoreBar.temp_point = new Laya.Point;
	class UIBarMask extends Laya.Script {
		constructor() {
			super(...arguments), this._progress = 1, this.style = "horizon", this.reverse = !1, this._originWidth = 0, this._originHeight = 0, this.progressPosition = 0, this._startAngle = -90
		}
		get progress() {
			return this._progress
		}
		set progress(t) {
			t = Math.max(0, Math.min(1, t)), this._progress != t && (this._progress = t, this.refresh())
		}
		get node() {
			return this.owner
		}
		onAwake() {
			this.bar = this.owner, 0 == this.bar.get_width() || 0 == this.bar.get_height() ? this.bar.texture.getIsReady() ? this.init() : this.bar.texture.once(Laya.Event.READY, this, this.init) : this.init()
		}
		onDestroy() {
			this.bar && (this.bar.mask && (this.bar.mask.destroy(), this.bar.mask = null), this.bar = null), cc.clearTween(this)
		}
		init() {
			this.bar && (this._originWidth = this.bar.width, this._originHeight = this.bar.height, this.mask || (this.mask = new Laya.Sprite, this.bar.mask = this.mask), this.refresh())
		}
		setStartAngle(t) {
			this._startAngle = t
		}
		getProgressPosition(t) {
			t = Mathf.clamp01(t);
			let e = 1,
				a = 1;
			if ("horizon" == this.style) e = t;
			else {
				if ("vertical" != this.style) return 0;
				a = t
			}
			let i = this._originWidth * e,
				s = this._originHeight * a,
				n = this._originHeight - s;
			return this.reverse ? "horizon" == this.style ? this._originWidth - i : s : "horizon" == this.style ? i : n
		}
		progressTo(t, e, a = .3) {
			cc.tween(this, !0).to(a, {
				progress: t
			}).call(e).start()
		}
		refresh() {
			if (!this.bar || 0 == this._originWidth || 0 == this._originWidth) return;
			let t = 1,
				e = 1;
			if ("horizon" == this.style ? t = this._progress : "vertical" == this.style && (e = this._progress), this.mask.graphics.clear(), 0 == this._progress) return this.mask.graphics.drawRect(0, 0, 1, 1, "#ffffff"), void(this.progressPosition = this.getProgressPosition(this._progress));
			if ("radial" == this.style) this.mask.graphics.drawPie(this._originWidth / 2, this._originHeight / 2, this._originWidth / 2, this._startAngle, this._startAngle + 360 * this._progress, "#ffffff");
			else {
				let a = this._originWidth * t,
					i = this._originHeight * e,
					s = 0,
					n = this._originHeight - i;
				this.reverse ? (s = this._originWidth - a, n = 0, "horizon" == this.style ? this.progressPosition = s : this.progressPosition = i) : "horizon" == this.style ? this.progressPosition = a : this.progressPosition = n, this.mask.graphics.drawRect(s, n, a + 1, i, "#ffffff")
			}
		}
	}
	UIBarMask.STYLE_HORIZON = "horizon", UIBarMask.STYLE_VERTICAL = "vertical", UIBarMask.STYLE_RADIAL = "radial";
	class PlayBottomNode extends ViewBase {
		constructor(t) {
			super(t), this.resourceName = "res/prefab/PlayBottomNode.json", this._exportNodeInfo = {
				cc_skincareNode: "Laya.Sprite",
				cc_sprite01: "Laya.Sprite",
				cc_insideNode: "Laya.Sprite",
				cc_sprite02: "Laya.Sprite",
				cc_outsideNode: "Laya.Sprite",
				cc_sprite03: "Laya.Sprite",
				cc_restNode: "Laya.Sprite"
			}, this.touchEnable = !0, this._states = [], this.create()
		}
		dispose() {
			this.touchEnable = !1, this.stopProcMsg();
			for (let t = 0; t < this._states.length; t++) this._states[t].dispose();
			super.dispose(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PLAY_NODE_BUTTONOUT), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PLAY_NODE_BUTTONSKINCARE)
		}
		onCreateComplete() {
			let t = this.context.onOpenCallback,
				e = this.context.curIndex;
			mgrI18n.trySetI18nImage(this.sprite01, "pnl_play_03.png"), mgrI18n.trySetI18nImage(this.sprite02, "pnl_play_01.png"), mgrI18n.trySetI18nImage(this.sprite03, "pnl_play_02.png"), this.y = 200, this._states.push(new ButtonState(this.skincareNode, () => {
				this.touchEnable && mgrAlert.openGameLoading(UI_NAME.PanelSkincare, null, t)
			}, function() {
				return BaseFacade.mItem.getItemCount("1020") / mgrGame.curRoleUpDb.xinQingMax
			}, 0 == e, !1)), this._states.push(new ButtonState(this.insideNode, () => {
				this.touchEnable && mgrAlert.openGameLoading(UI_NAME.PanelInside, null, t)
			}, function() {
				return 1
			}, 1 == e, !0)), this._states.push(new ButtonState(this.outsideNode, () => {
				this.touchEnable && mgrAlert.openGameLoading(UI_NAME.PanelOutside, null, t)
			}, function() {
				return 1
			}, 2 == e, !0)), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this)
			}), this.startProcMsg()
		}
		onMsgItemChange() {
			this.updateState()
		}
		fadeOut(t) {
			this.callable ? (this.touchEnable = !1, cc.tween(this.resNode, !0).to(.3, {
				y: 200
			}, cc.OPTION.SINE_OUT).hide().call(t).start()) : this.safeCall(this.fadeOut, t)
		}
		fadeIn(t, e = .5) {
			this.callable ? cc.tween(this.resNode, !0).show().to(.3, {
				y: 0
			}, cc.OPTION.BACK_OUT).delay(e).call(() => {
				this.touchEnable = !0, t && t(), mgrGuide.registerGuideNode(GUD_REG_NODE.PLAY_NODE_BUTTONOUT, this.outsideNode), mgrGuide.registerGuideNode(GUD_REG_NODE.PLAY_NODE_BUTTONSKINCARE, this.skincareNode)
			}).start() : this.safeCall(this.fadeIn, t, e)
		}
		flyXinQingTo() {
			new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			for (var t = 0; t < 6; t++);
		}
		updateState() {
			for (let t = 0; t < this._states.length; t++) this._states[t].update()
		}
	}
	class ButtonState {
		constructor(t, e, a, i, s) {
			s ? (this.barMask = t.getChildByName("on").addComponent(UIBarMask), this.barMask.style = UIBarMask.STYLE_VERTICAL, t.getChildByName("off").visible = !1) : (this.barMask = t.getChildByName("off").addComponent(UIBarMask), this.barMask.style = UIBarMask.STYLE_VERTICAL, t.getChildByName("on").visible = !1), this._focus = t.getChildByName("focus"), this._onClick = e, this._checker = a, this._focus.visible = i, UiHelper.addClickEvent(t, this.onClick.bind(this), void 0, .5), this.update()
		}
		dispose() {}
		update() {
			let t = this._checker();
			this.barMask.progress = t
		}
		onClick() {
			this._focus.visible || this._onClick && this._onClick(this.barMask.progress)
		}
	}
	class RoleLevel extends MsgHandler {
		constructor(t, e) {
			super(), this.destroyed = !1, this.bar = t, this.label = e, this.registerListeners({
				[BASE_MSG.UP_STATE_CHANGE]: this.onMsgUpStateChange.bind(this)
			}), this.startProcMsg(), this.updateLevel()
		}
		dispose() {
			this.destroyed = !0, this.stopProcMsg()
		}
		onMsgUpStateChange(t) {
			"role_level" == t.itemId && this.updateLevel()
		}
		updateLevel() {
			this.label.text = mgrGame.getRoleLevel() + "", this.bar.progress = mgrGame.getRoleProgress()
		}
	}
	class AdvInstOrBanner extends MsgHandler {
		constructor(t, e) {
			super(), this.bBanner = !1, this.bFocus = !0, this.bFirst = !0, this.mode = 0, this.instAdvName = t, this.bannerAdvName = e, this.registerListeners({
				[BASE_MSG.READY_OPEN_NEW_BANNER]: this.onMsgReadyOpenNewBanner.bind(this)
			}), _G.isGuiding && (db.cop.b_inst_in_guide ? this.mode = 1 : this.mode = 2)
		}
		onMsgAdvShowFail(t) {
			t.advName == this.instAdvName && (this.bBanner = !0, this.bFocus && mgrAdv.dispatchAdv(this.bannerAdvName))
		}
		onMsgVideoVisible(t) {
			this.bFocus && this.bBanner && (t ? mgrAdv.closeAdv(this.bannerAdvName) : mgrAdv.dispatchAdv(this.bannerAdvName))
		}
		onMsgReadyOpenNewBanner(t) {
			if (t.bannerAdvName != this.bannerAdvName) switch (this.bFocus = !1, this.mode) {
				case 0:
					this.checkInstOrBanner();
					break;
				case 1:
					this.checkInst()
			}
		}
		onFocus(t) {
			switch (this.bFocus = t, this.mode) {
				case 0:
					this.checkInstOrBanner();
					break;
				case 1:
					this.checkInst()
			}
		}
		dispose() {
			this.stopProcMsg()
		}
		checkInstOrBanner() {
			this.bFirst ? (this.bFirst = !1, mgrAdv.dispatchAdv(this.instAdvName) && db.cop.b_inst_or_banner ? (this.registerListeners({
				[BASE_MSG.ADV_SHOW_FAIL]: this.onMsgAdvShowFail.bind(this)
			}), this.startProcMsg()) : (this.bBanner = !0, this.sendMsg(BASE_MSG.READY_OPEN_NEW_BANNER, {
				bannerAdvName: this.bannerAdvName
			}), mgrAdv.dispatchAdv(this.bannerAdvName), this.registerListeners({
				[BASE_MSG.SDK_VIDEO_VISIBLE]: this.onMsgVideoVisible.bind(this)
			}), this.startProcMsg())) : this.bBanner && (this.bFocus ? mgrAdv.dispatchAdv(this.bannerAdvName) : mgrAdv.closeAdv(this.bannerAdvName))
		}
		checkInst() {
			this.bFirst && (this.bFirst = !1, mgrAdv.dispatchAdv(this.instAdvName))
		}
	}
	let move_forward = new Vec2(0, 1),
		NUMBER_STR = ["", "K", "M", "B", "B", "B"],
		NUMBER_BMF = ["", "a", "b", "c", "d", "d"],
		NUMBER_RATE = [1, 1e3, 1e6, 1e9, 1e12, 1e15],
		NUMBER_DIGIT = [2, 1, 0, 0];
	class GameUtility {
		static lerpPath(t, e, a) {
			if (0 != t.length) {
				if (e = Mathf.clamp01(e), null == a && (a = new Vec2(0, 0)), 1 == t.length) a.set(t[0]);
				else if (0 == e) a.set(t[0]);
				else if (1 == e) a.set(t[t.length - 1]);
				else {
					let i = (t.length - 1) * e,
						s = 0 | i,
						n = Math.ceil(i);
					s != n ? t[s].lerp(t[n], i - s, a) : a.set(t[n])
				}
				return a
			}
			Logger.error("GameUtility.LerpPath can't find point.")
		}
		static convertGridXToUiX(t) {
			return (t + .5) * GConfig.tile_width
		}
		static convertGridYToUiY(t) {
			return -(t + .5) * GConfig.tile_height
		}
		static convertGridToUi(t, e) {
			return e || (e = new Laya.Vector2), e.x = this.convertGridXToUiX(t.x), e.y = this.convertGridYToUiY(t.y), e
		}
		static convertUiToGrid(t, e) {
			return null == e && (e = new Laya.Vector2), e.x = 0 | t.x / GConfig.tile_width, e.y = 0 | -t.y / GConfig.tile_height, e
		}
		static getPriceString(t, e) {
			return e + db.get_item_db(t).name
		}
		static convertCoinString(t, e) {
			let a = e ? NUMBER_BMF : NUMBER_STR;
			if (t < 1e3) return (0 | t).toString(); {
				let e, i, s = 0 | Mathf.log(t),
					n = 0 | s / 3,
					o = NUMBER_DIGIT[s % 3];
				return e = a[n], i = NUMBER_RATE[n], Mathf.round(t / i, o) + e
			}
		}
		static convertCoinValue(t) {
			if (t < 1e3) return 0 | t; {
				let e = 0 | Mathf.log(t),
					a = 0 | e / 4,
					i = NUMBER_DIGIT[e % 4],
					s = NUMBER_RATE[a];
				return Mathf.round(t / s, i) * s
			}
		}
		static convertRot2Dir(t, e) {
			return null == e && (e = new Laya.Vector2), e.x = Math.sin(t * Mathf.Deg2Rad), e.y = -Math.cos(t * Mathf.Deg2Rad), e
		}
		static convertDir2Rot(t) {
			return move_forward.signAngle(t) * Mathf.Rad2Deg
		}
		static isIntervalOverlap(t, e, a, i) {
			return t > e && ([t, e] = [e, t]), a > i && ([a, i] = [i, a]), !(a > e || i < t)
		}
		static isLineRectInstersection(t, e, a) {
			if (t.y == e.y) return t.y <= a.bottom && t.y >= a.y && this.isIntervalOverlap(a.x, a.right, t.x, e.x);
			t.y > e.y && ([t, e] = [e, t]);
			let i, s, n, o, r = (e.x - t.x) / (e.y - t.y);
			return t.y < a.y ? i = r * ((s = a.y) - t.y) + t.x : (i = t.x, s = t.y), e.y > a.bottom ? n = r * ((o = a.bottom) - t.y) + t.x : (n = e.x, o = e.y), o >= s && this.isIntervalOverlap(a.x, a.right, n, i)
		}
		static isLineCanWalkable(t, e, a, i, s) {
			let n = Math.min(t, a),
				o = Math.max(t, a),
				r = Math.min(e, i),
				l = Math.max(e, i),
				c = Vec2.TEMPS[0];
			c.setValue(t + .5, e + .5);
			let h = Vec2.TEMPS[1];
			h.setValue(a + .5, i + .5);
			let d = Mathf.TempRect;
			for (let t = n; t <= o; t++)
				for (let e = r; e <= l; e++)
					if (d.setTo(t + .05, e + .05, .9, .9), this.isLineRectInstersection(c, h, d) && !s.isWalkable(t, e)) return !1;
			return !0
		}
		static optimizePath(t, e) {
			let a = [],
				i = null;
			for (let s = 0; s < t.length; s++) {
				let n = t[s],
					o = a[a.length - 1];
				o ? this.isLineCanWalkable(o.x, o.y, n.x, n.y, e) ? i = n : i ? (a.push(i), i = n) : a.push(n) : a.push(n)
			}
			return i && (a.push(i), i = null), a
		}
		static getPointInPath(t, e, a = !1, i) {
			if (0 != t.length) {
				if (null == i && (i = new Vec2(0, 0)), 1 == t.length) i.set(t[0]);
				else if (e <= 0) a ? i.set(t[t.length - 1]) : i.set(t[0]);
				else {
					let s, n, o;
					a ? (s = t.length - 1, n = 0, o = -1) : (s = 0, n = t.length - 1, o = 1);
					let r = Vec2.TEMP;
					do {
						let a = t[s],
							n = t[s += o];
						r.set(a);
						let l = r.subSelf(n).mag();
						if (e <= l) return a.lerp(n, e / l, i), i;
						e -= l
					} while (s != n);
					i.set(t[n])
				}
				return i
			}
			Logger.error("GameUtility.pointInDistance can't find point.")
		}
		static getTimeStr(t) {
			t = Math.ceil(t);
			let e = Math.floor(t / 60);
			if (e <= 60) return e > 0 ? 0 == (t -= 60 * e) ? `${e}分钟` : `${e}分钟${t}秒` : t + "秒"; {
				let t = Math.floor(e / 60);
				return (e -= 60 * t) > 0 ? `${t}小时${e}分钟` : t + "小时"
			}
		}
	}
	class CurrencyBar extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/CurrencyBar.json", this._exportNodeInfo = {
				cc_buttonCoin: "UIButton",
				cc_coinIcon: "Laya.Sprite",
				cc_coinCount: "Laya.Label",
				cc_coinAdd: "Laya.Sprite",
				cc_buttonDiamon: "UIButton",
				cc_diamondIcon: "Laya.Sprite",
				cc_diamondCount: "Laya.Label",
				cc_diamondAdd: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			mgrAlert.uiCoinPos || (this.tryRefreshIconPos(), this.scheduleOnce(2.5, this.tryRefreshIconPos)), this.context, this.refreshCoin(), this.refreshDiamond(), this.onMsgCopChange(), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemchange.bind(this),
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgItemchange(t) {
			switch (t.itemId) {
				case "1001":
					this.refreshCoin();
					break;
				case "1000":
					this.refreshDiamond()
			}
		}
		onMsgCopChange() {
			this.coinAdd.visible = mgrAlert.isCoinGiftEnable, this.diamondAdd.visible = mgrAlert.isDiamondGiftEnable
		}
		tryRefreshIconPos() {
			if (!this.callable) return this.safeCall(this.tryRefreshIconPos);
			let t = mgrPanel.getLayerNode(PANEL_LAYER.UI),
				e = this.coinIcon.localToGlobal(new Laya.Point(22, 22), !1, t),
				a = this.diamondIcon.localToGlobal(new Laya.Point(22, 22), !1, t);
			mgrAlert.initCurrencyIconPosition(e, a, null)
		}
		moveIn(t) {
			if (!this.callable) return this.safeCall(this.moveIn, t);
			cc.tween(this.resNode).to(.3, {
				y: 0
			}, cc.OPTION.BACK_OUT).call(() => {
				this.tryRefreshIconPos(), t && t()
			}).start()
		}
		moveOut() {
			if (!this.callable) return this.safeCall(this.moveOut);
			cc.tween(this.resNode).to(.3, {
				y: -150
			}, cc.OPTION.SINE_OUT).start()
		}
		refreshCoin() {
			let t = Math.floor(BaseFacade.mItem.getItemCount("1001"));
			console.log("物品数量", t), this.coinCount.text = GameUtility.convertCoinString(t, !1)
		}
		refreshDiamond() {
			this.diamondCount.text = GameUtility.convertCoinString(BaseFacade.mItem.getItemCount("1000"), !1)
		}
		on_click_buttonCoin() {
			mgrAlert.alertNotEnough("1001", !1)
		}
		on_click_buttonDiamon() {
			mgrAlert.alertNotEnough("1000", !1)
		}
	}
	class EggButterfly extends GModel {
		constructor(t, e = 15) {
			super(db.MODEL_DB_ID.hudie2), this.isDead = !1, this.curve = t, this.leftTime = e, this.lifeTime = e, this.initPaint(), this.playAnim(MODEL_ANIM.HUDIE_IDLE, 0, !0), this.setScale(.5, .5, .5), this.callIfLoaded(() => {
				Timer.callLoopFrame(1, this.update.bind(this), this)
			}), this.create()
		}
		update() {
			let t = Timer.deltaTime,
				e = 1 - this.leftTime / this.lifeTime;
			if (this.curve.getPosition(e, Mathf.TEMP_VEC3, !0), this.setWorldPosition(Mathf.TEMP_VEC3), this.isLoaded) {
				let t = this.transform.localPositionX,
					e = t - this.lastX;
				this.lastX = t;
				let a = e > 0 ? -20 : 20;
				this.eulerY != a && (this.eulerY = a, this.transform.localRotationEulerY = a)
			}
			this.leftTime -= t, this.leftTime < 0 && (this.leftTime += this.lifeTime)
		}
		kill(t) {
			if (this.isDead) return;
			this.isDead = !0, this.sharedMaterial.playDissolveOut(.5, .75, () => {
				this.destroyed || (this.hide(), t && t())
			});
			let e = _G.poolManager.get(Particle, "109");
			e.setParent(this.getParent()), e.setWorldPosition(this.transform.position), e.setScale(.5, .5, .5), e.play(null, 1, 1)
		}
	}
	var Vector3$1 = Laya.Vector3,
		OPT_TYPE;
	class Curve {
		constructor(t) {
			this.points = t, this.points.unshift(t[0]), this.points.push(t[t.length - 1])
		}
		getPosition(t, e, a) {
			t = Mathf.clamp01(t);
			let i = this.points.length - 3;
			if (i <= 0) {
				let t = this.getPointPosition(0, a);
				return void e.setValue(t.x, t.y, t.z)
			}
			let s = Math.min(Math.floor(t * i), i - 1),
				n = t * i - s,
				o = this.getPointPosition(s, a),
				r = this.getPointPosition(s + 1, a),
				l = this.getPointPosition(s + 2, a),
				c = this.getPointPosition(s + 3, a);
			e.x = Curve.interpolate(n, o.x, r.x, l.x, c.x), e.y = Curve.interpolate(n, o.y, r.y, l.y, c.y), e.z = Curve.interpolate(n, o.z, r.z, l.z, c.z)
		}
		static interpolate(t, e, a, i, s) {
			return .5 * ((3 * a - e - 3 * i + s) * (t * t * t) + t * t * (2 * e - 5 * a + 4 * i - s) + (-e + i) * t + 2 * a)
		}
		getPointPosition(t, e) {
			return e ? this.points[t].position : this.points[t].localPosition
		}
		getLength(t) {
			let e = this.points;
			if (e.length < 3) return 0;
			let a = 0;
			for (var i = 1; i < e.length - 2; i++) {
				if (!e[1] || !e[i + 1]) return 0;
				a += t ? Vector3$1.distance(e[i].position, e[i + 1].position) : Vector3$1.distance(e[i].localPosition, e[i + 1].localPosition)
			}
			return a
		}
	}! function(t) {
		t[t.TU_FEI_ZAO = 0] = "TU_FEI_ZAO", t[t.SHUI_XI = 1] = "SHUI_XI", t[t.CA_GAN = 2] = "CA_GAN", t[t.HEI_TOU_TIE = 3] = "HEI_TOU_TIE", t[t.SI_HEI_TOU_TIE = 4] = "SI_HEI_TOU_TIE", t[t.FU_MIAN_MO = 5] = "FU_MIAN_MO", t[t.SI_MIAN_MO = 6] = "SI_MIAN_MO", t[t.XIU_MEI_MAO = 7] = "XIU_MEI_MAO", t[t.QU_DOU_YIN = 8] = "QU_DOU_YIN", t[t.SUCCESS = 9] = "SUCCESS"
	}(OPT_TYPE || (OPT_TYPE = {}));
	class PanelSkincare extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelSkincare.json", this._exportNodeInfo = {
				cc_topNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_levelNode: "Laya.Sprite",
				cc_barLevel: "UIBarMask",
				cc_labelLevel: "Laya.Label",
				cc_buttonFree: "UIButton",
				cc_bottomNode: "Laya.Sprite",
				cc_skincareBottomNode: "Laya.Sprite",
				cc_skincareLayout: "UIHVLayout",
				cc_bottomLeftNode: "Laya.Sprite",
				cc_buttonStartSkincare: "UIButton",
				cc_spriteStartSkincare: "Laya.Sprite",
				cc_optItemNode: "Laya.Sprite",
				cc_itemIcon: "Laya.Image",
				cc_lockNode: "Laya.Image",
				cc_buttonEmpty1: "UIButton",
				cc_buttonEmpty2: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_enter_play", ""), this.opts = [], this.bNeedItem = !1, this._optValue = [OPT_TYPE.TU_FEI_ZAO, OPT_TYPE.SHUI_XI, OPT_TYPE.CA_GAN, OPT_TYPE.HEI_TOU_TIE, OPT_TYPE.SI_HEI_TOU_TIE, OPT_TYPE.FU_MIAN_MO, OPT_TYPE.SI_MIAN_MO, OPT_TYPE.XIU_MEI_MAO, OPT_TYPE.QU_DOU_YIN, OPT_TYPE.SUCCESS], this.bFinishSkincare = !1, this._bHold = !1
		}
		addPreloadRes(t) {
			t.addPrefab2D("res/prefab/SkincareItem.json"), t.addModel("res/unity/Conventional/map_01.ls"), t.addModel(db.get_model_db("paopao").resPath), t.addModel(db.get_effect_db("101").res), t.addModel(db.get_effect_db("104").res), t.addModel(db.get_effect_db("105").res)
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonFree.node, "pnl_main_13.png"), mgrI18n.trySetI18nImage(this.spriteStartSkincare, "pnl_play_08.png"), this.roleLevel = new RoleLevel(this.barLevel, this.labelLevel), this.lockNode.visible = mgrGuide.dispatchGuide(GUD_EVENT.ENTER_SKINCARE), mgrGame.tryOpenPanelRankVideoTips(3), this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this)), this.scoreBar = new ScoreBar, this.scoreBar.setParent(this.topLeftNode), this.scoreBar.x = -100, this.scoreBar.hide(), this.skincareBottomNode.visible = !1, this.optItemNode.visible = !1, this.optItemNode.x = 100, this.bottomLeftNode.x = -150, this.topLeftNode.x = -150, this.playButtons = new PlayBottomNode({
				onOpenCallback: this.close.bind(this),
				curIndex: 0
			}), this.playButtons.setParent(this.bottomNode), this.playButtons.y = 200, this.currencyBar = new CurrencyBar, this.currencyBar.setParent(this.topNode), this.scheduleOnce(1.2, () => {
				this.playButtons.fadeIn(), UiHelper.playMoveIn(this.bottomLeftNode), UiHelper.playMoveIn(this.topLeftNode)
			}), UiHelper.registerTouchEvent(this.resNode, this.onTouchDown.bind(this), this.onTouchMove.bind(this), this.onTouchUp.bind(this)), this.optItemNode.on(Laya.Event.MOUSE_DOWN, this, this.onOptTouchDown), this.registerMsg({
				OPT_FINISH: this.onMsgOptFinish.bind(this),
				UI_SELECT_OPT_ITEM: this.onMsgSelectSkincareItem.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			if (this.stopProcMsg(), this.skincareItems)
				for (let t = 0; t < this.skincareItems.length; t++) this.skincareItems[t].dispose();
			if (this.opts) {
				for (let t = 0; t < this.opts.length; t++) this.opts[t] && this.opts[t].dispose();
				this.opts = null
			}
			if (this.douYinList)
				for (var t = 0; t < this.douYinList.length; t++) this.douYinList[t].dispose();
			if (this.zaMaoList) {
				for (t = 0; t < this.zaMaoList.length; t++) this.zaMaoList[t].dispose();
				this.zaMaoList = null
			}
			this.butterfly && this.butterfly.dispose(), this.playButtons && this.playButtons.dispose(), this.avatar && this.avatar.destroy(), this.room && this.room.dispose(), this.scoreBar && this.scoreBar.dispose(), this.roleLevel && this.roleLevel.dispose(), this.currencyBar && this.currencyBar.dispose(), this.instOrBanner.dispose(), mgrSdk.resetRecordState(), super.dispose(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELSKINCARE_BUTTONSTART), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELSKINCARE_BRUSH), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELSKINCARE_BUTTONCLOSE), mgrGuide.sendMsgKey("OPT_FINISH")
		}
		regGuide() {
			mgrGuide.registerGuideNode(GUD_REG_NODE.PANELSKINCARE_BUTTONSTART, this.buttonStartSkincare.node, !0), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELSKINCARE_BRUSH, this.itemIcon, !0), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELSKINCARE_BUTTONCLOSE, this.buttonClose.node, !0)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgOptFinish() {
			switch (console.log("onMsgOptFinish"), this.curSelectItemId ? (mgrSkincare.finishOpt(this.curSelectItemId), this.curSelectItemId = null) : mgrSkincare.skincareScore += 20, this.optType) {
				case OPT_TYPE.TU_FEI_ZAO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2207, 1);
					break;
				case OPT_TYPE.SHUI_XI:
					_G.isGuiding || GameStatistics.statisCommonEvent(2208, 1);
					break;
				case OPT_TYPE.CA_GAN:
					_G.isGuiding || GameStatistics.statisCommonEvent(2209, 1);
					break;
				case OPT_TYPE.HEI_TOU_TIE:
					_G.isGuiding || GameStatistics.statisCommonEvent(2220, 1);
					break;
				case OPT_TYPE.SI_HEI_TOU_TIE:
					_G.isGuiding || GameStatistics.statisCommonEvent(2230, 1);
					break;
				case OPT_TYPE.FU_MIAN_MO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2210, 1);
					break;
				case OPT_TYPE.SI_MIAN_MO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2231, 1);
					break;
				case OPT_TYPE.XIU_MEI_MAO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2232, 1);
					break;
				case OPT_TYPE.QU_DOU_YIN:
					_G.isGuiding || GameStatistics.statisCommonEvent(2221, 1)
			}
			this.scoreBar.setValue(mgrSkincare.skincareScore, 0, new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2)), this.curOpt && (this.itemIcon.getComponent(UIDrag).cancelDrag(), this.onTouchUp(), this.switchOpt(), mgrGuide.sendMsgKey("OPT_FINISH"))
		}
		onMsgSelectSkincareItem(t) {
			if (t.optType == this.curOptType) {
				if (this.curSelectItemId == t.itemDb.id) return;
				let e = DbExt.getBrushId(t.itemDb);
				this.curOpt && this.curOpt.setBrush(e);
				let a = db.get_brush_db(e);
				if (this._brushDb = a, a) {
					a.holdOffset.length >= 2 && this.itemIcon.getComponent(UIDrag).setOffset(a.holdOffset[0], a.holdOffset[1]);
					let e = t.item.getIconPos(),
						i = UiHelper.getSelfGlobalPos(this.itemIcon);
					mgrAlert.openResWait(a.icon, RES_TYPE.IMAGE, () => {
						this.destroyed || UiHelper.playImageScaleAndJump(a.icon, e, i, null, () => {
							this.destroyed || (this.itemIcon.skin = a.icon)
						})
					})
				}
				this.curSelectItemId = t.itemDb.id;
				let i = null;
				switch (this.curOptType) {
					case OPT_TYPE.TU_FEI_ZAO:
						_G.isGuiding || GameStatistics.statisCommonEvent(2207, 0), i = GUD_EVENT.OPT_IDLE_TU_LIAN;
						break;
					case OPT_TYPE.SHUI_XI:
						_G.isGuiding || GameStatistics.statisCommonEvent(2208, 0), i = GUD_EVENT.OPT_IDLE_TU_LIAN;
						break;
					case OPT_TYPE.CA_GAN:
						_G.isGuiding || GameStatistics.statisCommonEvent(2209, 0), i = GUD_EVENT.OPT_IDLE_TU_LIAN;
						break;
					case OPT_TYPE.HEI_TOU_TIE:
						_G.isGuiding || GameStatistics.statisCommonEvent(2220, 0), i = GUD_EVENT.OPT_IDLE_TU_BI_ZI;
						break;
					case OPT_TYPE.SI_HEI_TOU_TIE:
						_G.isGuiding || GameStatistics.statisCommonEvent(2230, 0);
						break;
					case OPT_TYPE.FU_MIAN_MO:
						_G.isGuiding || GameStatistics.statisCommonEvent(2210, 0), i = GUD_EVENT.OPT_IDLE_TU_LIAN;
						break;
					case OPT_TYPE.SI_MIAN_MO:
						_G.isGuiding || GameStatistics.statisCommonEvent(2231, 0);
						break;
					case OPT_TYPE.XIU_MEI_MAO:
						_G.isGuiding || GameStatistics.statisCommonEvent(2232, 0), i = GUD_EVENT.OPT_IDLE_XIU_MEI_MAO;
						break;
					case OPT_TYPE.QU_DOU_YIN:
						_G.isGuiding || GameStatistics.statisCommonEvent(2221, 0), i = GUD_EVENT.OPT_IDLE_TU_LIAN
				}
				i && this.scheduleOnce(.05, function() {
					mgrGuide.dispatchGuide(i)
				})
			}
		}
		onMsgAdvShowSuc(t) {
			if ("one_click_interact" == t.advName) {
				let a = ["ty_douyin", "ty_heitou", "ty_mianmo", "ty_shuidi", "mianwen_zang", "heitoutie", "mianmo", "hf_toushi", "hf_taozhuang"];
				if (t.params.gameName == mgrI18n.getText("panelSkincare.1")) {
					for (let t = 0; t < a.length; ++t) mgrSkincare.finishOptAll(a[t]);
					if (this.skincareItems)
						for (let t = 0; t < this.skincareItems.length; t++) this.skincareItems[t].dispose();
					if (this.opts) {
						for (let t = 0; t < this.opts.length; t++) this.opts[t] && this.opts[t].dispose();
						this.opts = null
					}
					if (this.douYinList)
						for (var e = 0; e < this.douYinList.length; e++) this.douYinList[e].dispose();
					if (this.zaMaoList) {
						for (e = 0; e < this.zaMaoList.length; e++) this.zaMaoList[e].dispose();
						this.zaMaoList = null
					}
					this.avatar.setParts(mgrPart.partsWear, !1, null, !0), GameStatistics.statisCommonEvent(2213);
					let t = mgrSkincare.finishSkincare(!0);
					t && mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
						score: 100,
						xinQing: t
					})
				}
			}
		}
		onSceneLoaded() {
			if (this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToSkincare(), mgrSkincare.isXinQingFull) {
				var t = mgrPart.partsWear;
				this.avatar = new RoleAvatar(t, () => {
					Laya.timer.frameOnce(1, this, this.initNormal)
				})
			} else {
				if (_G.isGuiding) t = ["mianwen_zang", "ty_mianmo", "hf_taozhuang", "hf_toushi"];
				else t = ["mianwen_zang", "ty_heitou", "ty_mianmo", "hf_taozhuang", "hf_toushi"];
				this.avatar = new RoleAvatar(t, () => {
					Laya.timer.frameOnce(1, this, this.initHuFu)
				})
			}
			this.room.root.addChild(this.avatar)
		}
		initNormal() {
			this.avatar.playAnimation(MODEL_ANIM.HUFU_IDLE)
		}
		initHuFu() {
			this.avatar.playAnimation(MODEL_ANIM.HUFU_IDLE);
			let t = this.avatar.getView(db.MODEL_DB_ID.ty_heitou);
			if (t) {
				var e = t.model.getAnimator();
				e.speed = 1e-5, e.play(null, 0, 0)
			}
			let a = this.avatar.getView(db.MODEL_DB_ID.ty_mianmo).model.getAnimator();
			if (a.speed = 1e-5, a.play(null, 0, 0), Laya.timer.frameOnce(1, this, () => {
					e && (e.speed = 0), a.speed = 0
				}), _G.isGuiding) return;
			let i = [],
				s = OperateBase.FACE_ATTACH_NODE;
			Mathf.shuffle(s);
			for (var n = 0; n < 3; n++) {
				var o = new DouYinEffect(this.avatar.baseFace.findChild(s[n]), s[n]);
				i.push(o)
			}
			this.douYinList = i;
			let r = [];
			for (n = 1; n <= 12; n++) {
				var l = "ty_zamao" + String.format("%02d", n),
					c = db.get_model_db(l),
					h = new ZaMaoEffect(this.avatar.baseFace.findChild(c.attachNode), l);
				r.push(h)
			}
			this.zaMaoList = r
		}
		switchToSkincare() {
			cc.tween(this.levelNode).to(.3, {
				x: -120
			}).hide().start(), cc.tween(this.buttonStartSkincare.node).to(.3, {
				x: -150
			}).hide().start(), this.buttonFree.node.visible = !1, this.playButtons.fadeOut(() => {
				_G.isGuiding ? this._optSequence = [OPT_TYPE.TU_FEI_ZAO, OPT_TYPE.SHUI_XI, OPT_TYPE.CA_GAN, OPT_TYPE.FU_MIAN_MO, OPT_TYPE.SI_MIAN_MO, OPT_TYPE.SUCCESS] : (this._optSequence = this._optValue.slice(), this.checkColorEggs()), this.opts = [], SkincareItem.advCount = 0, this.switchOpt(), this.scoreBar.moveIn(), this.scoreBar.setValue(0), cc.tween(this.optItemNode).show().to(.3, {
					x: -139
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.skincareBottomNode).set({
					y: 50
				}).show().to(.3, {
					y: -155
				}).start()
			})
		}
		switchToMain() {
			this.buttonFree.node.visible = !0, cc.tween(this.levelNode).show().to(.3, {
				x: 5
			}).start(), cc.tween(this.buttonStartSkincare.node).show().to(.3, {
				x: 63
			}).start(), cc.tween(this.optItemNode).to(.3, {
				x: 100
			}, cc.OPTION.SINE_OUT).hide().start(), this.playButtons.fadeIn(() => {}, 2.5), this.scoreBar.moveOut(), cc.tween(this.skincareBottomNode).to(.3, {
				y: -155
			}).hide().start()
		}
		onTouchDown(t) {
			if (this.curOpt) {
				if (this.bNeedItem && !this.curSelectItemId && UiHelper.isTouched(this.itemIcon, 100)) return void mgrAlert.alertDialog(mgrI18n.getText("panelSkincare.2"));
				this.bNeedItem && UiHelper.isTouched(this.itemIcon, 100) && mgrGuide.sendMsgKey("TOUCH_DOWN_BRUSH"), this.curOpt.setHoldState(this._bHold), this._brushDb ? this.curOpt.refreshBrushOffset(this.itemIcon) : this.curOpt.refreshBrushOffset(null), this.curOpt.touchDown(), t.stopPropagation()
			}
		}
		onTouchMove() {
			this.curOpt && this.curOpt.touchMove()
		}
		onTouchUp() {
			this._bHold = !1, this.curOpt && this.curOpt.touchUp()
		}
		onOptTouchDown() {
			this._bHold = !0
		}
		switchOpt() {
			let t = this._optSequence.shift();
			this.optType = t, null != t && (this.curOpt = null, this.itemIcon.getComponent(UIDrag).cancelDrag(), this.createOpt(t))
		}
		createOpt(t) {
			if (!this.curOpt) {
				if (this.opts[t]) return void console.error("重复操作:" + t);
				switch (t) {
					case OPT_TYPE.TU_FEI_ZAO:
						this.curOpt = new OptFeiZao(this.avatar, this.room.scene, this.room.camera);
						break;
					case OPT_TYPE.SHUI_XI:
						let e = this.opts[OPT_TYPE.TU_FEI_ZAO].getFeiZaoData();
						this.curOpt = new OptShuiXi(this.avatar, this.room.scene, this.room.camera).setFeiZaoData(e).setItemIcon(this.itemIcon);
						break;
					case OPT_TYPE.CA_GAN:
						let a = this.opts[OPT_TYPE.SHUI_XI].getShuiDiEffects();
						this.curOpt = new OptCaGan(this.avatar, this.room.scene, this.room.camera).setShuiDiEffects(a);
						break;
					case OPT_TYPE.HEI_TOU_TIE:
						this.curOpt = new OptHeiTouTie(this.avatar, this.room.scene, this.room.camera);
						break;
					case OPT_TYPE.SI_HEI_TOU_TIE:
						this.curOpt = new OptSiHeiTouTie(this.avatar, this.room.scene, this.room.camera), this.scheduleOnce(.05, function() {
							mgrGuide.dispatchGuide(GUD_EVENT.OPT_IDLE_SI_MIAN_MO)
						});
						break;
					case OPT_TYPE.FU_MIAN_MO:
						this.curOpt = new OptFuMianMo(this.avatar, this.room.scene, this.room.camera);
						break;
					case OPT_TYPE.SI_MIAN_MO:
						this.curOpt = new OptSiMianMo(this.avatar, this.room.scene, this.room.camera), this.scheduleOnce(.05, function() {
							mgrGuide.dispatchGuide(GUD_EVENT.OPT_IDLE_SI_MIAN_MO)
						});
						break;
					case OPT_TYPE.XIU_MEI_MAO:
						this.curOpt = new OptXiuMeiMao(this.avatar, this.room.scene, this.room.camera).setZaMao(this.zaMaoList);
						break;
					case OPT_TYPE.QU_DOU_YIN:
						this.curOpt = new OptQuDouYin(this.avatar, this.room.scene, this.room.camera).setDouYin(this.douYinList);
						break;
					case OPT_TYPE.SUCCESS:
						return void this.onSkincareOver();
					default:
						return
				}
				this.curOptType = t, this.opts[t] = this.curOpt, this.updateSkincareItems()
			}
		}
		updateSkincareItems() {
			if (this.curSelectItemId = null, this.bNeedItem = !1, !this.skincareItems) {
				this.skincareItems = [];
				for (let t = 0; t < 3; t++) this.skincareItems[t] = new SkincareItem, this.skincareItems[t].setParent(this.skincareLayout);
				this.skincareLayout.updateLayout()
			}
			let t = mItem.getAllItem(2, 0, this.curOptType);
			if (3 != t.length) return this.optItemNode.visible = !1, void cc.tween(this.skincareLayout.node, !0).to(.2, cc.PROP.ALPHA0).hide().start();
			this.bNeedItem = !0, t.sort(sort_item_id_by_order);
			for (let e = 0; e < 3; e++) this.skincareItems[e].setItem(t[e]).setOptType(this.curOptType), this.skincareItems[e].setScale(0, 0), this.skincareItems[e].runTween(cc.tween().delay(.2 * e).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT));
			this.optItemNode.visible = !0, this.itemIcon.skin = null, mgrGuide.registerGuideNode(GUD_REG_NODE.PANELSKINCARE_ITEM0, this.skincareItems[0].node, !0), cc.tween(this.skincareLayout.node, !0).show().to(.2, cc.PROP.ALPHA1).start()
		}
		onSkincareOver() {
			this.bFinishSkincare = !0, mgrGuide.sendMsgKey("OPT_FINISH"), this.scheduleOnce(2.5, () => {
				let t = mgrSkincare.finishSkincare();
				t && mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
					score: mgrSkincare.skincareScore,
					xinQing: t
				})
			}), this.switchToMain(), mgrSound.playTalk("yllsd_07")
		}
		checkColorEggs() {
			if (mgrColorEggs.isEnable(COLOR_EGGS_QUEST.CLICK_BUTTERFLY) && !this.butterfly) {
				let t = this.room.butteryCurve,
					e = [];
				for (let a = 0; a < t.numChildren; a++) e.push(t.getChildAt(a).transform);
				let a = new Curve(e);
				this.butterfly = new EggButterfly(a), this.butterfly.setParent(this.room.scene), this.resNode.on(Laya.Event.MOUSE_DOWN, this, () => {
					if (this.butterfly.isLoaded && !this.butterfly.isDead) {
						let t = new Laya.Vector2(Laya.stage.mouseX, Laya.stage.mouseY),
							e = UiHelper.screenToRay(t, this.room.camera);
						Mathf.point2Ray(e.origin, e.direction, this.butterfly.transform.position) < .05 && (this.butterfly.kill(function() {
							mgrAlert.alertColorEggTip(EGGS_TYPE.CLASS)
						}), BaseFacade.mGoal.commit(ACTION_ID.EGG_CLICK_BUTTERFLY))
					}
				})
			}
		}
		static getBrushPos() {
			let t = new Laya.Point,
				e = mgrPanel.findPanel(PanelSkincare);
			return e ? UiHelper.getSelfGlobalPos(e.itemIcon, t) : t
		}
		static set lockTouch(t) {
			let e = mgrPanel.findPanel(PanelSkincare);
			e && (e.lockNode.visible = t)
		}
		static set lockTouch1(t) {
			let e = mgrPanel.findPanel(PanelSkincare);
			e && (e.buttonEmpty1.node.visible = t)
		}
		on_click_buttonClose() {
			switch (this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelMain), this.curOpt && GameStatistics.statisOnStageEnd(7508), this.optType) {
				case OPT_TYPE.TU_FEI_ZAO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2207, 2);
					break;
				case OPT_TYPE.SHUI_XI:
					_G.isGuiding || GameStatistics.statisCommonEvent(2208, 2);
					break;
				case OPT_TYPE.CA_GAN:
					_G.isGuiding || GameStatistics.statisCommonEvent(2209, 2);
					break;
				case OPT_TYPE.HEI_TOU_TIE:
					_G.isGuiding || GameStatistics.statisCommonEvent(2220, 2);
					break;
				case OPT_TYPE.SI_HEI_TOU_TIE:
					_G.isGuiding || GameStatistics.statisCommonEvent(2230, 2);
					break;
				case OPT_TYPE.FU_MIAN_MO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2210, 2);
					break;
				case OPT_TYPE.SI_MIAN_MO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2231, 2);
					break;
				case OPT_TYPE.XIU_MEI_MAO:
					_G.isGuiding || GameStatistics.statisCommonEvent(2232, 2);
					break;
				case OPT_TYPE.QU_DOU_YIN:
					_G.isGuiding || GameStatistics.statisCommonEvent(2221, 2)
			}
		}
		on_click_buttonStartSkincare() {
			_G.isGuiding || GameStatistics.statisCommonEvent(2206), _G.isGuiding ? (this.switchToSkincare(), mgrSkincare.startSkincare()) : this.bFinishSkincare ? mgrAlert.alertDialog(mgrI18n.getText("panelSkincare.3")) : mgrSkincare.checkPlayable(() => {
				this.switchToSkincare(), mgrSkincare.startSkincare()
			})
		}
		on_click_buttonFree() {
			mgrPart.openPanelRoom(ROOM_TYPE.NORMAL, null, this.close.bind(this))
		}
		on_click_buttonEmpty1() {}
		on_click_buttonEmpty2() {}
	}
	class Fish extends Laya.Sprite {
		constructor(t) {
			super(), this.speed = 100, this.dir = 1, this.isBlack = t, this.view = _G.poolManager.get(Spine, t ? db.SPINE_DB_ID.cj_jinyuhei : db.SPINE_DB_ID.jinyu), this.view.setParent(this), this.view.playDefaultAnim(), this.originAlpha = Mathf.random(2, 6) / 10, this.alpha = this.originAlpha, this.catchTime = Mathf.lerpFromInverseLerp(.1, .2, .6, .2, this.originAlpha), this.curTime = 0, this.bCatch = !1, this.startMove()
		}
		dispose() {
			this.view && (_G.poolManager.put(this.view), this.view = null), this.state = 0, this.destroy()
		}
		update() {
			0 == this.state && (this.bCatch || (this.curTime = 0, this.updateAttr()))
		}
		updateAttr() {
			this.curTime = Mathf.clamp(this.curTime, 0, this.catchTime), this.alpha = Mathf.lerp(this.originAlpha, 1, this.curTime / this.catchTime);
			let t = Mathf.lerpFromInverseLerp(.9, 1.2, .2, 1, this.alpha);
			this.scale(t, t, !0)
		}
		tryCol(t, e) {
			let a = !1;
			return 0 == this.state && (Mathf.distanceSqr2(this.x - t, this.y - e) < 8100 ? (this.curTime += Timer.deltaTime, a = !0) : this.curTime -= Timer.deltaTime, this.updateAttr(), this.curTime >= this.catchTime && this.dead()), a
		}
		randomMoveImm() {
			this.randomMove(!0)
		}
		get isDead() {
			return 1 == this.state
		}
		startMove() {
			this.state = 0;
			let t = this.randomPos();
			this.pos(t.x, t.y, !0), this.randomMove()
		}
		randomMove(t = !1) {
			let e = this.randomPos(),
				a = e.distance(this.x, this.y),
				i = Mathf.lerpFromInverseLerp(1, 2, 0, 450, a) + Mathf.random(20, 50) / 100;
			t && (i *= .7), Vec2.TEMP.setValue(e.x - this.x, e.y - this.y);
			let s = GameUtility.convertDir2Rot(Vec2.TEMP) + 180;
			cc.tween(this, !0).parallel(cc.tween().to(.1 * i, {
				rotation: s
			}), cc.tween().to(i, {
				x: e.x,
				y: e.y
			}, t ? cc.OPTION.SINE_OUT : cc.OPTION.SINE_IN_OUT)).delay(Mathf.random(10, 30) / 10).call(this.moveFinish.bind(this)).start()
		}
		moveFinish() {
			0 == this.state && this.randomMove()
		}
		randomPos(t) {
			return t || (t = new Laya.Point), t.setTo(Mathf.random(-180, 180), Mathf.random(-90, 90))
		}
		fadin() {}
		dead() {
			this.state = 1, this.view.setTimeScale(5);
			let t = UiHelper.getSelfGlobalPos(this, new Laya.Point);
			mgrAlert.playParticleEffect("139", t, 2, .5), _G.sendMsg("CATCH_FISH_START", this), Laya.timer.once(1e3, this, () => {
				this.destroyed || (_G.sendMsg("CATCH_FISH", this), this.visible = !1)
			})
		}
	}
	class FishGame extends MsgHandler {
		constructor(t, e, a) {
			super(), this.destroyed = !1, this.bTouched = !1, this.fishs = [], this.fishCenter = t, this.headUp = e, this.headDown = a, this.headState = 2, a.alpha = 0, this.fishCenter.zOrder = -1, this.registerListeners({
				CATCH_FISH: this.onMsgCatchFish.bind(this),
				CATCH_FISH_START: this.onMsgCatchStart.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.destroyed = !0, Laya.timer.clearAll(this), this.stopProcMsg();
			for (let t = this.fishs.length - 1; t >= 0; t--) this.fishs[t].dispose();
			this.fishs.length = 0
		}
		onMsgCatchFish(t) {
			this.createNormal()
		}
		onMsgCatchStart() {
			this.onTouchEnd()
		}
		update() {
			switch (this.headState) {
				case 1:
					this.headDown.alpha = Mathf.clamp01(this.headDown.alpha + .05), this.headUp.alpha = 1 - this.headDown.alpha, this.headDown.alpha >= 1 && (this.headState = 3);
					break;
				case 0:
					this.headUp.alpha = Mathf.clamp01(this.headUp.alpha + .05), this.headDown.alpha = 1 - this.headUp.alpha, this.headUp.alpha >= 1 && (this.headState = 2)
			}
			for (let t = this.fishs.length - 1; t >= 0; t--) this.fishs[t].update()
		}
		createNormal() {
			let t = new Fish(!1);
			this.fishCenter.addChild(t), this.fishs.push(t)
		}
		createBlack() {
			let t = new Fish(!0);
			this.fishCenter.addChild(t), this.fishs.push(t)
		}
		hasBlackFish() {
			for (let t = 0; t < this.fishs.length; t++)
				if (!this.fishs[t].isDead && this.fishs[t].isBlack) return !0;
			return !1
		}
		onTouchStart() {
			this.bTouched = !0, Laya.timer.loop(.1, this, this.onTouchMove);
			for (let t = this.fishs.length - 1; t >= 0; t--) this.fishs[t].randomMoveImm();
			_G.sendMsg("CATCH_FISH_TOUCH")
		}
		setLocalPos(t, e) {
			this.touchX = t, this.touchY = e
		}
		onTouchMove() {
			let t = this.touchX,
				e = this.touchY;
			if (this.bTouched) {
				if (Mathf.distance2(t, e) > 150 ? this.fadeUp() : this.fadeDown(), 3 == this.headState) {
					for (let t = this.fishs.length - 1; t >= 0; t--) this.fishs[t].bCatch = !1;
					let a = !1;
					for (let i = this.fishs.length - 1; i >= 0; i--)
						if (this.fishs[i].isBlack) {
							this.fishs[i].tryCol(t, e) && (this.fishs[i].bCatch = !0, a = !0);
							break
						} for (let i = this.fishs.length - 1; i >= 0; i--)
						if (!a && this.fishs[i].tryCol(t, e)) {
							this.fishs[i].bCatch = !0, a = !0;
							break
						}
				} else
					for (let t = this.fishs.length - 1; t >= 0; t--) this.fishs[t].bCatch = !1
			}
		}
		onTouchEnd() {
			Laya.timer.clear(this, this.onTouchMove), this.bTouched = !1;
			for (let t = this.fishs.length - 1; t >= 0; t--) this.fishs[t].bCatch = !1;
			this.fadeUp()
		}
		fadeDown() {
			1 != this.headState && 3 != this.headState && (this.headState = 1, this.fishCenter.zOrder = 1)
		}
		fadeUp() {
			0 != this.headState && 2 != this.headState && (this.headState = 0, this.fishCenter.zOrder = -1)
		}
	}
	const KEY_DREAM_DATA = "KEY_DREAM_DATA",
		KEY_DREAM_STORY_DATA = "KEY_DREAM_STORY_DATA";

	function sort_role_id_by_order(t, e) {
		return Tools.sort_db_by_order(db.get_role_db(t), db.get_role_db(e))
	}
	class mgrDream extends _mgrBase {
		static onload() {
			this.storyAdvUnlock = FileRecord.getData(KEY_DREAM_DATA), this.storyAdvUnlock || (this.storyAdvUnlock = {}), this._storyWatch = FileRecord.getData(KEY_DREAM_STORY_DATA), this._storyWatch || (this._storyWatch = {})
		}
		static saveData() {
			FileRecord.setData(KEY_DREAM_DATA, this.storyAdvUnlock), FileRecord.setData(KEY_DREAM_STORY_DATA, this._storyWatch)
		}
		static getAllRole() {
			let t = db.get_role_db_map(),
				e = Object.keys(t);
			for (let t = e.length - 1; t >= 0; t--) {
				0 == db.get_role_db(e[t]).suits.length && e.splice(t, 1)
			}
			return e
		}
		static randomNextPart(t) {
			let e = db.get_suit_db(t).lotteryParts,
				a = Mathf.random(e.length);
			for (let t = 0; t < e.length; t++) {
				let i = (t + a) % e.length;
				if (!BaseFacade.mItem.isOwned(e[i])) return e[i]
			}
			return null
		}
		static getRoleIdFromSuit(t) {
			let e = db.get_role_db_map(),
				a = null;
			return Tools.forEachMap(e, function(e, i) {
				for (let s = i.suits.length - 1; s >= 0; s--)
					if (i.suits[s] == t) return a = e, !0
			}), a
		}
		static canGetPart(t) {
			if (!t) return !1;
			let e = db.get_suit_db(t).lotteryParts;
			for (let t = e.length - 1; t >= 0; t--)
				if (!BaseFacade.mItem.isOwned(e[t])) return !0;
			return !1
		}
		static isUnlockSuit(t) {
			let e = this.getRoleIdFromSuit(t),
				a = db.get_role_db(e);
			a.suits.indexOf(t);
			return 0
		}
		static hasPartCount(t) {
			if (!t) return 0;
			let e = 0,
				a = db.get_suit_db(t).lotteryParts;
			for (let t = a.length - 1; t >= 0; t--) BaseFacade.mItem.isOwned(a[t]) && e++;
			return e
		}
		static getNextPrice(t) {
			let e = this.hasPartCount(t),
				a = db.get_suit_db(t);
			return e >= a.prices.length ? a.prices[0] : a.prices[e]
		}
		static getAllPartCount(t) {
			let e = db.get_role_db(t),
				a = 0;
			for (let t = 0; t < e.suits.length; t++) {
				a += db.get_suit_db(e.suits[t]).lotteryParts.length
			}
			return a
		}
		static getRoleHeard(t) {
			let e = db.get_role_db(t),
				a = 0;
			for (let t = 0; t < e.suits.length; t++) a += this.hasPartCount(e.suits[t]);
			return a
		}
		static get isTip() {
			let t = this.getAllRole();
			for (var e = 0; e < t.length; e++)
				if (this.checkRoleTip(t[e])) return !0;
			return !1
		}
		static checkRoleTip(t) {
			let e = db.get_role_db(t);
			for (var a = 0; a < e.suits.length; a++)
				if (this.checkSuitTip(e.suits[a])) return !0;
			return !1
		}
		static checkSuitTip(t) {
			if (0 == this.isUnlockSuit(t))
				if (this.canGetPart(t)) {
					if (BaseFacade.mItem.enoughItem("1001", this.getNextPrice(t))) return !0
				} else {
					let e = db.get_suit_db(t);
					if (!this.isWatchedStroy(e.talkId)) return !0
				} return !1
		}
		static hasSuit(t) {
			return !this.canGetPart(t)
		}
		static isAdvUnlockStory(t) {
			return !!mgrAdv.getActive("unlock_story") && !!this.storyAdvUnlock[t]
		}
		static unlockStoryByAdv(t) {
			this.storyAdvUnlock[t] = 1, this.saveData()
		}
		static isWatchedStroy(t) {
			return !!(this._storyWatch[t] && this._storyWatch[t] > 0)
		}
		static WatchStory(t) {
			this._storyWatch[t] = 1, this.saveData()
		}
	}
	class PanelFishGame extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelFishGame.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_listNode: "Laya.Image",
				cc_template: "Laya.Sprite",
				cc_scrollView: "ReuseScrollList",
				cc_gameNode: "Laya.Sprite",
				cc_touchNode: "Laya.Sprite",
				cc_circleDownNode: "Laya.Sprite",
				cc_circleUpNode: "Laya.Sprite",
				cc_gameCenter: "Laya.Sprite",
				cc_finishNode: "Laya.Label",
				cc_buttonFind: "UIButton",
				cc_priceLabel: "Laya.Label",
				cc_labelUnlock: "Laya.Label",
				cc_buttonPre: "UIButton",
				cc_buttonNext: "UIButton",
				cc_topNode: "Laya.Sprite",
				cc_rightNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_fish_game", ""), this.suitIds = [], this.guideFinger = null, this.lastTouchTime = 0, this.moveCommonEvent = !1
		}
		addPreloadRes(t) {
			let e = this.context,
				a = db.get_suit_db(e);
			mgrPart.addPartResList(a.parts, t)
		}
		buildUi() {
			this.currencyBar = new CurrencyBar, this.currencyBar.setParent(this.topNode), this.currencyBar.y = -150, this.topLeftNode.x = -150, this.listNode.x = 400;
			for (let t in db.get_role_db_map()) {
				let e = db.get_role_db_map()[t];
				e.suits.length > 0 && (this.suitIds = this.suitIds.concat(e.suits))
			}
			let t = this.context,
				e = db.get_suit_db(t);
			if (e.fromDreamStatistics && GameStatistics.statisCommonEvent(e.fromDreamStatistics), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_FISH)) {
				let e = mgrDream.getNextPrice(t),
					a = BaseFacade.mItem.getItemCount("1001");
				a < e && BaseFacade.mItem.addItem("1001", e - a, null)
			}
			this.scrollView.onItemCreate = (() => {
				let t = new FishPartItem;
				return t.createFromNode(UiHelper.cloneSprite(this.template)), t
			}), this.scrollView.onItemChange = ((t, a) => {
				t.setData(e.lotteryParts[a])
			}), this.scrollView.updateList(e.lotteryParts.length), this.init3D(e.parts), this.refreshButton(), this.registerMsg({
				CATCH_FISH: this.onMsgCatchFish.bind(this),
				CATCH_FISH_TOUCH: this.onMsgCatchFishTouch.bind(this),
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.currencyBar && this.currencyBar.dispose(), this.scrollView && this.scrollView.clearAllItems(), this.fishGame && this.fishGame.dispose(), mgrSdk.resetRecordState(), this.storyTip && this.storyTip.dispose(), super.dispose(), mgrGuide.getCurGuideId() == GUD_EVENT.ENTER_FISH && _G.sendMsg("GUIDE_FORCE_CLOSE")
		}
		onDialogOpenAnim(t) {
			UiHelper.playMoveIn(this.topLeftNode, 0, .3, 1), cc.tween(this.listNode).delay(1).call(() => {
				this.currencyBar.moveIn(), t && t()
			}).to(.4, {
				x: 18
			}, cc.OPTION.BACK_OUT).start()
		}
		update() {
			this.fishGame && this.fishGame.update()
		}
		regGuide() {
			mgrGuide.registerGuideNode(GUD_REG_NODE.PANELFISH_BUTTONFIND, this.buttonFind.node, !0), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELFISH_TOUCHNODE, this.touchNode, !0)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgCatchFish(t) {
			this.guideFinger && this.guideFinger.hide(), cc.tween(this.touchNode).to(.2, cc.PROP.ALPHA0).hide().start(), t.isBlack ? (BaseFacade.mGoal.commit(ACTION_ID.EGG_GET_FISH), mgrAlert.alertColorEggTip(EGGS_TYPE.CLASS), BaseFacade.mItem.subItem("1001", this.curPrice, 31)) : mgrDream.canGetPart(this.context) ? mgrAlert.openPanelLoading(UI_NAME.PanelFishGet, this.context) : this.fishGame.hasBlackFish() && (BaseFacade.mItem.subItem("1001", this.curPrice, 31), mgrAlert.addAndAlert({
				itemId: "1001",
				count: Math.floor(this.curPrice / 2)
			}, 31)), this.refreshButton(), mgrGuide.sendMsgKey("CATCH_FISH"), GameStatistics.statisCommonEvent(3025)
		}
		onMsgCatchFishTouch() {
			this.avatar.playAnimation(MODEL_ANIM.LAOYU_LOOK, !1, MODEL_ANIM.LAOYU_IDLE)
		}
		onMsgItemChange(t) {
			2 == t.itemDb.type && 1 == t.itemDb.subType && (cc.clearTween(this.buttonFind.node), this.refreshButton(), this.scrollView.foreachItems(function(t) {
				t.refreshState()
			}), this.storyTip && this.storyTip.updateTip())
		}
		onMsgAdvShowSuc(t) {
			"unlock_story" == t.advName && (mgrDream.unlockStoryByAdv(t.params), mgrAlert.openGameLoading(UI_NAME.PanelStory, t.params))
		}
		fillData() {
			let t = this.context,
				e = db.get_suit_db(t);
			e.fromDreamStatistics && GameStatistics.statisCommonEvent(e.fromDreamStatistics), this.scrollView.onItemChange = ((t, a) => {
				t.setData(e.lotteryParts[a])
			}), this.storyTip && this.storyTip.setChecker(function() {
				return mgrDream.hasSuit(t) && !mgrDream.isWatchedStroy(e.talkId) ? 0 : -1
			}), this.scrollView.updateList(e.lotteryParts.length), this.avatar.setParts(e.parts, !1, null, !0), this.refreshButton()
		}
		init3D(t) {
			this.createScene3DBack(1, 35), this.camera.transform.localPosition = new Laya.Vector3(.22, 1.45, 3.2), this.camera.transform.localRotationEuler = new Laya.Vector3(-10, 0, 0), this.avatar = new RoleAvatar(t), this.avatar.transform.localPosition = new Laya.Vector3(0, 0, 0), this.avatar.transform.localRotationEuler = new Laya.Vector3(0, 15, 0), this.scene3DBack.addChild(this.avatar), this.avatar.playAnimation(MODEL_ANIM.LAOYU_IDLE);
			let e = this.addEffect("144"),
				a = this.node2Camera(this.centerNode);
			e.play(a);
			let i = this.addEffect("135");
			i.setScale(1, 1, 1), i.followTarget(this.touchNode, this.cameraEffect, 110, 40), i.play(), i.hide(), this.guideFinger = i, this.lastTouchTime = Timer.time, Timer.callLoop(1, t => {
				this.guideFinger && (_G.isGuiding || (this.destroyed || this.touchNode.destroyed ? t.stop() : this.touchNode.visible && Timer.time - this.lastTouchTime >= 5 ? this.guideFinger.show() : (this.touchNode.visible || (this.lastTouchTime = Timer.time), this.guideFinger.hide())))
			}, this), this.initTouch()
		}
		initTouch() {
			var t = () => {
				let t = Laya.Point.TEMP;
				UiHelper.getSelfGlobalPos(this.circleDownNode, t), this.gameCenter.globalToLocal(t, !1), this.fishGame.setLocalPos(t.x, t.y)
			};
			UiHelper.registerTouchEvent(this.touchNode, () => {
				this.lastTouchTime = Timer.time, this.guideFinger.hide(), cc.clearTween(this.touchNode), this.fishGame.onTouchStart(), t(), mgrGuide.sendMsgKey("TOUCH_DOWN_FISH")
			}, () => {
				this.fishGame.bTouched && (t(), this.moveCommonEvent || (this.moveCommonEvent = !0, GameStatistics.statisCommonEvent(3024))), this.lastTouchTime = Timer.time
			}, () => {
				this.fishGame.onTouchEnd(), this.lastTouchTime = Timer.time
			}), this.fishGame = new FishGame(this.gameCenter, this.circleUpNode, this.circleDownNode), this.fishGame.createNormal(), this.fishGame.createNormal(), this.fishGame.createNormal(), mgrColorEggs.isEnable(COLOR_EGGS_QUEST.GET_FISH) ? (this.fishGame.createBlack(), this.refreshButton()) : this.fishGame.createNormal(), this.touchNode.alpha = 0, this.touchNode.visible = !1
		}
		refreshButton() {
			mgrDream.canGetPart(this.context) || this.fishGame.hasBlackFish() ? (this.buttonFind.node.visible = !0, this.curPrice = mgrDream.getNextPrice(this.context), this.priceLabel.text = this.curPrice + "", this.finishNode.visible = !1, cc.tween(this.buttonFind.node, !0).show().to(.1, cc.PROP.ALPHA1).start(), UiHelper.playBreathe(this.buttonFind.node)) : (this.buttonFind.node.visible = !1, this.finishNode.visible = !0), this.labelUnlock.visible = !1
		}
		static getTouchPos() {
			let t = new Laya.Point(40, 60),
				e = mgrPanel.findPanel(PanelFishGame);
			return e ? e.touchNode.localToGlobal(t, !1) : t
		}
		static getGameCenterPos() {
			let t = new Laya.Point,
				e = mgrPanel.findPanel(PanelFishGame);
			return e ? UiHelper.getSelfGlobalPos(e.gameCenter, t) : t
		}
		static getFishSprite() {
			let t = mgrPanel.findPanel(PanelFishGame);
			if (t) return t.fishGame.fishs[0]
		}
		on_click_buttonFind() {
			GameStatistics.statisCommonEvent(3023), this.moveCommonEvent = !1, BaseFacade.mItem.enoughItem("1001", this.curPrice) ? (cc.tween(this.touchNode).show().to(.3, cc.PROP.ALPHA1).call(() => {
				UiHelper.playRotCycle(this.touchNode)
			}).start(), cc.tween(this.buttonFind.node, !0).to(.1, cc.PROP.ALPHA0).hide().start(), mgrSdk.tryStartRecord()) : mgrAlert.alertNotEnough("1001")
		}
		on_click_buttonClose() {
			_G.isGuiding || this.close()
		}
		on_click_buttonPre() {
			if (this.suitIds && this.suitIds.length > 0) {
				let t = this.suitIds.indexOf(this.context);
				(t = (t - 1) % this.suitIds.length) < 0 && (t += this.suitIds.length), this.context = this.suitIds[t], this.fillData()
			}
		}
		on_click_buttonNext() {
			if (this.suitIds && this.suitIds.length > 0) {
				let t = this.suitIds.indexOf(this.context);
				t = (t + 1) % this.suitIds.length, this.context = this.suitIds[t], this.fillData()
			}
		}
	}
	class FishPartItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "FishPartItem"
		}
		onCreateComplete() {
			this.getted = this.getChildSprite("getted"), this.icon = this.getChildSprite("icon"), this.stars = this.getChildSprite("stars").addComponent(UIHVLayout), this.stars.itemSize = 28, this.resNode.alpha = 0, UiHelper.playFadein(this.resNode)
		}
		setData(t) {
			this.partId = t;
			let e = db.get_item_db(t);
			this.icon.loadImage(e.icon), UiHelper.setStars(this.stars, e.quality, 5), this.refreshState()
		}
		refreshState() {
			this.partId && (this.getted.visible = BaseFacade.mItem.isOwned(this.partId))
		}
	}
	class mgrMangHe extends _mgrBase {
		static onload() {
			this.mangHeData = FileRecord.getData("KEY_MANG_HE_DATA") || {}, this.mangHeData && Tools.isOneDay(Timer.now, this.mangHeData.time) || (this.mangHeData = {
				count: 0,
				indexs: [],
				time: Timer.now
			}, this.saveData())
		}
		static saveData() {
			FileRecord.setData("KEY_MANG_HE_DATA", this.mangHeData)
		}
		static get maxCount() {
			return mgrAdv.getActive("open_manghe") ? mgrAdv.getMaxCount("open_manghe") + 1 : 1
		}
		static get showMaxCount() {
			return mgrAdv.getMaxCount("open_manghe") + 1
		}
		static get count() {
			return this.mangHeData.count
		}
		static set count(t) {
			this.mangHeData.count = t, this.saveData()
		}
		static isOpened(t) {
			return !this.mangHeData.indexs[t]
		}
		static openIndex(t) {
			this.mangHeData.indexs[t] = 1, this.count++
		}
		static getRandomItem() {
			let t = db.game_cnf.mang_he_show_suits.length,
				e = Mathf.random(t);
			for (var a = 0; a < t; a++)
				for (var i = (a + e) % t, s = db.get_suit_db(db.game_cnf.mang_he_show_suits[i]).lotteryParts, n = s.length, o = Mathf.random(n), r = 0; r < s.length; r++) {
					var l = (r + o) % n;
					if (!BaseFacade.mItem.isOwned(s[l])) return {
						itemId: s[l],
						count: 1
					}
				}
			return null
		}
		static canGetItem() {
			for (let t = 0; t < db.game_cnf.mang_he_show_suits.length; t++) {
				let e = db.get_suit_db(db.game_cnf.mang_he_show_suits[t]).lotteryParts;
				for (let t = 0; t < e.length; t++)
					if (!BaseFacade.mItem.isOwned(e[t])) return !0
			}
			return !1
		}
	}
	class PanelMangHe extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelMangHe.json", this._exportNodeInfo = {
				cc_topNode: "Laya.Sprite",
				cc_sprite01: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_leftSprite: "Laya.Image",
				cc_buttonLeftSee: "UIButton",
				cc_buttonClose: "UIButton",
				cc_topRightNode: "Laya.Sprite",
				cc_rightSprite: "Laya.Image",
				cc_buttonRightSee: "UIButton",
				cc_buttonColorEggClock: "UIButton",
				cc_labelReward: "Laya.Label",
				cc_labelRewardTip: "Laya.Label",
				cc_labelRewardMax: "Laya.Label",
				cc_labelRewardCount: "Laya.Label"
			}, this.instOrBanner = new AdvInstOrBanner("enter_mohe", ""), this.enterMainWhenClose = !0
		}
		addPreloadRes(t) {
			t.addModel("res/unity/Conventional/manghe.ls"), t.addPrefab2D("res/ui/PanelMangHe.json"), t.addPrefab2D("res/ui/PanelMangHeOpen.json"), t.addModel(db.get_model_db(db.MODEL_DB_ID.manghe).resPath), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.MH_IDLE1).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.MH_IDLE2).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.MH_OPEN).path)
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.sprite01, "pnl_manghe_01.png"), 0 == mgrMangHe.count && mgrGuide.dispatchGuide(GUD_EVENT.ENTER_MANGHE) || GameStatistics.statisCommonEvent(3080), mgrGame.tryOpenPanelRankVideoTips(1), GameStatistics.statisOnStageStart(7501), this.updateSuitInfo(), Laya.Scene3D.load("res/unity/Conventional/manghe.ls", Laya.Handler.create(this, this.onSceneLoaded)), this.RewardText(), this.checkColorEgg(), this.registerMsg({
				OPEN_MANG_HE_SUC: this.onMsgOpenMangHeSuc.bind(this),
				OPEN_MANG_HE_FINISH: this.onMsgOpenMangHeFinish.bind(this),
				MANG_HE_RESET: this.onMsgMangheReset.bind(this),
				JUMP_PANEL_BEFORE: this.onMsgJumpPanelBefore.bind(this)
			}), this.startProcMsg(), this.labelRewardMax.visible = !1, this.labelRewardCount.visible = !1
		}
		RewardText() {
			let t = mgrAdv.getLeftCount("open_manghe");
			0 == mgrMangHe.count && t++, t = Mathf.clamp(t, 0, mgrMangHe.showMaxCount), this.labelRewardTip.text = String.format(mgrI18n.getText("panelMangHe.1"), `${t}/${mgrMangHe.showMaxCount}`), console.log("this.labelRewardTip.text", this.labelRewardTip.text)
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.scene && this.scene.destroy(), super.dispose(), mgrSdk.resetRecordState(), this.enterMainWhenClose && mgrGame.tryEnterMain(), GameStatistics.statisOnStageEnd(7501)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgOpenMangHeSuc() {
			null != this.curSelectBoxIndex && (mgrMangHe.openIndex(this.curSelectBoxIndex), this.curSelectBoxIndex = null), this.RewardText()
		}
		onMsgOpenMangHeFinish() {
			this.curSelectBoxIndex, this.RewardText()
		}
		onMsgMangheReset() {
			if (null != this.curSelectBoxIndex) {
				this.scene.getChildByName("manghe" + this.curSelectBoxIndex).active = !0
			}
			this.RewardText()
		}
		onMsgJumpPanelBefore() {
			this.enterMainWhenClose = !1
		}
		updateSuitInfo() {}
		onSceneLoaded(t) {
			if (this.isDisposed) return void t.destroy();
			this.scene = t, this.resNode.addChildAt(t, 4), this.camera = this.scene.getChildByName("MainCamera"), this.camera.clearFlag = 2, this.camera.enableHDR = !1;
			let e = this.scene.getChildByName("col1");
			this.col1 = new Laya.Point, UiHelper.worldToScreen(this.camera, e.transform.position, this.col1), e = this.scene.getChildByName("col2"), this.col2 = new Laya.Point, UiHelper.worldToScreen(this.camera, e.transform.position, this.col2), UiHelper.addClickEvent(this.resNode, this.onClickBg.bind(this));
			let a = this.scene.getChildByName("label"),
				i = new Laya.Point;
			UiHelper.worldToScreen(this.camera, a.transform.position, i), this.resNode.globalToLocal(i, !1), this.labelReward.y = i.y + 5, this.labelReward.x = i.x, console.log("QT_onSceneLoaded", screen.height, screen.availHeight, screen.width, screen.availWidth), console.log("QT_onSceneLoaded", this.labelReward.y, this.labelReward.x);
			for (let t = 0; t < 6; t++) {
				this.scene.getChildByName("manghe" + t).active = mgrMangHe.isOpened(t)
			}
		}
		onClickBg() {
			let t = Laya.stage.mouseX,
				e = Laya.stage.mouseY,
				a = 0,
				i = 0;
			if (a = t < this.col1.x ? 0 : t < this.col2.x ? 1 : 2, e > this.col1.y) i = 1;
			else {
				if (!(e > this.col1.y - 240)) return;
				i = 0
			}
			if (!mgrMangHe.canGetItem()) return void mgrAlert.alertDialog(mgrI18n.getText("panelMangHe.3"));
			let s = 3 * i + a;
			if (!mgrMangHe.isOpened(s)) return;
			if (mgrMangHe.count >= mgrMangHe.maxCount) return void mgrAlert.alertDialog(mgrI18n.getText("panelMangHe.4"));
			let n = this.scene.getChildByName("manghe" + s);
			this.curSelectBoxIndex = s, n.active = !1;
			let o = this.scene.getChildByName("destPos");
			console.log("click ", s), mgrGuide.sendMsgKey("CLICK_MANG_HE"), mgrAlert.openPanelLoading(UI_NAME.PanelMangHeOpen, {
				from: n.transform.position,
				to: o.transform.position,
				camera: this.camera
			}), mgrSdk.tryStartRecord()
		}
		checkColorEgg() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.HUAI_BIAO, EGGS_STEP.SECOND) || (this.buttonColorEggClock.node.visible = !1)
		}
		static getBoxPos() {
			let t = new Laya.Point,
				e = mgrPanel.findPanel(PanelMangHe);
			if (e) {
				let a = e.scene.getChildByName("manghe1");
				UiHelper.worldToScreen(e.camera, a.transform.position, t)
			}
			return t
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonLeftSee() {
			mgrPart.openPanelSuitDetal(db.game_cnf.mang_he_show_suits[0]), GameStatistics.statisCommonEvent(3076)
		}
		on_click_buttonRightSee() {
			mgrPart.openPanelSuitDetal(db.game_cnf.mang_he_show_suits[1]), GameStatistics.statisCommonEvent(3077)
		}
		on_click_buttonColorEggClock() {
			this.buttonColorEggClock.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggClock.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggClock.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.huai_biao)
		}
	}
	class RoomOutside extends RoomBase {
		constructor() {
			super(...arguments), this.resourceName = "res/unity/Conventional/map_02.ls", this.hudieFov = 45
		}
		onSceneLoaded(t) {
			this.lingGanCamera.getComponent(Laya.Animator).speed = 0, this.resetMat(t);
			let e = t.getChildByName("map_02").getChildByName("skybox");
			e.transform.localRotationEulerY = 0, this.skyBoxTween = cc.tween(e.transform).by(360, {
				localRotationEulerY: 360
			}).start()
		}
		resetMat(t) {
			if (t.allMaterial) return;
			let e = UiHelper.findAllMeshRenderers(t, null, !0);
			if (e) {
				let l = [];
				t.allMaterial = l, this.lingGanCamera.getComponent(Laya.Animator).getControllerLayer(0).playOnWake = !1;
				for (var a = 0; a < e.length; a++) {
					for (var i = e[a], s = i.sharedMaterials, n = [], o = 0; o < s.length; o++) {
						var r = s[o];
						if (r instanceof Laya.BlinnPhongMaterial) {
							let t = new LightMapMaterial;
							t.albedoTexture = r.albedoTexture, t.tilingOffset = r.tilingOffset, "map_02_06" == r.name ? t.renderMode = LightMapMaterial.RENDERMODE_CUTOUT : t.renderMode = LightMapMaterial.RENDERMODE_OPAQUE, n.push(t), l.push(t)
						} else n.push(r), l.push(r)
					}
					i.sharedMaterials = n
				}
			}
		}
		dispose() {
			if (this.skyBoxTween && this.skyBoxTween.stop(), this.scene) {
				this.switchToDay(!0);
				let t = this.lingGanCamera.getComponent(Laya.Animator);
				cc.clearTween(t)
			}
			this.mainPos && (_G.pool.put(this.mainPos), _G.pool.put(this.mainRot), this.mainPos = null, this.mainRot = null), super.dispose()
		}
		changeToMain() {
			this.camera || (this.createCamera(this.mainCamera), this.createRoot(this.mainNode), this.mainCamera.active = !1, this.lajiCamera.active = !1, this.lingGanCamera.active = !1, this.mainPos = _G.pool.get(Laya.Vector3), this.mainCamera.transform.localPosition.cloneTo(this.mainPos), this.mainRot = _G.pool.get(Laya.Quaternion), this.mainCamera.transform.localRotation.cloneTo(this.mainRot), this.mainFov = this.mainCamera.fieldOfView)
		}
		moveToLaji(t) {
			UiHelper.tweenCamera(this.camera, 1, this.lajiCamera.transform.localPosition, this.lajiCamera.transform.localRotation, this.lajiCamera.fieldOfView, cc.Ease.sineIn, t)
		}
		moveToMain(t) {
			UiHelper.tweenCamera(this.camera, 1, this.mainPos, this.mainRot, this.mainFov, cc.Ease.sineIn, t)
		}
		mainToLingGan(t, e, a) {
			this.camera.active = !1, this.lingGanCamera.active = !0;
			e.playDissolveIn(.3333, .5);
			let i = this.lingGanCamera.getComponent(Laya.Animator);
			i.speed = 1e-5, i.play(null, 0, 0), cc.tween(i).to(2.833, {}, {
				onStart: function() {
					t.baseBody.setSpeed(1e-5), t.playAnimation(MODEL_ANIM.ZHUAN_SHEN)
				},
				onUpdate: (e, a) => {
					this.destroyed ? cc.clearTween(i) : (e.play(null, 0, .99 * a), t.baseBody.getAnimator().play(MODEL_ANIM.ZHUAN_SHEN, 0, a))
				},
				onComplete: function(e) {
					t.baseBody.setSpeed(1)
				}
			}).delay(1.2).call(function() {
				a && a()
			}).start()
		}
		lingGanToMain() {
			this.lingGanCamera.getComponent(Laya.Animator).speed = 0, this.lingGanCamera.active = !1, this.camera.active = !0
		}
		switchToNight() {
			let t = this.scene.allMaterial;
			for (var e = 0; e < t.length; e++) {
				var a = t[e];
				cc.tween(a, !0).to(.5, {}, {
					onUpdate: function(t, e) {
						var a = Mathf.lerp(t.albedoIntensity, .2, e);
						t.albedoIntensity = a
					}
				}).start()
			}
		}
		switchToDay(t = !1) {
			let e = this.scene.allMaterial;
			for (var a = 0; a < e.length; a++) {
				var i = e[a];
				t ? (i.albedoIntensity = 1, cc.clearTween(i)) : cc.tween(i, !0).to(.5, {}, {
					onUpdate: function(t, e) {
						var a = Mathf.lerp(t.albedoIntensity, 1, e);
						t.albedoIntensity = a
					}
				}).start()
			}
		}
		get hudieNode() {
			return this.scene.getChildByName("HuDieNode")
		}
		get mainCamera() {
			return this.scene.getChildByName("MainCamera")
		}
		get mainNode() {
			return this.scene.getChildByName("MainNode")
		}
		get lajiCamera() {
			return this.scene.getChildByName("LaJiCamera")
		}
		get lingGanCamera() {
			return this.scene.getChildByName("LingGanCamera1")
		}
	}
	class Butterfly {
		constructor(t, e) {
			this.destroyed = !1, this.lastX = 0, this.eulerY = 0, this.curve = t, this.view = _G.poolManager.get(GModel, db.MODEL_DB_ID.hudie), this.view.initPaint(), this.view.playAnim(MODEL_ANIM.HUDIE_IDLE, 0, !0), this.lifeTime = e, this.leftTime = this.lifeTime, this.startMove()
		}
		dispose() {
			this.destroyed = !0, this.view.sharedMaterial.setToNormal(), _G.poolManager.put(this.view), this.view = null
		}
		setParent(t) {
			this.view.setParent(t)
		}
		update(t) {
			if ((1 == this.state || 2 == this.state || 3 == this.state) && this.leftTime > 0) {
				let e = 1 - this.leftTime / this.lifeTime;
				if (this.curve.getPosition(e, Mathf.TEMP_VEC3, !0), this.view.setWorldPosition(Mathf.TEMP_VEC3), this.view.isLoaded) {
					let t = this.view.transform.localPositionX,
						e = t - this.lastX;
					this.lastX = t;
					let a = e > 0 ? -20 : 20;
					this.eulerY != a && (this.eulerY = a, this.view.transform.localRotationEulerY = a)
				}
				if (this.bLingGan && e > .5) return;
				this.leftTime -= t, this.leftTime <= 0 && 3 != this.state && this.fadeoutMove()
			}
		}
		tryCol(t) {
			if (this.touchabel && this.view && this.view.isLoaded) {
				let e = Laya.Point.TEMP;
				if (UiHelper.worldToScreen(t, this.view.node.transform.position, e), Mathf.distanceSqr2(e.x - Laya.stage.mouseX, e.y - Laya.stage.mouseY) < 3600) return this.kill(), !0
			}
			return !1
		}
		get position() {
			return this.view.resNode.transform.position
		}
		get isDead() {
			return 4 == this.state
		}
		get touchabel() {
			return 1 == this.state
		}
		startMove() {
			this.state = 1
		}
		kill() {
			1 == this.state && (this.fadeoutDead(), mgrOutside.addButterflyScore(), _G.sendMsg("CLICK_BUTTERFLY", this))
		}
		fadeoutDead() {
			this.state = 3, this.view.sharedMaterial.playDissolveOut(.5, .75, this.dead.bind(this)), Laya.timer.once(750, this, function() {
				mgrSound.playTalk("yllsd_12")
			})
		}
		fadeoutMove() {
			this.state = 2, cc.tween(this, !0).delay(.5).call(this.dead.bind(this)).start()
		}
		dead() {
			this.state = 4, this.view && this.view.removeFromParent()
		}
	}
	class ButterflyMaker extends MsgHandler {
		constructor(t, e, a) {
			super(), this.destroyed = !1, this.isDone = !1, this.isStart = !1, this.commonEvent = !1, this.butterflyRoot = t, this.camera = e, this.mobang = a, this.count = mgrOutside.curLingGanDb.butterflyCount, this.deltaTime = mgrOutside.curLingGanDb.butterflyDeltaTime, this.lifeTime = mgrOutside.curLingGanDb.butterflyLifeTime, this.leftMakeTime = 0, this.butterflys = [], this.effects = [], this.initCurve(t), this.registerListeners({
				CLICK_BUTTERFLY: this.onMsgClickButterfly.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.destroyed = !0, this.stopProcMsg(), cc.clearTween(this.mobang.transform), cc.clearTween(this);
			for (var t = 0; t < this.effects.length; t++) {
				var e = this.effects[t];
				e.isLoaded && cc.clearTween(e.resNode.transform), _G.poolManager.put(e)
			}
			this.effects.length = 0;
			for (t = 0; t < this.butterflys.length; t++) this.butterflys[t].dispose();
			this.butterflys = null
		}
		start() {
			this.isStart = !0
		}
		update(t) {
			if (this.isStart) {
				this.tryMake(t);
				for (var e = !0, a = this.butterflys.length - 1; a >= 0; a--) {
					var i = this.butterflys[a];
					i.update(t), i.isDead || (e = !1)
				}
				this.count <= 0 && e && (this.isDone = !0)
			}
		}
		onTouchDown() {
			for (var t = this.butterflys.length - 1; t >= 0; t--) this.butterflys[t].tryCol(this.camera) && (console.log("--------- ok"), this.commonEvent || (this.commonEvent = !0, GameStatistics.statisCommonEvent(3052)))
		}
		initCurve(t) {
			this.curves = [];
			for (let n = 0; n < t.numChildren; n++) {
				var e = [],
					a = t.getChildAt(n);
				if (~a.name.indexOf("curve")) {
					var i = a.numChildren;
					for (let t = 0; t < i; t++) e.push(a.getChildAt(t).transform);
					var s = new Curve(e);
					this.curves.push(s)
				}
			}
		}
		tryMake(t) {
			if (this.leftMakeTime -= t, this.leftMakeTime <= 0 && (this.leftMakeTime = this.deltaTime * Mathf.random(8, 12) / 10, this.count > 0)) {
				this.count--;
				let t = new Butterfly(this.curves[Mathf.random(this.curves.length) - 1], this.lifeTime);
				t.setParent(this.butterflyRoot), t.bLingGan = 0 == this.count, this.butterflys.push(t)
			}
		}
		onMsgClickButterfly(t) {
			this.mobang.playAnim("mozhang_anim-mz_atk0" + Mathf.random(2), 0, !1), this.mobang.playAnim("mozhang_anim-mz_atk0" + Mathf.random(2), 0, !1), cc.tween(this).delay(.45).call(() => {
				let e = _G.poolManager.get(Particle, "110");
				e.setParent(this.butterflyRoot);
				let a = UiHelper.findChild(this.mobang.node, "effect"),
					i = a.transform.position.clone();
				e.setPosition(i);
				let s = _G.poolManager.get(Particle, "111");
				s.setParent(a), s.play(), e.isLoaded ? (this.effects.push(e), e.play(null, .4, .5), cc.tween(e.resNode.transform, !0).to(.3, {}, {
					easing: cc.Ease.sineOut,
					onUpdate: function(e, a) {
						Laya.Vector3.lerp(i, t.position, a, Mathf.TEMP_VEC3), e.position = Mathf.TEMP_VEC3
					}
				}).call(() => {
					let a = _G.poolManager.get(Particle, "109");
					a.setParent(this.butterflyRoot), a.setWorldPosition(t.position), a.setScale(1, 1, 1), a.play(null, 1, 1);
					let i = this.effects.indexOf(e);
					~i && (e.stopAndPutback(), this.effects.splice(i, 1))
				}).delay(.3).call(function() {
					t.bLingGan && mgrAlert.openPanelLoading(UI_NAME.PanelLingGan)
				}).start()) : _G.poolManager.put(e)
			}).delay(.55).call(() => {
				this.mobang.playAnim("mozhang_anim-mz_idle")
			}).start()
		}
	}
	ButterflyMaker.MAP_WIDTH = 400;
	class LaJiMaker {
		constructor(t, e) {
			this.destroyed = !1, this.commonEvent = !1, this.bClicked = !1, this.root = new Laya.Sprite, this.avatar = t, this.followTransform = t.baseBody.findChild("Guadian_handr").transform, this.camera = e, t.on("Exit", this, this.onAnimExit);
			let a = this.root.addChild(new Laya.Sprite);
			this.animPlayer = new AnimatorFixedPlayer;
			let i = LaJiMaker.WIDTH / 4;
			this.laJiTongs = [], this.laJiTongViews = [];
			for (var s = 0; s < 4; s++) {
				var n = _G.poolManager.get(Spine, s < 2 ? db.SPINE_DB_ID.lajitong1 : db.SPINE_DB_ID.lajitong2);
				n.setParent(a), n.setPosition(2 * i, -12), n.setScale(s < 2 ? 1 : -1, 1), n.play("idle_0" + (s + 1)), n.setAlpha(0), n.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), this.laJiTongViews.push(n);
				var o = a.addChild(new Laya.Sprite);
				o.size(i, 250), o.pos(s * i, -250, !0), o.on(Laya.Event.CLICK, this, this.onClickTong, [o, n, s]), this.laJiTongs.push(o)
			}
			this.laJiTongViews[3].setBottom(), this.lajiRoot = this.root.addChild(new Laya.Sprite), this.root.addChild(new Laya.Sprite).loadImage("res/ui/pnl_outside/laji_front.png").pos(0, -267), this.leftTime = mgrOutside.curLajiLevelDb.eachTime, this.allLaJi = mgrOutside.createLaJi(), this.state = 1;
			let r = this.root.addChild(new Laya.Sprite),
				l = [mgrI18n.getText("laJiMaker.1"), mgrI18n.getText("laJiMaker.2"), mgrI18n.getText("laJiMaker.3"), mgrI18n.getText("laJiMaker.4")];
			for (s = 0; s < 4; s++) {
				let t = r.addChild(new Laya.Label);
				t.anchorX = .5, t.fontSize = 13, t.color = "#ffffff", t.text = l[s], t.pos((s + .5) * i, -110)
			}
		}
		dispose() {
			this.destroyed = !0, this.followTransform = null, this.avatar.offAllCaller(this), this.avatar = null, this.camera = null, this.animPlayer.dispose(), this.animPlayer = null, Laya.timer.clearAll(this);
			for (let t = 0; t < this.laJiTongViews.length; t++) _G.poolManager.put(this.laJiTongViews[t]);
			this.laJiTongViews = null, this.root.destroy(), this.root = null
		}
		updateTime(t) {
			return this.leftTime > 0 && (0 == this.state && (this.leftTime -= t), this.leftTime <= 0 && (this.leftTime = 0, this.onClickTong(null, null, -1))), this.leftTime
		}
		create(t) {
			if (!this.curLaJi) {
				if (0 == this.allLaJi.length) return this.avatar.playAnimation(MODEL_ANIM.LAJI_WANCHENG), void _G.sendMsg("LAJI_OVER", t);
				this.avatar.playAnimation(MODEL_ANIM.LAJI_IDLE, !0);
				let e = this.allLaJi.pop(),
					a = db.get_laji_db(e);
				this.curLaJiDb = a;
				let i = this.lajiRoot.addChild(new Laya.Sprite).loadImage(a.icon).scale(0, 0, !0).pivot(60, 60);
				if (i.alpha = 0, this.curLaJi = i, cc.tween(i).to(.3, {
						alpha: 1,
						scaleX: .65,
						scaleY: .65
					}, cc.OPTION.BACK_OUT).start(), this.leftTime = mgrOutside.curLajiLevelDb.eachTime, Laya.timer.frameLoop(1, this, this.updateLaJiPos, [i]), this.state = 0, _G.isGuiding) {
					this.leftTime = 1e5, mgrGuide.sendMsgKey("LAJI_CREATE");
					let t = this.laJiTongs[this.curLaJiDb.type];
					mgrGuide.registerGuideNode(GUD_REG_NODE.PANELOUT_LAJITONG, t)
				}
			}
		}
		updateLaJiPos(t) {
			if (t.destroyed) return;
			let e = Laya.Point.TEMP;
			UiHelper.worldToScreen(this.camera, this.followTransform.position, e), this.root.globalToLocal(e, !1), t.pos(e.x, e.y - 50)
		}
		onAnimExit(t) {
			switch (t) {
				case MODEL_ANIM.LAJI_CUO:
					this.bClicked ? (this.bClicked = !1, mgrAlert.alertDialog(mgrI18n.getText(this.curLaJiDb.tlite), mgrI18n.getText("laJiMaker.5"), () => {
						this.create(!1)
					})) : this.create(!1)
			}
		}
		onClickTong(t, e, a) {
			let i = this.curLaJi;
			if (i)
				if (this.commonEvent || (this.commonEvent = !0, GameStatistics.statisCommonEvent(3042)), this.state = 1, this.curLaJi = null, this.curLaJiDb.type == a) {
					e.play("open_0" + (a + 1), !1);
					let s = Mathf.random(2);
					this.animPlayer.clear(), this.animPlayer.addModelAnim(this.avatar.baseBody, "ljxyx-laji_diu0" + s), this.animPlayer.addModelAnim(this.avatar.baseFace, "face_ljxyx-face_laji_diu0" + s), this.animPlayer.addTimeCallback(15 / 39, () => {
						this.playLajiFly(i, t, e, s, a)
					}), this.animPlayer.once(Laya.Event.COMPLETE, this, this.onPlayAnimFinish), this.animPlayer.play()
				} else cc.tween(i).to(.2, cc.PROP.ALPHA0).start(), this.avatar.playAnimation(MODEL_ANIM.LAJI_CUO), this.bClicked = -1 != a
		}
		playLajiFly(t, e, a, i, s) {
			Laya.timer.clearAll(this);
			let n = e.x + 73.5,
				o = e.y + 70;
			if (2 == i) var r = cc.tween(t).parallel(cc.tween().to(.2, cc.PROP.SCALE1_2).delay(.5).to(.2, {
				scaleX: .5,
				scaleY: .5
			}), cc.tween().then(cc.jumpTo(1, n, o, 300, 1)));
			else {
				let e = s < 2 ? t.x + 300 : t.x - 300,
					a = t.y - 150,
					i = [t.x, t.y, e, a, n, o];
				r = cc.tween(t).parallel(cc.tween().to(.2, cc.PROP.SCALE1_2).delay(.5).to(.2, {
					scaleX: .5,
					scaleY: .5
				}), cc.tween().then(cc.bezierTo(1, i, 10)))
			}
			r.call(() => {
				a.play("close_0" + (s + 1), !1), mgrOutside.addLajiScore(this.curLaJiDb);
				let e = new Laya.Point;
				UiHelper.getSelfGlobalPos(t, e), _G.sendMsg("COLLECT_LAJI", e), this.create(!0)
			}).delay(.5).call(() => {
				t.destroy()
			}).start()
		}
		onPlayAnimFinish() {
			this.animPlayer.clear()
		}
	}
	LaJiMaker.WIDTH = 588;
	class PanelOutside extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelOutside.json", this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_otherDialog: "Laya.Image",
				cc_otherText: "Laya.Label",
				cc_buttonMyDialog: "UIButton",
				cc_clickArrow: "Laya.Sprite",
				cc_myText: "Laya.Label",
				cc_spriteCountdown: "Laya.Sprite",
				cc_timeCountdown: "Laya.Label",
				cc_topNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_buttonFree: "UIButton",
				cc_bottomLeftNode: "Laya.Sprite",
				cc_buttonStartLingGan: "UIButton",
				cc_spriteStartLingGan: "Laya.Sprite",
				cc_lingGanLeftTime: "Laya.Label",
				cc_bottomRightNode: "Laya.Sprite",
				cc_buttonStartLaJi: "UIButton",
				cc_spriteStartLaJi: "Laya.Sprite",
				cc_lajiLeftTime: "Laya.Label",
				cc_bottomNode: "Laya.Sprite",
				cc_buttonColorEggMianJu: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_enter_play", ""), this._dialogIdx = 0
		}
		addPreloadRes(t) {
			t.addModel("res/unity/Conventional/map_02.ls"), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.ZHUAN_SHEN).path)
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonFree.node, "pnl_main_13.png"), mgrI18n.trySetI18nImage(this.spriteStartLingGan, "pnl_play_06.png"), mgrI18n.trySetI18nImage(this.spriteStartLaJi, "pnl_play_05.png"), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_PLAY), this.currencyBar = new CurrencyBar, this.currencyBar.setParent(this.topNode), this.room = new RoomOutside, this.room.load(this.onSceneLoaded.bind(this)), this.otherDialog.visible = !1, this.buttonMyDialog.node.visible = !1, this.buttonMyDialog.transition = UIButton.TRANSITION_NONE, this.scoreBar = new ScoreBar, this.scoreBar.setParent(this.topLeftNode), this.scoreBar.x = -100, this.scoreBar.hide(), this.bottomLeftNode.x = -200, this.bottomRightNode.x = 200, this.buttonClose.node.x = -120, this.buttonFree.node.x = -120, this.buttonColorEggMianJu.node.visible = !1, this.onMsgCopChange(), this.playButtons = new PlayBottomNode({
				onOpenCallback: this.close.bind(this),
				curIndex: 2
			}), this.playButtons.setParent(this.bottomNode), this.initTouch(), this.switchToOutside(), this.registerMsg({
				CLICK_BUTTERFLY: this.onMsgClickButterfly.bind(this),
				ADD_SCORE: this.onMsgAddScore.bind(this),
				COLLECT_LAJI: this.onMsgCollectLaJi.bind(this),
				LAJI_OVER: this.onMsgLaJiOver.bind(this),
				SHOW_YINDAO_EFFECT: this.onMsgShowYinDao.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this)
			}), this.startProcMsg(), this.addEffect("192").play()
		}
		dispose() {
			this.stopProcMsg(), this.clearButterfly(), this.playButtons && this.playButtons.dispose(), this.avatar && this.avatar.destroy(), this.room && this.room.dispose(), this.scoreBar && (this.scoreBar.dispose(), this.scoreBar = null), this.currencyBar && this.currencyBar.dispose(), this.instOrBanner.dispose(), mgrSdk.resetRecordState(), super.dispose()
		}
		clearButterfly() {
			this.butterflyMaker && (this.butterflyMaker.dispose(), this.butterflyMaker = null), this.moFaBang && (_G.poolManager.put(this.moFaBang), this.moFaBang = null), this.moFaBang2 && (_G.poolManager.put(this.moFaBang2), this.moFaBang2 = null)
		}
		clearLajiMaker() {
			this.laJiMaker && (this.laJiMaker.dispose(), this.laJiMaker = null)
		}
		update() {
			let t = Timer.deltaTime;
			if (this.isFocus && (this.butterflyMaker && this.butterflyMaker.update(t), this.laJiMaker)) {
				let e = this.laJiMaker.updateTime(t);
				_G.isGuiding || e > 100 ? this.timeCountdown.text = "" : this.timeCountdown.text = `${Math.ceil(e)}`
			}
			let e = mgrOutside.leftLingGanTime;
			this.lingGanLeftTime.text = e > 0 ? Tools.formatTime(e) : "";
			let a = mgrOutside.leftLaJiTime;
			this.lajiLeftTime.text = a > 0 ? Tools.formatTime(a) : ""
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgClickButterfly(t) {
			this.scheduleOnce(.75, () => {
				if (!t.destroyed) {
					let e = new Laya.Point;
					UiHelper.worldToScreen(this.room.camera, t.position, e), this.scoreBar.setValue(mgrOutside.lingGanScore, 0, e)
				}
			})
		}
		onMsgAddScore(t) {
			this.scoreBar.setValue(mgrOutside.lingGanScore, 0, t), this.scheduleOnce(2, this.onLingGanFinish)
		}
		onMsgCollectLaJi(t) {
			this.scoreBar.setValue(mgrOutside.lajiScore, 0, t)
		}
		onMsgLaJiOver(t) {
			this.onLaJiFinish(t)
		}
		onMsgShowYinDao() {
			let t = this.addEffect("149");
			t.followTarget(this.buttonStartLaJi.node, this.cameraEffect), t.play(), (t = this.addEffect("149")).followTarget(this.buttonStartLingGan.node, this.cameraEffect), t.play()
		}
		onMsgAdvShowSuc(t) {
			if ("one_click_interact" == t.advName) {
				let e, a = t.params.gameName;
				a == mgrI18n.getText("panelOutside.4") ? (GameStatistics.statisCommonEvent(2214), e = mgrOutside.finishLingGan(!0)) : a == mgrI18n.getText("panelOutside.5") && (GameStatistics.statisCommonEvent(2215), e = mgrOutside.finishLaJi(!0)), mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
					score: 100,
					items: e
				})
			}
		}
		onMsgCopChange() {}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToMain(), this.avatar = new RoleAvatar, this.room.root.addChild(this.avatar), this.avatar.playIdle(), this.avatar.on("Exit", this, t => {
				this.destroyed || t == MODEL_ANIM.MAIN_IDLE && this.avatar.playHuDie()
			})
		}
		initTouch() {
			this.resNode.on(Laya.Event.CLICK, this, t => {
				t.stopPropagation(), this.butterflyMaker && this.butterflyMaker.onTouchDown()
			})
		}
		clearEffect() {
			this.removeEffect("149"), this.removeEffect("149")
		}
		switchToOutside() {
			this.scoreBar.moveOut(), this.playButtons.fadeIn(), UiHelper.playMoveIn(this.bottomLeftNode), UiHelper.playMoveIn(this.bottomRightNode), UiHelper.playMoveIn(this.buttonClose.node), UiHelper.playMoveIn(this.buttonFree.node, 41), this.timeCountdown.visible = !1, this.spriteCountdown.visible = !1, this.avatar && this.avatar.playIdle(), this.clearEffect()
		}
		switchToLingGan() {
			this.scoreBar.moveIn(), this.scoreBar.setValue(0), this.playButtons.fadeOut(), UiHelper.playMoveOut(this.bottomLeftNode, -200), cc.tween(this.bottomRightNode).to(.3, {
				x: 200
			}, cc.OPTION.SINE_OUT).call(this.showDialog.bind(this)).start(), UiHelper.playMoveOut(this.buttonClose.node, -120), UiHelper.playMoveOut(this.buttonFree.node, -120), this._dialogIdx = 0, this.clearEffect()
		}
		switchToLaJi() {
			this.scoreBar.moveIn(), this.scoreBar.setValue(0), this.playButtons.fadeOut(), UiHelper.playMoveOut(this.buttonClose.node, -120), UiHelper.playMoveOut(this.buttonFree.node, -120), cc.tween(this.bottomLeftNode).to(.3, {
				x: -200
			}, cc.OPTION.SINE_OUT).start(), cc.tween(this.bottomRightNode).to(.3, {
				x: 200
			}, cc.OPTION.SINE_OUT).call(this.startLaJi.bind(this)).start(), this.timeCountdown.text = "", this.timeCountdown.font = GConfig.bmf_laji, this.timeCountdown.visible = !0, this.spriteCountdown.visible = !0, this.avatar.playAnimation(MODEL_ANIM.LAJI_IDLE, !0), this.room.moveToLaji()
		}
		showDialog() {
			this._dialogIdx % 2 == 0 ? (this.otherDialog.scale(0, 0, !0).visible = !0, this.otherDialog.alpha = 0, cc.tween(this.otherDialog, !0).to(.5, cc.PROP.SCALE_ALPHA1, cc.OPTION.BACK_OUT).start(), this.buttonMyDialog.interactable = !1, cc.tween(this.buttonMyDialog.node, !0).to(.3, {
				alpha: 0
			}).start(), this.otherText.changeText(""), this.showDialog.bind(this), Timer.callLater(.5, () => {
				this.showDialog()
			})) : (this.buttonMyDialog.interactable = !0, this.buttonMyDialog.node.scale(0, 0, !0).visible = !0, this.buttonMyDialog.node.alpha = 0, cc.tween(this.buttonMyDialog.node, !0).to(.5, cc.PROP.SCALE_ALPHA1, cc.OPTION.BACK_OUT).start(), cc.tween(this.otherDialog, !0).to(.3, {
				alpha: 0
			}).start(), this.myText.changeText(""), Timer.callLater(.5, () => {
				mgrGuide.registerGuideNode(GUD_REG_NODE.PANELOUT_DIALOG, this.buttonMyDialog.node, !0)
			})), this._dialogIdx++
		}
		startLingGan() {
			mgrOutside.startLingGan(), cc.tween(this.otherDialog).to(.2, {
				alpha: 0
			}).hide().start(), cc.tween(this.buttonMyDialog.node).to(.2, {
				alpha: 0
			}).hide().start(), this.clearButterfly(), this.moFaBang = _G.poolManager.get(GModel, "mofabang"), this.moFaBang.setParent(this.avatar.baseBody.findChild("Guadian_mofabang")), this.moFaBang.initPaint(), this.moFaBang.setPosition(0, 0, 0), this.moFaBang.setRotation(0, 0, 0);
			let t = _G.poolManager.get(Particle, "112");
			t.setParent(this.room.root), t.play(null, 5, 1), this.moFaBang2 = _G.poolManager.get(GModel, "mofabang_anim");
			let e = this.room.hudieNode.getChildByName("MoFaBang");
			this.moFaBang2.setParent(e), this.moFaBang2.initAnimator(), this.moFaBang2.hide(), this.butterflyMaker = new ButterflyMaker(this.room.hudieNode, this.room.camera, this.moFaBang2);
			let a = this.moFaBang.sharedMaterial;
			this.room.mainToLingGan(this.avatar, a, () => {
				this.avatar.transform.localPositionX = 100, this.avatar.playIdle(), this.room.lingGanToMain(), a.setState(32), this.moFaBang.hide(), this.moFaBang2.show(), this.moFaBang2.playAnim("mozhang_anim-mz_idle"), _G.isGuiding ? mgrGuide.sendMsgKey("START_BUTTERFLY") : this.butterflyMaker.start()
			}), this.room.switchToNight()
		}
		onButterflyFinish() {}
		onLingGanFinish() {
			this.clearButterfly(), this.switchToOutside(), this.room.moveToMain(), this.room.switchToDay(), this.avatar.transform.localPositionX = 0;
			let t = mgrOutside.finishLingGan();
			mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
				score: mgrOutside.lingGanScore,
				items: t
			})
		}
		startLaJi() {
			this.clearLajiMaker(), mgrOutside.startLaJi(), mgrOutside.loadLajiGame(() => {
				this.laJiMaker = new LaJiMaker(this.avatar, this.room.camera), this.bottomNode.parent.addChild(this.laJiMaker.root).pos(-LaJiMaker.WIDTH / 2, 0), this.laJiMaker.create(!1), this.checkColorEggMianJu()
			})
		}
		onLaJiFinish(t) {
			this.scheduleOnce(t ? 3.3 : 0, () => {
				this.buttonColorEggMianJu.node.visible = !1, this.clearLajiMaker(), this.switchToOutside(), this.room.moveToMain();
				let t = mgrOutside.finishLaJi();
				mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
					score: mgrOutside.lajiScore,
					items: t
				})
			})
		}
		static startButteryfly() {
			let t = mgrPanel.findPanel(PanelOutside);
			t && t.butterflyMaker.start()
		}
		checkColorEggMianJu() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.MIAN_JU, EGGS_STEP.SECOND) && (this.buttonColorEggMianJu.node.visible = !0)
		}
		on_click_buttonMyDialog() {
			this._dialogIdx >= 2 ? mgrOutside.loadLingGanRes(this.startLingGan.bind(this)) : this.showDialog()
		}
		on_click_buttonClose() {
			mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_buttonStartLingGan() {
			GameStatistics.statisCommonEvent(3051), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_HUDIE) ? this.switchToLingGan() : mgrOutside.checkLingGanPlayable(() => {
				this.switchToLingGan()
			})
		}
		on_click_buttonStartLaJi() {
			GameStatistics.statisCommonEvent(3041), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_LAJI) ? this.switchToLaJi() : mgrOutside.checkLaJiPlayable(() => {
				this.switchToLaJi()
			})
		}
		on_click_buttonFree() {
			mgrPart.openPanelRoom(ROOM_TYPE.NORMAL, null, this.close.bind(this))
		}
		on_click_buttonColorEggMianJu() {
			this.buttonColorEggMianJu.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggMianJu.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggMianJu.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.mian_ju)
		}
	}
	class PanelMangHeOpen extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelMangHeOpen.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_centerNode: "Laya.Sprite",
				cc_circleNode: "Laya.Sprite",
				cc_topNode: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_buttonOpenBox: "UIButton",
				cc_spriteButtonOpenBoxAdFlag: "Laya.Sprite",
				cc_textButtonOpenBoxText: "Laya.Label",
				cc_buttonAdvThank: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_mohe_open", "banner_mohe_open"), this.points = [], this.localTouchPos = new Laya.Point
		}
		buildUi() {
			if (this.circleNode.visible = !1, this.buttonAdvThank.node.visible = !1, 0 == mgrMangHe.count || mgrGuide.isGuiding) this.buttonOpenBox.node.getChildAt(0).visible = !1, this.buttonOpenBox.node.getChildAt(1).x = 70;
			else if (mgrAdv.statisVideoShow("open_manghe"), 0 != db.cop.b_adv_delay) {
				this.buttonClose.node.visible = !1;
				let t = db.cop.adv_thank_delay_time || .1;
				cc.tween(this.buttonAdvThank.node).delay(t).show().start()
			}
			UiHelper.playScaleOnce(this.buttonOpenBox.node, .5), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), Mathf.randomEnable(db.cop.ad_flag_hide_ratios[2] || 0) || 0 == mgrMangHe.count || mgrGuide.isGuiding ? (this.spriteButtonOpenBoxAdFlag.visible = !1, this.textButtonOpenBoxText.x -= 12) : this.spriteButtonOpenBoxAdFlag.visible = !0
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.effectOpen && (_G.poolManager.put(this.effectOpen), this.effectOpen = null), this.effectFaZhen && (_G.poolManager.put(this.effectFaZhen), this.effectFaZhen = null), this.clearMangHe(), super.dispose(), _G.sendMsg("OPEN_MANG_HE_FINISH")
		}
		onDialogOpenAnim(t) {
			let e = this.context.camera;
			this.createScene3DBack(1, e.fieldOfView), this.camera.transform.position = e.transform.position, this.camera.transform.rotation = e.transform.rotation, this.mangHe = _G.poolManager.get(GModel, db.MODEL_DB_ID.manghe), this.mangHe.setParent(this.scene3DBack), this.mangHe.setWorldPosition(this.context.from), this.mask.alpha = 0, cc.tween(this.mask).to(.3, cc.PROP.ALPHA1).start();
			let a = this.context.to,
				i = new Laya.Vector3,
				s = {
					x: this.mangHe.transform.position.x,
					y: this.mangHe.transform.position.y,
					pos: (t, e) => {
						i.x = t, i.y = e, this.mangHe.transform.position = i
					}
				};
			cc.tween(this.mangHe.node.transform).delay(.1).call(() => {
				cc.tween(s).then(cc.jumpTo(.5, a.x, a.y, -.1, 1)).start()
			}).to(.5, cc.PROP.EMPTY, {
				onUpdate: (t, e) => {
					i.z = Mathf.lerp(.1, a.z, e), this.mangHe.transform.localRotationEulerX = Mathf.lerp(0, 15, e)
				}
			}).call(() => {
				this.effectFaZhen = _G.poolManager.get(Particle, "133"), this.effectFaZhen.setParent(this.scene3DBack), this.effectFaZhen.setWorldPosition(a.x, a.y - .02, a.z - .07), this.effectFaZhen.setRotation(10, 0, 0), this.effectFaZhen.play(), t && t()
			}).start()
		}
		regGuide() {
			mgrGuide.dispatchGuide(GUD_EVENT.ENTER_MANGHE_OPEN) && mgrGuide.registerGuideNode(GUD_REG_NODE.PANELMANGHE_BUTTONOPEN, this.buttonOpenBox.node)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			"open_manghe" == t.advName && this.startAnim()
		}
		startAnim() {
			this.buttonOpenBox.interactable = !1, this.buttonClose.interactable = !1, this.buttonAdvThank.node.visible = !1, cc.tween(this.buttonOpenBox.node).to(.1, cc.PROP.ALPHA0).start(), this.showFaZhen()
		}
		showFaZhen() {
			this.circleNode.visible = !0, UiHelper.playStampEffect(this.circleNode), Timer.callLater(.4, () => {
				cc.tween(this.circleNode).by(15, {
					rotation: 360
				}).repeatForever().start(), this.createPoint(), mgrGuide.sendMsgKey("SHOW_FAZHEN")
			}, this)
		}
		clearMangHe() {
			this.mangHe && (this.mangHe.setScale(1, 1, 1), this.mangHe.setRotation(0, 0, 0), _G.poolManager.put(this.mangHe), this.mangHe = null)
		}
		createPoint() {
			this.buttonClose.interactable = !0, UiHelper.registerTouchEvent(this.resNode, this.onTouchStart.bind(this), this.onTouchMove.bind(this), this.onTouchEnd.bind(this));
			let t = [],
				e = Math.PI / 3;
			for (let a = 0; a < 6; a++) t.push([120 * Math.cos(e * a) | 0, 120 * Math.sin(e * a) | 0]);
			for (let e = 0; e < t.length; e++) {
				let a = t[e];
				this.centerNode.addChild(new Laya.Sprite).loadImage("res/ui/pnl_manghe/point.png").pivot(30, 30).size(60, 60).pos(a[0], a[1]), this.points.push({
					x: a[0],
					y: a[1],
					connect: 0
				})
			}
		}
		onTouchStart() {
			0 != this.points.length && this.checkFirst()
		}
		onTouchMove() {
			this.checkPoint()
		}
		onTouchEnd() {
			this.curLine && (this.curLine.destroy(), this.curLine = null, this.curCol.connect--, this.curCol = null);
			let t = 0;
			for (let e = 0; e < this.points.length; e++) t += this.points[e].connect;
			t >= 2 && this.onLineSuc()
		}
		checkFirst() {
			let t = this.testPoint();
			t && t.connect < 2 && (this.createLine(t.x, t.y), t.connect++, this.curCol = t)
		}
		checkPoint() {
			if (this.curLine) {
				let t = this.testPoint();
				if (t)
					if (t.connect > 1 || t == this.curCol) this.lineTo(this.localTouchPos);
					else {
						this.lineTo(t), this.createLine(t.x, t.y), t.connect += 2, this.curCol = t;
						let e = this.centerNode.localToGlobal(new Laya.Point(t.x, t.y), !1);
						mgrAlert.playParticleEffect("132", e, 1, .5), mgrSound.playSound("yllsd_02"), mgrGuide.sendMsgKey("LINE_SUC")
					}
				else this.lineTo(this.localTouchPos)
			} else this.checkFirst()
		}
		lineTo(t) {
			let e = Mathf.distance(this.curLine, t) + 20;
			this.curLine.height = e, Vec2.TEMP.setValue(t.x - this.curLine.x, t.y - this.curLine.y);
			var a = GameUtility.convertDir2Rot(Vec2.TEMP);
			this.curLine.rotation = a
		}
		createLine(t, e) {
			this.curLine = this.centerNode.addChild(new Laya.Image("res/ui/pnl_manghe/line.png")), this.curLine.sizeGrid = "18,0,18,0", this.curLine.pivot(15, 15), this.curLine.pos(t, e, !0), this.curLine.height = 0, this.lineTo(this.localTouchPos), GameStatistics.statisCommonEventOnce(3074)
		}
		testPoint() {
			let t = this.localTouchPos;
			t.setTo(Laya.stage.mouseX, Laya.stage.mouseY), this.centerNode.globalToLocal(t, !1);
			for (var e = 0; e < this.points.length; e++) {
				if (Mathf.distance(t, this.points[e]) <= 30) return this.points[e]
			}
			return null
		}
		onLineSuc() {
			UiHelper.unregisterTouchEvent(this.resNode), cc.tween(this.centerNode).to(.3, {
				scaleX: 2,
				scaleY: 2,
				alpha: 0
			}).start(), this.openBox(), this.buttonClose.interactable = !1
		}
		openBox() {
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.mangHe, MODEL_ANIM.MH_OPEN), t.on(Laya.Event.COMPLETE, this, this.alertItem), t.play();
			let e = this.mangHe.findChild("itemNode");
			this.effectOpen = _G.poolManager.get(Particle, "134"), this.effectOpen.setParent(this.scene3DBack), this.effectOpen.setWorldPosition(e.transform.position), this.effectOpen.play(), BaseFacade.mGoal.commit(ACTION_ID.OPEN_BOX)
		}
		alertItem() {
			let t = this.mangHe.findChild("itemNode");
			UiHelper.worldToScreen(this.camera, t.transform.position, Laya.Point.TEMP);
			let e = mgrMangHe.getRandomItem();
			UiHelper.playItemJumpFromTo(e.itemId, Laya.Point.TEMP, {
				x: _G.canvasWidth / 2,
				y: _G.canvasHeight / 2 + 100
			}, () => {
				_G.sendMsg("OPEN_MANG_HE_SUC"), mgrAlert.addAndAlert(e, null, null, !0, 0), this.close(!0)
			})
		}
		static getPointPos(t) {
			let e = new Laya.Point,
				a = mgrPanel.findPanel(PanelMangHeOpen);
			return a && (e.setTo(a.points[t].x, a.points[t].y), a.centerNode.localToGlobal(e, !1)), e
		}
		on_click_buttonClose() {
			_G.isGuiding || (_G.sendMsg("MANG_HE_RESET"), this.close())
		}
		on_click_buttonOpenBox() {
			if (mgrMangHe.canGetItem())
				if (mgrMangHe.count > 0) {
					if (mgrAdv.statisVideoClick("open_manghe"), GameStatistics.statisCommonEvent(3081, 1), !mgrAdv.dispatchAdv("open_manghe")) return
				} else this.startAnim(), _G.isGuiding || GameStatistics.statisCommonEvent(3081, 0);
			else mgrAlert.alertDialog(mgrI18n.getText("panelMangHe.3"))
		}
		on_click_buttonAdvThank() {
			1 == db.cop.b_adv_thank_prompt ? 1 == db.cop.b_adv_thank_prompt_tag ? mgrAlert.alertAdvDialog({
				desc: mgrI18n.getText("panelMangHeOpen.1"),
				confirm: () => {
					this.on_click_buttonOpenBox(), this.buttonAdvThank.node.visible = !1, this.buttonClose.node.visible = !0
				},
				confirmText: mgrI18n.getText("panelMangHeOpen.2"),
				cancel: () => {
					this.on_click_buttonClose()
				}
			}) : mgrAlert.alertDialog({
				desc: mgrI18n.getText("panelMangHeOpen.1"),
				confirm: () => {
					this.on_click_buttonOpenBox(), this.buttonAdvThank.node.visible = !1, this.buttonClose.node.visible = !0
				},
				confirmText: mgrI18n.getText("panelMangHeOpen.2"),
				close: () => {
					this.on_click_buttonClose()
				}
			}) : this.on_click_buttonClose()
		}
	}
	class PanelDanceRoleGet extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelDanceRoleGet.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeAll: "Laya.Box",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_spriteRole: "Laya.Sprite",
				cc_roleName: "Laya.Label",
				cc_buttonOk: "UIButton",
				cc_sprite1: "Laya.Sprite",
				cc_buttonCircle: "UIButton",
				cc_buttonBox: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.oldContractIdx = null, this.loadState = 0
		}
		static getResLoader() {
			let t = new ResLoader;
			return t.add(db.get_animation_db(MODEL_ANIM.SHENTI_COME).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_COME).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHENTI_IDLE).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_IDLE).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_COME).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_IDLE).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_come).resPath, RES_TYPE.PREFAB3D), t.add(db.get_model_db(db.MODEL_DB_ID.come).resPath, RES_TYPE.PREFAB3D), t.add(db.get_model_db(db.MODEL_DB_ID.wawahe).resPath, RES_TYPE.PREFAB3D), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME01).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME02).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME03).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME01).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME02).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME03).path, RES_TYPE.ANIMATIONCLIP), mgrGame.contractIndex != DANCE_UNLOCK_CONTRACT_IDX && (t.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_jiechu).resPath, RES_TYPE.PREFAB3D), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHENTI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_JIECHU).path, RES_TYPE.ANIMATIONCLIP)), t.add("res/ui/PanelDanceRoleGet.json", RES_TYPE.PREFAB2D), t
		}
		static openPanel(t) {
			let e = this.getResLoader();
			mgrAlert.openWait(e, () => {
				mgrPanel.openPanelWithSingleton(UI_NAME.PanelDanceRoleGet, {}, t)
			})
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.sprite1, "pnl_dance_contract_01.png"), this.buttonCircle.node.visible = !1, this.buttonBox.node.visible = !1, mgrGame.contractUnlock(DANCE_UNLOCK_CONTRACT_IDX), this.oldContractIdx = mgrGame.contractIndex, mgrGame.contractIndex != DANCE_UNLOCK_CONTRACT_IDX && (this.oldParts = Tools.deepCopy(mgrPart.partsWear));
			let t = new Laya.Sprite,
				e = new Laya.Point;
			UiHelper.local2local(this.spriteMaskBg, this.spriteRole, e), t.graphics.drawImage(this.spriteMaskBg.texture, e.x, e.y), this.spriteRole.mask = t, GameStatistics.statisCommonEvent(2545)
		}
		dispose() {
			this.clearWawahe(), this.clearOld(), super.dispose()
		}
		clearWawahe() {
			this.wawahe && (this.wawahe.dispose(), this.wawahe = null)
		}
		clearOld() {
			this.oldAvatar && (this.oldAvatar.destroy(), this.oldAvatar = null), this.oldShexiangji && (this.oldShexiangji.dispose(), this.oldShexiangji = null), this.oldWawahe && (this.oldWawahe.dispose(), this.oldWawahe = null), this.oldGemstone && (_G.poolManager.put(this.oldGemstone), this.oldGemstone = null), this.oldRoom && (this.oldRoom.dispose(), this.oldRoom = null)
		}
		startLoad() {
			_G.sendMsg("DANCE_ROLE_START_ANIM");
			let t = new ResLoader;
			mgrPart.addPartResList(mgrPart.partsWear, t, !0), t.setLoadingCallback(this.onButtonAnimFinish.bind(this));
			let e = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			if (t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D), null != this.oldContractIdx && mgrGame.contractIndex != this.oldContractIdx) {
				let e = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
				t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D)
			}
			t.loadAll()
		}
		onButtonAnimFinish() {
			this.loadState++, 1 == this.loadState && (cc.tween(this.mask).to(.1, cc.PROP.ALPHA0).hide().start(), this.nodeAll.visible = !1, this.buttonClose.node.visible = !1, this.oldContractIdx == mgrGame.contractIndex ? (this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))) : (this.oldRoom = new RoomBath, this.oldRoom.load(this.onOldSceneLoaded.bind(this))))
		}
		onOldSceneLoaded() {
			this.addChild(this.oldRoom.scene), this.resNode.setChildIndex(this.oldRoom.scene, 0), this.oldRoom.changeToMain(), this.oldRoom.skybox.active = !0, this.oldRoom.camera.active = !1, this.oldRoom.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.oldRoom.mapNode.transform, "localScale", 3, 3, 3), this.oldAvatar = new RoleAvatar(this.oldParts), this.oldRoom.root.addChild(this.oldAvatar), this.oldWawahe = new GModel(db.MODEL_DB_ID.wawahe), this.oldWawahe.create(), this.oldWawahe.initAnimator(), this.oldWawahe.setParent(this.oldRoom.root), this.oldWawahe.hide(), this.oldShexiangji = new GModel(db.MODEL_DB_ID.shexiangji_jiechu), this.oldShexiangji.create(), this.oldShexiangji.setParent(this.oldRoom.root), this.oldShexiangji.callIfLoaded(() => {
				let t = this.oldShexiangji.findChild("camera");
				t.nearPlane = .01, t.fieldOfView = 60;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular
			});
			let t = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
			this.oldGemstone = _G.poolManager.get(GModel, t), this.oldGemstone.initAnimator(), this.oldGemstone.getAnimator().cullingMode = Laya.Animator.CULLINGMODE_ALWAYSANIMATE, this.oldGemstone.setParent(this.oldRoom.root);
			let e = new AnimatorFixedPlayer;
			e.addModelAnim(this.oldWawahe, MODEL_ANIM.WAWAHE_JIECHU), e.addModelAnim(this.oldShexiangji, MODEL_ANIM.SHEXIANGJI_JIECHU), e.addModelAnim(this.oldAvatar.baseBody, MODEL_ANIM.SHENTI_JIECHU), e.addModelAnim(this.oldAvatar.baseFace, MODEL_ANIM.FACE_JIECHU), e.addTimeCallback(110 / 30 / e.duration, () => {
				this.oldWawahe.show()
			}), e.addTimeCallback(.78, () => {
				this.onSwitchComplete(() => {
					this.clearOld(), e.dispose()
				})
			}), e.addTimeCallback(1, () => {}), e.play();
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.oldGemstone, MODEL_ANIM.GEMSTONE_JIECHU), a.addTimeCallback(80 / 30 / a.duration, () => {
				this.oldGemstone.hide()
			}), a.play()
		}
		onSwitchComplete(t) {
			UiHelper.playBlackFlash(1, () => {
				t(), this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))
			})
		}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToMain(), this.room.skybox.active = !0, this.room.camera.active = !1, this.room.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 3, 3, 3), this.wawahe = new GModel(db.MODEL_DB_ID.wawahe), this.wawahe.create(), this.wawahe.initAnimator(), this.wawahe.setParent(this.room.root), this.shexiangji = new GModel(db.MODEL_DB_ID.shexiangji_come), this.shexiangji.create(), this.shexiangji.setParent(this.room.root), this.shexiangji.callIfLoaded(() => {
				let t = this.shexiangji.findChild("camera");
				t.nearPlane = .01;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular, this.shexiangji_effect = this.shexiangji.findChild("e_wawahe_come"), this.shexiangji_effect && (this.shexiangji_effect.active = !1)
			});
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME01), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME01), t.addTimeCallback(1, () => {
				let t = new AnimatorFixedPlayer;
				t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME02), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME02), t.addTimeCallback(1, () => {
					this.buttonBox.node.visible = !0, mgrGuide.dispatchGuide(GUD_EVENT.START_CONTRACT), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX, this.buttonBox.node)
				}), t.play()
			}), t.play()
		}
		playRoleAnim() {
			this.avatar = new RoleAvatar, this.room.root.addChild(this.avatar);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.avatar.baseBody, MODEL_ANIM.SHENTI_COME), t.addModelAnim(this.avatar.baseFace, MODEL_ANIM.FACE_COME), t.addTimeCallback(1, this.onRoleAnimFinish.bind(this)), t.play()
		}
		playGemstone() {
			let t = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			this.gemstone = _G.poolManager.get(GModel, t), this.gemstone.initAnimator(), this.gemstone.setParent(this.room.root), this.gemstone.setPosition(0, .05, 0), this.gemstone.playAnims(0, [MODEL_ANIM.GEMSTONE_COME, MODEL_ANIM.GEMSTONE_ZHANSHI], !0), this.gemstone.initPaint(), this.gemstone.callIfLoaded(() => {
				let t = this.gemstone.getChildAt(0);
				cc.tween(this).to(1.3, cc.PROP.EMPTY, {
					onUpdate(e, a) {
						t.transform.scale = t.transform.scale
					}
				}).start()
			})
		}
		onWawaheAnimFinish() {
			this.clearWawahe()
		}
		onRoleAnimFinish() {
			this.avatar.playAnimation(MODEL_ANIM.SHENTI_IDLE), this.buttonCircle.node.visible = !0, mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE, this.buttonCircle.node)
		}
		playGotoRoom() {
			this.shexiangji && (this.shexiangji.findChild("e_wawahe_come").active = !1, _G.isGuiding = !0, mgrPanel.openPanel(UI_NAME.PanelMain, {
				type: ROOM_TYPE.NORMAL,
				parts: null,
				data: {
					room: this.room,
					avatar: this.avatar,
					shexiangji: this.shexiangji,
					gemstone: this.gemstone
				},
				bSwitch: !0
			}, !1, () => {
				this.room.scene.removeSelf(), this.close()
			}))
		}
		on_click_buttonOk() {
			mgrGame.contractIndex == DANCE_UNLOCK_CONTRACT_IDX ? mgrAlert.alertDialog(mgrI18n.getText("panelContract.11"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				GameStatistics.statisCommonEvent(2546, 1), this.startLoad()
			}, () => {}) : mgrAlert.alertDialog(mgrI18n.getText("panelContract.12"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				GameStatistics.statisCommonEvent(2546, 1), mgrGame.contractIndex = DANCE_UNLOCK_CONTRACT_IDX, this.startLoad()
			}, () => {})
		}
		on_click_buttonClose() {
			GameStatistics.statisCommonEvent(2546, 0), this.close()
		}
		on_click_buttonCircle() {
			this.shexiangji ? (this.buttonCircle.interactable = !1, cc.tween(this.buttonCircle.node, !0).to(.2, cc.PROP.ALPHA0).call(this.playGotoRoom.bind(this)).start()) : console.log("没有摄像机")
		}
		on_click_buttonBox() {
			this.buttonBox.node.visible = !1, this.shexiangji_effect && (this.shexiangji_effect.active = !0);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME03), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME03), t.addTimeCallback(3 / t.duration, this.playGemstone.bind(this)), t.addTimeCallback(1, this.onWawaheAnimFinish.bind(this)), t.play(), this.playRoleAnim()
		}
	}
	const LINE_WIDTH = 10;
	class PanelDanceDraw extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelDanceDraw.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_nodeNpc: "Laya.Box",
				cc_nodeNpcSpine: "Laya.Box",
				cc_nodeNpcTalkBubble: "Laya.Box",
				cc_nodeEffectDrawNodeRoot: "Laya.Box",
				cc_nodeResultPanel: "Laya.Box",
				cc_nodeLayoutRoleName: "Laya.Box",
				cc_labelRoleNameCankao: "Laya.Label",
				cc_spriteDanceAnimIconBg: "Laya.Sprite",
				cc_spriteDanceAnimIcon: "Laya.Sprite",
				cc_nodeLayoutDanceAnimName: "Laya.Box",
				cc_labelDanceAnimNameCankao: "Laya.Label",
				cc_buttonDance: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_labelDebugInput: "Laya.TextInput",
				cc_buttonDebugDance: "UIButton",
				cc_nodeDrawPanel: "Laya.Box",
				cc_buttonColor0: "UIButton",
				cc_buttonColor1: "UIButton",
				cc_buttonColor2: "UIButton",
				cc_buttonColor3: "UIButton",
				cc_buttonColor4: "UIButton",
				cc_buttonColor5: "UIButton",
				cc_buttonColor6: "UIButton",
				cc_nodeSelected: "Laya.Sprite",
				cc_drawNode: "Laya.Sprite",
				cc_buttonOk: "UIButton",
				cc_nodeRecordVideo: "Laya.Box",
				cc_nodeDrawPanelCenter: "Laya.Box",
				cc_nodeButtonsInteraction: "Laya.Box",
				cc_buttonInteraction1: "UIButton",
				cc_buttonInteraction2: "UIButton",
				cc_buttonInteraction3: "UIButton"
			}, this.selectedBoxIndexs = [], this.selectedColorIds = [], this.bTouchDown = !1, this.bAdLockedDanceEnabled = !1, this.worldPos = new Laya.Vector3, this.danceFinishTime = 0, this.randomColorIndex = 0, this.instOrBanner = new AdvInstOrBanner("enter_dance_draw", ""), this.p0 = new Laya.Point, this.p1 = new Laya.Point, this.interactionEffect = [], this.nextInteractionTime = 0
		}
		static getDrawPanelCenterPos() {
			let t = new Laya.Point(0, 0),
				e = mgrPanel.findPanel(PanelDanceDraw);
			return e ? e.nodeDrawPanelCenter.localToGlobal(t, !1) : t
		}
		static getButtonOkPos() {
			let t = new Laya.Point(0, 0),
				e = mgrPanel.findPanel(PanelDanceDraw);
			return e ? (t.x = e.buttonOk.node.pivotX, t.y = e.buttonOk.node.pivotY, e.buttonOk.node.localToGlobal(t, !1)) : t
		}
		buildUi() {
			Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.touchDown), Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.touchMove), Laya.stage.on(Laya.Event.MOUSE_UP, this, this.touchUp), Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.touchUp);
			let t = _G.poolManager.get(Spine, db.SPINE_DB_ID.role_yanjue);
			this.spine = t, t.setParent(this.nodeNpcSpine), t.setPosition(-50, 500), t.play("yihuo"), this.soundId = mgrSound.getPlayingMusicSoundId(), this.nodeRecordVideo.visible = !1, this.nodeSelected.visible = !1, this.labelDebugInput.visible = !1, this.buttonDebugDance.node.visible = !1, this.buttonOk.node.visible = !1, this.nodeResultPanel.visible = !1, this.nodeButtonsInteraction.visible = !1, UiHelper.registerTouchEvent(this.drawNode, this.onTouchStart.bind(this), this.onTouchMove.bind(this), null), Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onTouchEnd), Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.onTouchEnd), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELDANCEDRAW_BUTTONOK, this.buttonOk.node);
			let e = [this.buttonColor0, this.buttonColor1, this.buttonColor2, this.buttonColor3, this.buttonColor4, this.buttonColor5, this.buttonColor6];
			this.randomColorIndex = Mathf.random(e.length) - 1;
			let a = e[this.randomColorIndex];
			mgrGuide.registerGuideNode(GUD_REG_NODE.PANELDANCEDRAW_BUTTONCOLOR0, a.node), this.playDrawPanelUiAnim(), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), mgrSdk.startRecordVideo(), Laya.timer.frameLoop(10, this, this.onTimerLoop.bind(this)), mgrSdk.closeCrossRecommend()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), Laya.stage.offAllCaller(this), this.avatar && this.avatar.destroy(), this.timer1 && this.timer1.stop(), this.timer2 && this.timer2.stop(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELDANCEDRAW_BUTTONOK), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELDANCEDRAW_BUTTONCOLOR0), mgrGuide.sendMsgKey("PANEL_DANCE_ANY_OPT"), this.soundId && mgrSound.playMusic(this.soundId, !0), _G.poolManager.put(this.spine), this.clearEffect(), this.clearInteractionEffect(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		touchDown() {
			this.enable && this.createEffect()
		}
		createEffect() {
			this.clearEffect(), this.clickEffect = _G.poolManager.get(Particle, "156"), this.clickEffect.setParent(mgrAlert.scene3dfont), this.clickEffect.play(), this.worldPos.setValue(Laya.stage.mouseX, Laya.stage.mouseY, 0), mgrAlert.global2camera(this.worldPos, this.worldPos), this.clickEffect.setPosition(this.worldPos)
		}
		onTimerLoop() {
			this.nodeRecordVideo.visible = mgrSdk.isVideoRecording
		}
		touchUp() {
			this.clearEffect()
		}
		touchMove() {
			if (this.enable && this.clickEffect) {
				let t = this.worldPos;
				t.setValue(Laya.stage.mouseX, Laya.stage.mouseY, 0), mgrAlert.global2camera(t, t), this.clickEffect.setPosition(t)
			}
		}
		clearEffect() {
			this.clickEffect && (this.clickEffect.stopAndPutback(1), this.clickEffect = null), Laya.timer.clear(this, this.clearEffect)
		}
		playDrawPanelUiAnim() {
			let t = this.nodeNpc,
				e = t.x;
			t.x += 500, cc.tween(t).to(.5, {
				x: e
			}, {
				easing: cc.Ease.backOut
			}).start(), (t = this.nodeNpcTalkBubble).scaleX = 0, t.scaleY = 0, cc.tween(t).delay(.5).to(.5, {
				scaleX: 1,
				scaleY: 1
			}, {
				easing: cc.Ease.backOut
			}).start();
			let a = (t = this.nodeDrawPanel).y;
			t.y += 700, cc.tween(t).delay(.6).to(.5, {
				y: a
			}, {
				easing: cc.Ease.sineIn
			}).call(() => {
				this.scheduleOnce(.05, function() {
					mgrGuide.dispatchGuide(GUD_EVENT.PANEL_DANCE_DRAW), this.selectColor(this.randomColorIndex)
				})
			}).start()
		}
		updateDraw() {
			let t = db.get_dance_draw_color(this.selectedColorId);
			if (!t) return;
			let e = t.color;
			for (let t = 0; t < 9; t++) {
				let e = Math.floor(t % 3),
					a = e * this.drawNode.width / 3,
					i = (e + 1) * this.drawNode.width / 3,
					s = Math.floor(t / 3),
					n = s * this.drawNode.height / 3,
					o = (s + 1) * this.drawNode.height / 3;
				if (this.p1.x > a && this.p1.x <= i && this.p1.y > n && this.p1.y <= o) {
					this.selectedBoxIndexs.indexOf(t) < 0 && this.selectedBoxIndexs.push(t);
					break
				}
			}
			this.selectedColorIds.indexOf(this.selectedColorId) < 0 && this.selectedColorIds.push(this.selectedColorId), this.drawNode.graphics.drawCircle(this.p1.x, this.p1.y, LINE_WIDTH / 2, e, null, 0), this.drawNode.graphics.drawLine(this.p0.x, this.p0.y, this.p1.x, this.p1.y, e, LINE_WIDTH), this.p0.x = this.p1.x, this.p0.y = this.p1.y
		}
		isDrawSomething() {
			return !(this.selectedBoxIndexs.length <= 0) && !(this.selectedColorIds.length <= 0)
		}
		showResultPanel() {
			let t = UiHelper.getSelfGlobalPos(this.drawNode);
			this.drawNode.removeSelf(), this.nodeEffectDrawNodeRoot.addChild(this.drawNode), this.nodeEffectDrawNodeRoot.globalToLocal(t, !1), this.drawNode.pos(t.x, t.y), cc.tween(this.drawNode).to(1.8, {
				x: 0,
				y: 0
			}, {
				easing: cc.Ease.sineInOut
			}).delay(.5).to(.8, {
				scaleX: 1.5,
				scaleY: 1.5,
				alpha: 0
			}).delay(.7).call(() => {}).call(() => {
				this.nodeResultPanel.visible = !0, this.fillDanceInfo(), this.createRole(), this.buttonDance.node.scaleX = 0, this.buttonDance.node.scaleY = 0;
				let t = this.nodeResultPanel;
				t.scaleY = 0, cc.tween(t).to(.5, {
					scaleY: 1
				}, {
					easing: cc.Ease.backOut
				}).start()
			}).delay(.5).call(() => {
				cc.tween(this.buttonDance.node).to(1, {
					scaleY: 1,
					scaleX: 1
				}, {
					easing: cc.Ease.backOut
				}).start()
			}).delay(.1).hide().start();
			let e = this.nodeDrawPanel,
				a = e.y;
			cc.tween(e).to(.5, {
				y: a + 700
			}, {
				easing: cc.Ease.sineOut
			}).hide().start();
			let i = (e = this.nodeNpc).x;
			cc.tween(e).to(.5, {
				x: i + 500
			}, {
				easing: cc.Ease.sineOut
			}).hide().start()
		}
		createRole() {
			let t = this.contractIndex;
			this.createScene3DBack(1, 25), this.camera.transform.localPosition = new Laya.Vector3(0, 1.35, 3.34), this.camera.transform.localRotationEuler = new Laya.Vector3(-5, 0, 0);
			let e = db.game_cnf["dance_default_parts" + (t + 1)] || [];
			t == mgrGame.contractIndex && (e = mgrPart.partsWear), this.avatar = new RoleAvatar(e), this.avatar.transform.localPosition = new Laya.Vector3(0, 0, 0), this.avatar.transform.localRotationEuler = new Laya.Vector3(0, 0, 0), this.scene3DBack.addChild(this.avatar), this.avatar.playIdle(), this.avatar.playZaYang()
		}
		fillDanceInfo() {
			this.contractIndex;
			let t = db.get_role_contract_db(this.contractIndex).roleId,
				e = this.danceAnimId,
				a = (db.get_role_db(t), db.get_dance_anim_db(e));
			this.labelRoleNameCankao.visible = !1, this.labelDanceAnimNameCankao.visible = !1, this.spriteDanceAnimIcon.loadImage(a.iconTexture), this.spriteDanceAnimIconBg.loadImage(a.bgTexture)
		}
		selectColor(t) {
			if (mgrGuide.sendMsgKey("PANEL_DANCE_ANY_OPT"), this.selectedColorId == t) return;
			this.selectedColorId = t, this["buttonColor" + this.selectedColorId.toString()].node.addChild(this.nodeSelected), this.nodeSelected.pos(25, 27), this.nodeSelected.visible = !0, mgrGuide.dispatchGuide(GUD_EVENT.PANEL_DANCE_DRAW_IDLE_DRAW)
		}
		calcRoleAndAnim() {
			let t = [];
			t.push({
				contractIndex: mgrGame.contractIndex,
				weight: 10
			});
			for (let e = 0; e < this.selectedColorIds.length; e++) {
				let a = db.get_dance_draw_color(this.selectedColorIds[e]);
				if (a) {
					let e = .9 / this.selectedColorIds.length * 100,
						i = a.contractIndexs.length;
					for (let s = 0; s < i; s++) t.push({
						contractIndex: a.contractIndexs[s],
						weight: e / i
					})
				}
			}
			console.log("角色随机权重", t);
			let e = Tools.calcWheelTarget(t, "weight");
			console.log("角色随机结果", e);
			let a = e ? e.contractIndex : mgrGame.contractIndex,
				i = [];
			for (let t = 0; t < this.selectedBoxIndexs.length; t++) {
				let e = db.get_dance_box_animation(this.selectedBoxIndexs[t]);
				e && (i = i.concat(e.animationIds))
			}
			if (i.length <= 0) {
				let t = db.get_dance_box_animation(Mathf.random(9) - 1);
				t && (i = i.concat(t.animationIds))
			}
			return {
				contractIndex: a,
				animId: i[Mathf.random(i.length) - 1]
			}
		}
		showDance() {
			this.contractIndex;
			let t = this.danceAnimId;
			t == DANCE_ANSWER_ANIM_ID && mgrGame.addRecordDanceCount(DANCE_ANSWER_ANIM_ID), BaseFacade.mGoal.commit(ACTION_ID.PLAY_DANCE, 1), this.labelDebugInput.visible = !1, this.buttonDebugDance.node.visible = !1, this.nodeNpc.visible = !1, this.nodeDrawPanel.visible = !1, this.nodeResultPanel.visible = !1, this.nodeButtonsInteraction.visible = !0, this.nodeButtonsInteraction.y += 300, cc.tween(this.nodeButtonsInteraction).to(.3, {
				y: -100
			}, cc.OPTION.BACK_OUT).start();
			let e = BaseFacade.mItem.addWrapItemToList("1032", 1, 11);
			this.items = e;
			for (let t = 0; t < e.length; t++) {
				const a = e[t];
				a.itemId, a.count, BaseFacade.mItem.addItem(a.itemId, a.count, 998)
			}
			this.avatar.playAnimations([t, t, t, MODEL_ANIM.MAIN_IDLE], !1, 0);
			let a = db.get_dance_anim_db(t);
			a && a.faceAnimId ? this.avatar.playFaceAnim(a.faceAnimId, 0, !0) : this.avatar.playFaceAnim("face_zjm-face_dianji03", 0, !0);
			let i = this.getEffect("159");
			i.setScale(.8, .8, .8), i.play(), this.danceFinishTime = Timer.time + 10, this.timer1 = Timer.callLater(8, t => {
				this.destroyed || (console.log("PanelDanceDraw.showDance timer1 onLoop"), mgrSdk.stopRecordVideo())
			}), this.timer2 = Timer.callLater(10, a => {
				this.destroyed || (this.danceFinishTime = 0, console.log("PanelDanceDraw.showDance timer2 onLoop"), mgrSdk.isVideoShareable ? mgrAlert.openPanelLoading(UI_NAME.PanelShare, {
					shareIdx: 9,
					desc: "哇，跳得好棒！把你的舞蹈分享给朋友们看看吧！",
					descWithoutShare: "哇，跳得好棒！",
					closeCallback: () => {
						Timer.callLater(.1, () => {
							t == DANCE_ANSWER_ANIM_ID && mgrGame.getRecordDanceCount(DANCE_ANSWER_ANIM_ID) >= 3 && !mgrGame.isContractUnlock(DANCE_UNLOCK_CONTRACT_IDX) && PanelDanceRoleGet.openPanel(), mgrAlert.alertItems(e, !0), this.close()
						})
					},
					shareSucCallback: () => {
						Timer.callLater(.1, () => {
							t == DANCE_ANSWER_ANIM_ID && mgrGame.getRecordDanceCount(DANCE_ANSWER_ANIM_ID) >= 3 && !mgrGame.isContractUnlock(DANCE_UNLOCK_CONTRACT_IDX) && PanelDanceRoleGet.openPanel(), mgrAlert.alertItems(e, !0), this.close()
						})
					}
				}) : (t == DANCE_ANSWER_ANIM_ID && mgrGame.getRecordDanceCount(DANCE_ANSWER_ANIM_ID) >= 3 && !mgrGame.isContractUnlock(DANCE_UNLOCK_CONTRACT_IDX) && PanelDanceRoleGet.openPanel(), mgrAlert.alertItems(e, !0), this.close()))
			})
		}
		onTouchStart() {
			this.bTouchDown = !0, this.p0.x = this.drawNode.mouseX, this.p0.y = this.drawNode.mouseY, this.p1.x = this.drawNode.mouseX, this.p1.y = this.drawNode.mouseY, mgrGuide.sendMsgKey("PANEL_DANCE_ANY_OPT")
		}
		onTouchMove() {
			if (!this.bTouchDown) return;
			this.p0.x || this.p0.y || (this.p0.x = this.drawNode.mouseX, this.p0.y = this.drawNode.mouseY), this.p1.x = this.drawNode.mouseX, this.p1.y = this.drawNode.mouseY, Mathf.distanceSqr(this.p0, this.p1) >= LINE_WIDTH * LINE_WIDTH / 2 && this.updateDraw()
		}
		onTouchEnd() {
			this.bTouchDown && (this.p0.x = 0, this.p0.y = 0, this.bTouchDown = !1, this.isDrawSomething() ? (mgrGuide.sendMsgKey("OPT_FINISH"), this.buttonOk.node.visible = !0, mgrGuide.dispatchGuide(GUD_EVENT.PANEL_DANCE_DRAW_IDLE_OK)) : mgrGuide.dispatchGuide(GUD_EVENT.PANEL_DANCE_DRAW_IDLE_DRAW))
		}
		playUpEffect() {
			let t = _G.poolManager.get(Particle, "157");
			t.setParent(mgrAlert.scene3dfont), t.play(null, 10, 1), t.followTarget(this.drawNode, mgrAlert.camerafont, 0, -280)
		}
		clearInteractionEffect() {
			for (let t = 0; t < this.interactionEffect.length; t++) {
				let e = this.interactionEffect[t];
				e && _G.poolManager.put(e)
			}
		}
		playInteractionEffect(t) {
			if (this.destroyed || this.scene3DBack.destroyed) return;
			let e = _G.poolManager.get(Particle, t);
			e.setParent(this.scene3DBack), e.play(), this.interactionEffect.push(e)
		}
		showDrawResult() {
			Laya.stage.offAllCaller(this), UiHelper.unregisterTouchEvent(this.drawNode), this.playUpEffect();
			let t = this.calcRoleAndAnim();
			this.contractIndex = t.contractIndex, this.danceAnimId = t.animId, mgrGame.markDanceTested(t.animId), BaseFacade.mGoal.commit(ACTION_ID.DANCE_DRAW, 1);
			let e = db.game_cnf["dance_default_parts" + (t.contractIndex + 1)] || [];
			t.contractIndex == mgrGame.contractIndex && (e = mgrPart.partsWear);
			let a = new ResLoader;
			mgrPart.addPartResList(e, a), a.add(db.get_animation_db(this.danceAnimId).path, RES_TYPE.ANIMATIONCLIP), a.add(db.get_animation_db("face_zjm-face_dianji03").path, RES_TYPE.ANIMATIONCLIP), a.add(db.get_effect_db("174").res, RES_TYPE.PREFAB3D), a.add(db.get_effect_db("175").res, RES_TYPE.PREFAB3D), a.add(db.get_effect_db("176").res, RES_TYPE.PREFAB3D), mgrAlert.openWait(a, () => {
				this.showResultPanel()
			})
		}
		on_click_buttonClose() {
			mgrGuide.sendMsgKey("PANEL_DANCE_ANY_OPT"), this.danceFinishTime >= Timer.time ? _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelCpTest.5")) : this.close()
		}
		on_click_buttonColor0() {
			this.selectColor(0)
		}
		on_click_buttonColor1() {
			this.selectColor(1)
		}
		on_click_buttonColor2() {
			this.selectColor(2)
		}
		on_click_buttonColor3() {
			this.selectColor(3)
		}
		on_click_buttonColor4() {
			this.selectColor(4)
		}
		on_click_buttonColor5() {
			this.selectColor(5)
		}
		on_click_buttonColor6() {
			this.selectColor(6)
		}
		on_click_buttonOk() {
			mgrGuide.sendMsgKey("PANEL_DANCE_ANY_OPT"), GameStatistics.statisCommonEvent(2103), mgrAdv.statisVideoShow("draw_dance"), 1 == db.cop.b_show_adv_cost ? mgrAlert.openPanelLoading(UI_NAME.PanelAdvCostDialog, {
				desc: mgrI18n.getText("panelDanceDraw.6"),
				costText: mgrI18n.getText("panelDanceDraw.7"),
				advText: mgrI18n.getText("panelDanceDraw.8"),
				fOnClickCost: () => {
					BaseFacade.mItem.subItem("1000", 300, null) ? (GameStatistics.statisCommonEvent(2556, 1), this.showDrawResult()) : (GameStatistics.statisCommonEvent(2556, 0), mgrAlert.alertNotEnough("1000"))
				},
				fOnClickAdv: () => {
					mgrAdv.statisVideoClick("draw_dance"), mgrAdv.dispatchAdv("draw_dance", {}, !0)
				}
			}) : mgrAlert.alertAdvDialog(mgrI18n.getText("panelDanceDraw.6"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				mgrAdv.statisVideoClick("draw_dance"), mgrAdv.dispatchAdv("draw_dance", {}, !0)
			}, mgrI18n.getText("panelDanceDraw.7"), () => {})
		}
		on_click_buttonDance() {
			GameStatistics.statisCommonEvent(2104), this.showDance()
		}
		on_click_buttonDebugDance() {
			if (this.avatar) {
				let t = this.labelDebugInput.text;
				this.avatar.playAnimation(t, !1, MODEL_ANIM.MAIN_IDLE)
			}
		}
		on_click_buttonInteraction1() {
			Timer.time < this.nextInteractionTime || (this.nextInteractionTime = Timer.time + 1, mgrSound.playSound("yllsd_24"), this.playInteractionEffect("175"))
		}
		on_click_buttonInteraction2() {
			Timer.time < this.nextInteractionTime || (this.nextInteractionTime = Timer.time + 1, mgrSound.playSound("yllsd_25"), this.playInteractionEffect("174"))
		}
		on_click_buttonInteraction3() {
			Timer.time < this.nextInteractionTime || (this.nextInteractionTime = Timer.time + 1, mgrSound.playSound("yllsd_26"), this.playInteractionEffect("176"))
		}
		onMsgAdvShowSuc(t) {
			"draw_dance" == t.advName && this.showDrawResult()
		}
	}
	class PanelClassStudentStage extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassStudentStage.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_spriteRoleIcon: "Laya.Sprite",
				cc_labelTitle: "Laya.Label",
				cc_nodePhotos: "Laya.Box",
				cc_spritePhoto0: "Laya.Sprite",
				cc_spritePhoto1: "Laya.Sprite",
				cc_spritePhoto2: "Laya.Sprite",
				cc_spritePhoto3: "Laya.Sprite",
				cc_spriteTimePa: "Laya.Sprite",
				cc_barMaskTime: "UIBarMask",
				cc_labelTip: "Laya.Label",
				cc_nodeSprites: "Laya.Box",
				cc_sprite1: "Laya.Sprite",
				cc_sprite2: "Laya.Sprite",
				cc_sprite3: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.selectedPhotoIdx = 0, this.instOrBanner = new AdvInstOrBanner("enter_student_stage", "banner_student_stage"), this.bAction = !1, this.startPos = new Laya.Point, this.curPos = new Laya.Point, this.bTouched = !1
		}
		static getCenterPos() {
			let t = new Laya.Point(0, 0),
				e = mgrPanel.findPanel(PanelClassStudentStage);
			return e ? e.nodePhotos.localToGlobal(t, !1) : t
		}
		buildUi() {
			let t = db.get_student_stage_db_map(),
				e = [];
			for (let a in t) t[a] && e.push(t[a]);
			let a = e[Mathf.random(e.length) - 1];
			if (!a) return;
			this.stageData = a;
			let i = this.context && this.context.seatIdx,
				s = mgrClassRoom.getSeatDatas()[i];
			if (!s) return;
			let n = db.get_class_room_role_db(s.roleId);
			n && (this.spriteRoleIcon.loadImage(n.iconUrl), this.labelTitle.text = `${mgrI18n.getText(n.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`), this.sprite1.loadImage(a.pictureUrl1), this.sprite1.pos(a.picturePos1[0], a.picturePos1[1]), this.sprite2.loadImage(a.pictureUrl2), this.sprite2.pos(a.picturePos2[0], a.picturePos2[1]), this.sprite3.loadImage(a.pictureUrl3), this.sprite3.pos(a.picturePos3[0], a.picturePos3[1]), this.spritePhoto0.loadImage(a.pictureUrl1), this.spritePhoto0.pos(0, 0), this.spritePhoto1.loadImage(a.pictureUrl1), this.spritePhoto1.pos(Mathf.random(100) <= 50 ? 650 : -650, -650), UiHelper.registerTouchEvent(this.spritePhoto1, this.onTouchStart.bind(this), this.onTouchMove.bind(this), null), this.spritePhoto1.visible = !1, this.spritePhoto2.loadImage(a.pictureUrl2), this.spritePhoto2.pos(Mathf.random(100) <= 50 ? 650 : -650, -650), UiHelper.registerTouchEvent(this.spritePhoto2, this.onTouchStart.bind(this), this.onTouchMove.bind(this), null), this.spritePhoto2.visible = !1, this.spritePhoto3.loadImage(a.pictureUrl3), this.spritePhoto3.pos(Mathf.random(100) <= 50 ? 650 : -650, -650), UiHelper.registerTouchEvent(this.spritePhoto3, this.onTouchStart.bind(this), this.onTouchMove.bind(this), null), this.spritePhoto3.visible = !1, Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onTouchEnd), Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.onTouchOut), this.barMaskTime.style = UIBarMask.STYLE_RADIAL, this.barMaskTime.progress = 0, this.selectedPhotoIdx = 1, this.spritePhoto1.addChild(this.spriteTimePa), this.spriteTimePa.pos(300, 250), this.spritePhoto1.visible = !0, this.bAction = !0, cc.tween(this.spritePhoto1).to(.5, {
				x: 125,
				y: 125
			}).call(() => {
				this.destroyed || (this.bAction = !1)
			}).start(), Laya.timer.frameOnce(1, this, () => {
				mgrGuide.dispatchGuide(GUD_EVENT.ENTER_STUDENT_STAGE) || mgrGuide.dispatchGuide(GUD_EVENT.PANEL_STUDENT_STAGE_ENTER_IDLE)
			}), mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13102)
		}
		dispose() {
			this.instOrBanner.dispose(), _G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.ENTER_STUDENT_STAGE), _G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.PANEL_STUDENT_STAGE_ENTER_IDLE), _G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.PANEL_STUDENT_STAGE_MOVE_IDLE), this.timer && this.timer.stop(), Laya.stage.offAllCaller(this), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onTouchStart() {
			this.bAction || (this.bTouched = !0, this.spriteTimePa.visible = !0, Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onTouchEnd), this.startPos.x = this["spritePhoto" + this.selectedPhotoIdx.toString()].mouseX, this.startPos.y = this["spritePhoto" + this.selectedPhotoIdx.toString()].mouseY, this.barMaskTime.progress = 0, this.timer ? this.timer.start() : this.timer = Timer.callLoop(.1, t => {
				this.destroyed ? t.stop() : (this.barMaskTime.progress += .025, this.barMaskTime.progress >= 1 && (this.barMaskTime.progress = 1, this.nextAction(), t.stop()))
			}, this), mgrGuide.sendMsgKey("PANEL_STUDENT_STAGE_START"))
		}
		onTouchMove() {
			this.bAction || this.bTouched && (this.curPos.x = this["spritePhoto" + this.selectedPhotoIdx.toString()].mouseX, this.curPos.y = this["spritePhoto" + this.selectedPhotoIdx.toString()].mouseY, this["spritePhoto" + this.selectedPhotoIdx.toString()].x += this.curPos.x - this.startPos.x, this["spritePhoto" + this.selectedPhotoIdx.toString()].y += this.curPos.y - this.startPos.y, this.timer && !this.timer.isRunning() && this.timer.start(), this.spriteTimePa.visible = !0)
		}
		onTouchEnd() {
			if (this.bAction) return;
			this.bTouched = !1, Laya.stage.off(Laya.Event.MOUSE_UP, this, this.onTouchEnd), this.timer && this.timer.stop(), this.spriteTimePa.visible = !1, this["spritePhoto" + this.selectedPhotoIdx.toString()] && mgrGuide.dispatchGuide(GUD_EVENT.PANEL_STUDENT_STAGE_MOVE_IDLE)
		}
		onTouchOut() {
			if (this.bAction) return;
			this.onTouchEnd();
			let t = this["spritePhoto" + this.selectedPhotoIdx.toString()];
			t && (this.bAction = !0, cc.tween(t).to(.3, {
				x: 125,
				y: 125
			}).call(() => {
				this.destroyed || (this.startPos.x = t.mouseX, this.startPos.y = t.mouseY, this.bAction = !1)
			}).start())
		}
		gameResult() {
			let t = [];
			for (let e = 1; e <= 3; e++) {
				let a = this["spritePhoto" + e.toString()];
				t.push([a.x, a.y])
			}
			mgrAlert.openPanelLoading(UI_NAME.PanelClassStudenStageResult, {
				stageId: this.stageData.id,
				seatIdx: this.context.seatIdx,
				photoPos: t
			}), this.close()
		}
		nextAction() {
			GameStatistics.statisCommonEvent(2547 + this.selectedPhotoIdx), mgrGuide.sendMsgKey("STUDENT_STAGE_NEXT");
			let t = this["spritePhoto" + this.selectedPhotoIdx.toString()];
			mgrAlert.playParticleEffect("177", t.localToGlobal(new Laya.Point(t.width / 2, t.height / 2)), 1, .5), UiHelper.unregisterTouchEvent(t), this.timer && this.timer.stop(), this.barMaskTime.progress = 0, this.spriteTimePa.visible = !1, this.spritePhoto0.alpha = 0, this.labelTip.visible = !1, this.selectedPhotoIdx++;
			let e = this["spritePhoto" + this.selectedPhotoIdx.toString()];
			e ? (e.addChild(this.spriteTimePa), e.visible = !0, this.bAction = !0, cc.tween(e).to(.5, {
				x: 125,
				y: 125
			}).call(() => {
				this.destroyed || (this.startPos.x = e.mouseX, this.startPos.y = e.mouseY, this.bAction = !1)
			}).start(), this.selectedPhotoIdx, this.spriteTimePa.pos(300, 0), mgrGuide.dispatchGuide(GUD_EVENT.PANEL_STUDENT_STAGE_ENTER_IDLE)) : this.gameResult()
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisOnStageEnd(13102, 0, 1), this.close()
		}
	}
	class PanelClassTeacherChangeScore extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelClassTeacherChangeScore.json", this.openAndCloseAnimEnabled = !1, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_labelScore: "Laya.Label",
				cc_nodeScore: "Laya.Image",
				cc_nodeSlidingBlock: "Laya.Box",
				cc_buttonSure: "UIButton"
			}, this.startX = 0, this.curX = 0, this.bTouched = !1
		}
		static getCenterPos() {
			let t = new Laya.Point(0, 0),
				e = mgrPanel.findPanel(PanelClassTeacherChangeScore);
			return e ? e.nodeScore.localToGlobal(t, !1) : t
		}
		buildUi() {
			let t = this.context && this.context.score || 0;
			this.labelScore.font = GConfig.bmf_class, this.labelScore.text = t.toString(), this.nodeSlidingBlock.x = t / 100 * this.nodeScore.width, UiHelper.registerTouchEvent(this.nodeSlidingBlock, this.onTouchStart.bind(this), this.onTouchMove.bind(this), null), Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onTouchEnd), this.bg.scale(0, 0), cc.tween(this.bg).to(.3, cc.PROP.SCALE1).call(() => {
				mgrGuide.dispatchGuide(GUD_EVENT.PANEL_TEACHER_CHANGE_SCORE_IDLE)
			}).start()
		}
		dispose() {
			_G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.PANEL_TEACHER_CHANGE_SCORE_IDLE), Laya.stage.offAllCaller(this), super.dispose()
		}
		onTouchStart() {
			this.bTouched = !0, this.startX = this.nodeSlidingBlock.mouseX, mgrGuide.sendMsgKey("PANEL_TEACHER_SCORE_CHANGE")
		}
		onTouchMove() {
			this.bTouched && (this.curX = this.nodeSlidingBlock.mouseX, this.nodeSlidingBlock.x += this.curX - this.startX, this.nodeSlidingBlock.x < 0 && (this.nodeSlidingBlock.x = 0), this.nodeSlidingBlock.x > this.nodeScore.width && (this.nodeSlidingBlock.x = this.nodeScore.width), this.refreshScore())
		}
		onTouchEnd() {
			this.bTouched = !1
		}
		refreshScore() {
			this.labelScore.text = Math.ceil(this.nodeSlidingBlock.x / this.nodeScore.width * 100).toString()
		}
		on_click_buttonSure() {
			this.context && this.context.fOnChange && this.context.fOnChange(parseInt(this.labelScore.text)), this.close()
		}
	}
	const OPT_IDLE_DELAY_TIME = 2;
	var GuideScript = {};

	function TAG_1() {}

	function TAG_2() {}

	function TAG_END() {}
	let tags = {};

	function TAG(t) {
		if (tags[t]) return tags[t];
		let e = function() {};
		return tags[t] = e, e
	}

	function AddGuide(t, e) {
		let a = GuideScript[t];
		a || (a = [], GuideScript[t] = a), a.push(e)
	}

	function initGuideScript() {
		AddGuide(GUD_EVENT.START_GAME, [GUD.hideAll(), GUD.waitNode(GUD_REG_NODE.PANELCONTRACT_BUTTONOK), GUD.pointEvent(2001), GUD.callFunc(function() {
			GameStatistics.statisOnStageStart(2038), GameStatistics.statisOnStageStart(10001)
		}), GUD.pointEvent(2002), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10001), GameStatistics.statisOnStageStart(10002)
		}), GUD.hideMsg(), GUD.setBlockEnabled(!1), GUD.hideAll(), GUD.sendMsg("GUIDE_SELECT_ROLE"), GUD.waitNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX), GUD.setBlockEnabled(!0), GUD.click(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX), GUD.pointEvent(2041), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10003), GameStatistics.statisOnStageStart(10004)
		}), GUD.hideAll(), GUD.waitNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE), GUD.setBlockEnabled(!0), GUD.waitTime(.3), GUD.click(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE), GUD.pointEvent(2008), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10004), GameStatistics.statisOnStageStart(10005)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.START_CONTRACT, [GUD.hideAll(), GUD.waitNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX), GUD.setBlockEnabled(!0), GUD.click(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX), GUD.hideAll(), GUD.waitNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE), GUD.setBlockEnabled(!0), GUD.waitTime(.3), GUD.click(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE), GUD.close()]), AddGuide(GUD_EVENT.START_CONTRACT2, [GUD.hideAll(), GUD.setBlockEnabled(!1), GUD.waitForMsg("CLICK_CONTRACT_CIRCLE"), GUD.close()]), AddGuide(GUD_EVENT.ENTER_MAIN, [GUD.setJumpEnable(!0), GUD.hideAll(), GUD.setBlockEnabled(!1), GUD.waitForMsg("START_MAIN"), GUD.setBlockEnabled(!0), GUD.waitTime(1.3), GUD.waitAndClick(GUD_REG_NODE.PANELMAIN_BUTTONPLAY), GUD.pointEvent(2009), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10005), GameStatistics.statisOnStageStart(10006)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_SKINCARE, [GUD.hideAll(), GUD.callFunc(function(t) {
			switch (t.params) {
				case "shui_xi":
					t.gotoTag(TAG("sx_finish"));
					break;
				case "ca_gan":
					t.gotoTag(TAG("cg_finish"));
					break;
				case "mianmo":
					t.gotoTag(TAG("mm_finish"))
			}
		}), GUD.waitTime(2), GUD.click(GUD_REG_NODE.PANELSKINCARE_BUTTONSTART), GUD.pointEvent(2010), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10006), GameStatistics.statisOnStageStart(10007)
		}), GUD.hideAll(), GUD.waitTime(1), GUD.click(GUD_REG_NODE.PANELSKINCARE_ITEM0), GUD.pointEvent(2011), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10007), GameStatistics.statisOnStageStart(10008)
		}), GUD.moveMaskTo(GUD_REG_NODE.PANELSKINCARE_BRUSH), GUD.setBlockEnabled(!1), GUD.setMaskVisible(!1), GUD.callFunc(function(t) {
			let e = PanelSkincare.getBrushPos(),
				a = GUDHelper.getPosByCenterOffset(0, 0);
			t.showFingerMoveAnim(e, a, !1, 1.5)
		}), GUD.waitForMsg("TOUCH_DOWN_BRUSH"), GUD.pointEvent(2012), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10008), GameStatistics.statisOnStageStart(10009)
		}), GUD.hideAll(), GUD.callFunc(function(t) {
			let e = [PanelSkincare.getBrushPos(), GUDHelper.getPosByCenterOffset(-150, 0), GUDHelper.getPosByCenterOffset(150, 0), GUDHelper.getPosByCenterOffset(-150, 0), GUDHelper.getPosByCenterOffset(150, 0)];
			t.showFingerMovePathAnim(e)
		}), GUD.waitForMsg("OPT_FINISH"), GUD.pointEvent(2013), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10009), GameStatistics.statisOnStageStart(10010)
		}), GUD.callFunc(function(t) {
			t.stop(), t.closeGuide(!1), PanelSkincare.lockTouch1 = !1, mgrGuide.dispatchGuide("wait_then_select_item_and_move_to", "shui_xi")
		}), TAG("sx_finish"), GUD.pointEvent(2016), GUD.callFunc(function(t) {
			GameStatistics.statisOnStageEnd(10012), GameStatistics.statisOnStageStart(10013), t.stop(), t.closeGuide(!1), PanelSkincare.lockTouch1 = !1, mgrGuide.dispatchGuide("wait_then_select_item_and_move_to", "ca_gan")
		}), TAG("cg_finish"), GUD.pointEvent(2019), GUD.callFunc(function(t) {
			GameStatistics.statisOnStageEnd(10015), GameStatistics.statisOnStageStart(10016), t.stop(), t.closeGuide(!1), PanelSkincare.lockTouch1 = !1, mgrGuide.dispatchGuide("wait_then_select_item_and_move_to", "mianmo")
		}), TAG("mm_finish"), GUD.pointEvent(2022), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10018), GameStatistics.statisOnStageStart(10019)
		}), GUD.setBlockEnabled(!1), GUD.showMaskNone(), GUD.callFunc(function(t) {
			let e = GUDHelper.getPosByCenterOffset(200, -200),
				a = GUDHelper.getPosByCenterOffset(-200, 200);
			t.showFingerMoveAnim(e, a, !1, 1.5)
		}), GUD.pointEvent(2023), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10019), GameStatistics.statisOnStageStart(10020)
		}), GUD.waitForMsg("OPT_FINISH"), GUD.pointEvent(2024), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10020), GameStatistics.statisOnStageStart(10021)
		}), GUD.setBlockEnabled(!0), GUD.callFunc(function() {
			PanelSkincare.lockTouch1 = !0
		}), GUD.hideMoveFinger(), GUD.hideAll(), GUD.waitForMsg("SKINCARE_OVER"), GUD.pointEvent(2025), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10021), GameStatistics.statisOnStageStart(10022)
		}), GUD.waitAndClick(GUD_REG_NODE.PANELSKINCARE_BUTTONCLOSE), GUD.pointEvent(2026), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10022), GameStatistics.statisOnStageStart(10023), PanelSkincare.lockTouch = !1
		}), GUD.closeAndSave()]), AddGuide("wait_then_select_item_and_move_to", [GUD.hideAll(), GUD.setBlockEnabled(!1), GUD.callFunc(function(t) {
			t.params
		}), GUD.click(GUD_REG_NODE.PANELSKINCARE_ITEM0), GUD.moveMaskTo(GUD_REG_NODE.PANELSKINCARE_BRUSH), GUD.showMaskExceptCenter(), GUD.callFunc(function(t) {
			switch (t.params) {
				case "shui_xi":
					GUD.pointEvent(2014)(), GameStatistics.statisOnStageEnd(10010), GameStatistics.statisOnStageStart(10011);
					break;
				case "ca_gan":
					GUD.pointEvent(2017)(), GameStatistics.statisOnStageEnd(10013), GameStatistics.statisOnStageStart(10014);
					break;
				case "mianmo":
					GUD.pointEvent(2020)(), GameStatistics.statisOnStageEnd(10016), GameStatistics.statisOnStageStart(10017)
			}
			let e = PanelSkincare.getBrushPos(),
				a = GUDHelper.getPosByCenterOffset(0, 0);
			t.showFingerMoveAnim(e, a, !1, 1.5)
		}), GUD.waitForMsg("TOUCH_DOWN_BRUSH"), GUD.hideAll(), GUD.callFunc(function(t) {
			let e = [PanelSkincare.getBrushPos(), GUDHelper.getPosByCenterOffset(-150, 0), GUDHelper.getPosByCenterOffset(150, 0), GUDHelper.getPosByCenterOffset(-150, 0), GUDHelper.getPosByCenterOffset(150, 0)];
			switch (t.showFingerMovePathAnim(e), t.params) {
				case "shui_xi":
					GUD.pointEvent(2015)(), GameStatistics.statisOnStageEnd(10011), GameStatistics.statisOnStageStart(10012);
					break;
				case "ca_gan":
					GUD.pointEvent(2018)(), GameStatistics.statisOnStageEnd(10014), GameStatistics.statisOnStageStart(10015);
					break;
				case "mianmo":
					GUD.pointEvent(2021)(), GameStatistics.statisOnStageEnd(10017), GameStatistics.statisOnStageStart(10018)
			}
		}), GUD.waitForMsg("OPT_FINISH"), GUD.close(), GUD.callFunc(function(t) {
			t.params && mgrGuide.dispatchGuide(GUD_EVENT.ENTER_SKINCARE, t.params)
		})]), AddGuide(GUD_EVENT.ENTER_MAIN, [GUD.waitTime(1.5), GUD.waitAndClick(GUD_REG_NODE.PANELMAIN_BUTTONWEITUO), GUD.pointEvent(2027), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10023), GameStatistics.statisOnStageStart(10024)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_PHONE, [GUD.waitTime(.5), GUD.waitAndClick(GUD_REG_NODE.PANELPHONE_BUTTONYES), GUD.pointEvent(2028), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10024), GameStatistics.statisOnStageStart(10025)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_TALK, [GUD.waitTime(.5), GUD.waitAndClick(GUD_REG_NODE.PANELTALK_BUTTONSTART), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_ROOM, [GUD.pointEvent(2029), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10025), GameStatistics.statisOnStageStart(10026)
		}), GUD.hideAll(), GUD.waitTime(2.5), GUD.waitTime(.5), GUD.waitAndClick(GUD_REG_NODE.PANELROOM_PART_18024, new Vec2(60, 90)), GUD.pointEvent(2030), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10026), GameStatistics.statisOnStageStart(10027)
		}), GUD.hideAll(), GUD.waitNode(GUD_REG_NODE.PANELROOM_BRUSH), GUD.waitTime(.4), GUD.moveMaskTo(GUD_REG_NODE.PANELROOM_BRUSH, new Vec2(100, 100)), GUD.setBlockEnabled(!1), GUD.setMaskVisible(!0), GUD.showMaskExceptCenter(), GUD.callFunc(function(t) {
			let e = PanelRoom.getBrushPos(),
				a = PanelRoom.getZuoMeiMao();
			t.showFingerMoveAnim(e, a, !1, 1.5)
		}), GUD.waitForMsg("TOUCH_DOWN_BRUSH"), GUD.pointEvent(2031), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10027), GameStatistics.statisOnStageStart(10028)
		}), GUD.hideAll(), GUD.callFunc(function(t) {
			PanelRoom.lockRight = !0;
			let e = PanelRoom.getZuoMeiMao();
			e.y += 10;
			let a = [PanelRoom.getBrushPos(), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 - 200, e.y), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 - 200, e.y)];
			t.showFingerMovePathAnim(a, 600)
		}), GUD.waitForMsg("PAINT_FINISH_L"), GUD.callFunc(function(t) {
			PanelRoom.lockRight = !1;
			let e = PanelRoom.getYouMeiMao(),
				a = [PanelRoom.getBrushPos(), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 + 200, e.y), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 + 200, e.y)];
			t.showFingerMovePathAnim(a, 600)
		}), GUD.waitForMsg("PAINT_FINISH_A"), GUD.pointEvent(2032), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10028), GameStatistics.statisOnStageStart(10029)
		}), GUD.click(GUD_REG_NODE.PANELROOM_YANYING, new Vec2(43, 43)), GUD.pointEvent(2033), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10029), GameStatistics.statisOnStageStart(10030)
		}), GUD.waitAndClick(GUD_REG_NODE.PANELROOM_PART_19011, new Vec2(60, 90)), GUD.pointEvent(2034), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10030), GameStatistics.statisOnStageStart(10031)
		}), GUD.waitNode(GUD_REG_NODE.PANELROOM_BRUSH), GUD.waitTime(.4), GUD.moveMaskTo(GUD_REG_NODE.PANELROOM_BRUSH, new Vec2(100, 100)), GUD.setMaskVisible(!0), GUD.showMaskExceptCenter(), GUD.callFunc(function(t) {
			let e = PanelRoom.getBrushPos(),
				a = PanelRoom.getZuoMeiMao();
			a.y += 30, t.showFingerMoveAnim(e, a, !1, 1.5)
		}), GUD.waitForMsg("TOUCH_DOWN_BRUSH"), GUD.pointEvent(2035), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10031), GameStatistics.statisOnStageStart(10032)
		}), GUD.hideAll(), GUD.callFunc(function(t) {
			PanelRoom.lockRight = !0;
			let e = PanelRoom.getZuoMeiMao();
			e.y += 60;
			let a = [PanelRoom.getBrushPos(), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 - 200, e.y), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 - 200, e.y)];
			t.showFingerMovePathAnim(a, 600)
		}), GUD.waitForMsg("PAINT_FINISH_L"), GUD.waitTime(.3), GUD.callFunc(function(t) {
			PanelRoom.lockRight = !1;
			let e = PanelRoom.getYouMeiMao();
			e.y += 60;
			let a = [PanelRoom.getBrushPos(), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 + 200, e.y), new Vec2(_G.canvasWidth / 2, e.y), new Vec2(_G.canvasWidth / 2 + 200, e.y)];
			t.showFingerMovePathAnim(a, 600)
		}), GUD.waitForMsg("PAINT_FINISH_A"), GUD.pointEvent(2036), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10032), GameStatistics.statisOnStageStart(10033)
		}), GUD.hideMoveFinger(), GUD.waitTime(.3), GUD.pointEvent(2037), GUD.callFunc(function() {
			GameStatistics.statisOnStageEnd(10033), GameStatistics.statisOnStageStart(10034)
		}), GUD.closeAndSave(), GUD.callFunc(function() {
			PanelRoom.lockRight = !1, PanelRoom.lockTouch = !1, PanelRoom.resetMenu(), GameStatistics.statisOnStageEnd(2038), GameStatistics.statisOnStageEnd(10034)
		})]), AddGuide(GUD_EVENT.GOTO_CAT_COIN, [GUD.waitTime(.5), GUD.waitAndClick(GUD_REG_NODE.PANELMAIN_BUTTONCOIN), GUD.pointEvent(3001), GUD.hideAll(), GUD.waitTime(.3), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_DREAM, [GUD.pointEvent(3021), GUD.waitAndClick(GUD_REG_NODE.PANELDREAM_SUITITEM0, new Vec2(129, 170)), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_FISH, [GUD.waitTime(.5), GUD.waitAndClick(GUD_REG_NODE.PANELFISH_BUTTONFIND, new Vec2(0, 20)), GUD.hideAll(), GUD.waitNode(GUD_REG_NODE.PANELFISH_TOUCHNODE), GUD.moveMaskTo(GUD_REG_NODE.PANELFISH_TOUCHNODE, new Vec2(40, 60)), GUD.setBlockEnabled(!1), GUD.setMaskVisible(!0), GUD.showMaskExceptCenter(), GUD.callFunc(function(t) {
			let e = PanelFishGame.getTouchPos(),
				a = PanelFishGame.getGameCenterPos();
			t.showFingerMoveAnim(e, a, !1, 1.5)
		}), GUD.waitForMsg("TOUCH_DOWN_FISH"), GUD.hideAll(), GUD.callFunc(function(t) {
			let e = PanelFishGame.getFishSprite();
			e ? t.followSprite(e) : t.closeGuide(!0)
		}), GUD.waitForMsg("CATCH_FISH"), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_SZZ, [GUD.pointEvent(3011), GUD.waitAndClick(GUD_REG_NODE.PANELSZZ_BUTTONYES), GUD.hideAll(), GUD.waitTime(3.5), GUD.click(GUD_REG_NODE.PANELSZZ_BUTTONAWARD), GUD.hideAll(), GUD.waitTime(.3), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_MANGHE, [GUD.pointEvent(3071), GUD.setMaskVisible(!0), GUD.showMaskNone(), GUD.setBlockEnabled(!1), GUD.callFunc(function(t) {
			let e = PanelMangHe.getBoxPos();
			e.y -= 50, GUD.moveFingerTo(e)(t)
		}), GUD.waitForMsg("CLICK_MANG_HE"), GUD.pointEvent(3072), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_MANGHE_OPEN, [GUD.waitNode(GUD_REG_NODE.PANELMANGHE_BUTTONOPEN), GUD.waitTime(.2), GUD.click(GUD_REG_NODE.PANELMANGHE_BUTTONOPEN), GUD.pointEvent(3073), GUD.waitForMsg("SHOW_FAZHEN"), GUD.hideAll(), GUD.setBlockEnabled(!1), GUD.callFunc(function(t) {
			let e = PanelMangHeOpen.getPointPos(0),
				a = PanelMangHeOpen.getPointPos(3);
			t.showFingerMoveAnim(e, a, !0, 1.5)
		}), GUD.waitForMsg("LINE_SUC"), GUD.pointEvent(3075), GUD.hideAll(), GUD.waitTime(.3), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_PLAY, [GUD.waitTime(.1), GUD.sendMsg("SHOW_YINDAO_EFFECT"), GUD.hideAll(), GUD.waitTime(.2), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_LAJI, [GUD.waitForMsg("LAJI_CREATE"), GUD.waitTime(.5), GUD.waitAndClick(GUD_REG_NODE.PANELOUT_LAJITONG, new Vec2(73, 20)), GUD.hideAll(), GUD.waitForMsg("LAJI_CREATE"), GUD.waitTime(.5), GUD.waitAndClick(GUD_REG_NODE.PANELOUT_LAJITONG, new Vec2(73, 20)), GUD.hideAll(), GUD.waitTime(.2), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_PAISHOU, [GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_HUDIE, [GUD.waitAndClick(GUD_REG_NODE.PANELOUT_DIALOG, new Vec2(300, 100)), GUD.hideAll(), GUD.waitForMsg("START_BUTTERFLY"), GUD.callFunc(function(t) {
			PanelOutside.startButteryfly()
		}), GUD.hideAll(), GUD.waitTime(.3), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_LINGGAN, [GUD.hideAll(), GUD.waitTime(.3), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_CZTG, [GUD.waitNode(GUD_REG_NODE.PANELIN_ORDER), GUD.callFunc(function(t) {
			t.setTop()
		}), GUD.waitAndClick(GUD_REG_NODE.PANELIN_ORDER, new Vec2(200, 50)), GUD.hideAll(), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_ORDER, [GUD.waitAndClick(GUD_REG_NODE.PANELORDER_ITEM, new Vec2(0, 100)), GUD.hideAll(), GUD.waitTime(.3), GUD.waitAndClick(GUD_REG_NODE.PANELORDER_BUTTONOK), GUD.hideAll(), GUD.waitTime(.3), GUD.closeAndSave()]), AddGuide(GUD_EVENT.OPT_IDLE_SI_MIAN_MO, [GUD.setBlockEnabled(!1), GUD.waitForMsg("OPT_FINISH", OPT_IDLE_DELAY_TIME, TAG_END), GUD.callFunc(function(t) {
			let e = GUDHelper.getPosByCenterOffset(200, -200),
				a = GUDHelper.getPosByCenterOffset(-200, 200);
			t.showFingerMoveAnim(e, a, !1, 1.5)
		}), GUD.waitForMsg("OPT_FINISH"), TAG_END, GUD.close()]), AddGuide(GUD_EVENT.OPT_IDLE_TU_LIAN, [GUD.setBlockEnabled(!1), GUD.waitForMsg("OPT_FINISH", OPT_IDLE_DELAY_TIME, TAG_END), GUD.callFunc(function(t) {
			let e = [PanelSkincare.getBrushPos(), GUDHelper.getPosByCenterOffset(-150, -100), GUDHelper.getPosByCenterOffset(150, -100), GUDHelper.getPosByCenterOffset(-150, 0), GUDHelper.getPosByCenterOffset(150, 0), GUDHelper.getPosByCenterOffset(-150, 100), GUDHelper.getPosByCenterOffset(150, 100)];
			t.showFingerMovePathAnim(e, 600)
		}), GUD.waitForMsg("OPT_FINISH"), TAG_END, GUD.close()]), AddGuide(GUD_EVENT.OPT_IDLE_TU_BI_ZI, [GUD.setBlockEnabled(!1), GUD.waitForMsg("OPT_FINISH", OPT_IDLE_DELAY_TIME, TAG_END), GUD.callFunc(function(t) {
			let e = [PanelSkincare.getBrushPos(), GUDHelper.getPosByCenterOffset(-50, 0), GUDHelper.getPosByCenterOffset(50, 0), GUDHelper.getPosByCenterOffset(-50, 0), GUDHelper.getPosByCenterOffset(50, 0)];
			t.showFingerMovePathAnim(e, 600)
		}), GUD.waitForMsg("OPT_FINISH"), TAG_END, GUD.close()]), AddGuide(GUD_EVENT.OPT_IDLE_XIU_MEI_MAO, [GUD.setBlockEnabled(!1), GUD.waitForMsg("OPT_FINISH", OPT_IDLE_DELAY_TIME, TAG_END), GUD.callFunc(function(t) {
			let e = GUDHelper.getPosByCenterOffset(-75, -130),
				a = GUDHelper.getPosByCenterOffset(75, -130),
				i = [PanelSkincare.getBrushPos(), new Vec2(e.x - 70, e.y + 10), new Vec2(e.x + 70, e.y + 10), new Vec2(e.x - 70, e.y + 10), new Vec2(a.x + 70, a.y + 10), new Vec2(a.x - 70, a.y + 10), new Vec2(a.x + 70, a.y + 10)];
			t.showFingerMovePathAnim(i, 600)
		}), GUD.waitForMsg("OPT_FINISH"), TAG_END, GUD.close()]), AddGuide(GUD_EVENT.PANEL_DANCE_PREVIEW, [GUD.setBlockEnabled(!1), GUD.callFunc(() => {
			GameStatistics.statisOnStageStart(2041, 0)
		}), GUD.click(GUD_REG_NODE.PANELDANCEPREVIEW_BUTTONTODANCEDRAW), GUD.hideAll(), GUD.callFunc(() => {
			GameStatistics.statisOnStageEnd(2041, 1, 0), GameStatistics.statisOnStageStart(2042, 0)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.PANEL_DANCE_DRAW, [GUD.setBlockEnabled(!1), GUD.click(GUD_REG_NODE.PANELDANCEDRAW_BUTTONCOLOR0), GUD.hideAll(), GUD.callFunc(() => {
			GameStatistics.statisOnStageEnd(2042, 1, 0), GameStatistics.statisOnStageStart(2043, 0)
		}), GUD.callFunc(function(t) {
			let e = PanelDanceDraw.getDrawPanelCenterPos();
			console.log("centerPoint", e);
			let a = [];
			for (let t = 0; t < 360; t += 10) {
				let [i, s] = Mathf.calcPointOnArc(e.x, e.y, 100, t);
				a.push(new Vec2(i - 65, s - 65))
			}
			console.log("path", a), t.showFingerMovePathAnim(a, 400, 2)
		}), GUD.waitForMsg("OPT_FINISH"), GUD.hideAll(), GUD.callFunc(() => {
			GameStatistics.statisOnStageEnd(2043, 1, 0), GameStatistics.statisOnStageStart(2044, 0)
		}), GUD.click(GUD_REG_NODE.PANELDANCEDRAW_BUTTONOK), GUD.hideAll(), GUD.callFunc(() => {
			GameStatistics.statisOnStageEnd(2044, 1, 0)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.PANEL_DANCE_DRAW_IDLE_DRAW, [GUD.setBlockEnabled(!1), GUD.waitForMsg("PANEL_DANCE_ANY_OPT", OPT_IDLE_DELAY_TIME, TAG_END), GUD.callFunc(function(t) {
			let e = PanelDanceDraw.getDrawPanelCenterPos();
			console.log("centerPoint", e);
			let a = [];
			for (let t = 0; t < 360; t += 10) {
				let [i, s] = Mathf.calcPointOnArc(e.x, e.y, 100, t);
				a.push(new Vec2(i, s))
			}
			console.log("path", a), t.showFingerMovePathAnim(a, 400, 2)
		}), GUD.waitForMsg("PANEL_DANCE_ANY_OPT"), GUD.hideAll(), TAG_END, GUD.close()]), AddGuide(GUD_EVENT.PANEL_DANCE_DRAW_IDLE_OK, [GUD.setBlockEnabled(!1), GUD.waitForMsg("PANEL_DANCE_ANY_OPT", OPT_IDLE_DELAY_TIME, TAG_END), GUD.callFunc(function(t) {
			let e = PanelDanceDraw.getButtonOkPos();
			console.log("centerPoint", e), t.moveTo(e), t.showFingerClickAnim()
		}), GUD.waitForMsg("PANEL_DANCE_ANY_OPT"), GUD.hideAll(), TAG_END, GUD.close()]), AddGuide(GUD_EVENT.ENTER_CP_TEST, [GUD.setBlockEnabled(!1), GUD.click(GUD_REG_NODE.PANELCPTEST_BUTTONGUIDE), GUD.hideAll(), GUD.waitForMsg("CP_CLICK_ITEM"), GUD.hideAll(), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_CLASS_ROOM, [GUD.setBlockEnabled(!1), GUD.click(GUD_REG_NODE.PANELCLASSROOM_BUTTONSTUDENT), GUD.hideAll(), GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2516)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.ENTER_STUDENT_STAGE, [GUD.setBlockEnabled(!1), GUD.callFunc(function(t) {
			let e = PanelClassStudentStage.getCenterPos();
			console.log("中心点位置", e);
			let a = new Laya.Point(e.x + 150, e.y + 150),
				i = [];
			i.push(a), i.push(e), t.showFingerMovePathAnim(i, 400, 2)
		}), GUD.waitForMsg("PANEL_STUDENT_STAGE_START"), GUD.hideMsg(), GUD.hideMoveFinger(), GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2517)
		}), GUD.waitForMsg("STUDENT_STAGE_NEXT", 6, TAG_1), GUD.waitForMsg("STUDENT_STAGE_NEXT"), GUD.hideAll(), TAG_1, GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2518)
		}), GUD.callFunc(function(t) {
			let e = PanelClassStudentStage.getCenterPos(),
				a = new Laya.Point(e.x + 150, e.y + 150),
				i = [];
			i.push(a), i.push(e), t.showFingerMovePathAnim(i, 400, 2)
		}), GUD.waitForMsg("PANEL_STUDENT_STAGE_START"), GUD.hideMsg(), GUD.hideMoveFinger(), GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2519)
		}), GUD.waitForMsg("STUDENT_STAGE_NEXT", 6, TAG_END), GUD.waitForMsg("STUDENT_STAGE_NEXT"), GUD.hideAll(), TAG_END, GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2520)
		}), GUD.closeAndSave()]), AddGuide(GUD_EVENT.PANEL_STUDENT_STAGE_ENTER_IDLE, [GUD.setBlockEnabled(!1), GUD.waitForMsg("PANEL_STUDENT_STAGE_START", 3, TAG_END), GUD.callFunc(function(t) {
			let e = PanelClassStudentStage.getCenterPos();
			console.log("中心点位置", e);
			let a = new Laya.Point(e.x + 150, e.y + 150),
				i = [];
			i.push(a), i.push(e), t.showFingerMovePathAnim(i, 400, 2)
		}), GUD.waitForMsg("PANEL_STUDENT_STAGE_START"), GUD.hideAll(), TAG_END, GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2521)
		}), GUD.close()]), AddGuide(GUD_EVENT.PANEL_STUDENT_STAGE_MOVE_IDLE, [GUD.setBlockEnabled(!1), GUD.waitForMsg("PANEL_STUDENT_STAGE_START", 3, TAG_END), GUD.waitForMsg("STUDENT_STAGE_NEXT"), GUD.hideAll(), TAG_END, GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2522)
		}), GUD.close()]), AddGuide(GUD_EVENT.PANEL_TEACHER_CHANGE_SCORE_IDLE, [GUD.setBlockEnabled(!1), GUD.waitForMsg("PANEL_TEACHER_SCORE_CHANGE", 3, TAG_END), GUD.callFunc(function(t) {
			let e = PanelClassTeacherChangeScore.getCenterPos();
			console.log("中心点位置", e);
			let a = new Laya.Point(e.x + 83, e.y),
				i = new Laya.Point(e.x + 183, e.y),
				s = [];
			s.push(a), s.push(i), t.showFingerMovePathAnim(s, 400, 2)
		}), GUD.waitForMsg("PANEL_TEACHER_SCORE_CHANGE"), GUD.hideAll(), TAG_END, GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2523)
		}), GUD.close()]), AddGuide(GUD_EVENT.PANEL_TEACHER_STAGE_IDLE, [GUD.setBlockEnabled(!1), GUD.waitForMsg("PANEL_TEACHER_STAGE_CLICK", 3, TAG_END), GUD.waitForMsg("PANEL_TEACHER_STAGE_CLICK"), GUD.hideAll(), TAG_END, GUD.callFunc(() => {
			GameStatistics.statisCommonEvent(2524)
		}), GUD.close()]), AddGuide("GuideTest0", [GUD.setMsgMaskVisible(!0), GUD.showClickMsg("11111111111"), GUD.showClickMsg("222222222222"), GUD.showClickMsg("333333333333333"), GUD.showClickMsg("44444444444"), GUD.waitTime(.5), GUD.close()]), AddGuide("GuideTest1", [GUD.setMsgMaskVisible(!0), GUD.showClickMsg("11111111111"), GUD.hideMsg(), GUD.setMaskVisible(!0), GUD.click("PanelMain.btnQuest"), GUD.close()])
	}
	class mgrGuide extends _mgrBase {
		static onload() {
			this.guideData = FileRecord.getData("key_guide_data") || {
				steps: {},
				unlocks: {},
				skipAll: this.bSkipGuide
			}, this.registerMsg({
				[BASE_MSG.QUEST_STATE_CHANGE]: this.onMsgQuestStateChange.bind(this)
			})
		}
		static start() {
			initGuideScript()
		}
		static saveData() {
			FileRecord.setData("key_guide_data", this.guideData)
		}
		static onMsgQuestStateChange(t) {}
		static isGuided(t, e) {
			let a = this.guideData.steps[t];
			return null != a && !(a < e)
		}
		static get isGuiding() {
			return null != this.curGuideId
		}
		static getCurGuideId() {
			return this.curGuideId
		}
		static dispatchGuide(t, e) {
			if (!t) return Logger.error("无效guideid"), !1;
			if (GuideScript[t]) {
				if (this.isGuiding) return Logger.isDebugLevel && Logger.debug(`触发[${t}]失败，正在引导[${this.curGuideId}]`), !1;
				let a = this.guideData.steps[t];
				if (null == a ? a = 0 : a++, this.isGuided(t, a)) return !1;
				if (this.guideData.skipAll) return void console.log("跳过引导:", t);
				let i = GuideScript[t][a];
				if (i) return Logger.isDebugLevel && Logger.debug(`触发引导:${t}, ${a}`), this.curGuideId = t, this.curGuideIndex = a, _G.isGuiding = !0, mgrPanel.openPanel(UI_NAME.PanelGuide, {
					script: i,
					context: e
				}), !0
			}
			return !1
		}
		static sendMsgKey(t) {
			_G.isGuiding && _G.sendMsg("GUD_COMPLETE_KEY", t)
		}
		static finish(t) {
			Logger.isDebugLevel && Logger.debug(`引导结束:${this.curGuideId}`), t && this.curGuideId && this.saveGuideStep(this.curGuideId, this.curGuideIndex), this.curGuideId = null, _G.isGuiding = !1
		}
		static saveGuideStep(t, e) {
			if (!this.isGuided(t, e)) {
				let a = this.guideData.steps;
				null == a[t] ? 0 == e && (a[t] = 0) : a[t] + 1 == e && (a[t] = e), this.saveData()
			}
		}
		static registerGuideNode(t, e, a = !1) {
			a && !_G.isGuiding || (this.bindedGuideNode[t] = e, this.sendMsgKey(t))
		}
		static unregisterGuideNode(t) {
			delete this.bindedGuideNode[t]
		}
		static getRegisterNode(t) {
			let e = this.bindedGuideNode[t];
			return e && !e.destroyed ? e : null
		}
		static skipAll() {
			this.guideData.skipAll = !0, this.saveData(), _G.sendMsg("GUIDE_SKIP"), _G.sendMsg("GUIDE_ALL_FINISH")
		}
		static removeGuide(t) {
			let e = this.guideData.steps[t];
			e ? this.guideData.steps[t] = e - 1 : delete this.guideData.steps[t]
		}
	}
	mgrGuide.curGuideId = null, mgrGuide.curGuideIndex = 0, mgrGuide.bSkipGuide = !1, mgrGuide.bindedGuideNode = Object.create(null);
	class RoomPartItem extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/RoomPartItem.json", this._exportNodeInfo = {
				cc_icon: "Laya.Sprite",
				cc_used: "Laya.Sprite",
				cc_lock: "Laya.Sprite",
				cc_tag1: "Laya.Sprite",
				cc_tag2: "Laya.Sprite",
				cc_stars: "UIHVLayout",
				cc_adv: "Laya.Sprite",
				cc_spritetest: "Laya.Sprite",
				cc_tuijian: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this)), this.registerMsg({
				UI_SELECT_PART: this.onSelectPart.bind(this),
				PAINT_FINISH: this.onMsgPaintFinish.bind(this),
				UPDATE_UNUSED: this.onMsgUpdateUnused.bind(this)
			}), this.startProcMsg(), this.used.visible = !1, mgrI18n.trySetI18nImage(this.spritetest, "pnl_room_02.png"), mgrI18n.trySetI18nImage(this.tuijian, "pnl_room_03.png")
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onSelectPart(t) {
			this.updateState(t)
		}
		onMsgPaintFinish(t) {
			t == this.partId && (_G.sendMsg("PLAY_ZANTONG_ANIM"), 1 == this.state && _G.sendMsg("REMOVE_BRUSH"), this.used.visible = !0, this.state = 0, _G.sendMsg("SET_PART", this))
		}
		onMsgUpdateUnused() {
			this.menu && 2 == this.state && this.menu.data.defaultParts[this.partDb.gid] == this.partId && (this.used.visible = !0, this.state = 0)
		}
		setData(t) {
			if (!this.callable) return void this.safeCall(this.setData, t);
			this.menu = t;
			let e = t.data,
				a = e.partId;
			this.partId = a;
			let i = db.get_item_db(a);
			this.partDb = i, this.icon.loadImage(i.icon), this.lock.visible = !e.owned, this.tuijian.visible = e.bTuiJian, this.resetState(), UiHelper.loadTagIconWithPart(a, this.tag1, this.tag2), UiHelper.setStars(this.stars, i.quality, 5), _G.isGuiding && ("18024" == a ? mgrGuide.registerGuideNode(GUD_REG_NODE.PANELROOM_PART_18024, this.resNode) : "19011" == a ? mgrGuide.registerGuideNode(GUD_REG_NODE.PANELROOM_PART_19011, this.resNode) : "23003" == a && mgrGuide.registerGuideNode(GUD_REG_NODE.PANELROOM_PART_23003, this.resNode))
		}
		resetState() {
			this.menu && (1 == this.state && _G.sendMsg("REMOVE_BRUSH"), this.used.visible = this.menu.data.parts[this.partDb.gid] == this.partId, this.state = this.used.visible ? 0 : 2, this.adv.visible = !this.menu.data.owned && this.menu.data.bAdv)
		}
		updateState(t) {
			let e = this.menu;
			if (e)
				if (this.partId == t) switch (this.state) {
					case 0:
						e.data.defaultParts[this.partDb.gid] == this.partId || (this.used.visible = !1, this.state = 2, _G.sendMsg("REMOVE_PART", this), Laya.timer.callLater(this, function() {
							_G.sendMsg("UPDATE_UNUSED")
						}));
						break;
					case 1:
						e.data.defaultParts[this.partDb.gid] == this.partId || (this.used.visible = !1, this.state = 2, _G.sendMsg("REMOVE_BRUSH"));
						break;
					case 2:
						db.get_part_type_db(this.partDb.gid).paintable ? (this.used.visible = !0, this.state = 1, _G.sendMsg("SET_BRUSH", this)) : (this.used.visible = !0, this.state = 0, _G.sendMsg("SET_PART", this)), this.adv.visible = !1, this.lock.visible = !1
				} else switch (this.state) {
					case 0:
					case 1:
						this.used.visible = !1, this.state = 2
				}
		}
		onClick() {
			let t = this.menu;
			if (t) {
				let e = t.data;
				e.owned ? _G.sendMsg("UI_SELECT_PART", this.partId) : e.bAdv ? (mgrAdv.statisVideoClick("try_part"), mgrAdv.checkActive("try_part") ? mgrAdv.dispatchAdv("try_part", this.partId, !0) : mgrAlert.alertText(mgrI18n.getText("roomPartItem.1"))) : mgrAlert.alertText(mgrI18n.getText("roomPartItem.2"))
			}
		}
	}
	class RoomMenuItem extends ViewBase {
		constructor() {
			super(), this.create()
		}
		create() {
			let t = (new Laya.Sprite).loadImage("res/ui/pnl_room/toggle.png");
			this.icon = t.addChild((new Laya.Sprite).pos(10, 14, !0)), this.focus = t.addChild((new Laya.Sprite).loadImage("res/ui/pnl_room/toggle_on.png")), this.gou = t.addChild(new Laya.Sprite).loadImage("res/ui/pnl_common/gou.png").pos(60, 0), this.createFromNode(t)
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this)), this.registerMsg({
				UI_SELECT_MENU: this.onMsgSelectMenu.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose(), RoomMenuItem.selectType = null
		}
		onMsgSelectMenu(t) {
			t != this.menu && this.focus.visible && (this.focus.visible = !1)
		}
		setData(t) {
			this.menu = t;
			let e = t.data.type;
			this.partType = e;
			let a = db.get_part_type_db(e);
			this.icon.loadImage(a.icon), this.focus.visible = e == RoomMenuItem.selectType, _G.isGuiding && (2 == e ? mgrGuide.registerGuideNode(GUD_REG_NODE.PANELROOM_YANYING, this.resNode) : 5 == e && mgrGuide.registerGuideNode(GUD_REG_NODE.PANELROOM_CHUNCAI, this.resNode))
		}
		updateWearState(t) {
			this.gou.visible = t
		}
		onClick() {
			this.menu && (this.focus.visible = !0, RoomMenuItem.selectType = this.menu.data.type, _G.sendMsg("UI_SELECT_MENU", this.menu))
		}
	}
	class NestedMenu {
		constructor(t, e) {
			this.parent = null, this.children = [], this.name = t, this.data = e
		}
		addMenu(t, e) {
			let a = new NestedMenu(t, e);
			return a.parent = this, this.children.push(a), a
		}
		removeAt(t) {
			this.children.splice(t, 1)[0].parent = null
		}
		getMenu(t) {
			for (let e = 0; e < this.children.length; e++)
				if (this.children[e].name == t) return this.children[e];
			return null
		}
		getMenuAt(t) {
			return -1 == t ? this.parent : t >= 0 && t < this.children.length ? this.children[t] : null
		}
		indexOf(t) {
			return this.children.indexOf(t)
		}
		get menuCount() {
			return this.children.length
		}
	}
	class OptPaintPart extends OperateBase {
		constructor() {
			super(...arguments), this._checkTime = 0
		}
		setPaintPart(t) {
			if (t) {
				this.isFinish = !1, OperateBase.renderMask.clear(), this.partDb = db.get_item_db(t), this.setBrush(DbExt.getBrushId(this.partDb));
				let e = this.avatar.getPartByType(this.partDb.gid);
				if (e && e.views[0]) {
					let a = e.views[0],
						i = db.get_model_db(this.partDb.viewList[0]);
					mgrAlert.openResWait(i.resPath, RES_TYPE.TEXTURE2D, e => {
						OperateBase.renderMask && this.partDb && this.partDb.id == t && OperateBase.renderMask.setPaintMaterail(a.depModel, a.viewDb.matIndex, i.resPath)
					})
				}
				this.checkState = 0
			} else this.partDb = null, this.setBrush(null)
		}
		syncCamera() {
			OperateBase.renderMask.syncCamera()
		}
		dispose() {
			this.partDb = null, super.dispose()
		}
		onCreate() {}
		onFinish() {
			_G.sendMsg("PAINT_FINISH", this.partDb.id), this.partDb = null
		}
		onTouchDown() {
			this.checkHold(), this.isTouched = !!this.partDb
		}
		onTouchMove() {
			this.checkArea()
		}
		onTouchUp() {}
		checkArea() {
			if (this.partDb && this._checkTime < Timer.time) {
				this._checkTime += .1;
				let t = OperateBase.renderMask.checkPercent(this.partDb.checkLeft, this.partDb.checkRight);
				if (t == this.checkState) return;
				let e = this.checkState;
				switch (this.checkState = t, t) {
					case 1:
						0 != this.partDb.checkRight && (OperateBase.renderMask.fillMask(!0), this.playLeftEffect()), _G.isGuiding && mgrGuide.sendMsgKey("PAINT_FINISH_L");
						break;
					case 2:
						0 != this.partDb.checkRight && (OperateBase.renderMask.fillMask(!1), this.playRightEffect());
						break;
					case 3:
						this.playFinishEffect(e), this.finish(), _G.isGuiding && mgrGuide.sendMsgKey("PAINT_FINISH_A")
				}
			}
		}
		playLeftEffect() {
			if (this.partDb) {
				let t, e;
				switch (this.partDb.gid) {
					case 0:
						t = _G.canvasWidth / 2 - 90, e = _G.canvasHeight / 2 - 80;
						break;
					case 1:
					case 2:
						t = _G.canvasWidth / 2 - 90, e = _G.canvasHeight / 2 - 60;
						break;
					case 4:
						t = _G.canvasWidth / 2 - 50, e = _G.canvasHeight / 2;
						break;
					case 5:
						return
				}
				mgrAlert.playParticleEffect("104", {
					x: t,
					y: e
				}, 1, .5)
			}
		}
		playRightEffect() {
			if (this.partDb) {
				let t, e;
				switch (this.partDb.gid) {
					case 0:
						t = _G.canvasWidth / 2 + 90, e = _G.canvasHeight / 2 - 80;
						break;
					case 1:
					case 2:
						t = _G.canvasWidth / 2 + 90, e = _G.canvasHeight / 2 - 60;
						break;
					case 4:
						t = _G.canvasWidth / 2 + 50, e = _G.canvasHeight / 2;
						break;
					case 5:
						return
				}
				mgrAlert.playParticleEffect("104", {
					x: t,
					y: e
				}, 1, .5)
			}
		}
		playFinishEffect(t) {
			if (this.partDb) {
				let e, a;
				switch (this.partDb.gid) {
					case 0:
					case 1:
					case 2:
					case 4:
						return void(1 == t ? this.playRightEffect() : 2 == t && this.playLeftEffect());
					case 5:
						e = _G.canvasWidth / 2, a = _G.canvasHeight / 2 + 80
				}
				mgrAlert.playParticleEffect("104", {
					x: e,
					y: a
				}, 1, .5)
			}
		}
	}
	class RoleOperate {
		constructor(t, e, a = !0) {
			this.destroyed = !1, this._enable = !0, this.bTouched = !1, this.bRot = !1, this.rot = 0, this.touchX = 0, this.touchY = 0, this.avatar = e, this.autoRot = a, UiHelper.registerTouchEvent(t, this.onTouchStart.bind(this), this.onTouchMove.bind(this), this.onTouchEnd.bind(this))
		}
		set enable(t) {
			this.destroyed || (this._enable = t, t || this.onTouchEnd())
		}
		get enable() {
			return this._enable
		}
		dispose() {
			this.destroyed = !0, this._enable = !1
		}
		onTouchStart() {
			this._enable && (this.touchX = Laya.stage.mouseX, this.touchY = Laya.stage.mouseY, this.bTouched = !0, this.bRot = !1, this.rot = this.avatar.transform.localRotationEulerY)
		}
		onTouchMove() {
			if (!this._enable) return;
			if (!this.avatar || this.avatar.destroyed) return;
			if (!this.bTouched) return;
			let t = Laya.stage.mouseX,
				e = Laya.stage.mouseY;
			Mathf.distanceSqr2(t - this.touchX, e - this.touchY) > 4 && (this.bRot = !0), this.bRot && (this.rot += (t - this.touchX) / 260 * 360, this.avatar.transform.localRotationEulerY = this.rot % 360), this.touchX = t, this.touchY = e
		}
		onTouchEnd() {
			this.bTouched && (this.bRot || (this.bRot = !1), this.bTouched = !1, this.autoRot && cc.tween(this.avatar.transform, !0).to(.6, {
				localRotationEulerY: 0
			}, cc.OPTION.SINE_IN_OUT).start())
		}
	}
	const KEY_LAST_LEVEL = "KEY_LAST_LEVEL";
	class mgrLevel extends _mgrBase {
		static onload() {
			let t = this.getData();
			if (!t) {
				let e = db.get_level_db_arr();
				t = {};
				let a = 0;
				for (let i = 0, s = e.length; i < s; i++) e[i].gid == a && (t[a++] = {
					index: i,
					bPass: !1
				});
				this.saveData(t);
				for (let t = 0; t < e.length; t++) e[t].unlockGoalId && BaseFacade.mGoal.register(e[t].unlockGoalId)
			}
		}
		static getData() {
			return FileRecord.getData(KEY_LAST_LEVEL)
		}
		static saveData(t) {
			FileRecord.setData(KEY_LAST_LEVEL, t)
		}
		static startLevel(t) {
			this.curLevelIdx = t, this.curLevelDb = db.get_level_db(t)
		}
		static endLevel(t) {
			let e = db.get_level_db(this.curLevelIdx);
			if (e && e.statistics && GameStatistics.statisCommonEvent(e.statistics), t) {
				this.failCount = 0;
				let t = this.getData(),
					a = t[e.gid],
					i = this.getMaxLevelIndex(e.gid),
					s = this.getMinLevelIndex(e.gid);
				BaseFacade.mGoal.commit(ACTION_ID.LEVEL_FINISH, this.curLevelIdx - s + 1, e.gid, 2);
				let n = this.curLevelIdx + 1;
				a.index < n && n <= i ? (a.index = n, this.saveData(t)) : n > i && (a.bPass = !0, this.saveData(t))
			} else this.failCount++, this.failCount
		}
		static getLastLevelData(t = 0) {
			return this.getData()[t]
		}
		static getLastLevel(t = 0) {
			return this.getLastLevelData(t).index
		}
		static setLastLevel(t = 0, e) {
			this.getLastLevelData(t).index = e
		}
		static getMinLevelIndex(t = 0) {
			let e = db.get_level_db_arr();
			for (let a = 0, i = e.length; a < i; a++)
				if (e[a].gid == t) return a;
			return -1
		}
		static getMaxLevelIndex(t = 0) {
			let e = db.get_level_db_arr();
			for (let a = e.length - 1; a >= 0; a--)
				if (e[a].gid == t) return a;
			return -1
		}
		static isUnlock(t) {
			let e = db.get_level_db(t);
			return BaseFacade.mSwitch.check(e.switchId)
		}
		static isGroupUnlock(t = 0) {
			let e = this.getMinLevelIndex(t);
			return this.isUnlock(e)
		}
	}
	mgrLevel.curLevelIdx = null, mgrLevel.curLevelDb = null, mgrLevel.failCount = 0;
	class mgrPvp extends _mgrBase {
		static onload() {
			let t = db.get_pvp_part_award_db_map();
			if (this.allPvpPartAward = Object.keys(t), this.allPvpPartAward.sort((t, e) => Tools.sort_db_by_order(db.get_pvp_part_award_db(t), db.get_pvp_part_award_db(e))), this.pvpData = FileRecord.getData("KEY_PVP"), !this.pvpData) {
				let t = [];
				for (let e = 0; e < 14; e++) {
					let a = mItem.getAllItem(2, 1, e);
					for (let e = 0; e < a.length; e++)
						if (5 == db.get_item_db(a[e]).quality) {
							t.push(a[e]);
							break
						}
				}
				this.pvpData = {
					bJoin: !1,
					winCount: 0,
					star: 1,
					levelStates: [1],
					award: [],
					sucCount: 0,
					rankParts: t
				}, this.saveData(), mgrRank.commit(1, 0);
				for (let t = 0; t < this.allPvpPartAward.length; t++) BaseFacade.mGoal.register(db.get_pvp_part_award_db(this.allPvpPartAward[t]).goalId)
			}
			BaseFacade.mSwitch.dailyActive && (BaseFacade.mItem.setItem("1011", 2), this.saveData())
		}
		static start() {
			BaseFacade.mGoal.commit(ACTION_ID.JIN_JI, 1, void 0, 2)
		}
		static saveData() {
			FileRecord.setData("KEY_PVP", this.pvpData)
		}
		static get isJoin() {
			return this.pvpData.bJoin
		}
		static join() {
			this.pvpData.bJoin = !0, this.saveData()
		}
		static calcRealDuamwei(t) {
			return Math.floor((t - 1) / 5)
		}
		static calcGameDuamwei(t) {
			return Math.min(this.calcRealDuamwei(t), 4)
		}
		static calcGameStar(t) {
			let e = t % 5;
			return 0 == e ? 5 : e
		}
		static get duanwei() {
			return this.calcGameDuamwei(this.totalStar)
		}
		static get star() {
			return this.calcGameStar(this.totalStar)
		}
		static get totalStar() {
			return this.pvpData.star
		}
		static isAwarded(t) {
			return this.pvpData.award[t]
		}
		static hasAward() {
			for (var t = this.totalStar; t > 0; t--)
				if (!this.isAwarded(t)) return !0;
			return !1
		}
		static get curLevelIdx() {
			let t = this.curLevelStates;
			for (let e = 0; e < t.length; e++)
				if (1 == t[e]) return e;
			return -1
		}
		static get curLevelDb() {
			return db.get_pvp_db(this.duanwei, this.curLevelIdx)
		}
		static get curLevels() {
			let t = this.duanwei;
			return db.get_pvp_db_map()[t]
		}
		static get curLevelStates() {
			return this.pvpData.levelStates
		}
		static randomPlayer() {
			let t = this.randomParts(this.duanwei, this.curLevelIdx);
			this.otherData = {
				parts: t,
				name: mgrRank.getRandomName(),
				headIdx: Mathf.random(5) - 1,
				declare: mgrI18n.getText("game_cnf.3")[Mathf.random(db.game_cnf.pvp_texts.length) - 1]
			}
		}
		static randomParts(t, e) {
			let a = db.get_pvp_db(t, e),
				i = {
					0: !0,
					8: !0,
					12: !0,
					1: !0
				},
				s = a.score,
				n = [];

			function randPart(t) {
				let e = mItem.getAllItem(2, 1, t),
					i = e.length,
					o = Mathf.random(i);
				for (var r = 0; r < i; r++) {
					var l = (r + o) % i,
						c = db.get_item_db(e[l]);
					if (c.quality >= a.qualityMin && c.quality <= a.qualityMax) {
						n.push(c.id), s -= mgrPart.calcPartScore(c.id, a);
						break
					}
				}
			}
			Tools.forEachMap(i, function(t, e) {
				randPart(parseInt(t))
			});
			let o = Mathf.random(13);
			for (var r = 0; r < 13 && !(s <= 0); r++) {
				var l = (r + o) % 13;
				i[l] || randPart(l)
			}
			return n = mgrPart.checkDefaultParts(n)
		}
		static get rankParts() {
			return this.pvpData.rankParts
		}
		static get curFreeTicket() {
			return BaseFacade.mItem.getItemCount("1011")
		}
		static get curTicket() {
			let t = 0;
			return mgrAdv.checkActive("pvp_count") && (t = mgrAdv.getLeftCount("pvp_count")), this.curFreeTicket + t
		}
		static startPvp() {
			this.saveData()
		}
		static finishPvp(t) {
			let e = this.curLevelStates,
				a = this.curLevelIdx;
			e[a] = t ? 2 : 3, e[a + 1] = 1;
			let i = 0;
			for (let t = 0; t < e.length; t++) 2 == e[t] && i++;
			let s = this.duanwei;
			i >= 5 ? (this.pvpData.star += 5, this.pvpData.levelStates = [1]) : e.length > 9 && (this.pvpData.levelStates = [1]);
			let n = this.duanwei,
				o = n + 1;
			return t ? (this.pvpData.sucCount++, this.pvpData.winCount++, BaseFacade.mGoal.commit(ACTION_ID.PVP_SUC, 1, o), BaseFacade.mGoal.commit(ACTION_ID.PVP_ALWAYS_SUC, this.pvpData.sucCount, o, 2), this.getWinAward()) : this.pvpData.sucCount = 0, mgrPvp.randomPlayer(), this.saveData(), BaseFacade.mGoal.commit(ACTION_ID.JIN_JI, o, void 0, 2), mgrRank.commit(this.pvpData.star, 0), _G.sendMsg("PVP_STAR_UPDATE"), n > s
		}
		static getWinAward() {
			let t = db.get_pvp_base_award_db(this.duanwei);
			Laya.timer.once(2e3, this, function() {
				mgrAlert.addAndAlertItems(t.items, 32)
			})
		}
		static getPartFrom(t) {
			let e = db.get_pvp_part_award_db(t);
			if (!BaseFacade.mGoal.isDone(e.goalId)) {
				return mgrI18n.getText(db.get_goal_db(e.goalId).tlite)
			}
			return null
		}
		static get isAllPartsGetted() {
			for (let t = this.allPvpPartAward.length - 1; t >= 0; t--)
				if (!BaseFacade.mItem.isOwned(this.allPvpPartAward[t])) return !1;
			return !0
		}
		static openPanelPvpAward() {
			mgrAlert.openPanelLoading(UI_NAME.PanelPvpReward)
		}
		static isPvpAwardCanReceive() {
			let t = !1;
			for (let e = 0; e < this.allPvpPartAward.length; e++) {
				let a = this.allPvpPartAward[e];
				if (!BaseFacade.mItem.isOwned(a) && !mgrPvp.getPartFrom(a)) {
					t = !0;
					break
				}
			}
			return t
		}
	}
	mgrPvp.nextChangeTime = 0;
	class PanelPvpOverReady extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = ""
		}
		static openPanel(t, e) {
			let a = new ResLoader;
			a.add("res/ui/bg/pvp_over1.jpg", RES_TYPE.TEXTURE2D), a.add("res/ui/bg/pvp_over2.jpg", RES_TYPE.TEXTURE2D), mgrAlert.openWait(a, () => {
				mgrPanel.openPanelWithSingleton(PanelPvpOverReady, t, e)
			})
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), this.createFromNode(e)
		}
		buildUi() {
			this.init3D()
		}
		dispose() {
			this.avatar && this.avatar.destroy(), super.dispose(), this.context && this.context.onFinish && this.context.onFinish()
		}
		init3D() {
			this.createScene3DBack(0, 60), this.camera.transform.localPosition = new Laya.Vector3(0, 1.45, .75), this.camera.transform.localRotationEuler = new Laya.Vector3(-3, 0, 0), this.avatar = new RoleAvatar(mgrPvp.myParts), this.scene3DBack.addChild(this.avatar), this.bgPlan = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createPlane(2.16, 3.6, 10, 10)), this.bgPlan.transform.localPositionZ = -3, this.bgPlan.transform.localRotationEulerX = 90, this.camera.addChild(this.bgPlan);
			let t = mgrRes.tryLoadRes("res/ui/bg/pvp_over2.jpg");
			var e = new Laya.UnlitMaterial;
			e.albedoTexture = t, this.bgPlan.meshRenderer.sharedMaterial = e, this.resNode.visible = !1, this.avatar.playAnimation("zbs-xuanze0" + Mathf.random(3), !0), this.scheduleOnce(.1, () => {
				let a = UiHelper.screenShot(this.camera, _G.canvasWidth, _G.canvasHeight),
					i = Laya.Texture.create(a, 0, 0, _G.canvasWidth, _G.canvasHeight);
				t = mgrRes.tryLoadRes("res/ui/bg/pvp_over1.jpg"), (e = new Laya.UnlitMaterial).albedoTexture = t, this.bgPlan.meshRenderer.sharedMaterial = e, this.avatar.setParts(mgrPvp.otherData.parts, !1, null, !0), this.avatar.playAnimation("zbs-xuanze0" + Mathf.random(3), !0), this.scheduleOnce(.1, () => {
					let t = UiHelper.screenShot(this.camera, _G.canvasWidth, _G.canvasHeight),
						e = Laya.Texture.create(t, 0, 0, _G.canvasWidth, _G.canvasHeight);
					this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelPvpOver, {
						text: this.context.text,
						selfTex: i,
						otherTex: e
					})
				})
			})
		}
	}
	var ROOM_TYPE;
	let _nestedMenu;

	function _init_menu(t) {
		if (_nestedMenu) return _nestedMenu;

		function addPartsTo(t, e) {
			let a = mItem.getAllItem(2, 1, t);
			a.sort(sort_item_id_by_order);
			for (let t = 0; t < a.length; t++) e.addMenu(a[t], {
				partId: a[t]
			})
		}
		let e = new NestedMenu("root");
		if (t) {
			for (let a = 0; a < t.length; a++) {
				let i = t[a],
					s = db.get_part_type_db(i);
				addPartsTo(i, e.addMenu(s.name, {
					type: i
				}))
			}
			return e
		}
		for (let t = 0; t <= 14; t++) {
			let a = db.get_part_type_db(t);
			addPartsTo(t, e.addMenu(a.name, {
				type: t
			}))
		}
		return _nestedMenu = e
	}! function(t) {
		t[t.NORMAL = 0] = "NORMAL", t[t.LEVEL = 1] = "LEVEL", t[t.PVP = 2] = "PVP", t[t.SZZ = 3] = "SZZ"
	}(ROOM_TYPE || (ROOM_TYPE = {}));
	class PanelRoom extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelRoom.json", this._exportNodeInfo = {
				cc_touchNode: "Laya.Box",
				cc_topNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_btnBack: "UIButton",
				cc_scoreNode: "Laya.Sprite",
				cc_barScore: "UIBarMask",
				cc_tag1: "Laya.Sprite",
				cc_tag2: "Laya.Sprite",
				cc_scoreLabel: "Laya.Label",
				cc_topRightNode: "Laya.Image",
				cc_buttonShopLvup: "UIButton",
				cc_buttonShop: "UIButton",
				cc_buttonColorEggClock: "UIButton",
				cc_leftNode: "Laya.Sprite",
				cc_btnReset: "UIButton",
				cc_btnOk: "UIButton",
				cc_rightNode: "Laya.Sprite",
				cc_brushAnimNode: "Laya.Sprite",
				cc_brushIcon: "Laya.Sprite",
				cc_brushHead: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_menuBg: "Laya.Sprite",
				cc_scrollMenu: "ReuseScrollList",
				cc_scrollBg: "Laya.Image",
				cc_scrollPart: "ReuseScrollList",
				cc_lockToucNode: "Laya.Box",
				cc_buttonEmpty1: "UIButton",
				cc_buttonEmpty2: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_room", ""), this.curTryParts = Object.create(null), this.originPars = null, this.wearParts = null, this.bFaceAnim = !1, this.bLeft = !1, this.resetFlag = {}, this._advCount = 0
		}
		addPreloadRes(t) {
			let e = this.context.parts;
			mgrPart.addPartResList(e, t, !0)
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonShopLvup.node, "pnl_main_22.png"), this.buttonShop.node.visible = !1, this.lockToucNode.visible = mgrGuide.dispatchGuide(GUD_EVENT.ENTER_ROOM), this.topNode.y = -200, this.topLeftNode.x = -120, this.topRightNode.x = 150, this.leftNode.x = -120, this.rightNode.x = 120, this.bottomNode.y = 360, this.scrollMenu.node.y = 240, this.scrollPart.onItemCreate = function() {
				return new RoomPartItem
			}, this.scrollPart.onItemChange = ((t, e) => {
				t.setData(this.subMenu.getMenuAt(e))
			}), this.scrollMenu.onItemCreate = function() {
				return new RoomMenuItem
			}, this.scrollMenu.onItemChange = ((t, e) => {
				let a = this.curMenu.getMenuAt(e);
				t.setData(a), t.updateWearState(this.checkPartTypeUsed(t.partType))
			});
			let t = _G.canvasFitWidth - 576;
			this.scrollBg.width += t, this.scrollBg.x -= t / 2, this.scrollPart.width = this.scrollBg.width - 40, this.scrollMenu.width = _G.canvasFitWidth, this.scrollMenu.node.x = (768 - _G.canvasFitWidth) / 2, this.roomType = this.context.type;
			let e = this.context.parts;
			if (this.roomType == ROOM_TYPE.NORMAL && e) {
				mgrGame.tryOpenPanelRankVideoTips(2), e = Tools.deepCopy(mgrPart.partsWear);
				for (const t in e) {
					let a = e[t];
					a && (BaseFacade.mItem.getItemCount(a) <= 0 && (console.log("PanelRoom.buildUi 自由换装模式，移除未拥有部件", a), delete e[t]))
				}
			}
			if (e) {
				let t = {};
				for (const a in e) {
					t[db.get_item_db(e[a]).gid] = e[a]
				}
				e = t
			} else e = mgrPart.partsWear;
			this.wearParts = Tools.deepCopy(e), this.originPars = mgrPart.defaultParts, this.lastAdvActive = this.checkAdv(), this.lastAdvActive && mgrAdv.statisVideoShow("try_part"), this.fillTag(), this.context.data && this.context.data.room ? (this.room = this.context.data.room, this.onSceneLoaded()) : (this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))), this.checkColorEggClock(), this.onMsgCopChange(), this.registerMsg({
				UI_SELECT_MENU: this.onMsgSelectMenu.bind(this),
				SET_PART: this.onMsgSetPart.bind(this),
				REMOVE_PART: this.onMSgRemovePart.bind(this),
				SET_BRUSH: this.onMsgSetBrush.bind(this),
				REMOVE_BRUSH: this.onMsgRemoveBrush.bind(this),
				CLOSE_ROOM: this.close.bind(this),
				PLAY_ZANTONG_ANIM: this.onMsgPlayZantongAnim.bind(this),
				GM_LEVEL_SUC: this.onMsgGmLevelSuc.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this)
			}), this.startProcMsg(), mgrSdk.tryStartRecord()
		}
		dispose() {
			this.stopProcMsg(), this.operatePaint && (this.operatePaint.dispose(), this.operatePaint = null), this.cleawrEffectRoot(), this.clearShexiangji(), Laya.stage.offAllCaller(this), this.avatar && this.avatar.destroy(), this.room && this.room.dispose(), this.scrollPart && this.scrollPart.clearAllItems(), this.scrollMenu && this.scrollMenu.clearAllItems(), this.instOrBanner.dispose(), super.dispose(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELROOM_BTNOK)
		}
		regGuide() {
			mgrGuide.registerGuideNode(GUD_REG_NODE.PANELROOM_BTNOK, this.btnOk.node)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		close(t) {
			switch (this.stopProcMsg(), super.close(t), this.roomType) {
				case ROOM_TYPE.NORMAL:
					GameStatistics.statisOnStageEnd(7502);
					break;
				case ROOM_TYPE.PVP:
				case ROOM_TYPE.LEVEL:
				case ROOM_TYPE.SZZ:
			}
		}
		initTouch() {
			this.brushIcon.visible = !1, this.roleOpt = new RoleOperate(this.touchNode, this.avatar);
			let t = () => {
				this.roleOpt.enable = !0, this.operatePaint && this.operatePaint.touchUp(), _G.isGuiding || (this.lockToucNode.visible = !1), this.checkUpAnim()
			};
			UiHelper.registerTouchEvent(this.brushIcon, t => {
				this.roleOpt.enable = !1, this.operatePaint && (this.brushDb ? this.operatePaint.refreshBrushOffset(this.brushIcon) : this.operatePaint.refreshBrushOffset(null), this.operatePaint.touchDown(), t.stopPropagation(), this.checkDownAnim(), _G.isGuiding ? mgrGuide.sendMsgKey("TOUCH_DOWN_BRUSH") : this.lockToucNode.visible = !0)
			}, () => {
				this.operatePaint && (this.operatePaint.touchMove(), this.checkMoveAnim())
			}, t), Laya.stage.on(Laya.Event.MOUSE_UP, this, t), this.resNode.on(Laya.Event.MOUSE_OUT, this, () => {
				let e = Laya.stage.mouseX,
					a = Laya.stage.mouseY;
				e > 10 && e < UIRoot.canvasWidth - 10 && a > 50 && a < UIRoot.canvasHeight - 50 || t()
			})
		}
		checkDownAnim() {
			let t = this.subMenu.data.type,
				e = db.get_part_type_db(t);
			if (0 == e.cameraIdx && (this.bFaceAnim = !(!e.leftAnim.length && !e.rightAnim.length), this.bFaceAnim)) {
				this.bLeft = !1;
				let t = e.leftAnim;
				this.avatar.playBodyAnim(t[0], .1, !1), this.avatar.playFaceAnim(t[1], .1, !0)
			}
		}
		checkMoveAnim() {
			if (this.bFaceAnim) {
				let t = Laya.stage.mouseX + this.operatePaint.getBrushOffset().x;
				if (Math.abs(t - _G.canvasWidth / 2) > 60) {
					let e = t <= _G.canvasWidth / 2,
						a = this.subMenu.data.type,
						i = db.get_part_type_db(a),
						s = e ? i.leftAnim : i.rightAnim;
					0 == s.length && (s = i.leftAnim), s.length && this.avatar.lastBodyAnim != s[0] && (this.avatar.playBodyAnim(s[0], .1, !1), this.avatar.playFaceAnim(s[1], .1, !0))
				}
			}
		}
		checkUpAnim() {
			this.bFaceAnim && (this.bFaceAnim = !1, this.avatar.playAnimation(MODEL_ANIM.HUFU_IDLE))
		}
		onMsgSelectMenu(t) {
			this.subMenu != t && (this.operatePaint && this.operatePaint.setPaintPart(null), this.setBrush(null), this.fillMenu(this.curMenu.indexOf(t)))
		}
		onMsgSetPart(t) {
			this.setPart(t.partId)
		}
		onMSgRemovePart(t) {
			this.removePart(t.partId)
		}
		onMsgSetBrush(t) {
			this.setBrush(t.partId)
		}
		onMsgRemoveBrush() {
			this.setBrush(null)
		}
		onMsgPlayZantongAnim() {
			this.bFaceAnim && (this.bFaceAnim = !1, this.avatar.playAnimation("hufu-zantong0" + Mathf.random(2)), _G.isGuiding || (this.lockToucNode.visible = !1))
		}
		onMsgGmLevelSuc() {
			let t = db.get_level_db(mgrLevel.getLastLevel());
			mgrPart.calcLevelScore(this.wearParts, t), mgrPart.partsLevel = this.wearParts, mgrPart.partScoreResult.suc = !0, mgrLevel.endLevel(mgrPart.partScoreResult.suc), mgrAlert.openPanelLoading(UI_NAME.PanelOver), BaseFacade.mItem.subItem("1010", 1, null)
		}
		onMsgAdvShowSuc(t) {
			"try_part" == t.advName && t.params && (this._advCount++, this.tryPart(t.params))
		}
		onMsgCopChange() {}
		fillTag() {
			switch (this.scoreLabel.font = GConfig.bmf_score, this.roomType) {
				case ROOM_TYPE.NORMAL:
					this.scoreNode.visible = !1, GameStatistics.statisCommonEventOnce(7011), GameStatistics.statisOnStageStart(7502);
					break;
				case ROOM_TYPE.PVP:
					mgrPvp.startPvp(), this.partWeight = mgrPvp.curLevelDb, UiHelper.loadTagIconWithData(mgrPvp.curLevelDb, this.tag1, this.tag2), this.onPartStateChange(), mgrSound.playMusic("bj_002", !0);
					break;
				case ROOM_TYPE.LEVEL:
					mgrLevel.startLevel(mgrLevel.getLastLevel()), this.partWeight = mgrLevel.curLevelDb, UiHelper.loadTagIconWithData(mgrLevel.curLevelDb, this.tag1, this.tag2), this.onPartStateChange();
					break;
				default:
					console.log("未知房间类型:", this.roomType)
			}
		}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.chagneToRoom();
			let t = this.context.data;
			if (t) {
				let e = t.avatar,
					a = t.shexiangji;
				this.avatar = e, this.shexiangji = a;
				let i = new AnimatorFixedPlayer,
					s = db.get_role_contract_db(mgrGame.contractIndex);
				i.addModelAnim(e.baseBody, s.bodyAnimationId), i.addModelAnim(e.baseFace, s.faceAnimationId), i.addModelAnim(a, s.shexiangjiAnimationId), i.addTimeCallback(161 / 180, () => {
					this.operatePaint = new OptPaintPart(this.avatar, this.room.scene, this.room.camera);
					let t = this.shexiangji.findChild("camera");
					this.room.camera.transform.position = t.transform.position, this.room.camera.transform.rotation = t.transform.rotation, this.room.camera.fieldOfView = t.fieldOfView, t.active = !1, this.room.camera.active = !0;
					let e = UiHelper.findAllShurikenParticleSystem(this.shexiangji.findChild("e_sky"));
					for (let t = 0; t < e.length; t++) e[t].stop();
					this.room.cameraIndex = -1, this.room.moveCamerToNear(() => {
						this.room.mapNode.active = !0, this.room.playFadeout(() => {
							UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 1, 1, 1)
						}), this.fillMenu(), this.setUiVisible(!0, 1)
					}, !1)
				}), i.addTimeCallback(1, () => {
					this.cleawrEffectRoot(), this.clearShexiangji()
				}), i.play(), this.effectRoot = new GModel(db.MODEL_DB_ID.come), this.effectRoot.create(), this.effectRoot.callIfLoaded(() => {
					let t = db.get_role_contract_db(mgrGame.contractIndex),
						e = _G.poolManager.get(Particle, t.effectId);
					e.setParent(this.effectRoot.node), e.play(), this.effectCome = e
				}), this.effectRoot.setParent(this.room.root)
			} else this.avatar = new RoleAvatar(this.wearParts), this.room.root.addChild(this.avatar), this.avatar.playIdle(), this.operatePaint = new OptPaintPart(this.avatar, this.room.scene, this.room.camera), this.fillMenu(), this.setUiVisible(!0, 2);
			this.initTouch()
		}
		clearShexiangji() {
			this.shexiangji && (this.shexiangji.dispose(), this.shexiangji = null)
		}
		cleawrEffectRoot() {
			this.effectRoot && (this.effectRoot.dispose(), this.effectRoot = null), this.effectCome && (_G.poolManager.put(this.effectCome), this.effectCome = null)
		}
		resetMenu() {
			this.resetFlag = {}, this.subMenu && (this.lastAdvActive = this.checkAdv(), this.lastAdvActive && mgrAdv.statisVideoShow("try_part"), this.resetPartsMenu(this.subMenu), this.scrollPart.updateList(this.subMenu.data.count))
		}
		resetPartsMenu(t) {
			if (null == t.data.type) return;
			if (this.resetFlag[t.data.type]) return;
			this.resetFlag[t.data.type] = !0;
			let e = BaseFacade.mItem,
				a = this.curTryParts,
				i = this.wearParts,
				s = this.originPars,
				n = this.partWeight;
			if (t.children.forEach(function(t) {
					let o = t.data.partId;
					if (!_G.isGuiding && n) var r = mgrPart.calcPartScore(o, n);
					else r = db.get_item_db(o).quality;
					t.data.score = r, t.data.owned = e.isOwned(o) || a[o], t.data.parts = i, t.data.defaultParts = s, t.data.bAdv = !1, t.data.bTuiJian = !1
				}), this.lastAdvActive && this.checkAdv()) switch (this.roomType) {
				case ROOM_TYPE.LEVEL:
				case ROOM_TYPE.PVP:
					this.randomMatchParts(t);
					break;
				case ROOM_TYPE.SZZ:
				case ROOM_TYPE.NORMAL:
					this.randomHighQualityParts(t)
			}
			this.sortMenuItem(t), this.resetMenuPartCount(t)
		}
		randomMatchParts(t) {
			Mathf.shuffle(t.children);
			let e = 3,
				a = this.getTuiJianMenu(t);
			a.data.bTuiJian = !0, a.data.owned || (a.data.bAdv = !0, e = 2), t.children.some(function(t) {
				return t.data.owned || t == a || (e--, t.data.bAdv = !0), e <= 0
			})
		}
		getTuiJianMenu(t) {
			let e, a = 0;
			return t.children.forEach(function(t) {
				a < t.data.score && (a = t.data.score, e = t)
			}), e
		}
		randomHighQualityParts(t) {
			Mathf.shuffle(t.children);
			let e = 3;
			t.children.some(function(t) {
				if (!t.data.owned) {
					5 == db.get_item_db(t.data.partId).quality && (e--, t.data.bAdv = !0)
				}
				return e <= 0
			})
		}
		sortMenuItem(t) {
			t.children.sort(function(t, e) {
				let a = t.data.owned;
				return a == e.data.owned ? _G.isGuiding ? t.data.score - e.data.score : e.data.score - t.data.score : a ? -1 : 1
			});
			let e = t.menuCount,
				a = 0;
			for (var i = 0; i < e; i++) {
				let e = t.children[i];
				e.data.bAdv && (t.children.splice(i, 1), t.children.splice(a++, 0, e))
			}
		}
		resetMenuPartCount(t) {
			let e = 0;
			t.children.forEach(function(t) {
				e += t.data.owned || t.data.bAdv ? 1 : 0
			}), t.data.count = e
		}
		clearAllAdv() {
			let t = t => {
				for (let e = 2; e >= 0; e--) {
					let a = t.getMenuAt(e);
					a.data.bAdv && (a.data.bAdv = !1, t.data.count--, t.children.splice(e, 1), t.children.push(a))
				}
				this.resetMenuPartCount(t)
			};
			for (let e = 0; e < this.curMenu.menuCount; e++) t(this.curMenu.getMenuAt(e))
		}
		checkPartTypeUsed(t) {
			if (!this.curMenu) return !1;
			let e = this.curMenu.getMenuAt(t);
			if (!e) return !1;
			let a = this.wearParts[t];
			if (!a) return !1;
			for (var i = 0; i < e.menuCount; i++) {
				if (e.getMenuAt(i).data.partId == a) return !0
			}
			return !1
		}
		fillMenu(t = -1) {
			null == this.curMenu ? (RoomMenuItem.selectType = 0, this.curMenu = _init_menu(), this.subMenu = this.curMenu.getMenuAt(0), this.resetPartsMenu(this.subMenu), this.scrollMenu.updateList(this.curMenu.menuCount), this.scrollPart.updateList(this.subMenu.data.count)) : (this.scrollPart.isAutoScrolling && this.scrollPart.stopAutoScroll(), this.subMenu = this.curMenu.getMenuAt(t), this.resetPartsMenu(this.subMenu), this.scrollPart.updateList(this.subMenu.data.count, 0));
			let e = this.subMenu.data.type;
			switch (db.get_part_type_db(e).cameraIdx) {
				case 0:
					this.room.moveCamerToNear(() => {
						this.operatePaint.syncCamera(), this.avatar.playAnimation(MODEL_ANIM.HUFU_IDLE)
					});
					break;
				case 1:
					this.room.moveCamerToMid(() => {
						this.operatePaint.syncCamera(), this.avatar.playIdle()
					});
					break;
				case 2:
					this.room.moveCamerToFar(() => {
						this.operatePaint.syncCamera(), this.avatar.playIdle()
					})
			}
		}
		setBrush(t) {
			if (t) {
				let e = db.get_item_db(t),
					a = db.get_part_type_db(e.gid),
					i = DbExt.getBrushId(e);
				if (a.paintable && i) return this.brushIcon.visible = !0, this.brushDb = db.get_brush_db(i), this.brushIcon.loadImage(this.brushDb.icon), this.brushAnimNode.x = 260, this.brushAnimNode.rotation = 40, cc.tween(this.brushAnimNode, !0).to(.4, {
					x: -39,
					rotation: 0
				}, cc.OPTION.BACK_OUT).start(), this.brushDb.head ? this.brushHead.loadImage(this.brushDb.head) : this.brushHead.texture = null, this.brushDb.holdOffset.length >= 2 && this.brushIcon.getComponent(UIDrag).setOffset(this.brushDb.holdOffset[0], this.brushDb.holdOffset[1]), this.operatePaint.setPaintPart(t), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELROOM_BRUSH, this.brushIcon, !0), !0
			}
			return this.brushIcon.event(Laya.Event.MOUSE_UP), this.brushIcon.visible = !1, this.operatePaint.setPaintPart(null), !1
		}
		setUiVisible(t, e) {
			this._uiVisible !== t && (this._uiVisible = t, t ? this.scheduleOnce(e, () => {
				cc.tween(this.topNode).to(.3, {
					y: 0
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.topLeftNode).to(.3, {
					x: 0
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.topRightNode).to(.3, {
					x: 0
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.leftNode).to(.3, {
					x: 0
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.rightNode).to(.3, {
					x: 0
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.bottomNode).to(.3, {
					y: 0
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.scrollMenu.node).to(.3, {
					y: 68
				}, cc.OPTION.BACK_OUT).start()
			}) : this.scheduleOnce(e, () => {
				cc.tween(this.topNode).to(.3, {
					y: -200
				}, cc.OPTION.SINE_OUT).start(), cc.tween(this.topLeftNode).to(.3, {
					x: -120
				}, cc.OPTION.SINE_OUT).start(), cc.tween(this.topRightNode).to(.3, {
					x: 150
				}, cc.OPTION.SINE_OUT).start(), cc.tween(this.leftNode).to(.3, {
					x: -120
				}, cc.OPTION.SINE_OUT).start(), cc.tween(this.rightNode).to(.3, {
					x: 120
				}, cc.OPTION.SINE_OUT).start(), cc.tween(this.bottomNode).to(.3, {
					y: 200
				}, cc.OPTION.SINE_OUT).start(), cc.tween(this.scrollMenu.node).to(.3, {
					y: 238
				}, cc.OPTION.SINE_OUT).start()
			}))
		}
		setPart(t) {
			if (this.avatar.isInit) {
				let e = db.get_item_db(t);
				switch (this.avatar.setPart(t, !1), this.wearParts[e.gid] = t, this.onPartStateChange(), e.gid) {
					case 6:
					case 3:
						mgrAlert.playParticleEffect("104", {
							x: _G.canvasWidth / 2,
							y: _G.canvasHeight / 2 - 60
						}, 1, .5)
				}
				switch (this.roomType) {
					case ROOM_TYPE.LEVEL:
				}
			}
		}
		removePart(t) {
			if (this.avatar.isInit) {
				let e = db.get_item_db(t),
					a = this.originPars[e.gid];
				a ? this.setPart(a) : (this.avatar.removePart(t), delete this.wearParts[e.gid], this.onPartStateChange())
			}
		}
		tryPart(t) {
			if (this.subMenu) {
				let e = this.subMenu.getMenu(t);
				if (e) {
					this.curTryParts[t] = !0, e.data.owned = !0, e.data.bAdv = !1, !this.checkAdv() && this.lastAdvActive && (this.lastAdvActive = !1, this.clearAllAdv(), this.scrollPart.updateList(this.subMenu.data.count)), _G.sendMsg("UI_SELECT_PART", t)
				}
			}
		}
		onPartStateChange() {
			this.refreshScore(), this.scrollMenu.foreachItems(t => {
				t.updateWearState(this.checkPartTypeUsed(t.partType))
			})
		}
		refreshScore() {
			switch (this.roomType) {
				case ROOM_TYPE.NORMAL:
					break;
				case ROOM_TYPE.PVP:
					var t = mgrPart.calcLevelScore(this.wearParts, mgrPvp.curLevelDb);
					this.scoreLabel.text = (0 | t.totalScore) + "", this.barScore.progress = t.totalScore / mgrPvp.curLevelDb.score;
					break;
				case ROOM_TYPE.LEVEL:
					t = mgrPart.calcLevelScore(this.wearParts, mgrLevel.curLevelDb);
					this.scoreLabel.text = (0 | t.totalScore) + "", this.barScore.progress = t.totalScore / mgrLevel.curLevelDb.score
			}
		}
		checkAdv() {
			return !_G.isGuiding && (!(this._advCount >= 3) && mgrAdv.getActive("try_part"))
		}
		commitParts() {
			let t = this.wearParts;
			switch (this.roomType) {
				case ROOM_TYPE.NORMAL:
					mgrPart.setWearPart(t), mgrSdk.resetRecordState(), mgrGame.tryEnterMain(this.close.bind(this)), GameStatistics.statisCommonEventOnce(7012);
					break;
				case ROOM_TYPE.LEVEL:
					mgrAlert.openPanelLoading(UI_NAME.PanelOver, {
						fOnClick: e => {
							let a = db.get_level_db(mgrLevel.getLastLevel());
							if (mgrPart.calcLevelScore(t, a), mgrPart.partsLevel = t, e) {
								let t = mgrLevel.curLevelDb;
								mgrPart.partScoreResult.totalScore += 10, mgrPart.partScoreResult.suc = mgrPart.partScoreResult.totalScore >= t.score
							}
							mgrLevel.endLevel(mgrPart.partScoreResult.suc), BaseFacade.mItem.subItem("1010", 1, null)
						}
					});
					break;
				case ROOM_TYPE.SZZ:
					mgrSzz.setMyParts(t), mgrAlert.openPanelLoading(UI_NAME.PanelSzzShow, null, this.close.bind(this)), GameStatistics.statisCommonEvent(7022);
					break;
				case ROOM_TYPE.PVP:
					GameStatistics.statisCommonEvent(6005);
					let e = db.get_pvp_db(mgrPvp.duanwei, mgrPvp.curLevelIdx);
					mgrPvp.myParts = t, mgrPart.calcLevelScore(t, e), PanelPvpOverReady.openPanel({
						text: "",
						onFinish: () => {
							this.close()
						}
					}), BaseFacade.mGoal.commit(ACTION_ID.PVP_FINISH), BaseFacade.mItem.subItem("1011", 1, null)
			}
		}
		checkColorEggClock() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.HUAI_BIAO, EGGS_STEP.FIRST) || (this.buttonColorEggClock.node.visible = !1)
		}
		static getBrushPos() {
			let t = new Laya.Point(100, 100),
				e = mgrPanel.findPanel(PanelRoom);
			return e ? e.brushIcon.localToGlobal(t, !1) : t
		}
		static getZuoMeiMao() {
			let t = new Laya.Point,
				e = mgrPanel.findPanel(PanelRoom);
			if (e) {
				let a = e.avatar.baseFace.findChild("mei_r_03");
				a && UiHelper.worldToScreen(e.room.camera, a.transform.position, t)
			}
			return t
		}
		static getYouMeiMao() {
			let t = new Laya.Point,
				e = mgrPanel.findPanel(PanelRoom);
			if (e) {
				let a = e.avatar.baseFace.findChild("mei_l_03");
				a && UiHelper.worldToScreen(e.room.camera, a.transform.position, t)
			}
			return t
		}
		static getXiaZuiChun() {
			let t = new Laya.Point,
				e = mgrPanel.findPanel(PanelRoom);
			if (e) {
				let a = e.avatar.baseFace.findChild("xzc_m");
				a && UiHelper.worldToScreen(e.room.camera, a.transform.position, t)
			}
			return t
		}
		static set lockRight(t) {
			let e = mgrPanel.findPanel(PanelRoom);
			e && (e.operatePaint.lockRight = t)
		}
		static set lockTouch(t) {
			let e = mgrPanel.findPanel(PanelRoom);
			e && (e.lockToucNode.visible = t)
		}
		static resetMenu() {
			let t = mgrPanel.findPanel(PanelRoom);
			t && t.resetMenu()
		}
		on_click_btnBack() {
			switch (mgrSdk.resetRecordState(), this.roomType) {
				case ROOM_TYPE.NORMAL:
					mgrGame.tryEnterMain(this.close.bind(this));
					break;
				case ROOM_TYPE.LEVEL:
					mgrGame.tryEnterMain(this.close.bind(this)), GameStatistics.statisOnStageEnd(7507);
					let t = mgrLevel.getLastLevel();
					t > 0 && GameStatistics.statisOnStageEnd(12e3 + t, 0, 1);
					break;
				case ROOM_TYPE.SZZ:
					this.close();
					break;
				case ROOM_TYPE.PVP:
					mgrGame.tryEnterMain(this.close.bind(this)), _G.sendMsg("CLOSE_PVP");
					break;
				default:
					this.close()
			}
		}
		on_click_btnReset() {
			if (!this.avatar) return;
			let t = mgrPart.getSelectParts();
			this.avatar.setParts(t, !1, null, !0), this.setBrush(null);
			let e = Object.keys(this.wearParts);
			for (let t = 0; t < e.length; t++) delete this.wearParts[e[t]];
			for (var a in t) this.wearParts[a] = t[a];
			this.onPartStateChange()
		}
		on_click_btnOk() {
			_G.isGuiding ? this.scheduleOnce(.1, this.commitParts) : mgrAlert.alertDialog(mgrI18n.getText("panelRoom.1"), mgrI18n.getText("schoolYearbookItem.2"), this.commitParts.bind(this), function() {}, mgrI18n.getText("panelAdvCostDialog.2"), mgrI18n.getText("panelAdvCostDialog.3"))
		}
		on_click_buttonEmpty1() {}
		on_click_buttonEmpty2() {}
		on_click_buttonShopLvup() {
			mgrAlert.openPanelLoading(UI_NAME.PanelShopLvup)
		}
		on_click_buttonShop() {
			mgrAlert.openPanelLoading(UI_NAME.PanelShop, {
				curToggle: 2
			})
		}
		on_click_buttonColorEggClock() {
			this.buttonColorEggClock.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggClock.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggClock.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.huai_biao)
		}
	}
	class mgrJumpPanel extends _mgrBase {
		static onload() {}
		static jumpTo(t, e, a) {
			let i = this._onOpenBefore.bind(this, e);
			switch (t) {
				case JUMP_PANEL.SKINCARE:
					mgrAlert.openGameLoading(UI_NAME.PanelSkincare, null, i);
					break;
				case JUMP_PANEL.DREAM:
					mgrAlert.openGameLoading(UI_NAME.PanelDream, null, i);
					break;
				case JUMP_PANEL.ENTRUST:
					console.error("mgrJumpPanel.jumpTo 暂未实现跳转:", t);
					break;
				case JUMP_PANEL.PVP:
					mgrAlert.openGameLoading(UI_NAME.PanelPvp, null, i);
					break;
				case JUMP_PANEL.MANG_HE:
					mgrAlert.openGameLoading(UI_NAME.PanelMangHe, null, i);
					break;
				case JUMP_PANEL.INSIDE:
					mgrAlert.openGameLoading(UI_NAME.PanelInside, null, i);
					break;
				case JUMP_PANEL.SWITCH_ROLE:
					console.error("mgrJumpPanel.jumpTo 暂未实现跳转:", t);
					break;
				case JUMP_PANEL.ROLE_TEST:
					mgrAlert.openPanelLoading(UI_NAME.PanelRoleTest, null, i);
					break;
				case JUMP_PANEL.DANCE_DRAW:
					mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, null, i);
					break;
				case JUMP_PANEL.CP_TEST:
					mgrAlert.openPanelLoading(UI_NAME.PanelCpTestPreview, null, i);
					break;
				case JUMP_PANEL.CLASS_ROOM:
					mgrAlert.openPanelLoading(UI_NAME.PanelClassRoom, null, i);
					break;
				case JUMP_PANEL.ROOM:
					mgrPart.openPanelRoom(ROOM_TYPE.NORMAL, null, i);
					break;
				case JUMP_PANEL.OUTSIDE:
					mgrAlert.openGameLoading(UI_NAME.PanelOutside, null, i);
					break;
				case JUMP_PANEL.SZZ:
					mgrAlert.openGameLoading(UI_NAME.PanelSzz, null, i)
			}
		}
		static _onOpenBefore(t) {
			_G.sendMsg("JUMP_PANEL_BEFORE"), mgrPanel.closeLayer(PANEL_LAYER.UI), t && t()
		}
	}
	var COLOR_EGGS_QUEST, EGGS_TYPE, EGGS_STATE, EGGS_STEP;
	! function(t) {
		t.CLICK_BUTTERFLY = "6000", t.GET_FISH = "6001", t.CLEAR_TUYA = "6002", t.HUAI_BIAO = "6010", t.MIAN_JU = "6011", t.MAN_DUO_LA = "6012"
	}(COLOR_EGGS_QUEST || (COLOR_EGGS_QUEST = {})),
	function(t) {
		t[t.CLASS = 0] = "CLASS", t[t.SHOE = 1] = "SHOE"
	}(EGGS_TYPE || (EGGS_TYPE = {})),
	function(t) {
		t[t.NEW = 0] = "NEW", t[t.OPENED = 1] = "OPENED", t[t.AWARD = 2] = "AWARD", t[t.FINISHED = 3] = "FINISHED"
	}(EGGS_STATE || (EGGS_STATE = {})),
	function(t) {
		t[t.FIRST = 0] = "FIRST", t[t.SECOND = 1] = "SECOND", t[t.THIRD = 2] = "THIRD", t[t.FOURTH = 3] = "FOURTH"
	}(EGGS_STEP || (EGGS_STEP = {}));
	class mgrColorEggs extends _mgrBase {
		static onload() {
			this.eggData = FileRecord.getData("egg_data") || {}, this.registerMsg({
				[BASE_MSG.QUEST_STATE_CHANGE]: this.onMsgQuestStateChange.bind(this),
				[BASE_MSG.GOAL_VALUE_CHANGE]: this.onMsgGoalValueChange.bind(this)
			}), Timer.callLoop(1, this.updateLeftTime.bind(this))
		}
		static saveData() {
			FileRecord.setData("egg_data", this.eggData)
		}
		static onMsgQuestStateChange(t) {
			11 == t.questDb.type && t.questDb.gid == EGGS_TYPE.SHOE && this.onShoeColorEggStateChange(t)
		}
		static onMsgGoalValueChange(t) {
			if (t.userData.type != GOAL_TYPE.QUEST) return;
			let e = t.userData.data,
				a = db.get_quest_db(e);
			11 == a.type && a.gid == EGGS_TYPE.SHOE && this.onShoeColorEggStepChange(e, t.commits)
		}
		static getAllQuest(t) {
			return mQuest.getAllQuest(11, t)
		}
		static accept(t) {
			BaseFacade.mQuest.isAccept(t) || BaseFacade.mQuest.accept(t)
		}
		static commit(t, e = !1) {
			let a = BaseFacade.mQuest.commit(t, e);
			return a && mgrAlert.alertItems(a), a
		}
		static getState(t) {
			switch (BaseFacade.mQuest.getState(t)) {
				case QUEST_STATE.NONE:
					return EGGS_STATE.NEW;
				case QUEST_STATE.UPDATABLE:
					return EGGS_STATE.OPENED;
				case QUEST_STATE.COMMITABLE:
					return EGGS_STATE.AWARD;
				case QUEST_STATE.FINISHED:
					return EGGS_STATE.FINISHED;
				case QUEST_STATE.FAIL:
					console.error("彩蛋任务怎么可能失败?!", t)
			}
		}
		static isNew(t) {
			return this.getState(t) == EGGS_STATE.NEW
		}
		static isEnable(t) {
			if (this.isOpened(t)) {
				let e = db.get_color_egg_db(t);
				return Mathf.randomEnable(e.colorEggRate)
			}
			return !1
		}
		static isOpened(t) {
			return this.getState(t) == EGGS_STATE.OPENED
		}
		static isAward(t) {
			return this.getState(t) == EGGS_STATE.AWARD
		}
		static isFinished(t) {
			return this.getState(t) == EGGS_STATE.FINISHED
		}
		static hasAwardEgg(t) {
			let e = this.getAllQuest(t);
			for (let t = 0; t < e.length; t++)
				if (this.isAward(e[t])) return !0;
			switch (t) {
				case EGGS_TYPE.CLASS:
					return !1;
				case EGGS_TYPE.SHOE:
			}
		}
		static isStepEnable(t, e) {
			return !!this.isEnable(t) && BaseFacade.mQuest.getCurValue(t) == e
		}
		static isShoeColorEggEnable() {
			let t = [COLOR_EGGS_QUEST.HUAI_BIAO, COLOR_EGGS_QUEST.MIAN_JU, COLOR_EGGS_QUEST.MAN_DUO_LA];
			for (let e = 0; e < t.length; e++)
				if (!this.isNew(t[e])) return !0;
			return !1
		}
		static startTimer(t) {
			let e = db.get_color_egg_db(t);
			this.eggData[t] = {
				nextTime: Timer.time + e.colorEggGetTime
			}, this.saveData()
		}
		static getLeftTime(t) {
			let e = this.eggData[t];
			return e ? Math.max(0, (e.nextTime || 0) - Timer.time) : 0
		}
		static getTotalTime(t) {
			let e = db.get_color_egg_db(t);
			return e ? e.colorEggGetTime : 0
		}
		static finishColorEgg(t) {
			this.isOpened(t) && BaseFacade.mQuest.finishQuest(t)
		}
		static updateLeftTime() {
			Tools.forEachMap(this.eggData, (t, e) => {
				e.nextTime && e.nextTime <= Timer.time && (delete e.nextTime, this.finishColorEgg(t), this.saveData())
			})
		}
		static onShoeColorEggStepChange(t, e) {
			this.isOpened(t) && (e > 0 && e < 3 ? Timer.callLater(.6, function() {
				mgrAlert.openPanelLoading(UI_NAME.PanelShoeColorEggTip, {
					questId: t,
					stepIdx: e
				})
			}) : 3 == e && (this.startTimer(t), Timer.callLater(.6, function() {
				mgrAlert.openPanelLoading(UI_NAME.PanelColorEggGet, t)
			})))
		}
		static onShoeColorEggStateChange(t) {}
		static tryJumpToColorEgg(t, e) {
			switch (t) {
				case COLOR_EGGS_QUEST.HUAI_BIAO:
					switch (e) {
						case 0:
							mgrJumpPanel.jumpTo(JUMP_PANEL.ROOM);
							break;
						case 1:
							mgrJumpPanel.jumpTo(JUMP_PANEL.MANG_HE);
							break;
						case 2:
							mgrJumpPanel.jumpTo(JUMP_PANEL.PVP)
					}
					break;
				case COLOR_EGGS_QUEST.MIAN_JU:
					switch (e) {
						case 0:
							mgrJumpPanel.jumpTo(JUMP_PANEL.INSIDE);
							break;
						case 1:
							mgrJumpPanel.jumpTo(JUMP_PANEL.OUTSIDE);
							break;
						case 2:
							mgrJumpPanel.jumpTo(JUMP_PANEL.ROLE_TEST)
					}
					break;
				case COLOR_EGGS_QUEST.MAN_DUO_LA:
					switch (e) {
						case 0:
							mgrJumpPanel.jumpTo(JUMP_PANEL.SZZ);
							break;
						case 1:
							mgrJumpPanel.jumpTo(JUMP_PANEL.DREAM);
							break;
						case 2:
							mgrJumpPanel.jumpTo(JUMP_PANEL.CP_TEST)
					}
			}
		}
	}
	let HIT_EFFECT = ["2d/anim_node/68_bubble_lemon/68_bubble_lemon", "2d/anim_node/68_bubble_green/68_bubble_green", "2d/anim_node/68_bubble_blue/68_bubble_blue", "2d/anim_node/68_bubble_purple/68_bubble_purple", "2d/anim_node/68_bubble_orange/68_bubble_orange"];
	class mgrAlert extends _mgrBase {
		static onload() {
			let t = new Laya.Scene3D;
			this.scene3dfont = t, mgrPanel.getLayerNode(PANEL_LAYER.TOP).addChild(t);
			var e = t.addChild(new Laya.Camera(0, .1, 10));
			this.camerafont = e, e.transform.position = new Laya.Vector3(0, 0, 1), e.clearFlag = 3, e.orthographic = !0, _G.effectScene = t, _G.effectCamera = e, Laya.timer.loop(1, this, function() {})
		}
		static saveRecord() {}
		static alertDialog(t, e, a, i, s, n, o) {
			let r;
			r = "string" == typeof t ? {
				desc: t,
				title: e,
				confirm: a,
				cancel: i,
				confirmText: s,
				cancelText: n,
				closeMsg: o
			} : t, this.openPanelLoading(UI_NAME.PanelDialog, r)
		}
		static alertAdvDialog(t, e, a, i, s) {
			let n;
			n = "string" == typeof t ? {
				desc: t,
				title: e,
				confirm: a,
				cancel: s || function() {},
				confirmText: i
			} : t, this.openPanelLoading(UI_NAME.PanelAdvDialog, n)
		}
		static alertColorEggTip(t) {
			mgrAlert.alertDialog(mgrI18n.getText("mgrAlert.1"), mgrI18n.getText("schoolYearbookItem.2"), function() {
				switch (t) {
					case EGGS_TYPE.CLASS:
						mgrAlert.openPanelLoading(UI_NAME.PanelClassColorEggs)
				}
			})
		}
		static alertFadeIn(t, e, a, i, s, n) {
			let o = {
				panelClass: t,
				callbackBeforOpen: e,
				context: a,
				tip: i,
				maskColor: s,
				fadinTime: n
			};
			mgrPanel.openPanel(PanelFadeIn, o)
		}
		static openPanelLoading(t, e, a) {
			mgrPanel.openPanel(PanelPanelLoading, {
				panelClass: t,
				context: e,
				callback: a
			})
		}
		static openCustLoading(t, e, a, i, s, n) {
			mgrPanel.openPanel(t, {
				loader: e,
				panel: a,
				context: i,
				onOpenBefore: n
			}, !1, s)
		}
		static openGameLoading(t, e, a) {
			this.openCustLoading(PanelGameLoading1, null, t, e, null, a)
		}
		static openSPELoading(t, e, a, i) {
			this.openCustLoading(PanelSPELoading, t, e, a, i)
		}
		static openWait(t, e) {
			mgrPanel.openPanelWithSingleton(PanelWait), t.setLoadingCallback(function() {
				_G.sendMsg(BASE_MSG.RES_LOAD_END), e && e()
			}), t.loadAll()
		}
		static openResWait(t, e, a) {
			mgrPanel.openPanelWithSingleton(PanelWait), mgrRes.loadRes(t, e, function(t) {
				_G.sendMsg(BASE_MSG.RES_LOAD_END), a && a(t)
			})
		}
		static alertText(t) {
			Logger.debug("alert:", t), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, t)
		}
		static alertItemFromBtn(t, e) {
			let a;
			if (t instanceof Array) {
				if (0 == t.length) return;
				if (1 != t.length) return;
				a = t[0]
			} else a = t;
			let i = UiHelper.getSelfGlobalPos(e, Laya.Point.TEMP);
			return this.playItemToCurrency(a.itemId, i, 10)
		}
		static alertItems(t, e = !0, a) {
			let i;
			if (t instanceof Array) {
				if (0 == t.length) return;
				if (1 != t.length) {
					let i = 0;
					var s = () => {
						this.alertSingleItem(t[i++], e, function() {
							i < t.length ? s() : a && a()
						})
					};
					return void s()
				}
				i = t[0]
			} else i = t;
			let n = db.get_item_db(i.itemId);
			switch (n.type) {
				case 2:
					if (1 != n.subType) return void this.alertSingleItem(i, e, a);
				case 1:
					this.alertSingleItem(i, e, a);
					break;
				default:
					this.alertItemsByText(i, a)
			}
		}
		static alertItemsByText(t, e) {
			let a = "";
			if (t instanceof Array)
				for (let e = 0; e < t.length; e++) {
					const i = t[e];
					let s = db.get_item_db(i.itemId);
					a = 0 == e ? `${mgrI18n.getText("mgrAlert.2")}${s.name}x${i.count}` : `${a}, ${mgrI18n.getText("mgrAlert.2")}${s.name}x${i.count}`
				} else {
					let e = db.get_item_db(t.itemId);
					a = `${mgrI18n.getText("mgrAlert.2")}${e.name}x${t.count}`
				}
			this.alertText(a), e && e()
		}
		static alertSingleItem(t, e = !0, a, i, s) {
			this.openPanelLoading(UI_NAME.PanelItemGet, {
				item: t,
				bAdv: e,
				onClose: a,
				shareIdx: i,
				count: s
			})
		}
		static addAndAlertItems(t, e, a) {
			if (0 == t.length) return;
			let i = 0;
			var s = () => {
				this.addAndAlert(t[i++], e, function() {
					i < t.length ? s() : a && a()
				})
			};
			s()
		}
		static addAndAlert(t, e, a, i = !0, s) {
			let n, o = db.get_item_db(t.itemId);
			2 == o.type && 1 == o.subType && (n = BaseFacade.mItem.isOwned(t.itemId) || t.count > 1), BaseFacade.mItem.addItem(t.itemId, t.count, e), this.alertSingleItem(t, i, a, s)
		}
		static alertNotEnough(t, e = !0) {
			if (e) {
				let e = db.get_item_db(t);
				this.alertText(`${mgrI18n.getText(e.tlite)} ${mgrI18n.getText("mgrAlert.3")} `)
			}
			switch (t) {
				case "1001":
					this.isCoinGiftEnable && mgrAlert.openPanelLoading(UI_NAME.PanelCoinGift);
					break;
				case "1002":
					break;
				case "1000":
					this.isDiamondGiftEnable && mgrAlert.openPanelLoading(UI_NAME.PanelDiamondGift)
			}
		}
		static get isCoinGiftEnable() {
			return !0
		}
		static get isDiamondGiftEnable() {
			return mgrAdv.getActive("shop_item")
		}
		static alertQuickBuy(t, e, a, i, s) {
			let n = db.get_item_db(t),
				o = db.get_item_db(a);
			this.alertDialog(`${mgrI18n.getText("mgrAlert.4")} ${i} ${o.name} ${String.format(mgrI18n.getText("mgrAlert.5"),e)} ${n.name} `, mgrI18n.getText("schoolYearbookItem.2"), function() {
				BaseFacade.mItem.subItem(a, i, null) ? s() : mgrAlert.alertNotEnough(a)
			}, function() {})
		}
		static alertInput(t, e, a) {}
		static global2camera(t, e) {
			return e = e || new Laya.Vector3, this.camerafont.convertScreenCoordToOrthographicCoord(t, e), e
		}
		static playParticleEffect(t, e, a, i, s) {
			let n = _G.poolManager.get(Particle, t);
			if (n) {
				let t;
				if (e) {
					let a = Mathf.TEMP_VEC3;
					a.setValue(e.x, e.y, 0), t = this.global2camera(a, new Laya.Vector3)
				}
				s && n.setScale(s, s, s), n.play(t, a, i, this.scene3dfont)
			}
			return n
		}
		static playPlistEffect(t, e, a, i, s) {}
		static playAnimationEffect(t, e, a, i) {}
		static playEffect(t, e, a, i, s) {}
		static playEffectId(t, e, a, i) {
			let s = db.get_effect_db(t);
			switch (s.type) {
				case 1:
					return this.playPlistEffect(s.res, e, a, i);
				case 0:
					return this.playParticleEffect(s.res, e, a, i);
				case 2:
					return this.playAnimationEffect(s.res, e, a);
				case 3:
					return this.playEffect(s.res, e, a, i);
				case 4:
					return null
			}
		}
		static initCurrencyIconPosition(t, e, a) {
			this.uiCoinPos = t, this.uiVitPos = a, this.uiDiamondPos = e
		}
		static playIconTo(t, e = 2, a, i, s = .5, n = !1) {
			if (!i) return;
			let o;
			for (var r = 0; r < e; r++) {
				let e = _G.poolManager.get(DropIcon);
				if (e) {
					o = e, mgrPanel.getLayerNode(PANEL_LAYER.DIALOG).addChild(e), e.setIcon(a).burstOutAndJumpTo(t, i, s)
				}
			}
			return o
		}
		static playItemToCurrency(t, e, a) {
			let i = db.get_item_db(t);
			switch (t) {
				case "1001":
					return this.playIconTo(e, a, i.icon, this.uiCoinPos, .42, !0);
				case "1000":
					return this.playIconTo(e, a, i.icon, this.uiDiamondPos, .42, !0);
				case "1005":
					return this.playIconTo(e, a, i.icon, this.uiVitPos, .42, !0);
				case "1006":
					return this.playIconTo(e, a, i.icon, this.uiShuijingPos, .5, !0)
			}
		}
		static playCoinCount(t, e) {
			let a = _G.poolManager.get(CoinCount);
			mgrPanel.getLayerNode(PANEL_LAYER.DIALOG).addChild(a), a.setCount(e).play(t)
		}
		static tryOpenInstall() {
			db.cop.isSupportInstallShortcut && !mgrSdk.isInstallShortcut && (mgrSdk.isInstallShortcutHasPrompt ? mgrSdk.installShortcut() : this.openPanelLoading(UI_NAME.PanelInstall))
		}
		static playHitEffect(t, e = 1) {
			let a = HIT_EFFECT[e - 1];
			a && this.playParticleEffect(a, t, .3, .4)
		}
	}
	const RECORD_VIDEO_KEY = "RecordVideioEnabled",
		RECORD_ADD_GAME = "RecordAddGame",
		RECORD_INSTALL_SHORTCUT = "RecordShortcut";
	let DEBUG_MODE = !1;
	class mgrSdk extends _mgrBase {
		static get isUrlNotice() {
			return !!db.cop.url_notice
		}
		static onload() {
			switch (Logger.log(`---\x3e _G.SDK_VERSION: [${_G.SDK_VERSION}]`), _G.SDK_VERSION) {
				case SDK_VERSIONS_VALUE.V6:
					SDKBridge.registerCmd("/c/channelInfoResult", this.onChannelInfoResult_V6.bind(this)), SDKBridge.registerCmd("/c/copInfoResult", this.onCopInfoResult.bind(this)), SDKBridge.registerCmd("/c/payResult", this.onPayResult.bind(this)), SDKBridge.registerCmd("/c/prePayResult", this.onBeforePayResult.bind(this)), SDKBridge.registerCmd("/c/shareResult", this.onShareResult.bind(this)), SDKBridge.registerCmd("/c/appShareResult", this.onAppShareResult.bind(this)), SDKBridge.registerCmd("/c/exitGame", this.onExitGame.bind(this)), SDKBridge.registerCmd("/c/useCdkey", this.onUseCDKResult.bind(this)), SDKBridge.registerCmd("/c/lifeCycle", this.onLifeCycle.bind(this)), SDKBridge.registerCmd("/c/getClipboardDataResult", this.onGetClipboardDataResult.bind(this)), SDKBridge.registerCmd("/c/extraBonus", this.onExtraBonus.bind(this)), SDKBridge.registerCmd("/c/openJumpResult", this.onOpenJumpResult.bind(this)), SDKBridge.registerCmd("/c/addSubscribeResult", this.onAddSubscribeResult.bind(this)), SDKBridge.registerCmd("/c/jumpOtherGameResult", this.onJumpOtherGameResult.bind(this)), SDKBridge.registerCmd("/c/jumpOtherGameRewardResult", this.onJumpOtherGameRewardResult.bind(this)), SDKBridge.registerCmd("/c/addGameToMyFavoriteResult", this.onAddGameToMyFavoriteResult.bind(this)), SDKBridge.registerCmd("/c/installShortcutResult", this.onInstallShortcutResult.bind(this)), SDKBridge.registerCmd("/c/getShortcutStateResult", this.onGetShortcutStateResult.bind(this)), SDKBridge.registerCmd("/c/getUserDataResult", this.onGetUserDataResult.bind(this)), SDKBridge.registerCmd("/c/recorderGameVideoResult", this.onRecorderGameVideoResult.bind(this)), SDKBridge.registerCmd("/c/shareGameVideoResult", this.onShareGameVideoResult.bind(this)), SDKBridge.registerCmd("/c/userIsLoginResult", this.onUserIsLoginResult.bind(this)), SDKBridge.registerCmd("/c/userLoginResult", this.onUserLoginResult.bind(this)), SDKBridge.registerCmd("/c/followOfficialAccountResult", this.onFollowOfficialAccountResult.bind(this)), SDKBridge.registerCmd("/c/getFollowOfficialAccountStateResult", this.onGetFollowOfficialAccountStateResult.bind(this)), SDKBridge.registerCmd("/c/getRankDataResult", this.onGetRankDataResult.bind(this)), SDKBridge.registerCmd("/c/jumpToVideoViewResult", this.onJumpToVideoViewResult.bind(this)), this.isAutoRecordVideo = FileRecord.getData(RECORD_VIDEO_KEY), null == this.isAutoRecordVideo && (this.isAutoRecordVideo = !0);
					break;
				case SDK_VERSIONS_VALUE.V5:
					SDKBridge.registerCmd("/c/channelInfoResult", this.onChannelInfoResult_V5.bind(this)), SDKBridge.registerCmd("/c/payResult", this.onPayResult.bind(this)), SDKBridge.registerCmd("/c/exitGame", this.onExitGame.bind(this)), SDKBridge.registerCmd("/cdk/useCdkey", this.onUseCDKResult.bind(this))
			}
			this.registerMsg({
				[BASE_MSG.SYS_KEY_DOWN]: t => {
					t.keyCode, Laya.Keyboard.ESCAPE
				},
				[BASE_MSG.SYS_SHOW]: () => {
					this.tryGetShareAward(!1)
				},
				[BASE_MSG.BASE_MGR_LOADED]: this.onMsgBaseMgrLoaded.bind(this)
			}), this.registerKeyboardListener(), DEBUG_MODE && Logger.error("SDK debug开启，如果了解请忽略。")
		}
		static start() {}
		static setVersion(t) {
			if (_G.H5_TEST || DEBUG_MODE) switch (Logger.setLogLevel(3), _G.SDK_VERSION) {
				case SDK_VERSIONS_VALUE.V6:
					this.onChannelInfoResult_V6(t);
					break;
				case SDK_VERSIONS_VALUE.V5:
			} else switch (Logger.setLogLevel(2), _G.SDK_VERSION) {
				case SDK_VERSIONS_VALUE.V5:
					SDKBridge.sendToSdk("setVersion", {});
					break;
				case SDK_VERSIONS_VALUE.V6:
					SDKBridge.sendToSdk("/c/setVersion", {})
			}
		}
		static registerKeyboardListener() {
			window.conch && window.conch.setOnBackPressedFunction(() => {
				this.exitGame()
			})
		}
		static onMsgBaseMgrLoaded() {
			for (let t = this.allMgrLoadedMsgs.length - 1; t >= 0; t--) {
				let t = this.allMgrLoadedMsgs.shift();
				_G.sendMsg(t.msg, t.data)
			}
		}
		static getSubCop(t) {
			let e = db.get_sub_cop_map()[t];
			if (!e) return 0;
			let a = db.cop[e.copKey];
			return a ? a[e.idx] : 0
		}
		static tryAddItem(t, e, a) {
			let i = {
				itemId: t,
				count: e,
				reason: a
			};
			BaseFacade.isLoaded ? _G.sendMsg(BASE_MSG.ITEM_ADD, i) : this.allMgrLoadedMsgs.push({
				msg: BASE_MSG.ITEM_ADD,
				data: i
			})
		}
		static onChannelInfoResult_V6(t) {
			if (console.log("-- > onChannelInfoResult_V6"), console.log("lfy", t), !t) return;
			t.payInfo, parseInt(t.cardType);
			db.cop.isAbout = !!t.isAbout, db.cop.isThirdExit = !!t.isThirdExit, db.cop.isShareEnabled = !!t.isShareEnabled, db.cop.isPayEnabled = !!t.isPayEnabled, db.cop.isULMoreGame = !!t.isULMoreGame, db.cop.isUseSdkRank = !!t.isUseSdkRank, db.cop.isWebView = !!t.isWebView, db.cop.isShowUrlAdIcon = !!t.isShowUrlAdIcon, db.cop.isSupportRecordShare = !!t.isSupportRecordShare, db.cop.isSupportInstallShortcut = !!t.isSupportInstallShortcut, db.cop.isSupportFindMinigames = !!t.isSupportFindMinigames, db.cop.isSupportRecommendationBtn = !!t.isSupportRecommendationBtn, db.cop.is4399Watermark = !!t.is4399Watermark, db.cop.isJumpLeisureEnabled = !!t.isJumpLeisureEnabled, db.cop.isSupportFollowOfficialAccount = !!t.isSupportFollowOfficialAccount, db.cop.isSupportFavoriteGuide = !!t.isSupportFavoriteGuide, db.cop.isSupportVideoRank = !!t.isSupportVideoRank, db.cop.isSupportSubscribe = !!t.isSupportSubscribe, db.cop.isSupportChannelMoreGameBox = !!t.isSupportChannelMoreGameBox, db.cop.pop_review_ratio = Tools.safeParseInt(t.pop_review_ratio, 0), this._testJumpInfo = t.jumpInfo, t.appName && (this.h5_channel = t.appName.toString().toLowerCase()), "vivo" == this.h5_channel && (console.error = console.warn, Logger.error = Logger.warn), this.findmeImageUrl = t.findMinigamesImageUrl, this.ulsdkVersion = t.ulsdkVersion, this.packageVersion = t.packageVersion, this.uuid = t.uuid, mgrI18n.setSdkLanguage(t.gameLanguage), this.hotfixCop_V6(t.copInfo), this.isChnResult = !0
		}
		static onCopInfoResult(t) {
			this.hotfixCop_V6(t.copInfo)
		}
		static hotfixCop_V6(t) {
			let e;
			this.COP_INFO = t;
			try {
				e = JSON.parse(t)
			} catch (e) {
				return void Logger.error(`hot fix cop [${t}] error:`, e)
			}
			let a = db.cop,
				i = Object.keys(a);
			for (let t = 0; t < i.length; t++) {
				let s = i[t],
					n = e[s];
				if (null != n) switch (typeof a[s]) {
					case "number":
						a[s] = Tools.safeParseInt(n, 0);
						break;
					case "boolean":
						a[s] = Tools.safeParseBool(n);
						break;
					case "string":
						a[s] = n.toString();
						break;
					case "object":
						"string" == typeof a[s][0] ? a[s] = n.toString().split(";") : a[s] = Tools.splitToNumber(n, ";")
				}
			}
			mgrAdv.hotfixCop(), _G.sendMsg(BASE_MSG.SDK_COP_CHANGED, e), console.log("mgrSdk.hotfixCop_V6")
		}
		static openPay(t, e, a, i) {
			let s = {
				payId: e,
				reason: i
			};
			switch (this.payCallback = a, _G.SDK_VERSION) {
				case SDK_VERSIONS_VALUE.V6:
					SDKBridge.sendToSdk("/c/openPay", {
						payId: t,
						userData: JSON.stringify(s)
					});
					break;
				case SDK_VERSIONS_VALUE.V5:
					let e = {
						payId: t
					};
					SDKBridge.sendToSdk("/c/openPay", {
						payInfo: e,
						userInfo: JSON.stringify(s)
					})
			}(_G.H5_TEST || DEBUG_MODE) && this.onPayResult({
				code: 1,
				msg: ""
			})
		}
		static onPayResult(t) {
			Logger.log("onPayResult", t.code), this.payCallback && this.payCallback(1 == t.code, t.msg, 2 == t.code)
		}
		static onBeforePayResult(t) {
			if (1 != t.code) return;
			let e = JSON.parse(t.userData).payId;
			console.log("onBeforePayResult payId: ", e), e && (BaseFacade.isLoaded ? _G.sendMsg(BASE_MSG.SDK_PRE_PAY, e) : this.allMgrLoadedMsgs.push({
				msg: BASE_MSG.SDK_PRE_PAY,
				data: e
			}), console.log("已恢复购买payId:", e))
		}
		static share(t = "none") {
			this._lastShareData = {
				userData: t,
				time: Timer.time
			};
			let e = JSON.stringify(this._lastShareData);
			SDKBridge.sendToSdk("/c/openShare", {
				title: "",
				content: "",
				imagePath: "",
				url: "",
				userData: e
			}), (_G.H5_TEST || DEBUG_MODE) && Timer.callLater(.5, () => {
				this.onShareResult({
					code: 1,
					userData: e
				})
			})
		}
		static onShareResult(t) {
			let e = JSON.parse(t.userData);
			1 == t.code ? this.tryGetShareAward(!0) : (this._lastShareData = null, _G.sendMsg(BASE_MSG.SDK_SHARE_FAIL, e.userData))
		}
		static tryGetShareAward(t) {
			let e = this._lastShareData;
			e && (t || e.time + 4 < Timer.time) && (_G.sendMsg(BASE_MSG.SDK_SHARE_SUC, e.userData), _G.H5_TEST && _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "[debug]:分享成功"), this._lastShareData = null)
		}
		static onAppShareResult(t) {}
		static exitGame() {
			db.cop.isThirdExit ? this.thirdExitGame() : this._exitGame()
		}
		static thirdExitGame() {
			SDKBridge.sendToSdk("/c/exitGame", {})
		}
		static _exitGame() {
			_G.sendMsg(BASE_MSG.SDK_EXIT_GAME)
		}
		static onExitGame(t) {
			this._exitGame()
		}
		static sendCDK(t) {
			if (Logger.log("请求验证码:", t), !t) return void _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "请输入兑换码!");
			let e = {
				userId: this.uuid,
				cdkStr: t,
				channelId: "0"
			};
			SDKBridge.sendToSdk("/c/useCdkey", e), (_G.H5_TEST || DEBUG_MODE) && Timer.callLater(1, () => {
				this.onUseCDKResult({
					code: "1",
					data: [{
						goodsid: "1001",
						count: 1
					}, {
						goodsid: "1000",
						count: 1
					}]
				})
			})
		}
		static onUseCDKResult(t) {
			if ("1" == t.code) {
				_G.sendMsg(BASE_MSG.UI_SHOW_TIP, "兑换码兑换成功！");
				for (const e in t.data) {
					let a = t.data[e],
						i = a.goodsid.toString(),
						s = a.count,
						n = BaseFacade.mItem.addWrapItemToList(i, s, 3);
					_G.sendMsg(BASE_MSG.UI_SHOW_ITEMS, n)
				}
			} else if ("-1" == t.code) {
				let e = t.data;
				"兑换码不在有效使用期" == e && (e = "兑换码兑换失败"), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, e)
			} else _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "兑换码兑换失败")
		}
		static onLifeCycle(t) {
			switch (t.lifeCycle || "") {
				case "onBackPressed":
					this.exitGame()
			}
		}
		static setClipboardData(t, e = "") {
			SDKBridge.sendToSdk("/c/setClipboardData", {
				clipboardData: t,
				userData: e
			})
		}
		static getClipboardData(t = "") {
			SDKBridge.sendToSdk("/c/getClipboardData", {
				userData: t
			})
		}
		static onGetClipboardDataResult(t) {
			if (1 == t.code) {
				t.clipboardData, t.userData, t.msg
			}
		}
		static openMoreGame() {
			SDKBridge.sendToSdk("/c/openMoreGame", {})
		}
		static openUlMoreGame() {
			console.log("openUlMoreGame"), SDKBridge.sendToSdk("/c/openUlMoreGame", {})
		}
		static openJf() {
			SDKBridge.sendToSdk("/c/openJf", {})
		}
		static callPhone(t) {
			SDKBridge.sendToSdk("/c/callPhon", {
				phoneNum: t
			})
		}
		static openWebView(t) {
			SDKBridge.sendToSdk("/c/ulWebView", {
				url: t
			})
		}
		static openReview() {
			SDKBridge.sendToSdk("/c/openInviteComment", {})
		}
		static openUrlNotice() {
			db.cop.url_notice && this.openWebView(db.cop.url_notice)
		}
		static openMoreWonderful() {
			SDKBridge.sendToSdk("/c/jumpLeisureSubject", {})
		}
		static opentChannelMoreGameBox() {
			SDKBridge.sendToSdk("/c/openChannelMoreGameBox", {})
		}
		static onExtraBonus(t) {
			t && 1 == t.code && (FileRecord.getData("extraBonusReward") || (console.log(`msg:${t.msg}  isInitGame:${t.isInitGame}`), this.tryAddItem("1000", 40, 4), FileRecord.setData("extraBonusReward", !0)))
		}
		static openJump(t, e = 0) {
			SDKBridge.sendToSdk("/c/openJump", {
				gameIndex: 0,
				type: t,
				count: e
			}), (_G.H5_TEST || DEBUG_MODE) && Timer.callLater(1, () => {
				"single" == t ? this.onOpenJumpResult({
					code: 1,
					jumpInfo: [this._testJumpInfo[Mathf.random(this._testJumpInfo.length) - 1]],
					type: t
				}) : this.onOpenJumpResult({
					code: 1,
					jumpInfo: this._testJumpInfo,
					type: t
				})
			})
		}
		static onOpenJumpResult(t) {
			1 == t.code ? _G.sendMsg(BASE_MSG.SDK_OPEN_JUMP_RESULT, {
				jumpInfo: t.jumpInfo,
				type: t.type
			}) : console.warn("互推列表获取失败：", t.type, t.msg)
		}
		static addSubscribe(t, e = !1) {
			Logger.log("mgrSdk addSubscribe"), SDKBridge.sendToSdk("/c/addSubscribe", {
				userData: "",
				templateIds: t,
				isNotFromClick: e
			})
		}
		static onAddSubscribeResult(t) {
			1 == t.code ? (console.log("onAddSubscribeResult:", t.code), _G.sendMsg(BASE_MSG.MSG_ON_ADD_SUBSCRIBE_RESULT, {
				successTempleteIds: t.successTempleteIds,
				msg: t.msg
			})) : (_G.sendMsg(BASE_MSG.UI_SHOW_TIP, "订阅失败"), console.error("订阅失败", t.msg))
		}
		static jumpOtherGame(t, e, a = "") {
			Logger.log("jumpOtherGame:", t), SDKBridge.sendToSdk("/c/jumpOtherGame", {
				gameIndex: t,
				type: e,
				userData: a
			}), (_G.H5_TEST || DEBUG_MODE) && Timer.callLater(1, () => {
				if (this.onJumpOtherGameResult({
						code: 1,
						userData: a
					}), "reward" == e)
					for (var i = 0; i < this._testJumpInfo.length; i++) {
						var s = this._testJumpInfo[i];
						if (s.index == t) {
							s.bReceived = !0, this.onJumpOtherGameRewardResult({
								code: 1,
								rewards: s.rewards,
								userData: a
							});
							break
						}
					}
			})
		}
		static onJumpOtherGameResult(t) {
			if (1 == t.code) {
				let e = t.userData;
				_G.sendMsg(BASE_MSG.SDK_JUMP_GAME_SUC, e)
			} else Logger.log(t.msg)
		}
		static onJumpOtherGameRewardResult(t) {
			if (console.log("onJumpOtherGameRewardResult:", t.userData), 1 == t.code) {
				let e = t.rewards;
				e && e.length && this.tryAddItem("1000", e[0][1], 5), _G.sendMsg(BASE_MSG.SDK_JUMP_GAME_REWARD, t.userData)
			} else console.warn("onJumpOtherGameRewardResult no reward:", t.msg)
		}
		static addGameToMyFavorite(t = 0, e = "一键添加到我的小程序", a = "") {
			console.log("mgrSdk addGameToMyFavorite."), SDKBridge.sendToSdk("/c/addGameToMyFavorite", {
				typeId: t,
				content: e,
				userData: a
			})
		}
		static hasAddGameToMyFavorite() {
			return !!FileRecord.getData(RECORD_ADD_GAME)
		}
		static onAddGameToMyFavoriteResult(t) {
			FileRecord.setData(RECORD_ADD_GAME, !0), t && t.code
		}
		static installShortcut(t = "") {
			console.log("mgrSdk installShortcut."), SDKBridge.sendToSdk("/c/installShortcut", {
				userData: t
			}), _G.H5_TEST && Timer.callLater(.5, () => {
				this.onInstallShortcutResult({
					code: 1,
					userData: t
				}), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "[debug]:添加到桌面成功")
			})
		}
		static getShortcutState(t = "") {
			console.log("mgrSdk getShortcutState"), SDKBridge.sendToSdk("/c/getShortcutState", {
				userData: t
			})
		}
		static onInstallShortcutResult(t) {
			let e = t.userData,
				a = t.msg;
			1 == t.code ? (FileRecord.setData(RECORD_INSTALL_SHORTCUT, !0), _G.sendMsg(BASE_MSG.SDK_INSTALL_SHORTCUT_SUC, e)) : Logger.warn(a)
		}
		static onGetShortcutStateResult(t) {
			t.code;
			let e = t.state,
				a = !!t.bHasPrompt,
				i = t.userData;
			db.cop.isSupportInstallShortcut = 1 == e, this.isInstallShortcutHasPrompt = a, _G.sendMsg(BASE_MSG.SDK_GET_SHORTCUT_STATE_SUC, {
				state: e,
				bHasPrompt: a,
				userData: i
			})
		}
		static getRankData(t, e, a, i, s = "") {
			SDKBridge.sendToSdk("/c/getRankData", {
				dataNum: t,
				rankName: e,
				order: a,
				rankType: i,
				videoTag: s
			})
		}
		static onGetRankDataResult(t) {
			let e = t.code;
			1 == e ? (_G.sendMsg(BASE_MSG.SDK_GET_RANK_DATA_RESULT, {
				rankType: t.rankType,
				videoTag: t.videoTag,
				list: t.list
			}), console.log("排行榜数据获取成功", e, t.rankType, t.videoTag, t.list)) : console.warn("排行榜数据获取失败", e, t.rankType, t.videoTag, t.list)
		}
		static jumpToVideoView(t, e = "") {
			Logger.log("jumpToVideoView:", t), SDKBridge.sendToSdk("/c/jumpToVideoView", {
				videoId: t,
				userData: e
			})
		}
		static onJumpToVideoViewResult(t) {
			if (1 == t.code) {
				let e = t.userData;
				_G.sendMsg(BASE_MSG.SDK_JUMP_TO_VIDEO_VIEW_SUC, e)
			} else Logger.log(t.msg)
		}
		static get isInstallShortcut() {
			return !!FileRecord.getData(RECORD_INSTALL_SHORTCUT)
		}
		static saveUserData(t) {
			SDKBridge.sendToSdk("/c/saveUserData", {
				userData: t
			})
		}
		static getUserData() {
			SDKBridge.sendToSdk("/c/getUserData", {})
		}
		static onGetUserDataResult(t) {
			if (1 == t.code) {
				t.userData
			}
		}
		static tryStartRecord() {
			db.cop.isSupportRecordShare && this.isAutoRecordVideo && this.startRecordVideo()
		}
		static resetRecordState() {
			db.cop.isSupportRecordShare && (this.stopRecordVideo(), this.clearShareVideo())
		}
		static startRecordVideo() {
			db.cop.isSupportRecordShare && (this._isVideoRecording && this.stopRecordVideo(), this._isVideoRecording = !0, this._videoRecordTime = Timer.time, SDKBridge.sendToSdk("/c/recorderGameVideo", {
				action: "start",
				durationTime: 120
			}))
		}
		static pauseRecordVideo() {
			SDKBridge.sendToSdk("/c/recorderGameVideo", {
				action: "pause",
				durationTime: 120
			})
		}
		static resumeRecordVideo() {
			SDKBridge.sendToSdk("/c/recorderGameVideo", {
				action: "resume",
				durationTime: 120
			})
		}
		static stopRecordVideo() {
			db.cop.isSupportRecordShare && this._isVideoRecording && (this._isVideoRecording = !1, this._videoRecordTime = Timer.time - this._videoRecordTime, SDKBridge.sendToSdk("/c/recorderGameVideo", {
				action: "stop",
				durationTime: 120
			}))
		}
		static setAutoRecordVideo(t) {
			FileRecord.setData(RECORD_VIDEO_KEY, t), t || this.stopRecordVideo(), this.isAutoRecordVideo = t
		}
		static onRecorderGameVideoResult(t) {
			if (t) {
				switch (t.code) {
					case 0:
					case 1:
					case 2:
					case 3:
					case 4:
						break;
					default:
						return
				}
			}
		}
		static get isVideoAutoRecordable() {
			return db.cop.isSupportRecordShare && this.isAutoRecordVideo && !this._isVideoRecording
		}
		static get isVideoShareable() {
			return db.cop.isSupportRecordShare && !this._isVideoRecording && this._videoRecordTime > this.min_record_time
		}
		static get isVideoRecording() {
			return db.cop.isSupportRecordShare && this._isVideoRecording
		}
		static shareVideo(t = "", e = "") {
			this._isVideoRecording || (this._videoRecordTime > this.min_record_time ? (SDKBridge.sendToSdk("/c/shareGameVideo", {
				userData: t,
				videoTag: e
			}), (_G.H5_TEST || DEBUG_MODE) && Timer.callLater(1, () => {
				this.onShareGameVideoResult({
					code: 1,
					userData: t
				}), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "[debug]:视频分享成功")
			})) : (_G.sendMsg(BASE_MSG.UI_SHOW_TIP, "视频分享失败"), console.log("录屏时长不够!")))
		}
		static clearShareVideo() {
			this._videoRecordTime = 0
		}
		static onShareGameVideoResult(t) {
			t && (1 == t.code ? (console.log("分享视频成功"), _G.sendMsg(BASE_MSG.SDK_VIDEO_SHARE_SUC)) : (console.log("分享视频失败"), _G.sendMsg(BASE_MSG.SDK_VIDEO_SHARE_FAIL)))
		}
		static checkLoginState() {
			SDKBridge.sendToSdk("/c/userIsLogin", {}), _G.H5_TEST && Timer.callLater(.5, () => {
				this.onUserIsLoginResult({
					loginStatus: !1
				})
			})
		}
		static onUserIsLoginResult(t) {
			this.isUserLogin = 1 == t.code, _G.sendMsg(BASE_MSG.SDK_LOGIN_STATE, this.isUserLogin)
		}
		static login(t = "") {
			SDKBridge.sendToSdk("/c/userLogin", {
				userData: t
			}), _G.H5_TEST && Timer.callLater(.5, () => {
				this.onUserLoginResult({
					code: 1,
					userData: t
				})
			})
		}
		static onUserLoginResult(t) {
			this.isUserLogin = 1 == t.code, _G.sendMsg(BASE_MSG.SDK_LOGIN_RESULT, this.isUserLogin)
		}
		static openCrossRecommend(t, e, a = 0) {
			console.log("mgrSdk openCrossRecommend"), SDKBridge.sendToSdk("/c/openRecommendation", {
				typeId: a,
				style: {
					left: t,
					top: e
				}
			})
		}
		static closeCrossRecommend() {
			console.log("mgrSdk closeCrossRecommend"), SDKBridge.sendToSdk("/c/closeRecommendation", {})
		}
		static followOfficialAccount() {
			console.log("mgrSdk followOfficialAccount"), SDKBridge.sendToSdk("/c/followOfficialAccount", {})
		}
		static getFollowOfficialAccountState() {
			console.log("mgrSdk getFollowOfficialAccountState"), SDKBridge.sendToSdk("/c/getFollowOfficialAccountState", {})
		}
		static onFollowOfficialAccountResult(t) {
			1 == t.code ? (this.followState = 1, _G.sendMsg(BASE_MSG.SDK_FOLLOW_OFFICIAL_ACCOUNT_SUC, t)) : mgrAlert.alertText(t.msg || "暂时无法跳转，请重试")
		}
		static onGetFollowOfficialAccountStateResult(t) {
			let e = t.code,
				a = t.state;
			1 == e && (this.followState = a, console.log("关注状态", this.followState), _G.sendMsg(BASE_MSG.SDK_GET_FOLLOW_OFFICIAL_ACCOUNT_STATE_SUC, t))
		}
		static onChannelInfoResult_V5(t) {
			if (console.log("-- > onChannelInfoResult_V5"), !t) return;
			t.payInfo, parseInt(t.cardType);
			this.hotFixCop_V5(t.configInfo)
		}
		static hotFixCop_V5(t) {
			let e;
			this.COP_INFO = t;
			try {
				e = JSON.parse(t)
			} catch (e) {
				return void Logger.error(`hot fix cop [${t}] error:`, e)
			}
			e.url_ad_h5 && (db.cop.isShowUrlAdIcon = !0), this.hotfixCop_V6(t)
		}
	}

	function sort_pay_db_by_switch(t, e) {
		let a = BaseFacade.mSwitch.check(t.switchId);
		return a == BaseFacade.mSwitch.check(e.switchId) ? Tools.sort_db_by_order(t, e) : a ? -1 : 1
	}

	function sort_pay_id_by_switch(t, e) {
		return sort_pay_db_by_switch(db.get_pay_db(t), db.get_pay_db(e))
	}

	function sort_pay_id_by_order(t, e) {
		return Tools.sort_db_by_order(db.get_pay_db(t), db.get_pay_db(e))
	}
	mgrSdk.COP_INFO = "", mgrSdk.isChnResult = !1, mgrSdk.isAutoRecordVideo = !0, mgrSdk.isInstallShortcutHasPrompt = !1, mgrSdk.isSupportJumpList = !1, mgrSdk.isUserLogin = !1, mgrSdk.h5_channel = "", mgrSdk.packageVersion = "0", mgrSdk.ulsdkVersion = "0", mgrSdk.isMusicEnable = !1, mgrSdk.findmeImageUrl = "", mgrSdk.followState = 1, mgrSdk.uuid = "0", mgrSdk.allMgrLoadedMsgs = [], mgrSdk._testJumpInfo = [], mgrSdk._isVideoRecording = !1, mgrSdk._videoRecordTime = 0, mgrSdk.min_record_time = 3;
	class mPay extends _mBase {
		onload() {
			this.registerMsg({
				[BASE_MSG.SDK_PRE_PAY]: this.onMsgPrePay.bind(this)
			})
		}
		loadData() {}
		saveData() {}
		onMsgPrePay(t) {
			this._onGetGoods(t, 9)
		}
		getActive(t) {
			let e = db.get_pay_db(t);
			return !!e && BaseFacade.mSwitch.check(e.switchId)
		}
		buyGoods(t, e, a = null, i = !1) {
			let s = db.get_pay_db(t);
			if (e = e || _G.EMPTY_FUN, !s) return void e(!1, null);
			let n = !1;
			if (i) n = !0;
			else if (s.firstCostItemId && (n = BaseFacade.mItem.subItem(s.firstCostItemId, s.firstCostCount, a)), !n) {
				if ("1003" == s.costItemId) return void mgrSdk.openPay(s.payCode, t, (a, i, s) => {
					let n;
					a ? n = this._onGetGoods(t, void 0, !0) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, i), e(a, n)
				});
				n = BaseFacade.mItem.subItem(s.costItemId, s.costCount, a)
			}
			if (n) {
				let i = this._onGetGoods(t, a);
				e(!0, i)
			} else e(!1, null)
		}
		_onGetGoods(t, e = null, a = !1) {
			let i = db.get_pay_db(t);
			if (BaseFacade.mSwitch.active(i.switchId), i.getItemId) {
				i.statistics && GameStatistics.statisOnItemBought(i.statistics, 1);
				let a = BaseFacade.mItem.addWrapItemToList(i.getItemId, i.getCount, e);
				return BaseFacade.mGoal.commit(BASE_ACTION_ID.PAY_SUC, 1, t), _G.sendMsg(BASE_MSG.PAY_SUC, t), a
			}
			return null
		}
		isCostEnough(t) {
			let e = db.get_pay_db(t);
			return !!e && ("1003" == e.costItemId || (e.firstCostItemId ? BaseFacade.mItem.enoughItem(e.firstCostItemId, e.firstCostCount) : BaseFacade.mItem.enoughItem(e.costItemId, e.costCount)))
		}
		getPays(t) {
			let e = db.get_pay_db_map(),
				a = [];
			return Tools.forEachMap(e, function(e, i) {
				i.gid == t && BaseFacade.mSwitch.check(i.switchId) && a.push(e)
			}), a.sort(sort_pay_id_by_order), a
		}
		getAllPays(t) {
			let e = db.get_pay_db_map(),
				a = [];
			return Tools.forEachMap(e, function(e, i) {
				i.gid == t && a.push(e)
			}), a
		}
	}
	class BaseFacade {
		static get isLoaded() {
			return this._isLoaded
		}
		static onLoad() {
			this.mGoal = this.createMgr(mGoal), this.mUp = this.createMgr(mUp), this.mItem = this.createMgr(mItem), this.mAutoIncreaseItem = this.createMgr(mAutoIncreaseItem), this.mDrop = this.createMgr(mDrop), this.mSwitch = this.createMgr(mSwitch), this.mQuest = this.createMgr(mQuest), this.mPay = this.createMgr(mPay), this.mUp.setDbs(0, db.get_attr_up_db_map()), this.mUp.setDbs(1, db.get_role_up_db_map()), this.initAll(), this._isLoaded = !0, _G.sendMsg(BASE_MSG.BASE_MGR_LOADED)
		}
		static createMgr(t) {
			let e = new t(new MsgHandler);
			return this._mgrs.push(e), e
		}
		static initAll() {
			for (let t = 0; t < this._mgrs.length; t++) this._mgrs[t].onload();
			for (let t = 0; t < this._mgrs.length; t++) this._mgrs[t].start()
		}
	}
	BaseFacade._isLoaded = !1, BaseFacade._mgrs = [];
	class DebugBanner extends PanelBase {
		constructor() {
			super(), this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.resourceName = "DebugBanner", this.bResetRootNode = !1;
			let t = new Laya.Sprite;
			t.size(_G.canvasWidth, 200), t.pos(0, _G.canvasHeight - 200), t.texture = UiHelper.WHITE_TEXTURE, UiHelper.addClickEvent(t, this.close.bind(this)), this.createFromNode(t)
		}
		buildUi() {
			this.registerMsg({
				[BASE_MSG.ADV_CLOSE_NATIVE_BANNER]: this.close.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
	}
	const DEFAULT_ADV_SHOW_DELTA_TIME = .5,
		KEY_NO_ADS = "KEY_NO_ADS",
		DEBUG_MODE$1 = !1;
	class mgrAdv extends _mgrBase {
		static onload() {
			switch (_G.SDK_VERSION) {
				case SDK_VERSIONS_VALUE.V6:
					SDKBridge.registerCmd("/c/openAdvResult", this.onAdvShowResult_V6.bind(this)), SDKBridge.registerCmd("/c/openNativeAdvResult", this.openNativeAdvResult.bind(this)), SDKBridge.registerCmd("/c/clickNativeAdvResult", this.clickNativeAdvResult_V6.bind(this)), SDKBridge.registerCmd("/c/clickAdvResult", this.clickAdvResult_V6.bind(this)), SDKBridge.registerCmd("/c/advValidCountResult", this.onAdvVoidCount_V6.bind(this));
					break;
				case SDK_VERSIONS_VALUE.V5:
					SDKBridge.registerCmd("/adv/advShowResult", this.onAdvShowResult_V5.bind(this))
			}
			this.advData = FileRecord.getData("KEY_ADV_DATA") || {}, this.registerMsg({
				[BASE_MSG.DAILY_SWITCH_ACTIVE]: this.onMsgDailySwitchActive.bind(this)
			}), DEBUG_MODE$1 && Logger.error("广告debug开启，如果了解请忽略。")
		}
		static saveData() {
			FileRecord.setData("KEY_ADV_DATA", this.advData)
		}
		static onMsgDailySwitchActive() {
			this.resetAllCount()
		}
		static setNativeUi(t, e, a) {
			this.panelNativeAdv = t, this.panelAdvLoading = e, this.panelNativeBanner = a
		}
		static getAdvDb(t) {
			return db.get_adv_db_map()[t]
		}
		static hasAdv(t) {
			return !!this.getAdvDb(t)
		}
		static setNoAds() {
			FileRecord.setData(KEY_NO_ADS, !0)
		}
		static get isNoAds() {
			return !!FileRecord.getData(KEY_NO_ADS)
		}
		static hotfixCop() {
			let t = db.get_adv_db_map(),
				e = {},
				a = {},
				i = {};
			for (let s in t) {
				let n = t[s];
				"" != n.copKey && (e[n.copKey] = !0), "" != n.copCdKey && (a[n.copCdKey] = !0), "" != n.copCountKey && (i[n.copCountKey] = !0)
			}
			for (let t in e) this.COP_RATIOS[t] = db.cop[t];
			let s = {};
			for (let t in a) s[t] = db.cop[t];
			let n = {};
			for (let t in i) n[t] = db.cop[t];
			this.hotfixAdvPointCnf(s, n), this.advCnf.video.deltaTime = DEFAULT_ADV_SHOW_DELTA_TIME, this.advCnf.interstitial.deltaTime = db.cop.ad_inst_cd, this.advCnf.banner.deltaTime = 0
		}
		static hotfixAdvPointCnf(t, e) {
			let a = db.get_adv_db_map(),
				i = {};
			for (let s in a) {
				let n = a[s],
					o = t[n.copCdKey],
					r = 0;
				o && (r = o[n.copCdIndex] || 0);
				let l = e[n.copCountKey],
					c = 0;
				l && (c = l[n.copCountIndex] || 0), i[s] = {
					enable: !0,
					nextTime: 0,
					deltaTime: r,
					maxCount: c
				}
			}
			this.advPointCnf = i
		}
		static getActive(t) {
			if (DEBUG_MODE$1) return !0;
			let e = this.getAdvDb(t);
			return e ? this.checkTypeActive(e.advType) ? this.checkCount(t) ? 0 !== this.getCopRatByKey(e.copKey, e.copIndex, e.defaultRate) || (console.log("广告概率关闭"), !1) : (console.log("广告点无次数"), !1) : (console.log("广告无次数或广告类型CD中"), !1) : (console.log("广告db无效"), !1)
		}
		static checkTypeActive(t) {
			let e = this.advCnf[t];
			return !!e && (e.enable && e.nextTime <= Timer.time)
		}
		static checkCount(t) {
			let e = this.getMaxCount(t);
			return (this.advData[t] || 0) < e
		}
		static getMaxCount(t) {
			let e = this.getAdvDb(t);
			if (!e) return 0;
			if ("" == e.copCountKey) return 1e4;
			let a = this.advPointCnf[t];
			if (!a) return 0;
			let i = a.maxCount;
			return i || 1e4
		}
		static getLeftCount(t) {
			let e = this.advData[t] || 0;
			return this.getMaxCount(t) - e
		}
		static checkCd(t) {
			var e = this.advPointCnf[t];
			return !e || e.nextTime <= Timer.time
		}
		static getCopRatByKey(t, e, a) {
			return this.COP_RATIOS[t] && e >= 0 && e < this.COP_RATIOS[t].length ? this.COP_RATIOS[t][e] || 0 : a
		}
		static checkActive(t, e = !1) {
			if (e && _G.isGuiding) return !1;
			if (DEBUG_MODE$1) return !0;
			if (!this.getActive(t)) return !1;
			let a = this.getAdvDb(t);
			if (!Mathf.randomEnable(this.getCopRatByKey(a.copKey, a.copIndex, a.defaultRate))) return console.log("广告概率无效"), !1;
			if (!this.checkCd(t)) return console.log("广告点CD中"), !1;
			let i = this.advPointCnf[t];
			return i && (i.nextTime = Timer.time + i.deltaTime), !0
		}
		static addCount(t) {
			let e = this.getAdvDb(t);
			e && e.copCountKey && (this.advData[t] ? this.advData[t]++ : this.advData[t] = 1, this.saveData())
		}
		static resetCount(t) {
			this.getAdvDb(t) && (this.advData[t] = 0, this.saveData())
		}
		static resetAllCount() {
			let t = Object.keys(this.advData);
			for (let e = 0; e < t.length; e++) this.resetCount(t[e])
		}
		static updateCdByType(t) {
			let e = this.getAdvDb(t);
			if (!e) return;
			let a = this.advCnf[e.advType];
			a && (a.nextTime = Timer.time + a.deltaTime)
		}
		static dispatchAdv(t, e = null, a = !1, i = !1) {
			if (!t) return !1;
			if (!this.hasAdv(t)) return !1;
			if (console.log("调用广告", t), !a && !this.checkActive(t)) return !1;
			i && (this.panelAdvLoading ? mgrPanel.openPanel(this.panelAdvLoading, {
				advName: t,
				params: e
			}) : Logger.error("mgrAdv.dispatchAdv 找不到panelAdvLoading."));
			let s = this.getAdvDb(t);
			s.pauseSound && mgrSound.musicEnabled && (this.bSoundPaused = !0, mgrSound.pauseSound());
			let n = this.advCnf[s.advType];
			switch (n && (n.nextTime = Timer.time + n.deltaTime), console.log("触发广告", t), _G.SDK_VERSION) {
				case SDK_VERSIONS_VALUE.V6:
					this.dispatchToSdk_V6(t, e);
					break;
				case SDK_VERSIONS_VALUE.V5:
					this.dispatchToSdk_V5(t, e)
			}
			return !0
		}
		static closeAdv(t) {
			switch (_G.SDK_VERSION) {
				case SDK_VERSIONS_VALUE.V6:
					this.closeAdv_V6(t);
					break;
				case SDK_VERSIONS_VALUE.V5:
					Logger.error("关闭广告未接入..")
			}
		}
		static closeNativeAdv(t, e) {
			if (!t) return;
			let a = this.getAdvDb(t);
			if (!a) return;
			let i = e ? 1 : 0,
				s = JSON.stringify({
					advName: t
				});
			SDKBridge.sendToSdk("/c/closeNativeAdv", {
				advId: a.advId,
				closeType: i,
				userData: s
			})
		}
		static statisVideoShow(t) {
			let e = this.getAdvDb(t);
			e && e.tag && GameStatistics.statisVideoPointEvent(e.tag, 1)
		}
		static statisVideoClick(t) {
			let e = this.getAdvDb(t);
			e && e.tag && GameStatistics.statisVideoPointEvent(e.tag, 2)
		}
		static dispatchToSdk_V5(t, e) {
			let a = this.getAdvDb(t),
				i = JSON.stringify({
					advName: t,
					params: e
				}),
				s = a.advId;
			this.isNoAds ? Timer.callLater(.1, () => {
				this.onAdvShowResult_V5({
					code: 1,
					userData: i,
					message: "no ads."
				})
			}) : (SDKBridge.sendToSdk("/adv/openAdv", {
				advId: s,
				type: a.advType,
				userData: i
			}), (_G.H5_TEST || DEBUG_MODE$1) && Timer.callLater(1, () => {
				this.onAdvShowResult_V5({
					code: 1,
					userData: i,
					message: "test adv v5 msg suc"
				}), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `[debug]:弹出[${a.desc}]成功`)
			}))
		}
		static onAdvShowResult_V5(t) {
			let e = t.code.toString(),
				a = t.message,
				i = JSON.parse(t.userData);
			this.getAdvDb(i.advName);
			switch (e) {
				case "0":
					this.onAdvFail(i, a);
					break;
				case "1":
					this.onAdvSuc(i);
					break;
				case "2":
				case "3":
				case "4":
					break;
				case "5":
					this.onAdvClick(i);
					break;
				case "6":
				case "7":
					break;
				default:
					Logger.error(`adv unkown code:${e}`)
			}
		}
		static dispatchToSdk_V6(t, e) {
			let a = this.getAdvDb(t),
				i = JSON.stringify({
					advName: t,
					params: e
				}),
				s = a.advId;
			switch (a.advType) {
				case "video":
					_G.sendMsg(BASE_MSG.SDK_VIDEO_VISIBLE, !0), this.video_mode.bVideo || (s = "1");
					break;
				case "banner":
					this._openBannerNativeAdv({
						advName: t,
						params: e
					})
			}
			this.isNoAds ? Timer.callLater(.1, () => {
				this.onAdvShowResult_V6({
					code: 1,
					userData: i,
					msg: "no ads."
				})
			}) : (SDKBridge.sendToSdk("/c/openAdv", {
				advId: s,
				userData: i,
				tag: a.tag
			}), (_G.H5_TEST || DEBUG_MODE$1) && Timer.callLater(1, () => {
				this.onAdvShowResult_V6({
					code: 1,
					userData: i,
					msg: "test adv v6 msg suc"
				}), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `[debug]:弹出[${a.desc}]成功`);
				let t = ["http://imgwsdl.vivo.com.cn/appstore/developer/icon/20180807/20180807121104553016.png", "http://imgwsdl.vivo.com.cn/appstore/developer/icon/20180321/201803211747514635890.jpg"],
					e = ["这里是广告描述", "这里是广告描述这里是广告描述这里是广告描述这里是广告描述", "这里是广告描述这里是广告描述这里是广告描述这里是广告描述这里是广告描述这里是广告描述这里是广告描述这里是广告描述"],
					s = ["广告标题", "这里是广告标题"];
				this.openNativeAdvResult({
					code: 1,
					userData: i,
					msg: "test adv v6 native msg suc",
					nativeData: {
						url: t[Mathf.random(t.length) - 1],
						desc: e[Mathf.random(e.length) - 1],
						title: s[Mathf.random(s.length) - 1],
						targetTitle: "查看详情"
					}
				})
			}))
		}
		static closeAdv_V6(t) {
			if (!t) return;
			let e = this.getAdvDb(t);
			if (!e) return;
			Logger.log("mgrAdv.closeAdv", t), "banner" == e.advType && this._closeBannerNativeAdv();
			let a = JSON.stringify({
				advName: t
			});
			SDKBridge.sendToSdk("/c/closeAdv", {
				advId: e.advId,
				userData: a
			})
		}
		static _openBannerNativeAdv(t) {
			_G.H5_TEST && mgrPanel.openPanel(DebugBanner), this.panelNativeBanner ? mgrPanel.openPanelWithSingleton(this.panelNativeBanner, {
				userData: t
			}) : Logger.warn("mgrAdv._openBannerNativeAdv 找不到panelNativeBanner.")
		}
		static _closeBannerNativeAdv() {
			_G.sendMsg(BASE_MSG.ADV_CLOSE_NATIVE_BANNER)
		}
		static onAdvShowResult_V6(t) {
			let e = t.code.toString(),
				a = JSON.parse(t.userData || "{}");
			"1" == e ? this.onAdvSuc(a) : "0" == e ? this.onAdvFail(a, t.msg) : Logger.log("广告未知code:", e)
		}
		static onAdvSuc(t) {
			let e = this.getAdvDb(t.advName);
			e.pauseSound && this.bSoundPaused && (this.bSoundPaused = !1, mgrSound.resumeSound()), this.addCount(e.advName), "video" == e.advType && (_G.sendMsg(BASE_MSG.SDK_VIDEO_VISIBLE, !1), BaseFacade.mGoal.commit(BASE_ACTION_ID.VIDEO_SHOW_SUC, 1, e.advName)), ("video" != e.advType || this.video_mode.bWatch) && _G.sendMsg(BASE_MSG.ADV_SHOW_SUC, t), Logger.log("广告弹出成功:", t.advName)
		}
		static onAdvFail(t, e) {
			let a = this.getAdvDb(t.advName);
			a.pauseSound && this.bSoundPaused && (this.bSoundPaused = !1, mgrSound.resumeSound()), "video" == a.advType && (_G.sendMsg(BASE_MSG.SDK_VIDEO_VISIBLE, !1), 1 == db.cop.b_ad_video_replay_prompt && mgrAlert.alertDialog("需要观看完整视频才能获得奖励", "提示", () => {
				mgrAdv.dispatchAdv(t.advName, t, !0, !0)
			}, () => {}, "确定", "取消", "UI_CLOSE_DIALOG")), _G.sendMsg(BASE_MSG.ADV_SHOW_FAIL, t), "video" == a.advType && e && _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "no ads"), Logger.log("广告弹出失败:", t.advName)
		}
		static openNativeAdvResult(t) {
			let e = t.code.toString();
			if (Logger.log("mgrAdv:openNativeAdvResult code:", e), "1" == e) {
				let e = JSON.parse(t.userData || "{}"),
					a = this.getAdvDb(e.advName);
				a ? "interstitial" == a.advType ? this._openInstNativeAdv(t.nativeData, e) : _G.sendMsg(BASE_MSG.NATIVE_ADV_LOADED, {
					nativeData: t.nativeData,
					userData: e
				}) : Logger.error("mgrAdv.openNativeAdvResult userData数据异常")
			} else Logger.log("打开原生广告失败:", t.msg)
		}
		static _openInstNativeAdv(t, e) {
			this.panelNativeAdv ? mgrPanel.openPanelWithSingleton(this.panelNativeAdv, {
				nativeData: t,
				userData: e
			}) : Logger.warn("mgrAdv._openInstNativeAdv 找不到panelNativeAdv.")
		}
		static clickNativeAdvResult_V6(t) {
			Logger.warn("这个消息好像没有作用")
		}
		static onNativeAdvClick(t, e) {
			let a = this.getAdvDb(t);
			if (!a) return;
			e && (e.bClick = !0);
			let i = JSON.stringify(e);
			SDKBridge.sendToSdk("/c/clickNativeAdv", {
				advId: a.advId,
				userData: i,
				tag: a.tag
			}), (_G.H5_TEST || DEBUG_MODE$1) && Timer.callLater(1, () => {
				this.clickAdvResult_V6({
					code: 1,
					userData: i,
					msg: "test native msg click"
				})
			})
		}
		static clickAdvResult_V6(t) {
			let e = t.code;
			if (Logger.log("mgrAdv:clickAdvResult code:", e), "1" == e) {
				let e = JSON.parse(t.userData || "{}");
				this.onAdvClick(e)
			}
		}
		static onAdvClick(t) {
			"video" != this.getAdvDb(t.advName).advType || this.video_mode.bWatch || _G.sendMsg(BASE_MSG.ADV_SHOW_SUC, t), _G.sendMsg(BASE_MSG.ADV_CLICK_SUC, t)
		}
		static onAdvVoidCount_V6(t) {
			t && (this.advCnf.video.enable = !!t.video, this.advCnf.interstitial.enable = !!t.interstitial, this.advCnf.banner.enable = !!t.banner, this.advCnf.embedded.enable = !!t.native), _G.sendMsg(BASE_MSG.SDK_COP_CHANGED)
		}
	}
	mgrAdv.COP_RATIOS = {}, mgrAdv.video_mode = {
		bVideo: !0,
		bWatch: !0
	}, mgrAdv.advCnf = {
		video: {
			enable: !0,
			deltaTime: DEFAULT_ADV_SHOW_DELTA_TIME,
			nextTime: 0,
			maxCount: 0
		},
		interstitial: {
			enable: !0,
			deltaTime: DEFAULT_ADV_SHOW_DELTA_TIME,
			nextTime: 0,
			maxCount: 0
		},
		banner: {
			enable: !0,
			deltaTime: DEFAULT_ADV_SHOW_DELTA_TIME,
			nextTime: 0,
			maxCount: 0
		},
		embedded: {
			enable: !0,
			deltaTime: DEFAULT_ADV_SHOW_DELTA_TIME,
			nextTime: 0,
			maxCount: 0
		},
		url: {
			enable: !0,
			deltaTime: DEFAULT_ADV_SHOW_DELTA_TIME,
			nextTime: 0,
			maxCount: 0
		}
	}, mgrAdv.advPointCnf = {}, mgrAdv.bSoundPaused = !1;
	class mgrWordFilter extends _mgrBase {
		static onload() {
			this._loadWords()
		}
		static _loadWords() {
			if (!this.badwords)
				if (db.get_badword_db_arr) {
					let t = db.get_badword_db_arr();
					for (let e = 0; e < t.length; e++) t[e] = t[e].word;
					this.badwords = t
				} else this.badwords = []
		}
		static checkStr(t) {
			if (!t) return !0;
			let e = this.badwords;
			for (let a = 0; a < e.length; a++)
				if (t.indexOf(e[a]) >= 0) return !1;
			return !0
		}
		static filterStr(t, e) {
			e = e || this.REP_STR;
			let a = this.badwords;
			for (let i = 0; i < a.length; i++) t = t.replace(a[i], e);
			return t
		}
		static hasSymbol(t) {
			return !!t.match(this.REP_NO_SYMBOL)
		}
		static filterSymbol(t) {
			return t ? t = t.replace(this.REP_NO_SYMBOL, "") : ""
		}
	}
	mgrWordFilter.REP_STR = "**", mgrWordFilter.REP_NO_SYMBOL = /[\!\@\#\$\%\^\&\*\(\)\`\~\<\>\,\.\/\?\;\:\'\"\[\]\{\}\\\|\-\=\_\+\n\r\t\b ]/g;
	class mgrInside extends _mgrBase {
		static onload() {}
		static getGameAward(t, e) {
			return mgrOutside.getGameAward(t, e)
		}
		static checkCztgPlayable(t) {
			mgrOutside.checkGamePlayable(db.game_cnf.cztg_cost[1], "cztg", mgrI18n.getText("panelInside.2"), t)
		}
		static get leftCztgTime() {
			return mgrOutside.timeData.cztg - Timer.time
		}
		static loadCaiZhuangTuiGuang(t) {
			let e = new ResLoader;
			e.add(db.get_model_db(db.MODEL_DB_ID.xinfeng).resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.lihe).resPath, RES_TYPE.PREFAB3D), e.add(db.get_animation_db(MODEL_ANIM.LIHE_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.LIHE_CLOSE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.P_LIHE_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.P_LIHE_CLOSE).path, RES_TYPE.ANIMATIONCLIP), mgrAlert.openWait(e, t)
		}
		static startCztg() {
			this.curOrders = null, this.caiZhuangScore = 0;
			let t = mgrOutside.getGameLevel(db.get_caizhuang_db_arr()),
				e = db.get_caizhuang_db(t);
			if (this.curCztgDb = e, !e) return;
			let a = [];
			for (let t = 0; t < e.partsCount.length; t++) {
				let n = e.partsCount[t];
				for (let o = 0; o < n; o++) {
					let n = t + 1,
						o = [];
					for (let t = 0; t < n; t++) {
						var i = Mathf.random(15) - 1,
							s = Mathf.random(db.get_tag_type_db_arr().length);
						o.push({
							partType: i,
							tag: s
						})
					}
					a.push({
						czDb: e,
						parts: o,
						roleId: this.getRandomRole()
					})
				}
			}
			if (_G.isGuiding) {
				let t = BaseFacade.mItem.getItemByType(2, 1, 0)[0],
					e = db.get_item_db(t);
				a[0].parts[0].partType = 0, a[0].parts[0].tag = DbExt.getTag1(e), t = BaseFacade.mItem.getItemByType(2, 1, 5)[0], e = db.get_item_db(t), a[1].parts[0].partType = 5, a[1].parts[0].tag = DbExt.getTag1(e)
			}
			this.curOrders = a, BaseFacade.mGoal.commit(ACTION_ID.PLAY_GAME, 1, "cztg"), mgrSdk.tryStartRecord(), GameStatistics.statisOnStageStart(7510)
		}
		static calcStar(t, e) {
			let a = Math.abs((t - e) / t);
			return Mathf.clamp(5 - (10 * a | 0), 0, 5)
		}
		static finishOrder(t, e) {
			e = Mathf.clamp(e, 0, db.game_cnf.order_star_rate.length - 1);
			let a = t.czDb;
			this.caiZhuangScore += a.partsScore[t.parts.length - 1] * db.game_cnf.order_star_rate[e] | 0
		}
		static finishCztg(t) {
			if (GameStatistics.statisCommonEvent(3065), GameStatistics.statisOnStageEnd(7510), BaseFacade.mItem.addItem("1005", 5, null), BaseFacade.mItem.subItem("1020", db.game_cnf.cztg_cost[1], null), mgrOutside.timeData.cztg = Timer.time + mgrOutside.playDeltaTime, t) {
				let t = mgrOutside.getGameLevel(db.get_caizhuang_db_arr()),
					e = db.get_caizhuang_db(t);
				return this.getGameAward(e, 100)
			}
			return this.getGameAward(this.curCztgDb, this.caiZhuangScore)
		}
		static getRandomRole() {
			let t, e = Object.keys(db.get_role_db_map());
			for (;
				"main" == (t = e[Mathf.random(e.length) - 1]););
			return t
		}
		static checkPaiShouPlayable(t) {
			mgrOutside.checkGamePlayable(db.game_cnf.pai_shou_cost[1], "paiShou", mgrI18n.getText("panelInside.1"), t)
		}
		static get leftPaiShouTime() {
			return mgrOutside.timeData.paiShou - Timer.time
		}
		static loadPaiShou(t) {
			let e = new ResLoader;
			e.add(db.get_animation_db(MODEL_ANIM.PAISHOU_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_PAISHOU_IDLE).path, RES_TYPE.ANIMATIONCLIP), mgrAlert.openWait(e, t)
		}
		static startPaiShou() {
			this.paiShouScore = 0;
			let t = mgrOutside.getGameLevel(db.get_paishou_db_arr());
			this.curPaiShouDb = db.get_paishou_db(t), BaseFacade.mGoal.commit(ACTION_ID.PLAY_GAME, 1, "paishou"), mgrSdk.tryStartRecord(), GameStatistics.statisOnStageStart(7509)
		}
		static addPaiShouScore(t) {
			return t <= .25 || t >= .75 ? (this.paiShouScore += .5 * this.curPaiShouDb.score | 0, 1) : (this.paiShouScore += this.curPaiShouDb.score, 2)
		}
		static finishPaiShou(t) {
			if (GameStatistics.statisCommonEvent(3034), GameStatistics.statisOnStageEnd(7509), BaseFacade.mItem.addItem("1005", 5, null), BaseFacade.mItem.subItem("1020", db.game_cnf.pai_shou_cost[1], null), mgrOutside.timeData.paiShou = Timer.time + mgrOutside.playDeltaTime, t) {
				let t = mgrOutside.getGameLevel(db.get_paishou_db_arr()),
					e = db.get_paishou_db(t);
				return this.getGameAward(e, 100)
			}
			return this.getGameAward(this.curPaiShouDb, this.paiShouScore)
		}
	}
	class mgrRankHuDong extends _mgrBase {
		static onload() {
			BaseFacade.mSwitch.dailyActive && (FileRecord.setData("gift_count", db.game_cnf.gift_count), FileRecord.setData("gift_time", Timer.time + db.game_cnf.gift_delta_time))
		}
		static get giftCount() {
			return FileRecord.getData("gift_count") || db.game_cnf.gift_count
		}
		static get nextGiftTime() {
			return FileRecord.getData("gift_time")
		}
		static giftFinish() {
			FileRecord.setData("gift_count", this.giftCount - 1), FileRecord.setData("gift_time", Timer.time + db.game_cnf.gift_delta_time), _G.sendMsg("EGG_FINISH")
		}
	}
	const DAILY_QUEST_AWARD = "DAILY_QUEST_AWARD";
	class mgrDailyQuest extends _mgrBase {
		static onload() {
			let t = mQuest.getAllQuest(8, 1),
				e = mQuest.getAllQuest(8, 2),
				a = BaseFacade.mQuest;
			if (BaseFacade.mSwitch.dailyActive) {
				FileRecord.setData(DAILY_QUEST_AWARD, !1);
				let s = a.getQuestByType(8);
				for (var i = 0; i < s.length; i++) a.cancel(s[i]);
				for (let i = 0; i < db.game_cnf.daily_quest_count; i++) {
					let s = i < 4 ? t : e,
						n = s.splice(Mathf.random(s.length) - 1, 1);
					n && 1 == n.length ? a.accept(n[0]) : console.error("日常任务不足!!")
				}
			}
		}
		static start() {}
		static getCurQuests() {
			return BaseFacade.mQuest.getQuestByType(8)
		}
		static hasCommitQuest() {
			let t = BaseFacade.mQuest.getQuestByType(8);
			for (var e = 0; e < t.length; e++)
				if (BaseFacade.mQuest.isCommitable(t[e])) return !0;
			return !1
		}
		static getCompleteCount() {
			let t = 0,
				e = BaseFacade.mQuest.getQuestByType(8);
			for (var a = 0; a < e.length; a++) BaseFacade.mQuest.query(e[a]).state >= QUEST_STATE.COMMITABLE && t++;
			return t
		}
		static get isDailyAward() {
			return FileRecord.getData(DAILY_QUEST_AWARD) || !1
		}
		static getDailyAward(t) {
			if (this.isDailyAward) return !1;
			FileRecord.setData(DAILY_QUEST_AWARD, !0);
			let e = {
				itemId: "1000",
				count: db.game_cnf.daily_quest_dianmond_count
			};
			t ? (e.count *= 3, GameStatistics.statisCommonEvent(7008, 1)) : GameStatistics.statisCommonEvent(7008, 0), mgrAlert.addAndAlert(e, t ? 37 : 36);
			let a = mgrDailyQuest.getCurQuests()[0],
				i = {
					state: QUEST_STATE.FINISHED,
					questDb: db.get_quest_db(a)
				};
			return _G.sendMsg(BASE_MSG.QUEST_STATE_CHANGE, i), !0
		}
	}
	class mgrSign extends _mgrBase {
		static onload() {
			this.updateDay(), this.registerMsg({
				[BASE_MSG.DAILY_SWITCH_ACTIVE]: this.onDailySwitchActive.bind(this)
			})
		}
		static saveData() {
			FileRecord.setData("KEY_SIGN_DATA", this.signData)
		}
		static onDailySwitchActive() {
			this.updateDay()
		}
		static updateDay() {
			this.signData = FileRecord.getData("KEY_SIGN_DATA"), this.signData ? BaseFacade.mSwitch.dailyActive && this.signData.index > 0 && (this.signData.day++, this.signData.index = 0, this.signData.nextTime = 0) : (this.signData = {
				day: 0,
				index: 0,
				nextTime: 0
			}, this.saveData())
		}
		static dayToIndex() {
			let t = this.signData.day,
				e = db.get_sign_db_arr().length - 3;
			return t >= e ? (t - e) % 3 + e : t
		}
		static getDailyItems() {
			return db.get_sign_db(this.dayToIndex()).items
		}
		static get isTodayFinish() {
			return this.signData.index > 4
		}
		static canGetAward() {
			return !(this.signData.index > 4 || this.signData.nextTime > Timer.time)
		}
		static getAward(t) {
			let e = 7302 + this.signData.index;
			if (t) {
				let t = [];
				for (let e = this.signData.index; e < 5; e++) {
					let a = this.getDailyItems()[e];
					a && (t.push({
						itemId: a[0],
						count: a[1]
					}), this.signData.index++)
				}
				t.length && (GameStatistics.statisCommonEvent(e, 1), this.saveData(), mgrAlert.addAndAlertItems(t, 34), _G.sendMsg("SIGN_UPDATE"))
			} else {
				let t = this.getDailyItems()[this.signData.index];
				if (t) {
					GameStatistics.statisCommonEvent(e, 0);
					let a = db.game_cnf.sign_award_delta_time[this.signData.index];
					a && (this.signData.nextTime = Timer.time + a), this.signData.index++, this.saveData(), mgrAlert.addAndAlert({
						itemId: t[0],
						count: t[1]
					}, 33), _G.sendMsg("SIGN_UPDATE")
				}
			}
		}
	}
	class mgrCat extends _mgrBase {
		static onload() {
			this.lastCoinTime = FileRecord.getData("KEY_CAT_COIN_TIME"), this.lastCoinTime || (this.lastCoinTime = Timer.time, this.saveData())
		}
		static start() {
			this.updateCoin()
		}
		static saveData() {
			FileRecord.setData("KEY_CAT_COIN_TIME", this.lastCoinTime)
		}
		static updateCoin() {
			let t = Timer.time - this.lastCoinTime;
			if (t < 5) return;
			let e = BaseFacade.mUp.getUpDb("cat"),
				a = e.coinPerMin;
			this.curCoinCount = Math.min(a * (t / 60) | 0, e.catCoinMax)
		}
		static addExp() {
			BaseFacade.mItem.addItem("cat_exp", 1, null)
		}
		static getPays() {
			let t = this.catLevel,
				e = BaseFacade.mUp.getAllUp("cat"),
				a = 0;
			for (let i = 1; i < t; i++) a += e[i].reqCnt1;
			let i = BaseFacade.mPay.getAllPays(3);
			return i.sort(sort_pay_id_by_order), (i = i.slice(a, a + e[t].reqCnt1)).sort(sort_pay_id_by_switch), i
		}
		static get catLevel() {
			return BaseFacade.mUp.getLevel("cat")
		}
		static getCoinPercent() {
			this.updateCoin();
			let t = BaseFacade.mUp.getUpDb("cat");
			return this.curCoinCount / t.catCoinMax
		}
		static get isMax() {
			return BaseFacade.mUp.isMax("cat")
		}
		static get limitLevel() {
			let t = BaseFacade.mUp.getUpDb("cat");
			return t.roleLvLimit > mgrGame.getRoleLevel() ? t.roleLvLimit : 0
		}
		static getProgressStr() {
			let t = BaseFacade.mUp.getUpDb("cat");
			return `${BaseFacade.mItem.getItemCount("cat_exp")}/${t.reqCnt1}`
		}
		static getCoin() {
			BaseFacade.mItem.addItem("1001", this.curCoinCount, 20), this.lastCoinTime = Timer.time, this.curCoinCount = 0, this.saveData()
		}
		static lvup() {
			BaseFacade.mUp.lvupAttr("cat")
		}
	}
	mgrCat.curCoinCount = 0, mgrCat.lastCoinTime = 0;
	class mgrOffline extends _mgrBase {
		static onload() {
			this.offlineData = FileRecord.getData("KEY_OFFLINE_DATA"), this.offlineData || this.resetOfflineTime()
		}
		static saveData() {
			FileRecord.setData("KEY_OFFLINE_DATA", this.offlineData)
		}
		static resetOfflineTime() {
			this.offlineData ? this.offlineData.lastTime = Timer.time : this.offlineData = {
				lastTime: Timer.time
			}, this.saveData()
		}
		static get offlineTime() {
			return Math.min(this.MAX_OFFLINE_TIME, Timer.time - this.offlineData.lastTime)
		}
		static get offlinePerSecond() {
			return mgrGame.curRoleUpDb ? mgrGame.curRoleUpDb.offlineProfit : 0
		}
		static get offlineProfit() {
			let t = this.offlineTime;
			if (t > 1800) {
				return Math.floor(t * this.offlinePerSecond)
			}
			return 0
		}
		static tryGetOfflineProfit(t = !1) {
			let e = this.offlineData;
			if (this.offlineProfit <= 0) return mgrAlert.alertText(mgrI18n.getText("mgrOffline.1")), null; {
				let a = this.offlineProfit * (t ? 3 : 1);
				return BaseFacade.mItem.addItem("1001", a, t ? 23 : 22), e.lastTime = Timer.time, GameStatistics.statisCommonEvent(7061, t ? 1 : 0), this.saveData(), {
					itemId: "1001",
					count: a
				}
			}
		}
	}
	mgrOffline.firstPlayGame = !1, mgrOffline.MAX_OFFLINE_TIME = 9e3;
	class mgrRoleTest extends _mgrBase {
		static onload() {
			this.roleTestMap = db.get_role_test_map(), this.initTestedRoleData()
		}
		static initTestedRoleData() {
			this.roleData = FileRecord.getData("TESTED_ROLE_DATA") || {}
		}
		static checkIsTested(t) {
			return !!this.roleData[t]
		}
		static markRoleTested(t) {
			this.roleData[t] = !0, FileRecord.setData("TESTED_ROLE_DATA", this.roleData)
		}
		static addRecordTestCount(t) {
			let e = FileRecord.getData("TEST_COUNT") || {};
			e[t] ? e[t]++ : e[t] = 1, FileRecord.setData("TEST_COUNT", e)
		}
		static getRecordTestCount(t) {
			let e = FileRecord.getData("TEST_COUNT") || {};
			return console.log("查看次数", e[t]), e[t] || 0
		}
		static addRecordAdTest(t) {
			let e = FileRecord.getData("TEST_AD") || {};
			e[t] = !0, FileRecord.setData("TEST_AD", e)
		}
		static getRecordTestAd(t) {
			let e = FileRecord.getData("TEST_AD") || {};
			return console.log("查看是否解锁缘分测试密码", e[t]), e[t] || !1
		}
		static finishTest(t) {
			if (6 != t.length) return void console.warn("颜色数据出错，需要6个颜色数据", t);
			let e = {};
			for (let a = 0; a < t.length; a++) {
				let i = t[a];
				e[i] ? e[i]++ : e[i] = 1
			}
			let a = 0;
			for (let t in e) {
				let i = e[t];
				i >= a && (a = i)
			}
			let i = [];
			for (let t in e) {
				e[t] == a && i.push(parseInt(t))
			}
			let s = [];
			for (let t in this.roleTestMap) {
				let e = this.roleTestMap[t];
				e && e.colorMaxRatio.indexOf(a) >= 0 && s.push(e)
			}
			let n = null;
			for (let t = 0; t < s.length; t++) {
				let e = s[t];
				this.isArrDataEqual(e.maxColorIds, i) && (n = e)
			}
			return n
		}
		static isArrDataEqual(t, e) {
			if (t.length != e.length) return !1;
			t = t.sort(), e = e.sort();
			let a = !0;
			for (let i = 0; i < t.length; i++)
				if (t[i] != e[i]) {
					a = !1;
					break
				} return a
		}
	}
	mgrRoleTest.roleTestMap = {};
	class mgrDebug extends _mgrBase {
		static onload() {
			CrashReporter.getInstance().setDataHook(function() {
				return {
					uid: mgrSdk.uuid,
					channelName: mgrSdk.h5_channel,
					gameVersion: _G.GAME_VERSION
				}
			})
		}
	}
	class mgrManicure extends _mgrBase {
		static onload() {
			this.loadManicureLayout(() => {})
		}
		static loadManicureLayout(t) {
			let e = db.get_manicure_part_db_map();
			for (let t in e) {
				let a = e[t];
				a.typeData = db.get_manicure_part_type_db(a.type)
			}
			let a = [],
				i = db.get_manicure_part_type_db_map(),
				s = [];
			for (let t in i) s.push(i[t]);
			s = Tools.sortArrayByField(s, "-removeOrder");
			for (let t = 0; t < s.length; t++) {
				let e = s[t];
				0 != e.removeOrder && a.push(e.id)
			}
			this.AVATAR_REMOVABLE_PART_TYPES = a;
			for (let t in i) {
				let e = i[t],
					a = {};
				for (let t = 0; t < e.banSlotIndexes.length; t++) {
					a[e.banSlotIndexes[t]] = !0
				}
				e.banSlotIndexes = a
			}
			let n = 0;
			n++, mgrRes.loadRes("res/cfg/mpart/container_layout.json", Laya.Loader.JSON, e => {
				let a = e,
					i = db.get_manicure_part_container_db_map();
				for (let t in i) {
					let e = i[t],
						s = e.id,
						n = a[s];
					n || console.log("mgrCfg.loadManicureLayout container layouts not found! containerId = %d", s), e.layouts = n
				}--n <= 0 && t(!!e)
			}), n++, mgrRes.loadRes("res/cfg/mpart/part_layout.json", Laya.Loader.JSON, a => {
				let i = a;
				for (let t in e) {
					let a = e[t],
						s = i[a.id] || {};
					for (let t = 1; t <= a.typeData.slotCount; t++)
						if (!s[t]) {
							let e = {
								apx: 0,
								apy: 0,
								parentApx: 0,
								parentApy: 0,
								rotate: 0,
								scaleX: 1,
								scaleY: 1,
								x: 0,
								y: 0,
								order: 0
							};
							for (let t in a.typeData.defaultLayout) {
								let i = a.typeData.defaultLayout[t];
								e[t] = i
							}
							s[t] = e
						} a.layouts = s
				}
				this.RING_SCHEMATIC_LAYOUTS = i[this.RING_SCHEMATIC_PART_ID] || {}, --n <= 0 && t(!!a)
			}), n++, mgrRes.loadRes("res/cfg/mpart/part_grid.json", Laya.Loader.JSON, a => {
				for (let t in e) {
					let i = e[t],
						s = a[i.id] || {},
						n = 0;
					for (let t in s) s[t] && n++;
					let o = {};
					for (let t = 1; t <= Math.max(i.typeData.slotCount, n); t++) {
						s[t]
					}
					i.grids = o
				}--n <= 0 && t(!!a)
			}), n++, mgrRes.loadRes("res/cfg/mpart/part_special_resources.json", Laya.Loader.JSON, e => {
				for (let t in e) {
					let a = e[t],
						i = parseInt(t),
						s = db.get_manicure_part_db(i);
					s && (s.resources = [
						[a[1][1], a[1][2]]
					])
				}--n <= 0 && t(!!e)
			})
		}
		static createResNode(t, e) {
			let a = new Laya.Image;
			return 1 == t && (a.skin = e, a.anchorX = .5, a.anchorY = .5, a.pos(0, 0)), a
		}
		static removeResNode(t) {
			t.destroy()
		}
		static createPartCursor(t) {
			let e = db.get_manicure_part_db(t);
			if (!e) return void console.warn("mgrManicure.createPartCursor partData not found! partId = %d", t);
			let a = new Laya.Box,
				i = [];
			for (let t in e.resources) {
				let s = e.resources[t],
					[n, o] = s,
					r = this.createResNode(n, o);
				a.addChild(r), i.push(r)
			}
			let s = [],
				n = i[0];
			n && e.effectResources;
			for (let t in e.effectResources) {
				let a = e.effectResources[t],
					i = mgrManicure.createResNode(a.resType, a.id);
				n.addChild(i), n.zOrder = a.order, i.pos(a.pos.x, a.pos.y), i.scale(a.scaleX, a.scaleY), i.rotation = a.rotate, s.push(i)
			}
			return a
		}
	}
	mgrManicure.RING_SCHEMATIC_PART_ID = 10000001, mgrManicure.MANICURE_AVATAR_GRID_SIZE = 10;
	class mgrCp extends _mgrBase {
		static onload() {
			this.npcData = FileRecord.getData("npc_data") || {
				npc: {},
				cp: {},
				testCount: 0
			}
		}
		static saveData() {
			FileRecord.setData("npc_data", this.npcData)
		}
		static unlockNpc(t) {
			this.npcData.npc[t] = !0, this.saveData()
		}
		static unlockCp(t) {
			this.npcData.cp[t] = !0, this.saveData()
		}
		static isNpcLock(t) {
			return !this.npcData.npc[t]
		}
		static isCpLock(t) {
			return !this.npcData.cp[t]
		}
		static getTestCount() {
			return this.npcData.testCount || 0
		}
		static addTestCount() {
			this.npcData.testCount++, this.npcData.testCount <= 3 && GameStatistics.statisCommonEvent(2592, this.npcData.testCount - 1), _G.sendMsg("MANICURE_HEART_CHANGE", {
				bAdd: !0
			}), this.saveData()
		}
		static resetTestCount() {
			this.npcData.testCount = 0, _G.sendMsg("MANICURE_HEART_CHANGE"), this.saveData()
		}
	}
	class mgrShoe extends _mgrBase {
		static onload() {
			this.shoeData = FileRecord.getData("shoe_data") || {
				pieces: []
			}
		}
		static saveData() {
			FileRecord.setData("shoe_data", this.shoeData)
		}
		static randomShoeSuits() {
			let t = Object.keys(db.get_shoe_suit_db_map());
			Mathf.shuffle(t);
			let e = t.slice(0, 4),
				a = t.slice(0, 4),
				i = t.slice(0, 4),
				s = t.slice(0, 4);
			return Mathf.shuffle(e), Mathf.shuffle(a), Mathf.shuffle(i), Mathf.shuffle(s), {
				1: e,
				2: a,
				3: i,
				0: s
			}
		}
		static openWaitRes(t, e) {
			let a = [];
			for (let e = 0; e < t.length; e++) {
				let i = db.get_shoe_part_db(t[e]);
				a = a.concat(i.viewList)
			}
			let i = new ResLoader("mgrShoe");
			for (let t = 0; t < a.length; t++) {
				let e = a[t];
				e && (e.endsWith(".png") ? i.addImage(e) : i.addBuffer(db.get_spine_db(e).skeletonData))
			}
			mgrAlert.openWait(i, e)
		}
		static randomAddPiece() {
			let t = Mathf.random(this.totalPieceCount);
			for (let a = 0; a < this.totalPieceCount; a++) {
				var e = (a + t) % this.totalPieceCount;
				if (!this.shoeData.pieces[e]) {
					this.shoeData.pieces[e] = !0, this.saveData();
					let t = 0;
					for (let e = 0; e < this.shoeData.pieces.length; e++) this.shoeData.pieces[e] && t++;
					return GameStatistics.statisCommonEvent(2616 + t), t >= this.totalPieceCount && !mgrGame.isContractUnlock(SHOE_UNLOCK_CONTRACT_IDX) && mgrGame.contractUnlock(SHOE_UNLOCK_CONTRACT_IDX), _G.sendMsg("UNLOCK_SHOE_PIECES"), e
				}
			}
			return -1
		}
		static checkPieceUnlock(t) {
			if (null != t) return !!this.shoeData.pieces[t];
			for (let t = 0; t < this.totalPieceCount; t++)
				if (!this.shoeData.pieces[t]) return !1;
			return !0
		}
		static debug_resetPieces() {
			this.shoeData.pieces = []
		}
	}
	mgrShoe.totalPieceCount = 4;
	class mgrLoader {
		static get isLoading() {
			return 1 == this.state
		}
		static get isComplete() {
			return 2 == this.state
		}
		static onload(t) {
			0 == this.state && (this.state = 1, this.loadAllMgr(t))
		}
		static loadAllMgr(t) {
			let e = [mgrPanel, mgrWordFilter, mgrAdv, mgrAlert, mgrSound, mgrDebug];
			this.loadMgrs(e), BaseFacade.onLoad();
			let a = [mgrRank, mgrGuide, mgrMaterial, mgrLevel, mgrSign, mgrDailyQuest, mgrGame, mgrSkincare, mgrInside, mgrOutside, mgrPart, mgrRankHuDong, mgrSzz, mgrMangHe, mgrSuit, mgrPvp, mgrDream, mgrCat, mgrOffline, mgrRoleTest, mgrClassRoom, mgrColorEggs, mgrManicure, mgrCp, mgrShoe, mgrI18n];
			this.loadMgrs(a), this.state = 2, t && t(!0)
		}
		static loadMgrs(t) {
			for (let e = 0; e < t.length; e++) {
				t[e].onload()
			}
			for (let e = 0; e < t.length; e++) {
				t[e].start()
			}
		}
	}
	mgrLoader.state = 0;
	class AStarNode {
		constructor(t, e) {
			this.walkable = !0, this.costMultiplier = 1, this.x = t, this.y = e
		}
	}
	class AStarGrid {
		constructor(t, e) {
			this._height = e, this._width = t, this._nodes = [];
			for (let a = 0; a < e; a++) {
				this._nodes[a] = [];
				for (let e = 0; e < t; e++) this._nodes[a][e] = new AStarNode(e, a)
			}
		}
		getNode(t, e) {
			return this._nodes[e][t]
		}
		setEndNode(t, e) {
			return this._endNode = this._nodes[e][t], !!this._endNode || (console.error("setEndNode error:", t, e), !1)
		}
		setStartNode(t, e) {
			return this._startNode = this._nodes[e][t], !!this._startNode || (console.error("setStartNode error:", t, e), !1)
		}
		setWalkable(t, e, a) {
			this._nodes[e][t].walkable = a
		}
		isWalkable(t, e) {
			return this._nodes[e][t].walkable
		}
		get endNode() {
			return this._endNode
		}
		get height() {
			return this._height
		}
		get width() {
			return this._width
		}
		get startNode() {
			return this._startNode
		}
	}
	class AStar {
		constructor(t, e = !1) {
			this._straightCost = 1, this._diagCost = Math.SQRT2, this._diagEnabled = !1, this._grid = null, this._grid = t, this._diagEnabled = e, this._heuristic = this.diagonal
		}
		setGrid(t) {
			this._grid = t
		}
		getGrid() {
			return this._grid
		}
		searchPath(t, e) {
			let a = this._grid;
			return !!(a && a.setStartNode(t.x, t.y) && a.setEndNode(e.x, e.y)) && this.search()
		}
		search() {
			if (null == this._grid) return !1;
			this._open = [], this._closed = [];
			var t = this._grid.startNode;
			t.g = 0, t.h = this._heuristic(t), t.f = t.g + t.h;
			let e = this._grid.endNode,
				a = t;
			for (; a != e;) {
				let t = Math.max(0, a.y - 1),
					e = Math.min(this._grid.height - 1, a.y + 1),
					r = Math.max(0, a.x - 1),
					l = Math.min(this._grid.width - 1, a.x + 1);
				for (let c = t; c <= e; c++)
					for (let t = r; t <= l; t++) {
						var i;
						if (this._diagEnabled) {
							if ((i = this._grid.getNode(t, c)) == a || !i.walkable) continue
						} else {
							if (t != a.x && c != a.y) continue;
							if ((i = this._grid.getNode(t, c)) == a || !i.walkable || !this._grid.getNode(i.x, a.y).walkable || !this._grid.getNode(a.x, i.y).walkable) continue
						}
						let e = this._straightCost;
						a.x != i.x && a.y != i.y && (e = this._diagCost);
						var s = a.g + e * i.costMultiplier,
							n = this._heuristic(i),
							o = s + n;
						this.isOpen(i) || this.isClosed(i) ? i.f > o && (i.f = o, i.g = s, i.h = n, i.parent = a) : (i.f = o, i.g = s, i.h = n, i.parent = a, this._open.push(i))
					}
				if (this._closed.push(a), 0 == this._open.length) return !1;
				let c = this._open.length;
				for (let t = 0; t < c; t++)
					for (let e = t + 1; e < c; e++)
						if (this._open[t].f > this._open[e].f) {
							let a = this._open[t];
							this._open[t] = this._open[e], this._open[e] = a
						} a = this._open.shift()
			}
			return this.buildPath(), !0
		}
		buildPath() {
			let t = 1,
				e = this._grid,
				a = e.endNode;
			for (; a != e.startNode;) a = a.parent, t++;
			let i = new Array(t);
			for (a = e.endNode, i[--t] = a; a != e.startNode;) a = a.parent, i[--t] = a;
			this._path = i
		}
		get path() {
			return this._path
		}
		isOpen(t) {
			for (var e = 0; e < this._open.length; e++)
				if (this._open[e] == t) return !0;
			return !1
		}
		isClosed(t) {
			for (var e = 0; e < this._closed.length; e++)
				if (this._closed[e] == t) return !0;
			return !1
		}
		manhattan(t) {
			return Math.abs(t.x - this._grid.endNode.x) * this._straightCost + Math.abs(t.y + this._grid.endNode.y) * this._straightCost
		}
		euclidian(t) {
			var e = t.x - this._grid.endNode.x,
				a = t.y - this._grid.endNode.y;
			return Math.sqrt(e * e + a * a) * this._straightCost
		}
		diagonal(t) {
			var e = Math.abs(t.x - this._grid.endNode.x),
				a = Math.abs(t.y - this._grid.endNode.y),
				i = Math.min(e, a),
				s = e + a;
			return this._diagCost * i + this._straightCost * (s - 2 * i)
		}
		get visited() {
			return this._closed.concat(this._open)
		}
		searchPathWithViaPoints(t, e, ...a) {
			let i = this._grid;
			if (i) {
				let s = {
						x: t.x,
						y: t.y
					},
					n = [];
				for (let t = 0; t < a.length; t++) {
					let e = a[t];
					if (i.setStartNode(s.x, s.y), i.setEndNode(e.x, e.y), !this.search()) return null;
					(n = n.concat(this.path)).length > 0 && n.pop(), s = e
				}
				if (i.setStartNode(s.x, s.y), i.setEndNode(e.x, e.y), this.search()) return n.concat(this.path)
			}
			return null
		}
	}
	class UUID {
		constructor(t, e, a) {
			this.indexMax = t || 1e12, this.indexMin = e || 0, this.curIndex = a || this.indexMin
		}
		static nextId() {
			return this.globalUUID.next()
		}
		next() {
			return ++this.curIndex >= this.indexMax && (this.curIndex = this.indexMin + 1), this.curIndex % this.indexMax
		}
		getCurIndex() {
			return this.curIndex
		}
	}
	UUID.globalUUID = new UUID;
	class PartGetter {
		static getPartJumpType(t) {
			return null != this.cacheData[t] ? this.cacheData[t] : this.checkDream(t) ? 0 : this.checkBox(t) ? 1 : this.checkSzz(t) ? 2 : this.checkPvp(t) ? 3 : this.checkSign(t) ? 4 : this.checkLvup(t) ? 5 : this.checkLevel(t) ? 6 : this.checkShop(t) ? 7 : this.checkVideoShare(t) ? 8 : this.checkByDropIds(t, ["31", "32", "33"]) ? 15 : this.checkByDropIds(t, ["34", "35", "36"]) ? 16 : this.checkByDropIds(t, ["22", "23", "24"]) ? 9 : this.checkRoleLink(t, 8) ? 10 : this.checkRoleLink(t, 9) ? 11 : this.checkRoleLink(t, 10) ? 12 : this.checkRoleLink(t, 11) ? 13 : this.checkRoleLink(t, 12) ? 14 : this.checkCanNotGet(t) ? 17 : -1
		}
		static checkDream(t) {
			let e = mgrDream.getAllRole();
			for (var a = 0; a < e.length; a++)
				for (var i = db.get_role_db(e[a]).suits, s = 0; s < i.length; s++) {
					let e = db.get_suit_db(i[s]).lotteryParts;
					for (var n = 0; n < e.length; n++)
						if (this.cacheData[e[n]] = 0, e[n] == t) return !0
				}
			return !1
		}
		static checkBox(t) {
			for (var e = 0; e < db.game_cnf.mang_he_show_suits.length; e++) {
				var a = db.get_suit_db(db.game_cnf.mang_he_show_suits[e]).lotteryParts;
				for (let e = 0; e < a.length; e++)
					if (this.cacheData[a[e]] = 1, a[e] == t) return !0
			}
			return !1
		}
		static checkSzz(t) {
			let e = BaseFacade.mDrop.getAllDropItems(db.game_cnf.szz_lottery_drop_id);
			for (var a = 0; a < e.length; a++)
				if (this.cacheData[e[a].itemId] = 2, e[a].itemId == t) return !0;
			return !1
		}
		static checkPvp(t) {
			let e = mgrPvp.allPvpPartAward;
			for (var a = 0; a < e.length; a++)
				if (this.cacheData[e[a]] = 3, e[a] == t) return !0;
			return !1
		}
		static checkSign(t) {
			let e = db.get_sign_db_arr();
			for (var a = 0; a < e.length; a++)
				for (var i = e[a].items, s = 0; s < i.length; s++)
					if (this.cacheData[i[s][0]] = 4, i[s][0] == t) return !0;
			return !1
		}
		static checkLvup(t) {
			let e = !1;
			return Tools.forEachMap(db.get_role_up_db_map(), (a, i) => {
				for (var s = 0; s < i.length; s++)
					if (this.cacheData[i[s].itemId] = 5, i[s].itemId == t) return e = !0, !0
			}), e
		}
		static checkLevel(t) {
			let e = db.get_level_db_arr();
			for (var a = 0; a < e.length; a++) {
				var i = e[a];
				if (this.cacheData[i.itemId] = 6, i.itemId == t) return !0
			}
			return !1
		}
		static checkShop(t) {
			let e = !1;
			return Tools.forEachMap(db.get_pay_db_map(), (a, i) => {
				if (this.cacheData[i.getItemId] = 7, i.getItemId == t) return e = !0, !0
			}), e
		}
		static checkVideoShare(t) {
			let e = SHARE_AWARD_SUIT_ID,
				a = db.get_suit_db(e).parts || [];
			for (let e = 0; e <= a.length; e++)
				if (t == a[e]) return !0;
			return !1
		}
		static checkByDropIds(t, e) {
			for (let a = 0; a < e.length; a++) {
				let i = e[a],
					s = db.get_drop_db(i);
				if (s)
					for (let e = 0; e < s.items.length; e++) {
						if (t == s.items[e].id) return !0
					}
			}
			return !1
		}
		static checkRoleLink(t, e) {
			let a = `default_parts${e}`,
				i = db.game_cnf[a] || [];
			for (let e = 0; e < i.length; e++) {
				if (i[e] == t) return !0
			}
			return !1
		}
		static checkCanNotGet(t) {
			let e = ["14037", "17021", "19037", "21037", "22025", "23037", "24037", "13038", "18038", "20038", "19038", "21038", "22026", "23038"];
			for (let a = 0; a < e.length; a++) {
				if (e[a] == t) return !0
			}
			return !1
		}
	}
	PartGetter.cacheData = Object.create(null);
	class VerifyCfg {
		static verifyAll() {
			console.log("------ 验证开始 ------"), this.questDb(), this.nameDb(), this.itemDb(), this.testJump(), this.suitDb(), this.talkDb(), this.switchDb(), this.matConfig(), this.testOrder(), this.testPaintData(), console.log("------ 证完结束 ------")
		}
		static questDb() {
			let t = db.get_quest_db_map();
			Tools.forEachMap(t, function(t, e) {
				let a = e.goals[0];
				if (a) {
					let i = db.get_goal_db(a);
					e.desc && e.desc.indexOf(i.value + "") < 0 && console.error(`任务描述[${t}]可能与目标值不相等.`)
				}
			}), console.log("验证任务配置表结束!!!")
		}
		static nameDb() {
			let t = db.get_name_db_arr();
			for (let e = 0; e < t.length; e++) mgrWordFilter.checkStr(t[e].name) && mgrWordFilter.checkStr(t[e].name1) || console.error("非法名字:", t[e].name);
			console.log("验证名字配置表结束!!!")
		}
		static itemDb() {
			let t = db.get_item_db_map(),
				e = db.get_model_db_map(),
				a = [];
			Tools.forEachMap(t, (t, i) => {
				if (2 == i.type && 1 == i.subType) {
					a.push(t);
					let s = i.viewList;
					for (let a = 0; a < s.length; a++) e[s[a]] || console.error(`部件[${t}]外观[${s[a]}]丢失.`)
				}
			}), console.log("验证物品配置表结束!!!");
			let i = new ResLoader;
			mgrPart.addPartResList(a, i), i.setLoadingCallback(function() {
				console.log("加载所有模型完成!!!")
			}), Laya.timer.once(500, this, function() {
				i.loadAll()
			})
		}
		static suitDb() {
			let t = db.get_suit_db_map(),
				e = db.get_item_db_map();
			Tools.forEachMap(t, (t, a) => {
				let i = a.parts;
				for (let a = 0; a < i.length; a++)[e[i[a]]] || console.error(`套装[${t}]部件[${i[a]}]丢失.`)
			}), console.log("验证套装配置表结束!!!")
		}
		static testJump() {
			Tools.forEachMap(db.get_item_db_map(), function(t, e) {
				if (2 == e.type && 1 == e.subType) {
					-1 == PartGetter.getPartJumpType(t) && console.error("部件跳转异常", t)
				}
			}), console.log("部件跳转验证结束!!!")
		}
		static talkDb() {
			let t = db.get_suit_db_map(),
				e = db.get_talk_db_map();
			Tools.forEachMap(t, function(t, a) {
				a.talkId && a.talkId && !e[a.talkId] && console.error(`套装[${t}]对话[${a.talkId}]丢失.`)
			});
			let a = db.get_level_db_arr();
			for (let t = 0; t < a.length; t++) a[t].talkId && !e[a[t].talkId] && console.error(`关卡[${t}]对话[${a[t].talkId}]丢失.`);
			console.log("验证对话配置表结束!!!")
		}
		static switchDb() {
			let t = db.get_switch_db_map();
			Tools.forEachMap(t, (t, e) => {
				if (0 === e.type) {
					let t = Tools.splitToNumber(e.params, ":");
					2 != t.length && 5 != t.length && console.error("周期开关起始时间有问题:", e.params), e.delta <= 0 && console.error("周期开关间隔有问题:", e.delta), e.delta < e.duration && console.error("周期开关间隔小于有效时间:", e.delta)
				}
			}), console.log("验证开关配置表结束!!!")
		}
		static matConfig() {
			let t = mgrMaterial.dynamicBoneInfos;
			for (const e in t) {
				let a = t[e].concat();
				a.sort(function(t, e) {
					return t.route.length - e.route.length
				});
				for (let t = 0; t < a.length - 1; t++) {
					let i = a[t].route;
					for (let s = t + 1; s < a.length; s++) a[s].route.startsWith(i) && console.error(`模型[${e}]动态骨骼[${t}:${a[s].route}]包含[${s}:${i}]!`)
				}
			}
			console.log("验证动态骨骼配置结束!!!")
		}
		static testOrder() {
			function testPartType(t, e) {
				let a = mItem.getAllItem(2, 1, t),
					i = 0;
				for (let t = 0; t < a.length; t++) {
					let s = a[t],
						n = db.get_item_db(s);
					mgrPart.isMatchTag(e, DbExt.getTag1(n), DbExt.getTag2(n)) && i++
				}
				return i
			}
			for (let t = 0; t <= 14; t++) {
				let e = [];
				for (let a = 1; a <= db.get_tag_type_db_arr().length; a++) e.push(testPartType(t, a));
				console.log(`type:${t}  match count:`, e.join(", "))
			}
			console.log("验证订单匹配结束!!!")
		}
		static testPaintData() {
			Tools.forEachMap(db.get_item_db_map(), (t, e) => {
				if (2 == e.type && 1 == e.subType && db.get_part_type_db(e.gid).paintable) {
					let a = e.viewList;
					for (let e = 0; e < a.length; e++) {
						let i = db.get_model_db(a[e]);
						mgrPart.getPaintData(i.resPath) || console.error(`找不到部件[${t}][${a[e]}]的涂抹区域数据，请重新执行脚本[tools/_auto_export_part_paint_area.bat]`)
					}
				}
			}), console.log("验证模型涂抹区域数据结束!!!")
		}
	}
	const NUMBER_OF_GATHERED_TOUCHES_FOR_MOVE_SPEED = 5,
		OUT_OF_BOUNDARY_BREAKING_FACTOR = .05,
		EPSILON = 1e-4,
		MOVEMENT_FACTOR = .7;
	let quintEaseOut = function(t) {
			return (t -= 1) * t * t * t * t + 1
		},
		getTimeInMilliseconds = function() {
			return (new Date).getMilliseconds()
		},
		v2_helper1 = new Vec2,
		v2_helper2 = new Vec2,
		v2_content_pos = new Vec2,
		v2_content_move = new Vec2;
	class ScrollView extends Laya.Script {
		constructor() {
			super(...arguments), this._topBoundary = 0, this._bottomBoundary = 0, this._leftBoundary = 0, this._rightBoundary = 0, this._touchMoveDisplacements = [], this._touchMoveTimeDeltas = [], this._touchMovePreviousTimestamp = 0, this._touched = !1, this._touchMoved = !1, this._autoScrolling = !1, this._autoScrollAttenuate = !1, this._autoScrollStartPosition = new Vec2(0, 0), this._autoScrollTargetDelta = new Vec2(0, 0), this._autoScrollTotalTime = 0, this._autoScrollAccumulatedTime = 0, this._autoScrollCurrentlyOutOfBoundary = !1, this._autoScrollBraking = !1, this._autoScrollBrakingStartPosition = new Vec2(0, 0), this._outOfBoundaryAmount = new Vec2(0, 0), this._outOfBoundaryAmountDirty = !0, this._isScrollEndedWithThresholdEventFired = !1, this._scrollEventEmitMask = 0, this._isBouncing = !1, this._scrolling = !1, this._touchStartX = 0, this._touchStartY = 0, this._touchX = 0, this._touchY = 0, this.horizontal = !1, this.vertical = !0, this.inertia = !0, this.brake = .5, this.elastic = !0, this.bounceDuration = 1, this.cancelInnerEvents = !0
		}
		get content() {
			return this._content
		}
		set content(t) {
			this._content = t, this.calculateBoundary()
		}
		get node() {
			return this.owner
		}
		scrollToBottom(t = 0, e = !0) {
			let a = this._calculateMovePercentDelta({
				anchor: new Vec2(0, 1),
				applyToHorizontal: !1,
				applyToVertical: !0
			});
			t ? this._startAutoScroll(a, t, !1 !== e) : this._moveContent(a, !0)
		}
		scrollToTop(t = 0, e = !0) {
			let a = this._calculateMovePercentDelta({
				anchor: new Vec2(0, 0),
				applyToHorizontal: !1,
				applyToVertical: !0
			});
			t ? this._startAutoScroll(a, t, !1 !== e) : this._moveContent(a)
		}
		scrollToLeft(t = 0, e = !0) {
			let a = this._calculateMovePercentDelta({
				anchor: new Vec2(0, 0),
				applyToHorizontal: !0,
				applyToVertical: !1
			});
			t ? this._startAutoScroll(a, t, !1 !== e) : this._moveContent(a)
		}
		scrollToRight(t = 0, e = !0) {
			let a = this._calculateMovePercentDelta({
				anchor: new Vec2(1, 0),
				applyToHorizontal: !0,
				applyToVertical: !1
			});
			t ? this._startAutoScroll(a, t, !1 !== e) : this._moveContent(a)
		}
		scrollToPercentHorizontal(t, e = 0, a = !0) {
			let i = this._calculateMovePercentDelta({
				anchor: new Vec2(t, 0),
				applyToHorizontal: !0,
				applyToVertical: !1
			});
			e ? this._startAutoScroll(i, e, !1 !== a) : this._moveContent(i)
		}
		scrollTo(t, e = 0, a = !0) {
			let i = this._calculateMovePercentDelta({
				anchor: new Vec2(t.x, t.y),
				applyToHorizontal: !0,
				applyToVertical: !0
			});
			e ? this._startAutoScroll(i, e, !1 !== a) : this._moveContent(i)
		}
		scrollToPercentVertical(t, e = 0, a = !0) {
			let i = this._calculateMovePercentDelta({
				anchor: new Vec2(0, t),
				applyToHorizontal: !1,
				applyToVertical: !0
			});
			e ? this._startAutoScroll(i, e, !1 !== a) : this._moveContent(i)
		}
		stopAutoScroll() {
			this._autoScrolling = !1, this._autoScrollAccumulatedTime = this._autoScrollTotalTime
		}
		setContentPosition(t) {
			t.fuzzyEquals(this.getContentPosition(v2_content_move), EPSILON) || (this.content.pos(t.x, t.y, !0), this._outOfBoundaryAmountDirty = !0)
		}
		getContentPosition(t) {
			return t || (t = new Vec2), t.setValue(this.content.x, this.content.y), t
		}
		get isScrolling() {
			return this._scrolling
		}
		get isAutoScrolling() {
			return this._autoScrolling
		}
		_registerEvent() {
			this.owner.on(Laya.Event.CLICK, this, this._onClick)
		}
		_unregisterEvent() {
			this.owner.off(Laya.Event.CLICK, this, this._onClick)
		}
		_calculateMovePercentDelta(t) {
			let e = t.anchor,
				a = t.applyToHorizontal,
				i = t.applyToVertical;
			this.calculateBoundary(), e.x = Mathf.clamp01(e.x), e.y = Mathf.clamp01(e.y);
			let s = new Vec2(0, 0),
				n = 0;
			if (a) {
				let t = this._getContentLeftBoundary() - this._leftBoundary;
				t = -t, n = this.content.width - this.node.width, s.x = t - n * e.x
			}
			if (i) {
				let t = this._getContentBottomBoundary() - this._bottomBoundary;
				n = this.content.height - this.node.height, s.y = n * (1 - e.y) - t
			}
			return s
		}
		_moveContentToTopLeft(t, e) {
			let a = new Vec2(0, 0),
				i = 0;
			if (this.content.height < e) {
				let t = this._getContentBottomBoundary() - this._bottomBoundary;
				i = this.content.height - e, a.y = i - t
			}
			if (this.content.width < t) {
				let e = this._getContentLeftBoundary() - this._leftBoundary;
				e = -e, i = this.content.width - t, a.x = e
			}
			this._moveContent(a), this._adjustContentOutOfBoundary()
		}
		calculateBoundary() {
			this.content && (this._leftBoundary = 0, this._bottomBoundary = this.node.height, this._rightBoundary = this.node.width, this._topBoundary = 0, this._moveContentToTopLeft(this.node.width, this.node.height))
		}
		_stopPropagationIfTargetIsMe(t) {
			t && (t.target, this.owner)
		}
		onMouseDown(t) {
			this.owner.activeInHierarchy && this.enabled && (this.content && this._handlePressLogic(), this._touched = !0, this._touchMoved = !1, this._touchStartX = this._touchX = Laya.stage.mouseX, this._touchStartY = this._touchY = Laya.stage.mouseY, this._stopPropagationIfTargetIsMe(t))
		}
		onMouseMove(t) {
			if (!this.owner.activeInHierarchy || !this.enabled) return;
			if (!this._touched) return;
			if (this.content && this._handleMoveLogic(), this._touchX = Laya.stage.mouseX, this._touchY = Laya.stage.mouseY, !this.cancelInnerEvents) return;
			let e = this._touchX - this._touchStartX,
				a = this._touchY - this._touchStartY;
			e * e + a * a > 49 && !this._touchMoved && t && t.target !== this.owner && (this._touchMoved = !0), this._stopPropagationIfTargetIsMe(t)
		}
		onMouseUp(t) {
			this._touched && (this._touched = !1, this.owner.activeInHierarchy && (this.content && this._handleReleaseLogic(), this._touchMoved || this._stopPropagationIfTargetIsMe(t)))
		}
		onMouseOut(t) {
			this.owner.activeInHierarchy && this.enabled && this._touched && Laya.timer.loop(30, this, this._onSimulateMouseMove)
		}
		onMouseOver(t) {
			Laya.timer.clear(this, this._onSimulateMouseMove)
		}
		_onClick(t) {}
		onStageMouseUp() {
			Laya.timer.clear(this, this._onSimulateMouseMove), this._touched && this.onMouseUp(null)
		}
		_onSimulateMouseMove() {
			this._touched ? this.onMouseMove(null) : Laya.timer.clear(this, this._onSimulateMouseMove)
		}
		_processDeltaMove(t) {
			this._scrollChildren(t), this._gatherTouchMove(t)
		}
		_handleMoveLogic() {
			let t = new Vec2(Laya.stage.mouseX - this._touchX, Laya.stage.mouseY - this._touchY);
			this._processDeltaMove(t)
		}
		_scrollChildren(t) {
			let e, a = t = this._clampDelta(t);
			this.elastic ? (e = this._getHowMuchOutOfBoundary(), a.x *= 0 === e.x ? 1 : .5, a.y *= 0 === e.y ? 1 : .5) : (e = this._getHowMuchOutOfBoundary(a), a.addSelf(e)), this._moveContent(a, !1), 0 === a.x && 0 === a.y || (this._scrolling || (this._scrolling = !0), this._onScrolling())
		}
		_handlePressLogic() {
			this._autoScrolling = !1, this._isBouncing = !1, this._touchMovePreviousTimestamp = getTimeInMilliseconds(), this._touchMoveDisplacements.length = 0, this._touchMoveTimeDeltas.length = 0
		}
		_clampDelta(t) {
			return this.content.width < this.node.width && (t.x = 0), this.content.height < this.node.height && (t.y = 0), t
		}
		_gatherTouchMove(t) {
			for (t = this._clampDelta(t); this._touchMoveDisplacements.length >= NUMBER_OF_GATHERED_TOUCHES_FOR_MOVE_SPEED;) this._touchMoveDisplacements.shift(), this._touchMoveTimeDeltas.shift();
			this._touchMoveDisplacements.push(t);
			let e = getTimeInMilliseconds();
			this._touchMoveTimeDeltas.push((e - this._touchMovePreviousTimestamp) / 1e3), this._touchMovePreviousTimestamp = e
		}
		_startBounceBackIfNeeded() {
			if (!this.elastic) return !1;
			let t = this._getHowMuchOutOfBoundary();
			if ((t = this._clampDelta(t)).fuzzyEquals(Vec2.ZERO, EPSILON)) return !1;
			let e = Math.max(this.bounceDuration, 0);
			return this._startAutoScroll(t, e, !0), this._isBouncing || (this._isBouncing = !0), !0
		}
		_processInertiaScroll() {
			if (!this._startBounceBackIfNeeded() && this.inertia) {
				let t = this._calculateTouchMoveVelocity();
				!t.fuzzyEquals(Vec2.ZERO, EPSILON) && this.brake < 1 && this._startInertiaScroll(t)
			}
		}
		_handleReleaseLogic() {
			let t = new Vec2(Laya.stage.mouseX - this._touchX, Laya.stage.mouseY - this._touchY);
			this._gatherTouchMove(t), this._processInertiaScroll(), this._scrolling && (this._scrolling = !1)
		}
		_isOutOfBoundary() {
			return !this._getHowMuchOutOfBoundary().fuzzyEquals(Vec2.ZERO, EPSILON)
		}
		_isNecessaryAutoScrollBrake() {
			if (this._autoScrollBraking) return !0;
			if (this._isOutOfBoundary()) {
				if (!this._autoScrollCurrentlyOutOfBoundary) return this._autoScrollCurrentlyOutOfBoundary = !0, this._autoScrollBraking = !0, this._autoScrollBrakingStartPosition = this.getContentPosition(this._autoScrollBrakingStartPosition), !0
			} else this._autoScrollCurrentlyOutOfBoundary = !1;
			return !1
		}
		getScrollEndedEventTiming() {
			return EPSILON
		}
		_processAutoScrolling(t) {
			let e = this._isNecessaryAutoScrollBrake(),
				a = e ? OUT_OF_BOUNDARY_BREAKING_FACTOR : 1;
			this._autoScrollAccumulatedTime += t * (1 / a);
			let i = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);
			this._autoScrollAttenuate && (i = quintEaseOut(i));
			let s = this._autoScrollStartPosition.add(this._autoScrollTargetDelta.mul(i, v2_helper1), v2_helper1),
				n = Math.abs(i - 1) <= EPSILON;
			if (Math.abs(i - 1) <= this.getScrollEndedEventTiming() && !this._isScrollEndedWithThresholdEventFired && (this._isScrollEndedWithThresholdEventFired = !0), this.elastic) {
				let t = s.sub(this._autoScrollBrakingStartPosition, v2_helper2);
				e && t.mulSelf(a), s = this._autoScrollBrakingStartPosition.add(t, v2_helper1)
			} else {
				let t = s.sub(this.getContentPosition(v2_content_pos), v2_helper2),
					e = this._getHowMuchOutOfBoundary(t);
				e.fuzzyEquals(Vec2.ZERO, EPSILON) || (s.addSelf(e), n = !0)
			}
			n && (this._autoScrolling = !1);
			let o = s.subSelf(this.getContentPosition(v2_content_pos));
			this._moveContent(this._clampDelta(o), n), this._onScrolling(), this._autoScrolling || (this._isBouncing = !1, this._scrolling = !1)
		}
		_startInertiaScroll(t) {
			let e = t.mul(MOVEMENT_FACTOR);
			this._startAttenuatingAutoScroll(e, t)
		}
		_calculateAttenuatedFactor(t) {
			return this.brake <= 0 ? 1 - this.brake : (1 - this.brake) * (1 / (1 + 14e-6 * t + t * t * 8e-9))
		}
		_startAttenuatingAutoScroll(t, e) {
			let a = this._calculateAutoScrollTimeByInitalSpeed(e.mag()),
				i = new Vec2;
			t.normalize(i);
			let s = this.content.width - this.node.width,
				n = this.content.height - this.node.height,
				o = this._calculateAttenuatedFactor(s),
				r = this._calculateAttenuatedFactor(n);
			i = new Vec2(i.x * s * (1 - this.brake) * o, i.y * n * r * (1 - this.brake));
			let l = t.mag(),
				c = i.mag() / l;
			i.addSelf(t), this.brake > 0 && c > 7 && (c = Math.sqrt(c), t.mul(c, i).addSelf(t)), this.brake > 0 && c > 3 && (a *= c = 3), 0 === this.brake && c > 1 && (a *= c), this._startAutoScroll(i, a, !0)
		}
		_calculateAutoScrollTimeByInitalSpeed(t) {
			return Math.sqrt(Math.sqrt(t / 5))
		}
		_startAutoScroll(t, e, a) {
			let i = this._flattenVectorByDirection(t);
			this._autoScrolling = !0, this._autoScrollTargetDelta = i, this._autoScrollAttenuate = a, this._autoScrollStartPosition = this.getContentPosition(this._autoScrollStartPosition), this._autoScrollTotalTime = e, this._autoScrollAccumulatedTime = 0, this._autoScrollBraking = !1, this._isScrollEndedWithThresholdEventFired = !1, this._autoScrollBrakingStartPosition = new Vec2(0, 0), this._getHowMuchOutOfBoundary().fuzzyEquals(Vec2.ZERO, EPSILON) || (this._autoScrollCurrentlyOutOfBoundary = !0)
		}
		_calculateTouchMoveVelocity() {
			let t = 0;
			if ((t = this._touchMoveTimeDeltas.reduce(function(t, e) {
					return t + e
				}, t)) <= 0 || t >= .5) return new Vec2(0, 0);
			let e = new Vec2(0, 0);
			return this._touchMoveDisplacements.reduce(function(t, a) {
				return t.add(a, e)
			}, e), e.mulSelf((1 - this.brake) / t)
		}
		_flattenVectorByDirection(t) {
			return t.x = this.horizontal ? t.x : 0, t.y = this.vertical ? t.y : 0, t
		}
		_moveContent(t, e) {
			let a = this._flattenVectorByDirection(t),
				i = this.getContentPosition(v2_content_pos).add(a, v2_helper2);
			this.setContentPosition(i), this.elastic && e && this._startBounceBackIfNeeded()
		}
		_getContentLeftBoundary() {
			return this.content.x
		}
		_getContentRightBoundary() {
			return this._getContentLeftBoundary() + this.content.width
		}
		_getContentTopBoundary() {
			return this._getContentBottomBoundary() - this.content.height
		}
		_getContentBottomBoundary() {
			return this.content.y + this.content.height
		}
		_getHowMuchOutOfBoundary(t = Vec2.ZERO) {
			if (t.fuzzyEquals(Vec2.ZERO, EPSILON) && !this._outOfBoundaryAmountDirty) return this._outOfBoundaryAmount;
			let e = new Vec2(0, 0);
			return this._getContentLeftBoundary() + t.x > this._leftBoundary ? e.x = this._leftBoundary - (this._getContentLeftBoundary() + t.x) : this._getContentRightBoundary() + t.x < this._rightBoundary && (e.x = this._rightBoundary - (this._getContentRightBoundary() + t.x)), this._getContentTopBoundary() + t.y > this._topBoundary ? e.y = this._topBoundary - (this._getContentTopBoundary() + t.y) : this._getContentBottomBoundary() + t.y < this._bottomBoundary && (e.y = this._bottomBoundary - (this._getContentBottomBoundary() + t.y)), t.fuzzyEquals(Vec2.ZERO, EPSILON) && (this._outOfBoundaryAmount = e, this._outOfBoundaryAmountDirty = !1), e = this._clampDelta(e)
		}
		_adjustContentOutOfBoundary() {
			if (this._outOfBoundaryAmountDirty = !0, this._isOutOfBoundary()) {
				let t = this._getHowMuchOutOfBoundary(),
					e = this.getContentPosition(v2_content_pos).addSelf(t);
				this.content && this.content.pos(e.x, e.y, !0)
			}
		}
		_onScrolling() {}
		set height(t) {
			this.node.height = t, this.resetScrollRect()
		}
		get height() {
			return this.node.height
		}
		set width(t) {
			this.node.width = t, this.resetScrollRect()
		}
		get width() {
			return this.node.width
		}
		resetScrollRect() {
			this.node.scrollRect || (this.node.scrollRect = Laya.Rectangle.create()), this.node.scrollRect.setTo(0, 0, this.node.width, this.node.height)
		}
		onAwake() {
			let t = this.owner.getChildAt(0);
			t instanceof Laya.Sprite ? this.content = t : (this.content = new Laya.Sprite, this.owner.addChild(this.content)), this.resetScrollRect()
		}
		onStart() {
			this.calculateBoundary(), this.content && this._adjustContentOutOfBoundary(), this._registerEvent(), this.content && this.content.on(Laya.Event.RESIZE, this, this.calculateBoundary)
		}
		onDestroy() {
			this._unregisterEvent(), this.content && this.content.off(Laya.Event.RESIZE, this, this.calculateBoundary), this.stopAutoScroll(), Laya.timer.clear(this, this._onSimulateMouseMove), this.node.scrollRect && (this.node.scrollRect.recover(), this.node.scrollRect = null)
		}
		onUpdate() {
			this._autoScrolling && this._processAutoScrolling(Laya.timer.delta / 1e3)
		}
	}
	const DEFAULT_CLEAR_CALLBACK = function(t) {
			t.dispose()
		},
		EMPTY_FUNC = function() {};
	class ReuseScrollList extends ScrollView {
		constructor() {
			super(...arguments), this.eachCount = 1, this.itemWidth = 100, this.itemHeight = 100, this.itemAnchorX = 0, this.itemAnchorY = 0, this.itemCreateDeltaFrame = 0, this.itemCreatePerCount = 1, this.sectionRes = "", this.sectionSize = 0, this.sectionSpace = 100, this.sectionOffsetX = 0, this.sectionOffsetY = 0, this.onItemClear = DEFAULT_CLEAR_CALLBACK, this.onItemScroll = EMPTY_FUNC, this._bCreating = !1, this.m_bInit = !1, this.m_items = [], this.m_totalCount = 0, this.m_itemCount = 0, this.m_topIndex = 0, this.m_sectionCount = 0, this.m_sectionTotalCount = 0, this.m_sectionTopIndex = 0
		}
		onAwake() {
			super.onAwake(), this.horizontal = !this.vertical
		}
		onDestroy() {
			this.onItemCreate = null, this.onItemChange = null, this.onItemClear = null, this.onItemScroll = null, this.onItemCreateComplete = null, super.onDestroy(), this.m_items.length > 0 && Logger.error("ReuseScrollList.onDestroy: 必须主动清理items!")
		}
		setVerticle(t) {
			this.vertical = t, this.horizontal = !t
		}
		clearAllItems() {
			if (this.onItemClear) {
				let e = this.m_items.length;
				for (var t = 0; t < e; t++) this.m_items[t].tryClear();
				this.m_items.length = 0
			}
		}
		foreachItems(t) {
			let e = this.m_items.length;
			for (var a = 0; a < e && !t(this.m_items[a].item); a++);
		}
		foreachItemsByOrder(t) {
			for (var e = 0; e < this.m_itemCount; e++) {
				var a = this.getItem(this.m_topIndex + e);
				if (!a || t(a)) break
			}
		}
		getItem(t) {
			return t >= this.m_topIndex && t < this.m_totalCount ? this.m_items[t % this.m_itemCount].item : null
		}
		onUpdate() {
			if (super.onUpdate(), this.m_bInit && this._bCreating) {
				let e = !0,
					a = this.itemCreatePerCount,
					i = this.m_items.length,
					s = 0;
				t: for (; s < i;) {
					for (var t = 0; t < a; t++)
						if (this.m_items[s].isLoaded || (this.m_items[s].tryCreate(), e = !1), ++s >= i) break t;
					if (!e) break
				}
				this._onScrolling(), e && (this._bCreating = !1, this.onItemCreateComplete && this.onItemCreateComplete())
			}
		}
		init() {
			if (this.m_bInit) return;
			if (this.m_bInit = !0, this.vertical && this.horizontal && console.error("ReuseScrollList不支持同时在垂直和水平方向移动"), this.vertical) {
				if (this.m_itemCount = (Math.ceil(this.node.height / this.itemHeight) + 1) * this.eachCount, this.sectionRes) {
					0 == this.sectionSpace && Logger.error("ReuseScrollList init: [sectionSpace] can't be 0."), this.m_sectionCount = Math.ceil(this.node.height / this.sectionSpace) + 1;
					let e = [],
						a = Vec2.TEMP;
					for (var t = 0; t < this.m_sectionCount; t++) {
						let i = new Laya.Sprite;
						this.sectionSize && (i.width = this.sectionSize), i.loadImage(this.sectionRes), this.content.addChild(i), this.getSectionPositionByIndex(t, a), i.pos(a.x, a.y, !0), e.push(i)
					}
					this.m_sections = e
				}
			} else this.m_itemCount = (Math.ceil(this.node.width / this.itemWidth) + 1) * this.eachCount;
			this._bCreating = !0;
			let e = 0 == this.itemCreateDeltaFrame;
			for (t = 0; t < this.m_itemCount; t++) {
				let a = new ReuseItem(this, this.itemCreateDeltaFrame);
				e && a.tryCreate(), a.setParent(this.content), a.setPosition(this.getItemPositionByIndex(t, Vec2.TEMP)), this.m_items.push(a)
			}
			e || (this.itemCreatePerCount = Math.max(1, this.itemCreatePerCount))
		}
		getItemPositionByIndex(t, e) {
			let a, i;
			return this.vertical ? (a = t % this.eachCount, i = 0 | t / this.eachCount) : (i = t % this.eachCount, a = 0 | t / this.eachCount), e.x = a * this.itemWidth + this.itemWidth * this.itemAnchorX, e.y = i * this.itemHeight + this.itemHeight * this.itemAnchorY, e
		}
		getSectionPositionByIndex(t, e) {
			return e.x = this.sectionOffsetX, e.y = this.sectionOffsetY + t * this.sectionSpace, e
		}
		updateList(t, e, a, i = !0) {
			if (this.init(), this.stopAutoScroll(), null != t && (this.m_totalCount = t), null == e && (e = this.m_topIndex), e >= this.m_totalCount && (e = this.m_totalCount - 1), e < 0 && (e = 0), this.updateSize(), this.sectionRes && this.vertical && (this.m_sectionTotalCount = Math.ceil(this.content.height / this.sectionSpace)), e >= 0) {
				let t = this.getPercent(e);
				this.vertical ? this.scrollToPercentVertical(t, a) : this.scrollToPercentHorizontal(t, a), a || this._onScrolling()
			}
			for (var s = 0; s < this.m_itemCount; s++) {
				let t = this.m_topIndex + s,
					e = this.m_items[t % this.m_itemCount];
				t < this.m_totalCount ? (e.setPosition(this.getItemPositionByIndex(t, Vec2.TEMP)), e.show(), e.tryChange(t, i)) : e.hide()
			}
		}
		centerTo(t, e) {
			let a = this.vertical ? this.node.height / this.itemHeight : this.node.width / this.itemWidth,
				i = this.getPercent(t - (a - 1) / 2);
			this._bCreating && Logger.warn("如果有异步创建动画，这个方法可能会造成动画异常."), this.vertical ? this.scrollToPercentVertical(i, e) : this.scrollToPercentHorizontal(i, e), null == e && this._onScrolling()
		}
		getPercent(t) {
			let e, a, i;
			if (this.vertical ? (e = this.content.height, a = this.node.height, i = this.itemHeight) : (e = this.content.width, a = this.node.width, i = this.itemWidth), e - a <= 0) return 0;
			let s = Math.floor(t / this.eachCount) * i;
			return Mathf.clamp01(s / (e - a))
		}
		updateSize() {
			let t, e;
			this.vertical ? (t = this.eachCount * this.itemWidth, e = Math.ceil(this.m_totalCount / this.eachCount) * this.itemHeight) : (t = Math.ceil(this.m_totalCount / this.eachCount) * this.itemWidth, e = this.eachCount * this.itemHeight), this.content.width = t, this.content.height = e
		}
		_onScrolling() {
			if (!this.m_bInit) return;
			let t, e;
			this.vertical ? (t = (this.m_topIndex / this.eachCount | 0) * this.itemHeight, (e = -this.content.y) < t ? this.tailToHead(Math.ceil((t - e) / this.itemHeight)) : e > t + this.itemHeight && this.headToTail(Math.ceil((e - t - this.itemHeight) / this.itemHeight)), this.sectionRes && (e < (t = this.m_sectionTopIndex * this.sectionSpace + this.sectionOffsetY) ? this.sectionTailToHead(Math.ceil((t - e) / this.itemHeight)) : e > t + this.sectionSpace && this.sectionHeadToTail(Math.ceil((e - t - this.sectionSpace) / this.sectionSpace)))) : (t = (this.m_topIndex / this.eachCount | 0) * this.itemWidth, (e = -this.content.x) < t ? this.tailToHead(Math.ceil((t - e) / this.itemWidth)) : e > t + this.itemWidth && this.headToTail(Math.ceil((e - t - this.itemWidth) / this.itemWidth))), this.onItemScroll()
		}
		tailToHead(t) {
			let e, a, i, s = t * this.eachCount;
			for (var n = 0; n < s; n++) {
				if (e = (this.m_topIndex + this.m_itemCount - 1) % this.m_itemCount, (a = this.m_topIndex - 1) < 0) return;
				a >= this.m_totalCount ? this.m_items[e].hide() : ((i = this.m_items[e]).show(), i.setPosition(this.getItemPositionByIndex(a, Vec2.TEMP)), i.tryChange(a, !0)), this.m_topIndex--
			}
		}
		headToTail(t) {
			let e, a, i, s = t * this.eachCount;
			for (var n = 0; n < s; n++) e = this.m_topIndex % this.m_itemCount, (a = this.m_topIndex + this.m_itemCount) < this.m_totalCount ? ((i = this.m_items[e]).show(), i.setPosition(this.getItemPositionByIndex(a, Vec2.TEMP)), i.tryChange(a, !0)) : this.m_items[e].hide(), this.m_topIndex++
		}
		sectionTailToHead(t) {
			let e, a, i, s = Vec2.TEMP;
			for (var n = 0; n < t; n++) {
				if (e = (this.m_sectionTopIndex + this.m_sectionCount - 1) % this.m_sectionCount, (a = this.m_sectionTopIndex - 1) < 0) return;
				a >= this.m_sectionTotalCount ? this.m_sections[e].visible = !1 : ((i = this.m_sections[e]).visible = !0, this.getSectionPositionByIndex(a, s), i.pos(s.x, s.y, !0)), this.m_sectionTopIndex--
			}
		}
		sectionHeadToTail(t) {
			let e, a, i, s = Vec2.TEMP;
			for (var n = 0; n < t; n++) e = this.m_sectionTopIndex % this.m_sectionCount, (a = this.m_sectionTopIndex + this.m_sectionCount) < this.m_sectionTotalCount ? ((i = this.m_sections[e]).visible = !0, this.getSectionPositionByIndex(a, s), i.pos(s.x, s.y, !0)) : this.m_sections[e].visible = !1, this.m_sectionTopIndex++
		}
	}
	class ReuseItem {
		constructor(t, e) {
			this.isDisposed = !1, this.scrollor = t, this.deltaFrame = e
		}
		tryCreate() {
			if (!this.isDisposed)
				if (this.deltaFrame <= 0) {
					if (!this.item) {
						let t = this.scrollor.onItemCreate();
						this.item = t, this.parent && t.setParent(this.parent), this.position && t.setPosition(this.position.x, this.position.y), null != this.width && t.setSize(this.width, this.height), null != this.visible && (t.enable = this.visible), null != this.index && this.scrollor.onItemChange(t, this.index)
					}
				} else this.deltaFrame--
		}
		tryChange(t, e) {
			(this.index != t || e) && (this.index = t, this.item && this.scrollor.onItemChange(this.item, t))
		}
		tryClear() {
			this.isDisposed = !0, this.item && (this.scrollor.onItemClear(this.item), this.item = null)
		}
		get isLoaded() {
			return !!this.item && (!(this.item instanceof AsyncObject) || this.item.isLoaded)
		}
		setParent(t) {
			this.item ? this.item.setParent(t) : this.parent = t
		}
		setPosition(t) {
			this.item ? this.item.setPosition(t.x, t.y) : this.position ? this.position.set(t) : this.position = t.clone()
		}
		setSize(t, e) {
			this.width = t, this.height = e
		}
		show() {
			this.item ? this.item.enable = !0 : this.visible = !0
		}
		hide() {
			this.item ? this.item.enable = !1 : this.visible = !1
		}
	}
	class DebugColorSelector extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "DebugColorSelector", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0
		}
		buildUi() {
			this.__fillSideColor(), this.mainColor = this.__getSideColorByPos(0, 0), this.curColor = this.mainColor, this.__fillMainColor(), this.__fillCurColor(), this.registerTouch()
		}
		registerTouch() {
			this.spriteSide.on(Laya.Event.CLICK, this, t => {
				t.stopPropagation();
				let e = this.spriteSide.globalToLocal(new Laya.Point(Laya.stage.mouseX, Laya.stage.mouseY));
				this.mainColor = this.__getSideColorByPos(e.x, e.y), this.__fillMainColor()
			}), this.spriteMain.on(Laya.Event.CLICK, this, t => {
				t.stopPropagation();
				let e = this.spriteMain.globalToLocal(new Laya.Point(Laya.stage.mouseX, Laya.stage.mouseY));
				this.curColor = this.__getMainColorByPos(e.x, e.y), this.__fillCurColor(), this.context.colorChange && this.context.colorChange(this.curColor)
			})
		}
		__fillSideColor() {
			this.spriteSide.graphics.clear(!0);
			for (let t = 0; t <= this.spriteSide.width; t++)
				for (let e = 0; e <= this.spriteSide.height; e++) {
					let a = this.__getSideColorByPos(t, e),
						i = `#${this.__toHex(a.r)}${this.__toHex(a.g)}${this.__toHex(a.b)}`;
					this.spriteSide.graphics.drawRect(t, e, 1, 1, i)
				}
		}
		__fillMainColor() {
			this.spriteMain.graphics.clear(!0);
			for (let t = 0; t <= this.spriteMain.width; t++)
				for (let e = 0; e <= this.spriteMain.height; e++) {
					let a = this.__getMainColorByPos(t, e),
						i = `#${this.__toHex(a.r)}${this.__toHex(a.g)}${this.__toHex(a.b)}`;
					this.spriteMain.graphics.drawRect(t, e, 1, 1, i)
				}
		}
		__fillCurColor() {
			let t = this.__colorToHex(this.curColor);
			this.labelInput.text = t, this.spriteColor.graphics.clear(!0), this.spriteColor.graphics.drawRect(0, 0, 30, 30, t)
		}
		__getSideColorByPos(t, e) {
			let a = this.spriteSide.height;
			if (e < 0 || e > a) return new Laya.Color(0, 0, 0, 0);
			let i = [255, 255, 0, 0, 0, 255, 255],
				s = [0, 255, 255, 255, 0, 0, 0],
				n = [0, 0, 0, 255, 255, 255, 0],
				o = e / a;
			for (let t = 1; t <= 6; t++)
				if (o <= t / 6) {
					let e = (o - (t - 1) / 6) / (1 / 6);
					return new Laya.Color(Math.floor(i[t - 1] * (1 - e) + i[t] * e), Math.floor(s[t - 1] * (1 - e) + s[t] * e), Math.floor(n[t - 1] * (1 - e) + n[t] * e))
				}
		}
		__getMainColorByPos(t, e) {
			let a = t / this.spriteMain.width,
				i = e / this.spriteMain.height,
				s = 255 * (1 - a) + this.mainColor.r * a,
				n = 255 * (1 - a) + this.mainColor.g * a,
				o = 255 * (1 - a) + this.mainColor.b * a;
			return s = s * (1 - i) + 0 * i, n = n * (1 - i) + 0 * i, o = o * (1 - i) + 0 * i, s = Math.floor(s), n = Math.floor(n), o = Math.floor(o), new Laya.Color(s, n, o)
		}
		__colorToHex(t) {
			return `#${this.__toHex(t.r)}${this.__toHex(t.g)}${this.__toHex(t.b)}`
		}
		__toHex(t) {
			let e = 0;
			for (; t >= 16;) e++, t -= 16;
			let a = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
			return a[e] + a[t]
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), e.on(Laya.Event.CLICK, this, this.close);
			let a = (new Laya.Sprite).size(400, 400).pos(0, _G.canvasHeight - 400);
			e.addChild(a), a.on(Laya.Event.CLICK, this, function(t) {
				t.stopPropagation()
			}), this.spriteMain = new Laya.Sprite, e.addChild(this.spriteMain), this.spriteMain.size(200, 200), this.spriteMain.pos(10, _G.canvasHeight - 260, !0), this.spriteSide = new Laya.Sprite, e.addChild(this.spriteSide), this.spriteSide.size(40, 200), this.spriteSide.pos(220, _G.canvasHeight - 260, !0), this.spriteColor = new Laya.Sprite, e.addChild(this.spriteColor), this.spriteColor.size(30, 30), this.spriteColor.pos(30, _G.canvasHeight - 40, !0), this.labelInput = debug_ui.create_input("颜色", 80, _G.canvasHeight - 50, 150), e.addChild(this.labelInput), this.createFromNode(e)
		}
	}
	const ITEM_WIDTH = 180,
		SLIDER_WIDTH = 160,
		SLIDER_HEIGHT = 20;
	var debug_ui;
	! function(t) {
		t.DebugBase = class extends PanelBase3D {
			constructor() {
				super(...arguments), this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.bResetRootNode = !1
			}
			create(e) {
				e && e(!0);
				let a = (new Laya.Sprite).size(_G.canvasWidth, _G.canvasHeight).loadImage("res/alpha_mask.png");
				a.addChild(t.create_btn("X", this, this.close, 80, 80).pos(10, 10)), this.createFromNode(a)
			}
		};
		t.scroll_item = class extends ViewBase {
			constructor(t, e, a) {
				super(), this.resourceName = "scroll_item";
				let i = new Laya.Sprite;
				i.size(t, e), UiHelper.addScrollViewClick(i, () => {
					a(this.idx, this)
				});
				let s = create_label(t / 2, e / 2, t, 24);
				s.anchorX = .5, s.anchorY = .5, i.addChild(s), this.label = s, this.createFromNode(i)
			}
			onCreateComplete() {}
			setData(t, e) {
				this.label.text = t, this.idx = e
			}
		};

		function create_label(t = 0, e = 0, a, i = 20, s = "#ffffff") {
			let n = new Laya.Label;
			return null != a ? (n.width = a, n.wordWrap = !0) : n.wordWrap = !1, n.fontSize = i, n.color = s, n.pos(t, e, !0), n
		}

		function create_tab(t, e, a, i) {
			var s = new Laya.Tab;
			s.skin = GConfig.img_single_color;
			let n = i.join(",");
			s.labels = n, s.labelSize = 20, s.selectHandler = new Laya.Handler(e, a);
			for (let e = s.numChildren - 1; e >= 0; e--) s.getChildAt(e).size(t || 80, 50);
			return s.space = 5, s
		}

		function create_slider(t, e, a, i, s, n, o) {
			let r = new(t ? Laya.HSlider : Laya.VSlider)("res/debug/hslider.png");
			return t ? r.width = s : r.height = s, o && (t ? r.getChildAt(0).height = o : r.getChildAt(0).width = o), r.min = e, r.max = a, r.value = 0, r.tick = i, r.changeHandler = new Laya.Handler(r, n), r
		}

		function create_checkbox(t, e = "") {
			var a = new Laya.CheckBox("res/debug/checkbox.png");
			return a.labelSize = 20, a.labelPadding = "3,0,0,5", a.label = e, a.on(Laya.Event.CHANGE, a, t), a
		}
		t.scroll_toggle_item = class extends ViewBase {
			constructor(t, e, a, i) {
				super(), this.resourceName = "scroll_toggle_item";
				let s = new Laya.Sprite;
				s.size(t, e), UiHelper.addScrollViewClick(s, () => {
					a(this.idx, this)
				});
				let n = create_checkbox(() => {
					i(this.idx, n.selected, this)
				});
				s.addChild(n), this.checkbox = n;
				let o = create_label(32, 0, t - 32, 24);
				s.addChild(o), this.label = o, this.createFromNode(s)
			}
			onCreateComplete() {}
			setData(t, e, a) {
				this.label.text = t, this.idx = e, this.checkbox.selected = a
			}
		}, t.create_btn = function(t, e, a, i, s) {
			let n = new Laya.Button(GConfig.img_single_color, t);
			return n.labelSize = 20, n.size(i || 100, s || 50), n.clickHandler = Laya.Handler.create(e, a, null, !1), n
		}, t.create_label = create_label, t.create_click_label = function(t, e, a, i, s, n, o) {
			let r = create_label(e, a, n, o);
			return r.text = t, UiHelper.addScrollViewClick(r, s.bind(i)), r
		}, t.create_input = function(t, e, a, i) {
			let s = new Laya.TextInput(t);
			return s.fontSize = 30, s.size(i || 80, 50), s.skin = GConfig.img_single_color, s.pos(e, a, !0), s
		}, t.create_tab = create_tab, t.create_slider = create_slider, t.create_checkbox = create_checkbox;
		class e extends Laya.Label {
			constructor(t, e) {
				super(t), this.fontSize = 20, this.color = "#ffffff", this.wordWrap = !1, this.propName = e, UiHelper.addScrollViewClick(this, this.onClick.bind(this))
			}
			setObject(t, e) {
				this.object = t, this.objectData = e, this.onRefresh()
			}
		}
		t.PropEditorBase = e;
		t.ColorEditor = class extends e {
			constructor(t, e) {
				super(t, e), this.size(SLIDER_WIDTH, SLIDER_HEIGHT), this.colorSprite = this.addChild(new Laya.Sprite).pos(150, 0, !0)
			}
			onClick() {
				mgrPanel.openPanelWithFadeIn(DebugColorSelector, {
					colorChange: this.onColorChange.bind(this)
				})
			}
			onRefresh() {
				this.colorSprite.graphics.drawRect(0, 0, 20, 20, this.convertVecToColor(this.object[this.propName]))
			}
			onColorChange(t) {
				let e = new Laya.Vector4(t.r / 255, t.g / 255, t.b / 255, 1);
				this.object[this.propName] = e, this.objectData[this.propName] = this.convertColorToArr(e), this.onRefresh()
			}
			convertColorToArr(t) {
				return [Mathf.round(t.x, 2), Mathf.round(t.y, 2), Mathf.round(t.z, 2), Mathf.round(t.w, 2)]
			}
			convertVecToColor(t) {
				return Tools.toHexColor(new Laya.Color(Math.floor(255 * t.x), Math.floor(255 * t.y), Math.floor(255 * t.z)))
			}
		};
		t.SliderEditor = class extends e {
			constructor(t, e, a = [0, 1, 2]) {
				super(t, e), this.nameString = t, this.size(SLIDER_WIDTH, 2 * SLIDER_HEIGHT + 5);
				let i = a[0],
					s = a[1],
					n = Math.pow(.1, a[2]);
				this.digits = a[2], this.slider = this.addChild(create_slider(!0, i, s, n, SLIDER_WIDTH, this.onSliderChange.bind(this), SLIDER_HEIGHT)), this.slider.pos(0, SLIDER_HEIGHT + 5)
			}
			onClick() {}
			onRefresh() {
				let t = Mathf.round(this.object[this.propName], this.digits);
				this.text = `${this.nameString}[${t}]`, this.slider.value = t
			}
			onSliderChange(t) {
				t = Mathf.round(t, 2), this.object[this.propName] = t, this.objectData[this.propName] = t, this.onRefresh()
			}
		};
		t.TabEditor = class extends e {
			constructor(t, e, a) {
				super("", e), this.size(SLIDER_WIDTH, SLIDER_HEIGHT), this.tab = this.addChild(create_tab(80, this, this.onToggle.bind(this), a))
			}
			onClick() {}
			onRefresh() {
				this.tab.selectedIndex = this.object[this.propName]
			}
			onToggle(t) {
				this.object[this.propName] = t, this.objectData[this.propName] = t, this.onRefresh()
			}
		};
		t.PropEditorGroup = class extends Laya.Sprite {
			constructor(t) {
				super(), this.propEditors = [];
				let e = this.addComponent(UIHVLayout);
				e.align = "head", e.horizon = !1, e.space = 5, this.editLayout = e;
				for (let e = 0; e < t.length; e++) this.createPropItem(t[e])
			}
			createPropItem(t) {
				let e = t[0],
					a = t[1],
					i = t[2],
					s = t[3];
				s ? this.propEditors.push(this.editLayout.addChild(new e(a, i, s))) : this.propEditors.push(this.editLayout.addChild(new e(a, i)))
			}
			setObject(t, e) {
				for (let a = 0; a < this.propEditors.length; a++) this.propEditors[a].setObject(t, e)
			}
		}
	}(debug_ui || (debug_ui = {}));
	const spine_w = 240,
		anim_w = 100,
		item_h = 50;
	class DebugSpine extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "DebugMain", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.curFrame = 0, this.totalFrame = 0, this.loop = !0
		}
		buildUi() {
			let t = [],
				e = 0;
			this.spineScroll.onItemCreate = (() => new debug_ui.scroll_item(spine_w, item_h, a => {
				e = a;
				let i = t[a];
				this.animScroll.updateList(i.anims.length), this._timer && (this._timer.stop(), this._timer = null), this._spriteXiuBiao && (this._spriteXiuBiao.destroy(), this._spriteXiuBiao = null), this.clearSpine(), this._spine = _G.poolManager.get(Spine, i.spineId), this._spine.setParent(this.animNode), this._spine.setScale(2, 2), 0 == i.anims.length && this._spine.callIfLoaded(() => {
					let t = this._spine.getSkeleton(),
						e = t.getAnimNum();
					for (let a = 0; a < e; a++) i.anims.push(t.getAniNameByIndex(a));
					this.animScroll.updateList(i.anims.length)
				}), this.animInfo.text = `[${i.spineId}]`, this.totalFrame = 0, this.curFrame = 0, this.refreshFrameInfo()
			})), this.spineScroll.onItemChange = ((e, a) => {
				e.setData(t[a].spineId, a)
			}), this.spineScroll.onItemClear = function(t) {
				t.dispose()
			}, this.animScroll.onItemCreate = (() => new debug_ui.scroll_item(anim_w, item_h, a => {
				if (this._spine) {
					let i = t[e];
					this._spine.play(i.anims[a], this.loop), this.animInfo.text = `[${i.spineId}] [${i.anims[a]}]`;
					let s = this._spine.getSkeleton();
					this.totalFrame = s.total, this.curFrame = 0, this.refreshFrameInfo()
				}
			})), this.animScroll.onItemChange = ((a, i) => {
				let s = t[e];
				a.setData(s.anims[i], i)
			});
			let a = db.get_spine_db_map();
			for (const e in a) {
				let a = {
					spineId: e,
					anims: []
				};
				t.push(a)
			}
			this.spineScroll.updateList(t.length)
		}
		dispose() {
			this.clearSpine(), this.spineScroll && this.spineScroll.clearAllItems(), this.animScroll && this.animScroll.clearAllItems(), super.dispose()
		}
		clearSpine() {
			this._spine && (_G.poolManager.put(this._spine), this._spine = null)
		}
		onClickPreFrame() {
			this.totalFrame > 0 ? (this.curFrame--, this.curFrame < 0 && (this.curFrame = this.totalFrame), this._spine.getSkeleton().index = this.curFrame, this.refreshFrameInfo()) : this.frameInfo.text = "帧数异常."
		}
		onClickNextFrame() {
			this.totalFrame > 0 ? (this.curFrame++, this.curFrame > this.totalFrame && (this.curFrame = 0), this._spine.getSkeleton().index = this.curFrame, this.refreshFrameInfo()) : this.frameInfo.text = "帧数异常."
		}
		onClickLoop() {
			this.loop = !this.loop, console.log("loop:", this.loop)
		}
		onClickCreateXiuBiao() {
			if (this._spine && !this._spriteXiuBiao) {
				let t = this._spine.getSkeleton().templet.mBoneArr,
					e = new Laya.Sprite;
				e.size(26, 33), e.pivot(e.width / 2, e.height / 2), this._spine.addChild(e), e.loadImage(`res/icon_class_level/icon_0${Mathf.random(3)}.png`), this._spriteXiuBiao = e, this._timer = Timer.callLoopFrame(1, () => {
					for (let i = 0; i < t.length; i++) {
						const s = t[i];
						if (s && "xiubiao" == s.name) {
							e.x = s.resultMatrix.tx, e.y = s.resultMatrix.ty;
							var a = 180 * Math.atan2(s.resultMatrix.b, s.resultMatrix.a) / Math.PI;
							e.rotation = a - 90
						}
					}
				}, this)
			}
		}
		refreshFrameInfo() {
			this.frameInfo.text = `${this.curFrame}/${this.totalFrame}`
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight);
			let a = new Laya.Image("res/alpha_mask.png");
			a.size(_G.canvasWidth, _G.canvasHeight), e.addChild(a);
			let i = new Laya.Sprite;
			i.size(spine_w, 500), i.pos(100, 50), e.addChild(i);
			let s = i.addComponent(ReuseScrollList);
			s.vertical = !0, s.itemWidth = spine_w, s.itemHeight = item_h, this.spineScroll = s;
			let n = new Laya.Sprite;
			n.size(anim_w, 300), n.pos(360, 50), e.addChild(n);
			let o = n.addComponent(ReuseScrollList);
			o.vertical = !0, o.itemWidth = anim_w, o.itemHeight = item_h, this.animScroll = o;
			let r = debug_ui.create_btn("X", this, this.close, 80, 80).pos(10, 10);
			e.addChild(r), this.animNode = new Laya.Sprite, this.animNode.texture = UiHelper.WHITE_TEXTURE, this.animNode.size(2, 2), this.animNode.pos(_G.canvasWidth / 2, _G.canvasHeight - 100), e.addChild(this.animNode);
			let l = debug_ui.create_label(_G.canvasWidth / 2, 600, _G.canvasWidth, 30);
			l.anchorX = .5, l.anchorY = .5, l.align = "center", e.addChild(l), this.animInfo = l;
			let c = debug_ui.create_label(_G.canvasWidth / 2 - 150, _G.canvasHeight - 150, null, 30);
			c.anchorX = .5, c.anchorY = .5, e.addChild(c), this.frameInfo = c, e.addChild(debug_ui.create_btn("前一帧", this, this.onClickPreFrame).pos(_G.canvasWidth / 2 - 150, _G.canvasHeight - 150)), e.addChild(debug_ui.create_btn("后一帧", this, this.onClickNextFrame).pos(_G.canvasWidth / 2, _G.canvasHeight - 150)), e.addChild(debug_ui.create_btn("循环", this, this.onClickLoop).pos(_G.canvasWidth / 2 + 150, _G.canvasHeight - 150)), e.addChild(debug_ui.create_btn("创建袖标", this, this.onClickCreateXiuBiao).pos(_G.canvasWidth / 2 + 150, _G.canvasHeight - 250)), this.createFromNode(e)
		}
	}
	class DebugQuest extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "DebugQuest", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.curSelectQuest = ""
		}
		buildUi() {
			this.questScroll.onItemCreate = (() => new debug_ui.scroll_item(400, 50, t => {
				this.curSelectQuest = this.allQuest[t], this.refreshCurQuestInfo()
			})), this.questScroll.onItemChange = ((t, e) => {
				let a = db.get_quest_db(this.allQuest[e]);
				t.setData(`[${a.id}]:[${a.name}]`, e)
			});
			let t = [];
			Tools.forEachMap(db.get_quest_db_map(), function(e, a) {
				t.push(e)
			}), this.allQuest = t, this.questScroll.updateList(t.length)
		}
		dispose() {
			this.questScroll.clearAllItems(), super.dispose()
		}
		onDoQuest() {
			if (!BaseFacade.mQuest.query(this.curSelectQuest)) return void _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `未接此任务[${this.curSelectQuest}]`);
			let t = db.get_quest_db(this.curSelectQuest),
				e = this.inputBox.text,
				a = parseInt(e);
			if (a) {
				for (let e = 0; e < t.goals.length; e++) {
					let i = db.get_goal_db(t.goals[e]);
					BaseFacade.mGoal.commit(i.actionId, a, i.targetId), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `完成目标[${i.id}][${a}]次.`)
				}
				this.refreshCurQuestInfo()
			}
		}
		onFinishQuest() {
			if (!BaseFacade.mQuest.query(this.curSelectQuest)) return void _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `未接此任务[${this.curSelectQuest}]`);
			let t = db.get_quest_db(this.curSelectQuest);
			for (let e = 0; e < t.goals.length; e++) {
				let a = db.get_goal_db(t.goals[e]),
					i = BaseFacade.mQuest.getDeltaValue(t.id, e);
				BaseFacade.mGoal.commit(a.actionId, i, a.targetId), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `完成目标[${a.id}][${i}]次.`)
			}
			this.refreshCurQuestInfo()
		}
		onCommitQuest() {
			if (!BaseFacade.mQuest.query(this.curSelectQuest)) return void _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `未接此任务[${this.curSelectQuest}]`);
			let t = BaseFacade.mQuest.commit(this.curSelectQuest);
			t && 0 != t.length || _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `没有奖励或者任务失败[${this.curSelectQuest}]`), this.refreshCurQuestInfo()
		}
		onCancelQuest() {
			BaseFacade.mQuest.query(this.curSelectQuest) ? (BaseFacade.mQuest.cancel(this.curSelectQuest), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `取消成功[${this.curSelectQuest}]`), this.refreshCurQuestInfo()) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `未接此任务[${this.curSelectQuest}]`)
		}
		onClickShow() {
			let t = db.get_quest_db_map();
			Tools.forEachMap(t, function(t, e) {
				let a = BaseFacade.mQuest.query(t);
				if (a) {
					let i = a.state,
						s = BaseFacade.mQuest.getCurValue(t),
						n = BaseFacade.mQuest.getDbValue(t);
					console.log(`[${t}][${e.name}] - [${QUEST_STATE[i]}][${s}/${n}]`)
				} else console.log(`[${t}][${e.name}] - [empty][empty]`)
			})
		}
		refreshCurQuestInfo() {
			let t = this.curSelectQuest,
				e = db.get_quest_db(t),
				a = BaseFacade.mQuest.query(t);
			if (a) {
				let i = a.state,
					s = BaseFacade.mQuest.getCurValue(t),
					n = BaseFacade.mQuest.getDbValue(t);
				this.questInfo.changeText(`[${t}][${e.name}] - [${QUEST_STATE[i]}][${s}/${n}]`)
			} else this.questInfo.changeText(`[${t}][${e.name}] - [empty][empty]`)
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight);
			let a = new Laya.Image("res/alpha_mask.png");
			a.size(_G.canvasWidth, _G.canvasHeight), e.addChild(a);
			let i = new Laya.Sprite;
			i.size(400, 700), i.pos(100, 50), e.addChild(i);
			let s = i.addComponent(ReuseScrollList);
			s.vertical = !0, s.itemWidth = 400, s.itemHeight = 50, this.questScroll = s;
			let n = debug_ui.create_btn("X", this, this.close, 80, 80).pos(10, 10);
			e.addChild(n);
			let o = debug_ui.create_label(10, 800, 500);
			e.addChild(o), this.questInfo = o, this.inputBox = debug_ui.create_input("1", 10, 850), e.addChild(this.inputBox);
			let r = debug_ui.create_btn("做任务", this, this.onDoQuest).pos(100, 850);
			e.addChild(r);
			let l = debug_ui.create_btn("直接完成", this, this.onFinishQuest).pos(210, 850);
			e.addChild(l);
			let c = debug_ui.create_btn("提交任务", this, this.onCommitQuest).pos(320, 850);
			e.addChild(c);
			let h = debug_ui.create_btn("取消任务", this, this.onCancelQuest).pos(430, 850);
			e.addChild(h);
			let d = debug_ui.create_btn("打印状态", this, this.onClickShow).pos(100, 910);
			e.addChild(d), this.createFromNode(e)
		}
	}
	class DebugItem extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "DebugItem", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0
		}
		buildUi() {
			this.itemScroll.onItemCreate = (() => new debug_ui.scroll_item(400, 50, (t, e) => {
				this._curSelectItem = this._allItems[t];
				let a = db.get_item_db(this._curSelectItem);
				e.setData(`[${a.id}]${a.name}    ${BaseFacade.mItem.getItemCount(a.id)}`, t), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `选中[${a.id}]`)
			})), this.itemScroll.onItemChange = ((t, e) => {
				let a = db.get_item_db(this._allItems[e]);
				t.setData(`[${a.id}]${a.name}    ${BaseFacade.mItem.getItemCount(a.id)}`, e)
			})
		}
		dispose() {
			this.itemScroll && this.itemScroll.clearAllItems(), super.dispose()
		}
		onSelectType(t) {
			this._selectIdx = t, this._curItemType = t + 1;
			let e = [],
				a = db.get_item_db_map();
			Tools.forEachMap(a, (t, a) => {
				a.type == this._curItemType && e.push(t)
			}), this._allItems = e, this.itemScroll.updateList(e.length)
		}
		onClickAddItem() {
			let t = parseInt(this.inputBox.text);
			this._curSelectItem && t && (t > 0 ? BaseFacade.mItem.addItem(this._curSelectItem, t, 2) : BaseFacade.mItem.subItem(this._curSelectItem, -t, 2), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `改变[${this._curSelectItem}]数量${t}`), this.onSelectType(this._selectIdx))
		}
		onClickLvup() {
			if (this._curSelectItem) {
				BaseFacade.mUp.lvupAttr(this._curSelectItem, UpAttrName.Base, !0);
				let t = db.get_item_db(this._curSelectItem);
				_G.sendMsg(BASE_MSG.UI_SHOW_TIP, `升级[${this._curSelectItem}]${t.name}`)
			}
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), this.mask = e.addChild((new Laya.Sprite).loadImage("res/alpha_mask.png"));
			let a = debug_ui.create_tab(80, this, this.onSelectType, ["货币", "物品", "掉落", "养成", "特殊"]);
			a.pos(100, 10, !0), e.addChild(a);
			let i = new Laya.Sprite;
			i.size(400, 700), i.pos(100, 100), e.addChild(i);
			let s = i.addComponent(ReuseScrollList);
			s.vertical = !0, s.itemWidth = 400, s.itemHeight = 50, this.itemScroll = s;
			let n = debug_ui.create_btn("X", this, this.close, 80, 80).pos(10, 10);
			e.addChild(n);
			let o = debug_ui.create_label(10, 850, 500);
			e.addChild(o), this.itemInfo = o, this.inputBox = debug_ui.create_input("1", 10, 900), e.addChild(this.inputBox);
			let r = debug_ui.create_btn("添加物品", this, this.onClickAddItem).pos(100, 900);
			e.addChild(r);
			let l = debug_ui.create_btn("升级", this, this.onClickLvup).pos(210, 900);
			e.addChild(l), this.createFromNode(e)
		}
	}
	class DebugLevel extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "DebugLevel", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0
		}
		buildUi() {
			let t = db.get_level_db_arr();
			this.levelScroll.onItemCreate = (() => new debug_ui.scroll_item(50, 50, t => {
				mgrLevel.setLastLevel(0, t), this.close()
			})), this.levelScroll.onItemChange = ((t, e) => {
				t.setData(e + 1 + "", e)
			}), this.levelScroll.updateList(t.length)
		}
		dispose() {
			this.levelScroll.clearAllItems(), super.dispose()
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight);
			let a = new Laya.Image("res/alpha_mask.png");
			a.size(_G.canvasWidth, _G.canvasHeight), e.addChild(a);
			let i = new Laya.Sprite;
			i.size(400, 700), i.pos(100, 100), e.addChild(i);
			let s = i.addComponent(ReuseScrollList);
			s.vertical = !0, s.eachCount = 8, s.itemWidth = 50, s.itemHeight = 50, this.levelScroll = s;
			let n = debug_ui.create_btn("X", this, this.close, 80, 80).pos(10, 10);
			e.addChild(n), this.createFromNode(e)
		}
	}
	class DebugDraw extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "DebugDraw", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0
		}
		buildUi() {
			this.createScene3DBack(2, 60), this.camera.transform.localPosition = new Laya.Vector3(0, 1.45, .5), this.camera.transform.localRotationEuler = new Laya.Vector3(2, 0, 0), this.init()
		}
		dispose() {
			this._renderMask && (this._renderMask.dispose(), this._renderMask = null), this._model && this._model.dispose(), super.dispose()
		}
		init() {
			console.log("---- init.");
			let t = new RenderMask(this.camera);
			this._renderMask = t;
			let e = !1;
			UiHelper.registerTouchEvent(this.resNode, () => {
				e = !0
			}, () => {
				e && t.drawBrush()
			}, function() {
				e = !1, t.endDraw()
			}), this._renderMask.setBrush("10"); {
				let t = new GModel("face");
				this._model = t, t.setParent(this.scene3DBack), t.create(), t.initPaint(), t.initAnimator(), t.setLayer(2), t.callIfLoaded(() => {
					let e = t.node;
					e.transform.localPosition = new Laya.Vector3(0, 0, 0), e.transform.localRotationEuler = new Laya.Vector3(0, 0, 0);
					let a = "res/ui/pnl_loading/loading_bg2.jpg";
					mgrRes.loadRes(a, RES_TYPE.TEXTURE2D, e => {
						if (!this._renderMask) return;
						this._renderMask.setPaintMaterail(t, 3, a)
					})
				})
			}
		}
		onClick1() {
			this._renderMask.fillMask(!0)
		}
		onClick2() {
			console.log(this._renderMask.checkPercent(.7, 0))
		}
		onClick3() {
			cc.tween(this._model.transform).to(1, {
				localRotationEulerY: -15
			}).to(1, {
				localRotationEulerY: 15
			}).call(this.onClick3.bind(this)).start()
		}
		onClick4() {
			cc.clearTween(this._model.transform)
		}
		onClick5() {
			let t = new Uint8Array(RenderMask.OUT_BITMAP.length),
				e = RenderMask.CAMERA_RENDER_TARGET;
			var a = Date.now() / 1e3;
			for (let a = 0; a < 1e3; a++) e.getData(0, 0, 1, 1, t);
			var i = Date.now() / 1e3;
			console.log("cost1:", i - a)
		}
		onClick6() {
			let t = new Uint8Array(RenderMask.OUT_BITMAP.length),
				e = RenderMask.CAMERA_RENDER_TARGET;
			var a = Date.now() / 1e3;
			for (let a = 0; a < 1e3; a++) e.getData(0, 0, e.width, e.height, t);
			var i = Date.now() / 1e3;
			console.log("cost2:", i - a)
		}
		onClick7() {
			mgrRes.loadRes("res/texture/sf_noise_clouds_01.png", RES_TYPE.TEXTURE2D, t => {
				for (let e = 0; e < this._model.sharedMaterials.length; e++) {
					let a = this._model.sharedMaterials[e];
					a.transition = 0, a.noiseTexture = t, a.setState(64), cc.tween(a).to(2, {
						transition: 1
					}).start()
				}
			})
		}
		onClick8() {
			mgrRes.loadRes("res/texture/sf_noise_clouds_01.png", RES_TYPE.TEXTURE2D, t => {
				for (let e = 0; e < this._model.sharedMaterials.length; e++) {
					let a = this._model.sharedMaterials[e];
					a.transition = 0, a.noiseTexture = t, a.setState(128), cc.tween(a).to(2, {
						transition: 1
					}).start()
				}
			})
		}
		onClick9() {
			this._renderMask.debugMesh()
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), this.mask = e.addChild((new Laya.Sprite).loadImage("res/alpha_mask.png")), e.addChild(debug_ui.create_btn("X", this, this.close, 50, 50).pos(10, 10));
			let a = e.addChild((new Laya.Sprite).pos(80, 10, !0)).addComponent(UIHVLayout);
			a.align = "head", a.horizon = !0, a.addChild(debug_ui.create_btn("btn1", this, this.onClick1, 50, 30)), a.addChild(debug_ui.create_btn("btn2", this, this.onClick2, 50, 30)), a.addChild(debug_ui.create_btn("btn3", this, this.onClick3, 50, 30)), a.addChild(debug_ui.create_btn("btn4", this, this.onClick4, 50, 30)), a.addChild(debug_ui.create_btn("btn5", this, this.onClick5, 50, 30)), a.addChild(debug_ui.create_btn("btn6", this, this.onClick6, 50, 30)), a.addChild(debug_ui.create_btn("btn7", this, this.onClick7, 50, 30)), a.addChild(debug_ui.create_btn("btn8", this, this.onClick8, 50, 30)), a.addChild(debug_ui.create_btn("btn9", this, this.onClick9, 50, 30)), this.createFromNode(e)
		}
	}
	class NodeOperate extends MsgHandler {
		constructor(t, e, a, i = .002) {
			super(), this.destroyed = !1, this._enable = !0, this.bTouched = !1, this.touchX = 0, this.touchY = 0, this.deltaX = 0, this.deltaY = 0, this.bRot = !1, this.rot = 0, this.x = 0, this.y = 0, this.z = 0, this.moveNode = e, this.rotNode = a, this.screenToWorldRate = i, UiHelper.registerTouchEvent(t, this.onTouchStart.bind(this), this.onTouchMove.bind(this), this.onTouchEnd.bind(this)), this.registerListeners({
				[BASE_MSG.SYS_KEY_DOWN]: this.onMsgSysKeyDown.bind(this),
				[BASE_MSG.SYS_KEY_UP]: this.onMsgSysKeyUp.bind(this)
			}), this.startProcMsg()
		}
		set enable(t) {
			this.destroyed || (this._enable = t, t || this.onTouchEnd())
		}
		get enable() {
			return this._enable
		}
		dispose() {
			this.destroyed = !0, this.stopProcMsg()
		}
		onMsgSysKeyDown(t) {
			this.isCtrl = t.ctrlKey, this.isAlt = t.altKey
		}
		onMsgSysKeyUp(t) {
			this.isCtrl = !1, this.isAlt = !1
		}
		onTouchStart() {
			this._enable && (this.touchX = Laya.stage.mouseX, this.touchY = Laya.stage.mouseY, this.bTouched = !0, this.isCtrl || this.isAlt || this.rotStart())
		}
		onTouchMove() {
			this._enable && this.bTouched && this.rotNode && !this.rotNode.destroyed && (this.deltaX = Laya.stage.mouseX - this.touchX, this.deltaY = Laya.stage.mouseY - this.touchY, this.touchX = Laya.stage.mouseX, this.touchY = Laya.stage.mouseY, this.isCtrl ? this.moveMove() : this.isAlt ? this.scaleMove() : this.rotMove())
		}
		onTouchEnd() {
			this.bTouched && (this.bTouched = !1, this.isCtrl || this.isAlt || this.rotEnd())
		}
		moveMove() {
			let t = this.deltaX * this.screenToWorldRate,
				e = -this.deltaY * this.screenToWorldRate;
			this.moveNode.transform.translate(new Laya.Vector3(t, e, 0), !0)
		}
		scaleMove() {
			let t = this.deltaX * this.screenToWorldRate * 2;
			this.moveNode.transform.translate(new Laya.Vector3(0, 0, t), !0)
		}
		rotStart() {
			this.bRot = !1, this.rot = this.rotNode.transform.localRotationEulerY
		}
		rotMove() {
			Mathf.distanceSqr2(this.deltaX, this.deltaY) > 4 && (this.bRot = !0), this.bRot && (this.rot += this.deltaX / 260 * 360, this.rotNode.transform.localRotationEulerY = this.rot % 360)
		}
		rotEnd() {
			this.bRot || (this.bRot = !1), this.autoRot && cc.tween(this.rotNode.transform, !0).to(.6, {
				localRotationEulerY: 0
			}, cc.OPTION.SINE_IN_OUT).start()
		}
	}
	var Keyboard$1 = Laya.Keyboard;
	const ITEM_WIDTH$1 = 180,
		SLIDER_WIDTH$1 = 160,
		SLIDER_HEIGHT$1 = 20;
	class DebugCartoonMat extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "DebugCartoonMat", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.bResetRootNode = !1, this.originAllModel = [], this.modelList = []
		}
		buildUi() {
			this.propGroup.visible = !1, this.createScene3DBack(1, 25), this.camera.transform.localPosition = new Laya.Vector3(0, 2, 2), this.camera.transform.localRotationEuler = new Laya.Vector3(0, 0, 0), 3 == mgrMaterial.lightRotation.length && (this.lightBack.transform.localRotationEuler = new Laya.Vector3(-10, -11, 25)), this.root = this.scene3DBack.addChild(new Laya.Sprite3D), this.roleRoot = this.root.addChild(new Laya.Sprite3D), Tools.forEachMap(db.get_model_db_map(), (t, e) => {
				0 == e.type && this.originAllModel.push(t)
			}), this.originAllModel.sort(), this.allModels = this.originAllModel.slice(), this.modelScroll.onItemCreate = (() => new debug_ui.scroll_item(ITEM_WIDTH$1, 50, (t, e) => {
				this._model = null;
				for (let e = 0; e < this.modelList.length; e++)
					if (this.modelList[e].modelId == this.allModels[t]) {
						this._model = this.modelList[e];
						break
					} this._modelId = this.allModels[t], this._model || (this._model = _G.poolManager.get(GModel, this.allModels[t]), this._model.setParent(this.roleRoot), this._model.debug_reset_shader()), this.propGroup.visible = !1, this.renderScroll.updateList(0), this.matScroll.updateList(0), this._renderName = null, this._matIndex = null, this._model.callIfLoaded(() => {
					this.refreshAllSkin(this._model.node)
				});
				let a = mgrMaterial.editorConfig.camera[this._modelId];
				a ? (this.root.transform.localPosition.setValue(a[0], a[1], a[2]), this.root.transform.localPosition = this.root.transform.localPosition, this.roleRoot.transform.localRotationEulerY = a[3]) : (this.root.transform.localPosition.setValue(0, 0, 0), this.root.transform.localPosition = this.root.transform.localPosition, this.roleRoot.transform.localRotationEulerY = 0), this.modelList.push(this._model)
			})), this.modelScroll.onItemChange = ((t, e) => {
				let a = db.get_model_db(this.allModels[e]);
				t.setData(a.id, e);
				let i = !!mgrMaterial.materialInfos[a.id];
				t.label.color = i ? "#00ff00" : "#ff0000"
			}), this.renderScroll.onItemCreate = (() => new debug_ui.scroll_item(ITEM_WIDTH$1, 50, (t, e) => {
				this.matScroll.updateList(0), this._matIndex = null, this.onSelectRender(this.allRender[t])
			})), this.renderScroll.onItemChange = ((t, e) => {
				t.setData(this.allRender[e], e);
				let a = !(!mgrMaterial.materialInfos[this._modelId] || !mgrMaterial.materialInfos[this._modelId][this.allRender[e]]);
				t.label.color = a ? "#00ff00" : "#ff0000"
			}), this.matScroll.onItemCreate = (() => new debug_ui.scroll_item(ITEM_WIDTH$1, 50, (t, e) => {
				this.propGroup.visible = !0, this.onSelectMat(t)
			})), this.matScroll.onItemChange = ((t, e) => {
				if (t.setData(this.allMat[e], e), this._model) {
					let a = mgrMaterial.materialInfos[this._modelId] && mgrMaterial.materialInfos[this._modelId][this._renderName] && mgrMaterial.materialInfos[this._modelId][this._renderName][e];
					t.label.color = a ? "#00ff00" : "#ff0000"
				}
			}), this.modelScroll.updateList(this.allModels.length), this.registerMsg({
				[BASE_MSG.SYS_KEY_DOWN]: t => {
					switch (t.ctrlKey ? Keyboard$1.CONTROL * t.keyCode : t.keyCode) {
						case Keyboard$1.LEFT:
							this.lightBack.transform.rotate(new Laya.Vector3(0, 3, 0), !1, !1);
							break;
						case Keyboard$1.RIGHT:
							this.lightBack.transform.rotate(new Laya.Vector3(0, -3, 0), !1, !1);
							break;
						case Keyboard$1.UP:
							this.lightBack.transform.rotate(new Laya.Vector3(3, 0, 0), !1, !1);
							break;
						case Keyboard$1.DOWN:
							this.lightBack.transform.rotate(new Laya.Vector3(-3, 0, 0), !1, !1);
							break;
						case Keyboard$1.NUMBER_8:
						case Keyboard$1.NUMBER_2:
						case Keyboard$1.NUMBER_1:
						case Keyboard$1.NUMBER_3:
							break;
						case Keyboard$1.CONTROL * Keyboard$1.NUMBER_2:
							let e = this.modelList[0];
							if (e) {
								this.root.transform.position = new Laya.Vector3;
								let t = UiHelper.findMeshSprite(e.resNode, !0),
									a = [];
								t.meshFilter.sharedMesh.getPositions(a), Laya.Vector3.transformCoordinate(a[0], t.transform.worldMatrix, a[0]);
								let i = this.root.transform.position.clone();
								i.x = -a[0].x, i.y = a[0].y, this.root.transform.position = i
							}
							break;
						case Keyboard$1.CONTROL * Keyboard$1.C:
							if (!this._modelId) return;
							if (!this._renderName) return;
							this.clipboard = Tools.deepCopy(mgrMaterial.getMaterial(this._modelId, this._renderName, this._matIndex)), mgrAlert.alertText("复制成功!");
							break;
						case Keyboard$1.CONTROL * Keyboard$1.V:
							if (!this._modelId) return;
							if (!this._renderName) return;
							if (!this.clipboard) return;
							mgrAlert.alertText("粘贴成功!"), mgrMaterial.setMaterial(this._modelId, this._renderName, this._matIndex, Tools.deepCopy(this.clipboard)), this.onSelectMat(this._matIndex);
							break;
						case Keyboard$1.CONTROL * Keyboard$1.NUMBER_1:
							let a = this.lightBack.transform.localRotationEuler;
							mgrMaterial.lightRotation[0] = Mathf.round(a.x, 2), mgrMaterial.lightRotation[1] = Mathf.round(a.y, 2), mgrMaterial.lightRotation[2] = Mathf.round(a.z, 2);
							let i = this.root.transform.localPosition;
							mgrMaterial.editorConfig.camera[this._modelId] = [i.x, i.y, i.z, this.roleRoot.transform.localRotationEulerY], mgrMaterial.saveToLocal();
							break;
						case Laya.Keyboard.NUMPAD_8:
							this.lightBack.transform.localRotationEulerX -= 1;
							break;
						case Laya.Keyboard.NUMPAD_2:
							this.lightBack.transform.localRotationEulerX += 1;
							break;
						case Laya.Keyboard.NUMPAD_4:
							this.lightBack.transform.localRotationEulerY -= 1;
							break;
						case Laya.Keyboard.NUMPAD_6:
							this.lightBack.transform.localRotationEulerY += 1;
							break;
						case Laya.Keyboard.ESCAPE:
							for (let t = 0; t < this.modelList.length; t++) _G.poolManager.put(this.modelList[t]);
							this.modelList.length = 0, this._model = null, this._modelId = null, this.propGroup.visible = !1, this.renderScroll.updateList(0), this.matScroll.updateList(0)
					}
				}
			}), this.startProcMsg(), this.initTouch()
		}
		initTouch() {
			this.nodeOpt = new NodeOperate(this.touchNode, this.root, this.roleRoot)
		}
		refreshAllSkin(t) {
			let e = [];
			for (let a = 0; a < t.numChildren; a++) {
				let i = t.getChildAt(a);
				(i.skinnedMeshRenderer || i.meshRenderer) && e.push(i.name)
			}
			this.allRender = e, this.renderScroll.updateList(e.length)
		}
		onSelectRender(t) {
			this._renderName = t;
			let e = this._model.node.getChildByName(t),
				a = (e.skinnedMeshRenderer || e.meshRenderer).sharedMaterials,
				i = [];
			for (let t = 0; t < a.length; t++) i.push(a[t].name);
			this.allMat = i, this.matScroll.updateList(i.length)
		}
		onSelectMat(t) {
			this._matIndex = t;
			let e = this._model.node.getChildByName(this._renderName),
				a = e.skinnedMeshRenderer || e.meshRenderer,
				i = (a.sharedMaterials, mgrMaterial.__setCartonMaterial(a, this._modelId, this._renderName, !0)[t]);
			this.operatingMaterialData = mgrMaterial.getMaterial(this._modelId, this._renderName, t, !0), this.operatingMaterial = i, this.propGroup.setObject(this.operatingMaterial, this.operatingMaterialData)
		}
		onInput(t) {
			let e = [],
				a = t.text;
			if (a) {
				for (let t = 0; t < this.originAllModel.length; t++) ~this.originAllModel[t].indexOf(a) && e.push(this.originAllModel[t]);
				this.allModels = e
			} else this.allModels = this.originAllModel.slice();
			this.modelScroll.updateList(this.allModels.length)
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), e.addChild(new Laya.Image("res/alpha_mask.png")).size(_G.canvasWidth, _G.canvasHeight), this.touchNode = e.addChild(new Laya.Sprite).size(_G.canvasWidth, _G.canvasHeight);
			let a = e.addChild(new Laya.Sprite),
				i = debug_ui.create_btn("X", this, this.close, 50, 50).pos(10, 10);
			a.addChild(i);
			let s = [
				[debug_ui.ColorEditor, "漫反射颜色", "albedoColor"],
				[debug_ui.SliderEditor, "漫反射亮度", "albedoIdentity"],
				[debug_ui.SliderEditor, "阴影范围", "shadowRange"],
				[debug_ui.SliderEditor, "阴影强度", "shadowIntensity"],
				[debug_ui.ColorEditor, "阴影颜色", "shadowColor"],
				[debug_ui.SliderEditor, "阴影边界", "shadowBoundary"],
				[debug_ui.SliderEditor, "高亮范围", "specularRange"],
				[debug_ui.SliderEditor, "高亮强度", "specularIntensity"],
				[debug_ui.ColorEditor, "高亮颜色", "specularColor"],
				[debug_ui.SliderEditor, "轮廓宽度", "outlineWidth"],
				[debug_ui.SliderEditor, "轮廓强度", "outlineLightness"],
				[debug_ui.ColorEditor, "轮廓颜色", "outlineColor"],
				[debug_ui.SliderEditor, "重影范围", "secondShadowRange"],
				[debug_ui.SliderEditor, "重影强度", "secondShadowIntensity"],
				[debug_ui.ColorEditor, "重影颜色", "secondShadowColor"],
				[debug_ui.SliderEditor, "重影边界", "secondShadowBoundary"],
				[debug_ui.SliderEditor, "边缘高光范围", "EdgeHightRange"],
				[debug_ui.SliderEditor, "边缘高光强度", "EdgeHightIntensity"],
				[debug_ui.ColorEditor, "边缘高光颜色", "EdgeHightColor"],
				[debug_ui.SliderEditor, "边缘高光边界", "EdgeHightBoundary"],
				[debug_ui.SliderEditor, "alphaTestValue", "alphaTestValue"],
				[debug_ui.TabEditor, "", "renderMode", ["不透", "不透双面", "裁剪单面", "裁剪双面", "半透", "半透双面"]]
			];
			this.propGroup = a.addChild(new debug_ui.PropEditorGroup(s)), this.propGroup.pos(10, 70, !0).size(ITEM_WIDTH$1, 1e3);
			let n = a.addChild(debug_ui.create_input("", _G.canvasWidth - ITEM_WIDTH$1 - 10, 10, ITEM_WIDTH$1));
			n.on(Laya.Event.INPUT, this, this.onInput, [n]);
			let o = a.addChild(new Laya.Sprite);
			o.pos(_G.canvasWidth - ITEM_WIDTH$1 - 10, 100, !0), o.size(ITEM_WIDTH$1, 500);
			let r = o.addComponent(ReuseScrollList);
			r.vertical = !0, r.itemWidth = ITEM_WIDTH$1, r.itemHeight = 50, this.modelScroll = r;
			let l = a.addChild(new Laya.Sprite);
			l.pos(_G.canvasWidth - ITEM_WIDTH$1 - 10, 650, !0), l.size(ITEM_WIDTH$1, 150);
			let c = l.addComponent(ReuseScrollList);
			c.vertical = !0, c.itemWidth = ITEM_WIDTH$1, c.itemHeight = 50, this.renderScroll = c;
			let h = a.addChild(new Laya.Sprite);
			h.pos(_G.canvasWidth - ITEM_WIDTH$1 - 10, 850, !0), h.size(ITEM_WIDTH$1, 150);
			let d = h.addComponent(ReuseScrollList);
			d.vertical = !0, d.itemWidth = ITEM_WIDTH$1, d.itemHeight = 50, this.matScroll = d, this.createFromNode(e)
		}
		dispose() {
			this.stopProcMsg(), this.nodeOpt && this.nodeOpt.dispose(), this.modelScroll && this.modelScroll.clearAllItems(), this.renderScroll && this.renderScroll.clearAllItems(), this.matScroll && this.matScroll.clearAllItems();
			for (let t = 0; t < this.modelList.length; t++) _G.poolManager.put(this.modelList[t]);
			this.modelList.length = 0, super.dispose()
		}
	}
	var Keyboard$2 = Laya.Keyboard;
	const SLIDER_WIDTH$2 = 180;
	class DebugDynamicBone extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "DebugCartoonMat", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.bResetRootNode = !1, this.originAllModels = []
		}
		buildUi() {
			GModel.debugShader = !0, this.propGroup.visible = !1, this.createScene3DBack(1, 25), this.camera.transform.localPosition = new Laya.Vector3(0, 2, 2), this.camera.transform.localRotationEuler = new Laya.Vector3(-15, 0, 0), this.root = this.scene3DBack.addChild(new Laya.Sprite3D), this.roleRoot = this.root.addChild(new Laya.Sprite3D), this._avatar = new RoleAvatar, this.roleRoot.addChild(this._avatar), this._avatar.transform.localPosition = new Laya.Vector3(0, .5, 0), this._avatar.transform.localRotationEuler = new Laya.Vector3(0, 10, 0), this.animScroll.onItemCreate = (() => new debug_ui.scroll_item(SLIDER_WIDTH$2, 50, (t, e) => {
				this._avatar && this._avatar.playAnimation(this._anims[t], !0)
			})), this.animScroll.onItemChange = ((t, e) => {
				t.setData(this._anims[e], e)
			}), this.partScroll.onItemCreate = (() => new debug_ui.scroll_item(SLIDER_WIDTH$2, 50, (t, e) => {
				this.onSelectModel(this.allModel[t])
			})), this.partScroll.onItemChange = ((t, e) => {
				let a = this.allModel[e];
				t.setData(a, e);
				let i = mgrMaterial.dynamicBoneInfos[a] && mgrMaterial.dynamicBoneInfos[a].length > 0;
				t.label.color = i ? "#00ff00" : "#ff0000"
			}), this.childScroll.onItemCreate = (() => new debug_ui.scroll_item(SLIDER_WIDTH$2, 50, (t, e) => {
				this._selectChild && this.onSelectChild(this._selectChild.getChildByName(this._children[t]))
			})), this.childScroll.onItemChange = ((t, e) => {
				if (t.setData(this._children[e], e), this._selectChild) {
					let a = this._selectChild.getChildByName(this._children[e]),
						i = this.generateRoute(a, this._selectRoot),
						s = mgrMaterial.hasDynamicBone(this._selectModelId, i);
					t.label.color = s ? "#00ff00" : "#ff0000"
				}
			}), this.registerMsg({
				[BASE_MSG.SYS_KEY_DOWN]: t => {
					switch (t.ctrlKey ? Keyboard$2.CONTROL * t.keyCode : t.keyCode) {
						case Keyboard$2.CONTROL * Keyboard$2.NUMBER_1:
							this.allModel && (mgrMaterial.saveToLocal(), this.partScroll.updateList(this.allModel.length))
					}
				}
			}), this.startProcMsg(), this.initAnim(), this.initParts(), this.initTouch()
		}
		initAnim() {
			this._anims = [], Tools.forEachMap(db.get_animation_face_db_map(), (t, e) => {
				this._anims.push(t)
			}), this.animScroll.updateList(this._anims.length)
		}
		initParts() {
			let t = [];
			Tools.forEachMap(db.get_model_db_map(), function(e, a) {
				a.editType > 0 && (t[a.editType] || (t[a.editType] = []), t[a.editType].push(e))
			});
			for (const e in t) t[e].sort();
			this.originAllModels = t
		}
		initTouch() {
			this.nodeOpt = new NodeOperate(this.touchNode, this.root, this.roleRoot)
		}
		onSelectType(t) {
			this.allModel = this.originAllModels[t + 1], this.allModel ? this.partScroll.updateList(this.allModel.length, 0) : this.partScroll.updateList(0), this.childScroll.updateList(0)
		}
		onSelectModel(t) {
			this.propGroup.visible = !1, this.childScroll.updateList(0), this._selectModelId = null, this._selectRoot = null, this._selectChild = null, this._selectSpeModel && (_G.poolManager.put(this._selectSpeModel), this._selectSpeModel = null), 11 == db.get_model_db(t).editType ? (this._avatar.active = !1, this._selectSpeModel = _G.poolManager.get(GModel, t), this._selectSpeModel.setParent(this.roleRoot), this._selectSpeModel.callIfLoaded(() => {
				this._selectSpeModel.initAnimator(), this._selectModelId = t, this._selectRoot = this._selectSpeModel.node, this.onSelectChild(this._selectRoot)
			})) : (this._avatar.active = !0, this._avatar.debug_add_model(t, e => {
				this._selectModelId = t, e.boneBinder ? this._selectRoot = this._avatar.baseBody.node : this._selectRoot = e.node, this.onSelectChild(this._selectRoot)
			}))
		}
		onSelectChild(t) {
			if (!t) return;
			this._selectChild = t;
			let e = [];
			for (let a = 0; a < t.numChildren; a++) e.push(t.getChildAt(a).name);
			this._children = e, this.childScroll.updateList(e.length);
			let a = this.generateRoute(this._selectChild, this._selectRoot);
			mgrMaterial.hasDynamicBone(this._selectModelId, a) && this.onClickApply()
		}
		onClickBackChild() {
			this._selectChild && (this._selectChild != this._selectRoot ? this.onSelectChild(this._selectChild.parent) : mgrAlert.alertText("已经在根节点了!"))
		}
		onClickIdle() {
			this._avatar && this._avatar.playIdle()
		}
		generateRoute(t, e) {
			if (t == e) return "/";
			let a = [];
			for (; a.unshift(t.name), (t = t.parent) != e;);
			return a.join("/")
		}
		onClickApply() {
			if (!this._selectChild) return;
			this.curBoneManager = this._selectChild.getComponent(BoneManager), this.curBoneManager || (this.curBoneManager = this._selectChild.addComponent(BoneManager));
			let t = this.generateRoute(this._selectChild, this._selectRoot);
			this.curBoneInfo = mgrMaterial.getDynamicBone(this._selectModelId, t), mgrAlert.alertText("应用成功!"), this.setBoneInfo()
		}
		setBoneInfo() {
			this.propGroup.visible = !0;
			let t = new BoneDao(this.curBoneManager, this.curBoneInfo);
			this.propGroup.setObject(t, this.curBoneInfo)
		}
		onClickRemove() {
			if (this._selectChild) {
				let t = this.generateRoute(this._selectChild, this._selectRoot);
				mgrMaterial.removeDynamicBone(this._selectModelId, t);
				let e = this._selectChild.getComponent(BoneManager);
				if (e) return e.destroy(), void mgrAlert.alertText("移除成功!")
			}
			mgrAlert.alertText("没有可移除的对象!")
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), e.addChild(new Laya.Image("res/alpha_mask.png")).size(_G.canvasWidth, _G.canvasHeight), this.touchNode = e.addChild(new Laya.Sprite).size(_G.canvasWidth, _G.canvasHeight), e.addChild(debug_ui.create_btn("X", this, this.close, 50, 50).pos(10, 10));
			let a = [
				[debug_ui.SliderEditor, "位移插值", "df"],
				[debug_ui.SliderEditor, "位移限制", "dl", [0, .1, 2]],
				[debug_ui.SliderEditor, "1级碰撞size", "c1s", [0, .2, 2]],
				[debug_ui.SliderEditor, "2级碰撞size", "c2s", [0, .2, 2]],
				[debug_ui.SliderEditor, "3级碰撞size", "c3s", [0, .2, 2]],
				[debug_ui.SliderEditor, "4级碰撞size", "c4s", [0, .2, 2]],
				[debug_ui.SliderEditor, "5级碰撞size", "c5s", [0, .2, 2]],
				[debug_ui.SliderEditor, "6级碰撞size", "c6s", [0, .2, 2]],
				[debug_ui.SliderEditor, "重力", "gravity", [0, .05, 2]]
			];
			this.propGroup = e.addChild(new debug_ui.PropEditorGroup(a)), this.propGroup.pos(10, 70, !0);
			let i = e.addChild(new Laya.Sprite).size(SLIDER_WIDTH$2, 300).pos(10, 560);
			this.animScroll = i.addComponent(ReuseScrollList), this.animScroll.vertical = !0, this.animScroll.itemWidth = SLIDER_WIDTH$2, this.animScroll.itemHeight = 50;
			let s = e.addChild(new Laya.Sprite).size(SLIDER_WIDTH$2, 600).pos(_G.canvasWidth - SLIDER_WIDTH$2 - 80, 50);
			this.partScroll = s.addComponent(ReuseScrollList), this.partScroll.vertical = !0, this.partScroll.itemWidth = SLIDER_WIDTH$2, this.partScroll.itemHeight = 50, e.addChild(debug_ui.create_btn("应用动态骨骼", this, this.onClickApply, 120, 50).pos(_G.canvasWidth - SLIDER_WIDTH$2 - 80, 660));
			let n = e.addChild(new Laya.Sprite).size(SLIDER_WIDTH$2, 300).pos(_G.canvasWidth - SLIDER_WIDTH$2 - 80, 720);
			this.childScroll = n.addComponent(ReuseScrollList), this.childScroll.vertical = !0, this.childScroll.itemWidth = SLIDER_WIDTH$2, this.childScroll.itemHeight = 50;
			e.addChild(debug_ui.create_tab(60, this, this.onSelectType, ["面饰", "头发", "头饰", "耳饰", "颈饰", "衣服", "鞋子", "袜子", "手饰", "背部", "NPC"]).pos(_G.canvasWidth - 70, 50)).direction = "vertical";
			let o = e.addChild(new Laya.Sprite).pos(10, _G.canvasHeight - 60, !0).addComponent(UIHVLayout);
			o.horizon = !0, o.align = "head", o.space = 5, o.addChild(debug_ui.create_btn("隐藏翅膀", this, () => {
				mgrAlert.alertText("暂无此功能")
			})), o.addChild(debug_ui.create_btn("显示翅膀", this, () => {
				mgrAlert.alertText("暂无此功能")
			})), o.addChild(debug_ui.create_btn("移除", this, this.onClickRemove)), o.addChild(debug_ui.create_btn("返回上一节点", this, this.onClickBackChild)), o.addChild(debug_ui.create_btn("idle", this, this.onClickIdle)), this.createFromNode(e)
		}
		dispose() {
			this.stopProcMsg(), this.nodeOpt && this.nodeOpt.dispose(), this.animScroll && this.animScroll.clearAllItems(), this.partScroll && this.partScroll.clearAllItems(), this.childScroll && this.childScroll.clearAllItems(), this._avatar && this._avatar.destroy(), super.dispose()
		}
	}
	class BoneDao {
		constructor(t, e) {
			this.boneManger = t, this.boneData = e
		}
		get df() {
			return this.boneData.df
		}
		get dl() {
			return this.boneData.dl
		}
		get c1s() {
			return this.boneData.c1s
		}
		get c2s() {
			return this.boneData.c2s
		}
		get c3s() {
			return this.boneData.c3s
		}
		get c4s() {
			return this.boneData.c4s
		}
		get c5s() {
			return this.boneData.c5s
		}
		get c6s() {
			return this.boneData.c6s
		}
		get gravity() {
			return this.boneData.gravity
		}
		set df(t) {
			this.boneManger.setDisplacementFactor(t)
		}
		set dl(t) {
			this.boneManger.setMaxDisplacement(t)
		}
		set c1s(t) {
			this.boneManger.setCollider1Size(t)
		}
		set c2s(t) {
			this.boneManger.setCollider2Size(t)
		}
		set c3s(t) {
			this.boneManger.setCollider3Size(t)
		}
		set c4s(t) {
			this.boneManger.setCollider4Size(t)
		}
		set c5s(t) {
			this.boneManger.setCollider5Size(t)
		}
		set c6s(t) {
			this.boneManger.setCollider6Size(t)
		}
		set gravity(t) {
			this.boneManger.setGravity({
				x: 0,
				y: -t,
				z: 0
			})
		}
	}
	class DebugGuide extends debug_ui.DebugBase {
		constructor() {
			super(...arguments), this.resourceName = "DebugGuide"
		}
		buildUi() {
			let t = new Laya.Sprite;
			t.size(400, 700), t.pos(100, 100), this.addChild(t);
			let e = t.addComponent(ReuseScrollList);
			e.vertical = !0, e.itemWidth = 400, e.itemHeight = 50, this.guideScroll = e;
			let a = debug_ui.create_label(10, 850, 500);
			this.addChild(a), this.guideInfo = a, this.addChild(debug_ui.create_btn("开始", this, this.startGuide)).pos(100, 900), this.addChild(debug_ui.create_btn("移除", this, this.removeGuide)).pos(220, 900);
			let i = [];
			for (const t in GUD_EVENT) i.push(t);
			this.guideScroll.onItemCreate = (() => new debug_ui.scroll_item(400, 50, (t, e) => {
				this._guideId = i[t], this.guideInfo.text = this._guideId
			})), this.guideScroll.onItemChange = ((t, e) => {
				t.setData(i[e], e)
			}), this.guideScroll.updateList(i.length)
		}
		dispose() {
			this.guideScroll.clearAllItems(), super.dispose()
		}
		startGuide() {
			this._guideId && (this.close(), mgrGuide.dispatchGuide(this._guideId))
		}
		removeGuide() {
			this._guideId && (mgrGuide.removeGuide(this._guideId), mgrAlert.alertText(`[${this._guideId}]移除成功`))
		}
		on_click_btnClose() {
			this.close()
		}
	}
	class DebugShader extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "DebugShader", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0
		}
		buildUi() {
			this.createScene3DBack(2, 60), this.camera.transform.localPosition = new Laya.Vector3(0, 0, 2.5), this.camera.transform.localRotationEuler = new Laya.Vector3(2, 0, 0), this.init()
		}
		dispose() {
			this._model && this._model.dispose(), super.dispose()
		}
		init() {
			console.log("---- init.");
			let t = _G.poolManager.get(GModel, db.MODEL_DB_ID.body);
			t.setParent(this.scene3DBack);
			let e = _G.poolManager.get(GModel, db.MODEL_DB_ID.face);
			t.addToChild("Guadian_toufa", e), _G.poolManager.get(GModel, "yll_ip001_yifu").setParent(this.scene3DBack)
		}
		onClick1() {}
		onClick2() {}
		onClick3() {}
		onClick4() {}
		onClick5() {}
		onClick6() {}
		onClick7() {}
		onClick8() {}
		onClick9() {}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight);
			let a = new Laya.Image("res/alpha_mask.png");
			a.size(_G.canvasWidth, _G.canvasHeight), e.addChild(a), e.addChild(debug_ui.create_btn("X", this, this.close, 50, 50).pos(10, 10));
			let i = e.addChild((new Laya.Sprite).pos(80, 10, !0)).addComponent(UIHVLayout);
			i.align = "head", i.horizon = !0, i.addChild(debug_ui.create_btn("btn1", this, this.onClick1, 50, 30)), i.addChild(debug_ui.create_btn("btn2", this, this.onClick2, 50, 30)), i.addChild(debug_ui.create_btn("btn3", this, this.onClick3, 50, 30)), i.addChild(debug_ui.create_btn("btn4", this, this.onClick4, 50, 30)), i.addChild(debug_ui.create_btn("btn5", this, this.onClick5, 50, 30)), i.addChild(debug_ui.create_btn("btn6", this, this.onClick6, 50, 30)), i.addChild(debug_ui.create_btn("btn7", this, this.onClick7, 50, 30)), i.addChild(debug_ui.create_btn("btn8", this, this.onClick8, 50, 30)), i.addChild(debug_ui.create_btn("btn9", this, this.onClick9, 50, 30)), this.createFromNode(e)
		}
	}
	class PanelContract extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelContract.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_contractNode: "UIToggleGroup",
				cc_toggleContract0: "UIToggle",
				cc_spriteContract0: "Laya.Sprite",
				cc_spriteLock0: "Laya.Sprite",
				cc_toggleContract1: "UIToggle",
				cc_spriteContract1: "Laya.Sprite",
				cc_spriteLock1: "Laya.Sprite",
				cc_toggleContract2: "UIToggle",
				cc_spriteContract2: "Laya.Sprite",
				cc_spriteLock2: "Laya.Sprite",
				cc_toggleContract3: "UIToggle",
				cc_spriteContract3: "Laya.Sprite",
				cc_spriteLock3: "Laya.Sprite",
				cc_toggleContract4: "UIToggle",
				cc_spriteContract4: "Laya.Sprite",
				cc_spriteLock4: "Laya.Sprite",
				cc_toggleContract5: "UIToggle",
				cc_spriteContract5: "Laya.Sprite",
				cc_spriteLock5: "Laya.Sprite",
				cc_toggleContract6: "UIToggle",
				cc_spriteContract6: "Laya.Sprite",
				cc_spriteLock6: "Laya.Sprite",
				cc_toggleContract7: "UIToggle",
				cc_toggleContract8: "UIToggle",
				cc_toggleContract9: "UIToggle",
				cc_toggleContract10: "UIToggle",
				cc_toggleContract11: "UIToggle",
				cc_buttonCircle: "UIButton",
				cc_buttonBox: "UIButton",
				cc_buttonOk: "UIButton",
				cc_layoutBtn: "UIHVLayout",
				cc_spriteBtnAdvFlag: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.selectIndex = 0, this.oldContractIdx = null, this.instOrBanner = new AdvInstOrBanner("enter_contract", ""), this.GUIDE_CONTRACT_POS = [{
				x: -168,
				y: -279
			}, {
				x: 0,
				y: -279
			}, {
				x: 168,
				y: -279
			}, {
				x: -168,
				y: -36.5
			}, {
				x: 0,
				y: -36.5
			}, {
				x: 168,
				y: -36.5
			}, {
				x: 0,
				y: 206
			}], this.SWITCH_CONTRACT_POS = [{
				x: -210,
				y: -265
			}, {
				x: -70,
				y: -265
			}, {
				x: 70,
				y: -265
			}, {
				x: 210,
				y: -265
			}, {
				x: -210,
				y: -30
			}, {
				x: -70,
				y: -30
			}, {
				x: 70,
				y: -30
			}, {
				x: 210,
				y: -30
			}, {
				x: -210,
				y: 205
			}, {
				x: -70,
				y: 205
			}, {
				x: 70,
				y: 205
			}, {
				x: 210,
				y: 205
			}], this.GUIDE_CONTRACT_SCALE = .8, this.SWITCH_CONTRACT_SCALE = .8, this.guideFinger = null, this.loadState = 0, this.bClickOk = !1
		}
		static getResLoader(t) {
			let e = new ResLoader;
			return e.add(db.get_animation_db(MODEL_ANIM.FACE_COME).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHENTI_COME).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHENTI_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_COME).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_come).resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.come).resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.wawahe).resPath, RES_TYPE.PREFAB3D), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME01).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME02).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME03).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME01).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME02).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME03).path, RES_TYPE.ANIMATIONCLIP), t && t.bSwitch && (e.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_jiechu).resPath, RES_TYPE.PREFAB3D), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHENTI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_JIECHU).path, RES_TYPE.ANIMATIONCLIP)), e.add("res/ui/PanelContract.json", RES_TYPE.PREFAB2D), e
		}
		static openPanel(t, e = {}) {
			let a = this.getResLoader(e);
			mgrAlert.openWait(a, function() {
				mgrPanel.openPanelWithSingleton(UI_NAME.PanelContract, e, t)
			})
		}
		buildUi() {
			FileRecord.getData("bNewRecord") || mgrAlert.openPanelLoading(UI_NAME.PanelLanguageDialog), this.buttonCircle.node.visible = !1, this.buttonOk.node.visible = !1, this.buttonBox.node.visible = !1, this.oldContractIdx = mgrGame.contractIndex;
			let t = mgrAdv.checkActive("switch_role"),
				e = !1,
				a = [0, 1, 2, 3, 4, 5, 6],
				i = [7, 8, 9, 10, 11];
			if (this.context && this.context.bSwitch) {
				for (let t = 0; t < a.length; t++) {
					let e = a[t],
						i = this["toggleContract" + e.toString()];
					i && (i.node.visible = !0, i.node.x = this.SWITCH_CONTRACT_POS[e].x, i.node.y = this.SWITCH_CONTRACT_POS[e].y, i.node.scaleX = this.SWITCH_CONTRACT_SCALE, i.node.scaleY = this.SWITCH_CONTRACT_SCALE)
				}
				for (let t = 0; t < i.length; t++) {
					let e = i[t],
						a = this["toggleContract" + e.toString()];
					if (a) {
						let t = mgrGame.isContractUnlock(e);
						a.node.getChildByName("spriteLockFateTest").visible = !t, a.node.getChildByName("spriteFateTest").visible = !t, a.node.visible = !0, a.node.x = this.SWITCH_CONTRACT_POS[e].x, a.node.y = this.SWITCH_CONTRACT_POS[e].y, a.node.scaleX = this.SWITCH_CONTRACT_SCALE, a.node.scaleY = this.SWITCH_CONTRACT_SCALE
					}
				}
				GameStatistics.statisOnStageStart(13001)
			} else {
				for (let t = 0; t < a.length; t++) {
					let e = a[t],
						i = this["toggleContract" + e.toString()];
					i && (i.node.visible = !0, i.node.x = this.GUIDE_CONTRACT_POS[e].x, i.node.y = this.GUIDE_CONTRACT_POS[e].y, i.node.scaleX = this.GUIDE_CONTRACT_SCALE, i.node.scaleY = this.GUIDE_CONTRACT_SCALE)
				}
				for (let t = 0; t < i.length; t++) {
					let e = this["toggleContract" + i[t].toString()];
					e && (e.node.visible = !1)
				}
			}
			this.buttonClose.node.visible = this.context && this.context.bSwitch;
			for (let a = 0; a <= 11; a++) {
				let i = this["spriteContract" + a];
				i && (i.visible = t && this.context && this.context.bSwitch && mgrGame.contractIndex != a && !mgrGame.isContractUnlock(a), i.visible && (e = !0));
				let s = this["spriteLock" + a];
				s && (s.visible = !t && this.context && this.context.bSwitch && mgrGame.contractIndex != a && !mgrGame.isContractUnlock(a))
			}
			let s = Mathf.TEMP_POINTS[0],
				n = Mathf.TEMP_POINTS[1],
				o = this.context && this.context.bSwitch ? this.SWITCH_CONTRACT_SCALE : this.GUIDE_CONTRACT_SCALE;
			for (let t = 0; t <= 11; t++) {
				let e = this["toggleContract" + t];
				e.enabled = !1;
				let a = e.node;
				s.setTo(520, -660), n.setTo(a.x, a.y), a.pos(s.x, s.y, !0).scale(0, 0, !0).alpha = 0, cc.tween(a).delay(.25 * t).parallel(cc.tween().to(1, {
					scaleX: o,
					scaleY: o,
					alpha: 1
				}), cc.tween().then(cc.bezierFromTo(1, s, n, .8))).start()
			}
			this.scheduleOnce(2.5, () => {
				for (let t = 0; t <= 11; t++) this["toggleContract" + t].enabled = !0;
				this.buttonOk.node.visible = !0, UiHelper.playFadein(this.buttonOk.node), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONOK, this.buttonOk.node), this.selectEffect = this.addEffect("146"), this.selectEffect.setScale(o, o, o);
				let t = Mathf.random(7) - 1;
				this["toggleContract" + t].check(), this.scheduleOnce(.1, () => {
					this["on_click_toggleContract" + t]()
				})
			}), mgrGuide.dispatchGuide(GUD_EVENT.START_GAME), mgrSound.playMusic("bj_002", !0);
			let r = new Laya.Vector3(_G.canvasWidth / 2, _G.canvasHeight / 2, 0),
				l = new Laya.Vector3,
				c = this.addEffect("141");
			this.global2camer(r, l), c.play(l), this.context && this.context.bSwitch ? (this.oldParts = Tools.deepCopy(mgrPart.partsWear), t && e && mgrAdv.statisVideoShow("switch_role"), mgrSdk.tryStartRecord(), GameStatistics.statisCommonEvent(9101)) : GameStatistics.statisCommonEvent(1003), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				GUIDE_SELECT_ROLE: this.onMsgGuideSelectRole.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.clearWawahe(), this.clearOld(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONOK), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX), this.context && this.context.bSwitch && GameStatistics.statisOnStageEnd(13001), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		clearWawahe() {
			this.wawahe && (this.wawahe.dispose(), this.wawahe = null)
		}
		clearOld() {
			this.oldAvatar && (this.oldAvatar.destroy(), this.oldAvatar = null), this.oldShexiangji && (this.oldShexiangji.dispose(), this.oldShexiangji = null), this.oldWawahe && (this.oldWawahe.dispose(), this.oldWawahe = null), this.oldGemstone && (_G.poolManager.put(this.oldGemstone), this.oldGemstone = null), this.oldRoom && (this.oldRoom.dispose(), this.oldRoom = null)
		}
		onMsgAdvShowSuc(t) {
			"switch_role" == t.advName && (this.onSelect(this.selectIndex), this.buttonOk.interactable = !1, cc.tween(this.buttonOk.node).to(.2, cc.PROP.ALPHA0).start())
		}
		onMsgGuideSelectRole(t) {
			Timer.callLater(5, () => {
				if (this.bClickOk) return;
				if (this.destroyed || !this.buttonOk || this.buttonOk.node.destroyed) return;
				let t = this.addEffect("135");
				t.setScale(1, 1, 1), t.followTarget(this.buttonOk.node, this.cameraEffect, 100), t.play(), this.guideFinger = t
			}, this)
		}
		onSelect(t) {
			this.context && this.context.bSwitch ? GameStatistics.statisCommonEvent(9102 + t, t == mgrGame.contractIndex ? 0 : 1) : (t <= 4 ? GameStatistics.statisCommonEvent(2003 + t) : t > 4 && GameStatistics.statisCommonEvent(2034 + t), GameStatistics.statisOnStageEnd(10002), GameStatistics.statisOnStageStart(10003)), this.selectEffect.stop(), this.selectEffect.hide(), mgrGame.contractIndex = t, this.startLoad();
			for (let e = 0; e <= 11; e++) {
				let a = this["toggleContract" + e],
					i = this["spriteContract" + e];
				i && (i.visible = !1), a.enabled = !1;
				let s = a.node;
				e != t ? cc.tween(s, !0).to(.3, {
					alpha: 0
				}).start() : cc.tween(s, !0).to(1, {
					scaleX: 1.5,
					scaleY: 1.5,
					x: 0,
					y: 0
				}).to(.2, cc.PROP.ALPHA0).call(this.onButtonAnimFinish.bind(this)).start()
			}
		}
		startLoad() {
			let t = new ResLoader;
			mgrPart.addPartResList(mgrPart.partsWear, t, !0), t.setLoadingCallback(this.onButtonAnimFinish.bind(this));
			let e = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			if (t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D), null != this.oldContractIdx && mgrGame.contractIndex != this.oldContractIdx) {
				let e = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
				t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D)
			}
			t.loadAll()
		}
		onButtonAnimFinish() {
			this.loadState++, 2 == this.loadState && (cc.tween(this.bg).to(.1, cc.PROP.ALPHA0).hide().start(), this.buttonClose.node.visible = !1, this.context && this.context.bSwitch && this.oldContractIdx != mgrGame.contractIndex ? (this.oldRoom = new RoomBath, this.oldRoom.load(this.onOldSceneLoaded.bind(this))) : (this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))))
		}
		onOldSceneLoaded() {
			this.addChild(this.oldRoom.scene), this.resNode.setChildIndex(this.oldRoom.scene, 0), this.oldRoom.changeToMain(), this.oldRoom.skybox.active = !0, this.oldRoom.camera.active = !1, this.oldRoom.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.oldRoom.mapNode.transform, "localScale", 3, 3, 3), this.oldAvatar = new RoleAvatar(this.oldParts), this.oldRoom.root.addChild(this.oldAvatar), this.oldWawahe = new GModel(db.MODEL_DB_ID.wawahe), this.oldWawahe.create(), this.oldWawahe.initAnimator(), this.oldWawahe.setParent(this.oldRoom.root), this.oldWawahe.hide(), this.oldShexiangji = new GModel(db.MODEL_DB_ID.shexiangji_jiechu), this.oldShexiangji.create(), this.oldShexiangji.setParent(this.oldRoom.root), this.oldShexiangji.callIfLoaded(() => {
				let t = this.oldShexiangji.findChild("camera");
				t.nearPlane = .01, t.fieldOfView = 60;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular
			});
			let t = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
			this.oldGemstone = _G.poolManager.get(GModel, t), this.oldGemstone.initAnimator(), this.oldGemstone.getAnimator().cullingMode = Laya.Animator.CULLINGMODE_ALWAYSANIMATE, this.oldGemstone.setParent(this.oldRoom.root);
			let e = new AnimatorFixedPlayer;
			e.addModelAnim(this.oldWawahe, MODEL_ANIM.WAWAHE_JIECHU), e.addModelAnim(this.oldShexiangji, MODEL_ANIM.SHEXIANGJI_JIECHU), e.addModelAnim(this.oldAvatar.baseBody, MODEL_ANIM.SHENTI_JIECHU), e.addModelAnim(this.oldAvatar.baseFace, MODEL_ANIM.FACE_JIECHU), e.addTimeCallback(110 / 30 / e.duration, () => {
				this.oldWawahe.show()
			}), e.addTimeCallback(.78, () => {
				this.onSwitchComplete(() => {
					this.clearOld(), e.dispose()
				})
			}), e.addTimeCallback(1, () => {}), e.play();
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.oldGemstone, MODEL_ANIM.GEMSTONE_JIECHU), a.addTimeCallback(80 / 30 / a.duration, () => {
				this.oldGemstone.hide()
			}), a.play()
		}
		onSwitchComplete(t) {
			UiHelper.playBlackFlash(1, () => {
				t(), this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))
			})
		}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToMain(), this.room.skybox.active = !0, this.room.camera.active = !1, this.room.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 3, 3, 3), this.wawahe = new GModel(db.MODEL_DB_ID.wawahe), this.wawahe.create(), this.wawahe.initAnimator(), this.wawahe.setParent(this.room.root), this.shexiangji = new GModel(db.MODEL_DB_ID.shexiangji_come), this.shexiangji.create(), this.shexiangji.setParent(this.room.root), this.shexiangji.callIfLoaded(() => {
				let t = this.shexiangji.findChild("camera");
				t.nearPlane = .01;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular, this.shexiangji_effect = this.shexiangji.findChild("e_wawahe_come"), this.shexiangji_effect && (this.shexiangji_effect.active = !1)
			});
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME01), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME01), t.addTimeCallback(1, () => {
				let t = new AnimatorFixedPlayer;
				t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME02), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME02), t.addTimeCallback(1, () => {
					this.buttonBox.node.visible = !0, mgrGuide.dispatchGuide(GUD_EVENT.START_CONTRACT), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX, this.buttonBox.node)
				}), t.play()
			}), t.play()
		}
		playRoleAnim() {
			this.avatar = new RoleAvatar, this.room.root.addChild(this.avatar);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.avatar.baseBody, MODEL_ANIM.SHENTI_COME), t.addModelAnim(this.avatar.baseFace, MODEL_ANIM.FACE_COME), t.addTimeCallback(1, this.onRoleAnimFinish.bind(this)), t.play()
		}
		playGemstone() {
			let t = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			this.gemstone = _G.poolManager.get(GModel, t), this.gemstone.initAnimator(), this.gemstone.setParent(this.room.root), this.gemstone.setPosition(0, .05, 0), this.gemstone.playAnims(0, [MODEL_ANIM.GEMSTONE_COME, MODEL_ANIM.GEMSTONE_ZHANSHI], !0), this.gemstone.initPaint(), this.gemstone.callIfLoaded(() => {
				let t = this.gemstone.getChildAt(0);
				cc.tween(this).to(1.3, cc.PROP.EMPTY, {
					onUpdate(e, a) {
						t.transform.scale = t.transform.scale
					}
				}).start()
			})
		}
		onWawaheAnimFinish() {
			this.clearWawahe()
		}
		onRoleAnimFinish() {
			this.avatar.playAnimation(MODEL_ANIM.SHENTI_IDLE), this.buttonCircle.node.visible = !0, mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE, this.buttonCircle.node)
		}
		playGotoRoom() {
			Logger.warn("---\x3e on_click_buttonCircle 2"), this.context && this.context.bSwitch && BaseFacade.mGoal.commit(ACTION_ID.SWITCH_ROLE, 1), Logger.warn("---\x3e on_click_buttonCircle 3"), this.shexiangji.findChild("e_wawahe_come").active = !1, _G.isGuiding = !0, Logger.warn("---\x3e on_click_buttonCircle 4"), mgrPanel.openPanel(UI_NAME.PanelMain, {
				type: ROOM_TYPE.NORMAL,
				parts: null,
				data: {
					room: this.room,
					avatar: this.avatar,
					shexiangji: this.shexiangji,
					gemstone: this.gemstone
				},
				bSwitch: this.context && this.context.bSwitch
			}, !1, () => {
				Logger.warn("---\x3e on_click_buttonCircle 5"), this.room.scene.removeSelf(), this.close(), Logger.warn("---\x3e on_click_buttonCircle 6")
			})
		}
		onClickContract(t) {
			this.selectIndex = t, this.spriteBtnAdvFlag.visible = this["spriteContract" + t] && this["spriteContract" + t].visible, this.layoutBtn.updateLayout(0, !0);
			let e = this.node2Camera(this["toggleContract" + t.toString()].node);
			if (this.selectEffect.show(), this.selectEffect.play(e), !mgrGame.isContractUnlock(t)) switch (t) {
				case 0:
				case 1:
				case 2:
				case 3:
				case 4:
				case 5:
				case 6:
					break;
				case 7:
					mgrAdv.checkActive("role_test") && mgrAlert.alertDialog({
						desc: mgrI18n.getText("panelContract.2"),
						confirmText: mgrI18n.getText("panelContract.7"),
						confirm: () => {
							mgrAlert.openPanelLoading(UI_NAME.PanelRoleTest, null, this.close.bind(this))
						},
						close: () => {}
					});
					break;
				case 8:
					mgrAdv.checkActive("role_test") && mgrAlert.alertDialog({
						desc: mgrI18n.getText("panelContract.3"),
						confirmText: mgrI18n.getText("panelContract.7"),
						confirm: () => {
							mgrAlert.openPanelLoading(UI_NAME.PanelRoleTest, null, this.close.bind(this))
						},
						close: () => {}
					});
					break;
				case 9:
					mgrAdv.checkActive("draw_dance") && mgrAlert.alertDialog({
						desc: mgrI18n.getText("panelContract.4"),
						confirmText: mgrI18n.getText("panelContract.8"),
						confirm: () => {
							mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, {}, this.close.bind(this))
						},
						close: () => {}
					});
					break;
				case 10:
					mgrAlert.alertDialog({
						desc: mgrI18n.getText("panelContract.5"),
						confirmText: mgrI18n.getText("panelContract.9"),
						confirm: () => {
							mgrAlert.openPanelLoading(UI_NAME.PanelClassRoom, {}, this.close.bind(this))
						},
						close: () => {}
					});
					break;
				case 11:
					mgrAlert.alertDialog({
						desc: mgrI18n.getText("panelContract.6"),
						confirmText: mgrI18n.getText("panelDancePreview.1"),
						confirm: () => {
							mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, {}, this.close.bind(this))
						},
						close: () => {}
					})
			}
		}
		on_click_buttonCircle() {
			Logger.warn("---\x3e on_click_buttonCircle 1"), this.buttonCircle.interactable = !1, cc.tween(this.buttonCircle.node, !0).to(.2, cc.PROP.ALPHA0).call(this.playGotoRoom.bind(this)).start(), Logger.warn("---\x3e on_click_buttonCircle 7")
		}
		on_click_buttonBox() {
			this.buttonBox.node.visible = !1, this.shexiangji_effect && (this.shexiangji_effect.active = !0);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME03), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME03), t.addTimeCallback(3 / t.duration, this.playGemstone.bind(this)), t.addTimeCallback(1, this.onWawaheAnimFinish.bind(this)), t.play(), this.playRoleAnim()
		}
		on_click_buttonOk() {
			this.guideFinger && !this.guideFinger.destroyed && this.guideFinger.hide(), this.bClickOk = !0, this.context && this.context.bSwitch ? this.selectIndex == mgrGame.contractIndex ? mgrAlert.alertDialog(mgrI18n.getText("panelContract.11"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				this.onSelect(this.selectIndex), this.buttonOk.interactable = !1, cc.tween(this.buttonOk.node).to(.2, cc.PROP.ALPHA0).start()
			}, () => {}) : mgrGame.isContractUnlock(this.selectIndex) ? mgrAlert.alertDialog(mgrI18n.getText("panelContract.12"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				this.onSelect(this.selectIndex), this.buttonOk.interactable = !1, cc.tween(this.buttonOk.node).to(.2, cc.PROP.ALPHA0).start()
			}, () => {}) : 7 == this.selectIndex ? mgrAdv.checkActive("role_test") ? mgrAlert.alertDialog({
				desc: mgrI18n.getText("panelContract.2"),
				confirmText: mgrI18n.getText("panelContract.7"),
				confirm: () => {
					mgrAlert.openPanelLoading(UI_NAME.PanelRoleTest, null, this.close.bind(this))
				},
				close: () => {}
			}) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelContract.13")) : 8 == this.selectIndex ? mgrAdv.checkActive("role_test") ? mgrAlert.alertDialog({
				desc: mgrI18n.getText("panelContract.3"),
				confirmText: mgrI18n.getText("panelContract.7"),
				confirm: () => {
					mgrAlert.openPanelLoading(UI_NAME.PanelRoleTest, null, this.close.bind(this))
				},
				close: () => {}
			}) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelContract.13")) : 9 == this.selectIndex ? mgrAdv.checkActive("draw_dance") ? mgrAlert.alertDialog({
				desc: mgrI18n.getText("panelContract.4"),
				confirmText: mgrI18n.getText("panelContract.8"),
				confirm: () => {
					mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, {}, this.close.bind(this))
				},
				close: () => {}
			}) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelContract.14")) : 10 == this.selectIndex ? mgrAlert.alertDialog({
				desc: mgrI18n.getText("panelContract.5"),
				confirmText: mgrI18n.getText("panelContract.9"),
				confirm: () => {
					mgrAlert.openPanelLoading(UI_NAME.PanelClassRoom, {}, this.close.bind(this))
				},
				close: () => {}
			}) : 11 == this.selectIndex ? mgrAlert.alertDialog({
				desc: mgrI18n.getText("panelContract.6"),
				confirmText: mgrI18n.getText("panelContract.10"),
				confirm: () => {
					mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, {}, this.close.bind(this))
				},
				close: () => {}
			}) : this["spriteContract" + this.selectIndex].visible ? (mgrAdv.statisVideoClick("switch_role"), mgrAdv.dispatchAdv("switch_role", {}, !0)) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelContract.15")) : (this.onSelect(this.selectIndex), this.buttonOk.interactable = !1, cc.tween(this.buttonOk.node).to(.2, cc.PROP.ALPHA0).start())
		}
		on_click_buttonClose() {
			mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_toggleContract0() {
			this.onClickContract(0)
		}
		on_click_toggleContract1() {
			this.onClickContract(1)
		}
		on_click_toggleContract2() {
			this.onClickContract(2)
		}
		on_click_toggleContract3() {
			this.onClickContract(3)
		}
		on_click_toggleContract4() {
			this.onClickContract(4)
		}
		on_click_toggleContract5() {
			this.onClickContract(5)
		}
		on_click_toggleContract6() {
			this.onClickContract(6)
		}
		on_click_toggleContract7() {
			this.onClickContract(7)
		}
		on_click_toggleContract8() {
			this.onClickContract(8)
		}
		on_click_toggleContract9() {
			this.onClickContract(9)
		}
		on_click_toggleContract10() {
			this.onClickContract(10)
		}
		on_click_toggleContract11() {
			this.onClickContract(11)
		}
	}
	class DebugBezier extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "bezier", this.sprites = [], this.spriteCount = 4
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			this.mask = e.addChild((new Laya.Sprite).loadImage(GConfig.img_alpha_mask)), this.drawNode = e.addChild(new Laya.Sprite).size(2e3, 2e3).pos(-_G.left, -_G.top, !0), this.moveSprite = this.drawNode.addChild(new Laya.Sprite).size(20, 20).pivot(10, 10), this.moveSprite.texture = UiHelper.WHITE_TEXTURE;
			for (let t = 0; t < 4; t++) {
				let e = this.drawNode.addChild(new Laya.Sprite).size(20, 20).pivot(10, 10);
				e.texture = UiHelper.WHITE_TEXTURE, e.pos(100 * t, 100 * t, !0), this.sprites.push(e)
			}
			e.addChild(debug_ui.create_btn("X", this, this.close, 50, 50).pos(10, 10)), e.addChild(debug_ui.create_btn("2次曲线", this, this.onClick2)).pos(80, 10, !0), e.addChild(debug_ui.create_btn("3次曲线", this, this.onClick3)).pos(190, 10, !0), this.createFromNode(e)
		}
		buildUi() {
			UiHelper.registerTouchEvent(this.drawNode, this.onTouchStart.bind(this), this.onTouchMove.bind(this), this.onTouchEnd.bind(this)), this.updateDraw()
		}
		updateDraw() {
			let t = new Laya.Bezier,
				e = [];
			for (let t = 0; t < this.spriteCount; t++) e.push(this.sprites[t].x, this.sprites[t].y);
			cc.tween(this.moveSprite, !0).then(cc.bezierTo(2, e, 10)).start();
			let a = t.getBezierPoints(e, 10, this.spriteCount - 1);
			this.drawNode.graphics.clear();
			for (let t = 0; t < a.length; t += 2) console.log(Mathf.round(a[t], 3), Mathf.round(a[t + 1], 3)), this.drawNode.graphics.drawCircle(a[t], a[t + 1], 3, "#0000ff");
			this.drawNode.graphics.drawLines(0, 0, a, "#ff0000", 2)
		}
		onTouchStart() {
			let t = Laya.Point.TEMP.setTo(Laya.stage.mouseX, Laya.stage.mouseY);
			for (let e = 0; e < this.spriteCount; e++) {
				let a = this.sprites[e];
				if (t.distance(a.x, a.y) < 50) return void(this.curNode = a)
			}
			this.curNode = null
		}
		onTouchMove() {
			if (this.curNode) {
				let t = Laya.Point.TEMP.setTo(Laya.stage.mouseX, Laya.stage.mouseY);
				this.curNode.pos(t.x, t.y, !0), this.updateDraw()
			}
		}
		onTouchEnd() {
			this.curNode = null
		}
		onClick2() {
			this.spriteCount = 3, this.sprites[3].visible = !1, this.updateDraw()
		}
		onClick3() {
			this.spriteCount = 4, this.sprites[3].visible = !0, this.updateDraw()
		}
	}
	class UIToggle extends Laya.Script {
		constructor() {
			super(...arguments), this._isChecked = !1, this.autoUpdateCheckMark = !0, this.stopPropagation = !0, this._pressed = !1, this._ignoreClickEvent = !1
		}
		get isChecked() {
			return this._isChecked
		}
		set isChecked(t) {
			if (t !== this._isChecked) {
				var e = this.toggleGroup;
				e && e.enabled && this._isChecked && !e.allowSwitchOff || (this._isChecked = t, this.autoUpdateCheckMark && this.updateCheckMark(), e && e.enabled && e.updateToggles(this), this._emitToggleEvents())
			}
		}
		get toggleGroup() {
			return this._toggleGroup || this.owner.parent && (this._toggleGroup = this.owner.parent.getComponent(UIToggleGroup)), this._toggleGroup
		}
		get node() {
			return this.owner
		}
		onAwake() {
			this.spriteOff || (this.spriteOff = this.owner.getChildByName("off")), this.spriteOn || (this.spriteOn = this.owner.getChildByName("on")), this._touchStart = _G.pool.get(Vec2), this.node.on("uibutton_click", this, t => {
				"dummy" == t && this.toggle()
			}), this.updateCheckMark()
		}
		onDestroy() {
			this._touchStart && (_G.pool.put(this._touchStart), this._touchStart = null)
		}
		onMouseDown(t) {
			this.enabled && (this._pressed = !0, this._touchStart.setValue(Laya.stage.mouseX, Laya.stage.mouseY))
		}
		onMouseMove(t) {
			if (this._pressed) {
				let t = Vec2.TEMP;
				t.setValue(Laya.stage.mouseX, Laya.stage.mouseY), t.subSelf(this._touchStart).magSqr() > 16 && (this._pressed = !1)
			}
		}
		onMouseOut(t) {
			this._pressed && (this._pressed = !1)
		}
		onClick(t) {
			this._pressed && this.toggle(), this._pressed = !1, t.stopPropagation()
		}
		_hideCheckMark(t) {
			t && this._isChecked && (this._ignoreClickEvent || this.owner.event("ui_toggle", !1)), this._isChecked = !1, this.updateCheckMark()
		}
		updateCheckMark() {
			this.spriteOff && (this.spriteOff.visible = !this._isChecked), this.spriteOn && (this.spriteOn.visible = this._isChecked)
		}
		toggle() {
			this.isChecked = !this.isChecked
		}
		_emitToggleEvents() {
			this._ignoreClickEvent || (this._isChecked && this.owner.event("uibutton_click"), this.owner.event("ui_toggle", this._isChecked))
		}
		check(t = !1) {
			this._ignoreClickEvent = t, this.isChecked = !0, this._ignoreClickEvent = !1
		}
		uncheck(t = !1) {
			this._ignoreClickEvent = t, this.isChecked = !1, this._ignoreClickEvent = !1
		}
		isAllSwitchOff() {
			return !!this.toggleGroup && this.toggleGroup.isAllSwitchOff
		}
	}
	class UIToggleGroup extends Laya.Script {
		constructor() {
			super(...arguments), this.allowSwitchOff = !1
		}
		get node() {
			return this.owner
		}
		onAwake() {
			this.refreshToggles()
		}
		refreshToggles() {
			this._toggles = [];
			for (let t = this.owner.numChildren - 1; t >= 0; t--) {
				let e = this.owner.getChildAt(t).getComponent(UIToggle);
				e && this._toggles.push(e)
			}
			this._makeAtLeastOneToggleChecked()
		}
		updateToggles(t) {
			this.enabled && (t.isChecked ? this._toggles.forEach(function(e) {
				e !== t && e.isChecked && e.enabled && e._hideCheckMark(!0)
			}) : this.isAllSwitchOff && this.owner.event("all_switch_off"))
		}
		_allowOnlyOneToggleChecked() {
			var t = !1;
			return this._toggles.forEach(function(e) {
				t ? e._hideCheckMark(!1) : e.isChecked && (t = !0)
			}), t
		}
		_makeAtLeastOneToggleChecked() {
			if (!this._allowOnlyOneToggleChecked() && !this.allowSwitchOff) {
				var t = this._toggles;
				t.length > 0 && t[0].check()
			}
		}
		get isAllSwitchOff() {
			for (var t = this._toggles.length - 1; t >= 0; t--)
				if (this._toggles[t].isChecked) return !1;
			return !0
		}
	}
	class PanelPhoto extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelPhoto.json", this._exportNodeInfo = {
				cc_bg: "Laya.Sprite",
				cc_buttonOk: "UIButton",
				cc_tip: "Laya.Label",
				cc_photoList: "UIHVLayout",
				cc_photo0: "UIToggle",
				cc_photo1: "UIToggle",
				cc_photo2: "UIToggle"
			}, this.btnsClickSound = {
				btnTakePhot: ""
			}, this._textures = [], this._texturesBg = []
		}
		static openPanel(t) {
			let e = new ResLoader;
			e.add(db.get_animation_db(MODEL_ANIM.GJ_JIESUAN).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_GJ_JIESUAN).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_GJ_JIESUAN).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SANLIANPAI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_SANLIANPAI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_GJ_JIESUAN).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_gj_jiesuan).resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.wawahe).resPath, RES_TYPE.PREFAB3D), e.add(db.get_effect_db("124").res, RES_TYPE.PREFAB3D), e.add("res/ui/PanelPhoto.json", RES_TYPE.PREFAB2D), e.add("res/ui/bg/over_bg.jpg", RES_TYPE.TEXTURE2D), mgrAlert.openWait(e, () => {
				mgrPanel.openPanelWithSingleton(UI_NAME.PanelPhoto, null, t)
			})
		}
		buildUi() {
			this.init3D(), this.buttonOk.node.visible = !1, this.tip.visible = !1;
			for (let t = 0; t < 3; t++) {
				this["photo" + t].enabled = !1
			}
		}
		dispose() {
			this.stopProcMsg(), this.player && this.player.dispose(), this.wawahe && _G.poolManager.put(this.wawahe), this.bianshenEffect && (_G.poolManager.put(this.bianshenEffect), this.bianshenEffect = null), this.avatar && this.avatar.destroy(), this.shexiangji && _G.poolManager.put(this.shexiangji), super.dispose();
			for (let t = 0; t < this._texturesBg.length; t++) this._texturesBg[t].destroy(!0);
			for (let t = 0; t < this._textures.length; t++) this._textures[t].destroy(!0)
		}
		regGuide() {}
		init3D() {
			this.createScene3DBack(0);
			let t = _G.poolManager.get(GModel, db.MODEL_DB_ID.shexiangji_gj_jiesuan);
			this.shexiangji = t, this.shexiangji.setParent(this.scene3DBack);
			let e = this.shexiangji.findChild("camera");
			this.sxjCamera = e, e.nearPlane = .01, e.farPlane = 30, this.wawahe = _G.poolManager.get(GModel, db.MODEL_DB_ID.wawahe), this.wawahe.setParent(this.scene3DBack), this.wawahe.initAnimator(), this.wawahe.playAnim(MODEL_ANIM.WAWAHE_GJ_JIESUAN), this.avatar = new RoleAvatar(mgrLevel.curLevelDb.parts.length ? mgrLevel.curLevelDb.parts : mgrPart.partsLevel), this.scene3DBack.addChild(this.avatar);
			let a = {};
			for (let t = 0; t <= 6; t++) mgrPart.partsLevel[t] ? a[t] = mgrPart.partsLevel[t] : a[t] = null;
			let i = {};
			for (let t = 7; t <= 11; t++) mgrPart.partsLevel[t] ? i[t] = mgrPart.partsLevel[t] : i[t] = null;
			let s = {};
			for (let t = 12; t <= 14; t++) mgrPart.partsLevel[t] ? s[t] = mgrPart.partsLevel[t] : s[t] = null;
			let n = new AnimatorFixedPlayer;
			this.player = n, n.addModelAnim(this.avatar.baseBody, MODEL_ANIM.GJ_JIESUAN), n.addModelAnim(this.avatar.baseFace, MODEL_ANIM.FACE_GJ_JIESUAN), n.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_GJ_JIESUAN), n.addTimeCallback(62 / 210, () => {
				this.avatar.setParts(a, !1)
			}), n.addTimeCallback(100 / 210, () => {
				this.avatar.setParts(i, !1), this.wawahe.hide()
			}), n.addTimeCallback(180 / 210, () => {
				this.avatar.setParts(s, !1)
			}), n.addTimeCallback(1, this.onAnimFinished.bind(this)), n.play();
			let o = _G.poolManager.get(Particle, "124");
			o.setParent(this.scene3DBack), o.play(), this.bianshenEffect = o
		}
		onAnimFinished() {
			let t = this.player;
			t.clear(), t.addModelAnim(this.avatar.baseBody, MODEL_ANIM.SANLIANPAI), t.addModelAnim(this.avatar.baseFace, MODEL_ANIM.FACE_SANLIANPAI), t.addTimeCallback(0, this.takePhoto.bind(this)), t.addTimeCallback(55 / 180, this.takePhoto.bind(this)), t.addTimeCallback(115 / 180, this.takePhoto.bind(this)), t.play(!0)
		}
		onClickPhoto(t) {
			if (this._texturesBg.length < 3) return;
			let e = this.photoList.node.getComponent(UIToggleGroup);
			e.allowSwitchOff && (e.allowSwitchOff = !1, this.avatar.active = !1, this.buttonOk.node.visible = !0, UiHelper.playScaleOneByOne(.2, .2, this.buttonOk.node), cc.clearTween(this.tip), this.tip.visible = !1), this.bg.texture = this._texturesBg[t], this._selectIdx = t
		}
		showResult() {
			for (let t = 0; t < 3; t++) this["photo" + t].enabled = !0;
			this.tip.visible = !0, cc.tween(this.tip).repeatForever(cc.tween().to(.5, cc.PROP.SCALE1).delay(.3).to(1, cc.PROP.SCALE1_2)).start(), this.avatar.playIdle(), cc.tween(this.photoList.node).to(.2, {
				y: 228
			}, {
				easing: cc.Ease.sineInOut
			}).start()
		}
		takePhoto() {
			let t = 5 * mgrPart.photoWidth,
				e = 5 * mgrPart.photoHeight,
				a = UiHelper.screenShot(this.sxjCamera, _G.canvasWidth, _G.canvasHeight),
				i = Laya.Texture.create(a, 0, 0, _G.canvasWidth, _G.canvasHeight);
			this._texturesBg.push(i);
			let s = Laya.Texture.create(a, (_G.canvasWidth - t) / 2, (_G.canvasHeight - e) / 2, t, e);
			this._textures.push(s), 3 == this._textures.length && (this.showResult(), this.player.clearTimeCallbacks());
			let n = new Laya.Sprite;
			n.size(t, e).pivot(t / 2, e / 2);
			let o = new Laya.Sprite;
			o.texture = s, o.size(1.5 * o.width, 1.5 * o.height);
			o.pivot(o.width / 2, o.height / 2 - 20).pos(t / 2, e / 2, !0), n.addChild(o);
			let r = this["photo" + (this._textures.length - 1)].node;
			r.visible = !0, this.photoList.updateLayout(.2, !0), this.scheduleOnce(.15, () => {
				let e = Mathf.TEMP_POINT.setTo(_G.canvasFitWidth / 2, _G.canvasFitHeight / 2 - 20);
				UiHelper.local2local(this.resNode, r, e);
				let a = {
						x: this.photo0.node.pivotX,
						y: this.photo0.node.pivotY
					},
					i = mgrPart.photoWidth / t;
				r.addChild(n), r.setChildIndex(n, 0), n.pos(e.x, e.y, !0), UiHelper.playMoveTo(n, a, i), UiHelper.playPhotoFlash()
			})
		}
		on_click_photo0() {
			this.onClickPhoto(0)
		}
		on_click_photo1() {
			this.onClickPhoto(1)
		}
		on_click_photo2() {
			this.onClickPhoto(2)
		}
		on_click_buttonOk() {
			if (null != this._selectIdx) {
				let t = 5 * mgrPart.photoWidth,
					e = 5 * mgrPart.photoHeight,
					a = this._textures[this._selectIdx].bitmap,
					i = Tools.getTex2dFromTex2d(a, 0, 0, a.width, a.height),
					s = Laya.Texture.create(i, (_G.canvasWidth - t) / 2, (_G.canvasHeight - e) / 2, t, e);
				mgrPart.setRolePhoto(s), this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelFriends, !0)
			} else mgrAlert.alertText(mgrI18n.getText("panelPhoto.1"))
		}
	}
	class DebugFSC extends debug_ui.DebugBase {
		constructor() {
			super(...arguments), this.resourceName = "DebugFSC"
		}
		buildUi() {
			this.createScene3DBack(0, 30), this.camera.transform.localPositionZ = 5;
			let t = 3 * Math.tan(15 * Mathf.Deg2Rad) * 2,
				e = _G.canvasWidth / _G.canvasHeight * t;
			this.bgPlan = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createPlane(e, t, 2, 2)), this.bgPlan.transform.localPositionZ = -3, this.bgPlan.transform.localRotationEulerX = 90, this.bgPlan.active = !1, this.camera.addChild(this.bgPlan);
			let a = new PaintMaterialTest;
			this.bgPlan.meshRenderer.sharedMaterial = a, this.avatar = new RoleAvatar(mgrPart.partsWear), this.scene3DBack.addChild(this.avatar);
			let i = this.resNode.addChild(new Laya.Sprite).pos(10, 100).addComponent(UIHVLayout);
			i.align = "head", i.horizon = !1, i.space = 5, i.addChild(debug_ui.create_btn("展示角色", this, this.onClickShowAvatar)), i.addChild(debug_ui.create_btn("隐藏角色", this, this.onClickHideAvatar)), i.addChild(debug_ui.create_btn("展示面板", this, this.onClickShowBgPlan))
		}
		dispose() {
			this.avatar && this.avatar.destroy(), super.dispose()
		}
		onClickShowAvatar() {
			this.avatar.active = !0
		}
		onClickHideAvatar() {
			this.avatar.active = !1
		}
		onClickShowBgPlan() {
			let t = UiHelper.screenShot(this.camera, _G.canvasWidth, _G.canvasHeight);
			this.avatar.active = !1, this.bgPlan.active = !0;
			let e = this.bgPlan.meshRenderer.sharedMaterial;
			e.albedoTexture = t, e.playDissolveOutFromCenter(2, 0, () => {
				this.scheduleOnce(.5, () => {
					this.avatar.active = !0, this.bgPlan.active = !1
				})
			})
		}
	}
	const LINE_WIDTH$1 = 10;
	class DebugDrawLine extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "draw_line", this.p0 = new Laya.Point, this.p1 = new Laya.Point
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			this.mask = e.addChild((new Laya.Sprite).loadImage(GConfig.img_alpha_mask)), this.drawNode = e.addChild(new Laya.Sprite).size(2e3, 2e3).pos(-_G.left, -_G.top, !0), e.addChild(debug_ui.create_btn("X", this, this.close, 50, 50).pos(10, 10)), this.createFromNode(e)
		}
		buildUi() {
			UiHelper.registerTouchEvent(this.drawNode, this.onTouchStart.bind(this), this.onTouchMove.bind(this), this.onTouchEnd.bind(this))
		}
		updateDraw() {
			console.log("DrawLine画线", this.p0, this.p1), this.drawNode.graphics.drawCircle(this.p1.x, this.p1.y, LINE_WIDTH$1 / 2, "#ff0000", null, 0), this.drawNode.graphics.drawLine(this.p0.x, this.p0.y, this.p1.x, this.p1.y, "#ff0000", LINE_WIDTH$1), this.p0.x = this.p1.x, this.p0.y = this.p1.y
		}
		onTouchStart() {
			this.p0.x = Laya.stage.mouseX, this.p0.y = Laya.stage.mouseY, this.p1.x = Laya.stage.mouseX, this.p1.y = Laya.stage.mouseY, console.log("DrawLine开始位置", this.p0, this.p1)
		}
		onTouchMove() {
			this.p1.x = Laya.stage.mouseX, this.p1.y = Laya.stage.mouseY;
			let t = this.p1.distance(this.p0.x, this.p0.y);
			console.log("移动距离", t), t >= LINE_WIDTH$1 / 2 && this.updateDraw()
		}
		onTouchEnd() {}
	}
	var Keyboard$3 = Laya.Keyboard;
	const ITEM_WIDTH$2 = 180;
	class DebugEffect extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "DebugEffect", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.bResetRootNode = !1, this.originAllModel = []
		}
		buildUi() {
			this.createScene3DBack(1, 25), this.camera.transform.localPosition = new Laya.Vector3(0, 2, 2), this.camera.transform.localRotationEuler = new Laya.Vector3(-15, 0, 0), 3 == mgrMaterial.lightRotation.length && (this.lightBack.transform.localRotationEuler = new Laya.Vector3(-10, -11, 25)), this.root = this.scene3DBack.addChild(new Laya.Sprite3D), this.roleRoot = this.root.addChild(new Laya.Sprite3D), Tools.forEachMap(db.get_effect_db_map(), (t, e) => {
				this.originAllModel.push(t)
			}), this.originAllModel.sort(), this.allEffect = this.originAllModel.slice(), this.effectScroll.onItemCreate = (() => new debug_ui.scroll_item(ITEM_WIDTH$2, 50, (t, e) => {
				if (this._effectId == this.allEffect[t]) {
					return void this.getEffect(this._effectId).play()
				}
				this.removeEffect(this._effectId), this._effectId = this.allEffect[t], this.effectIdLabel.text = this._effectId, this.getEffect(this._effectId).play()
			})), this.effectScroll.onItemChange = ((t, e) => {
				let a = db.get_effect_db(this.allEffect[e]);
				t.setData(a.res.substr(24), e)
			}), this.effectScroll.updateList(this.allEffect.length), this.registerMsg({
				[BASE_MSG.SYS_KEY_DOWN]: t => {
					switch (t.ctrlKey ? Keyboard$3.CONTROL * t.keyCode : t.keyCode) {
						case Keyboard$3.LEFT:
							this.lightBack.transform.rotate(new Laya.Vector3(0, 3, 0), !1, !1);
							break;
						case Keyboard$3.RIGHT:
							this.lightBack.transform.rotate(new Laya.Vector3(0, -3, 0), !1, !1);
							break;
						case Keyboard$3.UP:
							this.lightBack.transform.rotate(new Laya.Vector3(3, 0, 0), !1, !1);
							break;
						case Keyboard$3.DOWN:
							this.lightBack.transform.rotate(new Laya.Vector3(-3, 0, 0), !1, !1);
							break;
						case Laya.Keyboard.NUMPAD_8:
							this.lightBack.transform.localRotationEulerX -= 1;
							break;
						case Laya.Keyboard.NUMPAD_2:
							this.lightBack.transform.localRotationEulerX += 1;
							break;
						case Laya.Keyboard.NUMPAD_4:
							this.lightBack.transform.localRotationEulerY -= 1;
							break;
						case Laya.Keyboard.NUMPAD_6:
							this.lightBack.transform.localRotationEulerY += 1;
							break;
						case Laya.Keyboard.ESCAPE:
					}
				}
			}), this.startProcMsg(), this.initTouch()
		}
		initTouch() {
			this.nodeOpt = new NodeOperate(this.touchNode, this.root, this.roleRoot)
		}
		onInput(t) {
			let e = [],
				a = t.text;
			if (a) {
				for (let t = 0; t < this.originAllModel.length; t++) ~db.get_effect_db(this.originAllModel[t]).res.indexOf(a) && e.push(this.originAllModel[t]);
				this.allEffect = e
			} else this.allEffect = this.originAllModel.slice();
			this.effectScroll.updateList(this.allEffect.length)
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), e.addChild(new Laya.Image("res/alpha_mask.png")).size(_G.canvasWidth, _G.canvasHeight), this.touchNode = e.addChild(new Laya.Sprite).size(_G.canvasWidth, _G.canvasHeight);
			let a = e.addChild(new Laya.Sprite),
				i = debug_ui.create_btn("X", this, this.close, 50, 50).pos(10, 10);
			a.addChild(i), this.effectIdLabel = a.addChild(debug_ui.create_label(_G.canvasWidth - ITEM_WIDTH$2 - 220, 10)), this.effectIdLabel.text = "none";
			let s = a.addChild(debug_ui.create_input("", _G.canvasWidth - ITEM_WIDTH$2 - 10, 10, ITEM_WIDTH$2));
			s.on(Laya.Event.INPUT, this, this.onInput, [s]);
			let n = a.addChild(new Laya.Sprite);
			n.pos(_G.canvasWidth - ITEM_WIDTH$2 - 10, 100, !0), n.size(ITEM_WIDTH$2, 500);
			let o = n.addComponent(ReuseScrollList);
			o.vertical = !0, o.itemWidth = ITEM_WIDTH$2, o.itemHeight = 50, this.effectScroll = o, this.createFromNode(e)
		}
		dispose() {
			this.stopProcMsg(), this.nodeOpt && this.nodeOpt.dispose(), this.effectScroll && this.effectScroll.clearAllItems(), super.dispose()
		}
	}
	class DebugMain extends debug_ui.DebugBase {
		constructor() {
			super(...arguments), this.index = 0, this.resourceName = "DebugMain", this.textLabel = null, this.btnDatas = []
		}
		createBaseBtns() {
			this.addButton("Stat面板", () => {
				Laya.Stat.show()
			}, "#ff0000"), this.addButton("DebugPnl", () => {
				this.close(), Laya.enableDebugPanel()
			}, "#ff0000"), this.addButton("删除存档", () => {
				this.close(), FileRecord.deletAllData(!1)
			}, "#ff0000"), this.addButton("验证数据", () => {
				this.close(), VerifyCfg.verifyAll()
			}, "#ff0000"), this.addButton("spine动画", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugSpine)
			}, "#ff0000"), this.addButton("特效", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugEffect)
			}, "#ff0000"), this.addButton("加快一天", () => {
				this.close();
				let t = FileRecord.getData("key_time_offset") || 0;
				t += 86400, Timer.setTimeOffset(t), FileRecord.setData("key_time_offset", t), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "加快" + Math.round(t / 3600 / 24) + "天"), _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "加快后时间计算不可逆，为避免错误，会强行清除存档!"), _G.sendMsg(BASE_MSG.DAILY_SWITCH_ACTIVE)
			}, "#ff0000"), this.addButton("任务", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugQuest)
			}, "#ff0000"), this.addButton("物品", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugItem)
			}, "#ff0000"), this.addButton("更新配置", () => {
				this.close(), this.updateCfg()
			}, "#ff0000"), this.addButton("重置广告次数", () => {
				this.close(), mgrAdv.resetAllCount()
			}, "#ff0000"), this.addButton("记录变体", () => {
				this.close(), mgrMaterial.recordShaderCompileInfo()
			}, "#ff0000"), this.addButton("bezier", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugBezier)
			}, "#ff0000"), this.addButton("DrawLine", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugDrawLine)
			}, "#ff0000")
		}
		createModuleBtns() {
			this.addButton("引导", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugGuide)
			}, "#0000ff"), this.addButton("跳过引导", () => {
				this.close();
				let t = mgrPanel.findPanel(PanelGuide);
				t && (t.forceClose(), mgrGuide.skipAll()), mgrPanel.closeLayer(PANEL_LAYER.UI), mgrGame.tryEnterMain()
			}, "#0000ff"), this.addButton("涂抹测试", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugDraw)
			}, "#0000ff"), this.addButton("涂抹DEBUG", () => {
				RenderMask.debug = !RenderMask.debug, _G.sendMsg(BASE_MSG.UI_SHOW_TIP, `涂抹debug=${RenderMask.debug}`)
			}, "#0000ff"), this.addButton("编辑材质", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugCartoonMat)
			}, "#0000ff"), this.addButton("动态骨骼", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugDynamicBone)
			}, "#0000ff"), this.addButton("shader", () => {
				this.close(), mgrPanel.openPanelWithFadeIn(DebugShader)
			}, "#0000ff"), this.addButton("所有部件", () => {
				this.close(), Tools.forEachMap(db.get_item_db_map(), function(t, e) {
					2 == e.type && 1 == e.subType && (BaseFacade.mItem.isOwned(t) || BaseFacade.mItem.addItem(t, 1, null))
				})
			}, "#0000ff"), this.addButton("编shader", () => {
				this.close();
				let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
				Tools.forEachMap(db.get_effect_db_map(), function(e, a) {
					mgrAlert.playParticleEffect(e, t, 5, 1)
				}), Tools.forEachMap(db.get_model_db_map(), function(t, e) {
					if (0 == e.type) {
						let e = _G.poolManager.get(GModel, t);
						e.setParent(mgrAlert.scene3dfont), e.callIfLoaded(function() {
							Timer.callLater(1, function() {
								_G.poolManager.put(e)
							})
						})
					}
				})
			}, "#0000ff"), this.addButton("点赞", () => {
				mgrSzz.addLike(), mgrAlert.alertText("当前次数" + mgrSzz.likeCount)
			}, "#0000ff"), this.addButton("上传日志", () => {
				try {
					throw new Error("random error:" + Mathf.random(100, 999))
				} catch (t) {
					Logger.catchError("test err:", t), mgrAlert.alertText("上传成功.")
				}
			}, "#0000ff")
		}
		createGameBtns() {
			this.addButton("关卡", () => {
				mgrPanel.openPanelWithFadeIn(DebugLevel), this.close()
			}).size(60, 40), this.addButton("开始护肤", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelSkincare)
			}), this.addButton("护肤结算", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelOverCommon)
			}), this.addButton("掉落金币", () => {
				let t = _G.poolManager.get(DropIcon),
					e = db.get_item_db("1001");
				mgrPanel.getLayerNode(PANEL_LAYER.UI).addChild(t), t.setIcon(e.icon), t.playJumpFrom(300 + Mathf.random(-100, 100), 600 + Mathf.random(-100, 100))
			}), this.addButton("签到", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelSign)
			}), this.addButton("灵感", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelLingGan)
			}), this.addButton("恭喜获得", () => {
				this.close(), mgrAlert.alertSingleItem({
					itemId: "1001",
					count: 10
				})
			}), this.addButton("排行", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelRank)
			}), this.addButton("排行互动", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelRankHuDong)
			}), this.addButton("套装选择", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelSuitSelect)
			}), this.addButton("砸金蛋", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelEgg)
			}), this.addButton("每日任务", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelQuest)
			}), this.addButton("灵犀幻梦", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelDream)
			}), this.addButton("契约动画", () => {
				this.close(), PanelContract.openPanel()
			}), this.addButton("结算", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelOver)
			}), this.addButton("照相", () => {
				this.close(), PanelPhoto.openPanel()
			}), this.addButton("剧情对话", () => {
				this.close(), mgrAlert.openGameLoading(UI_NAME.PanelStory, "test0")
			}), this.addButton("时钟动画", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelWaitTime, 5)
			}), this.addButton("全屏图", () => {
				this.close(), mgrPanel.openPanel(DebugFSC)
			}), this.addButton("升级", () => {
				this.close(), PanelRoleLvupShow.openPanel()
			}), this.addButton("通关", () => {
				this.close(), _G.sendMsg("GM_LEVEL_SUC")
			}), this.addButton("更多游戏", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelTryGame)
			}), this.addButton("获得分享0", () => {
				this.close();
				mgrAlert.alertSingleItem({
					itemId: "1000",
					count: 10
				}, !1, null, 0)
			}), this.addButton("获得分享1", () => {
				this.close();
				mgrAlert.alertSingleItem({
					itemId: "1000",
					count: 10
				}, !1, null, 1)
			}), this.addButton("招财猫", () => {
				this.close(), mgrPanel.openPanel(UI_NAME.PanelCat)
			}), this.addButton("随机得到物品", () => {
				let t = db.get_suit_db("1"),
					e = t.lotteryParts[Math.floor(Math.random() * (t.lotteryParts.length - 1))];
				console.log("查看物品", t, e)
			}), this.addButton("神秘舞会", () => {
				let t = mgrPanel.findViewByName(UI_NAME.PanelDanceDraw);
				t && t.close(), mgrPanel.openPanel(UI_NAME.PanelDanceDraw), this.close()
			}), this.addButton("我的拍档", () => {
				let t = mgrPanel.findViewByName(UI_NAME.PanelCpTest);
				t && t.close(), mgrAlert.openGameLoading(UI_NAME.PanelCpTest), this.close()
			}), this.addButton("彩妆课堂", () => {
				let t = mgrPanel.findViewByName(UI_NAME.PanelClassRoom);
				t && t.close(), mgrPanel.openPanel(UI_NAME.PanelClassRoom), this.close()
			}), this.addButton("解锁孔雀", () => {
				PanelDanceRoleGet.openPanel(), this.close()
			}), this.addButton("解锁契约角色", () => {
				let t = db.get_role_contract_db_map();
				for (let e in t) mgrGame.contractUnlock(t[e].contractIdx);
				console.log("解锁成功"), this.close()
			}), this.addButton("水晶鞋", () => {
				this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelShoeSelect)
			}), this.addButton("美甲", () => {
				this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelManicurePreview)
			}), this.addButton("美甲加心", () => {
				mgrCp.addTestCount(), this.close()
			}), this.addButton("美甲心清空", () => {
				mgrCp.resetTestCount(), this.close()
			}), this.addButton("拍档图鉴", () => {
				this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelCpBooks)
			}), this.addButton("水晶鞋彩蛋", () => {
				this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelShoeColorEggs)
			})
		}
		addButton(t, e, a = "#000000") {
			let i = this.index % 5,
				s = Math.floor(this.index / 5);
			this.index++, i *= 105, s *= 45;
			let n = new Laya.Button(GConfig.img_single_color, t);
			return n.labelSize = 20, n.size(100, 40), n.pos(i, s), n.labelColors = `${a},${a},#7d7d7d`, this.addChild(n), UiHelper.addScrollViewClick(n, e), this.btnContent.addChild(n), n
		}
		update() {
			this.fpsText.text = _G.FPS + ""
		}
		showCopInfo() {
			try {
				let t = JSON.parse(mgrSdk.COP_INFO),
					e = "";
				for (const a in t) e += `${a}:${t[a]}\n\n`;
				this.textLabel.changeText(e)
			} catch (t) {
				this.textLabel.changeText("COP解析错误:" + Logger.getErrorStr(t))
			}
		}
		updateCfg() {
			if (!_G.H5_TEST) return;
			var t = function(t) {
				switch (t.type) {
					case "I":
						return Tools.safeParseInt(t.value, 0);
					case "S":
						return t.value;
					case "B":
						return Tools.safeParseBool(t.value);
					case "IT":
						return Tools.splitToNumber(t.value, ";");
					case "ST":
						return t.value.split(";")
				}
			};
			let e = db.getDb("game_cnf");
			for (var a = 0; a < e.length; a++) {
				var i = e[a];
				db.game_cnf[i.name] = t(i)
			}
			let s = db.getDb("cop");
			for (a = 0; a < s.length; a++) {
				i = s[a];
				db.cop[i.name] = t(i)
			}
		}
		on_click_btnClose() {
			this.close()
		}
		buildUi() {
			let t = this.resNode.addChild(new Laya.Sprite);
			t.size(450, 300), t.pos(100, 10), this.textLabel = debug_ui.create_label(0, 50, 450, 20), t.addChild(this.textLabel), t.addComponent(ScrollView).vertical = !0, this.fpsText = this.resNode.addChild(new Laya.Text), this.fpsText.color = "#ffffff", this.fpsText.fontSize = 20, this.fpsText.pos(10, 100);
			let e = this.resNode.addChild(new Laya.Sprite);
			e.pos(10, 330).size(520, 680), this.btnContent = e.addChild(new Laya.Sprite), e.addComponent(ScrollView).vertical = !0, this.showCopInfo(), this.createBaseBtns(), this.createModuleBtns(), this.createGameBtns();
			let a = Math.ceil(this.index / 5);
			this.btnContent.size(520, 45 * a - 5)
		}
	}
	var Keyboard$4 = Laya.Keyboard;
	let testVar = 1;
	class DebugKeyDown {
		constructor() {
			this.m = 3
		}
		static onKeyDown(t) {
			this.onKeyPress(t.keyCode *= t.ctrlKey ? Keyboard$4.CONTROL : 1)
		}
		static onKeyPress(t) {
			switch (t) {
				case Keyboard$4.C:
					let e = {
						desc: "是否清除存档?\n(下次启动有效)",
						confirm: () => {
							FileRecord.deletAllData(!1)
						},
						cancel: () => {}
					};
					mgrPanel.openPanel(UI_NAME.PanelDialog, e);
					break;
				case Keyboard$4.F * Keyboard$4.CONTROL:
					mgrPanel.closeTop();
					break;
				case Keyboard$4.D * Keyboard$4.CONTROL:
					mgrPanel.openPanel(DebugMain), this.debugGameInfo();
					break;
				case Keyboard$4.T:
					mgrI18n.setLanguage(E_LANGUAGE.zhcn), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW");
					break;
				case Keyboard$4.Y:
				case Keyboard$4.I:
					break;
				case Keyboard$4.J:
					this.testMath2();
					break;
				case Keyboard$4.Q:
					mgrI18n.setLanguage(E_LANGUAGE.en), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW");
					break;
				case Keyboard$4.W:
					mgrI18n.setLanguage(E_LANGUAGE.id), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW");
					break;
				case Keyboard$4.E:
					mgrI18n.setLanguage(E_LANGUAGE.vi), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW");
					break;
				case Keyboard$4.R:
					mgrI18n.setLanguage(E_LANGUAGE.pt), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW");
					break;
				case Keyboard$4.C:
					mgrClassRoom.upgradeLevel(1), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW");
					break;
				case Keyboard$4.LEFT:
				case Keyboard$4.UP:
				case Keyboard$4.RIGHT:
				case Keyboard$4.DOWN:
					break;
				default:
					console.log(`press keyCode:[${t}]`)
			}
		}
		static debugGameInfo() {
			console.log(`_G.canvasSize:${_G.canvasWidth}, ${_G.canvasHeight}`), console.log(`_G.canvasFitSize:${_G.canvasFitWidth}, ${_G.canvasFitHeight}`), mgrPanel.debugPanels(), _G.poolManager.debugInfo(), _G.pool.debugInfo(), GameStatistics.logAllData()
		}
		static astarTest() {
			let t = [
					["0", "0", "0", "1", "0", "0", "0", "0", "0", "0"],
					["0", "0", "0", "1", "0", "0", "0", "0", "0", "0"],
					["0", "0", "0", "0", "1", "0", "0", "0", "0", "0"],
					["0", "0", "0", "0", "1", "0", "0", "0", "0", "0"],
					["0", "0", "0", "0", "1", "0", "0", "0", "0", "0"],
					["0", "0", "0", "0", "1", "1", "1", "0", "0", "0"],
					["0", "0", "0", "0", "1", "0", "0", "0", "0", "0"],
					["0", "1", "1", "1", "1", "0", "0", "1", "1", "1"],
					["0", "1", "0", "0", "0", "1", "0", "1", "0", "0"],
					["0", "0", "0", "1", "0", "1", "0", "1", "0", "0"],
					["0", "0", "0", "1", "0", "0", "0", "0", "0", "0"]
				],
				e = new AStarGrid(t[0].length, t.length);
			for (let a = 0; a < t.length; a++) {
				const i = t[a];
				for (let t = 0; t < i.length; t++) {
					"1" == i[t] && e.setWalkable(t, a, !1)
				}
			}
			e.setStartNode(1, 1), e.setEndNode(1, 1);
			let a = new AStar(e, !0);
			if (a.search()) {
				console.log(t);
				let e = a.path;
				for (let a = 0; a < e.length; a++) {
					const i = e[a];
					t[i.y][i.x] = "2"
				}
				console.log(t)
			} else console.error("no path")
		}
		static md5Test() {
			let t = new UUID(100, 10);
			for (let e = 0; e < 105; e++) console.log(t.next());
			console.log("-----"), console.log(Tools.getMd5("日本")), console.log(Tools.getMd5("test111"))
		}
		static testPathLerp() {
			console.log("---------- test path lerp");
			let t = [new Laya.Vector2(0, 0), new Laya.Vector2(1, 1), new Laya.Vector2(1, 2), new Laya.Vector2(1, 3)],
				e = new Laya.Vector2;
			for (let a = 0; a <= 10; a++) console.log(GameUtility.lerpPath(t, .1 * a, e))
		}
		static testPointInPathDistance() {
			console.log("---------- test point in path distance.");
			let t = [new Laya.Vector2(0, 0), new Laya.Vector2(1, 1), new Laya.Vector2(3, 3), new Laya.Vector2(3, 0)],
				e = new Laya.Vector2;
			for (let a = 0; a <= 15; a++) console.log(GameUtility.getPointInPath(t, .5 * a, !1, e));
			console.log("");
			for (let a = 0; a <= 15; a++) console.log(GameUtility.getPointInPath(t, .5 * a, !0, e))
		}
		static testDecorector() {
			let t = new DebugKeyDown;
			new DebugKeyDown;
			t.m = 4;
			let e = t.testDec("gg1");
			console.log("--------- r:", e)
		}
		testDec(t) {
			console.log("test desc", t, this.m), console.log("laya编译不支持装饰器")
		}
		static testBuDingCanShu(...t) {
			console.log(t, t.length);
			let e = t;
			this.testFunc2(e), this.testFunc2(...t), this.testFunc2(...e)
		}
		static testFunc2(...t) {
			console.log(t, t.length)
		}
		static testSerializeObject() {
			class t {
				constructor() {
					this.a = 1, this.b = [3]
				}
				print() {
					console.log(this.a), console.log(this.b.length)
				}
			}
			class e extends t {
				printB() {
					console.log(this.a), console.log(this.b.length)
				}
			}
			let a = new e;
			a.a = 3, a.b = [1, 2];
			let i = Tools.serializeObject(a),
				s = new e;
			Tools.deserializeObject(i, s), s.print(), console.log("==="), s.printB()
		}
		static testNull() {
			let t = {};
			console.log(null == t.d), console.log(null == t.d), t = 0, console.log("" == t), console.log(null == t), t = "", console.log("" == t), console.log(null == t), console.log(0 == t), console.log(!0)
		}
		static testArray() {
			let t = new Array(3);
			console.log(t.length), console.log(t), console.log(t[2]), console.log("----");
			let e = t.indexOf(3);
			console.log(e), console.log("----");
			let a = t.slice();
			t[1] = 9, console.log(t), console.log(a), (t = [3, 4, 1]).sort(function(t, e) {
				return t > e ? 1 : t < e ? -1 : 0
			}), console.log("sort:", t), t = [1, 2, 3], this.testMerge(t, 4, 5, 6);
			let i = (t = [1, 2, 3]).concat(1, 2, a = [4, 5, 6]);
			console.log("concat"), console.log(t), console.log(a), console.log(i)
		}
		static testMerge(t, ...e) {
			let a = t.splice(t.length - 1, 0, ...e);
			console.log("merge result"), console.log(t), console.log(a)
		}
		static testThrow() {
			throw "tes tthrow error"
		}
		static testMath() {
			let t = 1e4,
				e = 0;
			for (let a = 0; a < 100; a++) {
				let a = Mathf.uniform2NormalDistribution();
				a = 20 * (a / 3 + 1), console.log(a), t = Math.min(t, a), e = Math.max(e, a)
			}
			console.log("-----min:", t, "max:", e), console.log(-80), console.log(-50.5)
		}
		static test3yuan(t) {
			t ? console.log("true") : console.log("false")
		}
		static testString() {
			let t = "abcde";
			console.log("---------"), console.log(t.indexOf("m")), console.log(t.indexOf("a")), console.log(t.charAt(0)), console.log(t.charAt(2)), console.log(t.length), t = "aabcdd", console.log("replace"), console.log(t.replace("a", "e")), console.log(t.replace("d", "e")), console.log(t.replace(/a/g, "e")), console.log(t.replace(/d/g, "e"))
		}
		static testWorldPos() {
			let t = mgrPanel.getLayerNode(PANEL_LAYER.BOTTOM);
			console.log(t.localToGlobal(new Laya.Point(0, 0)))
		}
		static debugDelete() {
			let t = {
				a: "1",
				b: "2"
			};
			console.log(delete t.a), console.log(delete t.a), console.log(delete t.c), console.log(delete t.b)
		}
		static testSound() {
			console.log("play sound"), mgrSound.playSound("loading1")
		}
		static testConvertCoin() {
			console.log("start convert"), console.log(GameUtility.convertCoinString(999, !1)), console.log(GameUtility.convertCoinString(1e3, !1)), console.log(GameUtility.convertCoinString(10421, !1)), console.log(GameUtility.convertCoinString(112456, !1)), console.log(GameUtility.convertCoinString(1234e3, !1)), console.log(GameUtility.convertCoinString(1234e4, !1)), console.log(GameUtility.convertCoinString(1234e5, !1)), console.log(GameUtility.convertCoinString(0xb3921510cd3, !1)), console.log(GameUtility.convertCoinString(Number.MAX_VALUE, !1)), console.log(Mathf.getDigits(.34)), console.log(Mathf.getDigits(1.34)), console.log(Mathf.getDigits(12.34)), console.log(Mathf.getDigits(-12.34))
		}
		static testImpl() {}
		static testImpl1(t) {}
		static testTouchRect() {}
		static testDump() {
			let t = db.get_item_db("1001");
			Tools.dump(t, "itemDb");
			let e = {
				obj: {
					a: "a",
					b: 2,
					c: {
						d: 3,
						n: ["2", 3, {
							x: 11,
							y: 22
						}]
					}
				},
				c: {
					m: "mmm",
					c: [2, 4, 6]
				}
			};
			console.log("dump:"), Tools.dump(e, "obj1"), console.log("dir:"), console.dir(e), console.log("log:"), console.log(e), console.log("table:"), console.table(e)
		}
		static testError() {
			let t = function(t) {
				console.log("type:", typeof t), console.log("error:", t), console.log("toString:", t.toString()), console.log("json:", JSON.stringify(t)), t instanceof Error ? console.log(t.message, t.stack) : console.log(JSON.stringify(t)), console.log("")
			};
			try {
				this.testError1()
			} catch (e) {
				t(e)
			}
			try {
				this.testError2()
			} catch (e) {
				t(e)
			}
			try {
				this.testError3()
			} catch (e) {
				t(e)
			}
			try {
				this.testError4()
			} catch (e) {
				t(e)
			}
		}
		static testError1() {
			throw "haha"
		}
		static testError2() {
			throw new Error("nono")
		}
		static testError3() {
			throw new Array(4)
		}
		static testError4() {
			throw {
				message: "yeye",
				stack: "sss"
			}
		}
		static testUtf8() {
			let t = "你好";
			console.log(t, Tools.utf8Len(t)), t = "你好，1", console.log(t, Tools.utf8Len(t)), t = "是a,的", console.log(t, Tools.utf8Len(t))
		}
		static testDir() {
			let t = Mathf.random(360);
			console.log("rot:", t);
			let e = GameUtility.convertRot2Dir(t);
			console.log("dir:", e), t = GameUtility.convertDir2Rot(e), console.log("cRot:", t), t = GameUtility.convertDir2Rot(new Laya.Vector2(-1, 1)), console.log("cRot:", t), t = GameUtility.convertDir2Rot(new Laya.Vector2(1, 1)), console.log("cRot:", t), t = GameUtility.convertDir2Rot(new Laya.Vector2(-1, -1)), console.log("cRot:", t)
		}
		static testVec() {}
		static testVar() {
			let t = {
					n: 1
				},
				e = t;
			t.x = t = {
				n: 2
			}, console.log(t.x), console.log(e.x), console.log(t), console.log(e)
		}
		static testJsClass() {
			let t = new DebugKeyDown;
			console.log(t.constructor);
			let e = new TestClass;
			try {
				e.testFun0(e.printFun)
			} catch (t) {
				console.error(t)
			}
			console.log("---");
			try {
				e.testFun1(e.printFun)
			} catch (t) {
				console.error(t)
			}
			console.log("---");
			try {
				e.testFun2()
			} catch (t) {
				console.error(t)
			}
		}
		static testDownload() {
			if (document) {
				var t = document.createElement("a");
				t.href = "data:text/txt;charset=utf-8,\ufeff" + encodeURIComponent("姓名,期中成绩,期末成绩\n张三,58,95\n李四,98,74"), t.download = "测试.csv", t.click()
			}
		}
		static testFormat() {
			console.log(String.format("[%2d]", 1.456)), console.log(String.format("%02d-%s", 1, "a")), console.log(String.format("%.2f", 1.456))
		}
		static testTween() {
			let t = (new Laya.Sprite).size(100, 100).pos(_G.canvasWidth / 2, _G.canvasHeight / 2, !0).scale(0, 0, !0);
			t.texture = UiHelper.WHITE_TEXTURE, t.alpha = 0, mgrPanel.getLayerNode(PANEL_LAYER.TOP).addChild(t);
			cc.tween(t).call(function() {
				console.log("start action")
			}).delay(1).to(1, {
				scaleX: 1,
				scaleY: 1,
				alpha: 1
			}).parallel(cc.tween().to(.5, {
				x: 200,
				y: 200
			}, {
				easing: cc.Ease.backOut
			}).call(function() {
				console.log("放大完毕")
			}), cc.tween().to(2, {
				rotation: 360
			}).call(function() {
				console.log("旋转完毕")
			})).repeat(3).call(function() {
				console.log("parallel完毕,开始位移")
			}).to(.1, {
				x: 100,
				y: 800
			}).then(cc.jumpTo(1, 500, 600, 200, 2)).sequence(cc.tween().call(function() {
				console.log("最后阶段开始，等待1秒")
			}).delay(1), cc.tween().call(function() {
				console.log("阶段2,等待一秒")
			}), cc.tween().delay(1), cc.tween().call(function() {
				console.log("完毕")
			})).to(2, {
				x: 150,
				y: 200
			}).call(function() {
				console.log("最终完毕")
			}).start()
		}
		static testMath2() {
			let t = new Laya.Vector3(0, 0, 0),
				e = new Laya.Vector3(0, -1, 0),
				a = new Laya.Vector3(0, 0, 0),
				i = new Laya.Vector3(0, 0, 1),
				s = new Laya.Vector3(1, 0, 0),
				n = Timer.now;
			for (var o, r = 0; r < 1e7; r++) o = Mathf.point2line(a, i, s);
			console.log("point2line:", Timer.now - n, o), Timer.callLater(1, function() {
				n = Timer.now;
				for (var r = 0; r < 1e7; r++) o = Mathf.intersectTriangle(t, e, a, i, s);
				console.log("intersectTriangle:", Timer.now - n, o)
			})
		}
	}

	function createFun() {
		return function(t) {
			console.log("create fun m :", this.m), (t = t.bind(this))(), console.log("fun 0 suc.")
		}
	}
	class TestBase {
		constructor() {
			this.n = 2
		}
		printFun() {
			console.log(this.n)
		}
	}
	class TestClass extends TestBase {
		constructor() {
			super(...arguments), this.m = 3, this.testFun0 = createFun()
		}
		testFun1(t) {
			(t = t.bind(this))(), console.log("fun 1 suc.")
		}
		testFun2() {
			this.testFun1(this.printFun), console.log("fun 2 suc.")
		}
		printFun() {
			console.log(this.m), super.printFun()
		}
	}
	let max_size = 4,
		start_y = -150,
		delta_y = -70,
		offset_y = -88,
		bg_skin = "res/ui/pnl_9s/pnl_tip.png";
	class PanelTip extends PanelBase {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.TOP, this.panelStyle = 0, this.resourceName = "PanelTip", this.textNode = null, this._exportNodeInfo = {}, this.itemList = []
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), e.name = "PanelTip", this.centerNode = new Laya.Sprite, e.addChild(this.centerNode), this.centerNode.pos(_G.canvasWidth / 2, _G.canvasHeight / 2), this.createFromNode(e)
		}
		buildUi() {
			this.registerMsg({
				[BASE_MSG.UI_SHOW_TIP]: this.onMsgShowTip.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgShowTip(t) {
			this.playItem(t + "")
		}
		playItem(t) {
			for (let e = 0; e < this.itemList.length; e++) {
				const a = this.itemList[e];
				if (!a.isDone && a.equals(t)) return void a.keepAnim()
			}
			let e;
			this.itemList.length >= max_size ? e = this.itemList.pop() : (e = new TextItem, this.centerNode.addChild(e)), this.itemList.unshift(e), e.setText(t), e.play();
			for (let t = 0; t < this.itemList.length; t++) {
				const e = this.itemList[t];
				if (e.isDone) break;
				e.y = start_y + t * delta_y
			}
		}
	}
	class TextItem extends Laya.Sprite {
		constructor() {
			super(), this.m_isDone = !0, this.m_text = "", this.m_count = 0, this.animNode = new Laya.Sprite, this.addChild(this.animNode);
			let t = new Laya.Image;
			t.skin = bg_skin, t.centerX = 0, t.centerY = 0, this.animNode.addChild(t), this.textLabel = new Laya.Label(""), this.textLabel.fontSize = 20, this.textLabel.color = "#ffffff", this.textLabel.centerX = 0, this.textLabel.centerY = 0, this.animNode.addChild(this.textLabel), this.createAction()
		}
		createAction() {
			this.normalTimeLine = Laya.TimeLine.to(this.animNode, {
				y: offset_y,
				alpha: 1
			}, 200).to(this.animNode, {
				alpha: 1
			}, 150, null, -200).to(this.animNode, {}, 2e3).to(this.animNode, {
				alpha: 0
			}, 200).on(Laya.Event.COMPLETE, this, this.onActionFinish)
		}
		onActionFinish() {
			this.visible = !1, this.m_isDone = !0, this.m_text = "", this.m_count = 0
		}
		resetNode() {
			this.animNode.pos(0, 0, !0), this.animNode.alpha = 0
		}
		setText(t) {
			this.textLabel.text = t, this.m_text = t
		}
		equals(t) {
			return this.m_text === t
		}
		keepAnim() {
			this.normalTimeLine.pause(), this.animNode.alpha = 1, this.animNode.y = offset_y, this.animNode.scale(0, 0, !0), this.keepTimeLine ? this.keepTimeLine.pause() : this.keepTimeLine = Laya.TimeLine.to(this.animNode, {
				scaleX: 1,
				scaleY: 1
			}, 200, Laya.Ease.backOut).to(this.animNode, {}, 2e3).to(this.animNode, {
				alpha: 0
			}, 200).on(Laya.Event.COMPLETE, this, this.onActionFinish), this.keepTimeLine.play(), this.textLabel.text = this.m_text
		}
		play() {
			this.m_isDone || (this.normalTimeLine.pause(), this.keepTimeLine && this.keepTimeLine.pause()), this.m_isDone = !1, this.visible = !0, this.resetNode(), this.normalTimeLine.play()
		}
		get isDone() {
			return this.m_isDone
		}
	}
	class SpriteSheet extends Laya.Sprite {
		constructor() {
			super(), this.fps = 30, this.loop = !1
		}
		loadTextures(t, e, a) {
			if (e > a) console.error("SpriteSheet size error.");
			else {
				this.textures = new Array(a - e + 1);
				for (let i = e; i <= a; i++) mgrRes.loadRes(String.format(t, i), RES_TYPE.IMAGE, t => {
					this.destroyed || (this.textures[i] = t)
				})
			}
		}
		dispose() {
			this.stop(), this.textures = null, this.destroy()
		}
		reuse() {
			this.enable = !0
		}
		unuse() {
			this.stop(), this.removeFromParent(), this.enable = !1
		}
		play(t, e, a, i) {
			i && i.addChild(this), t && this.setPosition(t), this.bStarted = !0, this.curIndex = 0, this.texture = this.textures[this.curIndex], Laya.timer.loop(1 / this.fps * 1e3, this, this.update), e && Laya.timer.once(1e3 * e, this, this.stopAndPutback, [a])
		}
		stopAndPutback(t) {
			this.stop(), t ? Laya.timer.once(1e3 * t, this, this.putBack) : this.putBack()
		}
		stop() {
			this.bStarted = !1, Laya.timer.clear(this, this.update)
		}
		putBack() {
			_G.poolManager.put(this)
		}
		update() {
			if (this.bStarted) {
				if (++this.curIndex >= this.textures.length) {
					if (!this.loop) return void this.stop();
					this.curIndex = 0
				}
				this.texture = this.textures[this.curIndex]
			}
		}
		get enable() {
			return this.active && this.visible
		}
		set enable(t) {
			this.active = t, this.visible = t
		}
		setName(t) {
			this.name = t
		}
		addNodeChild(t) {
			t.setParent(this)
		}
		getChild(t) {
			return UiHelper.getChild(this, t)
		}
		setParent(t) {
			t.addChild(this)
		}
		getParent() {
			return this.parent
		}
		removeFromParent() {
			this.removeSelf()
		}
		setSize(t, e) {
			this.size(t, e)
		}
		setPosition(t, e) {
			void 0 === e ? this.pos(t.x, t.y, !0) : this.pos(t, e, !0)
		}
		setScale(t, e) {
			void 0 === e ? this.scale(t.x, t.y, !0) : this.scale(t, e, !0)
		}
		setRotation(t) {
			this.rotation = t
		}
		setAlpha(t) {
			this.alpha = t
		}
		show() {
			this.enable = !0
		}
		hide() {
			this.enable = !1
		}
		setSiblingIndex(t) {
			this.parent && (-1 == t && (t = this.parent.numChildren - 1), this.parent.setChildIndex(this, t))
		}
		setTop() {
			this.setSiblingIndex(-1)
		}
		setBottom() {
			this.setSiblingIndex(0)
		}
		convertToWorldSpaceOut(t, e) {
			let a = Laya.Point.TEMP;
			return a.setTo(t.x, t.y), this.localToGlobal(a, !1), e || (e = new Laya.Vector2), e.x = a.x, e.y = a.y, e
		}
	}
	class ScreenTouchEffect {
		constructor(t, e) {
			this.enable = !0, this.effectId = t, this.bKeepWhenMove = e, Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.touchDown), Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.touchMove), Laya.stage.on(Laya.Event.MOUSE_UP, this, this.touchUp), this.worldPos = _G.pool.get(Laya.Vector3), this.offset = _G.pool.get(Laya.Vector2).setTo(0, 0)
		}
		dispose() {
			Laya.stage.offAllCaller(this), _G.pool.put(this.offset), _G.pool.put(this.worldPos), this.clearEffect()
		}
		touchDown() {
			this.enable && this.createEffect()
		}
		touchMove() {
			if (this.enable && this.clickEffect && this.bKeepWhenMove) {
				let t = this.worldPos;
				t.setValue(Laya.stage.mouseX + this.offset.x, Laya.stage.mouseY + this.offset.y, 0), mgrAlert.global2camera(t, t), this.clickEffect.setPosition(t)
			}
		}
		touchUp() {
			this.clearEffect()
		}
		createEffect() {
			this.clearEffect(), this.clickEffect = _G.poolManager.get(Particle, this.effectId), this.clickEffect.setParent(mgrAlert.scene3dfont), this.clickEffect.play(), this.worldPos.setValue(Laya.stage.mouseX + this.offset.x, Laya.stage.mouseY + this.offset.y, 0), mgrAlert.global2camera(this.worldPos, this.worldPos), this.clickEffect.setPosition(this.worldPos), this.bKeepWhenMove || Laya.timer.once(500, this, this.clearEffect)
		}
		clearEffect() {
			this.clickEffect && (this.clickEffect.stopAndPutback(1), this.clickEffect = null), Laya.timer.clear(this, this.clearEffect)
		}
		setOffset(t = 0, e = 0) {
			this.offset.setValue(t, e)
		}
	}
	class ResWatcher {
		constructor(t = 2) {
			this.bTipShowing = !1, this.showTipDeltaTime = t, Laya.loader.retryNum = 1e6, Laya.loader.retryDelay = 50, mgrNative.isHtml5Platform() && Laya.timer.loop(1e3 * t, this, this.checkFailRes)
		}
		checkFailRes() {
			if (this.bTipShowing) return;
			let t = Laya.loader._failRes;
			if (t) {
				let e = !1;
				Tools.forEachMap(t, (t, a) => {
					if (a > 10 && !t.startsWith("http")) return e = !0, !0
				}), e ? this.showReconnectDialog() : this.hideReconnectDialog()
			}
		}
		resetCheckState() {
			this.bTipShowing = !1, Laya.timer.loop(1e3 * this.showTipDeltaTime, this, this.checkFailRes, null, !0)
		}
		showReconnectDialog() {
			this.bTipShowing = !0, mgrPanel.openPanel(UI_NAME.PanelReconnectDialog, {
				clickCallback: this.resetCheckState.bind(this)
			})
		}
		hideReconnectDialog() {
			if (this.bTipShowing) {
				this.resetCheckState();
				let t = mgrPanel.findViewByName(UI_NAME.PanelReconnectDialog);
				t && t.close()
			}
		}
	}
	class SceneMain extends SceneBase {
		getResLoader() {
			let t = new ResLoader("SceneMain");
			return t.addCall(this.initNative), t.addCall(this.initMsg.bind(this)), t.addCall(this.initGameSetting), t.addCall(this.initGameCfg), t.addCall(this.initBaseModule), t.addCall(this.initSdk), t.addCall(this.initBaseRes.bind(this), 6), t.addCall(this.initManager), t.addCall(this.initPool), t.addCall(this.initShader), t.addCall(this.initRole), t.addCall(this.initWorld), t.addCall(this.openPanel.bind(this), 6), this.resLoader = t, t
		}
		initNative(t) {
			SDKBridge.init(), Timer.callLoop(.05, function(e) {
				mgrNative.isAllowStartGame() && (e.stop(), t())
			})
		}
		initMsg(t) {
			this.registerMsg({
				[BASE_MSG.SDK_EXIT_GAME]: this.onMsgExitGame,
				[BASE_MSG.UI_SHOW_ITEMS]: this.onMsgShowItems
			}), t()
		}
		onMsgExitGame() {
			if (mgrGuide.isGuiding) return;
			let t = {
				desc: "要离开游戏了吗？",
				title: "提示",
				confirm: function() {
					console.log("退出游戏"), window.conch && window.conch.exit()
				},
				cancel: function() {},
				confirmText: "离开",
				cancelText: "继续"
			};
			mgrPanel.openPanel(UI_NAME.PanelDialog, t)
		}
		onMsgShowItems(t) {
			mgrAlert.alertItems(t)
		}
		initGameSetting(t) {
			Laya.stage.on(Laya.Event.KEY_DOWN, this, function(t) {
				_G.sendMsg(BASE_MSG.SYS_KEY_DOWN, t), DebugKeyDown.onKeyDown(t)
			}), Laya.stage.on(Laya.Event.KEY_UP, this, function(t) {
				_G.sendMsg(BASE_MSG.SYS_KEY_UP, t)
			}), ViewBase.setClickSound("yllsd_01", "yllsd_01"), Laya.MouseManager.multiTouchEnabled = !1, t()
		}
		initGameCfg(t) {
			CfgLoader.init(function(e) {
				t()
			})
		}
		initBaseModule(t) {
			FileRecord.init(), GameStatistics.init(), t()
		}
		initSdk(t) {
			mgrAdv.setNativeUi(UI_NAME.PanelNativeAdv, null, UI_NAME.PanelNativeBanner), mgrSdk.onload(), mgrSdk.start(), mgrSdk.setVersion(GConfig.chn_data), Timer.callLoop(.05, function(e) {
				mgrSdk.isChnResult && (e.stop(), t())
			})
		}
		initBaseRes(t) {
			GameStatistics.statisCommonEvent(1001);
			let e = new ResLoader("BaseRes");
			e.add("res/singleColor.png", Laya.Loader.IMAGE), e.add("res/cfg/allCfgDb.txt", RES_TYPE.BUFFER), e.add("res/cfg/3dConfig.txt", RES_TYPE.TEXT), e.add("res/cfg/paintData.txt", RES_TYPE.BUFFER), e.add("res/cfg/shaderCompile.txt", RES_TYPE.TEXT), e.add("res/texture/sf_noise_clouds_01.png", RES_TYPE.TEXTURE2D), e.add("res/unity/Conventional/map_01.ls", RES_TYPE.PREFAB3D), Laya.loader.load("res/i18n/en_random_name_part1_db.json", Laya.Handler.create(this, () => {
				mgrI18n.en1 = Laya.loader.getRes("res/i18n/en_random_name_part1_db.json")
			})), Laya.loader.load("res/i18n/en_random_name_part2_db.json", Laya.Handler.create(this, () => {
				mgrI18n.en2 = Laya.loader.getRes("res/i18n/en_random_name_part2_db.json")
			})), Laya.loader.load("res/i18n/vi_random_name_part1_db.json", Laya.Handler.create(this, () => {
				mgrI18n.vi1 = Laya.loader.getRes("res/i18n/vi_random_name_part1_db.json")
			})), Laya.loader.load("res/i18n/vi_random_name_part2_db.json", Laya.Handler.create(this, () => {
				mgrI18n.vi2 = Laya.loader.getRes("res/i18n/vi_random_name_part2_db.json")
			})), Laya.loader.load("res/i18n/pt_random_name_part1_db.json", Laya.Handler.create(this, () => {
				mgrI18n.pt1 = Laya.loader.getRes("res/i18n/pt_random_name_part1_db.json")
			})), Laya.loader.load("res/i18n/pt_random_name_part2_db.json", Laya.Handler.create(this, () => {
				mgrI18n.pt2 = Laya.loader.getRes("res/i18n/pt_random_name_part2_db.json")
			})), Laya.loader.load("res/i18n/id_random_name_part1_db.json", Laya.Handler.create(this, () => {
				mgrI18n.id1 = Laya.loader.getRes("res/i18n/id_random_name_part1_db.json")
			})), Laya.loader.load("res/i18n/id_random_name_part2_db.json", Laya.Handler.create(this, () => {
				mgrI18n.id2 = Laya.loader.getRes("res/i18n/id_random_name_part2_db.json")
			})), Laya.loader.load("res/i18n/random_name_part1_db.json", Laya.Handler.create(this, () => {
				mgrI18n.zhcn1 = Laya.loader.getRes("res/i18n/random_name_part1_db.json")
			})), Laya.loader.load("res/i18n/random_name_part2_db.json", Laya.Handler.create(this, () => {
				mgrI18n.zhcn2 = Laya.loader.getRes("res/i18n/random_name_part2_db.json")
			})), e.add(SceneMain.MAIN_RES), e.setParent(this.resLoader), e.setLoadingCallback(t), e.loadAll()
		}
		initManager(t) {
			mgrLoader.onload(function(e) {
				t()
			})
		}
		initPool(t) {
			_G.poolManager.register(Model, 30), _G.poolManager.register(Spine, 50), _G.poolManager.register(Particle, 100), _G.poolManager.register(SpriteSheet, 10), _G.poolManager.register(GModel, 30), _G.poolManager.register(DropIcon, 20), _G.poolManager.register(CoinCount, 20), _G.poolManager.register(ReuseSprite, 20), t()
		}
		initShader(t) {
			mgrMaterial.precompileshader(t)
		}
		initRole(t) {
			if (null != mgrGame.contractIndex) {
				let e = new ResLoader("FirstGameRes");
				mgrPart.addPartResList(mgrPart.partsWear, e, !0), e.setLoadingCallback(t), e.loadAll()
			} else t()
		}
		initWorld(t) {
			t()
		}
		openPanel(t) {
			if (GameStatistics.statisCommonEvent(1002), null != mgrGame.contractIndex) mgrPanel.openPanel(UI_NAME.PanelMain, null, !1, function() {
				t(), GameStatistics.statisCommonEvent(1003, 1)
			});
			else {
				mgrOffline.firstPlayGame = !0;
				let e = PanelContract.getResLoader();
				e.setParent(this.resLoader), e.setLoadingCallback(function() {
					t(), mgrPanel.openPanel(UI_NAME.PanelContract)
				}), e.loadAll()
			}
		}
		onEnter(t) {
			SceneMain._started && Logger.error("SceneMain只能启动一次!"), SceneMain._started = !0, console.log("enter scene main"), _G.H5_TEST && GameRemoteRouter.create(), mgrPanel.openPanel(PanelTip), mgrRes.loadBmfontWithText(GConfig.bmf_score), mgrRes.loadBmfontWithText(GConfig.bmf_rank), mgrRes.loadBmfontWithText(GConfig.bmf_laji), mgrRes.loadBmfontWithText(GConfig.bmf_over), mgrRes.loadBmfontWithText(GConfig.bmf_class), mgrRes.loadBmfontWithText(GConfig.bmf_math), new ScreenTouchEffect("106"), new ResWatcher
		}
		onExit() {}
	}
	SceneMain._started = !1, SceneMain.MAIN_RES = ["res/ui/PanelNativeBanner.json", "res/ui/PanelMain.json", "res/ui/PanelGameLoading1.json", "res/ui/PanelGuide.json"];
	const B_SHOW_LICENCE_INFO_ON_LOADING = !1;
	class PanelLoading extends PanelLoadingBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelLoading.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_followTarget: "Laya.Sprite",
				cc_kouHong: "Laya.Sprite",
				cc_spriteLogo: "Laya.Sprite",
				cc_topNode: "Laya.Sprite",
				cc_nodetipsLabel: "Laya.Sprite",
				cc_licenceInfo: "Laya.Label",
				cc_progressLabel: "Laya.Label"
			}
		}
		buildUi() {
			this.nodetipsLabel.visible = !1, mgrI18n.trySetI18nImage(this.spriteLogo, "pnl_loading_01.png"), this.spriteLogo.y = 1200, cc.tween(this.spriteLogo).delay(.1).to(.5, {
				y: 723
			}, cc.OPTION.BACK_OUT).start(), this.onLoadProgress(this.curProgress)
		}
		update() {
			super.update();
			let t = Laya.Point.TEMP;
			UiHelper.getSelfGlobalPos(this.followTarget, t, this.bg), this.kouHong.pos(t.x, t.y, !0)
		}
		onLoadStart(t) {
			this.callable || this.safeCall(this.onLoadStart, t)
		}
		onLoadProgress(t) {
			if (!this.callable) return;
			let e = `${t=Math.round(100*t)}%`;
			this.progressLabel.text = e
		}
		onLoadComplete() {
			return !0
		}
	}
	class PanelActiveClass extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelActiveClass.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_buttonToGo: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(2513), UiHelper.addClickEvent(this.spriteBg, this.on_click_buttonToGo.bind(this), null, .5)
		}
		on_click_buttonToGo() {
			mgrJumpPanel.jumpTo(JUMP_PANEL.CLASS_ROOM)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelActiveCp extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelActiveCp.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_buttonToGo: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(2515), UiHelper.addClickEvent(this.spriteBg, this.on_click_buttonToGo.bind(this), null, .5)
		}
		on_click_buttonToGo() {
			mgrAlert.openPanelLoading(UI_NAME.PanelCpTestPreview), this.close()
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelActiveCpTestPreview extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelActiveCpTestPreview.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_buttonToGo: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(2517), UiHelper.addClickEvent(this.spriteBg, this.on_click_buttonToGo.bind(this), null, .5)
		}
		on_click_buttonToGo() {
			mgrJumpPanel.jumpTo(JUMP_PANEL.CP_TEST)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelActiveDance extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelActiveDance.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_buttonToGo: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(2514), UiHelper.addClickEvent(this.spriteBg, this.on_click_buttonToGo.bind(this), null, .5)
		}
		on_click_buttonToGo() {
			mgrJumpPanel.jumpTo(JUMP_PANEL.DANCE_DRAW)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelActiveDanceNew extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelActiveDanceNew.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_buttonToGo: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(2516), UiHelper.addClickEvent(this.spriteBg, this.on_click_buttonToGo.bind(this), null, .5)
		}
		on_click_buttonToGo() {
			mgrJumpPanel.jumpTo(JUMP_PANEL.DANCE_DRAW)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelActiveTest extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelActiveTest.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_buttonToGo: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(2512), UiHelper.addClickEvent(this.spriteBg, this.on_click_buttonToGo.bind(this), null, .5)
		}
		on_click_buttonToGo() {
			mgrAlert.openPanelLoading(UI_NAME.PanelRoleTest, null, function() {
				_G.sendMsg("ADVERTISING_JUMP_FINISH")
			}), this.close()
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelAdvCostDialog extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelAdvCostDialog.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_titleLabel: "Laya.Label",
				cc_descLabel: "Laya.Label",
				cc_buttonClose: "UIButton",
				cc_costCount: "Laya.Label",
				cc_buttonCost: "UIButton",
				cc_costLabel: "Laya.Label",
				cc_buttonAdv: "UIButton",
				cc_advLabel: "Laya.Label"
			}
		}
		buildUi() {
			let t = this.context || {};
			t.title ? this.titleLabel.text = t.title : this.titleLabel.text = mgrI18n.getText("panelAdvCostDialog.1"), this.descLabel.text = t.desc || "", t.advText ? this.advLabel.text = t.advText : this.advLabel.text = mgrI18n.getText("panelAdvCostDialog.2"), t.costText ? this.costLabel.text = t.costText : this.costLabel.text = mgrI18n.getText("panelAdvCostDialog.3")
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonCost() {
			this.close(), this.context && this.context.fOnClickCost && this.context.fOnClickCost()
		}
		on_click_buttonAdv() {
			this.close(), this.context && this.context.fOnClickAdv && this.context.fOnClickAdv()
		}
	}
	class PanelAdvDialog extends PanelBase {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.DIALOG, this.resourceName = "res/ui/PanelAdvDialog.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_titleLabel: "Laya.Label",
				cc_descLabel: "Laya.Label",
				cc_buttonNo: "UIButton",
				cc_buttonYes: "UIButton",
				cc_yesLabel: "Laya.Label"
			}, this._instOrBanner = new AdvInstOrBanner("enter_adv_dialog", "banner_adv_dialog")
		}
		buildUi() {
			let t = this.context,
				e = t.desc || " ";
			this.descLabel.text = e, t.title ? this.titleLabel.text = t.title : this.titleLabel.text = mgrI18n.getText("panelAdvCostDialog.1"), t.confirmText ? this.yesLabel.text = t.confirmText : this.yesLabel.text = mgrI18n.getText("panelAdvCostDialog.2")
		}
		dispose() {
			this.stopProcMsg(), this._instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this._instOrBanner.onFocus(t)
		}
		on_click_buttonNo() {
			this.close(), this.context.cancel && this.context.cancel()
		}
		on_click_buttonYes() {
			this.close(), this.context.confirm && this.context.confirm()
		}
	}
	const bg_image = "res/ui/pnl_chn/more_game_banner_bg.png",
		image_size_grid = "40,30,40,30",
		item_width = 70,
		item_height = 95,
		banner_width = 520,
		padding = 20,
		banner_height = item_height + padding;
	class MoreGameBanner extends ViewBase {
		constructor() {
			super(), this._bInit = !1, this.create()
		}
		static get copEnable() {
			return !!mgrSdk.getSubCop("b_more_game_banner")
		}
		static setBannerVisible(t, e = 0) {
			t ? this.openBanner(e) : this.closeBanner()
		}
		static openBanner(t = 0) {
			this.openCount++, this.copEnable && (this._instance || (this._instance = new MoreGameBanner), this._instance && 1 == this.openCount && (this._instance.show(t), this._instance.setTop()))
		}
		static closeBanner() {
			this.openCount--, this.openCount < 0 && console.warn("re close more game banner."), this._instance && 0 == this.openCount && this._instance.hide()
		}
		create() {
			let t = new Laya.Image;
			t.skin = bg_image, t.sizeGrid = image_size_grid, t.size(banner_width, banner_height), t.anchorX = .5, t.anchorY = 1;
			let e = t.addChild(new Laya.Sprite);
			e.pos(padding / 2, padding / 2).size(banner_width - padding, item_height), e.scrollRect = Laya.Rectangle.create().setTo(0, 0, banner_width - padding, item_height);
			let a = e.addChild(new Laya.Sprite).addComponent(UIHVLayout);
			a.align = "head", a.space = 10, this._layout = a, this.createFromNode(t)
		}
		onCreateComplete() {
			let t = mgrPanel.getLayerNode(PANEL_LAYER.DIALOG);
			this.setParent(t), this._msgHandler = new MsgHandler, this._msgHandler.registerListeners({
				[BASE_MSG.SDK_OPEN_JUMP_RESULT]: this.onMsgOpenJumpResult.bind(this)
			}), this._msgHandler.startProcMsg(), mgrSdk.openJump("list"), this.hide()
		}
		show(t = 0) {
			super.show(), this.setPosition(.5 * _G.canvasWidth, _G.canvasHeight - 200 - t), this._layout.node.x = 0, this._tween && this._tween.start()
		}
		hide() {
			super.hide(), this._tween && this._tween.stop()
		}
		dispose() {
			this._msgHandler && (this._msgHandler.stopProcMsg(), this._msgHandler = null), super.dispose()
		}
		onMsgOpenJumpResult(t) {
			if ("list" == t.type) {
				let e = t.jumpInfo;
				this.fillData(e)
			}
		}
		fillData(t) {
			if (!t || 0 == t.length) return void this.hide();
			if (this._bInit) return;
			this._bInit = !0;
			for (let e = 0; e < t.length; e++) {
				let a = this.createItem();
				a.loadImage(t[e].url), UiHelper.addClickEvent(a, function() {
					mgrSdk.jumpOtherGame(t[e].index, "list")
				})
			}
			this._layout.updateLayout(0, !0);
			let e = this._layout.totalLen - (banner_width - padding);
			if (e > 0) {
				let a = Mathf.lerpFromInverseLerp(4, 8, 6, 10, t.length);
				this._tween = cc.tween(this._layout.node).repeatForever(cc.tween().to(a, {
					x: -e
				}).delay(.3).to(a, {
					x: 0
				}).delay(.3)).start()
			}
		}
		createItem() {
			let t = new Laya.Sprite;
			return t.size(item_width, item_height), this._layout.addChild(t), t
		}
	}
	MoreGameBanner.openCount = 0;
	class PanelDialog extends PanelBase {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.DIALOG, this.resourceName = "res/ui/PanelDialog.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_titleLabel: "Laya.Label",
				cc_descLabel: "Laya.Label",
				cc_buttonNo: "UIButton",
				cc_noLabel: "Laya.Label",
				cc_buttonYes: "UIButton",
				cc_yesLabel: "Laya.Label"
			}, this.instOrBanner = new AdvInstOrBanner("enter_dialog", "banner_dialog")
		}
		buildUi() {
			let t = this.context,
				e = t.desc || " ";
			this.descLabel.text = e, t.title ? this.titleLabel.text = t.title : this.titleLabel.text = mgrI18n.getText("schoolYearbookItem.2"), t.confirmText ? this.yesLabel.text = t.confirmText : this.yesLabel.text = mgrI18n.getText("panelAdvCostDialog.2"), t.cancelText ? this.noLabel.text = t.cancelText : this.noLabel.text = mgrI18n.getText("panelAdvCostDialog.3"), t.cancel || (this.buttonNo.node.visible = !1), t.close || (this.buttonClose.node.visible = !1), t.closeMsg && (this.registerMsg({
				[t.closeMsg]: this.onRecieveMsg.bind(this)
			}), this.startProcMsg()), MoreGameBanner.setBannerVisible(!0)
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), MoreGameBanner.setBannerVisible(!1), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onRecieveMsg() {
			this.stopProcMsg(), this.close()
		}
		on_click_buttonNo() {
			this.close(), this.context.cancel && this.context.cancel()
		}
		on_click_buttonYes() {
			this.close(), this.context.confirm && this.context.confirm()
		}
		on_click_buttonClose() {
			this.close(), this.context.close && this.context.close()
		}
	}
	class PanelCat extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelCat.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_catSprite: "Laya.Sprite",
				cc_spriteLuckTime: "Laya.Sprite",
				cc_coinSprite: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_bottomNode: "Laya.Sprite",
				cc_buttonGet: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_cat", "banner_cat"), this.pool = [], this.totalCoin = 0, this.bStart = !1, this.firstClick = !1
		}
		buildUi() {
			this.catTime = Mathf.random(3, 8), this.perCount = 450 * mgrOffline.offlinePerSecond / this.catTime, mgrI18n.trySetI18nImage(this.spriteLuckTime, "pnl_class_color_eggs_06.png"), mgrI18n.trySetI18nImage(this.buttonGet.node, "pnl_class_color_eggs_05.png"), this.buttonGet.clickDelta = .1, cc.tween(this.catSprite).repeatForever(cc.tween().to(.1, {
				rotation: 5
			}).to(.2, {
				rotation: -5
			}).to(.1, {
				rotation: 0
			}).delay(1)).start()
		}
		dispose() {
			this.instOrBanner.dispose(), super.dispose()
		}
		close(t) {
			PanelDialogCat.nextTime = Timer.time + db.cop.cat_delta_time, super.close(t)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		update() {
			this.bStart && this.catTime > 0 && (this.catTime -= Timer.deltaTime, this.catTime <= 0 && this.timeFinish())
		}
		getCoin() {
			let t = this.pool.pop();
			return t ? t.visible = !0 : (t = UiHelper.cloneSprite(this.coinSprite), this.bg.addChild(t)), t
		}
		putCoin(t) {
			t.visible = !1, this.pool.push(t)
		}
		timeFinish() {
			this.buttonGet.interactable = !1;
			this.totalCoin;
			GameStatistics.statisCommonEvent(7911, 2), this.close()
		}
		on_click_buttonClose() {
			this.bStart = !1, this.close()
		}
		on_click_buttonGet() {
			this.firstClick || (this.firstClick = !0, GameStatistics.statisCommonEvent(7911, 1)), this.bStart = !0;
			let t = this.getCoin();
			t.pos(Mathf.random(-200, 200), Mathf.random(-120, 190)), t.alpha = 1, cc.tween(t, !0).parallel(cc.tween().by(.8, {
				y: -50
			}, cc.OPTION.SINE_OUT), cc.tween().delay(.65).to(.3, cc.PROP.ALPHA0).call(this.putCoin.bind(this, t))).start(), this.totalCoin += this.perCount
		}
	}
	class PanelDialogCat extends PanelDialog {
		constructor() {
			super(...arguments), this.instOrBanner = new AdvInstOrBanner("", "banner_cat_dialog")
		}
		static tryOpenPanel(t) {
			if (_G.isGuiding) return;
			if (this.nextTime > Timer.time) return;
			if (!Mathf.randomEnable(db.cop.cat_ratios[t])) return;
			this.nextTime = Timer.time + 60;
			let e = {
				desc: mgrI18n.getText("panelCat.4"),
				title: mgrI18n.getText("panelAdvCostDialog.1"),
				confirm: function() {
					mgrAlert.openPanelLoading(UI_NAME.PanelCat)
				}
			};
			mgrAlert.openPanelLoading(PanelDialogCat, e), GameStatistics.statisCommonEvent(7911, 0)
		}
	}
	PanelDialogCat.nextTime = 0;
	class PanelCatLvup extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelCatLvup.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_labelCoin: "Laya.Label",
				cc_descLabel1: "Laya.Label",
				cc_labelCurRl: "Laya.Label",
				cc_descLabel2: "Laya.Text",
				cc_costCount: "Laya.Text",
				cc_buttonLvup: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			let t = BaseFacade.mUp.getLevel("cat"),
				e = BaseFacade.mUp.getUpDb("cat", t + 1),
				a = BaseFacade.mUp.getUpDb("cat", t);
			this.labelCoin.text = mgrI18n.getText("panelCatLvup.3") + ":" + a.coinPerMin + "→", this.descLabel1.text = e.coinPerMin + "", this.labelCurRl.text = mgrI18n.getText("panelCatLvup.5") + ":" + +a.catCoinMax + "→", this.descLabel2.text = e.catCoinMax + "", this.costCount.text = a.reqCnt2 + ""
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonLvup() {
			let t = mgrCat.limitLevel;
			if (t) {
				let e = String.format(mgrI18n.getText("panelCatLvup.6"), t);
				mgrAlert.alertDialog(e)
			} else {
				let t = BaseFacade.mUp.getUpDb("cat"),
					e = BaseFacade.mUp.getLackItemId(t);
				e ? mgrAlert.alertNotEnough(e) : (this.close(), mgrCat.lvup(), mgrAlert.alertDialog(mgrI18n.getText("panelCatLvup.7")))
			}
		}
	}
	let update_delta_time_min = 25,
		update_delta_time_max = 35;
	class UITip {
		constructor(t, e, a = 0) {
			this.destroyed = !1, this.m_Dirty = !1, this.m_updateTime = 0, this.m_leftUpdateTime = 0, this.tipSprite = null, this.tipSprite = t.getChildByName("tip"), this.tipSprite ? (this.setChecker(e, a), this.updateTip(), this.update(a), Laya.timer.loop(500, this, this.update, [.5])) : console.error("UITip:找不到tip节点")
		}
		dispose() {
			this.destroyed = !0, Laya.timer.clearAll(this)
		}
		update(t) {
			if (this.tipSprite.destroyed) this.dispose();
			else if (this.m_Dirty) {
				if (this.m_Dirty = !1, this.m_checker) {
					let t = this.m_checker() >= 0;
					this.tipSprite.visible = t, t ? this.startAnim() : this.stopAnim()
				}
			} else this.m_updateTime > 0 && (this.m_leftUpdateTime -= t, this.m_leftUpdateTime <= 0 && this.updateTip())
		}
		get isActive() {
			return this.tipSprite.visible
		}
		updateTip() {
			this.m_Dirty = !0, this.m_leftUpdateTime = this.m_updateTime
		}
		setChecker(t, e = 0) {
			this.m_checker = t, this.m_updateTime = e, this.m_leftUpdateTime = e
		}
		startAnim() {
			this.stopAnim(), this.tipSprite && UITip.playTipAnim(this.tipSprite)
		}
		stopAnim() {
			this.tipSprite && cc.clearTween(this.tipSprite)
		}
		static playTipAnim(t) {
			cc.tween(t, !0).repeatForever(cc.tween().repeat(2, cc.tween().to(.2, {
				rotation: 15
			}, cc.OPTION.SINE_IN_OUT).to(.2, {
				rotation: -15
			}, cc.OPTION.SINE_IN_OUT)).to(.1, {
				rotation: 0
			}).delay(2)).start()
		}
	}
	class PanelChallengePreview extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelChallengePreview.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg1: "Laya.Sprite",
				cc_buttonSzzFull: "UIButton",
				cc_spriteSzz: "Laya.Sprite",
				cc_spriteBg2: "Laya.Sprite",
				cc_buttonPvpFull: "UIButton",
				cc_spritePvp: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			this.initTip(), mgrI18n.trySetI18nImage(this.spriteBg1, "pnl_challenge_preview_02.png"), mgrI18n.trySetI18nImage(this.spriteBg2, "pnl_challenge_preview_01.png"), this.registerMsg({
				LOTTERY_SUC: this.onMsgLotterySuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.szzTip && this.szzTip.dispose(), this.pvpTip && this.pvpTip.dispose(), super.dispose()
		}
		onMsgLotterySuc() {
			this.szzTip.updateTip()
		}
		initTip() {
			this.szzTip = new UITip(this.spriteSzz, function() {
				return BaseFacade.mItem.getItemCount("1014") > 0 || mgrAdv.getActive("free_like") ? 0 : mgrSzz.canLottery() ? 0 : -1
			}), this.pvpTip = new UITip(this.spritePvp, function() {
				return mgrPvp.curTicket > 0 || mgrAdv.getActive("pvp") || mgrPvp.isPvpAwardCanReceive() ? 0 : -1
			})
		}
		on_click_buttonSzzFull() {
			mgrAlert.openGameLoading(UI_NAME.PanelSzz, null, () => {
				this.close(), _G.sendMsg("JOIN_SZZ")
			})
		}
		on_click_buttonPvpFull() {
			mgrPvp.isJoin ? mgrAlert.openGameLoading(UI_NAME.PanelPvp, null, this.close.bind(this)) : (GameStatistics.statisCommonEvent(6001), mgrAlert.openPanelLoading(UI_NAME.PanelPvpCard, null, this.close.bind(this)))
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class ClassColorEgg extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/ClassColorEgg.json", this._exportNodeInfo = {
				cc_spriteLight: "Laya.Sprite",
				cc_spriteEgg: "Laya.Image",
				cc_nodeTip: "Laya.Sprite",
				cc_spriteTip: "Laya.Sprite",
				cc_buttonGet: "UIButton",
				cc_buttonGo: "UIButton",
				cc_buttonOpen: "UIButton"
			}, this.create()
		}
		onCreateComplete() {
			this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), this.classTip = new UITip(this.buttonGet.node, function() {
				return 0
			})
		}
		dispose() {
			this.stopProcMsg(), this.openEffect && (_G.poolManager.put(this.openEffect), this.openEffect = null), this.closeEffect && _G.poolManager.put(this.closeEffect), this.classTip && this.classTip.dispose(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"open_class_egg" == t.advName && t.params == this.questId && (mgrColorEggs.accept(this.questId), this.fillData(this.questId), mgrAlert.playParticleEffect("189", UiHelper.getSelfGlobalPos(this.nodeTip), 1.5, 1))
		}
		fillData(t) {
			if (!this.callable) return this.safeCall(this.fillData, t);
			this.questId = t;
			let e = db.get_quest_db(t),
				a = mgrColorEggs.getState(t);
			switch (mgrI18n.trySetI18nImage(this.spriteTip, e.icon), a) {
				case EGGS_STATE.NEW:
					this.spriteEgg.skin = "res/ui/pnl_class_color_eggs/egg.png", this.buttonGet.node.visible = !1, this.buttonGo.node.visible = !1, this.buttonOpen.node.visible = !0, this.nodeTip.scale(0, 0), this.spriteLight.visible = !1, this.closeEffect || (this.closeEffect = _G.poolManager.get(Particle, "191"), this.closeEffect.setParent(mgrAlert.scene3dfont), this.closeEffect.followTarget(this.nodeTip, mgrAlert.camerafont), this.closeEffect.play()), mgrAdv.statisVideoShow("open_class_egg");
					break;
				case EGGS_STATE.OPENED:
					this.spriteEgg.skin = "res/ui/pnl_class_color_eggs/egg_open.png", this.buttonGet.node.visible = !1, this.buttonGo.node.visible = !0, this.buttonOpen.node.visible = !1, cc.tween(this.nodeTip).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), this.spriteLight.visible = !0, cc.tween(this.spriteLight, !0).repeatForever(cc.tween().to(.8, {
						alpha: .5
					}).to(.8, {
						alpha: 1
					})).start(), this.closeEffect && this.closeEffect.stop(), this.openEffect || (this.openEffect = _G.poolManager.get(Particle, "190"), this.openEffect.setParent(mgrAlert.scene3dfont), this.openEffect.followTarget(this.nodeTip, mgrAlert.camerafont), this.openEffect.play());
					break;
				case EGGS_STATE.AWARD:
					this.spriteEgg.skin = "res/ui/pnl_class_color_eggs/egg_open.png", this.buttonGet.node.visible = !0, UiHelper.playBreathe(this.buttonGet.node, .72, .88), this.buttonGo.node.visible = !1, this.buttonOpen.node.visible = !1, this.nodeTip.visible = !1, this.spriteLight.visible = !0, cc.tween(this.spriteLight, !0).repeatForever(cc.tween().to(.8, {
						alpha: .5
					}).to(.8, {
						alpha: 1
					})).start(), this.openEffect || (this.openEffect = _G.poolManager.get(Particle, "190"), this.openEffect.setParent(mgrAlert.scene3dfont), this.openEffect.followTarget(this.nodeTip, mgrAlert.camerafont), this.openEffect.play());
					break;
				case EGGS_STATE.FINISHED:
					this.spriteEgg.skin = "res/ui/pnl_class_color_eggs/egg_open.png", this.buttonGet.node.visible = !1, this.buttonGo.node.visible = !1, this.buttonOpen.node.visible = !1, this.nodeTip.visible = !1, cc.clearTween(this.spriteLight), this.spriteLight.visible = !1, this.openEffect && this.openEffect.stop()
			}
		}
		on_click_buttonGet() {
			mgrColorEggs.commit(this.questId), this.fillData(this.questId)
		}
		on_click_buttonGo() {
			switch (this.questId) {
				case COLOR_EGGS_QUEST.CLICK_BUTTERFLY:
					mgrJumpPanel.jumpTo(JUMP_PANEL.SKINCARE);
					break;
				case COLOR_EGGS_QUEST.GET_FISH:
					mgrJumpPanel.jumpTo(JUMP_PANEL.DREAM);
					break;
				case COLOR_EGGS_QUEST.CLEAR_TUYA:
					_G.sendMsg("CLOSE_PANEL_COLOR_EGGS"), mgrPanel.openPanelWithSingleton(UI_NAME.PanelClassRoom)
			}
		}
		on_click_buttonOpen() {
			mgrColorEggs.isNew(this.questId) && (mgrAdv.dispatchAdv("open_class_egg", this.questId, !0), mgrAdv.statisVideoClick("open_class_egg"))
		}
	}
	class PanelClassColorEggs extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassColorEggs.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_spriteBg: "Laya.Sprite",
				cc_nodeEgg0: "Laya.Sprite",
				cc_nodeEgg1: "Laya.Sprite",
				cc_nodeEgg2: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.eggs = [], this.instOrBanner = new AdvInstOrBanner("", "banner_class_color_eggs")
		}
		buildUi() {
			let t = mgrColorEggs.getAllQuest(EGGS_TYPE.CLASS);
			this.allQuest = t, mgrI18n.trySetI18nImage(this.spriteBg, "pnl_class_color_eggs_01.png");
			for (let e = 0; e < t.length; e++) {
				let a = new ClassColorEgg;
				a.setParent(this["nodeEgg" + e]), a.fillData(t[e]), this.eggs.push(a)
			}
			Timer.callLater(2, () => {
				console.log(this)
			}), this.registerMsg({
				CLOSE_PANEL_COLOR_EGGS: this.close.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.instOrBanner.dispose(), this.stopProcMsg();
			for (let t = 0; t < this.eggs.length; t++) this.eggs[t].dispose();
			super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class StudentItem extends ViewBase {
		constructor(t) {
			super(t), this.resourceName = "res/prefab/StudentItem.json", this._exportNodeInfo = {
				cc_bg: "Laya.Box",
				cc_nodeSpine: "Laya.Box",
				cc_nodeTalkLeft: "Laya.Sprite",
				cc_labelTalkLeft: "Laya.Label",
				cc_nodeTalkRight: "Laya.Sprite",
				cc_labelTalkRight: "Laya.Label",
				cc_nodeAdv: "Laya.Box",
				cc_buttonAdv: "UIButton"
			}, this.bShowTalk = !1, this.create()
		}
		onCreateComplete() {
			this.bg.addComponent(UIButton), UiHelper.addUIButtonClick(this.bg, this.onClick.bind(this)), this.fillData()
		}
		dispose() {
			this.spine && _G.poolManager.put(this.spine), this.spriteXiuBiao && this.spriteXiuBiao.destroy(), super.dispose()
		}
		fillData() {
			let t = this.context.roleId,
				e = db.get_class_room_role_db(t);
			if (!e) return;
			let a = _G.poolManager.get(Spine, e.spineId);
			this.spine = a, a.setParent(this.nodeSpine), a.setScale(.8, .8), a.callIfLoaded(() => {
				if (this.destroyed) return;
				let e = mgrClassRoom.getRoleLevel(t),
					i = db.get_class_room_level_db(e);
				if (i) {
					let t = a.getSkeleton().templet.mBoneArr,
						e = new Laya.Sprite;
					e.size(26, 33), e.pivot(e.width / 2, e.height / 2), a.addChild(e), e.loadImage(i.xbIcon), this.spriteXiuBiao = e, Timer.callLoopFrame(1, a => {
						if (this.destroyed || this.spriteXiuBiao.destroyed) a.stop();
						else
							for (let a = 0; a < t.length; a++) {
								const i = t[a];
								if (i && "xiubiao" == i.name) {
									e.x = i.resultMatrix.tx, e.y = i.resultMatrix.ty;
									let t = 180 * Math.atan2(i.resultMatrix.b, i.resultMatrix.a) / Math.PI;
									e.rotation = t - 90
								}
							}
					}, this)
				}
			}), this.buttonAdv.node.visible = this.context.bOutSide && mgrAdv.checkActive("class_role_leave"), this.buttonAdv.node.visible && mgrAdv.statisVideoShow("class_role_leave"), this.nodeTalkLeft.visible = !1, this.nodeTalkRight.visible = !1, this.nodeTalk = this.nodeTalkRight, this.labelTalk = this.labelTalkRight
		}
		playAnim(t, e = !0) {
			this.callable ? this.spine && this.spine.play(t, e) : this.safeCall(this.playAnim, t, e)
		}
		setFlip(t) {
			this.callable ? (this.spine && this.spine.setScaleX(.8 * t), this.nodeTalk = t > 0 ? this.nodeTalkRight : this.nodeTalkLeft, this.labelTalk = t > 0 ? this.labelTalkRight : this.labelTalkLeft) : this.safeCall(this.setFlip, t)
		}
		moveToSeat() {
			this.callable ? (this.playAnim("walk"), cc.tween(this.resNode).to(2, {
				x: 0
			}).call(() => {
				this.playAnim("idle")
			}).start()) : this.safeCall(this.moveToSeat)
		}
		cryToStandPos() {
			this.callable ? (this.nodeSpine && this.nodeSpine.scale(1.2, 1.2), this.setBottomButtonVisible(!1), this.playAnim("move"), cc.tween(this.nodeSpine).to(1, {
				scaleX: 1,
				scaleY: 1
			}).start(), cc.tween(this.resNode).to(1, {
				y: 80
			}).to(2, {
				x: 0
			}).to(.3, {
				y: 0
			}).call(() => {
				this.playAnim("cry"), this.setBottomButtonVisible(!0)
			}).start()) : this.safeCall(this.cryToStandPos)
		}
		leaveStandPos(t, e, a) {
			this.callable ? (this.setBottomButtonVisible(!1), this.playAnim("walk"), this.setFlip(-1), cc.tween(this.resNode).to(.3, {
				y: 80
			}).to(2, {
				x: -t
			}).call(() => {
				this.setFlip(1)
			}).to(1, {
				y: -e
			}).call(() => {
				this.dispose()
			}).start()) : this.safeCall(this.leaveStandPos, t, e, a)
		}
		setBottomButtonVisible(t) {
			this.callable ? this.nodeAdv.visible = t : this.safeCall(this.setBottomButtonVisible, t)
		}
		leaveHappy(t, e) {
			this.callable ? (this.playAnim("happy"), this.spine.scaleX > 0 ? (this.setFlip(-1), cc.tween(this.resNode).to(2, {
				x: -300
			}).call(() => {
				mgrClassRoom.setStudentLeave(t), e(), this.dispose(), this.removeFromParent()
			}).start()) : (this.setFlip(1), cc.tween(this.resNode).to(2, {
				x: 300
			}).call(() => {
				mgrClassRoom.setStudentLeave(t), e(), this.dispose(), this.removeFromParent()
			}).start())) : this.safeCall(this.leaveHappy, t, e)
		}
		leaveAndReplace(t, e) {
			this.callable ? (this.playAnim("walk"), this.spine.scaleX > 0 ? (this.setFlip(-1), cc.tween(this.resNode).to(2, {
				x: -300
			}).call(() => {
				e(), this.dispose(), this.removeFromParent()
			}).start()) : (this.setFlip(1), cc.tween(this.resNode).to(2, {
				x: 300
			}).call(() => {
				e(), this.dispose(), this.removeFromParent()
			}).start())) : this.safeCall(this.leaveAndReplace, t, e)
		}
		showTalkBubble() {}
		closeTalkBubble() {
			this.bShowTalk && (this.bShowTalk = !1, cc.tween(this.nodeTalk).to(.3, cc.PROP.SCALE0, cc.OPTION.BACK_IN).call(() => {
				this.nodeTalk.visible = !1
			}).start())
		}
		onClick() {
			this.context.bOutSide
		}
		on_click_buttonAdv() {
			mgrAdv.statisVideoClick("class_role_leave"), mgrAdv.dispatchAdv("class_role_leave", {
				roleId: this.context.roleId
			}, !0)
		}
	}
	class PanelClassOutSide extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassOutSide.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_nodeStands: "Laya.Box",
				cc_nodeStand1: "Laya.Box",
				cc_nodeStand2: "Laya.Box",
				cc_nodeStand3: "Laya.Box",
				cc_nodeLeftTop: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_buttonRoom: "UIButton",
				cc_sprite01: "Laya.Sprite"
			}, this.students = {}
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.sprite01, "pnl_class_room_05.png"), this.buttonClose.node.visible = !1, this.context && null != this.context.crySeatIdx && (mgrClassRoom.hasStandPos() || mgrClassRoom.clearStandData(0)), this.refreshStudents(), this.context && null != this.context.crySeatIdx && this.playStudentCryWalk(this.context.crySeatIdx), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		refreshStudents() {
			let t = mgrClassRoom.getStandDatas();
			for (let e = 0; e < 3; e++) {
				let a = t[e];
				if (a && !this.students[e]) {
					let t = this["nodeStand" + (e + 1).toString()],
						i = new StudentItem({
							roleId: a.roleId,
							bOutSide: !0
						});
					i.setParent(t), i.setFlip(-1), i.playAnim("cry"), this.students[e] = i
				} else !a && this.students[e] && (this.students[e].dispose(), this.students[e] = null)
			}
		}
		onMsgAdvShowSuc(t) {
			if ("class_role_leave" == t.advName && t.params && null != t.params.roleId) {
				let e = mgrClassRoom.getStandDatas();
				for (let a = 0; a < e.length; a++) {
					let i = e[a];
					if (i && t.params.roleId == i.roleId) {
						let t = 200 + 120 * a,
							e = 150;
						this.students[a] && this.students[a].leaveStandPos(t, e, a), mgrClassRoom.setStandLeave(a), cc.tween(this.bg).to(2, {
							x: 100
						}).delay(1).to(2, {
							x: 0
						}).start();
						break
					}
				}
			}
		}
		playStudentCryWalk(t) {
			let e = mgrClassRoom.getStandDatas();
			for (let a = 0; a < 3; a++) {
				if (!e[a]) {
					let e = this["nodeStand" + (a + 1).toString()],
						i = mgrClassRoom.getSeatDatas();
					console.log("查看seatDatas", i);
					let s = new StudentItem({
						roleId: i[t].roleId,
						bOutSide: !0
					});
					s.setParent(e), s.x = -200 - 120 * a, s.y = -200, this.students[a] = s, s.cryToStandPos(), mgrClassRoom.setStudentStand(t), this.bg.x = 100, cc.tween(this.bg).delay(1).to(2, {
						x: 0
					}).start();
					break
				}
			}
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonRoom() {
			GameStatistics.statisCommonEvent(2535), mgrAlert.openPanelLoading(UI_NAME.PanelClassRoom, {}, this.close.bind(this))
		}
	}
	class PanelClassReward extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassReward.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_labelTitle: "Laya.Label",
				cc_spriteFlower1: "Laya.Sprite",
				cc_spriteFlower2: "Laya.Sprite",
				cc_spriteFlower3: "Laya.Sprite",
				cc_spriteFlower4: "Laya.Sprite",
				cc_spriteFlower5: "Laya.Sprite",
				cc_spriteReward: "Laya.Sprite",
				cc_labelDesc: "Laya.Label",
				cc_nodeBtns: "Laya.Box",
				cc_buttonStart: "UIButton",
				cc_buttonAdv: "UIButton",
				cc_buttonSure: "UIButton",
				cc_nodeSpine: "Laya.Box",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			let t = this.context && this.context.roleId,
				e = db.get_class_room_role_db(t);
			if (!e) return;
			let a = _G.poolManager.get(Spine, e.spineId);
			this.spine = a, a.setParent(this.nodeSpine), a.setScale(-1, 1), a.play("idle", !0), this.labelTitle.text = `${mgrI18n.getText("panelClassReward.1")}`;
			let i = mgrClassRoom.getRoleFlowerCount(t);
			this.context && this.context.bFromBook || mgrClassRoom.addRoleFlowerCount(t);
			let s = mgrClassRoom.getRoleFlowerCount(t),
				n = !1;
			for (let t = 1; t <= 5; t++) {
				let e = this["spriteFlower" + t.toString()];
				e && (e.visible = t <= s, t == s && i < s && (e.scale(4, 4), cc.tween(e).to(.3, cc.PROP.SCALE1).to(.1, cc.PROP.SCALE1_3).to(.1, cc.PROP.SCALE1).call(() => {
					let t = this.addEffect("185");
					t.setParent(this.scene3DEffect), t.align(e, this.cameraEffect), t.play()
				}).start(), n = !0))
			}
			let o = mgrClassRoom.getRoleLevel(t),
				r = s > o,
				l = db.get_class_room_level_db(Math.min(4, o + 1));
			if (r || (l = db.get_class_room_level_db(o)), 1 == l.id ? mgrI18n.trySetI18nImage(this.spriteReward, "icon_class_level_01.png") : this.spriteReward.loadImage(l.texture), n) this.spriteReward.scale(0, 0), cc.tween(this.spriteReward).delay(.5).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).call(() => {
				if (a.play("happy", !0), l.texture) {
					let t = this.addEffect("117");
					t.setParent(this.scene3DEffect), t.align(this.spriteReward, this.cameraEffect), t.play()
				}
			}).start();
			else if (a.play("happy", !0), l.texture) {
				let t = this.addEffect("117");
				t.setParent(this.scene3DEffect), t.align(this.spriteReward, this.cameraEffect), t.play()
			}
			r && o < 4 && GameStatistics.statisCommonEvent(2568 + l.id, t);
			let c = String.format(mgrI18n.getText("panelClassReward.2"), mgrI18n.getText(l.tlite));
			this.labelDesc.text = c, this.labelDesc.visible = r && o < 4, this.buttonStart.node.visible = r && 0 == o;
			let h = mgrAdv.checkActive("class_appraise");
			this.buttonAdv.node.visible = r && o > 0 && o < 4 && h, o > 0 && o < 4 && h && mgrAdv.statisVideoShow("class_appraise"), this.buttonSure.node.visible = !r || o > 0 && o < 4 && !h || o >= 4;
			let d = n ? .8 : 0;
			this.labelDesc.alpha = 0, cc.tween(this.labelDesc).delay(d).to(.3, cc.PROP.ALPHA1).start(), this.nodeBtns.scale(0, 0), cc.tween(this.nodeBtns).delay(d).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.spine && _G.poolManager.put(this.spine), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"class_appraise" == t.advName && t.params && null != t.params.roleId && (mgrClassRoom.upgradeLevel(t.params.roleId), this.context && this.context.fOnRewardEnd && this.context.fOnRewardEnd(), this.close())
		}
		on_click_buttonStart() {
			let t = this.context && this.context.roleId;
			mgrClassRoom.getRoleLevel(t) < 4 ? (mgrClassRoom.upgradeLevel(t), this.context && this.context.fOnRewardEnd && this.context.fOnRewardEnd(), this.close()) : (_G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelClassReward.3")), this.context && this.context.fOnRewardEnd && this.context.fOnRewardEnd(), this.close())
		}
		on_click_buttonClose() {
			this.context && this.context.fOnRewardEnd && this.context.fOnRewardEnd(), this.close()
		}
		on_click_buttonAdv() {
			let t = this.context && this.context.roleId;
			mgrClassRoom.getRoleLevel(t) < 4 ? (mgrAdv.statisVideoClick("class_appraise"), mgrAdv.dispatchAdv("class_appraise", {
				roleId: t
			}, !0)) : (_G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelClassReward.3")), this.context && this.context.fOnRewardEnd && this.context.fOnRewardEnd(), this.close())
		}
		on_click_buttonSure() {
			this.on_click_buttonClose()
		}
	}
	class PanelClassRoleDetail extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassRoleDetail.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_labelName: "Laya.Label",
				cc_labelLevel: "Laya.Label",
				cc_labelSchool: "Laya.Label",
				cc_labelClass: "Laya.Label",
				cc_nodeSpine: "Laya.Box",
				cc_labelDesc: "Laya.Label",
				cc_buttonSure: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_class_role_detail")
		}
		buildUi() {
			let t = this.context && this.context.roleId,
				e = db.get_class_room_role_db(t);
			if (!e) return;
			let a = mgrClassRoom.getRoleLevel(t),
				i = db.get_class_room_level_db(a);
			this.labelName.text = e.name, this.labelLevel.text = i && mgrI18n.getText(i.tlite) ? i.name : mgrI18n.getText("panelClassRoleDetail.1"), this.labelSchool.text = mgrI18n.getText("panelClassRoleDetail.2"), this.labelClass.text = mgrI18n.getText(e.tlite3);
			let s = _G.poolManager.get(Spine, e.spineId);
			this.spine = s, s.setParent(this.nodeSpine), s.setScale(-.9, .9), s.play("idle", !0), this.labelDesc.text = e.description
		}
		dispose() {
			this.instOrBanner.dispose(), this.spine && _G.poolManager.put(this.spine), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		on_click_buttonSure() {
			this.close()
		}
	}
	class PanelClassRoleGet extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassRoleGet.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeAll: "Laya.Sprite",
				cc_nodeLayoutDesc: "Laya.Box",
				cc_labelDescCankao: "Laya.Label",
				cc_spriteChip1: "Laya.Sprite",
				cc_spriteChip2: "Laya.Sprite",
				cc_spriteChip3: "Laya.Sprite",
				cc_spriteChip4: "Laya.Sprite",
				cc_labelTips: "Laya.Label",
				cc_buttonSure: "UIButton",
				cc_buttonClose: "UIButton",
				cc_buttonCircle: "UIButton",
				cc_buttonBox: "UIButton"
			}, this.oldContractIdx = null, this.instOrBanner = new AdvInstOrBanner("", "banner_class_role_get"), this.loadState = 0
		}
		static getResLoader() {
			let t = new ResLoader;
			return mgrClassRoom.getRoleLevel(CLASS_UNLOCK_ROLE_ID) >= 4 && (t.add(db.get_animation_db(MODEL_ANIM.SHENTI_COME).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_COME).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHENTI_IDLE).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_IDLE).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_COME).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_IDLE).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_come).resPath, RES_TYPE.PREFAB3D), t.add(db.get_model_db(db.MODEL_DB_ID.come).resPath, RES_TYPE.PREFAB3D), t.add(db.get_model_db(db.MODEL_DB_ID.wawahe).resPath, RES_TYPE.PREFAB3D), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME01).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME02).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME03).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME01).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME02).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME03).path, RES_TYPE.ANIMATIONCLIP), mgrGame.contractIndex != CLASS_UNLOCK_CONTRACT_IDX && (t.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_jiechu).resPath, RES_TYPE.PREFAB3D), t.add(db.get_animation_db(MODEL_ANIM.WAWAHE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.SHENTI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.FACE_JIECHU).path, RES_TYPE.ANIMATIONCLIP))), t.add("res/ui/PanelDanceRoleGet.json", RES_TYPE.PREFAB2D), t
		}
		static openPanel(t, e) {
			let a = this.getResLoader();
			mgrAlert.openWait(a, () => {
				mgrPanel.openPanelWithSingleton(UI_NAME.PanelClassRoleGet, e, t)
			})
		}
		buildUi() {
			this.labelDescCankao.visible = !1, this.labelDescCankao.text = mgrI18n.getText("panelClassRoleGet.1"), mgrI18n.trySetI18nImage(this.nodeAll, "pnl_class_role_get_01.png");
			let t = mgrClassRoom.getRoleLevel(CLASS_UNLOCK_ROLE_ID);
			for (let e = 1; e <= 4; e++) {
				let a = this["spriteChip" + e.toString()];
				a && (a.visible = e > t), this.context && this.context.bReward && e == t && (a.visible = !0, cc.tween(a).repeat(3, cc.tween(a).to(.2, cc.PROP.ALPHA0).delay(.2).to(.2, cc.PROP.ALPHA1)).to(.2, cc.PROP.ALPHA0).call(() => {
					a.visible = !1
				}).start())
			}
			if (this.buttonSure.node.visible = t >= 4, this.labelTips.visible = t < 4, t < 4) {
				let e = db.get_class_room_level_db(t + 1);
				e && (this.labelTips.text = `${mgrI18n.getText("panelClassRoleGet.2")}${mgrI18n.getText(e.tlite)}`)
			} else mgrGame.isContractUnlock(CLASS_UNLOCK_CONTRACT_IDX) || mgrGame.contractUnlock(CLASS_UNLOCK_CONTRACT_IDX);
			console.log("this.labelTips.text", this.labelTips.text), this.buttonCircle.node.visible = !1, this.buttonBox.node.visible = !1, this.oldContractIdx = mgrGame.contractIndex, mgrGame.contractIndex != CLASS_UNLOCK_CONTRACT_IDX && (this.oldParts = Tools.deepCopy(mgrPart.partsWear))
		}
		dispose() {
			this.instOrBanner.dispose(), this.clearWawahe(), this.clearOld(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		clearWawahe() {
			this.wawahe && (this.wawahe.dispose(), this.wawahe = null)
		}
		clearOld() {
			this.oldAvatar && (this.oldAvatar.destroy(), this.oldAvatar = null), this.oldShexiangji && (this.oldShexiangji.dispose(), this.oldShexiangji = null), this.oldWawahe && (this.oldWawahe.dispose(), this.oldWawahe = null), this.oldGemstone && (_G.poolManager.put(this.oldGemstone), this.oldGemstone = null), this.oldRoom && (this.oldRoom.dispose(), this.oldRoom = null)
		}
		startLoad() {
			_G.sendMsg("CLASS_ROLE_START_ANIM");
			let t = new ResLoader;
			mgrPart.addPartResList(mgrPart.partsWear, t, !0), t.setLoadingCallback(this.onButtonAnimFinish.bind(this));
			let e = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			if (t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D), null != this.oldContractIdx && mgrGame.contractIndex != this.oldContractIdx) {
				let e = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
				t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D)
			}
			t.loadAll()
		}
		onButtonAnimFinish() {
			this.loadState++, 1 == this.loadState && (cc.tween(this.mask).to(.1, cc.PROP.ALPHA0).hide().start(), this.nodeAll.visible = !1, this.buttonClose.node.visible = !1, this.oldContractIdx == mgrGame.contractIndex ? (this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))) : (this.oldRoom = new RoomBath, this.oldRoom.load(this.onOldSceneLoaded.bind(this))))
		}
		onOldSceneLoaded() {
			this.addChild(this.oldRoom.scene), this.resNode.setChildIndex(this.oldRoom.scene, 0), this.oldRoom.changeToMain(), this.oldRoom.skybox.active = !0, this.oldRoom.camera.active = !1, this.oldRoom.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.oldRoom.mapNode.transform, "localScale", 3, 3, 3), this.oldAvatar = new RoleAvatar(this.oldParts), this.oldRoom.root.addChild(this.oldAvatar), this.oldWawahe = new GModel(db.MODEL_DB_ID.wawahe), this.oldWawahe.create(), this.oldWawahe.initAnimator(), this.oldWawahe.setParent(this.oldRoom.root), this.oldWawahe.hide(), this.oldShexiangji = new GModel(db.MODEL_DB_ID.shexiangji_jiechu), this.oldShexiangji.create(), this.oldShexiangji.setParent(this.oldRoom.root), this.oldShexiangji.callIfLoaded(() => {
				let t = this.oldShexiangji.findChild("camera");
				t.nearPlane = .01, t.fieldOfView = 60;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular
			});
			let t = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
			this.oldGemstone = _G.poolManager.get(GModel, t), this.oldGemstone.initAnimator(), this.oldGemstone.getAnimator().cullingMode = Laya.Animator.CULLINGMODE_ALWAYSANIMATE, this.oldGemstone.setParent(this.oldRoom.root);
			let e = new AnimatorFixedPlayer;
			e.addModelAnim(this.oldWawahe, MODEL_ANIM.WAWAHE_JIECHU), e.addModelAnim(this.oldShexiangji, MODEL_ANIM.SHEXIANGJI_JIECHU), e.addModelAnim(this.oldAvatar.baseBody, MODEL_ANIM.SHENTI_JIECHU), e.addModelAnim(this.oldAvatar.baseFace, MODEL_ANIM.FACE_JIECHU), e.addTimeCallback(110 / 30 / e.duration, () => {
				this.oldWawahe.show()
			}), e.addTimeCallback(.78, () => {
				this.onSwitchComplete(() => {
					this.clearOld(), e.dispose()
				})
			}), e.addTimeCallback(1, () => {}), e.play();
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.oldGemstone, MODEL_ANIM.GEMSTONE_JIECHU), a.addTimeCallback(80 / 30 / a.duration, () => {
				this.oldGemstone.hide()
			}), a.play()
		}
		onSwitchComplete(t) {
			UiHelper.playBlackFlash(1, () => {
				t(), this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))
			})
		}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToMain(), this.room.skybox.active = !0, this.room.camera.active = !1, this.room.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 3, 3, 3), this.wawahe = new GModel(db.MODEL_DB_ID.wawahe), this.wawahe.create(), this.wawahe.initAnimator(), this.wawahe.setParent(this.room.root), this.shexiangji = new GModel(db.MODEL_DB_ID.shexiangji_come), this.shexiangji.create(), this.shexiangji.setParent(this.room.root), this.shexiangji.callIfLoaded(() => {
				let t = this.shexiangji.findChild("camera");
				t.nearPlane = .01;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular, this.shexiangji_effect = this.shexiangji.findChild("e_wawahe_come"), this.shexiangji_effect && (this.shexiangji_effect.active = !1)
			});
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME01), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME01), t.addTimeCallback(1, () => {
				let t = new AnimatorFixedPlayer;
				t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME02), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME02), t.addTimeCallback(1, () => {
					this.buttonBox.node.visible = !0, mgrGuide.dispatchGuide(GUD_EVENT.START_CONTRACT), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX, this.buttonBox.node)
				}), t.play()
			}), t.play()
		}
		playRoleAnim() {
			this.avatar = new RoleAvatar, this.room.root.addChild(this.avatar);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.avatar.baseBody, MODEL_ANIM.SHENTI_COME), t.addModelAnim(this.avatar.baseFace, MODEL_ANIM.FACE_COME), t.addTimeCallback(1, this.onRoleAnimFinish.bind(this)), t.play()
		}
		playGemstone() {
			let t = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			this.gemstone = _G.poolManager.get(GModel, t), this.gemstone.initAnimator(), this.gemstone.setParent(this.room.root), this.gemstone.setPosition(0, .05, 0), this.gemstone.playAnims(0, [MODEL_ANIM.GEMSTONE_COME, MODEL_ANIM.GEMSTONE_ZHANSHI], !0), this.gemstone.initPaint(), this.gemstone.callIfLoaded(() => {
				let t = this.gemstone.getChildAt(0);
				cc.tween(this).to(1.3, cc.PROP.EMPTY, {
					onUpdate(e, a) {
						t.transform.scale = t.transform.scale
					}
				}).start()
			})
		}
		onWawaheAnimFinish() {
			this.clearWawahe()
		}
		onRoleAnimFinish() {
			this.avatar.playAnimation(MODEL_ANIM.SHENTI_IDLE), this.buttonCircle.node.visible = !0, mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE, this.buttonCircle.node)
		}
		playGotoRoom() {
			this.shexiangji && (this.shexiangji.findChild("e_wawahe_come").active = !1, _G.isGuiding = !0, mgrPanel.openPanel(UI_NAME.PanelMain, {
				type: ROOM_TYPE.NORMAL,
				parts: null,
				data: {
					room: this.room,
					avatar: this.avatar,
					shexiangji: this.shexiangji,
					gemstone: this.gemstone
				},
				bSwitch: !0
			}, !1, () => {
				this.room.scene.removeSelf(), this.close()
			}))
		}
		on_click_buttonSure() {
			mgrGame.contractIndex == CLASS_UNLOCK_CONTRACT_IDX ? mgrAlert.alertDialog(mgrI18n.getText("panelContract.11"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				GameStatistics.statisCommonEvent(2560, 1), this.startLoad()
			}, () => {}) : mgrAlert.alertDialog(mgrI18n.getText("panelContract.12"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				GameStatistics.statisCommonEvent(2560, 1), mgrGame.contractIndex = CLASS_UNLOCK_CONTRACT_IDX, this.startLoad()
			}, () => {})
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonCircle() {
			this.shexiangji ? (this.buttonCircle.interactable = !1, cc.tween(this.buttonCircle.node, !0).to(.2, cc.PROP.ALPHA0).call(this.playGotoRoom.bind(this)).start()) : console.log("没有摄像机")
		}
		on_click_buttonBox() {
			this.buttonBox.node.visible = !1, this.shexiangji_effect && (this.shexiangji_effect.active = !0);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME03), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME03), t.addTimeCallback(3 / t.duration, this.playGemstone.bind(this)), t.addTimeCallback(1, this.onWawaheAnimFinish.bind(this)), t.play(), this.playRoleAnim()
		}
	}
	class SpineNode extends Laya.Sprite {
		constructor(t) {
			super(), this.resourceType = Laya.Loader.BUFFER, this._isLoaded = !1, this._isLoading = !1, this._bAddCallback = !1, this.delayCalls = [], this.spineDb = db.get_spine_db(t), this.create()
		}
		get curAnimName() {
			return this._curAnimName
		}
		destroy(t) {
			super.destroy(t), this.clearDelayCalls()
		}
		reuse() {
			this.visible = !0
		}
		unuse() {
			this.clearAllListener(), this.stop(), this.visible = !1, this.removeSelf(), cc.clearTween(this), this.scale(1, 1, !0), this.alpha = 1, this.setTimeScale(this.spineDb.timeScale), this.clearDelayCalls()
		}
		dispose() {
			this.destroy()
		}
		create() {
			if (this._isLoaded) return;
			if (this._isLoading) return;
			let t = this.spineDb.skeletonData;
			if (!t) return void Logger.error("SpineNode.create: can't find resourceName.");
			this._isLoading = !0;
			let e = Spine.allTemplets[t];
			e ? e.isParseFail || (e.isParserComplete ? this.onResLoaded(!0) : e.on(Laya.Event.COMPLETE, this, t => {
				this.onResLoaded(t)
			})) : ((e = new Laya.Templet).on(Laya.Event.COMPLETE, this, t => {
				this.onResLoaded(t)
			}), e.loadAni(t), Spine.allTemplets[t] = e, Logger.debug("异步加载资源:", t))
		}
		onResLoaded(t) {
			this._isLoading = !1, t && (this.destroyed || (this._isLoaded = !0, this.onResourceLoaded(t), this.destroyed || this.processDelayCalls()))
		}
		onResourceLoaded(t) {
			let e = this.spineDb,
				a = Spine.allTemplets[e.skeletonData].buildArmature(e.aniMode);
			this.resNode = a, this.addChild(a), this._skinName = e.skin, a.scale(e.scaleX, e.scaleY, !0), a.showSkinByName(e.skin), a.playbackRate(e.timeScale), a.player.cacheFrameRate = 30, e.anim && this.play(e.anim, e.loop)
		}
		processDelayCalls() {
			let t = this.delayCalls,
				e = t.length;
			if (e > 0) {
				this.delayCalls = [];
				for (let a = 0; a < e; a++) {
					const e = t[a];
					e.method.apply(this, e.params)
				}
			}
		}
		clearDelayCalls() {
			this.delayCalls.length > 0 && (this.delayCalls.length = 0)
		}
		safeCall(t, ...e) {
			this.destroyed || (this._isLoaded ? t.apply(this, e) : this.pushDelayCall(t, e))
		}
		pushDelayCall(t, e) {
			this.delayCalls.push({
				method: t,
				params: e
			})
		}
		get callable() {
			return this._isLoaded && !this.destroyed
		}
		play(t, e = !0) {
			this.callable ? (this._curAnimName = t, this.resNode.play(t, e, !0)) : this.safeCall(this.play, t, e)
		}
		playDefaultAnim() {
			this.play(this.spineDb.anim, this.spineDb.loop)
		}
		stop() {
			this.callable ? (this.resNode.stop(), this._curAnimName = null, this._animPlayList && (this._animPlayList = null)) : this.safeCall(this.stop)
		}
		setTimeScale(t) {
			this.callable ? this.resNode.playbackRate(t) : this.safeCall(this.setTimeScale, t)
		}
		_onAnimStoped() {
			if (this._animPlayList && this._animPlayList.length > 0) {
				let t = this._animPlayList.shift();
				this.play(t, 0 == this._animPlayList.length)
			}
		}
		playAnims(...t) {
			if (this.callable) switch (t.length) {
				case 0:
					return;
				case 1:
					this.play(t[0], !0);
					break;
				default:
					this._bAddCallback || (this._bAddCallback = !0, this.resNode.on(Laya.Event.STOPPED, this, this._onAnimStoped)), this._animPlayList = t.slice(1), this.play(t[0], !1)
			} else this.safeCall(this.playAnims, ...t)
		}
		setCompleteListener(t, e, a = !0) {
			this.callable ? a ? this.resNode.once(Laya.Event.COMPLETE, t, e) : this.resNode.on(Laya.Event.COMPLETE, t, e) : this.safeCall(this.setCompleteListener, t, e, a)
		}
		setStopListener(t, e, a = !0) {
			this.callable ? a ? this.resNode.once(Laya.Event.STOPPED, t, e) : this.resNode.on(Laya.Event.STOPPED, t, e) : this.safeCall(this.setStopListener, t, e, a)
		}
		clearAllListener() {
			if (!this.callable) return this.safeCall(this.clearAllListener);
			this.resNode.offAll(Laya.Event.COMPLETE), this.resNode.offAll(Laya.Event.STOPPED)
		}
		setSkin(t) {
			if (this.callable) {
				if (t == this._skinName) return;
				this._skinName = t, this.resNode.showSkinByName(t)
			} else this.safeCall(this.setSkin, t)
		}
		getSkeleton() {
			return this.resNode
		}
	}
	class PanelClassRoom extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelClassRoom.json", this._exportNodeInfo = {
				cc_spriteBg: "Laya.Sprite",
				cc_buttonHeiBanCa1: "UIButton",
				cc_buttonHeiBanCa2: "UIButton",
				cc_nodeSeats: "Laya.Box",
				cc_nodeSeat3: "Laya.Box",
				cc_nodeSeat1: "Laya.Box",
				cc_nodeSeat2: "Laya.Box",
				cc_nodeLeftTop: "Laya.Box",
				cc_buttonGraduation: "UIButton",
				cc_buttonLiangCai: "UIButton",
				cc_buttonEgg: "UIButton",
				cc_buttonClose: "UIButton",
				cc_buttonOutside: "UIButton",
				cc_spriteZoulang: "Laya.Sprite",
				cc_nodeLayout: "UIHVLayout",
				cc_buttonStartStudent: "UIButton",
				cc_buttonStartTeacher: "UIButton",
				cc_buttonAdvLiangCai: "UIButton",
				cc_buttonFind: "UIButton",
				cc_findRoleIcon: "Laya.Sprite",
				cc_findAdv: "Laya.Sprite",
				cc_barMaskFind: "UIBarMask",
				cc_labelFindTime: "Laya.Label"
			}, this.students = {}, this.instOrBanner = new AdvInstOrBanner("enter_class_room", ""), this.enterMainWhenClose = !0, this.bStatistics = !1, this.bLeave = !1
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteBg, "pnl_class_room_11.png"), mgrI18n.trySetI18nImage(this.buttonGraduation.node, "pnl_class_room_03.png"), mgrI18n.trySetI18nImage(this.buttonLiangCai.node, "pnl_class_room_08.png"), mgrI18n.trySetI18nImage(this.buttonEgg.node, "pnl_class_room_09.png"), mgrI18n.trySetI18nImage(this.buttonStartStudent.node, "pnl_class_room_07.png"), mgrI18n.trySetI18nImage(this.buttonStartTeacher.node, "pnl_class_room_02.png"), mgrI18n.trySetI18nImage(this.buttonAdvLiangCai.node, "pnl_class_room_10.png"), mgrI18n.trySetI18nImage(this.spriteZoulang, "pnl_class_room_06.png"), mgrI18n.trySetI18nImage(this.buttonEgg.node, "pnl_class_room_09.png"), this.findAdv.visible = mgrAdv.checkActive("class_role_enter"), this.findAdv.visible && mgrAdv.statisVideoShow("class_role_enter"), this.buttonEgg.node.visible = mgrAdv.checkActive("open_class_egg"), this.refreshStudents(), Timer.callLoop(1, t => {
				this.destroyed ? t.stop() : this.refreshStudents()
			}, this), this.registerMsg({
				JUMP_PANEL: this.onMsgJumpPanel.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				STUDENT_HAPPY_TO_OUTSIDE: this.studentHappyLeave.bind(this),
				STUDENT_CRY_TO_OUTSIDE: this.studentCryToOutSide.bind(this),
				STUDENT_SEAT_DATA_REPLACE: this.onMsgStudentSeatDataReplace.bind(this),
				CLASS_ROLE_START_ANIM: this.onMsgClassRoleStartAnim.bind(this),
				[BASE_MSG.QUEST_STATE_CHANGE]: this.onMsgQuestStateChange.bind(this),
				JUMP_PANEL_BEFORE: this.onMsgJumpPanelBefore.bind(this)
			}), this.startProcMsg(), this.uiOut(), this.checkColorEgg(), this.classTip = new UITip(this.buttonEgg.node, function() {
				return mgrColorEggs.hasAwardEgg(EGGS_TYPE.CLASS) ? 0 : -1
			}), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCLASSROOM_BUTTONSTUDENT, this.buttonStartStudent.node), Laya.timer.frameOnce(1, this, () => {
				mgrGuide.dispatchGuide(GUD_EVENT.ENTER_CLASS_ROOM)
			}), GameStatistics.statisCommonEvent(2503), GameStatistics.statisOnStageStart(13100)
		}
		dispose() {
			this.spineHeibanca && this.spineHeibanca.dispose(), GameStatistics.statisOnStageEnd(13100), this.instOrBanner.dispose(), _G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.ENTER_CLASS_ROOM), this.stopProcMsg(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELCLASSROOM_BUTTONSTUDENT), this.classTip && this.classTip.dispose(), super.dispose(), this.enterMainWhenClose && mgrGame.tryEnterMain()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgJumpPanel() {
			this.close()
		}
		onMsgAdvShowSuc(t) {
			if ("class_role_enter" == t.advName) mgrClassRoom.setStudentFinishReady();
			else if ("class_role_leave" == t.advName && t.params && null != t.params.roleId) {
				let e = mgrClassRoom.getStandDatas();
				for (let a = 0; a < e.length; a++) {
					let i = e[a];
					if (i && t.params.roleId == i.roleId) {
						mgrClassRoom.setStandLeave(a);
						break
					}
				}
			} else "class_role_summon" == t.advName && t.params && null != t.params.roleId && mgrClassRoom.summonStudent(t.params.roleId)
		}
		onMsgClassRoleStartAnim() {
			this.enterMainWhenClose = !1, this.on_click_buttonClose()
		}
		onMsgQuestStateChange(t) {
			switch (console.log("QT_PANELCLASSROOM", t.questDb.type), t.questDb.type) {
				case 11:
					this.classTip.updateTip(), t.state == QUEST_STATE.UPDATABLE && this.checkColorEgg()
			}
		}
		onMsgJumpPanelBefore() {
			this.enterMainWhenClose = !1
		}
		uiOut() {
			this.nodeLeftTop.x = -150, this.buttonOutside.node.x = -430, this.nodeLayout.node.y = 200, this.uiIn()
		}
		uiIn() {
			UiHelper.playMoveIn(this.nodeLeftTop, 0, .3, .3), UiHelper.playMoveIn(this.buttonOutside.node, -230, .3, .3), cc.tween(this.nodeLayout.node).delay(.3).to(.3, {
				y: -93
			}).start()
		}
		refreshStudents() {
			let t, e = mgrClassRoom.getSeatDatas();
			for (let a = 0; a < 3; a++) {
				let i = e[a];
				if (i && i.startTime > Timer.time && (t = i), i && i.startTime <= Timer.time && !this.students[a]) {
					let t = this["nodeSeat" + (a + 1).toString()],
						e = new StudentItem({
							roleId: i.roleId
						});
					e.playAnim("idle"), e.setParent(t), 0 == a || 2 == a ? e.x = -300 : 1 == a && (e.x = 300, e.setFlip(-1)), e.moveToSeat(), this.students[a] = e
				} else(!i || i.startTime > Timer.time) && this.students[a] && (this.students[a].dispose(), this.students[a] = null)
			}
			if (t) {
				let e = db.get_class_room_role_db(t.roleId);
				e && e.iconUrl && this.findRoleIcon.loadImage(e.iconUrl);
				let a = t.startTime - Timer.time;
				this.labelFindTime.text = Tools.formatTime(a), this.barMaskFind.progress = a / STUDENT_READY_TIME, this.buttonFind.node.visible = !0
			} else this.buttonFind.node.visible = !1;
			let a = mgrClassRoom.getRoleState(CLASS_UNLOCK_ROLE_ID) != CLASS_ROLE_STATE.STUDY && mgrAdv.checkActive("class_role_summon");
			this.buttonAdvLiangCai.node.visible = a, a && !this.bStatistics && (this.bStatistics = !0, mgrAdv.statisVideoShow("class_role_summon")), this.nodeLayout.updateLayout(.2, !0)
		}
		studentHappyLeave(t) {
			let e = t.seatIdx;
			this.bLeave = !0, this.students[e].leaveHappy(e, () => {
				this.bLeave = !1, this.students[e] = null
			})
		}
		studentCryToOutSide() {
			this.close(!0)
		}
		onMsgStudentSeatDataReplace(t) {
			let e = t.seatIdx;
			null != e && (this.bLeave = !0, this.students[e].leaveAndReplace(e, () => {
				this.bLeave = !1, this.students[e] = null
			}))
		}
		checkColorEgg() {
			mgrColorEggs.isEnable(COLOR_EGGS_QUEST.CLEAR_TUYA) && (this.spineHeibanca || (this.spineHeibanca = new SpineNode(db.SPINE_DB_ID.cj_heibanca), this.spriteBg.addChild(this.spineHeibanca), this.spineHeibanca.pos(this.spriteBg.width / 2, this.spriteBg.height / 2), this.spineHeibanca.playDefaultAnim()))
		}
		on_click_buttonClose() {
			this.bLeave ? _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelClassRoom.2")) : this.close()
		}
		on_click_buttonFind() {
			this.findAdv.visible ? (mgrAdv.statisVideoClick("class_role_enter"), mgrAdv.dispatchAdv("class_role_enter", {}, !0)) : mgrAlert.alertDialog(mgrI18n.getText("panelClassRoom.3"))
		}
		on_click_buttonGraduation() {
			GameStatistics.statisCommonEvent(2530), mgrAlert.openPanelLoading(UI_NAME.PanelSchoolYearbook)
		}
		on_click_buttonOutside() {
			this.bLeave ? _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelClassRoom.2")) : (GameStatistics.statisCommonEvent(2534), mgrAlert.openPanelLoading(UI_NAME.PanelClassOutSide, {}, this.close.bind(this)))
		}
		on_click_buttonStartTeacher() {
			if (this.bLeave) return void _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelClassRoom.2"));
			let t = mgrClassRoom.getOperateSeatIdx();
			if (null != t) {
				let e = [UI_NAME.PanelClassTeacherMatchingStage, UI_NAME.PanelClassTeacherStage, UI_NAME.PanelClassTeacherMathStage],
					a = e[Mathf.random(e.length) - 1];
				mgrAlert.openPanelLoading(a, {
					seatIdx: t
				})
			} else mgrClassRoom.hasStudentReady() && this.findAdv.visible ? mgrAlert.alertAdvDialog(mgrI18n.getText("panelClassRoom.4"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				mgrAdv.statisVideoClick("class_role_enter"), mgrAdv.dispatchAdv("class_role_enter", {}, !0)
			}, mgrI18n.getText("panelClassRoom.5"), () => {}) : mgrAlert.alertDialog(mgrI18n.getText("panelClassRoom.6"))
		}
		on_click_buttonStartStudent() {
			if (this.bLeave) return void _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelClassRoom.2"));
			let t = mgrClassRoom.getOperateSeatIdx();
			if (null != t) {
				let e = UI_NAME.PanelClassStudentStage;
				if (!_G.isGuiding) {
					let t = [UI_NAME.PanelClassStudentMatchingStage, UI_NAME.PanelClassStudentStage, UI_NAME.PanelClassStudentMathStage];
					e = t[Mathf.random(t.length) - 1]
				}
				mgrAlert.openPanelLoading(e, {
					seatIdx: t
				})
			} else mgrClassRoom.hasStudentReady() && this.findAdv.visible ? mgrAlert.alertAdvDialog(mgrI18n.getText("panelClassRoom.4"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				mgrAdv.statisVideoClick("class_role_enter"), mgrAdv.dispatchAdv("class_role_enter", {}, !0)
			}, mgrI18n.getText("panelClassRoom.5"), () => {}) : mgrAlert.alertDialog(mgrI18n.getText("panelClassRoom.6"))
		}
		on_click_buttonLiangCai() {
			GameStatistics.statisCommonEvent(2559), PanelClassRoleGet.openPanel()
		}
		on_click_buttonEgg() {
			GameStatistics.statisCommonEvent(2561), mgrAlert.openPanelLoading(UI_NAME.PanelClassColorEggs)
		}
		on_click_buttonAdvLiangCai() {
			mgrAdv.statisVideoClick("class_role_summon"), mgrAdv.dispatchAdv("class_role_summon", {
				roleId: CLASS_UNLOCK_ROLE_ID
			}, !0)
		}
		on_click_buttonHeiBanCa1() {
			this.spineHeibanca && (this.spineHeibanca.play("idle2", !1), this.spineHeibanca.setStopListener(this, function() {
				mgrAlert.alertColorEggTip(EGGS_TYPE.CLASS)
			}, !0), this.buttonHeiBanCa1.interactable = !1, this.buttonHeiBanCa2.interactable = !1, BaseFacade.mGoal.commit(ACTION_ID.EGG_CLEAR_TUYA))
		}
		on_click_buttonHeiBanCa2() {
			this.on_click_buttonHeiBanCa1()
		}
	}
	class ClassStageMatchingItem extends ViewBase {
		constructor(t) {
			super(t), this.resourceName = "res/prefab/ClassStageMatchingItem.json", this._exportNodeInfo = {
				cc_nodeBox: "Laya.Box",
				cc_spriteLeft1: "Laya.Sprite",
				cc_spriteLeft2: "Laya.Sprite",
				cc_spriteLeft3: "Laya.Sprite",
				cc_spriteRight1: "Laya.Sprite",
				cc_spriteRight2: "Laya.Sprite",
				cc_spriteRight3: "Laya.Sprite"
			}, this.matchingResult = {}, this.leftDatas = {}, this.rightDatas = {}, this.matchingCount = 0, this.bTouched = !1, this.selectedLeftData = null, this.curLine = null, this.create()
		}
		onCreateComplete() {
			if (this.context && this.context.bTeacher) {
				let t, e, a = this.context.leftDatas,
					i = this.context.rightDatas,
					s = this.context.result;
				if (!a || !i || !s) return;
				this.leftDatas = a, this.rightDatas = i;
				for (let t = 1; t <= 3; t++) {
					let e = this["spriteLeft" + t.toString()],
						s = this["spriteRight" + t.toString()],
						n = a[t];
					if (n) {
						let a = db.get_class_matching_item_db(n.itemId);
						e.loadImage(a.icon), this.leftDatas[t].nodeSprite = e
					}
					let o = i[t];
					if (o) {
						let e = db.get_class_matching_item_db(o.itemId);
						s.loadImage(e.icon), this.rightDatas[t].nodeSprite = s
					}
				}
				for (let a in s) {
					let i = s[a];
					if (null != i) {
						for (let e in this.leftDatas) {
							let i = this.leftDatas[e];
							i && i.itemId == parseInt(a) && (t = i.nodeSprite)
						}
						for (let t in this.rightDatas) {
							let a = this.rightDatas[t];
							a && a.itemId == i && (e = a.nodeSprite)
						}
						t && e && (this.createLine(t.x + t.width / 2, t.y + t.height / 2), this.lineTo(e.x + e.width / 2, e.y + e.height / 2))
					}
				}
			} else {
				let t = this.context && this.context.matchingIds;
				if (!t) return;
				let e = [],
					a = [];
				for (let i = 0; i < t.length; i++) {
					let s = db.get_class_matching_db(t[i]);
					if (!s) return;
					e.push(s.itemId1), a.push(s.itemId2)
				}
				for (let t = 1; t <= 3; t++) {
					let i = this["spriteLeft" + t.toString()],
						s = this["spriteRight" + t.toString()],
						n = Mathf.random(e.length) - 1,
						o = e[n];
					e.splice(n, 1);
					let r = db.get_class_matching_item_db(o);
					i.loadImage(r.icon), i.getChildByName("on").visible = !1, this.leftDatas[t] = {
						nodeSprite: i,
						itemId: o,
						bUsed: !1
					};
					let l = Mathf.random(a.length) - 1,
						c = a[l];
					a.splice(l, 1);
					let h = db.get_class_matching_item_db(c);
					s.loadImage(h.icon), s.getChildByName("on").visible = !1, this.rightDatas[t] = {
						nodeSprite: s,
						itemId: c,
						bUsed: !1
					}
				}
				UiHelper.registerTouchEvent(this.nodeBox, this.onTouchStart.bind(this), this.onTouchMove.bind(this), this.onTouchEnd.bind(this), this.onTouchOut.bind(this))
			}
		}
		fadeIn() {
			this.callable ? (this.node.alpha = 0, cc.tween(this.node).to(.5, cc.PROP.ALPHA1).start()) : this.safeCall(this.fadeIn)
		}
		getMatchingResult() {
			if (this.callable) return this.matchingResult;
			this.safeCall(this.getMatchingResult)
		}
		getLeftDatas() {
			if (this.callable) return this.leftDatas;
			this.safeCall(this.getLeftDatas)
		}
		getRightDatas() {
			if (this.callable) return this.rightDatas;
			this.safeCall(this.getRightDatas)
		}
		createLine(t, e) {
			this.curLine = this.nodeBox.addChild(new Laya.Image("res/ui/pnl_class_stage/art_30.png")), this.curLine.sizeGrid = "0,15,0,15", this.curLine.pivot(15, 2), this.curLine.pos(t, e, !0), this.curLine.width = 0, this.curLine.zOrder = -100
		}
		lineTo(t, e, a = null) {
			Vec2.TEMP.setValue(t, e);
			let i = Mathf.distance(this.curLine, Vec2.TEMP) + 20;
			this.curLine.width = i, Vec2.TEMP.setValue(t - this.curLine.x, e - this.curLine.y);
			var s = GameUtility.convertDir2Rot(Vec2.TEMP) + 90;
			this.curLine.rotation = s, this.selectedLeftData && a && (this.matchingResult[this.selectedLeftData.itemId] = a.itemId, this.matchingCount++, this.matchingCount >= 3 && this.context && this.context.fOnFinish && this.context.fOnFinish())
		}
		onTouchStart() {
			this.bTouched = !0;
			let t = this.nodeBox.mouseX,
				e = this.nodeBox.mouseY;
			for (let a in this.leftDatas) {
				let i = this.leftDatas[a];
				if (i && !i.bUsed && i.nodeSprite.getBounds().contains(t, e)) {
					this.selectedLeftData = i, i.nodeSprite.getChildByName("on").visible = !0, this.createLine(i.nodeSprite.x + i.nodeSprite.width / 2, i.nodeSprite.y + i.nodeSprite.height / 2);
					break
				}
			}
		}
		onTouchMove() {
			if (!this.bTouched) return;
			if (!this.curLine) return;
			if (!this.selectedLeftData) return;
			let t = this.nodeBox.mouseX,
				e = this.nodeBox.mouseY;
			this.lineTo(t, e)
		}
		onTouchEnd() {
			if (!this.bTouched) return;
			let t = this.nodeBox.mouseX,
				e = this.nodeBox.mouseY;
			if (this.bTouched = !1, !this.curLine) return;
			if (!this.selectedLeftData) return;
			let a = !1;
			for (let i in this.rightDatas) {
				let s = this.rightDatas[i];
				if (s && !s.bUsed && s.nodeSprite.getBounds().contains(t, e)) {
					s.nodeSprite.getChildByName("on").visible = !0, this.lineTo(s.nodeSprite.x + s.nodeSprite.width / 2, s.nodeSprite.y + s.nodeSprite.height / 2, s), this.selectedLeftData.bUsed = !0, s.bUsed = !0, a = !0;
					break
				}
			}
			a || (this.selectedLeftData.nodeSprite.getChildByName("on").visible = !1, this.curLine.destroy()), this.curLine = null
		}
		onTouchOut() {
			this.onTouchEnd()
		}
	}
	class PanelClassStudenMatchingStageResult extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassStudenMatchingStageResult.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeSpine: "Laya.Box",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_nodeTest: "Laya.Box",
				cc_nodeSelected: "Laya.Image",
				cc_labelTitle: "Laya.Label",
				cc_labelTips1: "Laya.Label",
				cc_nodeCheck1: "Laya.Box",
				cc_buttonOk1: "UIButton",
				cc_buttonNo1: "UIButton",
				cc_nodeResult1: "Laya.Box",
				cc_labelTips2: "Laya.Label",
				cc_nodeCheck2: "Laya.Box",
				cc_buttonOk2: "UIButton",
				cc_buttonNo2: "UIButton",
				cc_nodeResult2: "Laya.Box",
				cc_labelTips3: "Laya.Label",
				cc_nodeCheck3: "Laya.Box",
				cc_buttonOk3: "UIButton",
				cc_buttonNo3: "UIButton",
				cc_nodeResult3: "Laya.Box",
				cc_labelScore: "Laya.Label",
				cc_buttonSure: "UIButton",
				cc_spriteGou: "Laya.Sprite",
				cc_spriteFlower: "Laya.Sprite",
				cc_labelSure: "Laya.Label"
			}, this.result = {}, this.matchingIds = [], this.leftDatas = {}, this.rightDatas = {}, this.curIndex = 0, this.scores = 0, this.checkArr = [], this.rating = 0
		}
		buildUi() {
			let t = this.context && this.context.result;
			if (!t) return;
			this.result = t;
			let e = this.context && this.context.matchingIds;
			if (!e) return;
			this.matchingIds = e;
			let a = this.context && this.context.leftDatas;
			if (!a) return;
			this.leftDatas = a;
			let i = this.context && this.context.rightDatas;
			if (!i) return;
			this.rightDatas = i, new ClassStageMatchingItem({
				leftDatas: a,
				rightDatas: i,
				bTeacher: !0,
				result: t
			}).setParent(this.nodeTest);
			let s = this.context && this.context.seatIdx,
				n = mgrClassRoom.getSeatDatas()[s];
			if (!n) return;
			let o = db.get_class_room_role_db(n.roleId);
			if (o) {
				this.labelTitle.text = `${mgrI18n.getText(o.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`;
				let t = _G.poolManager.get(Spine, o.spineId);
				this.spine = t, t.setParent(this.nodeSpine), t.setScale(-1, 1), t.play("idle", !0)
			}
			this.labelScore.font = GConfig.bmf_class, this.nodeSelected.alpha = 0, this.nodeCheck1.visible = !1, this.buttonOk1.interactable = !1, this.buttonNo1.interactable = !1, this.nodeCheck2.visible = !1, this.buttonOk2.interactable = !1, this.buttonNo2.interactable = !1, this.nodeCheck3.visible = !1, this.buttonOk3.interactable = !1, this.buttonNo3.interactable = !1, this.labelScore.visible = !1, this.buttonSure.node.visible = !1, this.startCheck(1)
		}
		dispose() {
			this.spine && _G.poolManager.put(this.spine), super.dispose()
		}
		startCheck(t) {
			if (t == this.curIndex) return;
			this.curIndex = t, cc.clearTween(this.nodeSelected), cc.tween(this.nodeSelected).repeatForever(cc.tween().to(.3, cc.PROP.ALPHA0).call(() => {
				this.nodeSelected.y = 160 * (t - 1) - 200
			}).to(.3, cc.PROP.ALPHA1)).start(), cc.tween(this, !0).delay(.3).call(() => {
				mgrAlert.playParticleEffect("132", this.nodeSelected.localToGlobal(new Laya.Point(this.nodeSelected.width / 2, this.nodeSelected.height / 2)), 1, .5, 3.5)
			}).start();
			let e = this["nodeCheck" + t.toString()];
			this["buttonOk" + t.toString()], this["buttonNo" + t.toString()];
			this["nodeResult" + t.toString()].visible = !1, e.visible = !0, e.alpha = 0, cc.tween(e).to(.3, cc.PROP.ALPHA1).call(() => {}).start(), Timer.callLater(1, () => {
				let e = null,
					a = null,
					i = this.rightDatas[t];
				for (let t in this.result)
					if (this.result[t] == i.itemId) {
						e = parseInt(t), a = this.result[t];
						break
					} let s = !1;
				for (let t = 0; t < this.matchingIds.length; t++) {
					let i = db.get_class_matching_db(this.matchingIds[t]);
					if (i && i.itemId1 == e) {
						s = i.itemId2 == a;
						break
					}
				}
				s ? (this.scores += 100 / this.matchingIds.length, this["on_click_buttonOk" + t.toString()]()) : this["on_click_buttonNo" + t.toString()]()
			}, this)
		}
		refreshUi() {
			let t = this.curIndex,
				e = this["buttonOk" + t.toString()],
				a = this["buttonNo" + t.toString()];
			e && (e.interactable = !1, e.node.getChildByName("on").visible = 1 == this.checkArr[t - 1], e.node.getChildByName("off").visible = 0 == this.checkArr[t - 1], cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start(), cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start()), a && (a.interactable = !1, a.node.getChildByName("on").visible = 0 == this.checkArr[t - 1], a.node.getChildByName("off").visible = 1 == this.checkArr[t - 1], cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start(), cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start());
			let i = this["nodeResult" + t.toString()];
			i.visible = !0;
			let s = i.getChildByName("correct"),
				n = i.getChildByName("wrong");
			1 == this.checkArr[t - 1] ? (n.visible = !1, s.visible = !0, s.scale(0, 0), cc.tween(s).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()) : (s.visible = !1, n.visible = !0, n.scale(0, 0), cc.tween(n).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()), Timer.callLater(.5, () => {
				this.destroyed || (this.checkArr.length < 3 ? this.startCheck(t + 1) : (cc.clearTween(this.nodeSelected), this.nodeSelected.visible = !1, this.buttonSure.node.visible = !0, this.buttonSure.node.scale(0, 0), cc.tween(this.buttonSure.node).to(.3, cc.PROP.SCALE1).start(), this.calcScore(), this.labelScore.visible = !0, this.labelScore.scale(0, 0), cc.tween(this.labelScore).to(.2, cc.PROP.SCALE1_2).delay(.2).to(.2, cc.PROP.SCALE1).start()))
			}, this)
		}
		calcScore() {
			let t = Math.ceil(this.scores);
			this.labelScore.text = t.toString();
			let e = mgrClassRoom.calcRating(t);
			this.rating = e, this.refreshLabel()
		}
		refreshLabel() {
			let t = mgrI18n.getText("panelAdvCostDialog.2"),
				e = "";
			switch (this.rating) {
				case 1:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.2"), e = "cry", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 2:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.3"), e = "idle", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 3:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.4"), e = "happy", this.spriteGou.visible = !1, this.spriteFlower.visible = !0
			}
			this.labelSure.text = t, this.spine && this.spine.play(e, !0)
		}
		on_click_buttonOk1() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo1() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk2() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo2() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk3() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo3() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonSure() {
			if (this.rating > 1)
				if (GameStatistics.statisOnStageEnd(13102, 1), GameStatistics.statisCommonEvent(2537), 2 == this.rating) {
					let t = BaseFacade.mDrop.makeDrop("30");
					mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
						seatIdx: this.context.seatIdx
					})
				} else {
					let t = this.context && this.context.seatIdx,
						e = mgrClassRoom.getSeatDatas()[t];
					mgrAlert.openPanelLoading(UI_NAME.PanelClassReward, {
						roleId: e.roleId,
						fOnRewardEnd: () => {
							e.roleId != CLASS_UNLOCK_ROLE_ID || mgrGame.isContractUnlock(CLASS_UNLOCK_CONTRACT_IDX) || PanelClassRoleGet.openPanel(null, {
								bReward: !0
							});
							let t = BaseFacade.mDrop.makeDrop("30");
							mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
								seatIdx: this.context.seatIdx
							})
						}
					})
				}
			else {
				GameStatistics.statisOnStageEnd(13102, 0, 0), GameStatistics.statisCommonEvent(2536), mgrAlert.openPanelLoading(UI_NAME.PanelClassOutSide, {
					crySeatIdx: this.context.seatIdx
				});
				let t = BaseFacade.mDrop.makeDrop("30");
				mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_CRY_TO_OUTSIDE", {
					seatIdx: this.context.seatIdx
				})
			}
			mgrSdk.stopRecordVideo(), this.close(!0)
		}
	}
	class ClassStageMathIconItem extends ViewBase {
		constructor(t) {
			super(t), this.resourceName = "res/prefab/ClassStageMathIconItem.json", this._exportNodeInfo = {
				cc_icon: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			let t = this.context && this.context.iconUrl;
			t && (console.log("加载图片", t), this.icon.loadImage(t))
		}
	}
	class ClassStageMathItem extends ViewBase {
		constructor(t) {
			super(t), this.resourceName = "res/prefab/ClassStageMathItem.json", this._exportNodeInfo = {
				cc_nodeBox: "Laya.Box",
				cc_nodeItemAll1: "UIHVLayout",
				cc_nodeItem11: "UIHVLayout",
				cc_nodeItem12: "UIHVLayout",
				cc_nodeItem13: "UIHVLayout",
				cc_imageOperate: "Laya.Image",
				cc_nodeItemAll2: "UIHVLayout",
				cc_nodeItem21: "UIHVLayout",
				cc_nodeItem22: "UIHVLayout",
				cc_nodeItem23: "UIHVLayout",
				cc_imageNoAnswer: "Laya.Image",
				cc_labelEndAnswer: "Laya.Label",
				cc_buttonAnswer1: "UIButton",
				cc_buttonAnswer2: "UIButton",
				cc_buttonAnswer3: "UIButton"
			}, this.answerArr = [], this.create()
		}
		onCreateComplete() {
			let t = this.context && this.context.stageId,
				e = db.get_class_math_stage_db(t);
			if (!e) return;
			let a = this.context && this.context.bTeacher,
				i = Tools.deepCopy(e.displayScores);
			for (let t = 1; t <= 3; t++) {
				let e = this["nodeItem1" + t.toString()].node,
					s = this["nodeItem2" + t.toString()].node;
				e.visible = !1, s.visible = !1;
				let n = this["buttonAnswer" + t.toString()],
					o = n.node.getChildByName("normal"),
					r = n.node.getChildByName("correct"),
					l = n.node.getChildByName("wrong"),
					c = n.node.getChildByName("answer");
				o.visible = !0, r.visible = !1, l.visible = !1, c.font = GConfig.bmf_math;
				let h = Mathf.random(i.length) - 1,
					d = i[h];
				c.text = d.toString(), this.answerArr.push(d), i.splice(h, 1), n.node.visible = !a
			}
			for (let t = 0; t < 8; t++) {
				if (t < e.itemCount1) {
					let a = this["nodeItem1" + (Math.floor(t / 3) + 1).toString()];
					a.node.visible = !0, new ClassStageMathIconItem({
						iconUrl: e.itemIcon1
					}).setParent(a), a.updateLayout()
				}
				if (t < e.itemCount2) {
					let a = this["nodeItem2" + (Math.floor(t / 3) + 1).toString()];
					a.node.visible = !0, new ClassStageMathIconItem({
						iconUrl: e.itemIcon2
					}).setParent(a), a.updateLayout()
				}
			}
			this.imageOperate.skin = e.operateIcon, this.labelEndAnswer.font = GConfig.bmf_math, this.labelEndAnswer.text = "", this.labelEndAnswer.visible = !1, this.imageNoAnswer.visible = !0, a && (this.imageNoAnswer.visible = !1, this.labelEndAnswer.visible = !0, this.context && null != this.context.answer ? this.labelEndAnswer.text = this.context.answer.toString() : this.labelEndAnswer.text = e.displayScores[Mathf.random(e.displayScores.length) - 1].toString())
		}
		selectAnswer(t) {
			for (let e = 0; e < 3; e++) {
				let a = this["buttonAnswer" + (e + 1).toString()],
					i = a.node.getChildByName("normal"),
					s = a.node.getChildByName("correct"),
					n = a.node.getChildByName("wrong");
				i.visible = !1, s.visible = !1, n.visible = !1;
				let o = this.context && this.context.stageId,
					r = db.get_class_math_stage_db(o),
					l = this.answerArr[t];
				if (e == t) {
					s.visible = l == r.correctScore, n.visible = l != r.correctScore;
					let t = a.node.getChildByName("answer"),
						e = new Laya.Label;
					this.nodeBox.addChild(e), e.anchorX = .5, e.anchorX = .5, e.font = GConfig.bmf_math, e.text = t.text;
					let i = new Laya.Point(t.x, t.y);
					UiHelper.local2local(a.node, this.nodeBox, i), e.pos(i.x, i.y), cc.tween(e).to(.3, {
						x: this.labelEndAnswer.x,
						y: this.labelEndAnswer.y
					}).call(() => {
						this.destroyed || e.removeSelf()
					}).start()
				} else i.visible = !0;
				cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
					a.node.visible = !1, 2 == e && (this.imageNoAnswer.visible = !1, this.labelEndAnswer.visible = !0, this.labelEndAnswer.text = l.toString(), this.labelEndAnswer.scale(1.2, 1.2), cc.tween(this.labelEndAnswer).to(.3, cc.PROP.SCALE1).call(() => {
						this.context && this.context.fOnSelectAnswer && this.context.fOnSelectAnswer(l)
					}).start())
				}).start()
			}
		}
		setVisible(t) {
			this.callable ? this.node.visible = t : this.safeCall(this.setVisible, t)
		}
		fadeIn() {
			this.callable ? (cc.clearTween(this.node), this.node.alpha = 0, this.imageNoAnswer.scale(0, 0), this.buttonAnswer1.node.scale(0, 0), this.buttonAnswer2.node.scale(0, 0), this.buttonAnswer3.node.scale(0, 0), cc.tween(this.node).to(.3, cc.PROP.ALPHA1).call(() => {
				cc.clearTween(this.imageNoAnswer), cc.tween(this.imageNoAnswer).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).call(() => {
					let t = 0;
					for (let e = 1; e <= 3; e++) {
						let a = this["buttonAnswer" + e.toString()];
						a && (cc.clearTween(a.node), cc.tween(a.node).delay(t).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), t += .2)
					}
				}).start()
			}).start()) : this.safeCall(this.fadeIn)
		}
		on_click_buttonAnswer1() {
			this.selectAnswer(0)
		}
		on_click_buttonAnswer2() {
			this.selectAnswer(1)
		}
		on_click_buttonAnswer3() {
			this.selectAnswer(2)
		}
	}
	var ShareMode;
	! function(t) {
		t[t.None = 0] = "None", t[t.Normal = 1] = "Normal", t[t.Video = 2] = "Video"
	}(ShareMode || (ShareMode = {}));
	class ShareButton extends MsgHandler {
		constructor(t, e, a, i) {
			super(), this.destroyed = !1;
			let s = db.cop.share_mode[e];
			if (!s || _G.isGuiding) return this.shareMode = ShareMode.None, void(t.visible = !1);
			let n = t.getChildByName("buttonShare"),
				o = n.getChildByName("shareBtnName"),
				r = t.getChildByName("buttonNoTks");
			switch (null != i && (i.node.visible = !1), s) {
				case ShareMode.Normal:
					if (!db.cop.isShareEnabled) return t.visible = !1, void(this.shareMode = ShareMode.None);
					o.text = "分 享", r.visible = !1, UiHelper.addClickEvent(n, this.onClickNormalShare.bind(this), null, .5, !0), this.statistics = 7513, e > 4 && (this.statistics = null);
					break;
				case ShareMode.Video:
					if (!db.cop.isSupportRecordShare) return t.visible = !1, void(this.shareMode = ShareMode.None);
					if (mgrSdk.stopRecordVideo(), mgrSdk._videoRecordTime < mgrSdk.min_record_time) return console.log("录屏时间不足，不显示分享按钮"), t.visible = !1, void(this.shareMode = ShareMode.None);
					o.text = "分享上热门", r.addComponent(UIButton), UiHelper.addClickEvent(r, a), UiHelper.addClickEvent(n, this.onClickVideoShare.bind(this), null, .5, !0), db.cop.share_close_delta_time && (r.visible = !1, cc.tween(r).delay(db.cop.share_close_delta_time).show().start()), this.statistics = 7518
			}
			s == ShareMode.Video && null != i && 0 != db.cop.b_video_share_full_screen && (i.node.visible = !0, UiHelper.addClickEvent(i.node, this.onClickVideoShare.bind(this), null, .5, !1)), cc.tween(n).repeatForever(cc.tween().to(.6, cc.PROP.SCALE1_2).to(.6, cc.PROP.SCALE1)).start(), t.visible = !0, this.shareMode = s, this.copIdx = e;
			let l = t.getChildByName("shareTip");
			mgrGame.shareAwardCount >= 3 && l.setVisible(!1), this.registerListeners({
				[BASE_MSG.SDK_SHARE_SUC]: this.onMsgShareSuc.bind(this),
				[BASE_MSG.SDK_SHARE_FAIL]: this.onMsgShareFail.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onMsgVideoShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_FAIL]: this.onMsgShareFail.bind(this)
			}), this.startProcMsg(), this.statisticsEvent(0)
		}
		dispose() {
			this.destroyed = !0, this.stopProcMsg()
		}
		get isViedoShare() {
			return this.shareMode == ShareMode.Video
		}
		onMsgShareSuc() {
			this.statisticsEvent(2)
		}
		onMsgShareFail() {
			this.statisticsEvent(3)
		}
		onMsgVideoShareSuc() {
			this.statisticsEvent(2)
		}
		statisticsEvent(t) {
			this.statistics && GameStatistics.statisCommonEvent(this.statistics + this.copIdx, t)
		}
		onClickNormalShare() {
			mgrSdk.share(), this.statisticsEvent(1)
		}
		onClickVideoShare() {
			let t = db.cop.share_tags[this.copIdx] || "";
			mgrSdk.shareVideo("", t), this.statisticsEvent(1)
		}
	}
	class PanelShare extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.DIALOG, this.resourceName = "res/ui/PanelShare.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonFullScreenShare: "UIButton",
				cc_buttonClose: "UIButton",
				cc_titleLabel: "Laya.Label",
				cc_descLabel: "Laya.Label",
				cc_buttonOk: "UIButton",
				cc_shareLayout: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_share", "banner_share")
		}
		buildUi() {
			switch (this.context.desc && (this.descLabel.text = this.context.desc), this.shareBtn = new ShareButton(this.shareLayout, this.context.shareIdx || 5, this.on_click_buttonOk.bind(this), this.buttonFullScreenShare), this.shareBtn.shareMode) {
				case ShareMode.None:
					this.shareLayout.visible = !1, this.buttonClose.node.visible = !0, this.context.descWithoutShare && (this.descLabel.text = this.context.descWithoutShare);
					break;
				case ShareMode.Normal:
					this.buttonOk.node.visible = !1;
					break;
				case ShareMode.Video:
					if (this.buttonClose.node.visible = !1, 0 != db.cop.b_video_share_finger) {
						let t = this.addEffect("135");
						t.setScale(1, 1, 1), t.followTarget(this.buttonOk.node, this.cameraEffect, this.buttonOk.node.width / 2), t.play()
					}
			}
			this.registerMsg({
				[BASE_MSG.SDK_SHARE_SUC]: this.onShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onShareSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.shareBtn && this.shareBtn.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onShareSuc() {
			this.context && this.context.shareSucCallback && this.context.shareSucCallback(), this.close()
		}
		on_click_buttonClose() {
			this.on_click_buttonOk()
		}
		on_click_buttonFullScreenShare() {}
		on_click_buttonOk() {
			this.context && this.context.closeCallback && this.context.closeCallback(), this.close()
		}
	}
	class PanelClassStudenMathStageResult extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassStudenMathStageResult.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeSpine: "Laya.Box",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_nodeTest1: "Laya.Box",
				cc_nodeTest2: "Laya.Box",
				cc_nodeTest3: "Laya.Box",
				cc_nodeSelected: "Laya.Image",
				cc_labelTitle: "Laya.Label",
				cc_labelTips1: "Laya.Label",
				cc_nodeCheck1: "Laya.Box",
				cc_buttonOk1: "UIButton",
				cc_buttonNo1: "UIButton",
				cc_nodeResult1: "Laya.Box",
				cc_labelTips2: "Laya.Label",
				cc_nodeCheck2: "Laya.Box",
				cc_buttonOk2: "UIButton",
				cc_buttonNo2: "UIButton",
				cc_nodeResult2: "Laya.Box",
				cc_labelTips3: "Laya.Label",
				cc_nodeCheck3: "Laya.Box",
				cc_buttonOk3: "UIButton",
				cc_buttonNo3: "UIButton",
				cc_nodeResult3: "Laya.Box",
				cc_labelScore: "Laya.Label",
				cc_buttonSure: "UIButton",
				cc_spriteGou: "Laya.Sprite",
				cc_spriteFlower: "Laya.Sprite",
				cc_labelSure: "Laya.Label"
			}, this.stageDatas = [], this.answers = [], this.curIndex = 0, this.scores = 0, this.checkArr = [], this.rating = 0
		}
		buildUi() {
			let t = this.context && this.context.answers;
			if (!t) return;
			this.answers = t;
			let e = this.context && this.context.stageIds;
			if (!e) return;
			for (let a = 0; a < e.length; a++) {
				let i = db.get_class_math_stage_db(e[a]);
				if (!i) return;
				this.stageDatas.push(i);
				let s = this["nodeTest" + (a + 1).toString()];
				if (s) {
					let i = new ClassStageMathItem({
						stageId: e[a],
						bTeacher: !0,
						answer: t[a]
					});
					i.setParent(s), i.setVisible(!0)
				}
			}
			let a = this.context && this.context.seatIdx,
				i = mgrClassRoom.getSeatDatas()[a];
			if (!i) return;
			let s = db.get_class_room_role_db(i.roleId);
			if (s) {
				this.labelTitle.text = `${mgrI18n.getText(s.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`;
				let t = _G.poolManager.get(Spine, s.spineId);
				this.spine = t, t.setParent(this.nodeSpine), t.setScale(-1, 1), t.play("idle", !0)
			}
			this.labelScore.font = GConfig.bmf_class, this.nodeSelected.alpha = 0, this.nodeCheck1.visible = !1, this.buttonOk1.interactable = !1, this.buttonNo1.interactable = !1, this.nodeCheck2.visible = !1, this.buttonOk2.interactable = !1, this.buttonNo2.interactable = !1, this.nodeCheck3.visible = !1, this.buttonOk3.interactable = !1, this.buttonNo3.interactable = !1, this.labelScore.visible = !1, this.buttonSure.node.visible = !1, this.startCheck(1)
		}
		dispose() {
			this.spine && _G.poolManager.put(this.spine), super.dispose()
		}
		startCheck(t) {
			if (t == this.curIndex) return;
			this.curIndex = t, cc.clearTween(this.nodeSelected), cc.tween(this.nodeSelected).repeatForever(cc.tween().to(.3, cc.PROP.ALPHA0).call(() => {
				this.nodeSelected.y = 160 * (t - 1) - 200
			}).to(.3, cc.PROP.ALPHA1)).start(), cc.tween(this, !0).delay(.3).call(() => {
				mgrAlert.playParticleEffect("132", this.nodeSelected.localToGlobal(new Laya.Point(this.nodeSelected.width / 2, this.nodeSelected.height / 2)), 1, .5, 3.5)
			}).start();
			let e = this["nodeCheck" + t.toString()];
			this["buttonOk" + t.toString()], this["buttonNo" + t.toString()];
			this["nodeResult" + t.toString()].visible = !1, e.visible = !0, e.alpha = 0, cc.tween(e).to(.3, cc.PROP.ALPHA1).call(() => {}).start(), Timer.callLater(1, () => {
				let e = this.stageDatas[t - 1],
					a = this.answers[t - 1];
				e.correctScore == a ? (this.scores += 100 / this.stageDatas.length, this["on_click_buttonOk" + t.toString()]()) : this["on_click_buttonNo" + t.toString()]()
			}, this)
		}
		refreshUi() {
			let t = this.curIndex,
				e = this["buttonOk" + t.toString()],
				a = this["buttonNo" + t.toString()];
			e && (e.interactable = !1, e.node.getChildByName("on").visible = 1 == this.checkArr[t - 1], e.node.getChildByName("off").visible = 0 == this.checkArr[t - 1], cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start(), cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start()), a && (a.interactable = !1, a.node.getChildByName("on").visible = 0 == this.checkArr[t - 1], a.node.getChildByName("off").visible = 1 == this.checkArr[t - 1], cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start(), cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start());
			let i = this["nodeResult" + t.toString()];
			i.visible = !0;
			let s = i.getChildByName("correct"),
				n = i.getChildByName("wrong");
			1 == this.checkArr[t - 1] ? (n.visible = !1, s.visible = !0, s.scale(0, 0), cc.tween(s).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()) : (s.visible = !1, n.visible = !0, n.scale(0, 0), cc.tween(n).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()), Timer.callLater(.5, () => {
				this.destroyed || (this.checkArr.length < 3 ? this.startCheck(t + 1) : (cc.clearTween(this.nodeSelected), this.nodeSelected.visible = !1, this.buttonSure.node.visible = !0, this.buttonSure.node.scale(0, 0), cc.tween(this.buttonSure.node).to(.3, cc.PROP.SCALE1).start(), this.calcScore(), this.labelScore.visible = !0, this.labelScore.scale(0, 0), cc.tween(this.labelScore).to(.2, cc.PROP.SCALE1_2).delay(.2).to(.2, cc.PROP.SCALE1).start()))
			}, this)
		}
		calcScore() {
			let t = Math.ceil(this.scores);
			this.labelScore.text = t.toString();
			let e = mgrClassRoom.calcRating(t);
			this.rating = e, this.refreshLabel()
		}
		refreshLabel() {
			let t = mgrI18n.getText("panelAdvCostDialog.2"),
				e = "";
			switch (this.rating) {
				case 1:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.2"), e = "cry", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 2:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.3"), e = "idle", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 3:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.4"), e = "happy", this.spriteGou.visible = !1, this.spriteFlower.visible = !0
			}
			this.labelSure.text = t, this.spine && this.spine.play(e, !0)
		}
		on_click_buttonOk1() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo1() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk2() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo2() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk3() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo3() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonSure() {
			if (this.rating > 1)
				if (GameStatistics.statisOnStageEnd(13102, 1), GameStatistics.statisCommonEvent(2537), 2 == this.rating) {
					let t = BaseFacade.mDrop.makeDrop("30");
					mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
						seatIdx: this.context.seatIdx
					})
				} else {
					let t = this.context && this.context.seatIdx,
						e = mgrClassRoom.getSeatDatas()[t];
					mgrAlert.openPanelLoading(UI_NAME.PanelClassReward, {
						roleId: e.roleId,
						fOnRewardEnd: () => {
							e.roleId != CLASS_UNLOCK_ROLE_ID || mgrGame.isContractUnlock(CLASS_UNLOCK_CONTRACT_IDX) || PanelClassRoleGet.openPanel(null, {
								bReward: !0
							});
							let t = BaseFacade.mDrop.makeDrop("30");
							mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
								seatIdx: this.context.seatIdx
							})
						}
					})
				}
			else {
				GameStatistics.statisOnStageEnd(13102, 0, 0), GameStatistics.statisCommonEvent(2536), mgrAlert.openPanelLoading(UI_NAME.PanelClassOutSide, {
					crySeatIdx: this.context.seatIdx
				});
				let t = BaseFacade.mDrop.makeDrop("30");
				mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_CRY_TO_OUTSIDE", {
					seatIdx: this.context.seatIdx
				})
			}
			mgrSdk.stopRecordVideo(), mgrSdk.isVideoShareable && mgrAlert.openPanelLoading(PanelShare, {
				shareIdx: 11,
				desc: "快让朋友们看看你的课堂趣事吧！",
				descWithoutShare: "彩妆课堂真有趣！"
			}), this.close(!0)
		}
	}
	class PanelClassStudenStageResult extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassStudenStageResult.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeSpine: "Laya.Box",
				cc_nodePhotos: "Laya.Box",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_spritePhoto1: "Laya.Sprite",
				cc_spritePhoto2: "Laya.Sprite",
				cc_spritePhoto3: "Laya.Sprite",
				cc_nodeSelected: "Laya.Image",
				cc_labelTitle: "Laya.Label",
				cc_labelTips1: "Laya.Label",
				cc_nodeCheck1: "Laya.Box",
				cc_buttonOk1: "UIButton",
				cc_buttonNo1: "UIButton",
				cc_nodeResult1: "Laya.Box",
				cc_labelTips2: "Laya.Label",
				cc_nodeCheck2: "Laya.Box",
				cc_buttonOk2: "UIButton",
				cc_buttonNo2: "UIButton",
				cc_nodeResult2: "Laya.Box",
				cc_labelTips3: "Laya.Label",
				cc_nodeCheck3: "Laya.Box",
				cc_buttonOk3: "UIButton",
				cc_buttonNo3: "UIButton",
				cc_nodeResult3: "Laya.Box",
				cc_labelScore: "Laya.Label",
				cc_buttonSure: "UIButton",
				cc_spriteGou: "Laya.Sprite",
				cc_spriteFlower: "Laya.Sprite",
				cc_labelSure: "Laya.Label"
			}, this.ORDER_TO_PHOTO_INDEX = {
				1: 3,
				2: 2,
				3: 1
			}, this.curIndex = 0, this.scores = 0, this.checkArr = [], this.rating = 0
		}
		buildUi() {
			let t = this.context && this.context.stageId || 0,
				e = db.get_student_stage_db(t);
			if (!e) return;
			this.stageData = e;
			let a = this.context && this.context.seatIdx,
				i = mgrClassRoom.getSeatDatas()[a];
			if (!i) return;
			let s = db.get_class_room_role_db(i.roleId);
			if (s) {
				this.labelTitle.text = `${mgrI18n.getText(s.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`;
				let t = _G.poolManager.get(Spine, s.spineId);
				this.spine = t, t.setParent(this.nodeSpine), t.setScale(-1, 1), t.play("idle", !0)
			}
			let n = this.context.photoPos;
			if (n) {
				this.labelScore.font = GConfig.bmf_class, this.spritePhoto1.loadImage(e.pictureUrl1), this.spritePhoto1.pos(n[0][0], n[0][1]), this.spritePhoto2.loadImage(e.pictureUrl2), this.spritePhoto2.pos(n[1][0], n[1][1]), this.spritePhoto3.loadImage(e.pictureUrl3), this.spritePhoto3.pos(n[2][0], n[2][1]);
				for (let t = 1; t <= 3; t++) {
					let e = this["spritePhoto" + t.toString()],
						a = new Laya.Sprite,
						i = new Laya.Point;
					UiHelper.local2local(this.spriteMaskBg, e, i), a.graphics.drawImage(this.spriteMaskBg.texture, i.x, i.y, 492, 620), e.mask = a
				}
				this.nodeSelected.alpha = 0, this.nodeCheck1.visible = !1, this.buttonOk1.interactable = !1, this.buttonNo1.interactable = !1, this.nodeCheck2.visible = !1, this.buttonOk2.interactable = !1, this.buttonNo2.interactable = !1, this.nodeCheck3.visible = !1, this.buttonOk3.interactable = !1, this.buttonNo3.interactable = !1, this.labelScore.visible = !1, this.buttonSure.node.visible = !1, this.startCheck(1)
			}
		}
		dispose() {
			this.spine && _G.poolManager.put(this.spine), super.dispose()
		}
		startCheck(t) {
			if (t == this.curIndex) return;
			this.curIndex = t, cc.clearTween(this.nodeSelected), cc.tween(this.nodeSelected).repeatForever(cc.tween().to(.3, cc.PROP.ALPHA0).call(() => {
				this.nodeSelected.y = 200 * (t - 1) - 200
			}).to(.3, cc.PROP.ALPHA1)).start(), cc.tween(this, !0).delay(.3).call(() => {
				mgrAlert.playParticleEffect("132", this.nodeSelected.localToGlobal(new Laya.Point(this.nodeSelected.width / 2, this.nodeSelected.height / 2)), 1, .5, 3.5)
			}).start();
			let e = this["nodeCheck" + t.toString()];
			this["buttonOk" + t.toString()], this["buttonNo" + t.toString()];
			this["nodeResult" + t.toString()].visible = !1, e.visible = !0, e.alpha = 0, cc.tween(e).to(.3, cc.PROP.ALPHA1).call(() => {}).start(), Timer.callLater(1, () => {
				let e = new Laya.Point,
					a = this["spritePhoto" + this.ORDER_TO_PHOTO_INDEX[t].toString()],
					i = this.stageData["picturePos" + this.ORDER_TO_PHOTO_INDEX[t].toString()];
				e.x = i[0], e.y = i[1];
				let s = Mathf.distance(a, e),
					n = 0;
				s <= 100 && (n = Math.ceil(100 * (1 - s / 100))), this.scores += n, mgrClassRoom.calcRating(n) > 1 ? this["on_click_buttonOk" + t.toString()]() : this["on_click_buttonNo" + t.toString()]()
			}, this)
		}
		refreshUi() {
			let t = this.curIndex,
				e = this["buttonOk" + t.toString()],
				a = this["buttonNo" + t.toString()];
			e && (e.interactable = !1, e.node.getChildByName("on").visible = 1 == this.checkArr[t - 1], e.node.getChildByName("off").visible = 0 == this.checkArr[t - 1], cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start(), cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start()), a && (a.interactable = !1, a.node.getChildByName("on").visible = 0 == this.checkArr[t - 1], a.node.getChildByName("off").visible = 1 == this.checkArr[t - 1], cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start(), cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start());
			let i = this["nodeResult" + t.toString()];
			i.visible = !0;
			let s = i.getChildByName("correct"),
				n = i.getChildByName("wrong");
			1 == this.checkArr[t - 1] ? (n.visible = !1, s.visible = !0, s.scale(0, 0), cc.tween(s).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()) : (s.visible = !1, n.visible = !0, n.scale(0, 0), cc.tween(n).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()), Timer.callLater(.5, () => {
				this.destroyed || (this.checkArr.length < 3 ? this.startCheck(t + 1) : (cc.clearTween(this.nodeSelected), this.nodeSelected.visible = !1, this.buttonSure.node.visible = !0, this.buttonSure.node.scale(0, 0), cc.tween(this.buttonSure.node).to(.3, cc.PROP.SCALE1).start(), this.calcScore(), this.labelScore.visible = !0, this.labelScore.scale(0, 0), cc.tween(this.labelScore).to(.2, cc.PROP.SCALE1_2).delay(.2).to(.2, cc.PROP.SCALE1).start()))
			}, this)
		}
		calcScore() {
			let t = Math.ceil(this.scores / 3);
			this.labelScore.text = t.toString();
			let e = mgrClassRoom.calcRating(t);
			this.rating = e, this.refreshLabel()
		}
		refreshLabel() {
			let t = mgrI18n.getText("panelAdvCostDialog.2"),
				e = "";
			switch (this.rating) {
				case 1:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.2"), e = "cry", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 2:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.3"), e = "idle", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 3:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.4"), e = "happy", this.spriteGou.visible = !1, this.spriteFlower.visible = !0
			}
			this.labelSure.text = t, this.spine && this.spine.play(e, !0)
		}
		on_click_buttonOk1() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo1() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk2() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo2() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk3() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo3() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonSure() {
			if (this.rating > 1)
				if (GameStatistics.statisOnStageEnd(13102, 1), GameStatistics.statisCommonEvent(2537), 2 == this.rating) {
					let t = BaseFacade.mDrop.makeDrop("30");
					mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
						seatIdx: this.context.seatIdx
					})
				} else {
					let t = this.context && this.context.seatIdx,
						e = mgrClassRoom.getSeatDatas()[t];
					mgrAlert.openPanelLoading(UI_NAME.PanelClassReward, {
						roleId: e.roleId,
						fOnRewardEnd: () => {
							e.roleId != CLASS_UNLOCK_ROLE_ID || mgrGame.isContractUnlock(CLASS_UNLOCK_CONTRACT_IDX) || PanelClassRoleGet.openPanel(null, {
								bReward: !0
							});
							let t = BaseFacade.mDrop.makeDrop("30");
							mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
								seatIdx: this.context.seatIdx
							})
						}
					})
				}
			else {
				GameStatistics.statisOnStageEnd(13102, 0, 0), GameStatistics.statisCommonEvent(2536), mgrAlert.openPanelLoading(UI_NAME.PanelClassOutSide, {
					crySeatIdx: this.context.seatIdx
				});
				let t = BaseFacade.mDrop.makeDrop("30");
				mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_CRY_TO_OUTSIDE", {
					seatIdx: this.context.seatIdx
				})
			}
			mgrSdk.stopRecordVideo(), mgrSdk.isVideoShareable && mgrAlert.openPanelLoading(UI_NAME.PanelShare, {
				shareIdx: 11,
				desc: "快让朋友们看看你的课堂趣事吧！",
				descWithoutShare: "彩妆课堂真有趣！"
			}), this.close(!0)
		}
	}
	class PanelClassStudentMatchingStage extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassStudentMatchingStage.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_spriteRoleIcon: "Laya.Sprite",
				cc_labelTitle: "Laya.Label",
				cc_labelTip: "Laya.Label",
				cc_nodeTests: "Laya.Box",
				cc_buttonFinished: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.usedMatchingIds = [], this.matchingItem = null
		}
		buildUi() {
			let t = [],
				e = db.get_class_matching_db_map(),
				a = Mathf.random(1, 2);
			this.labelTip.text = 1 == a ? mgrI18n.getText("panelClassStudentMatchingStage.1") : mgrI18n.getText("panelClassStudentMatchingStage.2");
			for (let i in e) {
				let s = e[i];
				s && s.gid == a && t.push(s.id)
			}
			for (let e = 0; e < 3; e++) {
				let e = Mathf.random(t.length) - 1,
					a = t[e];
				this.usedMatchingIds.push(a), t.splice(e, 1)
			}
			let i = new ClassStageMatchingItem({
				matchingIds: this.usedMatchingIds,
				fOnFinish: this.onFinish.bind(this)
			});
			i.setParent(this.nodeTests), i.fadeIn(), this.matchingItem = i, this.buttonFinished.node.visible = !1, console.log("连线题关卡", this.usedMatchingIds);
			let s = this.context && this.context.seatIdx,
				n = mgrClassRoom.getSeatDatas()[s];
			if (!n) return;
			let o = db.get_class_room_role_db(n.roleId);
			o && (this.spriteRoleIcon.loadImage(o.iconUrl), this.labelTitle.text = `${mgrI18n.getText(o.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`), mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13102)
		}
		onFinish() {
			this.buttonFinished.node.visible = !0, this.buttonFinished.interactable = !1, this.buttonFinished.node.scale(0, 0), cc.tween(this.buttonFinished.node).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).call(() => {
				this.buttonFinished.interactable = !0
			}).start()
		}
		on_click_buttonFinished() {
			if (this.matchingItem) {
				let t = this.matchingItem.getMatchingResult(),
					e = this.matchingItem.getLeftDatas(),
					a = this.matchingItem.getRightDatas();
				mgrAlert.openPanelLoading(UI_NAME.PanelClassStudenMatchingStageResult, {
					matchingIds: this.usedMatchingIds,
					result: t,
					leftDatas: e,
					rightDatas: a,
					seatIdx: this.context.seatIdx
				}), this.close()
			}
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisOnStageEnd(13102, 0, 1), this.close()
		}
	}
	class PanelClassStudentMathStage extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassStudentMathStage.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_spriteRoleIcon: "Laya.Sprite",
				cc_labelTitle: "Laya.Label",
				cc_nodeTest1: "Laya.Box",
				cc_nodeTest2: "Laya.Box",
				cc_nodeTest3: "Laya.Box",
				cc_buttonFinished: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.usedStageIds = [], this.stageItems = [], this.selectedAnswers = []
		}
		buildUi() {
			let t = [],
				e = db.get_class_math_stage_db_map();
			for (let a in e) {
				let i = e[a];
				i && t.push(i.id)
			}
			for (let e = 0; e < 3; e++) {
				let a = Mathf.random(t.length) - 1,
					i = t[a];
				this.usedStageIds.push(i), t.splice(a, 1);
				let s = this["nodeTest" + (e + 1).toString()],
					n = new ClassStageMathItem({
						stageId: i,
						fOnSelectAnswer: this.onSelectAnswer.bind(this)
					});
				n.setParent(s), n.setVisible(!1), this.stageItems.push(n)
			}
			console.log("数学题关卡", this.usedStageIds, this.stageItems), this.refreshUi();
			let a = this.context && this.context.seatIdx,
				i = mgrClassRoom.getSeatDatas()[a];
			if (!i) return;
			let s = db.get_class_room_role_db(i.roleId);
			s && (this.spriteRoleIcon.loadImage(s.iconUrl), this.labelTitle.text = `${mgrI18n.getText(s.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`), mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13102)
		}
		refreshUi() {
			let t = this.selectedAnswers.length,
				e = this.stageItems[t];
			e ? (e.setVisible(!0), e.fadeIn(), this.buttonFinished.node.visible = !1) : this.buttonFinished.node.visible = !0
		}
		onSelectAnswer(t) {
			this.selectedAnswers.push(t), this.refreshUi()
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisOnStageEnd(13102, 0, 1), this.close()
		}
		on_click_buttonFinished() {
			mgrAlert.openPanelLoading(UI_NAME.PanelClassStudenMathStageResult, {
				stageIds: this.usedStageIds,
				answers: this.selectedAnswers,
				seatIdx: this.context.seatIdx
			}), this.close()
		}
	}
	class PanelClassTeacherMatchingStage extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassTeacherMatchingStage.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeSpine: "Laya.Box",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_nodeTest: "Laya.Box",
				cc_nodeSelected: "Laya.Image",
				cc_labelTitle: "Laya.Label",
				cc_nodeCheck1: "Laya.Box",
				cc_labelTips1: "Laya.Label",
				cc_buttonOk1: "UIButton",
				cc_buttonNo1: "UIButton",
				cc_nodeResult1: "Laya.Box",
				cc_nodeCheck2: "Laya.Box",
				cc_labelTips2: "Laya.Label",
				cc_buttonOk2: "UIButton",
				cc_buttonNo2: "UIButton",
				cc_nodeResult2: "Laya.Box",
				cc_nodeCheck3: "Laya.Box",
				cc_labelTips3: "Laya.Label",
				cc_buttonOk3: "UIButton",
				cc_buttonNo3: "UIButton",
				cc_nodeResult3: "Laya.Box",
				cc_labelScore: "Laya.Label",
				cc_labelScoreChange: "Laya.Label",
				cc_nodeLayoutBtns: "UIHVLayout",
				cc_buttonSure: "UIButton",
				cc_spriteGou: "Laya.Sprite",
				cc_spriteFlower: "Laya.Sprite",
				cc_labelSure: "Laya.Label",
				cc_buttonChange: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_teacher_stage", "banner_teacher_stage"), this.result = {}, this.usedMatchingIds = [], this.leftDatas = {}, this.rightDatas = {}, this.curIndex = 0, this.checkArr = [], this.rating = 0
		}
		buildUi() {
			let t = [],
				e = db.get_class_matching_db_map(),
				a = Mathf.random(1, 2);
			for (let i in e) {
				let s = e[i];
				s && s.gid == a && t.push(s.id)
			}
			for (let e = 0; e < 3; e++) {
				let e = Mathf.random(t.length) - 1,
					a = t[e];
				this.usedMatchingIds.push(a), t.splice(e, 1)
			}
			let i = [],
				s = [];
			for (let t = 0; t < this.usedMatchingIds.length; t++) {
				let e = db.get_class_matching_db(this.usedMatchingIds[t]);
				if (!e) return;
				i.push(e.itemId1), s.push(e.itemId2)
			}
			for (let t = 1; t <= 3; t++) {
				let e = Mathf.random(i.length) - 1,
					a = i[e];
				i.splice(e, 1), this.leftDatas[t] = {
					nodeSprite: null,
					itemId: a,
					bUsed: !1
				};
				let n = Mathf.random(s.length) - 1,
					o = s[n];
				s.splice(n, 1), this.rightDatas[t] = {
					nodeSprite: null,
					itemId: o,
					bUsed: !1
				}
			}
			let n = [1, 2, 3];
			for (let t = 1; t <= 3; t++) {
				let e = this.leftDatas[t],
					a = Mathf.random(n.length) - 1,
					i = n[a];
				n.splice(a, 1);
				let s = this.rightDatas[i];
				e && s && (this.result[e.itemId] = s.itemId)
			}
			new ClassStageMatchingItem({
				leftDatas: this.leftDatas,
				rightDatas: this.rightDatas,
				bTeacher: !0,
				result: this.result
			}).setParent(this.nodeTest);
			let o = this.context && this.context.seatIdx,
				r = mgrClassRoom.getSeatDatas()[o];
			if (!r) return;
			let l = db.get_class_room_role_db(r.roleId);
			if (l) {
				this.labelTitle.text = `${mgrI18n.getText(l.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`;
				let t = _G.poolManager.get(Spine, l.spineId);
				this.spine = t, t.setParent(this.nodeSpine), t.setScale(-1, 1), t.play("idle", !0)
			}
			this.labelScore.font = GConfig.bmf_class, this.labelScoreChange.font = GConfig.bmf_class, this.nodeSelected.alpha = 0, this.nodeCheck1.visible = !1, this.buttonOk1.interactable = !1, this.buttonNo1.interactable = !1, this.nodeCheck2.visible = !1, this.buttonOk2.interactable = !1, this.buttonNo2.interactable = !1, this.nodeCheck3.visible = !1, this.buttonOk3.interactable = !1, this.buttonNo3.interactable = !1, this.labelScore.visible = !1, this.buttonSure.node.visible = !1, this.buttonChange.node.visible = !1, this.labelScoreChange.visible = !1, this.startCheck(1), mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13101)
		}
		dispose() {
			this.instOrBanner.dispose(), this.spine && _G.poolManager.put(this.spine), _G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.PANEL_TEACHER_STAGE_IDLE), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		startCheck(t) {
			if (t == this.curIndex) return;
			this.curIndex = t, cc.clearTween(this.nodeSelected), cc.tween(this.nodeSelected).repeatForever(cc.tween().to(.3, cc.PROP.ALPHA0).call(() => {
				this.nodeSelected.y = 160 * (t - 1) - 200
			}).to(.3, cc.PROP.ALPHA1)).start(), cc.tween(this, !0).delay(.3).call(() => {
				mgrAlert.playParticleEffect("132", this.nodeSelected.localToGlobal(new Laya.Point(this.nodeSelected.width / 2, this.nodeSelected.height / 2)), 1, .5, 3.5)
			}).start();
			let e = this["nodeCheck" + t.toString()],
				a = this["buttonOk" + t.toString()],
				i = this["buttonNo" + t.toString()];
			this["nodeResult" + t.toString()].visible = !1, e.visible = !0, e.alpha = 0, cc.tween(e).to(.3, cc.PROP.ALPHA1).call(() => {
				a.interactable = !0, i.interactable = !0, mgrGuide.dispatchGuide(GUD_EVENT.PANEL_TEACHER_STAGE_IDLE)
			}).start()
		}
		refreshUi() {
			mgrGuide.sendMsgKey("PANEL_TEACHER_STAGE_CLICK");
			let t = this.curIndex;
			GameStatistics.statisCommonEvent(2551 + t);
			let e = this["buttonOk" + t.toString()],
				a = this["buttonNo" + t.toString()];
			e && (e.interactable = !1, e.node.getChildByName("on").visible = 1 == this.checkArr[t - 1], e.node.getChildByName("off").visible = 0 == this.checkArr[t - 1], cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start(), cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start()), a && (a.interactable = !1, a.node.getChildByName("on").visible = 0 == this.checkArr[t - 1], a.node.getChildByName("off").visible = 1 == this.checkArr[t - 1], cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start(), cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start());
			let i = this["nodeResult" + t.toString()];
			i.visible = !0;
			let s = i.getChildByName("correct"),
				n = i.getChildByName("wrong");
			1 == this.checkArr[t - 1] ? (n.visible = !1, s.visible = !0, s.scale(0, 0), cc.tween(s).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()) : (s.visible = !1, n.visible = !0, n.scale(0, 0), cc.tween(n).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()), Timer.callLater(.5, () => {
				this.destroyed || (this.checkArr.length < 3 ? this.startCheck(t + 1) : (cc.clearTween(this.nodeSelected), this.nodeSelected.visible = !1, this.buttonSure.node.visible = !0, this.buttonSure.node.scale(0, 0), cc.tween(this.buttonSure.node).to(.3, cc.PROP.SCALE1).start(), this.buttonChange.node.visible = !0, this.buttonChange.node.scale(0, 0), cc.tween(this.buttonChange.node).to(.3, cc.PROP.SCALE1).start(), this.calcScore(), this.labelScore.visible = !0, this.labelScore.scale(0, 0), cc.tween(this.labelScore).to(.2, cc.PROP.SCALE1_2).delay(.2).to(.2, cc.PROP.SCALE1).start()))
			}, this)
		}
		calcScore() {
			let t = 0;
			for (let e = 0; e < this.checkArr.length; e++) 1 == this.checkArr[e] && (t += 100 / this.checkArr.length);
			t = Math.ceil(t), this.labelScore.text = t.toString();
			let e = mgrClassRoom.calcRating(t);
			this.rating = e, this.refreshLabel()
		}
		refreshLabel() {
			let t = mgrI18n.getText("panelClassTeacherMatchingStage.1"),
				e = "";
			switch (this.rating) {
				case 1:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.2"), e = "cry", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 2:
					t = t = mgrI18n.getText("panelClassStudenMatchingStageResult.3"), e = "idle", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 3:
					t = t = mgrI18n.getText("panelClassStudenMatchingStageResult.4"), e = "happy", this.spriteGou.visible = !1, this.spriteFlower.visible = !0
			}
			this.labelSure.text = t, this.spine && this.spine.play(e, !0)
		}
		on_click_buttonOk1() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo1() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk2() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo2() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk3() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo3() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonSure() {
			if (BaseFacade.mGoal.commit(ACTION_ID.CLASS_TEACHER, 1), this.rating > 1)
				if (GameStatistics.statisOnStageEnd(13101, 1), GameStatistics.statisCommonEvent(2539), 2 == this.rating) {
					let t = BaseFacade.mDrop.makeDrop("30");
					mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
						seatIdx: this.context.seatIdx
					})
				} else {
					let t = this.context && this.context.seatIdx,
						e = mgrClassRoom.getSeatDatas()[t];
					mgrAlert.openPanelLoading(UI_NAME.PanelClassReward, {
						roleId: e.roleId,
						fOnRewardEnd: () => {
							e.roleId != CLASS_UNLOCK_ROLE_ID || mgrGame.isContractUnlock(CLASS_UNLOCK_CONTRACT_IDX) || PanelClassRoleGet.openPanel(null, {
								bReward: !0
							});
							let t = BaseFacade.mDrop.makeDrop("30");
							mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
								seatIdx: this.context.seatIdx
							})
						}
					})
				}
			else {
				GameStatistics.statisOnStageEnd(13101, 0, 0), GameStatistics.statisCommonEvent(2538), mgrAlert.openPanelLoading(UI_NAME.PanelClassOutSide, {
					crySeatIdx: this.context.seatIdx
				});
				let t = BaseFacade.mDrop.makeDrop("30");
				mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_CRY_TO_OUTSIDE", {
					seatIdx: this.context.seatIdx
				})
			}
			mgrSdk.stopRecordVideo(), mgrSdk.isVideoShareable && mgrAlert.openPanelLoading(UI_NAME.PanelShare, {
				shareIdx: 11,
				desc: "快让朋友们看看你的课堂趣事吧！",
				descWithoutShare: "彩妆课堂真有趣！"
			}), this.close(!0)
		}
		on_click_buttonChange() {
			GameStatistics.statisCommonEvent(2540), mgrAlert.openPanelLoading(UI_NAME.PanelClassTeacherChangeScore, {
				score: parseInt(this.labelScore.text),
				fOnChange: t => {
					this.buttonChange.node.visible = !1, this.nodeLayoutBtns.updateLayout(.2, !0), this.labelScoreChange.visible = !0, this.labelScoreChange.text = t.toString(), cc.tween(this.labelScore).to(.3, cc.PROP.SCALE0).call(() => {
						this.labelScore.text = t.toString(), cc.tween(this.labelScoreChange).to(.4, {
							x: this.labelScore.x,
							y: this.labelScore.y
						}).to(.2, cc.PROP.SCALE1_3).delay(.2).to(.2, cc.PROP.SCALE1).start()
					}).start();
					let e = mgrClassRoom.calcRating(t);
					this.rating = e, this.refreshLabel()
				}
			}, () => {
				this.labelScoreChange.text = this.labelScore.text, this.labelScoreChange.pos(253, 247), this.labelScore.scale(1, 1)
			})
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisOnStageEnd(13101, 0, 1), this.close()
		}
	}
	class PanelClassTeacherMathStage extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassTeacherMathStage.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeSpine: "Laya.Box",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_nodeTest1: "Laya.Box",
				cc_nodeTest2: "Laya.Box",
				cc_nodeTest3: "Laya.Box",
				cc_nodeSelected: "Laya.Image",
				cc_labelTitle: "Laya.Label",
				cc_nodeCheck1: "Laya.Box",
				cc_labelTips1: "Laya.Label",
				cc_buttonOk1: "UIButton",
				cc_buttonNo1: "UIButton",
				cc_nodeResult1: "Laya.Box",
				cc_nodeCheck2: "Laya.Box",
				cc_labelTips2: "Laya.Label",
				cc_buttonOk2: "UIButton",
				cc_buttonNo2: "UIButton",
				cc_nodeResult2: "Laya.Box",
				cc_nodeCheck3: "Laya.Box",
				cc_labelTips3: "Laya.Label",
				cc_buttonOk3: "UIButton",
				cc_buttonNo3: "UIButton",
				cc_nodeResult3: "Laya.Box",
				cc_labelScore: "Laya.Label",
				cc_labelScoreChange: "Laya.Label",
				cc_nodeLayoutBtns: "UIHVLayout",
				cc_buttonSure: "UIButton",
				cc_spriteGou: "Laya.Sprite",
				cc_spriteFlower: "Laya.Sprite",
				cc_labelSure: "Laya.Label",
				cc_buttonChange: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_teacher_stage", "banner_teacher_stage"), this.curIndex = 0, this.checkArr = [], this.rating = 0
		}
		buildUi() {
			let t = [],
				e = db.get_class_math_stage_db_map();
			for (let a in e) {
				let i = e[a];
				i && t.push(i.id)
			}
			for (let e = 0; e < 3; e++) {
				let a = Mathf.random(t.length) - 1,
					i = t[a];
				t.splice(a, 1);
				let s = this["nodeTest" + (e + 1).toString()],
					n = new ClassStageMathItem({
						stageId: i,
						bTeacher: !0
					});
				n.setParent(s), n.setVisible(!0)
			}
			let a = this.context && this.context.seatIdx,
				i = mgrClassRoom.getSeatDatas()[a];
			if (!i) return;
			let s = db.get_class_room_role_db(i.roleId);
			if (s) {
				this.labelTitle.text = `${mgrI18n.getText(s.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`;
				let t = _G.poolManager.get(Spine, s.spineId);
				this.spine = t, t.setParent(this.nodeSpine), t.setScale(-1, 1), t.play("idle", !0)
			}
			this.labelScore.font = GConfig.bmf_class, this.labelScoreChange.font = GConfig.bmf_class, this.nodeSelected.alpha = 0, this.nodeCheck1.visible = !1, this.buttonOk1.interactable = !1, this.buttonNo1.interactable = !1, this.nodeCheck2.visible = !1, this.buttonOk2.interactable = !1, this.buttonNo2.interactable = !1, this.nodeCheck3.visible = !1, this.buttonOk3.interactable = !1, this.buttonNo3.interactable = !1, this.labelScore.visible = !1, this.buttonSure.node.visible = !1, this.buttonChange.node.visible = !1, this.labelScoreChange.visible = !1, this.startCheck(1), mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13101)
		}
		dispose() {
			this.instOrBanner.dispose(), this.spine && _G.poolManager.put(this.spine), _G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.PANEL_TEACHER_STAGE_IDLE), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		startCheck(t) {
			if (t == this.curIndex) return;
			this.curIndex = t, cc.clearTween(this.nodeSelected), cc.tween(this.nodeSelected).repeatForever(cc.tween().to(.3, cc.PROP.ALPHA0).call(() => {
				this.nodeSelected.y = 160 * (t - 1) - 200
			}).to(.3, cc.PROP.ALPHA1)).start(), cc.tween(this, !0).delay(.3).call(() => {
				mgrAlert.playParticleEffect("132", this.nodeSelected.localToGlobal(new Laya.Point(this.nodeSelected.width / 2, this.nodeSelected.height / 2)), 1, .5, 3.5)
			}).start();
			let e = this["nodeCheck" + t.toString()],
				a = this["buttonOk" + t.toString()],
				i = this["buttonNo" + t.toString()];
			this["nodeResult" + t.toString()].visible = !1, e.visible = !0, e.alpha = 0, cc.tween(e).to(.3, cc.PROP.ALPHA1).call(() => {
				a.interactable = !0, i.interactable = !0, mgrGuide.dispatchGuide(GUD_EVENT.PANEL_TEACHER_STAGE_IDLE)
			}).start()
		}
		refreshUi() {
			mgrGuide.sendMsgKey("PANEL_TEACHER_STAGE_CLICK");
			let t = this.curIndex;
			GameStatistics.statisCommonEvent(2551 + t);
			let e = this["buttonOk" + t.toString()],
				a = this["buttonNo" + t.toString()];
			e && (e.interactable = !1, e.node.getChildByName("on").visible = 1 == this.checkArr[t - 1], e.node.getChildByName("off").visible = 0 == this.checkArr[t - 1], cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start(), cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start()), a && (a.interactable = !1, a.node.getChildByName("on").visible = 0 == this.checkArr[t - 1], a.node.getChildByName("off").visible = 1 == this.checkArr[t - 1], cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start(), cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start());
			let i = this["nodeResult" + t.toString()];
			i.visible = !0;
			let s = i.getChildByName("correct"),
				n = i.getChildByName("wrong");
			1 == this.checkArr[t - 1] ? (n.visible = !1, s.visible = !0, s.scale(0, 0), cc.tween(s).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()) : (s.visible = !1, n.visible = !0, n.scale(0, 0), cc.tween(n).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()), Timer.callLater(.5, () => {
				this.destroyed || (this.checkArr.length < 3 ? this.startCheck(t + 1) : (cc.clearTween(this.nodeSelected), this.nodeSelected.visible = !1, this.buttonSure.node.visible = !0, this.buttonSure.node.scale(0, 0), cc.tween(this.buttonSure.node).to(.3, cc.PROP.SCALE1).start(), this.buttonChange.node.visible = !0, this.buttonChange.node.scale(0, 0), cc.tween(this.buttonChange.node).to(.3, cc.PROP.SCALE1).start(), this.calcScore(), this.labelScore.visible = !0, this.labelScore.scale(0, 0), cc.tween(this.labelScore).to(.2, cc.PROP.SCALE1_2).delay(.2).to(.2, cc.PROP.SCALE1).start()))
			}, this)
		}
		calcScore() {
			let t = 0;
			for (let e = 0; e < this.checkArr.length; e++) 1 == this.checkArr[e] && (t += 100 / this.checkArr.length);
			t = Math.ceil(t), this.labelScore.text = t.toString();
			let e = mgrClassRoom.calcRating(t);
			this.rating = e, this.refreshLabel()
		}
		refreshLabel() {
			let t = mgrI18n.getText("panelClassTeacherMatchingStage.1"),
				e = "";
			switch (this.rating) {
				case 1:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.2"), e = "cry", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 2:
					t = t = mgrI18n.getText("panelClassStudenMatchingStageResult.3"), e = "idle", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 3:
					t = t = mgrI18n.getText("panelClassStudenMatchingStageResult.4"), e = "happy", this.spriteGou.visible = !1, this.spriteFlower.visible = !0
			}
			this.labelSure.text = t, this.spine && this.spine.play(e, !0)
		}
		on_click_buttonOk1() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo1() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk2() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo2() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk3() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo3() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonSure() {
			if (BaseFacade.mGoal.commit(ACTION_ID.CLASS_TEACHER, 1), this.rating > 1)
				if (GameStatistics.statisOnStageEnd(13101, 1), GameStatistics.statisCommonEvent(2539), 2 == this.rating) {
					let t = BaseFacade.mDrop.makeDrop("30");
					mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
						seatIdx: this.context.seatIdx
					})
				} else {
					let t = this.context && this.context.seatIdx,
						e = mgrClassRoom.getSeatDatas()[t];
					mgrAlert.openPanelLoading(UI_NAME.PanelClassReward, {
						roleId: e.roleId,
						fOnRewardEnd: () => {
							e.roleId != CLASS_UNLOCK_ROLE_ID || mgrGame.isContractUnlock(CLASS_UNLOCK_CONTRACT_IDX) || PanelClassRoleGet.openPanel(null, {
								bReward: !0
							});
							let t = BaseFacade.mDrop.makeDrop("30");
							mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
								seatIdx: this.context.seatIdx
							})
						}
					})
				}
			else {
				GameStatistics.statisOnStageEnd(13101, 0, 0), GameStatistics.statisCommonEvent(2538), mgrAlert.openPanelLoading(UI_NAME.PanelClassOutSide, {
					crySeatIdx: this.context.seatIdx
				});
				let t = BaseFacade.mDrop.makeDrop("30");
				mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_CRY_TO_OUTSIDE", {
					seatIdx: this.context.seatIdx
				})
			}
			mgrSdk.stopRecordVideo(), mgrSdk.isVideoShareable && mgrAlert.openPanelLoading(UI_NAME.PanelShare, {
				shareIdx: 11,
				desc: "快让朋友们看看你的课堂趣事吧！",
				descWithoutShare: "彩妆课堂真有趣！"
			}), this.close(!0)
		}
		on_click_buttonChange() {
			GameStatistics.statisCommonEvent(2540), mgrAlert.openPanelLoading(UI_NAME.PanelClassTeacherChangeScore, {
				score: parseInt(this.labelScore.text),
				fOnChange: t => {
					this.buttonChange.node.visible = !1, this.nodeLayoutBtns.updateLayout(.2, !0), this.labelScoreChange.visible = !0, this.labelScoreChange.text = t.toString(), cc.tween(this.labelScore).to(.3, cc.PROP.SCALE0).call(() => {
						this.labelScore.text = t.toString(), cc.tween(this.labelScoreChange).to(.4, {
							x: this.labelScore.x,
							y: this.labelScore.y
						}).to(.2, cc.PROP.SCALE1_3).delay(.2).to(.2, cc.PROP.SCALE1).start()
					}).start();
					let e = mgrClassRoom.calcRating(t);
					this.rating = e, this.refreshLabel()
				}
			}, () => {
				this.labelScoreChange.text = this.labelScore.text, this.labelScoreChange.pos(253, 247), this.labelScore.scale(1, 1)
			})
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisOnStageEnd(13101, 0, 1), this.close()
		}
	}
	class PanelClassTeacherStage extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelClassTeacherStage.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeSpine: "Laya.Box",
				cc_nodePhotos: "Laya.Box",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_spritePhoto1: "Laya.Sprite",
				cc_spritePhoto2: "Laya.Sprite",
				cc_spritePhoto3: "Laya.Sprite",
				cc_nodeSelected: "Laya.Image",
				cc_labelTitle: "Laya.Label",
				cc_nodeCheck1: "Laya.Box",
				cc_labelTips1: "Laya.Label",
				cc_buttonOk1: "UIButton",
				cc_buttonNo1: "UIButton",
				cc_nodeResult1: "Laya.Box",
				cc_nodeCheck2: "Laya.Box",
				cc_labelTips2: "Laya.Label",
				cc_buttonOk2: "UIButton",
				cc_buttonNo2: "UIButton",
				cc_nodeResult2: "Laya.Box",
				cc_nodeCheck3: "Laya.Box",
				cc_labelTips3: "Laya.Label",
				cc_buttonOk3: "UIButton",
				cc_buttonNo3: "UIButton",
				cc_nodeResult3: "Laya.Box",
				cc_labelScore: "Laya.Label",
				cc_labelScoreChange: "Laya.Label",
				cc_nodeLayoutBtns: "UIHVLayout",
				cc_buttonSure: "UIButton",
				cc_spriteGou: "Laya.Sprite",
				cc_spriteFlower: "Laya.Sprite",
				cc_labelSure: "Laya.Label",
				cc_buttonChange: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_teacher_stage", "banner_teacher_stage"), this.curIndex = 0, this.checkArr = [], this.rating = 0
		}
		buildUi() {
			let t = db.get_teacher_stage_db_map(),
				e = [];
			for (let a in t) t[a] && e.push(t[a]);
			let a = e[Mathf.random(e.length) - 1];
			if (!a) return;
			let i = this.context && this.context.seatIdx,
				s = mgrClassRoom.getSeatDatas()[i];
			if (!s) return;
			let n = db.get_class_room_role_db(s.roleId);
			if (n) {
				this.labelTitle.text = `${mgrI18n.getText(n.tlite2)}${mgrI18n.getText("panelClassStudenMatchingStageResult.1")}`;
				let t = _G.poolManager.get(Spine, n.spineId);
				this.spine = t, t.setParent(this.nodeSpine), t.setScale(-1, 1), t.play("idle", !0)
			}
			this.labelScore.font = GConfig.bmf_class, this.labelScoreChange.font = GConfig.bmf_class, this.spritePhoto1.loadImage(a.pictureUrl1), this.spritePhoto1.pos(Mathf.random(a.pictureOffsetX[1], a.pictureOffsetX[0]), Mathf.random(a.pictureOffsetY[1], a.pictureOffsetY[0])), this.spritePhoto2.loadImage(a.pictureUrl2), this.spritePhoto2.pos(Mathf.random(a.pictureOffsetX[1], a.pictureOffsetX[0]), Mathf.random(a.pictureOffsetY[1], a.pictureOffsetY[0])), this.spritePhoto3.loadImage(a.pictureUrl3), this.spritePhoto3.pos(Mathf.random(a.pictureOffsetX[1], a.pictureOffsetX[0]), Mathf.random(a.pictureOffsetY[1], a.pictureOffsetY[0]));
			for (let t = 1; t <= 3; t++) {
				let e = this["spritePhoto" + t.toString()],
					a = new Laya.Sprite,
					i = new Laya.Point;
				UiHelper.local2local(this.spriteMaskBg, e, i), a.graphics.drawImage(this.spriteMaskBg.texture, i.x, i.y, 492, 620), e.mask = a
			}
			this.nodeSelected.alpha = 0, this.nodeCheck1.visible = !1, this.buttonOk1.interactable = !1, this.buttonNo1.interactable = !1, this.nodeCheck2.visible = !1, this.buttonOk2.interactable = !1, this.buttonNo2.interactable = !1, this.nodeCheck3.visible = !1, this.buttonOk3.interactable = !1, this.buttonNo3.interactable = !1, this.labelScore.visible = !1, this.buttonSure.node.visible = !1, this.buttonChange.node.visible = !1, this.labelScoreChange.visible = !1, this.startCheck(1), mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13101)
		}
		dispose() {
			this.instOrBanner.dispose(), this.spine && _G.poolManager.put(this.spine), _G.sendMsg("GUIDE_FORCE_CLOSE", GUD_EVENT.PANEL_TEACHER_STAGE_IDLE), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		startCheck(t) {
			if (t == this.curIndex) return;
			this.curIndex = t, cc.clearTween(this.nodeSelected), cc.tween(this.nodeSelected).repeatForever(cc.tween().to(.3, cc.PROP.ALPHA0).call(() => {
				this.nodeSelected.y = 200 * (t - 1) - 200
			}).to(.3, cc.PROP.ALPHA1)).start(), cc.tween(this, !0).delay(.3).call(() => {
				mgrAlert.playParticleEffect("132", this.nodeSelected.localToGlobal(new Laya.Point(this.nodeSelected.width / 2, this.nodeSelected.height / 2)), 1, .5, 3.5)
			}).start();
			let e = this["nodeCheck" + t.toString()],
				a = this["buttonOk" + t.toString()],
				i = this["buttonNo" + t.toString()];
			this["nodeResult" + t.toString()].visible = !1, e.visible = !0, e.alpha = 0, cc.tween(e).to(.3, cc.PROP.ALPHA1).call(() => {
				a.interactable = !0, i.interactable = !0, mgrGuide.dispatchGuide(GUD_EVENT.PANEL_TEACHER_STAGE_IDLE)
			}).start()
		}
		refreshUi() {
			mgrGuide.sendMsgKey("PANEL_TEACHER_STAGE_CLICK");
			let t = this.curIndex;
			GameStatistics.statisCommonEvent(2551 + t);
			let e = this["buttonOk" + t.toString()],
				a = this["buttonNo" + t.toString()];
			e && (e.interactable = !1, e.node.getChildByName("on").visible = 1 == this.checkArr[t - 1], e.node.getChildByName("off").visible = 0 == this.checkArr[t - 1], cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start(), cc.tween(e.node).to(.3, cc.PROP.SCALE0).call(() => {
				e.node.visible = !1
			}).start()), a && (a.interactable = !1, a.node.getChildByName("on").visible = 0 == this.checkArr[t - 1], a.node.getChildByName("off").visible = 1 == this.checkArr[t - 1], cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start(), cc.tween(a.node).to(.3, cc.PROP.SCALE0).call(() => {
				a.node.visible = !1
			}).start());
			let i = this["nodeResult" + t.toString()];
			i.visible = !0;
			let s = i.getChildByName("correct"),
				n = i.getChildByName("wrong");
			1 == this.checkArr[t - 1] ? (n.visible = !1, s.visible = !0, s.scale(0, 0), cc.tween(s).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()) : (s.visible = !1, n.visible = !0, n.scale(0, 0), cc.tween(n).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()), Timer.callLater(.5, () => {
				this.destroyed || (this.checkArr.length < 3 ? this.startCheck(t + 1) : (cc.clearTween(this.nodeSelected), this.nodeSelected.visible = !1, this.buttonSure.node.visible = !0, this.buttonSure.node.scale(0, 0), cc.tween(this.buttonSure.node).to(.3, cc.PROP.SCALE1).start(), this.buttonChange.node.visible = !0, this.buttonChange.node.scale(0, 0), cc.tween(this.buttonChange.node).to(.3, cc.PROP.SCALE1).start(), this.calcScore(), this.labelScore.visible = !0, this.labelScore.scale(0, 0), cc.tween(this.labelScore).to(.2, cc.PROP.SCALE1_2).delay(.2).to(.2, cc.PROP.SCALE1).start()))
			}, this)
		}
		calcScore() {
			let t = 0;
			for (let e = 0; e < this.checkArr.length; e++) 1 == this.checkArr[e] && (t += 100 / this.checkArr.length);
			t = Math.ceil(t), this.labelScore.text = t.toString();
			let e = mgrClassRoom.calcRating(t);
			this.rating = e, this.refreshLabel()
		}
		refreshLabel() {
			let t = mgrI18n.getText("panelClassTeacherMatchingStage.1"),
				e = "";
			switch (this.rating) {
				case 1:
					t = mgrI18n.getText("panelClassStudenMatchingStageResult.2"), e = "cry", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 2:
					t = t = mgrI18n.getText("panelClassStudenMatchingStageResult.3"), e = "idle", this.spriteGou.visible = !0, this.spriteFlower.visible = !1;
					break;
				case 3:
					t = t = mgrI18n.getText("panelClassStudenMatchingStageResult.4"), e = "happy", this.spriteGou.visible = !1, this.spriteFlower.visible = !0
			}
			this.labelSure.text = t, this.spine && this.spine.play(e, !0)
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisOnStageEnd(13101, 0, 1), this.close()
		}
		on_click_buttonOk1() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo1() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk2() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo2() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonOk3() {
			this.checkArr.push(1), this.refreshUi()
		}
		on_click_buttonNo3() {
			this.checkArr.push(0), this.refreshUi()
		}
		on_click_buttonSure() {
			if (BaseFacade.mGoal.commit(ACTION_ID.CLASS_TEACHER, 1), this.rating > 1)
				if (GameStatistics.statisOnStageEnd(13101, 1), GameStatistics.statisCommonEvent(2539), 2 == this.rating) {
					let t = BaseFacade.mDrop.makeDrop("30");
					mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
						seatIdx: this.context.seatIdx
					})
				} else {
					let t = this.context && this.context.seatIdx,
						e = mgrClassRoom.getSeatDatas()[t];
					mgrAlert.openPanelLoading(UI_NAME.PanelClassReward, {
						roleId: e.roleId,
						fOnRewardEnd: () => {
							e.roleId != CLASS_UNLOCK_ROLE_ID || mgrGame.isContractUnlock(CLASS_UNLOCK_CONTRACT_IDX) || PanelClassRoleGet.openPanel(null, {
								bReward: !0
							});
							let t = BaseFacade.mDrop.makeDrop("30");
							mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_HAPPY_TO_OUTSIDE", {
								seatIdx: this.context.seatIdx
							})
						}
					})
				}
			else {
				GameStatistics.statisOnStageEnd(13101, 0, 0), GameStatistics.statisCommonEvent(2538), mgrAlert.openPanelLoading(UI_NAME.PanelClassOutSide, {
					crySeatIdx: this.context.seatIdx
				});
				let t = BaseFacade.mDrop.makeDrop("30");
				mgrAlert.addAndAlertItems(t, 999), _G.sendMsg("STUDENT_CRY_TO_OUTSIDE", {
					seatIdx: this.context.seatIdx
				})
			}
			mgrSdk.stopRecordVideo(), mgrSdk.isVideoShareable && mgrAlert.openPanelLoading(UI_NAME.PanelShare, {
				shareIdx: 11,
				desc: "快让朋友们看看你的课堂趣事吧！",
				descWithoutShare: "彩妆课堂真有趣！"
			}), this.close(!0)
		}
		on_click_buttonChange() {
			GameStatistics.statisCommonEvent(2540), mgrAlert.openPanelLoading(UI_NAME.PanelClassTeacherChangeScore, {
				score: parseInt(this.labelScore.text),
				fOnChange: t => {
					this.buttonChange.node.visible = !1, this.nodeLayoutBtns.updateLayout(.2, !0), this.labelScoreChange.visible = !0, this.labelScoreChange.text = t.toString(), cc.tween(this.labelScore).to(.3, cc.PROP.SCALE0).call(() => {
						this.labelScore.text = t.toString(), cc.tween(this.labelScoreChange).to(.4, {
							x: this.labelScore.x,
							y: this.labelScore.y
						}).to(.2, cc.PROP.SCALE1_3).delay(.2).to(.2, cc.PROP.SCALE1).start()
					}).start();
					let e = mgrClassRoom.calcRating(t);
					this.rating = e, this.refreshLabel()
				}
			}, () => {
				this.labelScoreChange.text = this.labelScore.text, this.labelScoreChange.pos(253, 247), this.labelScore.scale(1, 1)
			})
		}
	}
	class PanelCoinGift extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelCoinGift.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_superNode: "Laya.Sprite",
				cc_spriteCoinMore: "Laya.Sprite",
				cc_superCount: "Laya.Label",
				cc_buttonSuper: "UIButton",
				cc_superPrice: "Laya.Text",
				cc_freeNode: "Laya.Sprite",
				cc_spriteCoinVoid: "Laya.Sprite",
				cc_spriteXzBuy: "Laya.Sprite",
				cc_freeCount: "Laya.Label",
				cc_buttonFree: "UIButton",
				cc_spriteButtonFreeAdFlag: "Laya.Sprite",
				cc_textButtonFreeText: "Laya.Label",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_gift")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteCoinMore, "pnl_gift_03.png"), mgrI18n.trySetI18nImage(this.spriteCoinVoid, "pnl_gift_01.png"), mgrI18n.trySetI18nImage(this.spriteXzBuy, "pnl_gift_05.png"), mgrAdv.getActive("shop_item") ? (mgrAdv.statisVideoShow("shop_item"), this.freeCoinCount = mgrOffline.offlinePerSecond * db.game_cnf.free_coin_time | 0, this.freeCount.text = "*" + GameUtility.convertCoinString(this.freeCoinCount, !1), UiHelper.playBreathe(this.buttonFree.node), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()) : (this.freeNode.visible = !1, this.superNode.y = 0), this.superCoinCount = mgrOffline.offlinePerSecond * db.game_cnf.diamond_coin_time | 0, this.superCount.text = "*" + GameUtility.convertCoinString(this.superCoinCount, !1);
			let t = db.get_pay_db(PAY_ID.COIN_GIFT);
			this.superCost = t.costCount, this.superPrice.text = `${this.superCost}`, Mathf.randomEnable(db.cop.ad_flag_hide_ratios[0] || 0) ? (this.spriteButtonFreeAdFlag.visible = !1, this.textButtonFreeText.x -= this.spriteButtonFreeAdFlag.width / 2) : this.spriteButtonFreeAdFlag.visible = !0, this.textButtonFreeText.text = mgrI18n.getText("panelCoinGift.1")
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			if ("shop_item" == t.advName && "coin" == t.params) {
				this.close();
				let t = {
					itemId: "1001",
					count: this.freeCoinCount
				};
				mgrAlert.addAndAlert(t, 29)
			}
		}
		on_click_buttonSuper() {
			if (BaseFacade.mItem.subItem("1000", this.superCost, 28)) {
				this.close();
				let t = {
					itemId: "1001",
					count: this.superCoinCount
				};
				mgrAlert.addAndAlert(t, 28)
			} else mgrAlert.alertNotEnough("1000")
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonFree() {
			mgrAdv.statisVideoClick("shop_item"), mgrAdv.dispatchAdv("shop_item", "coin", !0) || mgrAlert.alertText("广告拉取中，稍后再试")
		}
	}
	class PanelColorEggGet extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelColorEggGet.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_spriteTitle: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_spriteLight: "Laya.Sprite",
				cc_labelTime: "Laya.Label",
				cc_buttonAdvGet: "UIButton",
				cc_buttonGet: "UIButton"
			}
		}
		buildUi() {
			mgrAdv.checkActive("get_shoe_color_egg") ? (mgrI18n.trySetI18nImage(this.spriteTitle, "pnl_shoe_color_eggs_02.png"), mgrAdv.statisVideoShow("get_shoe_color_egg"), cc.tween(this.spriteLight).repeatForever(cc.tween().by(6, {
				rotation: 360
			})).start(), UiHelper.playBreathe(this.buttonAdvGet.node), Laya.timer.loop(1e3, this, this.updateTime), this.updateTime(), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()) : this.close()
		}
		dispose() {
			this.stopProcMsg(), Laya.timer.clear(this, this.updateTime), super.dispose()
		}
		updateTime() {
			let t = this.context,
				e = mgrColorEggs.getLeftTime(t);
			e > 0 ? (this.labelTime.text = Tools.formatSimpleTime(e) + mgrI18n.getText("panelColorEggGet.1"), this.buttonAdvGet.node.visible = !0, this.buttonGet.node.visible = !1) : (this.buttonAdvGet.node.visible = !1, this.buttonGet.node.visible = !0, this.labelTime.visible = !1, UiHelper.playBreathe(this.buttonGet.node), Laya.timer.clear(this, this.updateTime))
		}
		onMsgAdvShowSuc(t) {
			"get_shoe_color_egg" == t.advName && (this.close(), GameStatistics.statisCommonEvent(2606 + parseInt(this.context) - 6010, 1), mgrColorEggs.commit(this.context, !0))
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonAdvGet() {
			mgrAdv.statisVideoClick("get_shoe_color_egg"), mgrAdv.dispatchAdv("get_shoe_color_egg", null, !0)
		}
		on_click_buttonGet() {
			this.close(), GameStatistics.statisCommonEvent(2606 + parseInt(this.context) - 6010, 2), mgrColorEggs.commit(this.context)
		}
	}
	class PanelCpBooks extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelCpBooks.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteIcon: "Laya.Sprite",
				cc_listNpc: "ReuseScrollList",
				cc_contentNpc: "Laya.Sprite",
				cc_listCp: "ReuseScrollList",
				cc_contentCp: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_toggleNpc: "UIToggle",
				cc_toggleCp: "UIToggle"
			}
		}
		buildUi() {
			this.fillNpc(), this.fillCp(), this.listCp.node.alpha = 0, this.listCp.node.visible = !1, mgrI18n.trySetI18nImage(this.spriteIcon, "pnl_cp_test_preview_02.png")
		}
		fillNpc() {
			let t = db.get_cp_npc_map();
			Tools.forEachMap(t, (t, e) => {
				let a = this.contentNpc.getChildByName(t);
				if (a) {
					let i = mgrCp.isNpcLock(t),
						s = UiHelper.getChild(a, "icon");
					s.skin = e.bookIcon, s.gray = i, UiHelper.getChild(a, "nameBg/name").text = mgrI18n.getText(e.tlite), UiHelper.getChild(a, "lock").setVisible(i)
				}
			})
		}
		fillCp() {
			let t = db.get_cp_npc_fixed_map();
			Tools.forEachMap(t, (t, e) => {
				let a = this.contentCp.getChildByName(t);
				if (a) {
					let i = mgrCp.isCpLock(t),
						s = UiHelper.getChild(a, "icon");
					s.skin = e.bookIcon, s.gray = i, UiHelper.getChild(a, "nameBg/name").text = mgrI18n.getText(e.tlite1) + mgrI18n.getText(e.tlite2), UiHelper.getChild(a, "lock").setVisible(i)
				}
			})
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_toggleNpc() {
			cc.tween(this.listNpc.node, !0).show().to(.3, cc.PROP.ALPHA1).start(), cc.tween(this.listCp.node, !0).to(.3, cc.PROP.ALPHA0).hide().start()
		}
		on_click_toggleCp() {
			cc.tween(this.listCp.node, !0).show().to(.3, cc.PROP.ALPHA1).start(), cc.tween(this.listNpc.node, !0).to(.3, cc.PROP.ALPHA0).hide().start()
		}
	}
	class PanelCpTest extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelCpTest.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_nodeBar: "Laya.Box",
				cc_barMask: "UIBarMask",
				cc_nodeSelectBox: "Laya.Sprite",
				cc_labelTips: "Laya.Label",
				cc_nodeItem0: "Laya.Box",
				cc_button0: "UIButton",
				cc_button1: "UIButton",
				cc_button2: "UIButton",
				cc_nodeItem1: "Laya.Box",
				cc_button3: "UIButton",
				cc_button4: "UIButton",
				cc_button5: "UIButton",
				cc_nodeItem2: "Laya.Box",
				cc_button6: "UIButton",
				cc_button7: "UIButton",
				cc_button8: "UIButton",
				cc_nodeAnimations: "Laya.Box",
				cc_buttonAnim0: "UIButton",
				cc_buttonAnim1: "UIButton",
				cc_buttonAnim2: "UIButton",
				cc_buttonAnim3: "UIButton",
				cc_buttonAnim4: "UIButton",
				cc_nodeSelected: "Laya.Sprite",
				cc_buttonCost: "UIButton",
				cc_buttonOk: "UIButton",
				cc_buttonGuide: "UIButton",
				cc_labelDebugInputNpcId: "Laya.TextInput",
				cc_labelDebugInputAnimIdx: "Laya.TextInput",
				cc_buttonDebugCp: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.finishTime = 0, this.itemIdArr = [], this.cpTestResult = null, this.cpTestResultNpc = null, this.resultData = null, this.resultDataNpc = null, this.ANIM_IDX_TO_DATA = {
				0: {
					bRotate: !0,
					cameraX: .02,
					cameraY: 1,
					cameraZ: 3.47,
					cameraNodeEulerX: 0,
					cameraNodeEulerY: -4
				},
				1: {
					bRotate: !1,
					cameraX: .04,
					cameraY: 1.08,
					cameraZ: 2.29,
					cameraNodeEulerX: 0,
					cameraNodeEulerY: -10
				},
				2: {
					bRotate: !1,
					cameraX: .1,
					cameraY: 1.46,
					cameraZ: 1.3,
					cameraNodeEulerX: -5,
					cameraNodeEulerY: -5
				},
				3: {
					bRotate: !1,
					cameraX: .16,
					cameraY: 1.36,
					cameraZ: 1.59,
					cameraNodeEulerX: -16,
					cameraNodeEulerY: 15
				},
				4: {
					bRotate: !1,
					cameraX: .1,
					cameraY: 1.08,
					cameraZ: 2.37,
					cameraNodeEulerX: -9,
					cameraNodeEulerY: 1
				},
				5: {
					bRotate: !1,
					cameraX: .08,
					cameraY: .96,
					cameraZ: 2.59,
					cameraNodeEulerX: -4,
					cameraNodeEulerY: 0
				},
				6: {
					bRotate: !1,
					cameraX: .04,
					cameraY: 1.1,
					cameraZ: 2.1,
					cameraNodeEulerX: -9,
					cameraNodeEulerY: -15
				},
				7: {
					bRotate: !1,
					cameraX: .04,
					cameraY: 1.02,
					cameraZ: 3.55,
					cameraNodeEulerX: -9,
					cameraNodeEulerY: 1
				},
				8: {
					bRotate: !1,
					cameraX: -.02,
					cameraY: 1.04,
					cameraZ: 2.65,
					cameraNodeEulerX: -7,
					cameraNodeEulerY: -7
				},
				9: {
					bRotate: !1,
					cameraX: .04,
					cameraY: 1.38,
					cameraZ: 1.56,
					cameraNodeEulerX: -6,
					cameraNodeEulerY: -5
				}
			}, this.instOrBanner = new AdvInstOrBanner("enter_cp_test", "banner_cp_test"), this.bAction = !1, this.bShowSuc = !1, this.bShowed = !1
		}
		addPreloadRes(t) {
			mgrPart.addPartResList(mgrPart.partsWear, t, !0), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.MAIN_IDLE).path), t.addModel(db.get_effect_db("104").res), t.addModel(db.get_effect_db("160").res), t.addModel(db.get_effect_db("172").res), t.addModel(db.get_effect_db("173").res)
		}
		buildUi() {
			this.init3D(), this.topLeftNode.x = -120, this.nodeBar.x = 450, this.nodeSelectBox.scaleY = 0, this.labelTips.alpha = 0, this.setUiVisible(!0, 1), this.barMask.style = UIBarMask.STYLE_VERTICAL, this.barMask.progress = 0;
			for (let t = 0; t < 5; t++) {
				let e = this["buttonAnim" + t.toString()],
					a = db.get_cp_animations(t);
				if (e && a) {
					let t = e.node.getChildAt(0);
					t && a.iconUrl && t.loadImage(a.iconUrl)
				}
				e.node.visible = !1
			}
			for (let t = 0; t < 9; t++) {
				let e = this["button" + t.toString()],
					a = db.get_cp_items(t);
				if (e && a) {
					let t = e.node.getChildAt(0);
					t && a.iconUrl && t.loadImage(a.iconUrl)
				}
				e.node.visible = !1
			}
			this.labelTips.text = mgrI18n.getText("panelCpTest.1"), this.clickAnim(0), this.labelDebugInputAnimIdx.visible = !1, this.labelDebugInputNpcId.visible = !1, this.buttonDebugCp.node.visible = !1, mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCPTEST_BUTTONGUIDE, this.buttonGuide.node), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_CP_TEST), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				[BASE_MSG.SDK_SHARE_SUC]: this.onMsgShareSuc.bind(this),
				[BASE_MSG.SDK_SHARE_FAIL]: this.onMsgShareFail.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onMsgVideoShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_FAIL]: this.onMsgShareFail.bind(this),
				[BASE_MSG.SYS_KEY_DOWN]: this.onMsgKeyDown.bind(this)
			}), this.startProcMsg(), mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13005), this.addEffect("192").play()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner && this.instOrBanner.dispose(), this.timer1 && this.timer1.stop(), this.timer2 && this.timer2.stop(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELCPTEST_BUTTONGUIDE), _G.sendMsg("GUIDE_FORCE_CLOSE"), this.showAvatar && this.showAvatar.destroy(), this.roleAvatar && this.roleAvatar.destroy(), this.npcBodyModel && this.npcBodyModel.dispose(), this.npcFaceModel && this.npcFaceModel.dispose(), this.npcHairModel && this.npcHairModel.dispose(), this.playerNpcIntro && this.playerNpcIntro.dispose(), this.playerNpcIdle && this.playerNpcIdle.dispose(), this.effectFaZhen && _G.poolManager.put(this.effectFaZhen), this.effectNpc && _G.poolManager.put(this.effectNpc), GameStatistics.statisOnStageEnd(13005), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			"cp_test_show" == t.advName && this.enterResult()
		}
		onMsgShareSuc() {}
		onMsgShareFail() {}
		onMsgVideoShareSuc() {}
		onMsgKeyDown(t) {
			let e = Laya.Keyboard;
			switch (t.keyCode) {
				case e.Q:
					this.cameraNode.transform.localRotationEulerY += 1;
					break;
				case e.E:
					this.cameraNode.transform.localRotationEulerY -= 1;
					break;
				case e.R:
					this.cameraNode.transform.localRotationEulerX += 1;
					break;
				case e.T:
					this.cameraNode.transform.localRotationEulerX -= 1;
					break;
				case e.F:
					this.camera.transform.localPositionZ += .01;
					break;
				case e.G:
					this.camera.transform.localPositionZ -= .01;
					break;
				case e.P:
					console.log("cameraNode localRotationEulerX = ", this.cameraNode.transform.localRotationEulerX), console.log("cameraNode localRotationEulerY = ", this.cameraNode.transform.localRotationEulerY)
			}
		}
		init3D() {
			this.createScene3DBack(1, 45);
			let t = this.scene3DBack.addChild(new Laya.Sprite3D);
			t.addChild(this.camera), this.cameraNode = t, this.camera.transform.localPosition = new Laya.Vector3(.02, .7, 3.04), this.cameraNode.transform.localRotationEuler = new Laya.Vector3(-11, 0, 0), this.showAvatar = new RoleAvatar(mgrPart.partsWear), this.showAvatar.transform.localPosition = new Laya.Vector3(0, 0, 0), this.showAvatar.transform.localRotationEuler = new Laya.Vector3(0, 0, 0), this.scene3DBack.addChild(this.showAvatar), this.showAvatar.playIdle(), this.showAvatar.playZaYang(), this.showAvatar.active = !0, this.buttonOk.node.visible = !1, this.buttonCost.node.visible = !1, this.effectBar = this.getEffect("173"), this.effectBar.followTarget(this.nodeBar, this.cameraEffect, 0, 30), this.effectBar.play()
		}
		setUiVisible(t, e) {
			this._uiVisible !== t && (this._uiVisible = t, t ? this.scheduleOnce(e, () => {
				cc.tween(this.topLeftNode).to(.3, {
					x: 0
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.nodeBar).to(.3, {
					x: 220
				}, cc.OPTION.BACK_OUT).start(), cc.tween(this.nodeSelectBox).to(.3, {
					scaleY: 1
				}, cc.OPTION.BACK_OUT).call(() => {
					this.destroyed || (cc.tween(this.labelTips).to(.3, cc.PROP.ALPHA1).start(), this.refreshUi())
				}).start()
			}) : this.scheduleOnce(e, () => {
				cc.tween(this.topLeftNode).to(.3, {
					x: -120
				}, cc.OPTION.SINE_OUT).start(), cc.tween(this.nodeBar).to(.3, {
					x: 450
				}, cc.OPTION.SINE_OUT).start()
			}))
		}
		clickItems(t) {
			if (this.bAction) return;
			if (this.itemIdArr.length >= 3) return;
			this.context && 2 == this.context.index && GameStatistics.statisCommonEvent(2542 + this.itemIdArr.length), GameStatistics.statisCommonEvent(2302, t), mgrGuide.sendMsgKey("CP_CLICK_ITEM"), this.bAction = !0;
			let e = () => {
				this.itemIdArr.push(t), this.barMask.progress = this.itemIdArr.length / 3, this.refreshUi(), this.bAction = !1, 3 == this.itemIdArr.length && (this.context && 1 == this.context.index ? this.cpTestResult = this.calcNpc() : this.cpTestResultNpc = this.calcNpcFixed())
			};
			for (let e = 0; e < 3; e++) {
				let a = this["button" + (3 * Math.floor(t / 3) + e).toString()];
				cc.tween(a.node).to(.2, {
					alpha: 0,
					scaleX: 0,
					scaleY: 0
				}).start()
			}
			this.showAvatar.playAnimation(MODEL_ANIM.MAIN_HUDONG3, !1, MODEL_ANIM.MAIN_IDLE);
			let a = this["button" + t.toString()],
				i = db.get_cp_items(t);
			if (a && i && i.iconUrl) {
				let t = UiHelper.getSelfGlobalPos(a.node),
					s = UiHelper.getSelfGlobalPos(this.nodeBar);
				mgrAlert.openResWait(i.iconUrl, RES_TYPE.IMAGE, () => {
					this.destroyed || UiHelper.playImageScaleAndJump(i.iconUrl, t, s, null, () => {
						this.destroyed || (mgrAlert.playParticleEffect("104", s, 1, .5), e())
					}).effect.setScale(1.5, 1.5, 1.5)
				})
			} else e()
		}
		refreshUi() {
			let t = !1;
			for (let e = 0; e < 3; e++) {
				let a = this["nodeItem" + e.toString()];
				if (null != this.itemIdArr[e] || t) a.visible = !1;
				else {
					a.visible = !0;
					let i = 0;
					for (let t = 0; t < 3; t++) {
						let a = this["button" + (3 * e + t).toString()];
						a.node.visible = !0, a.node.scale(0, 0), cc.tween(a.node).delay(i).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), i += .2
					}
					t = !0
				}
			}
			if (this.nodeAnimations.visible = !1, this.itemIdArr.length >= 3) {
				this.instOrBanner && this.instOrBanner.onFocus(!1), mgrGuide.sendMsgKey("CP_SHOW_ANIM_BTN");
				let t = 0;
				cc.tween(this.labelTips).to(.3, cc.PROP.ALPHA0).call(() => {
					this.destroyed || (this.labelTips.text = mgrI18n.getText("panelCpTest.3"), cc.tween(this.labelTips).to(.3, cc.PROP.ALPHA1).start())
				}).start(), this.buttonOk.node.x = 0, 1 == db.cop.b_show_adv_cost && (this.buttonCost.node.x = -120, this.buttonOk.node.x = 120, this.buttonCost.node.visible = !0, this.buttonCost.node.scale(0, 0), cc.tween(this.buttonCost.node).delay(t).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()), this.buttonOk.node.visible = !0, this.buttonOk.node.scale(0, 0), cc.tween(this.buttonOk.node).delay(t).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).call(() => {
					this.destroyed || (cc.clearTween(this.buttonOk.node), UiHelper.playRotCycle(this.buttonOk.node))
				}).start(), cc.clearTween(this.nodeBar), this.nodeBar._orgPosY = this.nodeBar.y, cc.tween(this.nodeBar).repeatForever(cc.tween().to(.3, {
					y: this.nodeBar._orgPosY + 5
				}).to(.6, {
					y: this.nodeBar._orgPosY - 5
				}).to(.3, {
					y: this.nodeBar._orgPosY
				})).start(), mgrAdv.statisVideoShow("cp_test_show")
			}
		}
		calcNpc() {
			let t = null,
				e = db.get_cp_test_map();
			for (let a in e) {
				let i = e[a];
				if (i && mgrRoleTest.isArrDataEqual(this.itemIdArr, i.selectedItemIds)) {
					t = i;
					break
				}
			}
			return console.log("npc测试结果", t), t
		}
		calcNpcFixed() {
			let t = null,
				e = db.get_cp_test_npc_map();
			for (let a in e) {
				let i = e[a];
				if (i && mgrRoleTest.isArrDataEqual(this.itemIdArr, i.selectedItemIds)) {
					t = i;
					break
				}
			}
			return console.log("npc测试结果", t), t
		}
		clickAnim(t) {
			if (this.selectedAnimIdx == t) return;
			this.selectedAnimIdx = t;
			let e = this["buttonAnim" + this.selectedAnimIdx.toString()];
			e && (e.node.addChild(this.nodeSelected), this.nodeSelected.pos(e.node.width / 2, e.node.height / 2))
		}
		calcResult() {
			if (this.showAvatar.playAnimation(MODEL_ANIM.MAIN_HUDONG2, !1, MODEL_ANIM.MAIN_IDLE), this.resultData) return;
			let t = [];
			for (let e = 0; e < this.cpTestResult.npcIds.length; e++) {
				let a = this.cpTestResult.npcIds[e],
					i = db.get_cp_npc(a);
				i && mgrGame.contractIndex != i.matchContractIndex && t.push(a)
			}
			console.log("过滤后的随机池", t);
			let e = t[Mathf.random(t.length) - 1],
				a = db.get_cp_npc(e);
			if (!a) return;
			let i = [5, 6, 7, 8],
				s = i[Mathf.random(i.length) - 1],
				n = {
					npcId: e,
					npcBodyModelId: a.bodyModelId,
					npcFaceModelId: a.faceModelId,
					npcHairModelId: a.hairModelId,
					effectId: a.effectId,
					npcBodyAnimIds: [a.npcBodyAnimationIds[0][s], a.npcBodyAnimationIds[1][s]],
					npcFaceAnimIds: [a.npcFaceAnimationIds[0][s], a.npcFaceAnimationIds[1][s]],
					roleBodyAnimIds: [a.roleBodyAnimationIds[0][s], a.roleBodyAnimationIds[1][s]],
					roleFaceAnimIds: [a.roleFaceAnimationIds[0][s], a.roleFaceAnimationIds[1][s]],
					bRotate: this.ANIM_IDX_TO_DATA[s].bRotate,
					cameraX: this.ANIM_IDX_TO_DATA[s].cameraX,
					cameraY: this.ANIM_IDX_TO_DATA[s].cameraY,
					cameraZ: this.ANIM_IDX_TO_DATA[s].cameraZ,
					cameraNodeEulerX: this.ANIM_IDX_TO_DATA[s].cameraNodeEulerX,
					cameraNodeEulerY: this.ANIM_IDX_TO_DATA[s].cameraNodeEulerY
				};
			this.resultData = n, console.log("互动结果", this.resultData), this.startLoad()
		}
		calcResultNpc() {
			if (this.showAvatar.playAnimation(MODEL_ANIM.MAIN_HUDONG2, !1, MODEL_ANIM.MAIN_IDLE), this.resultDataNpc) return;
			let t = this.cpTestResultNpc.fixedNpcIds;
			console.log("过滤后的随机池", t);
			let e = t[Mathf.random(t.length) - 1],
				a = db.get_cp_npc_fixed(e);
			if (!a) return;
			let i = [0, 1, 2, 3, 4, 9],
				s = i[Mathf.random(i.length) - 1],
				n = {
					npcId: e,
					nanBodyModelId: a.nanBodyModelId,
					nanFaceModelId: a.nanFaceModelId,
					nanHairModelId: a.nanHairModelId,
					nvBodyModelId: a.nvBodyModelId,
					nvFaceModelId: a.nvFaceModelId,
					nvHairModelId: a.nvHairModelId,
					effectId: a.effectId,
					nanBodyAnimIds: [a.nanBodyAnimationIds[0][s], a.nanBodyAnimationIds[1][s]],
					nanFaceAnimIds: [a.nanFaceAnimationIds[0][s], a.nanFaceAnimationIds[1][s]],
					nvBodyAnimIds: [a.nvBodyAnimationIds[0][s], a.nvBodyAnimationIds[1][s]],
					nvFaceAnimIds: [a.nvFaceAnimationIds[0][s], a.nvFaceAnimationIds[1][s]],
					bRotate: this.ANIM_IDX_TO_DATA[s].bRotate,
					cameraX: this.ANIM_IDX_TO_DATA[s].cameraX,
					cameraY: this.ANIM_IDX_TO_DATA[s].cameraY,
					cameraZ: this.ANIM_IDX_TO_DATA[s].cameraZ,
					cameraNodeEulerX: this.ANIM_IDX_TO_DATA[s].cameraNodeEulerX,
					cameraNodeEulerY: this.ANIM_IDX_TO_DATA[s].cameraNodeEulerY
				};
			this.resultDataNpc = n, console.log("互动结果", this.resultDataNpc), this.startLoad()
		}
		enterResult() {
			BaseFacade.mGoal.commit(ACTION_ID.CP_TEST, 1), mgrCp.addTestCount(), console.log("cp结算", this.resultDataNpc, this.resultData), this.resultDataNpc ? mgrCp.unlockCp(this.resultDataNpc.npcId) : this.resultData && mgrCp.unlockNpc(this.resultData.npcId), this.buttonOk.interactable = !1, this.buttonCost.interactable = !1, cc.tween(this.nodeSelectBox).to(.3, cc.PROP.ALPHA0).call(() => {
				this.destroyed || (this.nodeSelectBox.visible = !1)
			}).start(), cc.clearTween(this.buttonOk.node), cc.tween(this.buttonOk.node).to(.3, cc.PROP.ALPHA0).call(() => {
				this.destroyed || (this.buttonOk.node.visible = !1)
			}).start(), cc.clearTween(this.buttonCost.node), cc.tween(this.buttonCost.node).to(.3, cc.PROP.ALPHA0).call(() => {
				this.destroyed || (this.buttonCost.node.visible = !1)
			}).start(), cc.clearTween(this.nodeBar), cc.tween(this.nodeBar).to(.5, {
				x: 0,
				y: -50
			}).call(() => {
				if (this.destroyed) return;
				let t = UiHelper.getSelfGlobalPos(this.nodeBar);
				mgrAlert.playParticleEffect("172", t, 1, .5), Timer.callLater(.3, () => {
					this.showAvatar.active = !1, this.nodeBar.visible = !1, this.effectBar.hide(), mgrAlert.playParticleEffect("160", {
						x: _G.canvasWidth / 2,
						y: _G.canvasHeight / 2
					}, 1, .5), Timer.callLater(1, () => {
						this.bShowSuc = !0, this.resLoader.isLoaded && this.showAnim()
					}, this)
				}, this)
			}).start()
		}
		startLoad() {
			this.resLoader = new ResLoader, this.resultData ? (mgrPart.addPartResList(mgrPart.partsWear, this.resLoader), this.resLoader.addModel(db.get_model_db(this.resultData.npcBodyModelId).resPath), this.resLoader.addModel(db.get_model_db(this.resultData.npcFaceModelId).resPath), this.resLoader.addModel(db.get_model_db(this.resultData.npcHairModelId).resPath), this.resLoader.addModel(db.get_effect_db(this.resultData.effectId).res), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.roleBodyAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.roleBodyAnimIds[1]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.roleFaceAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.roleFaceAnimIds[1]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.npcBodyAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.npcBodyAnimIds[1]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.npcFaceAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultData.npcFaceAnimIds[1]).path)) : this.resultDataNpc && (this.resLoader.addModel(db.get_model_db(this.resultDataNpc.nanBodyModelId).resPath), this.resLoader.addModel(db.get_model_db(this.resultDataNpc.nanFaceModelId).resPath), this.resLoader.addModel(db.get_model_db(this.resultDataNpc.nanHairModelId).resPath), this.resLoader.addModel(db.get_model_db(this.resultDataNpc.nvBodyModelId).resPath), this.resLoader.addModel(db.get_model_db(this.resultDataNpc.nvFaceModelId).resPath), this.resLoader.addModel(db.get_model_db(this.resultDataNpc.nvHairModelId).resPath), this.resLoader.addModel(db.get_effect_db(this.resultDataNpc.effectId).res), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nanBodyAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nanBodyAnimIds[1]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nanFaceAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nanFaceAnimIds[1]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nvBodyAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nvBodyAnimIds[1]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nvFaceAnimIds[0]).path), this.resLoader.addAnimationClip(db.get_animation_db(this.resultDataNpc.nvFaceAnimIds[1]).path)), this.resLoader.addModel(db.get_effect_db("171").res), mgrAlert.openWait(this.resLoader, () => {
				this.bShowSuc && this.showAnim()
			})
		}
		showAnim() {
			if (!this.bShowed) {
				if (this.bShowed = !0, PanelDialogCat.tryOpenPanel(5), this.createRoleAndNpc(), this.resultData) {
					this.roleAvatar && (this.roleAvatar.active = !0, this.roleAvatar.playAnimations(this.resultData.roleBodyAnimIds, !0, 0), this.roleAvatar.playFaceAnims(this.resultData.roleFaceAnimIds[0], this.resultData.roleFaceAnimIds[1], 0, !0)), this.npcBodyModel && this.npcFaceModel && this.npcHairModel && (this.npcBodyModel.show(), this.npcFaceModel.show(), this.npcHairModel.show(), this.playerNpcIntro = new AnimatorFixedPlayer, this.playerNpcIntro.addModelAnim(this.npcBodyModel, this.resultData.npcBodyAnimIds[0]), this.playerNpcIntro.addModelAnim(this.npcFaceModel, this.resultData.npcFaceAnimIds[0]), this.playerNpcIntro.addTimeCallback(1, () => {
						this.playerNpcIdle = new AnimatorFixedPlayer, this.playerNpcIdle.addModelAnim(this.npcBodyModel, this.resultData.npcBodyAnimIds[1]), this.playerNpcIdle.addModelAnim(this.npcFaceModel, this.resultData.npcFaceAnimIds[1]), this.playerNpcIdle.play(!0)
					}), this.playerNpcIntro.play()), this.cameraNode.transform.localRotationEulerX = this.resultData.cameraNodeEulerX, this.cameraNode.transform.localRotationEulerY = this.resultData.cameraNodeEulerY, this.resultData.bRotate && Timer.callLater(1, () => {
						cc.tween(this.cameraNode.transform).by(15, {
							localRotationEulerY: -360
						}).repeatForever().start()
					}, this), this.camera.transform.localPositionX = this.resultData.cameraX, this.camera.transform.localPositionY = this.resultData.cameraY, cc.tween(this.camera.transform).to(1, {
						localPositionZ: this.resultData.cameraZ
					}).start();
					let t = _G.poolManager.get(Particle, this.resultData.effectId);
					t.setParent(this.scene3DBack), t.play(), this.effectNpc = t
				} else if (this.resultDataNpc) {
					this.nanBodyModel && this.nanFaceModel && this.nanHairModel && (this.nanBodyModel.show(), this.nanFaceModel.show(), this.nanHairModel.show(), this.playerNanIntro = new AnimatorFixedPlayer, this.playerNanIntro.addModelAnim(this.nanBodyModel, this.resultDataNpc.nanBodyAnimIds[0]), this.playerNanIntro.addModelAnim(this.nanFaceModel, this.resultDataNpc.nanFaceAnimIds[0]), this.playerNanIntro.addTimeCallback(1, () => {
						this.playerNanIdle = new AnimatorFixedPlayer, this.playerNanIdle.addModelAnim(this.nanBodyModel, this.resultDataNpc.nanBodyAnimIds[1]), this.playerNanIdle.addModelAnim(this.nanFaceModel, this.resultDataNpc.nanFaceAnimIds[1]), this.playerNanIdle.play(!0)
					}), this.playerNanIntro.play()), this.nvBodyModel && this.nvFaceModel && this.nvHairModel && (this.nvBodyModel.show(), this.nvFaceModel.show(), this.nvHairModel.show(), this.playerNvIntro = new AnimatorFixedPlayer, this.playerNvIntro.addModelAnim(this.nvBodyModel, this.resultDataNpc.nvBodyAnimIds[0]), this.playerNvIntro.addModelAnim(this.nvFaceModel, this.resultDataNpc.nvFaceAnimIds[0]), this.playerNvIntro.addTimeCallback(1, () => {
						this.playerNvIdle = new AnimatorFixedPlayer, this.playerNvIdle.addModelAnim(this.nvBodyModel, this.resultDataNpc.nvBodyAnimIds[1]), this.playerNvIdle.addModelAnim(this.nvFaceModel, this.resultDataNpc.nvFaceAnimIds[1]), this.playerNvIdle.play(!0)
					}), this.playerNvIntro.play()), this.cameraNode.transform.localRotationEulerX = this.resultDataNpc.cameraNodeEulerX, this.cameraNode.transform.localRotationEulerY = this.resultDataNpc.cameraNodeEulerY, this.resultDataNpc.bRotate && Timer.callLater(1, () => {
						cc.tween(this.cameraNode.transform).by(15, {
							localRotationEulerY: -360
						}).repeatForever().start()
					}, this), this.camera.transform.localPositionX = this.resultDataNpc.cameraX, this.camera.transform.localPositionY = this.resultDataNpc.cameraY, cc.tween(this.camera.transform).to(1, {
						localPositionZ: this.resultDataNpc.cameraZ
					}).start();
					let t = _G.poolManager.get(Particle, this.resultDataNpc.effectId);
					t.setParent(this.scene3DBack), t.play()
				}
				this.effectFaZhen || (this.effectFaZhen = _G.poolManager.get(Particle, "171"), this.effectFaZhen.setParent(this.scene3DBack)), this.effectFaZhen.play(), this.finishTime = Timer.time + 8, this.timer1 = Timer.callLater(6, t => {
					this.destroyed || mgrSdk.stopRecordVideo()
				}, this), this.timer2 = Timer.callLater(8, t => {
					this.destroyed || (this.finishTime = 0, mgrSdk.isVideoShareable ? mgrAlert.openPanelLoading(UI_NAME.PanelShare, {
						shareIdx: 10,
						desc: "他们是你心中的最佳拍档吗？快让朋友们来看看吧！",
						descWithoutShare: "恭喜！找到了你心中的最佳拍档！"
					}) : mgrAlert.alertDialog(mgrI18n.getText("panelCpTest.4")))
				}, this)
			}
		}
		createRoleAndNpc() {
			if (this.camera.transform.localPosition = new Laya.Vector3(.02, .7, 3.04), this.cameraNode.transform.localRotationEuler = new Laya.Vector3(-11, 0, 0), this.resultData) {
				this.roleAvatar = new RoleAvatar(mgrPart.partsWear), this.roleAvatar.transform.localPosition = new Laya.Vector3(0, 0, 0), this.roleAvatar.transform.localRotationEuler = new Laya.Vector3(0, 0, 0), this.scene3DBack.addChild(this.roleAvatar), this.roleAvatar.playIdle(), this.roleAvatar.playZaYang(), this.roleAvatar.active = !1, this.npcBodyModel = new GModel(this.resultData.npcBodyModelId), this.npcBodyModel.create(), this.npcBodyModel.initAnimator(), this.npcBodyModel.initPart(), this.npcBodyModel.setParent(this.scene3DBack), this.npcBodyModel.hide();
				let t = this.npcBodyModel.findChild("toufa_guadian");
				this.npcFaceModel = new GModel(this.resultData.npcFaceModelId), this.npcFaceModel.create(), this.npcFaceModel.initAnimator(), this.npcFaceModel.initPart(), this.npcFaceModel.setParent(t), this.npcFaceModel.hide(), this.npcFaceModel.setPosition(0, 0, 0), this.npcFaceModel.setRotation(0, 0, 0), this.npcHairModel = new GModel(this.resultData.npcHairModelId), this.npcHairModel.create(), this.npcHairModel.initPart(), this.npcHairModel.setParent(t), this.npcHairModel.hide()
			} else if (this.resultDataNpc) {
				this.nanBodyModel = new GModel(this.resultDataNpc.nanBodyModelId), this.nanBodyModel.create(), this.nanBodyModel.initAnimator(), this.nanBodyModel.initPart(), this.nanBodyModel.setParent(this.scene3DBack), this.nanBodyModel.hide();
				let t = this.nanBodyModel.findChild("toufa_guadian");
				this.nanFaceModel = new GModel(this.resultDataNpc.nanFaceModelId), this.nanFaceModel.create(), this.nanFaceModel.initAnimator(), this.nanFaceModel.initPart(), this.nanFaceModel.setParent(t), this.nanFaceModel.hide(), this.nanFaceModel.setPosition(0, 0, 0), this.nanFaceModel.setRotation(0, 0, 0), this.nanHairModel = new GModel(this.resultDataNpc.nanHairModelId), this.nanHairModel.create(), this.nanHairModel.initPart(), this.nanHairModel.setParent(t), this.nanHairModel.hide(), this.nvBodyModel = new GModel(this.resultDataNpc.nvBodyModelId), this.nvBodyModel.create(), this.nvBodyModel.initAnimator(), this.nvBodyModel.initPart(), this.nvBodyModel.setParent(this.scene3DBack), this.nvBodyModel.hide(), t = this.nvBodyModel.findChild("toufa_guadian"), this.nvFaceModel = new GModel(this.resultDataNpc.nvFaceModelId), this.nvFaceModel.create(), this.nvFaceModel.initAnimator(), this.nvFaceModel.initPart(), this.nvFaceModel.setParent(t), this.nvFaceModel.hide(), this.nvFaceModel.setPosition(0, 0, 0), this.nvFaceModel.setRotation(0, 0, 0), this.nvHairModel = new GModel(this.resultDataNpc.nvHairModelId), this.nvHairModel.create(), this.nvHairModel.initPart(), this.nvHairModel.setParent(t), this.nvHairModel.hide()
			}
		}
		on_click_button0() {
			this.clickItems(0)
		}
		on_click_button1() {
			this.clickItems(1)
		}
		on_click_button2() {
			this.clickItems(2)
		}
		on_click_button3() {
			this.clickItems(3)
		}
		on_click_button4() {
			this.clickItems(4)
		}
		on_click_button5() {
			this.clickItems(5)
		}
		on_click_button6() {
			this.clickItems(6)
		}
		on_click_button7() {
			this.clickItems(7)
		}
		on_click_button8() {
			this.clickItems(8)
		}
		on_click_buttonAnim0() {
			this.clickAnim(0)
		}
		on_click_buttonAnim1() {
			this.clickAnim(1)
		}
		on_click_buttonAnim2() {
			this.clickAnim(2)
		}
		on_click_buttonAnim3() {
			this.clickAnim(3)
		}
		on_click_buttonAnim4() {
			this.clickAnim(4)
		}
		on_click_buttonClose() {
			this.finishTime >= Timer.time ? _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelCpTest.5")) : this.close()
		}
		on_click_buttonOk() {
			GameStatistics.statisCommonEvent(2303, this.selectedAnimIdx), GameStatistics.statisCommonEvent(2304), mgrGuide.sendMsgKey("CP_CLICK_ANIM"), this.cpTestResult ? this.calcResult() : this.cpTestResultNpc && this.calcResultNpc(), mgrAdv.statisVideoClick("cp_test_show"), mgrAdv.dispatchAdv("cp_test_show", {}, !0), cc.clearTween(this.buttonOk.node), UiHelper.playRotCycle(this.buttonOk.node)
		}
		on_click_buttonCost() {
			BaseFacade.mItem.subItem("1000", 300, null) ? (GameStatistics.statisCommonEvent(2303, this.selectedAnimIdx), GameStatistics.statisCommonEvent(2304), mgrGuide.sendMsgKey("CP_CLICK_ANIM"), this.cpTestResult ? (GameStatistics.statisCommonEvent(2557, 1), this.calcResult()) : this.cpTestResultNpc && (GameStatistics.statisCommonEvent(2558, 1), this.calcResultNpc()), this.enterResult()) : (this.cpTestResult ? GameStatistics.statisCommonEvent(2557, 0) : this.cpTestResultNpc && GameStatistics.statisCommonEvent(2558, 0), mgrAlert.alertNotEnough("1000"))
		}
		on_click_buttonGuide() {}
		on_click_buttonDebugCp() {
			let t = this.labelDebugInputNpcId.text,
				e = this.labelDebugInputAnimIdx.text,
				a = parseInt(t),
				i = db.get_cp_npc_fixed(a);
			if (!i) return;
			let s = parseInt(e),
				n = {
					npcId: a,
					nanBodyModelId: i.nanBodyModelId,
					nanFaceModelId: i.nanFaceModelId,
					nanHairModelId: i.nanHairModelId,
					nvBodyModelId: i.nvBodyModelId,
					nvFaceModelId: i.nvFaceModelId,
					nvHairModelId: i.nvHairModelId,
					effectId: i.effectId,
					nanBodyAnimIds: [i.nanBodyAnimationIds[0][s], i.nanBodyAnimationIds[1][s]],
					nanFaceAnimIds: [i.nanFaceAnimationIds[0][s], i.nanFaceAnimationIds[1][s]],
					nvBodyAnimIds: [i.nvBodyAnimationIds[0][s], i.nvBodyAnimationIds[1][s]],
					nvFaceAnimIds: [i.nvFaceAnimationIds[0][s], i.nvFaceAnimationIds[1][s]],
					bRotate: this.ANIM_IDX_TO_DATA[s].bRotate,
					cameraX: this.ANIM_IDX_TO_DATA[s].cameraX,
					cameraY: this.ANIM_IDX_TO_DATA[s].cameraY,
					cameraZ: this.ANIM_IDX_TO_DATA[s].cameraZ,
					cameraNodeEulerX: this.ANIM_IDX_TO_DATA[s].cameraNodeEulerX,
					cameraNodeEulerY: this.ANIM_IDX_TO_DATA[s].cameraNodeEulerY
				};
			this.resultDataNpc = n, console.log("互动结果", this.resultDataNpc), this.labelDebugInputAnimIdx.visible = !1, this.labelDebugInputNpcId.visible = !1, this.buttonDebugCp.node.visible = !1, this.enterResult(), this.startLoad()
		}
	}
	class PanelCpTestPreview extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelCpTestPreview.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_spriteMy: "Laya.Sprite",
				cc_buttonRandom: "UIButton",
				cc_spriteRz: "Laya.Sprite",
				cc_buttonFixed: "UIButton",
				cc_buttonColorEggManDuoLa: "UIButton",
				cc_spriteManicure: "Laya.Sprite",
				cc_spriteHd: "Laya.Sprite",
				cc_imageGrayHeart1: "Laya.Image",
				cc_spriteHeart1: "Laya.Sprite",
				cc_imageGrayHeart2: "Laya.Image",
				cc_spriteHeart2: "Laya.Sprite",
				cc_imageGrayHeart3: "Laya.Image",
				cc_spriteHeart3: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_buttonCpBooks: "UIButton",
				cc_spriteTitle: "Laya.Sprite",
				cc_labelTitle: "Laya.Label"
			}, this.instOrBanner = new AdvInstOrBanner("enter_cp_preview", "banner_cp_preview"), this.enterMainWhenClose = !0, this.bAddHeart = !1, this.lastIndex = 0, this.bOpenManicure = !1
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteMy, "pnl_cp_test_preview_06.png"), mgrI18n.trySetI18nImage(this.spriteRz, "pnl_cp_test_preview_05.png"), mgrI18n.trySetI18nImage(this.spriteHd, "pnl_cp_test_preview_04.png"), mgrI18n.trySetI18nImage(this.buttonCpBooks.node, "pnl_cp_test_preview_01.png"), mgrI18n.trySetI18nImage(this.spriteTitle, "pnl_cp_test_preview_03.png"), UiHelper.addClickEvent(this.spriteManicure, this.onClick.bind(this), null, .5, !1);
			for (let t = 1; t <= 3; t++) {
				let e = this["imageGrayHeart" + t.toString()];
				e && (e.gray = !0, e.visible = !0)
			}
			this.refreshHeart(), this.checkColorEggManDuoLa(), this.registerMsg({
				MANICURE_HEART_CHANGE: this.onMsgManicureHeartChange.bind(this),
				JUMP_PANEL_BEFORE: this.onMsgJumpPanelBefore.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), super.dispose(), this.enterMainWhenClose && mgrGame.tryEnterMain()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t), t && this.refreshHeart()
		}
		onMsgManicureHeartChange(t) {
			this.bAddHeart = t && t.bAdd
		}
		onMsgJumpPanelBefore() {
			this.enterMainWhenClose = !1
		}
		refreshHeart() {
			let t = mgrCp.getTestCount();
			for (let e = 1; e <= 3; e++) {
				let a = this["spriteHeart" + e.toString()];
				if (a && (a.visible = t >= e), this.bAddHeart && e == t) {
					this.bAddHeart = !1;
					let t = a.x,
						e = a.y,
						i = new Laya.Point(0, 0);
					1 == this.lastIndex ? UiHelper.local2local(this.buttonRandom.node, this.spriteManicure, i) : UiHelper.local2local(this.buttonFixed.node, this.spriteManicure, i), a.pos(i.x, i.y - 100), cc.tween(a).to(.5, {
						x: t,
						y: e
					}).call(() => {
						if (this.destroyed) return;
						let t = a.localToGlobal(new Laya.Point(a.width / 2, a.height / 2));
						mgrAlert.playParticleEffect("195", t, 1, .5)
					}).to(.1, {
						scaleX: .6,
						scaleY: .6
					}).to(.1, {
						scaleX: .5,
						scaleY: .5
					}).start()
				}
			}
		}
		showFinger() {
			if (!this.fingerEffect) {
				let t = this.addEffect("135");
				t.setScale(1, 1, 1), t.followTarget(this.buttonFixed.node, this.cameraEffect, this.buttonFixed.node.width / 2), this.fingerEffect = t
			}
			this.fingerEffect.show(), this.fingerEffect.play()
		}
		hideFinger() {
			this.fingerEffect && (this.fingerEffect.stop(), this.fingerEffect.hide())
		}
		checkColorEggManDuoLa() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.MAN_DUO_LA, EGGS_STEP.THIRD) || (this.buttonColorEggManDuoLa.node.visible = !1)
		}
		on_click_buttonRandom() {
			GameStatistics.statisCommonEvent(2502), mgrAlert.openGameLoading(UI_NAME.PanelCpTest, {
				index: 1
			}), this.hideFinger(), this.lastIndex = 1
		}
		on_click_buttonFixed() {
			GameStatistics.statisCommonEvent(2501), mgrAlert.openGameLoading(UI_NAME.PanelCpTest, {
				index: 2
			}), this.hideFinger(), this.lastIndex = 2
		}
		on_click_buttonClose() {
			this.close()
		}
		onClick() {
			if (this.bOpenManicure) return;
			mgrCp.getTestCount() < 3 ? (GameStatistics.statisCommonEvent(2580, 0), mgrAlert.alertDialog(mgrI18n.getText("panelCpTestPreview.3"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				this.showFinger(), GameStatistics.statisCommonEvent(2580, 1)
			}, null, mgrI18n.getText("panelCpTestPreview.4"), null)) : (this.bOpenManicure = !0, mgrAlert.openPanelLoading(UI_NAME.PanelManicurePreview, {
				fOnOpend: () => {
					this.bOpenManicure = !1
				}
			}, () => {}))
		}
		on_click_buttonCpBooks() {
			mgrAlert.openPanelLoading(UI_NAME.PanelCpBooks)
		}
		on_click_buttonColorEggManDuoLa() {
			this.buttonColorEggManDuoLa.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggManDuoLa.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggManDuoLa.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.man_du_la)
		}
	}
	class PanelDanceAnswer extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelDanceAnswer.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_nodeLayoutLabel: "Laya.Box",
				cc_labelCankao: "Laya.Label",
				cc_bg: "Laya.Box",
				cc_titleLabel: "Laya.Label",
				cc_nodeGou: "Laya.Sprite",
				cc_node1: "Laya.Box",
				cc_node2: "Laya.Box",
				cc_node3: "Laya.Box",
				cc_node4: "Laya.Box",
				cc_node5: "Laya.Box",
				cc_node6: "Laya.Box",
				cc_node7: "Laya.Box",
				cc_node8: "Laya.Box",
				cc_node9: "Laya.Box",
				cc_nodeTips: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_buttonSure: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_dance_answer")
		}
		buildUi() {
			let t = this.context.danceAnimId,
				e = db.get_dance_anim_db(t);
			if (!e) return;
			this.labelCankao.visible = !0, this.labelCankao.text = mgrI18n.getText(e.tlite);
			let a = this["node" + e.tipPos.toString()];
			a && (a.addChild(this.nodeTips), this.nodeTips.pos(0, 0)), this.nodeGou.x = 24 + 48 * (Mathf.random(7) - 1), this.titleLabel.text = mgrI18n.getText(e.tlite)
		}
		dispose() {
			this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonSure() {
			this.context && this.context.fOnJump && this.context.fOnJump(), this.close()
		}
	}
	class PanelDancePastRole extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelDancePastRole.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_scrollView: "ReuseScrollList",
				cc_buttonClose: "UIButton",
				cc_sprite1: "Laya.Sprite",
				cc_nodeLayoutTips: "Laya.Box",
				cc_labelCankao: "Laya.Label",
				cc_spriteDanceIcon: "Laya.Sprite",
				cc_barMask: "UIBarMask",
				cc_labelProgress: "Laya.Label",
				cc_buttonOk: "UIButton",
				cc_buttonAdv: "UIButton",
				cc_topLeftNode: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_dance_past_role")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.sprite1, "pnl_dance_05.png"), this.labelCankao.visible = !0, this.labelCankao.text = mgrI18n.getText("panelDancePastRole.1");
			let t = mgrGame.getRecordDanceCount(DANCE_ANSWER_ANIM_ID);
			this.barMask.progress = t / 3, this.labelProgress.text = `${Math.min(t,3)}/3`;
			let e = mgrGame.checkDanceIsTested(DANCE_ANSWER_ANIM_ID),
				a = mgrGame.getRecordAdDanceAnswer(DANCE_ANSWER_ANIM_ID),
				i = mgrAdv.checkActive("dance_answer");
			this.buttonOk.node.visible = e || a, this.buttonAdv.node.visible = !e && !a && i, this.buttonAdv.node.visible && mgrAdv.statisVideoShow("dance_answer"), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg();
			let s = this.addEffect("199");
			s.followTarget(this.spriteDanceIcon, this.cameraEffect, this.spriteDanceIcon.width / 2 - 6, this.spriteDanceIcon.height / 2 - 5), s.play()
		}
		dispose() {
			this.startProcMsg(), this.instOrBanner.dispose(), this.scrollView && this.scrollView.clearAllItems(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			"dance_answer" == t.advName && t.params && t.params.danceAnimId == DANCE_ANSWER_ANIM_ID && (mgrGame.addRecordAdDanceAnswer(DANCE_ANSWER_ANIM_ID), this.buttonOk.node.visible = !0, this.buttonAdv.node.visible = !1, this.showAnswer())
		}
		showAnswer() {
			mgrAlert.openPanelLoading(UI_NAME.PanelDanceAnswer, {
				danceAnimId: DANCE_ANSWER_ANIM_ID,
				fOnJump: () => {
					GameStatistics.statisCommonEvent(2102), mgrAlert.openPanelLoading(UI_NAME.PanelDanceDraw), this.close()
				}
			})
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonOk() {
			this.showAnswer()
		}
		on_click_buttonAdv() {
			mgrAdv.statisVideoClick("dance_answer"), mgrAdv.dispatchAdv("dance_answer", {
				danceAnimId: DANCE_ANSWER_ANIM_ID
			}, !0)
		}
	}
	class DancePreDestinationItem extends ViewBase {
		constructor(t) {
			super(t), this.resourceName = "res/prefab/DancePreDestinationItem.json", this._exportNodeInfo = {
				cc_imageBg: "Laya.Image",
				cc_spriteNeverTest: "Laya.Sprite",
				cc_stars: "UIHVLayout",
				cc_buttonShow: "UIButton",
				cc_buttonAdvShow: "UIButton"
			}, this.create()
		}
		onCreateComplete() {}
		refreshItem(t, e) {
			if (!this.callable) return this.safeCall(this.refreshItem, t, e);
			let a = db.get_dance_anim_db(t);
			if (!a) return;
			this.danceAnimId = t, this.imageBg.skin = a.iconTexture, UiHelper.setStars(this.stars, a.star, 5);
			let i = mgrGame.checkDanceIsTested(t),
				s = mgrGame.getRecordAdDanceAnswer(t);
			mgrI18n.trySetI18nImage(this.spriteNeverTest, "pnl_dance_01.png"), this.spriteNeverTest.visible = !i, this.imageBg.gray = !i, this.buttonShow.node.visible = i || s, this.buttonAdvShow.node.visible = !i && !s && e
		}
		on_click_buttonShow() {
			this.danceAnimId && this.context && this.context.fOnClickShow && this.context.fOnClickShow(this.danceAnimId)
		}
		on_click_buttonAdvShow() {
			this.danceAnimId && (mgrAdv.statisVideoClick("dance_answer"), mgrAdv.dispatchAdv("dance_answer", {
				danceAnimId: this.danceAnimId
			}, !0))
		}
	}
	class PanelDancePreDestination extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelDancePreDestination.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_scrollView: "ReuseScrollList",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.danceAnimIds = [], this.instOrBanner = new AdvInstOrBanner("", "banner_dance_pre_destination")
		}
		buildUi() {
			this.scrollView.height = 720 + _G.canvasFitHeight - 1024;
			let t = db.get_dance_anim_db_map();
			for (let e in t) {
				let a = t[e];
				a && this.danceAnimIds.push(a.id)
			}
			this.scrollView.onItemCreate = (() => {
				let t = new DancePreDestinationItem({
					fOnClickShow: this.onClickShow.bind(this)
				});
				return t.create(), t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			});
			let e = mgrAdv.checkActive("dance_answer");
			mgrAdv.statisVideoShow("dance_answer"), this.scrollView.onItemChange = ((t, a) => {
				t.refreshItem(this.danceAnimIds[a], e)
			}), this.scrollView.updateList(this.danceAnimIds.length), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.startProcMsg(), this.instOrBanner.dispose(), this.scrollView && this.scrollView.clearAllItems(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			"dance_answer" == t.advName && t.params && t.params.danceAnimId && (mgrGame.addRecordAdDanceAnswer(t.params.danceAnimId), this.onClickShow(t.params.danceAnimId), this.scrollView.updateList(this.danceAnimIds.length))
		}
		onClickShow(t) {
			mgrAlert.openPanelLoading(UI_NAME.PanelDanceAnswer, {
				danceAnimId: t,
				fOnJump: () => {
					GameStatistics.statisCommonEvent(2102), mgrAlert.openPanelLoading(UI_NAME.PanelDanceDraw), this.close()
				}
			})
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelDancePreview extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelDancePreview.json", this.panelStyle = 1, this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_spriteNpc: "Laya.Image",
				cc_nodeNpcEffect: "Laya.Box",
				cc_nodeDanceNew: "Laya.Sprite",
				cc_nodeLayoutDanceName: "Laya.Box",
				cc_labelCankaoDanceName: "Laya.Label",
				cc_nodeBtnGo: "Laya.Sprite",
				cc_nodeRoleNew: "Laya.Sprite",
				cc_nodeLayoutRoleName: "Laya.Box",
				cc_labelCankaoRoleName: "Laya.Label",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_buttonDancePre: "UIButton",
				cc_buttonPastRole: "UIButton",
				cc_buttonColorEgg: "UIButton",
				cc_topCenterNode: "Laya.Sprite",
				cc_sprite2: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_dance_pre", "banner_dance_pre"), this.enterMainWhenClose = !0, this.effects = []
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonDancePre.node, "pnl_dance_02.png"), mgrI18n.trySetI18nImage(this.buttonPastRole.node, "pnl_dance_04.png"), mgrI18n.trySetI18nImage(this.buttonColorEgg.node, "pnl_shoe_01.png"), mgrI18n.trySetI18nImage(this.sprite2, "pnl_dance_06.png"), this.labelCankaoDanceName.visible = !0, this.labelCankaoDanceName.text = mgrI18n.getText("panelDancePreview.3"), UiHelper.addClickEvent(this.nodeDanceNew, this.onClickDanceNew.bind(this), null, .5, !1), this.labelCankaoRoleName.visible = !0, this.labelCankaoRoleName.text = mgrI18n.getText("panelDancePreview.4"), UiHelper.addClickEvent(this.nodeRoleNew, this.onClickRoleNew.bind(this), null, .5, !1), mgrAdv.checkActive("get_shoe_color_egg") || (this.buttonColorEgg.node.visible = !1), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELDANCEPREVIEW_BUTTONTODANCEDRAW, this.nodeDanceNew), this.registerMsg({
				DANCE_ROLE_START_ANIM: this.onMsgDanceRoleStartAnim.bind(this),
				JUMP_PANEL_BEFORE: this.onMsgJumpPanelBefore.bind(this)
			}), this.startProcMsg(), GameStatistics.statisOnStageStart(13002);
			let t = this.addEffect("192");
			t.play(), this.effects.push(t), (t = this.addEffect("198")).followTarget(this.nodeDanceNew, this.cameraEffect), t.play(), this.effects.push(t), (t = this.addEffect("198")).followTarget(this.nodeRoleNew, this.cameraEffect), t.play(), this.effects.push(t), (t = this.addEffect("201")).followTarget(this.nodeNpcEffect, this.cameraEffect), t.play(), this.effects.push(t)
		}
		dispose() {
			this.stopProcMsg(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELDANCEPREVIEW_BUTTONTODANCEDRAW), this.instOrBanner.dispose(), super.dispose(), this.enterMainWhenClose && mgrGame.tryEnterMain()
		}
		onFocus(t) {
			if (super.onFocus(t), this.instOrBanner.onFocus(t), t)
				for (let t = 0; t < this.effects.length; t++) this.effects[t] && this.effects[t].play()
		}
		onDialogOpenAnim(t) {
			console.log("onDialogOpenAnim");
			let e = this.spriteNpc.x;
			this.spriteNpc.x -= 768, cc.tween(this.spriteNpc).to(.5, {
				x: e
			}, {
				easing: cc.Ease.backOut
			}).call(() => {}).start(), e = this.topLeftNode.x, this.topLeftNode.x -= 200, cc.tween(this.topLeftNode).to(.3, {
				x: e
			}, {
				easing: cc.Ease.backOut
			}).call(() => {}).start();
			let a = this.topCenterNode.y;
			this.topCenterNode.y -= 200, cc.tween(this.topCenterNode).to(.3, {
				y: a
			}, {
				easing: cc.Ease.backOut
			}).call(() => {}).start(), e = this.nodeDanceNew.x, a = this.nodeDanceNew.y, this.nodeDanceNew.x = 0, this.nodeDanceNew.y = -350, this.nodeDanceNew.scale(0, 0), cc.tween(this.nodeDanceNew).delay(.5).parallel(cc.tween().to(.4, {
				x: e,
				y: a
			}), cc.tween().to(.4, cc.PROP.SCALE1, cc.OPTION.BACK_OUT)).start(), e = this.nodeRoleNew.x, a = this.nodeRoleNew.y, this.nodeRoleNew.x = 0, this.nodeRoleNew.y = -350, this.nodeRoleNew.scale(0, 0), cc.tween(this.nodeRoleNew).delay(.5).parallel(cc.tween().to(.4, {
				x: e,
				y: a
			}), cc.tween().to(.4, cc.PROP.SCALE1, cc.OPTION.BACK_OUT)).call(() => {
				t(), this.scheduleOnce(.05, function() {
					mgrGuide.dispatchGuide(GUD_EVENT.PANEL_DANCE_PREVIEW)
				})
			}).start()
		}
		onMsgDanceRoleStartAnim() {
			this.enterMainWhenClose = !1, this.on_click_buttonClose()
		}
		onMsgJumpPanelBefore() {
			this.enterMainWhenClose = !1
		}
		onClickDanceNew() {
			GameStatistics.statisCommonEvent(2102), mgrAlert.openPanelLoading(UI_NAME.PanelDanceDraw)
		}
		onClickRoleNew() {
			GameStatistics.statisCommonEvent(2601), mgrAlert.openPanelLoading(UI_NAME.PanelShoe)
		}
		on_click_buttonClose() {
			GameStatistics.statisOnStageEnd(13002), this.close()
		}
		on_click_buttonDancePre() {
			mgrAlert.openPanelLoading(UI_NAME.PanelDancePreDestination)
		}
		on_click_buttonPastRole() {
			GameStatistics.statisCommonEvent(2602), mgrAlert.openPanelLoading(UI_NAME.PanelDancePastRole)
		}
		on_click_buttonColorEgg() {
			GameStatistics.statisCommonEvent(2604), mgrAlert.openPanelLoading(UI_NAME.PanelShoeColorEggs)
		}
	}
	class PanelDiamondGift extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelDiamondGift.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_superNode: "Laya.Sprite",
				cc_sprite1: "Laya.Sprite",
				cc_superCount: "Laya.Label",
				cc_buttonSuper: "UIButton",
				cc_superPrice: "Laya.Label",
				cc_freeNode: "Laya.Sprite",
				cc_sprite2: "Laya.Sprite",
				cc_sprite3: "Laya.Sprite",
				cc_freeCount: "Laya.Label",
				cc_buttonFree: "UIButton",
				cc_textButtonFreeText: "Laya.Text",
				cc_spriteButtonFreeAdFlag: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_gift")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.sprite1, "pnl_gift_04.png"), mgrI18n.trySetI18nImage(this.sprite2, "pnl_gift_02.png"), mgrI18n.trySetI18nImage(this.sprite3, "pnl_gift_05.png"), this.textButtonFreeText.text = mgrI18n.getText("shopItemCurrency.1");
			if (this.superNode.visible = !1, this.freeNode.y = 0, !mgrAdv.getActive("shop_item")) return console.log("没有获取钻石的渠道"), void this.close();
			if (mgrAdv.getActive("shop_item")) {
				mgrAdv.statisVideoShow("shop_item");
				let t = db.get_pay_db(PAY_ID.FREE_DIAMON);
				this.freeDiamondCount = t.getCount, this.freeCount.text = "*" + this.freeDiamondCount, UiHelper.playBreathe(this.buttonFree.node), this.registerMsg({
					[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
				}), this.startProcMsg()
			} else this.freeNode.visible = !1, this.superNode.y = 0;
			Mathf.randomEnable(db.cop.ad_flag_hide_ratios[0] || 0) ? (this.spriteButtonFreeAdFlag.visible = !1, this.textButtonFreeText.x -= this.spriteButtonFreeAdFlag.width / 2) : this.spriteButtonFreeAdFlag.visible = !0
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			if ("shop_item" == t.advName && "diamond" == t.params) {
				this.close();
				let t = {
					itemId: "1000",
					count: this.freeDiamondCount
				};
				mgrAlert.addAndAlert(t, 30)
			}
		}
		on_click_buttonSuper() {}
		on_click_buttonFree() {
			mgrAdv.statisVideoClick("shop_item"), mgrAdv.dispatchAdv("shop_item", "diamond", !0)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelDream extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelDream.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_roleSprite: "Laya.Image",
				cc_topNode: "Laya.Sprite",
				cc_suitNode: "Laya.Sprite",
				cc_suitBg: "Laya.Image",
				cc_nameLabel: "Laya.Label",
				cc_barMask: "UIBarMask",
				cc_heartIcon: "Laya.Sprite",
				cc_barValue: "Laya.Label",
				cc_suitItem: "Laya.Sprite",
				cc_scrollViewSuit: "ReuseScrollList",
				cc_headNode: "Laya.Sprite",
				cc_buttonColorEggManDuoLa: "UIButton",
				cc_scrollViewHead: "ReuseScrollList",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_dream", ""), this.enterMainWhenClose = !0
		}
		buildUi() {
			this.barMask.node.visible = !1, this.heartIcon.visible = !1, this.barValue.visible = !1, GameStatistics.statisOnStageStart(7506);
			let t = _G.canvasFitWidth - 576;
			this.suitBg.width += t, this.scrollViewSuit.width += t;
			let e = mgrDream.getAllRole();
			e.sort(sort_role_id_by_order), this.scrollViewHead.onItemCreate = function() {
				let t = new HeadItem;
				return t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}, this.scrollViewHead.onItemChange = ((t, a) => {
				t.setData(e[a], this.curRoleId == e[a])
			}), this.scrollViewHead.updateList(e.length);
			let a = !1;
			this.scrollViewSuit.onItemCreate = (() => {
				let t = new DreamSuitItem;
				return t.createFromNode(UiHelper.cloneSprite(this.suitItem)), a || (a = !0, t.regGuide()), t
			}), this.scrollViewSuit.onItemChange = ((t, e) => {
				t.setData(this.suits[e])
			}), this.refresh(e[0]), this.checkColorEggManDuoLa(), this.registerMsg({
				UI_CLICK_HEAD_ITEM: this.onMsgClickHeadItem.bind(this),
				UI_CLICK_ROLE_SUIT: this.onMsgClickRoleSuit.bind(this),
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				JUMP_PANEL_BEFORE: this.onMsgJumpPanelBefore.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.scrollViewHead && this.scrollViewHead.clearAllItems(), this.scrollViewSuit && this.scrollViewSuit.clearAllItems(), super.dispose(), this.enterMainWhenClose && mgrGame.tryEnterMain(), GameStatistics.statisOnStageEnd(7506)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t), t && this.curSuitId && (this.refreshHeart(this.bPartChange), this.curSuitId = null)
		}
		regGuide() {
			mgrGuide.saveGuideStep(GUD_EVENT.GOTO_DREAM, 0), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_DREAM) || GameStatistics.statisCommonEvent(7101), mgrGame.tryOpenPanelRankVideoTips(4)
		}
		onDialogOpenAnim(t) {
			this.topNode.y = -200, cc.tween(this.topNode).to(.4, {
				y: 0
			}, cc.OPTION.BACK_OUT).start(), this.headNode.x = -150, this.suitNode.x = -650, cc.tween(this.headNode).delay(.2).to(.3, {
				x: 0
			}, cc.OPTION.SINE_IN).start(), cc.tween(this.suitNode).delay(.4).to(.4, {
				x: 0
			}, cc.OPTION.SINE_OUT).call(t).start()
		}
		onMsgClickHeadItem(t) {
			this.refresh(t)
		}
		onMsgClickRoleSuit(t) {
			this.curSuitId = t
		}
		onMsgItemChange(t) {
			2 == t.itemDb.type && 1 == t.itemDb.subType && (this.bPartChange = !0)
		}
		onMsgJumpPanelBefore() {
			this.enterMainWhenClose = !1
		}
		refresh(t) {
			this.curRoleId = t;
			let e = db.get_role_db(t);
			this.nameLabel.text = mgrI18n.getText(e.tlite), this.roleSprite.skin = e.image, this.suits = e.suits, this.scrollViewSuit.updateList(this.suits.length), this.refreshHeart(!1)
		}
		refreshHeart(t) {
			mgrDream.getRoleHeard(this.curRoleId), mgrDream.getAllPartCount(this.curRoleId)
		}
		checkColorEggManDuoLa() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.MAN_DUO_LA, EGGS_STEP.SECOND) || (this.buttonColorEggManDuoLa.node.visible = !1)
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonColorEggManDuoLa() {
			this.buttonColorEggManDuoLa.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggManDuoLa.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggManDuoLa.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.man_du_la)
		}
	}
	class HeadItem extends ViewBase {
		constructor() {
			super(), this.resourceName = "HeadItem", this.create()
		}
		create() {
			let t = (new Laya.Sprite).size(95, 85);
			this.icon = t.addChild(new Laya.Sprite).pos(5, 2, !0).size(85, 85), this.focus = t.addChild(new Laya.Sprite).pos(3, 0).size(89, 89).loadImage("res/ui/pnl_dream/focus.png"), this.tip = t.addChild(new Laya.Sprite).pos(60, 0).loadImage("res/ui/btns/tip.png"), this.createFromNode(t)
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this)), this.registerMsg({
				UI_CLICK_HEAD_ITEM: this.onMsgClickHeadItem.bind(this),
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this)
			}), this.startProcMsg(), UiHelper.playFadein(this.resNode)
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgClickHeadItem(t) {
			this.focus.visible = t == this.roleId
		}
		onMsgItemChange(t) {
			this.roleId && (mgrDream.checkRoleTip(this.roleId) ? (this.tip.visible = !1, UITip.playTipAnim(this.tip)) : (cc.clearTween(this.tip), this.tip.visible = !1))
		}
		setData(t, e) {
			this.roleId = t;
			let a = db.get_role_db(t);
			this.icon.loadImage(a.head), this.focus.visible = e, mgrDream.checkRoleTip(t) ? (this.tip.visible = !1, UITip.playTipAnim(this.tip)) : (cc.clearTween(this.tip), this.tip.visible = !1)
		}
		onClick() {
			this.roleId && _G.sendMsg("UI_CLICK_HEAD_ITEM", this.roleId)
		}
	}
	class DreamSuitItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "DreamSuitItem"
		}
		onCreateComplete() {
			this.icon = this.getChildImage("icon"), this.name = this.getChildLabel("name"), this.bar = this.getChildSprite("barBg/bar").addComponent(UIBarMask), this.bar.style = UIBarMask.STYLE_VERTICAL, this.barValue = this.getChildLabel("barBg/value"), this.tip = this.getChildSprite("tip"), UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this)), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				TALK_FINISH: this.onMsgTalkFinish.bind(this)
			}), this.startProcMsg()
		}
		onMsgItemChange(t) {
			this.suitId && (2 == t.itemDb.type && 1 == t.itemDb.subType ? this.setData(this.suitId) : mgrDream.checkSuitTip(this.suitId) ? (this.tip.visible = !1, UITip.playTipAnim(this.tip)) : (cc.clearTween(this.tip), this.tip.visible = !1))
		}
		onMsgTalkFinish(t) {
			mgrDream.checkSuitTip(this.suitId) ? (this.tip.visible = !1, UITip.playTipAnim(this.tip)) : (cc.clearTween(this.tip), this.tip.visible = !1)
		}
		dispose() {
			this.stopProcMsg(), super.dispose(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELDREAM_SUITITEM0)
		}
		setData(t) {
			this.suitId = t;
			let e = db.get_suit_db(t);
			this.icon.skin = e.icon;
			let a = mgrDream.hasPartCount(t);
			this.bar.progress = a / e.lotteryParts.length, this.barValue.text = (a / e.lotteryParts.length * 100 + .5 | 0) + "%", this.buttonState = mgrDream.isUnlockSuit(t), mgrDream.checkSuitTip(t) ? (this.tip.visible = !1, UITip.playTipAnim(this.tip)) : (cc.clearTween(this.tip), this.tip.visible = !1)
		}
		regGuide() {
			mgrGuide.registerGuideNode(GUD_REG_NODE.PANELDREAM_SUITITEM0, this.resNode)
		}
		onClick() {
			this.suitId && (GameStatistics.statisCommonEvent(3022), mgrAlert.openGameLoading(UI_NAME.PanelFishGame, this.suitId), _G.sendMsg("UI_CLICK_ROLE_SUIT", this.suitId))
		}
	}
	class PanelDialogEgg extends PanelDialog {
		constructor() {
			super(...arguments), this.instOrBanner = new AdvInstOrBanner("", "banner_egg_dialog")
		}
	}
	class mgrEgg extends _mgrBase {
		static onload() {
			BaseFacade.mSwitch.dailyActive && FileRecord.setData("egg_count", 0)
		}
		static get eggCount() {
			return FileRecord.getData("egg_count") || 0
		}
		static set eggCount(t) {
			FileRecord.setData("egg_count", t)
		}
		static get isEggDiamond() {
			return this.eggCount < db.cop.egg_diamond_count
		}
		static get isEggEnable() {
			return this.eggCount < db.cop.egg_count_max
		}
	}
	class PanelEgg extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelEgg.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_timeLabel: "Laya.Label",
				cc_timeBar: "UIBarMask",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_bottomNode: "Laya.Sprite",
				cc_buttonGet: "UIButton"
			}, this._instOrBanner = new AdvInstOrBanner("", ""), this.bUpdateTime = !1, this.hasAdv = !0
		}
		buildUi() {
			GameStatistics.statisCommonEvent(7313), this.hasAdv = !1, this.timeLabel.font = GConfig.bmf_score, this.timeLabel.text = db.game_cnf.egg_click_time + "", this.leftTime = db.game_cnf.egg_click_time, this.timeBar.progress = 0, this.buttonGet.clickDelta = 0, this.setClickCount(0), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), this.buttonGet.interactable = !1, this.scheduleOnce(.3, this.alertConfirm)
		}
		dispose() {
			this.stopProcMsg(), this._instOrBanner.dispose(), this._fingerAnim && (_G.poolManager.put(this._fingerAnim), this._fingerAnim = null), super.dispose(), mgrRankHuDong.giftFinish()
		}
		onFocus(t) {
			super.onFocus(t), this._instOrBanner.onFocus(t)
		}
		update() {
			if (this.timeLabel.text = Math.ceil(this.leftTime) + "", this.bUpdateTime) {
				let t = Timer.deltaTime;
				this.leftTime -= t, this.leftTime < 0 && (this.bUpdateTime = !1, this.hasAdv ? (this.hasAdv = !1, this.close()) : this.close())
			}
		}
		onMsgAdvShowSuc(t) {
			"free_egg" == t.advName && (this.leftTime = db.game_cnf.egg_click_time, this.setClickCount(this.curClickCount))
		}
		setClickCount(t) {
			this.curClickCount = t, t >= db.game_cnf.egg_click_count && (this.buttonGet.interactable = !1, this.bUpdateTime = !1)
		}
		alertConfirm() {
			let t;
			t = mgrEgg.isEggDiamond ? mgrI18n.getText("panelEgg.5") : mgrI18n.getText("panelEgg.6");
			let e = {
				desc: t = String.format(mgrI18n.getText("panelEgg.7"), db.game_cnf.egg_click_time),
				title: mgrI18n.getText("schoolYearbookItem.2")
			};
			mgrAlert.openPanelLoading(PanelDialogEgg, e), this.buttonGet.interactable = !0
		}
		onGetAward() {
			let t;
			t = mgrEgg.isEggDiamond ? {
				itemId: "1000",
				count: 10
			} : {
				itemId: "1001",
				count: 1e3
			}, mgrEgg.eggCount++, mgrAlert.addAndAlert(t, 38, () => {
				this.close()
			})
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonGet() {
			this.bUpdateTime = !0, this.setClickCount(this.curClickCount + 1);
			let t = this.curClickCount / db.game_cnf.egg_click_count;
			cc.clearTween(this.timeBar), cc.tween(this.timeBar).to(.1, {
				progress: t
			}).call(() => {
				this.curClickCount >= db.game_cnf.egg_click_count ? this.onGetAward() : this.buttonGet.interactable = !0
			}).start()
		}
	}
	class PanelFind extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelFind.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_other: "Laya.Image",
				cc_spriteIcon1: "Laya.Sprite",
				cc_spriteIcon2: "Laya.Sprite",
				cc_spriteIcon3: "Laya.Sprite",
				cc_spriteIcon4: "Laya.Sprite",
				cc_spriteIcon5: "Laya.Sprite",
				cc_spriteIcon6: "Laya.Sprite",
				cc_otherSprite: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_find")
		}
		buildUi() {
			let t = [this.spriteIcon1, this.spriteIcon2, this.spriteIcon3, this.spriteIcon4, this.spriteIcon5, this.spriteIcon6];
			for (let e = 0; e < t.length; e++) {
				t[e].visible = !1
			}
			if (mgrSdk.findmeImageUrl)
				for (let e = 0; e < t.length; e++) {
					t[e].loadImage(mgrSdk.findmeImageUrl)
				}
			switch (mgrSdk.h5_channel) {
				case "weixin":
					this.otherSprite.loadImage("res/ui/pnl_chn/weixin.png"), this.spriteIcon4.visible = !0, this.spriteIcon5.visible = !0, this.spriteIcon6.visible = !0;
					break;
				case "baidu":
					this.otherSprite.loadImage("res/ui/pnl_chn/baidu.png");
					break;
				case "toutiao":
					this.otherSprite.loadImage("res/ui/pnl_chn/toutiao.png"), this.spriteIcon2.visible = !0, this.spriteIcon3.visible = !0;
					break;
				case "douyin":
					this.otherSprite.loadImage("res/ui/pnl_chn/douyin.png"), this.spriteIcon1.visible = !0;
					break;
				default:
					this.close()
			}
		}
		dispose() {
			this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelFishGet extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelFishGet.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_fishNode: "Laya.Sprite",
				cc_buttonOk: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_fish_get", "banner_fish_get")
		}
		buildUi() {
			this.fish = _G.poolManager.get(Spine, db.SPINE_DB_ID.jinyu), this.fish.setParent(this.fishNode), this.fish.setPosition(0, 0), this.fish.setScale(1, 1), this.fish.playDefaultAnim(), MoreGameBanner.setBannerVisible(!0)
		}
		dispose() {
			this.instOrBanner.dispose(), MoreGameBanner.setBannerVisible(!1), this.fish && _G.poolManager.put(this.fish), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		on_click_buttonOk() {
			mgrAlert.openPanelLoading(UI_NAME.PanelFishShow, this.context, () => {
				this.close()
			})
		}
	}
	class PanelFishShow extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelFishShow.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_animNode: "Laya.Sprite",
				cc_paopaoNode: "Laya.Sprite",
				cc_itemIcon: "Laya.Sprite",
				cc_stars: "UIHVLayout"
			}
		}
		buildUi() {
			this.fish = _G.poolManager.get(Spine, db.SPINE_DB_ID.jinyu), this.fish.setParent(this.animNode), this.fish.setPosition(0, 0), this.fish.setScale(1.2, 1.2), this.fish.playDefaultAnim();
			let t = this.addEffect("140"),
				e = new Laya.Vector3(_G.canvasWidth / 2, _G.canvasHeight / 2, 0),
				a = new Laya.Vector3;
			this.global2camer(e, a), t.play(a);
			let i = mgrDream.randomNextPart(this.context);
			this.partId = i;
			let s = db.get_item_db(i);
			this.itemIcon.loadImage(s.icon), UiHelper.setStars(this.stars, s.quality, 5), this.playUiAnim(), this.resNode.on(Laya.Event.MOUSE_DOWN, this, function() {})
		}
		dispose() {
			this.fish && (_G.poolManager.put(this.fish), this.fish.setAlpha(1)), super.dispose()
		}
		playUiAnim() {
			this.bg.alpha = 0, cc.tween(this.bg).to(.2, cc.PROP.ALPHA1).start(), this.paopaoNode.alpha = 0, this.paopaoNode.scale(0, 0), this.animNode.alpha = 0;
			let t = this.animNode.y;
			this.animNode.y = t + 300;
			let e = this.addEffect("147");
			e.followTarget(this.animNode, this.cameraEffect), e.play();
			let a = UiHelper.getSelfGlobalPos(this.animNode, new Laya.Point);
			mgrAlert.playParticleEffect("139", a, 2, .5), cc.tween(this.animNode).to(1, {
				alpha: 1,
				y: t
			}, cc.OPTION.SINE_OUT).call(() => {
				this.fish.runTween(cc.tween().to(.1, cc.PROP.ALPHA0)), cc.tween(this.paopaoNode).to(.3, cc.PROP.SCALE_ALPHA1, cc.OPTION.BACK_OUT).delay(.2).call(() => {
					this.onAnimFinish()
				}).start()
			}).delay(.1).start()
		}
		onAnimFinish() {
			let t = mgrDream.getNextPrice(this.context);
			BaseFacade.mItem.subItem("1001", t, 31), BaseFacade.mGoal.commit(ACTION_ID.GET_FISH), mgrAlert.addAndAlert({
				itemId: this.partId,
				count: 1
			}, null, this.close.bind(this), !0, 1)
		}
	}
	class PanelFollow extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.DIALOG, this.resourceName = "res/ui/PanelFollow.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_rewardListNode: "Laya.Sprite",
				cc_reward1: "Laya.Sprite",
				cc_rewardIcon1: "Laya.Image",
				cc_label_reward1: "Laya.Label",
				cc_reward2: "Laya.Sprite",
				cc_rewardIcon2: "Laya.Image",
				cc_label_reward2: "Laya.Label",
				cc_reward3: "Laya.Sprite",
				cc_rewardIcon3: "Laya.Image",
				cc_label_reward3: "Laya.Label",
				cc_reward4: "Laya.Sprite",
				cc_rewardIcon4: "Laya.Image",
				cc_label_reward4: "Laya.Label",
				cc_reward5: "Laya.Sprite",
				cc_rewardIcon5: "Laya.Image",
				cc_label_reward5: "Laya.Label",
				cc_buttonFollow: "UIButton",
				cc_labelFollow: "Laya.Label",
				cc_buttonThank: "UIButton"
			}, this.items = []
		}
		buildUi() {
			let t = db.getDb("follow_rewards_db"),
				e = 1;
			for (const a in t)
				if (Object.prototype.hasOwnProperty.call(t, a)) {
					const i = t[a];
					this["rewardIcon" + e].skin = i.icon, this["label_reward" + e].text = i.count;
					let s = {
						itemId: i.id,
						count: i.count
					};
					this.items.push(s), e++
				} let a = db.cop.follow_close_delay_time || 0;
			if (this.buttonThank.node.visible = !1, this.buttonThank.node.alpha = 0, a <= 0 ? (this.buttonThank.node.visible = !0, this.buttonThank.node.alpha = 1) : Timer.callLater(a, () => {
					this.destroyed || (this.buttonThank.node.visible = !0, cc.tween(this.buttonThank.node).to(.3, cc.PROP.ALPHA1).start())
				}, this), 0 != db.cop.b_follow_finger && 2 == mgrSdk.followState) {
				let t = this.addEffect("135");
				t.setScale(1, 1, 1), t.followTarget(this.buttonFollow.node, this.cameraEffect, this.buttonFollow.node.width / 2), t.play()
			}
			this.fillData(), this.registerMsg({
				[BASE_MSG.SDK_FOLLOW_OFFICIAL_ACCOUNT_SUC]: this.onMsgFollowOfficialAccountSuc.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEvent(9002)
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		fillData() {
			2 == mgrSdk.followState ? (BaseFacade.mItem.isOwned("1026"), this.labelFollow.text = "关注领取") : BaseFacade.mItem.isOwned("1026") ? this.labelFollow.text = "已领取" : this.labelFollow.text = "关注领取"
		}
		getRewards() {
			GameStatistics.statisCommonEvent(9001, 1), BaseFacade.mItem.addItem("1026", 1, null), _G.sendMsg("FOLLOW_TIP_UPDATE", "已领关注奖励");
			for (let t = 0; t < this.items.length; t++) {
				let e = this.items[t];
				e.itemId && e.count && BaseFacade.mItem.addItem(e.itemId, e.count, 10)
			}
			mgrAlert.alertItems(this.items)
		}
		onMsgFollowOfficialAccountSuc() {
			this.fillData(), 1 != mgrSdk.followState || BaseFacade.mItem.isOwned("1026") || this.getRewards(), this.close()
		}
		on_click_buttonThank() {
			this.close()
		}
		on_click_buttonFollow() {
			GameStatistics.statisCommonEvent(9003), mgrSdk.followOfficialAccount()
		}
	}
	class PanelFriends extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelFriends.json", this._exportNodeInfo = {
				cc_buttonFullScreenShare: "UIButton",
				cc_roleNode: "Laya.Sprite",
				cc_roleName: "Laya.Text",
				cc_photoNode: "Laya.Sprite",
				cc_photoMask: "Laya.Sprite",
				cc_photoSprite: "Laya.Sprite",
				cc_spriteFail: "Laya.Sprite",
				cc_scoreNode: "Laya.Sprite",
				cc_scoreLabel: "Laya.Label",
				cc_buttonOk: "UIButton",
				cc_buttonClose2: "UIButton",
				cc_topNode: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_friend", "")
		}
		buildUi() {
			this.node.x = 110, console.log("查看context", this.context), this.scoreLabel.font = GConfig.bmf_over;
			let t = mgrLevel.curLevelDb,
				e = db.get_role_db(t.roleId);
			this.roleNode.loadImage(e.head), this.buttonFullScreenShare.node.visible = !1, this.buttonClose2.node.visible = !1;
			let a = mgrLevel.curLevelIdx;
			a > 0 && (GameStatistics.statisCommonEvent(11e3 + a, 4), GameStatistics.statisOnStageEnd(12e3 + a, mgrPart.partScoreResult.suc ? 1 : 0, 0));
			let i = !!this.context;
			console.log("QT_PanelFriends" + i);
			let s = mgrPart.partScoreResult.suc;
			!i && !s && mgrPart.partScoreResult.totalScore + 10 >= t.score && mgrAdv.getActive("weituo_add_score") && mgrAlert.openPanelLoading(UI_NAME.PanelOverRemedy, {
				fOnClick: this.refreshLabel.bind(this)
			}), this.spriteFail.visible = !s, this.spriteFail.visible && mgrI18n.trySetI18nImage(this.spriteFail, "pnl_over_01.png"), this.roleName.text = mgrI18n.getText(e.tlite), console.log("查看分数", mgrPart.partScoreResult.totalScore), this.scoreLabel.text = Math.floor(mgrPart.partScoreResult.totalScore) + "", this.photoSprite.texture = mgrPart.roleTexture, this.photoSprite.pivot(mgrPart.roleTexture.width / 2, mgrPart.roleTexture.height / 2).pos(this.photoMask.width / 2, this.photoMask.height / 2, !0);
			let n = this.photoMask.width / (5 * mgrPart.photoWidth);
			this.photoSprite.scale(n, n, !0), this.playUiAnim(), this.scheduleOnce(1, () => {
				if (s) {
					let t = {
						itemId: mgrLevel.curLevelDb.itemId,
						count: mgrLevel.curLevelDb.itemCount
					};
					mgrAlert.addAndAlert(t, 39), i && mgrAlert.addAndAlert({
						itemId: "1000",
						count: 3
					}, 45), mgrSound.playSound("yllsd_17")
				} else mgrSound.playSound("yllsd_19")
			}), this.registerMsg({
				[BASE_MSG.SDK_SHARE_SUC]: this.onShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onShareSuc.bind(this)
			}), this.startProcMsg()
		}
		refreshLabel() {
			let t = mgrPart.partScoreResult.suc;
			this.spriteFail.visible = !t;
			let e = mgrLevel.curLevelDb,
				a = db.get_role_db(e.roleId);
			this.roleNode.loadImage(a.head), this.buttonFullScreenShare.node.visible = !1, this.roleName.text = a.name, this.scoreLabel.text = Math.floor(mgrPart.partScoreResult.totalScore) + "", this.photoSprite.texture = mgrPart.roleTexture, this.photoSprite.pivot(mgrPart.roleTexture.width / 2, mgrPart.roleTexture.height / 2).pos(this.photoMask.width / 2, this.photoMask.height / 2, !0);
			let i = this.photoMask.width / (5 * mgrPart.photoWidth);
			this.photoSprite.scale(i, i, !0), this.scheduleOnce(1, () => {
				if (t) {
					let t = {
						itemId: mgrLevel.curLevelDb.itemId,
						count: mgrLevel.curLevelDb.itemCount
					};
					mgrAlert.addAndAlert(t, 39), mgrAlert.addAndAlert({
						itemId: "1000",
						count: 3
					}, 45), mgrSound.playSound("yllsd_17")
				} else mgrSound.playSound("yllsd_19")
			})
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.shareBtn && this.shareBtn.dispose(), super.dispose(), GameStatistics.statisOnStageEnd(7507)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onShareSuc() {
			Laya.timer.frameOnce(1, this, this.showOkButton)
		}
		playUiAnim() {
			this.scoreLabel.text = "", cc.tween(this.scoreLabel).then(cc.numberTo(1, 0, mgrPart.partScoreResult.totalScore)).start(), this.roleNode.x = -900, cc.tween(this.roleNode).delay(.3).to(.5, {
				x: -271
			}, cc.OPTION.BACK_OUT).start(), this.photoNode.scale(0, 0, !0), cc.tween(this.photoNode).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), this.buttonOk.node.scale(1, 1, !0)
		}
		showOkButton() {
			this.buttonFullScreenShare.node.visible = !1, this.buttonOk.node.scale(1, 1), this.buttonOk.node.visible = !0, this.shareFinger && this.shareFinger.hide()
		}
		on_click_buttonOk() {
			mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_buttonFullScreenShare() {}
		on_click_buttonClose2() {
			this.on_click_buttonOk()
		}
	}
	class HotActivityItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "res/prefab/HotActivityItem.json", this._exportNodeInfo = {
				cc_spriteBg: "Laya.Sprite",
				cc_buttonGo: "UIButton",
				cc_labelGo: "Laya.Label"
			}
		}
		onCreateComplete() {}
		dispose() {
			super.dispose()
		}
		refreshItem(t) {
			if (!this.callable) return void this.safeCall(this.refreshItem, t);
			this.id = t;
			let e = db.get_hot_activity_db(t);
			if (!e) return;
			this.statisticId = e.statisticsId, this.jumpId = e.jumpId, this.jumpContext = e.jumpContext;
			let a = e.texturUrl;
			e.v2Func && mgrGame[e.v2Func] && mgrGame[e.v2Func] instanceof Function && mgrGame[e.v2Func]() && (this.statisticId = e.statisticsId2, this.jumpId = e.jumpId2, this.jumpContext = e.jumpContext2, a = e.texturUrl2), this.spriteBg.loadImage(a)
		}
		on_click_buttonGo() {
			null != this.statisticId && (GameStatistics.statisCommonEvent(2632, this.statisticId), this.jumpId && mgrJumpPanel.jumpTo(this.jumpId, null, this.jumpContext))
		}
	}
	class PanelHotActivity extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelHotActivity.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_scrollView: "ReuseScrollList",
				cc_buttonClose: "UIButton",
				cc_spriteName: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite"
			}
		}
		buildUi() {
			let t = db.cop.hot_activity_list_v2;
			for (let e = t.length - 1; e >= 0; e--) {
				let a = t[e];
				null != a && db.get_hot_activity_db_map()[a] || t.splice(e, 1)
			}
			mgrI18n.trySetI18nImage(this.spriteName, "pnl_hot_active.png"), this.scrollView.onItemCreate = (() => {
				let t = new HotActivityItem;
				return t.create(), t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}), this.scrollView.onItemChange = ((e, a) => {
				null != t[a] && e.refreshItem(t[a])
			}), this.scrollView.updateList(t.length), GameStatistics.statisCommonEvent(2631)
		}
		dispose() {
			this.scrollView && this.scrollView.clearAllItems(), super.dispose()
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PaiShouGame {
		constructor(t, e) {
			this.destroyed = !1, this._dt = 0, this._pos = new Laya.Point, this.circleScale = 0, this.circleAlpha = 0, this.animSpeed = 1, this.animWaitTime = 0, this.MAX_SCALE = 1.5, this.MIN_SCALE = .8, this.ANIM_IDLE_DURATION = .5, this.ANIM_PAISHOU_DURATION = .5, this.commonEvent = !1, this.combo = 0, this.avatar = t, this.camera = e, this.circleNode = (new Laya.Sprite).loadImage("res/ui/pnl_inside/light.png").size(120, 120).pivot(60, 60), this.circleNode.on(Laya.Event.MOUSE_DOWN, this, this.onClickCircle)
		}
		dispose() {
			this.destroyed = !0, this.avatar = null, this.camera = null, this.bUpdatePaiShou = !1, this.circleNode.destroy()
		}
		start() {
			mgrInside.startPaiShou(), this._dt = Mathf.clamp(1 / _G.FPS, 1 / 60, 1 / 30), this.avatar.playAnimation(MODEL_ANIM.PAISHOU01), this.circleNode.visible = !0, this.circleNode.alpha = 0, this.handTranL = this.avatar.baseBody.findChild("Guadian_handl").transform, this.handTranR = this.avatar.baseBody.findChild("Guadian_handr").transform, this.bLeft = !1, this.bClick = !1, this.bUpdatePaiShou = !0, this.curAnimTime = 0, this.waitTime = 0, this.state = 4, this.curBodyAnim = MODEL_ANIM.PAISHOU01, this.curFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.avatar.baseBody.getAnimator().speed = 1e-4, this.avatar.baseFace.getAnimator().speed = 1e-4, this.animSpeed = mgrInside.curPaiShouDb.animSpeed, this.animWaitTime = mgrInside.curPaiShouDb.waitTime, this.handCount = mgrInside.curPaiShouDb.paiShouCount
		}
		update() {
			if (this.bUpdatePaiShou) {
				let a = this._dt;
				switch (this.state) {
					case 0:
						this.curAnimTime += a * this.animSpeed;
						var t = Mathf.clamp01(this.curAnimTime / this.ANIM_IDLE_DURATION);
						this.avatar.baseBody.simulate(MODEL_ANIM.PAISHOU_IDLE, t), this.avatar.baseFace.simulate(MODEL_ANIM.FACE_PAISHOU_IDLE, t), t >= 1 && (this.state = 1, this.curAnimTime = 0);
						break;
					case 1:
						this.curAnimTime += a * this.animSpeed;
						t = Mathf.clamp01(this.curAnimTime / this.ANIM_PAISHOU_DURATION);
						this.avatar.baseBody.simulate(this.curBodyAnim, t), this.avatar.baseFace.simulate(this.curFaceAnim, t);
						var e = t / .5;
						this.circleScale = Mathf.lerp(this.MIN_SCALE, this.MAX_SCALE, e), this.circleAlpha = Mathf.lerp(0, 1, e), t >= .5 && (this.state = 2);
						break;
					case 2:
						this.waitTime += a, this.waitTime >= this.animWaitTime && (this.waitTime = this.animWaitTime, this.state = 3);
						break;
					case 3:
						this.curAnimTime += a * this.animSpeed;
						t = Mathf.clamp01(this.curAnimTime / this.ANIM_PAISHOU_DURATION);
						this.avatar.baseBody.simulate(this.curBodyAnim, t), this.avatar.baseFace.simulate(this.curFaceAnim, t);
						e = (t - .5) / .5;
						this.circleScale = Mathf.lerp(this.MAX_SCALE, this.MIN_SCALE, e), this.circleAlpha = Mathf.lerp(1, 0, e), t >= 1 && this.nextAnim();
						break;
					case 4:
						return this.randomLoad(this.curBodyAnim), void(this.state = 0)
				}
				let i = this.bLeft ? this.handTranL : this.handTranR;
				UiHelper.worldToScreen(this.camera, i.position, this._pos), this.circleNode.parent.globalToLocal(this._pos, !1), this.circleNode.pos(this._pos.x, this._pos.y, !0), this.circleNode.scale(this.circleScale, this.circleScale, !0).alpha = this.circleAlpha
			}
		}
		nextAnim() {
			this.curAnimTime = 0, this.waitTime = 0, this.state = 4, this.circleNode.visible = !0, this.bClick = !1, this.handCount--, this.handCount <= 0 ? this.onPaiShouOver() : (this.curBodyAnim = this.nextBodyAnim, this.curFaceAnim = this.nextFaceAnim, this.bLeft = this.bNextLeft)
		}
		randomLoad(t) {
			switch (t) {
				case MODEL_ANIM.PAISHOU01:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU02, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !0;
					break;
				case MODEL_ANIM.PAISHOU02:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU03, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !0;
					break;
				case MODEL_ANIM.PAISHOU03:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU04, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !0;
					break;
				case MODEL_ANIM.PAISHOU04:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU05, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !1;
					break;
				case MODEL_ANIM.PAISHOU05:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU06, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !1;
					break;
				case MODEL_ANIM.PAISHOU06:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU07, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !1;
					break;
				case MODEL_ANIM.PAISHOU07:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU08, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !0;
					break;
				case MODEL_ANIM.PAISHOU08:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU09, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !1;
					break;
				case MODEL_ANIM.PAISHOU09:
					this.nextBodyAnim = MODEL_ANIM.PAISHOU01, this.nextFaceAnim = "face_paishou-face_paishou0" + Mathf.random(4), this.bNextLeft = !1
			}
			mgrRes.loadRes(db.get_animation_db(this.curBodyAnim).path, RES_TYPE.ANIMATIONCLIP), mgrRes.loadRes(db.get_animation_db(this.curFaceAnim).path, RES_TYPE.ANIMATIONCLIP)
		}
		onPaiShouOver() {
			console.log("---\x3e onPaiShouOver"), this.circleNode.visible = !1, this.bUpdatePaiShou = !1, this.avatar.baseBody.getAnimator().speed = 1, this.avatar.baseFace.getAnimator().speed = 1, this.avatar.playIdle(), Laya.timer.frameOnce(1, this, function() {
				_G.sendMsg("PAI_SHOU_OVER")
			})
		}
		onClickCircle(t) {
			if (this.bClick) return;
			this.bClick = !0, this.commonEvent || (this.commonEvent = !0, GameStatistics.statisCommonEvent(3033));
			let e = new Laya.Point(Laya.stage.mouseX, Laya.stage.mouseY);
			if (mgrAlert.playParticleEffect("107", e, 1), 0 == this.state) UiHelper.playPopup(mgrI18n.getImage("pnl_inside_04.png"), e), this.combo = 0;
			else {
				let t = mgrInside.addPaiShouScore((this.curAnimTime + this.waitTime) / (this.ANIM_PAISHOU_DURATION + this.animWaitTime));
				UiHelper.playPopup(mgrI18n.getImage(`pnl_inside_0${t+4}.png`), e), 2 == t ? (this.combo++, this.combo) : this.combo = 0, 2 == this.state && (this.waitTime = this.animWaitTime), _G.sendMsg("CLICK_PAI_SHOU_CIRCLE", e)
			}
			mgrSound.playTalk("yllsd_10")
		}
	}
	class RoomInside extends RoomBase {
		constructor() {
			super(...arguments), this.resourceName = "res/unity/Conventional/map_03.ls"
		}
		onSceneLoaded(t) {
			this.resetMat(t)
		}
		resetMat(t) {
			if (t.allMaterial) return;
			let e = UiHelper.findAllMeshRenderers(t, null, !0);
			if (e) {
				let l = [];
				t.allMaterial = l;
				t: for (var a = 0; a < e.length; a++) {
					for (var i = e[a], s = i.sharedMaterials, n = [], o = 0; o < s.length; o++) {
						var r = s[o];
						if (!(r instanceof Laya.BlinnPhongMaterial)) {
							l.push(r);
							continue t
						} {
							let t = new LightMapMaterial;
							t.albedoTexture = r.albedoTexture, t.tilingOffset = r.tilingOffset, "map_03_05" == r.name ? t.renderMode = LightMapMaterial.RENDERMODE_CUTOUT : t.renderMode = LightMapMaterial.RENDERMODE_OPAQUE, n.push(t), l.push(t)
						}
					}
					i.sharedMaterials = n
				}
			}
		}
		dispose() {
			this.scene && this.switchToDay(!0), this.mainPos && (_G.pool.put(this.mainPos), _G.pool.put(this.mainRot), this.mainPos = null, this.mainRot = null), super.dispose()
		}
		changeToMain() {
			this.camera || (this.createCamera(this.mainCamera), this.createRoot(this.mainNode), this.mainCamera.active = !1, this.letterCamera.active = !1, this.manicureCamera.active = !1, this.manicureNpcCamera.active = !1, this.mainPos = _G.pool.get(Laya.Vector3), this.mainCamera.transform.localPosition.cloneTo(this.mainPos), this.mainRot = _G.pool.get(Laya.Quaternion), this.mainCamera.transform.localRotation.cloneTo(this.mainRot), this.mainFov = this.mainCamera.fieldOfView)
		}
		changeToManicureNpc() {
			this.camera || (this.createCamera(this.manicureNpcCamera), this.createRoot(this.manicureNpcNode), this.mainCamera.active = !1, this.letterCamera.active = !1, this.manicureCamera.active = !1, this.manicureNpcCamera.active = !1, this.mainPos = _G.pool.get(Laya.Vector3), this.manicureNpcCamera.transform.localPosition.cloneTo(this.mainPos), this.mainRot = _G.pool.get(Laya.Quaternion), this.manicureNpcCamera.transform.localRotation.cloneTo(this.mainRot), this.mainFov = this.manicureNpcCamera.fieldOfView)
		}
		moveToManicure() {
			let t = this.manicureCamera.transform;
			this.camera.transform.localPosition = t.localPosition, this.camera.transform.localRotation = t.localRotation, this.camera.fieldOfView = this.manicureCamera.fieldOfView;
			let e = this.manicureNode;
			this.root.transform.localPosition = e.transform.localPosition, this.root.transform.localRotation = e.transform.localRotation
		}
		moveToXinFeng(t) {
			let e = this.letterCamera.transform;
			UiHelper.tweenCamera(this.camera, 1.5, e.localPosition, e.localRotation, this.letterCamera.fieldOfView, cc.Ease.sineInOut, t)
		}
		moveToMain() {
			UiHelper.tweenCamera(this.camera, .6, this.mainPos, this.mainRot, this.mainFov, cc.Ease.sineInOut)
		}
		switchToNight() {
			let t = this.scene.allMaterial;
			for (var e = 0; e < t.length; e++) {
				var a = t[e];
				cc.tween(a, !0).to(.5, {}, {
					onUpdate: function(t, e) {
						var a = Mathf.lerp(t.albedoIntensity, .2, e);
						t.albedoIntensity = a
					}
				}).start()
			}
		}
		switchToDay(t = !1) {
			let e = this.scene.allMaterial;
			for (var a = 0; a < e.length; a++) {
				var i = e[a];
				t ? (i.albedoIntensity = 1, cc.clearTween(i)) : cc.tween(i, !0).to(.5, {}, {
					onUpdate: function(t, e) {
						var a = Mathf.lerp(t.albedoIntensity, 1, e);
						t.albedoIntensity = a
					}
				}).start()
			}
		}
		get mainCamera() {
			return this.scene.getChildByName("MainCamera")
		}
		get mainNode() {
			return this.scene.getChildByName("MainNode")
		}
		get letterCamera() {
			return this.scene.getChildByName("LetterCamera")
		}
		get letterNode() {
			return this.scene.getChildByName("LetterNode")
		}
		get manicureCamera() {
			return this.scene.getChildByName("MeijiaCamera")
		}
		get manicureNode() {
			return this.scene.getChildByName("MeijiaNode")
		}
		get manicureNpcCamera() {
			return this.scene.getChildByName("MeijiaNpcCamera")
		}
		get manicureNpcNode() {
			return this.scene.getChildByName("MeijiaNpcNode")
		}
	}
	class OrderPartItem extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/OrderPartItem.json", this._exportNodeInfo = {
				cc_icon: "Laya.Sprite",
				cc_spriteSelected: "Laya.Sprite",
				cc_labelNo: "Laya.Label",
				cc_tag: "Laya.Sprite",
				cc_spriteEmpy: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			UiHelper.addClickEvent(this.resNode, () => {
				_G.sendMsg("UI_CLICK_ORDER_PART_ITEM", this)
			})
		}
		fillPart(t, e) {
			if (!this.callable) return this.safeCall(this.fillPart, t, e);
			if (mgrI18n.trySetI18nImage(this.spriteEmpy, "pnl_inside_07.png"), t) {
				let e = db.get_item_db(t);
				this.icon.loadImage(e.icon), this.icon.visible = !0, this.spriteEmpy.visible = !1, this.labelNo.visible = !1, this.resNode.loadImage("res/ui/pnl_inside/item_bg.png")
			} else this.icon.visible = !1, this.spriteEmpy.visible = !e, this.labelNo.visible = !0, this.resNode.loadImage("res/ui/pnl_order/art_07.png");
			this.partId = t, this.spriteSelected.visible = !1
		}
		fillTypeOnly(t) {
			if (!this.callable) return this.safeCall(this.fillTypeOnly, t);
			if (t) {
				let e = db.get_part_type_db(t.partType);
				this.icon.loadImage(e.icon), this.icon.visible = !1, this.tag.loadImage(e.icon), this.tag.visible = !0, this.labelNo.visible = !0, mgrI18n.trySetI18nImage(this.spriteEmpy, "pnl_inside_07.png"), this.resNode.loadImage("res/ui/pnl_order/art_07.png"), this.spriteEmpy.visible = !1, this.partId = null, this.spriteSelected.visible = !1
			}
		}
		setSelected(t) {
			this.spriteSelected.visible = t
		}
		getIconWorldPos() {
			let t = new Laya.Point;
			return UiHelper.getSelfGlobalPos(this.icon, t), t
		}
	}
	class OrderItem extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/OrderItem.json", this._exportNodeInfo = {
				cc_head: "Laya.Sprite",
				cc_layout: "UIHVLayout",
				cc_price: "Laya.Text",
				cc_score: "Laya.Text"
			}, this.partItems = [], this.create()
		}
		dispose() {
			for (let t = 0; t < this.partItems.length; t++) this.partItems[t].dispose();
			super.dispose()
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this))
		}
		setData(t) {
			if (!this.callable) return this.safeCall(this.setData, t);
			this.orderData = t;
			let e = t.parts.length;
			e > 2 && (e = 2);
			for (let a = 0; a < e; a++) {
				let e = this.partItems[a];
				e ? e.show() : (e = new OrderPartItem).setParent(this.layout), e.fillTypeOnly(t.parts[a])
			}
			for (let e = t.parts.length; e < this.partItems.length; e++) this.partItems[e].hide();
			this.layout.updateLayout(), this.head.loadImage(db.get_role_db(t.roleId).head), this.price.text = t.czDb.money + "", this.score.text = t.czDb.partsScore[t.parts.length - 1] + ""
		}
		onClick() {
			this.orderData && (mgrAlert.openPanelLoading(UI_NAME.PanelOrder, this.orderData), GameStatistics.statisCommonEvent(3062))
		}
	}
	const scroll_width = 472,
		scroll_height = 540;
	class PanelOrderList extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "", this.panelStyle = 0
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite,
				a = .8,
				i = _G.canvasWidth / _G.canvasHeight;
			i < UIRoot.instance.uiMinRate && (a = Mathf.lerpFromInverseLerp(.8, .95, UIRoot.instance.uiMinRate, UIRoot.instance.canvasMinRate, i));
			let s = e.addChild(new Laya.Sprite).scale(a, a, !0);
			this.bg = s;
			let n = s.addChild(new Laya.Sprite).size(scroll_width, scroll_height).pos(-scroll_width / 2, -scroll_height / 2);
			this.scrollList = n.addComponent(ReuseScrollList), this.scrollList.itemWidth = scroll_width, this.scrollList.itemHeight = 116, this.scrollList.setVerticle(!0);
			let o = s.addChild(new Laya.Sprite).size(48, 48).pivot(24, 24).loadImage("res/ui/btns/btn_close.png").pos(scroll_width / 2 + 10, -scroll_height / 2 - 100);
			this.btnClose = o.addComponent(UIButton), UiHelper.addUIButtonClick(o, this.onClickClose.bind(this)), this.createFromNode(e)
		}
		buildUi() {
			let t = this.context;
			this.resNode.globalToLocal(t, !1), this.bg.pos(t.x, t.y), this.scrollList.itemCreateDeltaFrame = 3, this.scrollList.onItemCreate = function() {
				let t = new OrderItem;
				return t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}, this.scrollList.onItemChange = ((t, e) => {
				this.allOrders && t.setData(this.allOrders[e])
			}), this.allOrders = mgrInside.curOrders, this.scrollList.updateList(this.allOrders.length), this.registerMsg({
				ORDRE_OPENED: this.onMsgOrderOpen.bind(this)
			}), this.startProcMsg(), _G.isGuiding && this.scheduleOnce(.5, () => {
				let t = this.scrollList.getItem(0);
				t.callIfLoaded(() => {
					mgrGuide.registerGuideNode(GUD_REG_NODE.PANELIN_ORDER, t.node)
				})
			})
		}
		dispose() {
			this.stopProcMsg(), this.scrollList.clearAllItems(), super.dispose()
		}
		onMsgOrderOpen() {
			this.close()
		}
		onClickClose() {
			this.close(), _G.sendMsg("UI_CLOSE_ORDRE_LIST")
		}
	}
	class PanelInside extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelInside.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_topNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_buttonFree: "UIButton",
				cc_bottomLeftNode: "Laya.Sprite",
				cc_buttonStartPaiShou: "UIButton",
				cc_spritePaiShou: "Laya.Sprite",
				cc_paiShouLeftTime: "Laya.Label",
				cc_bottomRightNode: "Laya.Sprite",
				cc_buttonStartCaiZhuang: "UIButton",
				cc_spriteCaiZhuang: "Laya.Sprite",
				cc_cztgLeftTime: "Laya.Label",
				cc_bottomNode: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_enter_play", "")
		}
		addPreloadRes(t) {
			t.addModel("res/unity/Conventional/map_03.ls")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonFree.node, "pnl_main_13.png"), mgrI18n.trySetI18nImage(this.spritePaiShou, "pnl_play_07.png"), mgrI18n.trySetI18nImage(this.spriteCaiZhuang, "pnl_play_04.png"), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_PLAY), mgrGame.tryOpenPanelRankVideoTips(3), this.currencyBar = new CurrencyBar, this.currencyBar.setParent(this.topNode), this.bottomLeftNode.x = -200, this.bottomRightNode.x = 200, this.buttonClose.node.x = -120, this.buttonFree.node.x = -120, this.scoreBar = new ScoreBar, this.scoreBar.setParent(this.topLeftNode), this.scoreBar.x = -100, this.scoreBar.hide(), this.onMsgCopChange(), this.playButtons = new PlayBottomNode({
				onOpenCallback: this.close.bind(this),
				curIndex: 1
			}), this.playButtons.setParent(this.bottomNode), this.room = new RoomInside, this.room.load(this.onSceneLoaded.bind(this)), this.switchToInside(), this.registerMsg({
				PAI_SHOU_OVER: this.onMsgPaiShouOver.bind(this),
				CLICK_PAI_SHOU_CIRCLE: this.onMsgClickPaiShouCircle.bind(this),
				UI_CLOSE_ORDRE_LIST: this.onMsgCloseOrderList.bind(this),
				ORDRE_OPENED: this.onMsgOrderOpened.bind(this),
				ORDRE_FINISH: this.onMsgOrderFinish.bind(this),
				SHOW_YINDAO_EFFECT: this.onMsgShowYinDao.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this)
			}), this.startProcMsg(), this.addEffect("192").play()
		}
		dispose() {
			this.stopProcMsg(), this.clearPaiShouGame(), this.clearXinFeng(), this.playButtons && this.playButtons.dispose(), this.avatar && (this.avatar.destroy(), this.avatar = null), this.room && (this.room.dispose(), this.room = null), this.scoreBar && (this.scoreBar.dispose(), this.scoreBar = null), this.currencyBar && this.currencyBar.dispose(), this.instOrBanner.dispose(), mgrSdk.resetRecordState(), super.dispose()
		}
		clearPaiShouGame() {
			this.paiShouGame && (this.paiShouGame.dispose(), this.paiShouGame = null)
		}
		clearXinFeng() {
			this.xinfeng && (_G.poolManager.put(this.xinfeng), this.xinfeng = null)
		}
		clearLiHe() {
			this.lihe && (_G.poolManager.put(this.lihe), this.lihe = null)
		}
		update() {
			this.isFocus && this.paiShouGame && this.paiShouGame.update();
			let t = mgrInside.leftPaiShouTime;
			this.paiShouLeftTime.text = t > 0 ? Tools.formatTime(t) : "";
			let e = mgrInside.leftCztgTime;
			this.cztgLeftTime.text = e > 0 ? Tools.formatTime(e) : ""
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgPaiShouOver() {
			this.onPaiShouOver()
		}
		onMsgClickPaiShouCircle(t) {
			this.scoreBar.setValue(mgrInside.paiShouScore, 0, t)
		}
		onMsgCloseOrderList() {
			this.switchToInside(), this.clearLiHe(), this.clearXinFeng(), this.room.moveToMain(), cc.tween(this.buttonClose.node).to(.3, {
				x: 43
			}, cc.OPTION.SINE_IN).start()
		}
		onMsgOrderOpened() {
			this.clearLiHe(), this.clearXinFeng(), this.lihe = _G.poolManager.get(GModel, db.MODEL_DB_ID.lihe), this.lihe.setParent(this.room.root), this.lihe.playAnim(MODEL_ANIM.P_LIHE_IDLE, .1, !0), this.avatar.playBodyAnim(MODEL_ANIM.LIHE_IDLE, .1, !0), this.room.moveToMain()
		}
		onMsgOrderFinish(t) {
			let e = this.lihe.findChild("inside").transform.position,
				a = new Laya.Point;
			UiHelper.worldToScreen(this.room.camera, e, a);
			for (var i = 0; i < t.items.length; i++) {
				var s = t.items[i];
				UiHelper.playItemScaleAndJumpToEmpty(s.itemId, s.pos, a)
			}
			let n = mgrInside.curOrders.indexOf(t.order);
			~n ? (mgrInside.finishOrder(t.order, t.star), this.scoreBar.setValue(mgrInside.caiZhuangScore, .5, a), mgrInside.curOrders.splice(n, 1)) : console.error("PanelInside.onMsgOrderFinish: 找不到order"), this.scheduleOnce(.6, () => {
				this.avatar.playBodyAnim(MODEL_ANIM.LIHE_CLOSE, .1, !1), this.lihe.playAnim(MODEL_ANIM.P_LIHE_CLOSE, .1, !1), mgrSound.playSound("yllsd_11"), this.scheduleOnce(2.133, () => {
					this.clearLiHe(), this.avatar.playIdle(), 0 == mgrInside.curOrders.length ? (this.switchToInside(), this.onCztgFinish()) : this.playCztgAnim()
				})
			})
		}
		onMsgShowYinDao() {
			let t = this.addEffect("149");
			t.followTarget(this.buttonStartCaiZhuang.node, this.cameraEffect), t.play(), (t = this.addEffect("149")).followTarget(this.buttonStartPaiShou.node, this.cameraEffect), t.play()
		}
		onMsgAdvShowSuc(t) {
			if ("one_click_interact" == t.advName) {
				let e, a = t.params.gameName;
				a == mgrI18n.getText("panelInside.1") ? (GameStatistics.statisCommonEvent(2211), e = mgrInside.finishPaiShou(!0)) : a == mgrI18n.getText("panelInside.2") && (GameStatistics.statisCommonEvent(2212), e = mgrInside.finishCztg(!0)), mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
					score: 100,
					items: e
				})
			}
		}
		onMsgCopChange() {}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToMain(), this.avatar = new RoleAvatar, this.avatar.playIdle(), this.room.root.addChild(this.avatar)
		}
		clearEffect() {
			this.removeEffect("149"), this.removeEffect("149")
		}
		switchToInside() {
			this.scoreBar.moveOut(), this.playButtons.fadeIn(), UiHelper.playMoveIn(this.buttonClose.node, 43), UiHelper.playMoveIn(this.buttonFree.node, 41), UiHelper.playMoveIn(this.bottomLeftNode), UiHelper.playMoveIn(this.bottomRightNode), this.clearEffect()
		}
		switchToPaiShou() {
			this.scoreBar.moveIn(), this.scoreBar.setValue(0), this.playButtons.fadeOut(), UiHelper.playMoveOut(this.buttonClose.node, -120), UiHelper.playMoveOut(this.buttonFree.node, -120), UiHelper.playMoveOut(this.bottomLeftNode, -200), cc.tween(this.bottomRightNode).to(.3, {
				x: 200
			}, cc.OPTION.SINE_OUT).call(this.startPaiShou.bind(this)).start(), this.clearEffect(), this.scoreBar.checkColorEggMianJu()
		}
		startPaiShou() {
			this.paiShouGame || (this.paiShouGame = new PaiShouGame(this.avatar, this.room.camera), this.resNode.addChild(this.paiShouGame.circleNode), this.paiShouGame.start(), _G.isGuiding)
		}
		onPaiShouOver() {
			this.scheduleOnce(.5, () => {
				this.switchToInside()
			}), this.clearPaiShouGame();
			let t = mgrInside.finishPaiShou();
			mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
				score: mgrInside.paiShouScore,
				items: t
			})
		}
		switchToCaiZhuangTuiGuang() {
			this.scoreBar.moveIn(), this.scoreBar.setValue(0), this.playButtons.fadeOut(), UiHelper.playMoveOut(this.buttonClose.node, -120), UiHelper.playMoveOut(this.buttonFree.node, -120), UiHelper.playMoveOut(this.bottomLeftNode, -200), UiHelper.playMoveOut(this.bottomRightNode, 200), mgrInside.startCztg(), this.playCztgAnim()
		}
		playCztgAnim() {
			mgrInside.loadCaiZhuangTuiGuang(() => {
				this.clearXinFeng(), this.xinfeng = _G.poolManager.get(GModel, db.MODEL_DB_ID.xinfeng), this.xinfeng.setParent(this.room.letterNode), this.xinfeng.getAnimator().play(null, 0, 0), this.room.moveToXinFeng(this.showOrderList.bind(this))
			})
		}
		showOrderList() {
			let t = this.xinfeng.findChild("center").transform.position,
				e = new Laya.Point;
			UiHelper.worldToScreen(this.room.camera, t, e), mgrAlert.openPanelLoading(PanelOrderList, e)
		}
		onCztgFinish() {
			let t = mgrInside.finishCztg();
			mgrAlert.openPanelLoading(UI_NAME.PanelOverCommon, {
				score: mgrInside.caiZhuangScore,
				items: t
			}), cc.tween(this.buttonClose.node).to(.3, {
				x: 43
			}, cc.OPTION.SINE_IN).start()
		}
		on_click_buttonClose() {
			this.xinfeng ? this.clearXinFeng() : mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_buttonStartPaiShou() {
			GameStatistics.statisCommonEvent(3032), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_PAISHOU) ? this.switchToPaiShou() : mgrInside.checkPaiShouPlayable(() => {
				this.switchToPaiShou()
			})
		}
		on_click_buttonStartCaiZhuang() {
			GameStatistics.statisCommonEvent(3061), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_CZTG) ? this.switchToCaiZhuangTuiGuang() : mgrInside.checkCztgPlayable(() => {
				this.switchToCaiZhuangTuiGuang()
			})
		}
		on_click_buttonFree() {
			mgrPart.openPanelRoom(ROOM_TYPE.NORMAL, null, this.close.bind(this))
		}
	}
	class PanelInstall extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelInstall.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Image",
				cc_bg: "Laya.Image",
				cc_buttonOk: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			this.registerMsg({
				[BASE_MSG.SDK_INSTALL_SHORTCUT_SUC]: this.onMsgInstallSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgInstallSuc() {
			this.close()
		}
		on_click_buttonOk() {
			mgrSdk.installShortcut()
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelItemGet extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.panelLayer = PANEL_LAYER.DIALOG, this.resourceName = "res/ui/PanelItemGet.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteTitle: "Laya.Sprite",
				cc_itemIcon: "Laya.Image",
				cc_buttonFullScreenShare: "UIButton",
				cc_tag1: "Laya.Sprite",
				cc_tag2: "Laya.Sprite",
				cc_stars: "UIHVLayout",
				cc_buttonClose: "UIButton",
				cc_spriteOkParent: "Laya.Sprite",
				cc_buttonOk: "UIButton",
				cc_shareLayout: "UIHVLayout",
				cc_buttonNoTks: "UIButton",
				cc_buttonAdv: "UIButton",
				cc_textButtonAdvText: "Laya.Label",
				cc_spriteButtonAdvAdFlag: "Laya.Sprite",
				cc_moreCount: "Laya.Text",
				cc_buttonAdvThank: "UIButton",
				cc_spriteRewardLayout: "Laya.Sprite",
				cc_buttonRewardBox: "UIButton",
				cc_spriteRewardConfirm: "Laya.Sprite",
				cc_labelRewardHint: "Laya.Label"
			}, this.instOrBanner = new AdvInstOrBanner("enter_item_get", "banner_item_get"), this.rewardHit = !1, this.advFlag = !0
		}
		buildUi() {
			if (this.buttonNoTks.node.visible = !1, mgrI18n.trySetI18nImage(this.spriteTitle, "pnl_item_get_01.png"), !this.context) return;
			let t = this.context.item,
				e = db.get_item_db(t.itemId);
			this.itemIcon.skin = e.icon, this.buttonFullScreenShare.node.visible = !1, this.spriteRewardLayout.visible = !1, this.buttonAdvThank.node.visible = !1, 2 == e.type && 1 == e.subType ? (UiHelper.loadTagIconWithPart(t.itemId, this.tag1, this.tag2), UiHelper.setStars(this.stars, e.quality, 5)) : (this.tag1.visible = !1, this.tag2.visible = !1, this.stars.node.visible = !1);
			let a = new Laya.Point(0, 0);
			if (UiHelper.getSelfGlobalPos(this.itemIcon, a), mgrAlert.playParticleEffect("115", a, 2, 1, 1), mgrSound.playSound("yllsd_14"), 1 == db.cop.isItemGetShareFirst)
				if (null != this.context.shareIdx) {
					switch (this.buttonOk.node.visible = !0, this.shareBtn.shareMode) {
						case ShareMode.None:
							this.shareLayout.node.visible = !1, this.buttonClose.node.visible = !1, this.buttonAdv.node.visible = !1;
							break;
						case ShareMode.Normal:
							this.buttonAdv.node.visible = !1, this.buttonOk.node.visible = !1;
							break;
						case ShareMode.Video:
							if (this.buttonAdv.node.visible = !1, this.buttonOk.node.visible = !1, this.buttonClose.node.visible = !1, 0 != db.cop.b_video_share_finger) {
								let t = this.addEffect("135");
								t.setScale(1, 1, 1), t.followTarget(this.buttonOk.node, this.cameraEffect, this.buttonOk.node.width / 2), t.play()
							}
					}
					this.registerMsg({
						[BASE_MSG.SDK_SHARE_SUC]: this.onShareSuc.bind(this),
						[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onShareSuc.bind(this)
					}), this.startProcMsg()
				} else if (this.context.bAdv && mgrAdv.checkActive("more_award")) {
				if (mgrAdv.statisVideoShow("more_award"), this.shareLayout.node.visible = !1, this.buttonOk.node.visible = !1, this.buttonAdv.node.visible = !0, this.buttonClose.node.visible = !0, this.moreAwardCount = mgrOffline.offlinePerSecond * db.game_cnf.free_coin_time | 0, this.moreCount.text = GameUtility.convertCoinString(this.moreAwardCount, !1), 0 != db.cop.b_adv_reward_confirm) this.spriteRewardLayout.visible = !0, this.buttonClose.node.visible = !1, this.advFlag = !1, this.rewardHit = Math.random() > .5, this.spriteRewardConfirm.visible = Math.random() > .5, this.buttonAdv.node.x += 100, this.buttonOk.node.visible = !0, this.spriteOkParent.x -= 100, this.spriteOkParent.scaleX = .8, this.spriteOkParent.scaleY = .8, this.rewardHit ? this.labelRewardHint.text = mgrI18n.getText("panelItemGet.5") : this.labelRewardHint.text = mgrI18n.getText("panelItemGet.6");
				else if (0 != db.cop.b_adv_delay) {
					this.buttonClose.node.visible = !1;
					let t = db.cop.adv_thank_delay_time || .1;
					cc.tween(this.buttonAdvThank.node).delay(t).show().start()
				}
				this.registerMsg({
					[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
				}), this.startProcMsg()
			} else this.shareLayout.node.visible = !1, this.buttonClose.node.visible = !1, this.buttonAdv.node.visible = !1;
			else if (this.context.bAdv && mgrAdv.checkActive("more_award")) {
				if (mgrAdv.statisVideoShow("more_award"), this.shareLayout.node.visible = !1, this.buttonOk.node.visible = !1, this.moreAwardCount = mgrOffline.offlinePerSecond * db.game_cnf.free_coin_time | 0, this.moreCount.text = GameUtility.convertCoinString(this.moreAwardCount, !1), 0 != db.cop.b_adv_reward_confirm) this.spriteRewardLayout.visible = !0, this.buttonClose.node.visible = !1, this.advFlag = !1, this.rewardHit = Math.random() > .5, this.spriteRewardConfirm.visible = Math.random() > .5, this.buttonAdv.node.x += 100, this.buttonOk.node.visible = !0, this.spriteOkParent.x -= 100, this.spriteOkParent.scaleX = .8, this.spriteOkParent.scaleY = .8, this.rewardHit ? this.labelRewardHint.text = mgrI18n.getText("panelItemGet.5") : this.labelRewardHint.text = mgrI18n.getText("panelItemGet.6");
				else if (0 != db.cop.b_adv_delay) {
					this.buttonClose.node.visible = !1;
					let t = db.cop.adv_thank_delay_time || .1;
					cc.tween(this.buttonAdvThank.node).delay(t).show().start()
				}
				this.registerMsg({
					[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
				}), this.startProcMsg()
			} else null != this.context.shareIdx || (this.shareLayout.node.visible = !1, this.buttonClose.node.visible = !1, this.buttonAdv.node.visible = !1);
			MoreGameBanner.setBannerVisible(!0), Mathf.randomEnable(db.cop.ad_flag_hide_ratios[1] || 0) ? (this.spriteButtonAdvAdFlag.visible = !1, this.textButtonAdvText.x -= this.spriteButtonAdvAdFlag.width / 2) : this.spriteButtonAdvAdFlag.visible = !0
		}
		dispose() {
			mgrAdv.updateCdByType("enter_item_get"), this.stopProcMsg(), this.instOrBanner.dispose(), MoreGameBanner.setBannerVisible(!1), this.shareBtn && this.shareBtn.dispose(), super.dispose(), this.context && this.context.onClose && this.context.onClose(), PanelDialogCat.tryOpenPanel(2)
		}
		regGuide() {}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			if ("more_award" == t.advName) {
				this.advFlag = !0, this.buttonAdv.interactable = !1;
				let t = {
					itemId: "1001",
					count: this.moreAwardCount
				};
				mgrAlert.addAndAlert(t, 40, this.on_click_buttonOk.bind(this), !1)
			}
		}
		onShareSuc() {
			Laya.timer.frameOnce(1, this, this.on_click_buttonOk)
		}
		on_click_buttonOk() {
			if (this.isDisposed) return;
			if (0 != db.cop.b_adv_reward_confirm && this.rewardHit != this.spriteRewardConfirm.visible && !this.advFlag) return void this.on_click_buttonAdv();
			this.close();
			let t = this.context.item,
				e = db.get_item_db(t.itemId);
			this.context.autoSell ? mgrAlert.alertItemFromBtn({
				itemId: e.sellItemId,
				count: e.sellPrice
			}, this.itemIcon) : mgrAlert.alertItemFromBtn(this.context.item, this.itemIcon)
		}
		on_click_buttonClose() {
			this.on_click_buttonOk()
		}
		on_click_buttonAdv() {
			mgrAdv.statisVideoClick("more_award"), mgrAdv.dispatchAdv("more_award", null, !0) || mgrAlert.alertText(mgrI18n.getText("panelSign.8")), this.close()
		}
		on_click_buttonFullScreenShare() {}
		on_click_buttonRewardBox() {
			this.spriteRewardConfirm.visible = !this.spriteRewardConfirm.visible
		}
		on_click_buttonAdvThank() {
			1 == db.cop.b_adv_thank_prompt ? 1 == db.cop.b_adv_thank_prompt_tag ? mgrAlert.alertAdvDialog({
				desc: mgrI18n.getText("panelItemGet.7"),
				confirm: () => {
					this.on_click_buttonAdv()
				},
				confirmText: mgrI18n.getText("panelItemGet.8"),
				cancel: () => {
					this.on_click_buttonOk()
				}
			}) : mgrAlert.alertDialog({
				desc: mgrI18n.getText("panelItemGet.7"),
				confirm: () => {
					this.on_click_buttonAdv()
				},
				confirmText: mgrI18n.getText("panelItemGet.8"),
				close: () => {
					this.on_click_buttonOk()
				}
			}) : this.on_click_buttonOk()
		}
		on_click_buttonNoTks() {
			this.close()
		}
	}
	class PanelJoinSuc extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelJoinSuc.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_spriteEnd: "Laya.Sprite",
				cc_desc: "Laya.Label",
				cc_buttonClose: "UIButton",
				cc_buttonOk: "UIButton",
				cc_playerCount: "Laya.Label",
				cc_pvpStamp: "Laya.Sprite"
			}
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteEnd, "pnl_ssz_05.png"), this.playerCount.visible = !1, this.pvpStamp.visible = !1, this.pvpStamp.visible && mgrI18n.trySetI18nImage(this.pvpStamp, "pnl_pvp_05.png"), this.buttonClose.node.visible = !0, this.registerMsg({
				[BASE_MSG.SDK_SHARE_SUC]: this.onShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onShareSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.shareBtn && this.shareBtn.dispose(), super.dispose()
		}
		onShareSuc() {
			this.on_click_buttonOk()
		}
		on_click_buttonOk() {
			this.close()
		}
		on_click_buttonClose() {
			this.on_click_buttonOk()
		}
	}
	class PanelLanguageDialog extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelLanguageDialog.json", this._exportNodeInfo = {
				cc_buttonClose: "UIButton",
				cc_buttonZhcn: "UIButton",
				cc_nodeChoiceZhcn: "Laya.Sprite",
				cc_buttonEn: "UIButton",
				cc_nodeChoiceEn: "Laya.Sprite",
				cc_buttonId: "UIButton",
				cc_nodeChoiceId: "Laya.Sprite",
				cc_buttonPt: "UIButton",
				cc_nodeChoicePt: "Laya.Sprite",
				cc_buttonVi: "UIButton",
				cc_nodeChoiceVi: "Laya.Sprite"
			}
		}
		buildUi() {
			this.languageChoiceShow()
		}
		onCloseDialog() {
			this.close()
		}
		on_click_buttonClose() {
			this.onCloseDialog()
		}
		on_click_buttonZhcn() {
			mgrI18n.setLanguage(E_LANGUAGE.zhcn), this.languageChoiceShow(), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW"), this.close()
		}
		on_click_buttonEn() {
			mgrI18n.setLanguage(E_LANGUAGE.en), this.languageChoiceShow(), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW"), this.close()
		}
		on_click_buttonId() {
			mgrI18n.setLanguage(E_LANGUAGE.id), this.languageChoiceShow(), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW"), this.close()
		}
		on_click_buttonVi() {
			mgrI18n.setLanguage(E_LANGUAGE.vi), this.languageChoiceShow(), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW"), this.close()
		}
		on_click_buttonPt() {
			mgrI18n.setLanguage(E_LANGUAGE.pt), this.languageChoiceShow(), _G.sendMsg("MSG_CLOSE_LABGUAGE_VIEW"), this.close()
		}
		languageChoiceShow() {
			switch (FileRecord.setData("bNewRecord", {
					id: 1
				}), this.nodeChoiceZhcn.visible = !1, this.nodeChoiceVi.visible = !1, this.nodeChoicePt.visible = !1, this.nodeChoiceId.visible = !1, this.nodeChoiceEn.visible = !1, mgrI18n.getLanguage()) {
				case E_LANGUAGE.zhcn:
					this.nodeChoiceZhcn.visible = !0;
					break;
				case E_LANGUAGE.vi:
					this.nodeChoiceVi.visible = !0;
					break;
				case E_LANGUAGE.pt:
					this.nodeChoicePt.visible = !0;
					break;
				case E_LANGUAGE.id:
					this.nodeChoiceId.visible = !0;
					break;
				case E_LANGUAGE.en:
					this.nodeChoiceEn.visible = !0
			}
		}
	}
	class PanelLingGan extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelLingGan.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_lingGanIcon: "Laya.Sprite",
				cc_descNode: "Laya.Sprite",
				cc_barMaskValue: "UIBarMask",
				cc_spriteShiShang: "Laya.Sprite",
				cc_barLabel: "Laya.Text",
				cc_buttonOk: "UIButton",
				cc_reuseScrollView: "ReuseScrollList",
				cc_topLeftNode: "Laya.Sprite",
				cc_bottomRightNode: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite"
			}, this.curSuits = [], this._lastValue = 0
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteShiShang, "pnl_outside_01.png"), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_LINGGAN), GameStatistics.statisCommonEvent(3053), this.reuseScrollView.setVerticle(!0), this.reuseScrollView.itemWidth = 130, this.reuseScrollView.itemHeight = 190, this.reuseScrollView.onItemCreate = function() {
				return new LingGanItem(!1)
			}, this.reuseScrollView.onItemChange = ((t, e) => {
				t.setData(this.curSuits[e]), t.index = e
			}), this.initGame(), this.playUiAnim(), this.registerMsg({
				UI_CLICK_LING_GAN_ITEM: this.onMsgClickLingGanItem.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.reuseScrollView && this.reuseScrollView.clearAllItems(), super.dispose()
		}
		close(t) {
			t || cc.tween(this.mask).to(.2, cc.PROP.ALPHA0).start(), super.close(t)
		}
		onMsgClickLingGanItem(t) {
			if (t.suitId) {
				if (t.suitData.bAdv) {
					t.suitData.bAdv = !1;
					for (let t = mgrOutside.unusedSuits.length - 1; t >= 0; t--) mgrOutside.unusedSuits[t].bAdv && mgrOutside.unusedSuits.splice(t, 1)
				}
				let e = mgrOutside.unusedSuits.indexOf(t.suitData);
				~e && mgrOutside.unusedSuits.splice(e, 1), ~(e = this.curSuits.indexOf(t.suitData)) && (console.warn("onMsgClickLingGanItem 理论上不应该有", this.curSuits.length), this.curSuits[e] = null), this.curSuits[mgrOutside.chooseSuitIndex] && mgrOutside.unusedSuits.push(this.curSuits[mgrOutside.chooseSuitIndex]), this.curSuits[mgrOutside.chooseSuitIndex] = t.suitData, this.refreshShiShangZhi(!0);
				let a = this.reuseScrollView.getItem(mgrOutside.chooseSuitIndex);
				if (a) {
					let e = new Laya.Point(0, 0);
					UiHelper.getSelfGlobalPos(t.icon, e), a.flyIconIn(t.suitData, e)
				}
			}
		}
		initGame() {
			let t = [],
				e = [];
			mgrOutside.getLingGanSuits(t, e);
			let a = [];
			for (let e = 0; e < t.length; e++) a.push({
				suitId: t[e],
				bAdv: !1
			});
			if (mgrOutside.unusedSuits = a, this.fillDefaultSuit(), mgrAdv.getActive("suit_try")) {
				let t = !1;
				for (let i = 0; i < 3; i++) {
					let i = Mathf.randomFromArray(e, !0);
					if (!i) break;
					a.unshift({
						suitId: i,
						bAdv: !0
					}), t = !0
				}
				t && mgrAdv.statisVideoShow("suit_try")
			}
			this.lingGanIcon.loadImage(mgrOutside.curLingGanDb.lingGanIcon)
		}
		fillDefaultSuit() {
			let t = Math.min(mgrOutside.unusedSuits.length, 5);
			this.curSuits = mgrOutside.unusedSuits.splice(0, t), this.reuseScrollView.updateList(t), this.refreshShiShangZhi(!1)
		}
		playUiAnim() {
			this.bottomNode.y = 500, this.bottomNode.alpha = 0, cc.tween(this.bottomNode).delay(.3).to(.5, {
				y: 0,
				alpha: 1
			}, {
				easing: cc.Ease.sineIn
			}).start()
		}
		refreshBar(t, e, a) {
			a ? (this.barMaskValue.progressTo(Mathf.clamp01(t / e)), cc.tween(this.barLabel, !0).then(cc.numberTo(.3, this._lastValue, t, function(t) {
				return `${t}/${e}`
			})).start()) : (this.barMaskValue.progress = t / e, this.barLabel.text = `${t}/${e}`), this._lastValue = t
		}
		refreshShiShangZhi(t) {
			let e = 0;
			for (var a = 0; a < this.curSuits.length; a++) this.curSuits[a] && (e += mgrOutside.calcSuitShiShangZhi(this.curSuits[a].suitId));
			this.barLabel.text = e + "", this.refreshBar(e, mgrOutside.curLingGanDb.score, t)
		}
		on_click_buttonOk() {
			this.close();
			let t = mgrOutside.curLingGanDb.lingGanScore * (this._lastValue / mgrOutside.curLingGanDb.score) | 0;
			mgrOutside.lingGanScore += t;
			let e = new Laya.Point;
			UiHelper.getSelfGlobalPos(this.buttonOk.node, e), _G.sendMsg("ADD_SCORE", e)
		}
	}
	class LingGanItem extends ViewBase {
		constructor(t) {
			super(), this.create(), this.bSelectMsg = t
		}
		create() {
			let t = (new Laya.Sprite).size(130, 180);
			this.icon = t.addChild(new Laya.Sprite), this.icon.pos(65, 80, !0).size(110, 140).pivot(55, 70), this.value = t.addChild(new Laya.Label), this.value.pos(74, 155, !0), this.value.anchorX = .5, this.value.color = "#3154a8", this.value.fontSize = 20, this.adv = t.addChild((new Laya.Sprite).loadImage("res/ui/btns/video.png")).pos(3, 2, !0), this.createFromNode(t)
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this)), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"suit_try" == t.advName && t.params == this.suitId && _G.sendMsg("UI_CLICK_LING_GAN_ITEM", this)
		}
		setData(t) {
			if (this.suitData = t, this.suitId = t.suitId, this.suitId) {
				let e = db.get_suit_db(this.suitId);
				this.resNode.loadImage("res/ui/pnl_outside/bg_card.png"), this.icon.loadImage(e.icon), this.value.text = mgrOutside.calcSuitShiShangZhi(this.suitId) + "", this.adv.visible = t.bAdv
			} else this.resNode.loadImage("res/ui/pnl_outside/card_empty.png"), this.icon.texture = null, this.value.changeText(""), this.adv.visible = !1
		}
		flyIconIn(t, e) {
			this.suitData = t, this.suitId = t.suitId;
			let a = db.get_suit_db(this.suitId),
				i = new Laya.Point(0, 0);
			UiHelper.getSelfGlobalPos(this.icon, i), UiHelper.playImageScaleAndJump(a.icon, e, i, null, () => {
				this.destroyed || this.setData(this.suitData)
			})
		}
		onClick() {
			this.bSelectMsg ? this.suitData.bAdv ? (mgrAdv.statisVideoClick("suit_try"), mgrAdv.dispatchAdv("suit_try", this.suitId, !0)) : _G.sendMsg("UI_CLICK_LING_GAN_ITEM", this) : (mgrOutside.chooseSuitIndex = this.index, mgrAlert.openPanelLoading(UI_NAME.PanelSuitSelect))
		}
	}
	class PanelLottery extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelLottery.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_roleISprite: "Laya.Sprite",
				cc_buttonLottery: "UIButton",
				cc_itemNode: "Laya.Sprite",
				cc_tipLabel: "Laya.Label",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_lottery", "banner_lottery"), this.circleEffects = []
		}
		buildUi() {
			this.initItems(), this.fillCount(), this.fillItem(), mgrSzz.canLottery() ? UiHelper.playBreathe(this.buttonLottery.node) : this.grayLottery()
		}
		dispose() {
			this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		initItems() {
			this.items = mgrSzz.getAwardItems();
			for (let t = 0; t < this.items.length; t++) this.items[t].index = t;
			Mathf.shuffle(this.items)
		}
		fillItem() {
			let t = this.items,
				e = mgrSzz.awardIndex % mgrSzz.lottery_each_count;
			for (let a = 0; a < t.length; a++) {
				let i = t[a],
					s = db.get_item_db(i.itemId),
					n = this.itemNode.getChildAt(a);
				n.skin = s.icon;
				let o = n.getChildByName("stars"),
					r = n.getChildByName("count");
				n.getChildByName("focus").visible = !1, 2 == s.type ? (o.visible = !0, r.visible = !1, UiHelper.setStars(o.getComponent(UIHVLayout), s.quality, 5)) : (o.visible = !1, r.visible = !0, r.text = "+" + i.count), n.gray = i.index < e
			}
			let a = Math.min(mgrSzz.awardIndex / mgrSzz.lottery_each_count | 0, db.game_cnf.szz_lottery_image.length - 1);
			this.roleISprite.loadImage(db.game_cnf.szz_lottery_image[a]);
			for (let t = 0; t < 8; t++) {
				let e = (t + 4) % 8;
				UiHelper.playScaleOnce(this.itemNode.getChildAt(e), .1 * t + .4, .3)
			}
		}
		fillCount() {
			mgrSzz.canLottery() ? this.tipLabel.text = "" : this.tipLabel.text = String.format(mgrI18n.getText("panelLottery.2"), (db.game_cnf.like_lottery_count - mgrSzz.likeCount).toString())
		}
		grayLottery() {
			Laya.UIUtils.gray(this.buttonLottery.node, !0), this.buttonLottery.interactable = !1, cc.clearTween(this.buttonLottery.node)
		}
		getAward(t) {
			this.fillCount(), this.buttonClose.interactable = !0, mgrAlert.addAndAlert(t, 41), _G.sendMsg("LOTTERY_SUC"), this.fillItem()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonLottery() {
			if (!mgrSzz.canLottery()) return void mgrAlert.alertText(mgrI18n.getText("panelLottery.3"));
			GameStatistics.statisCommonEvent(3014), 1 == mgrSzz.awardIndex && GameStatistics.statisCommonEvent(7024);
			let t = mgrSzz.awardIndex % mgrSzz.lottery_each_count,
				e = mgrSzz.makeLottery(),
				a = mgrSzz.awardIndex % mgrSzz.lottery_each_count;
			if (e) {
				this.grayLottery(), this.buttonClose.interactable = !1, this.scheduleOnce(2, () => {
					a < t && this.initItems(), this.getAward(e);
					for (let t = 0; t < this.circleEffects.length; t++) this.circleEffects[t].stop()
				});
				let i = .1;
				for (let t = 0; t < 8; t++) {
					let e = this.itemNode.getChildAt(t),
						a = this.circleEffects[t];
					a || (a = this.addEffect("142"), this.circleEffects[t] = a);
					let s = new Laya.Point(0, 0);
					UiHelper.getSelfGlobalPos(e, s);
					let n = new Laya.Vector3(s.x, s.y, 0);
					this.global2camer(n, n), cc.tween(this).delay(i * t).call(function() {
						a.play(n)
					}).start()
				}
			}
		}
	}
	class GameCross {
		constructor(t, e, a) {
			this._x = null, this._y = null, this._type = e, Timer.callLater(.5, () => {
				this.initPosition(t, a)
			})
		}
		static create(t, e = 0, a = 0) {
			this._list.push(new GameCross(t, e, a))
		}
		static setVisible(t) {
			for (let e = 0; e < this._list.length; e++) this._list[e].visible = t
		}
		static get isEmpty() {
			return 0 == this._list.length
		}
		set visible(t) {
			this._visible = t, t ? null != this._x && mgrSdk.openCrossRecommend(this._x, this._y, this._type) : mgrSdk.closeCrossRecommend()
		}
		initPosition(t, e) {
			let a = t.localToGlobal(new Laya.Point(0, 0));
			this._x = Math.round(a.x / _G.canvasWidth * Laya.Browser.clientWidth), this._y = Math.round(a.y / _G.canvasHeight * Laya.Browser.clientHeight), this._visible && (this.visible = !0)
		}
	}
	GameCross._list = [];
	class MoreGameIcon {
		constructor(t) {
			this.destroyed = !1, this._msgHandler || (this._sprite = t, this._msgHandler = new MsgHandler, this._msgHandler.registerListeners({
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this),
				[BASE_MSG.SDK_OPEN_JUMP_RESULT]: this.onMsgOpenJumpResult.bind(this)
			}), this._msgHandler.startProcMsg(), t.setVisible(!1), this.onMsgCopChange())
		}
		dispose() {
			this.destroyed = !0, this._msgHandler && (this._msgHandler.stopProcMsg(), this._msgHandler = null, this._sprite = null)
		}
		onMsgCopChange() {
			!this._sprite.visible && mgrSdk.getSubCop("b_more_game_icon") && this.changeIndex()
		}
		onMsgOpenJumpResult(t) {
			if ("single" == t.type) {
				let e = t.jumpInfo;
				this.fillData(e)
			}
		}
		fillData(t) {
			t && (this.data || (cc.tween(this._sprite, !0).repeatForever(cc.tween().delay(1).to(.1, {
				rotation: 5
			}).to(.2, {
				rotation: -5
			}).to(.2, {
				rotation: 5
			}).to(.1, {
				rotation: 0
			}).delay(1).call(this.changeIndex.bind(this))).start(), UiHelper.addClickEvent(this._sprite, this.onClickIcon.bind(this))), this.data = t[0], this.data && this.data.url && (this._sprite.setVisible(!0), this._sprite.loadImage(this.data.url)))
		}
		changeIndex() {
			mgrSdk.openJump("single")
		}
		onClickIcon() {
			mgrSdk.jumpOtherGame(this.data.index, "single")
		}
	}
	class PanelMain extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelMain.json", this._exportNodeInfo = {
				cc_touchNode: "Laya.Image",
				cc_topNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_barLevel: "UIBarMask",
				cc_labelLevel: "Laya.Label",
				cc_buttonShopLvup: "UIButton",
				cc_buttonCoin: "UIButton",
				cc_coinBar: "UIBarMask",
				cc_coinCount: "Laya.Label",
				cc_buttonDaily: "UIButton",
				cc_buttonChallenge: "UIButton",
				cc_buttonRank: "UIButton",
				cc_nodeButtonUlMoreGame: "Laya.Sprite",
				cc_buttonUlMoreGame: "UIButton",
				cc_nodeButtonInstall: "Laya.Sprite",
				cc_buttonInstall: "UIButton",
				cc_gameIcon: "Laya.Sprite",
				cc_nodeMoreGame: "Laya.Box",
				cc_buttonMoreGame: "UIButton",
				cc_buttonCpTest: "UIButton",
				cc_spriteCpTest: "Laya.Sprite",
				cc_topRightNode: "Laya.Sprite",
				cc_settingBox: "Laya.Box",
				cc_imageSettingBg: "Laya.Image",
				cc_buttonSettingBox: "UIButton",
				cc_buttonSign: "UIButton",
				cc_buttonSetting: "UIButton",
				cc_buttonRoleTest: "UIButton",
				cc_spriteRoleTest: "Laya.Sprite",
				cc_spriteBubble: "Laya.Sprite",
				cc_buttonSuit: "UIButton",
				cc_nodeButtonVideoRank: "Laya.Box",
				cc_buttonVideoRank: "UIButton",
				cc_nodeSubscribe: "Laya.Box",
				cc_buttonSubscribe: "UIButton",
				cc_nodeMoreGameBox: "Laya.Box",
				cc_buttonMoreGameBox: "UIButton",
				cc_cross1: "Laya.Sprite",
				cc_cross2: "Laya.Sprite",
				cc_buttonMainQuest: "UIButton",
				cc_mainQuestTitle: "Laya.Label",
				cc_mainQuestTip: "Laya.Label",
				cc_mainQuestRedTip: "Laya.Sprite",
				cc_buttonHotActive: "UIButton",
				cc_spriteHotIcon: "Laya.Sprite",
				cc_spritebtnHotBg: "Laya.Sprite",
				cc_buttonSwitchRole: "UIButton",
				cc_spriteSwitchRole: "Laya.Sprite",
				cc_buttonDanceDraw: "UIButton",
				cc_spriteDanceDraw: "Laya.Sprite",
				cc_buttonClassRoom: "UIButton",
				cc_spriteClassRoom: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_buttonBox: "UIButton",
				cc_spriteBox: "Laya.Sprite",
				cc_buttonFree: "UIButton",
				cc_spriteFree: "Laya.Sprite",
				cc_buttonPlay: "UIButton",
				cc_spritePlay: "Laya.Sprite",
				cc_buttonDream: "UIButton",
				cc_spriteDream: "Laya.Sprite",
				cc_buttonEntrust: "UIButton",
				cc_spriteEntrust: "Laya.Sprite",
				cc_nodeGuidEntrust: "Laya.Sprite",
				cc_boxMagic: "Laya.Box",
				cc_barMask1: "UIBarMask",
				cc_barMask2: "UIBarMask",
				cc_barMask3: "UIBarMask",
				cc_buttonMagic: "UIButton",
				cc_leftAnimNode: "Laya.Sprite"
			}, this.firstGame = !1, this.spine = null, this.isSettingBoxOpen = !1, this.guideFinger = null, this._callFuncs = [], this.mainQuestTween = !1, this.magicCount = 0
		}
		addPreloadRes(t) {
			mgrPart.addPartResList(mgrPart.partsWear, t)
		}
		buildUi() {
			Logger.warn("----------- panel main 1"), mgrRank.setPlayerName(), Logger.warn("----------- panel main 2"), mgrSdk.getFollowOfficialAccountState(), Logger.warn("----------- panel main 3"), mgrI18n.trySetI18nImage(this.buttonShopLvup.node, "pnl_main_22.png"), mgrI18n.trySetI18nImage(this.buttonDaily.node, "pnl_main_19.png"), mgrI18n.trySetI18nImage(this.buttonChallenge.node, "hallowmas_main_02.png"), mgrI18n.trySetI18nImage(this.spriteCpTest, "pnl_main_06.png"), mgrI18n.trySetI18nImage(this.buttonSign.node, "pnl_main_23.png"), mgrI18n.trySetI18nImage(this.buttonSuit.node, "pnl_main_27.png"), mgrI18n.trySetI18nImage(this.spriteRoleTest, "pnl_main_29.png"), Logger.warn("----------- panel main 4"), mgrI18n.trySetI18nImage(this.spriteSwitchRole, "pnl_main_28.png"), mgrI18n.trySetI18nImage(this.spriteDanceDraw, "pnl_main_07.png"), mgrI18n.trySetI18nImage(this.spriteClassRoom, "pnl_main_05.png"), Logger.warn("----------- panel main 5"), mgrI18n.trySetI18nImage(this.spriteBox, "hallowmas_main_13.png"), mgrI18n.trySetI18nImage(this.spriteFree, "hallowmas_main_15.png"), mgrI18n.trySetI18nImage(this.spritePlay, "pnl_main_16.png"), mgrI18n.trySetI18nImage(this.spriteDream, "hallowmas_main_14.png"), mgrI18n.trySetI18nImage(this.spriteEntrust, "hallowmas_main_16.png"), mgrI18n.trySetI18nImage(this.spritebtnHotBg, "pnl_main_hot.png"), Logger.warn("----------- panel main 6"), _G.isGuiding || (this.instOrBanner = new AdvInstOrBanner("enter_main", null), this.instOrBanner.onFocus(!0));
			let t = db.cop.hot_activity_list_v2[0],
				e = db.get_hot_activity_db(t);
			e && this.spriteHotIcon.loadImage(e.main_icon), Logger.warn("----------- panel main 7"), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_MAIN) || (Logger.warn("----------- panel main 8"), this.context && this.context.data ? Logger.warn("----------- panel main 9") : (!PanelMain.offlineShowed && mgrOffline.offlineProfit > 0 ? Logger.warn("----------- panel main 10") : (Logger.warn("----------- panel main 11"), mgrGame.tryOpenAdvertisingTips() || (Logger.warn("----------- panel main 12"), mgrGame.tryOpenPanelRankVideoTips(0) || (Logger.warn("----------- panel main 13"), mgrSign.canGetAward() ? (Logger.warn("----------- panel main 14"), mgrPanel.openPanel(UI_NAME.PanelSign)) : mgrDailyQuest.hasCommitQuest() ? (Logger.warn("----------- panel main 15"), mgrPanel.openPanel(UI_NAME.PanelQuest)) : (Logger.warn("----------- panel main 16"), mgrDailyQuest.getCompleteCount() >= db.game_cnf.daily_quest_count && !mgrDailyQuest.isDailyAward && (Logger.warn("----------- panel main 17"), mgrPanel.openPanel(UI_NAME.PanelQuest))))), Logger.warn("----------- panel main 18"), mgrGame.tryShowPanelFollow()), Logger.warn("----------- panel main 19"), mgrGame.isSupportSubscribe() && !_G.isGuiding && mgrGame.isSubScrbeCd() && (Logger.warn("----------- panel main 20"), mgrAlert.openPanelLoading(UI_NAME.PanelSubscribe))), Logger.warn("----------- panel main 21"), db.cop.isSupportFavoriteGuide && (Logger.warn("----------- panel main 22"), mgrSdk.addGameToMyFavorite())), (mgrOffline.firstPlayGame || this.context && this.context.data) && (this.firstGame = !0), Logger.warn("----------- panel main 23"), this.imageSettingBg.scaleX = 0, this.buttonShopLvup.node.x = -170, this.buttonDaily.node.x = -150, this.buttonChallenge.node.x = -150, this.firstGame && (this.buttonInstall.node.x = -150, this.gameIcon.x = -150), this.buttonSetting.node.scale(0, 0), this.buttonSign.node.scale(0, 0), this.buttonSetting.node.visible = !1, this.buttonSign.node.visible = !1, this.nodeSubscribe.visible = mgrGame.isSupportSubscribe(), this.buttonSubscribe.node.x = 150, this.buttonMoreGameBox.node.x = 150, this.buttonVideoRank.node.x = 150, this.settingBox.x = 150, this.buttonRank.node.visible = !1, this.buttonRoleTest.node.visible = mgrAdv.checkActive("role_test"), this.spriteBubble.scale(0, 0), this.buttonDanceDraw.node.visible = mgrAdv.checkActive("draw_dance"), this.buttonDanceDraw.node.x = 260, this.buttonCpTest.node.visible = mgrAdv.checkActive("cp_test_show"), this.buttonCpTest.node.x = -260, this.buttonSwitchRole.node.x = 260, this.buttonHotActive.node.x = 260, this.buttonClassRoom.node.x = 260, this.buttonSuit.node.x = 150, this.buttonMainQuest.node.x = 260, this.buttonMainQuest.node.visible = !1, this.buttonMainQuest.transition = UIButton.TRANSITION_NONE, this.firstGame && (this.buttonMoreGame.node.x = -150), this.bottomNode.y = 200, this.currencyBar = new CurrencyBar, this.currencyBar.setParent(this.topNode), this.currencyBar.y = -240, this.roleLevel = new RoleLevel(this.barLevel, this.labelLevel), this.buttonCoin.stopPropagation = !0, Logger.warn("----------- panel main 24"), mgrOffline.firstPlayGame && (mgrOffline.firstPlayGame = !1, mgrOffline.resetOfflineTime(), PanelMain.offlineShowed = !0), this.barMask1.style = UIBarMask.STYLE_VERTICAL, this.barMask1.progress = 0, this.barMask2.style = UIBarMask.STYLE_VERTICAL, this.barMask2.progress = 0, this.barMask3.style = UIBarMask.STYLE_VERTICAL, this.barMask3.progress = 0, this.boxMagic.visible = !1, Logger.warn("----------- panel main 25"), this.playUiEffect(), Logger.warn("----------- panel main 26"), this.init3D(), Logger.warn("----------- panel main 27"), this.initTip(), Logger.warn("----------- panel main 28"), this.onMsgCopChange(), Logger.warn("----------- panel main 29"), mgrSdk.getShortcutState(), mgrSound.playMusic("bj_001", !0), this.spriteSwitchRole._orgPosY = this.spriteSwitchRole.y, cc.tween(this.spriteSwitchRole).repeatForever(cc.tween().to(.3, {
				y: this.spriteSwitchRole._orgPosY + 5
			}).to(.6, {
				y: this.spriteSwitchRole._orgPosY - 5
			}).to(.3, {
				y: this.spriteSwitchRole._orgPosY
			})).start(), this.buttonDanceDraw.node.visible && (this.spriteDanceDraw._orgPosY = this.spriteDanceDraw.y, cc.tween(this.spriteDanceDraw).repeatForever(cc.tween().to(.3, {
				y: this.spriteDanceDraw._orgPosY + 5
			}).to(.6, {
				y: this.spriteDanceDraw._orgPosY - 5
			}).to(.3, {
				y: this.spriteDanceDraw._orgPosY
			})).start()), this.spriteClassRoom._orgPosY = this.spriteClassRoom.y, cc.tween(this.spriteClassRoom).repeatForever(cc.tween().to(.3, {
				y: this.spriteClassRoom._orgPosY + 5
			}).to(.6, {
				y: this.spriteClassRoom._orgPosY - 5
			}).to(.3, {
				y: this.spriteClassRoom._orgPosY
			})).start(), this.buttonCpTest.node.visible && (cc.clearTween(this.spriteCpTest), UiHelper.playRotCycle(this.spriteCpTest)), this.buttonRoleTest.node.visible && cc.tween(this.spriteBubble).repeatForever(cc.tween().to(.1, {
				scaleX: 1,
				scaleY: 1
			}).to(.1, {
				rotation: 20
			}).to(.2, {
				rotation: -20
			}).to(.1, {
				rotation: 0
			}).to(.1, {
				rotation: 20
			}).to(.2, {
				rotation: -20
			}).to(.1, {
				rotation: 0
			}).delay(2).to(.1, {
				scaleX: 0,
				scaleY: 0
			}, cc.OPTION.BACK_IN).delay(3)).start(), this.registerMsg({
				GUIDE_ALL_FINISH: this.onMsgGuideAllFinish.bind(this),
				SIGN_UPDATE: this.onMsgSignUpdate.bind(this),
				SUIT_UPDATE: this.onMsgSuitUpdate.bind(this),
				FOLLOW_TIP_UPDATE: this.onMsgFollowTipUpdate.bind(this),
				LOTTERY_SUC: this.onMsgLotterySuc.bind(this),
				PART_JUMP_FINISH: this.close.bind(this),
				JOIN_LEVEL: this.close.bind(this),
				JOIN_SZZ: this.close.bind(this),
				ENTER_PVP: this.close.bind(this),
				ADVERTISING_JUMP_FINISH: this.close.bind(this),
				DANCE_ROLE_START_ANIM: this.close.bind(this),
				CLASS_ROLE_START_ANIM: this.close.bind(this),
				START_CONTRACT: this.close.bind(this),
				WAKEUP: this.wakeup.bind(this),
				JUMP_PANEL: this.onMsgJumpPanel.bind(this),
				CLASS_ROLE_LEVEL_CHANGE: this.onMsgClassRoleLevelChange.bind(this),
				MANICURE_STAGE_FINISH: this.onMsgManicureStageFinish.bind(this),
				SUBSCRIBE_SUCCESS: this.onMsgSubscribeSuccess.bind(this),
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this),
				[BASE_MSG.QUEST_STATE_CHANGE]: this.onMsgQuestStateChange.bind(this),
				[BASE_MSG.SDK_INSTALL_SHORTCUT_SUC]: this.onMsgInstallShortcutSuc.bind(this),
				[BASE_MSG.SDK_GET_SHORTCUT_STATE_SUC]: this.onMsgGetShortcutStateSuc.bind(this),
				MSG_I18N_REFRESH: this.onMsgI18nRefresh.bind(this)
			}), this.startProcMsg(), Logger.warn("----------- panel main 30"), PanelMain.enterHuDongGame && (PanelMain.enterHuDongGame = !1, GameStatistics.statisOnStageEnd(7505));
			let a = this.addEffect("192");
			a.play(), this.effectSnow = a, Logger.warn("----------- panel main 31")
		}
		dispose() {
			if (this.stopProcMsg(), this.cleawrEffectRoot(), this.clearShexiangji(), this.clearPlayer(), this.clearGemstone(), this.clearEffect(), this.spine && (_G.poolManager.put(this.spine), this.spine = null), this.avatar) {
				let t = this.avatar.baseBody.findChild("Bip001");
				t.transform.localScale.setValue(1, 1, 1), t.transform.localScale = t.transform.localScale, this.avatar.destroy()
			}
			this.questTip && (this.questTip.dispose(), this.challengeTip.dispose(), this.signTip.dispose(), this.settingBoxTip.dispose(), this.levelTip.dispose(), this.dreamTip.dispose(), this.boxTip.dispose(), this.suitTip.dispose(), this.classTip.dispose()), this.room && this.room.dispose(), this.roleLevel && this.roleLevel.dispose(), this.currencyBar && this.currencyBar.dispose(), this.moreGameIcon && this.moreGameIcon.dispose(), this.instOrBanner && this.instOrBanner.dispose(), super.dispose(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELMAIN_BUTTONPLAY), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELMAIN_BUTTONWEITUO), mgrGuide.getCurGuideId() == GUD_EVENT.GOTO_CAT_COIN && _G.sendMsg("GUIDE_FORCE_CLOSE")
		}
		regGuide() {
			mgrGuide.registerGuideNode(GUD_REG_NODE.PANELMAIN_BUTTONPLAY, this.buttonPlay.node), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELMAIN_BUTTONWEITUO, this.buttonEntrust.node)
		}
		onFocus(t) {
			if (super.onFocus(t), this.instOrBanner && this.instOrBanner.onFocus(t), this.checkBaiduTouTiao(t), _G.sendMsg("UI_MAIN_FOCUS_CHANGE", t), t) {
				for (let t = this._callFuncs.length - 1; t >= 0; t--) this._callFuncs.shift()();
				this.effectSnow && this.effectSnow.play()
			}
		}
		show() {
			this.avatar && this.avatar.resumeAnim(), this.buttonPlay && this.playUiEffect(), super.show()
		}
		hide() {
			this.avatar && this.avatar.pauseAnim(), super.hide()
		}
		updateCoin() {
			let t = this.coinBar.progress,
				e = mgrCat.getCoinPercent();
			this.coinBar.progress = e, this.coinCount.text = mgrCat.curCoinCount + "", this.scheduleOnce(5, this.updateCoin), 1 == e ? (this.isFocus && mgrGuide.dispatchGuide(GUD_EVENT.GOTO_CAT_COIN) && mgrGuide.registerGuideNode(GUD_REG_NODE.PANELMAIN_BUTTONCOIN, this.buttonCoin.node), t != e && UiHelper.playTipRot(this.buttonCoin.node)) : 1 == t && cc.clearTween(this.buttonCoin.node), this.isFocus && BaseFacade.mItem.enoughItem("1001", 1e4) && mgrGuide.dispatchGuide(GUD_EVENT.GOTO_DREAM) && mgrGuide.registerGuideNode(GUD_REG_NODE.PANELMAIN_BUTTONDREAM, this.buttonDream.node)
		}
		onMsgGuideAllFinish() {
			this.autoOpenPanelInSequence(), mgrSign.isTodayFinish || mgrAlert.openPanelLoading(UI_NAME.PanelSign)
		}
		onMsgI18nRefresh() {
			this.updateMainQuest()
		}
		onMsgSignUpdate() {
			this.signTip.updateTip(), this.settingBoxTip.updateTip()
		}
		onMsgSuitUpdate() {
			this.suitTip.updateTip()
		}
		onMsgFollowTipUpdate() {
			BaseFacade.mItem.isOwned("1026")
		}
		onMsgLotterySuc() {
			this.challengeTip.updateTip()
		}
		onMsgJumpPanel(t) {
			switch (console.log("QT_PanelJump", "" + t), t) {
				case JUMP_PANEL.SKINCARE:
				case JUMP_PANEL.MANG_HE:
				case JUMP_PANEL.INSIDE:
					mgrJumpPanel.jumpTo(t);
					break;
				case JUMP_PANEL.DREAM:
					this.on_click_buttonDream();
					break;
				case JUMP_PANEL.ENTRUST:
					this.on_click_buttonEntrust();
					break;
				case JUMP_PANEL.PVP:
					mgrPvp.isJoin ? mgrAlert.openGameLoading(UI_NAME.PanelPvp) : (GameStatistics.statisCommonEvent(6001), mgrAlert.openPanelLoading(UI_NAME.PanelPvpCard));
					break;
				case JUMP_PANEL.SWITCH_ROLE:
					this.on_click_buttonSwitchRole();
					break;
				case JUMP_PANEL.ROLE_TEST:
					this.on_click_buttonRoleTest();
					break;
				case JUMP_PANEL.DANCE_DRAW:
					this.on_click_buttonDanceDraw();
					break;
				case JUMP_PANEL.CP_TEST:
					this.on_click_buttonCpTest();
					break;
				case JUMP_PANEL.CLASS_ROOM:
					this.on_click_buttonClassRoom()
			}
		}
		onMsgClassRoleLevelChange() {
			this.avatar && this.avatar.tryShowXiuBiao(!0)
		}
		onMsgManicureStageFinish() {
			this.avatar && this.avatar.refreshFingernails()
		}
		onMsgSubscribeSuccess() {
			this.nodeSubscribe.setVisible(mgrGame.isSupportSubscribe())
		}
		onMsgItemChange(t) {
			switch (t.itemId) {
				case "1001":
					this.dreamTip.updateTip();
					break;
				case "1010":
					this.levelTip.updateTip()
			}
		}
		onMsgCopChange() {
			this.nodeMoreGame.setVisible(!!mgrSdk.getSubCop("b_more_game_list")), this.nodeButtonUlMoreGame.setVisible(db.cop.isULMoreGame), this.nodeButtonInstall.setVisible(db.cop.isSupportInstallShortcut && !mgrSdk.isInstallShortcut), this.nodeButtonInstall.visible && (cc.clearTween(this.nodeButtonInstall), UiHelper.playRotCycle(this.nodeButtonInstall)), this.nodeMoreGameBox.setVisible(db.cop.isSupportChannelMoreGameBox && !!mgrSdk.getSubCop("b_more_game_box")), this.nodeSubscribe.setVisible(mgrGame.isSupportSubscribe()), this.moreGameIcon || (this.moreGameIcon = new MoreGameIcon(this.gameIcon)), this.checkBaiduTouTiao(this.isFocus), this.nodeButtonVideoRank.setVisible(db.cop.isSupportVideoRank)
		}
		onMsgQuestStateChange(t) {
			switch (console.log("QT_PANELMAIN", "" + t.questDb.type), t.questDb.type) {
				case 0:
					this.updateMainQuest();
					break;
				case 8:
					this.questTip.updateTip();
					break;
				case 11:
					this.classTip.updateTip()
			}
		}
		onMsgInstallShortcutSuc() {
			this.nodeButtonInstall.setVisible(!1), cc.clearTween(this.buttonInstall.node);
			mgrAlert.addAndAlert({
				itemId: "1000",
				count: 50
			}, 42)
		}
		onMsgGetShortcutStateSuc() {
			this.nodeButtonInstall.setVisible(db.cop.isSupportInstallShortcut && !mgrSdk.isInstallShortcut), this.nodeButtonInstall.visible && (cc.clearTween(this.buttonInstall.node), UiHelper.playRotCycle(this.buttonInstall.node))
		}
		playUiEffect() {
			let t = this.getEffect("114");
			t.setScale(.8, .8, .8), t.followTarget(this.labelLevel, this.cameraEffect, 0, -48), t.play(), (t = this.getEffect("155")).followTarget(this.buttonPlay.node, this.cameraEffect), t.play()
		}
		init3D() {
			if (this.context && this.context.data) {
				this.room = this.context.data.room;
				try {
					this.onSceneLoaded()
				} catch (t) {
					console.error("error:"), console.error(t)
				}
			} else this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))
		}
		onSceneLoaded() {
			if (Logger.warn("----------- panel main 26 - 1"), this.addChild(this.room.scene), Logger.warn("----------- panel main 26 - 1 - 1"), this.resNode.setChildIndex(this.room.scene, 0), Logger.warn("----------- panel main 26 - 1 - 2"), this.room.changeToMain(), Logger.warn("----------- panel main 26 - 2"), this.context) {
				if (mgrGuide.getCurGuideId() == GUD_EVENT.ENTER_MAIN) {
					Logger.warn("----------- panel main 26 - 3"), this.boxMagic.visible = !0, this.buttonMagic.clickDelta = .05;
					let t = this.addEffect("135");
					t.setScale(1, 1, 1), t.followTarget(this.buttonMagic.node, this.cameraEffect, 100), t.play(), this.guideFinger = t, Laya.timer.frameLoop(1, this, this.refreshMagic)
				}
				Logger.warn("----------- panel main 26 - 4");
				let t = this.context.data,
					e = t.avatar,
					a = t.shexiangji;
				this.avatar = e, this.shexiangji = a, this.gemstone = t.gemstone;
				let i = new AnimatorFixedPlayer,
					s = db.get_role_contract_db(mgrGame.contractIndex);
				i.addModelAnim(e.baseBody, s.bodyAnimationId), i.addModelAnim(e.baseFace, s.faceAnimationId), i.addModelAnim(a, s.shexiangjiAnimationId), i.addTimeCallback(60 / 180, () => {
					Logger.warn("----------- panel main 26 - 7"), this.clearGemstone()
				}), i.addTimeCallback(161 / 180, () => {
					Logger.warn("----------- panel main 26 - 8");
					let t = this.shexiangji.findChild("camera");
					this.room.camera.transform.position = t.transform.position, this.room.camera.transform.rotation = t.transform.rotation, this.room.camera.fieldOfView = t.fieldOfView, t.active = !1, this.room.camera.active = !0;
					let e = UiHelper.findAllShurikenParticleSystem(this.shexiangji.findChild("e_sky"));
					for (let t = 0; t < e.length; t++) e[t].stop();
					this.room.cameraIndex = -1, this.room.moveCamerToMain(() => {
						Logger.warn("----------- panel main 26 - 9"), this.room.mapNode.active = !0, UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 1, 1, 1), UiHelper.setTransformVec3Prop(this.room.skybox.transform, "localScale", 7, 7, 7), this.room.playFadeout(), mgrGuide.sendMsgKey("START_MAIN"), this.setUiMenuVisible(!0), this.playRoleAnim()
					})
				}), i.addTimeCallback(1, () => {
					Logger.warn("----------- panel main 26 - 10"), this.cleawrEffectRoot(), this.clearShexiangji(), this.boxMagic.visible = !1, this.guideFinger && this.guideFinger.hide(), this.context && this.context.bSwitch && (Logger.warn("----------- panel main 26 - 11"), _G.isGuiding = !1, mgrGame.tryOpenAdvertisingTips() || mgrGame.tryOpenPanelRankVideoTips(0) || (mgrSign.canGetAward() ? mgrPanel.openPanel(UI_NAME.PanelSign) : mgrDailyQuest.hasCommitQuest() ? mgrPanel.openPanel(UI_NAME.PanelQuest) : mgrDailyQuest.getCompleteCount() >= db.game_cnf.daily_quest_count && !mgrDailyQuest.isDailyAward && mgrPanel.openPanel(UI_NAME.PanelQuest)), mgrGame.tryShowPanelFollow(), mgrGame.isSupportSubscribe() && !_G.isGuiding && mgrGame.isSubScrbeCd() && mgrAlert.openPanelLoading(UI_NAME.PanelSubscribe), PanelDialogCat.tryOpenPanel(3)), Logger.warn("----------- panel main 26 - 12")
				}), i.play(), Logger.warn("----------- panel main 26 - 5"), this.effectRoot = new GModel(db.MODEL_DB_ID.come), this.effectRoot.create(), this.effectRoot.callIfLoaded(() => {
					Logger.warn("----------- panel main 26 - 13");
					let t = db.get_role_contract_db(mgrGame.contractIndex),
						e = _G.poolManager.get(Particle, t.effectId);
					e.setParent(this.effectRoot.node), e.play(), this.effectCome = e
				}), this.effectRoot.setParent(this.room.root)
			} else {
				switch (Logger.warn("----------- panel main 26 - 6"), mgrPart.partsWear[13] ? this.room.camera.fieldOfView = 40 : this.room.camera.fieldOfView = 35, this.avatar = new RoleAvatar, this.avatar.on("Exit", this, t => {
						this.destroyed || t == MODEL_ANIM.MAIN_IDLE && mgrGame.playRandomAnim(this.avatar, "panelmain")
					}), this.room.root.addChild(this.avatar), !PanelMain.offlineShowed && !_G.isGuiding && mgrOffline.offlineProfit > 0 && (mgrGame.roleState = 0), mgrGame.roleState) {
					case 3:
						mgrGame.roleState = 2;
					case 2:
						this.playRoleAnim(), this.setUiMenuVisible(!0);
						break;
					case 0:
						this.avatar.active = !1, this.room.switchToNight(!0), UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 5, 5, 5), this.showGemstone(!0);
						break;
					case 1:
						this.gotoSleep(), this.setUiMenuVisible(!1)
				}
				this.initTouch(), mgrGuide.sendMsgKey("START_MAIN")
			}
			this.avatar.tryShowXiuBiao()
		}
		playRoleAnim() {
			mgrGame.isPiJuan ? this.avatar.playPiJuan() : (this.avatar.playIdle(), this.avatar.playZaYang())
		}
		clearShexiangji() {
			this.shexiangji && (this.shexiangji.dispose(), this.shexiangji = null)
		}
		cleawrEffectRoot() {
			this.effectRoot && (this.effectRoot.dispose(), this.effectRoot = null), this.effectCome && (_G.poolManager.put(this.effectCome), this.effectCome = null)
		}
		initTouch() {
			this.touchNode.on(Laya.Event.CLICK, this, () => {
				switch (mgrGame.roleState) {
					case 2:
						this.avatar.stopJingZi(), mgrGame.isPiJuan ? this.avatar.playPiJuan() : this.avatar.playHuDong();
						break;
					case 0:
						if (this.gemstone && this.gemstone.isLoaded) {
							let t = Laya.Point.TEMP;
							UiHelper.worldToScreen(this.room.camera, this.gemstone.transform.position, t), Mathf.distance2(t.x - Laya.stage.mouseX, t.y - Laya.stage.mouseY) <= 150 && this.wakeup()
						}
				}
			})
		}
		checkBaiduTouTiao(t) {
			db.cop.isSupportRecommendationBtn && (GameCross.isEmpty && (GameCross.create(this.cross1, 0), "baidu" == mgrSdk.h5_channel && GameCross.create(this.cross2, 1)), GameCross.setVisible(t))
		}
		checkAlert() {}
		initTip() {
			this.questTip = new UITip(this.buttonDaily.node, function() {
				if (mgrDailyQuest.hasCommitQuest()) return 0;
				return mgrDailyQuest.getCompleteCount() >= db.game_cnf.daily_quest_count && !mgrDailyQuest.isDailyAward ? 0 : -1
			}), this.signTip = new UITip(this.buttonSign.node, function() {
				return mgrSign.canGetAward() ? 0 : -1
			}, 60), this.settingBoxTip = new UITip(this.settingBox, function() {
				return mgrSign.canGetAward() ? 0 : -1
			}, 60), this.challengeTip = new UITip(this.buttonChallenge.node, function() {
				return BaseFacade.mItem.getItemCount("1014") > 0 || mgrAdv.getActive("free_like") ? 0 : mgrSzz.canLottery() ? 0 : mgrPvp.curTicket > 0 || mgrAdv.getActive("pvp") || mgrPvp.isPvpAwardCanReceive() ? 0 : -1
			}), this.levelTip = new UITip(this.buttonEntrust.node, function() {
				return BaseFacade.mItem.enoughItem("1010", 1) || mgrAdv.getActive("weituo") ? 0 : -1
			}), this.dreamTip = new UITip(this.buttonDream.node, function() {
				return mgrDream.isTip ? 0 : -1
			}), this.boxTip = new UITip(this.buttonBox.node, function() {
				return (0 == mgrMangHe.count || mgrAdv.getActive("open_manghe")) && mgrMangHe.canGetItem() ? 0 : -1
			}), this.suitTip = new UITip(this.buttonSuit.node, function() {
				return mgrSuit.hasAwardSuit() ? 0 : -1
			}), this.classTip = new UITip(this.spriteClassRoom, function() {
				let t = mgrColorEggs.getAllQuest(EGGS_TYPE.CLASS);
				for (let e = 0; e < t.length; e++) {
					if (mgrColorEggs.getState(t[e]) == EGGS_STATE.AWARD) return 0
				}
				return -1
			}), this.mainQuestRedTip.visible = !1
		}
		callWhenFocus(t) {
			this.isFocus ? t() : this._callFuncs.push(t)
		}
		setUiMenuVisible(t) {
			t && this.scheduleOnce(.9, () => {
				UiHelper.playMoveIn(this.buttonShopLvup.node, 9, .3, .3), UiHelper.playMoveIn(this.buttonDaily.node, 0, .3, .4), UiHelper.playMoveIn(this.buttonChallenge.node, 0, .3, .5), this.firstGame && (UiHelper.playMoveIn(this.buttonMoreGame.node, 0, .3, .6), UiHelper.playMoveIn(this.buttonInstall.node, 0, .3, .7), UiHelper.playMoveIn(this.gameIcon, 0, .3, .7)), this.buttonCpTest.node.visible && UiHelper.playMoveIn(this.buttonCpTest.node, 150, .3, .8), UiHelper.playMoveIn(this.settingBox, 0, .3, .3), this.buttonRoleTest.node.visible && UiHelper.playMoveIn(this.buttonRoleTest.node, 0, .3, .4), UiHelper.playMoveIn(this.buttonSwitchRole.node, -160, .3, .4), this.buttonDanceDraw.node.visible && UiHelper.playMoveIn(this.buttonDanceDraw.node, -160, .3, .6), UiHelper.playMoveIn(this.buttonHotActive.node, -160, .3, .6), UiHelper.playMoveIn(this.buttonClassRoom.node, -160, .3, .6), UiHelper.playMoveIn(this.buttonSuit.node, 0, .3, .6), UiHelper.playMoveIn(this.buttonVideoRank.node, 0, .3, .7), UiHelper.playMoveIn(this.buttonSubscribe.node, 0, .3, .7), UiHelper.playMoveIn(this.buttonMoreGameBox.node, 0, .3, .7), BaseFacade.mQuest.isAllFinish(0) || _G.isGuiding || (this.buttonMainQuest.node.visible = !0, UiHelper.playMoveIn(this.buttonMainQuest.node, -7, .3, .8), this.updateMainQuest()), cc.tween(this.bottomNode).to(.3, {
					y: 0
				}, cc.OPTION.BACK_OUT).start(), this.currencyBar.moveIn(() => {
					this.coinBar.progress = 0, this.updateCoin(), this.initTouch()
				})
			})
		}
		autoOpenPanelInSequence() {
			mgrSign.isTodayFinish ? this.autoOpenChnPanel() : this.callWhenFocus(this.autoOpenChnPanel.bind(this))
		}
		autoOpenChnPanel() {
			db.cop.isSupportInstallShortcut && !mgrSdk.isInstallShortcut ? mgrAlert.tryOpenInstall() : db.cop.isSupportFindMinigames && (FileRecord.getData("findme_opened") || FileRecord.setData("findme_opened", !0))
		}
		gotoSleep() {
			mgrGame.roleState = 0, mgrRes.loadRes(db.get_animation_db(MODEL_ANIM.CHEN_SHUI).path, RES_TYPE.ANIMATIONCLIP, this.onSleepLoaded.bind(this))
		}
		onSleepLoaded() {
			this.avatar.stopAnimation();
			let t = this.avatar.baseBody.findChild("Bip001");
			this.clearEffect();
			let e = _G.poolManager.get(Particle, "122");
			this.chenShuiEffect = e, e.setParent(this.room.root), e.followTarget(t), e.followScale(!0), e.play(), e = _G.poolManager.get(Particle, "123"), this.tuoWeiEffect = e, e.setParent(this.room.root), e.followTarget(t), e.play(), this.clearPlayer();
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.avatar.baseBody, MODEL_ANIM.CHEN_SHUI).addTimeCallback(.15 / 3, () => {
				this.room.playJinEffect()
			}).addTimeCallback(.8, () => {
				this.room.switchToNight()
			}).addTimeCallback(1, () => {
				this.avatar.active = !1, this.showGemstone(), this.setUiMenuVisible(!0), this.activeCol()
			}).play(), this.sleepPlayer = a, this.inactiveCol(.006)
		}
		inactiveCol(t) {
			let e = UiHelper.getComponentsInChildren(this.avatar, BoneCollider);
			for (var a = e.length - 1; a >= 0; a--) e[a].radius = t;
			let i = UiHelper.getComponentsInChildren(this.avatar, BoneManager);
			for (a = i.length - 1; a >= 0; a--) i[a].setDisplacementFactor(1)
		}
		activeCol() {
			let t = UiHelper.getComponentsInChildren(this.avatar, BoneCollider);
			for (var e = t.length - 1; e >= 0; e--) t[e].radius = t[e].preRadius;
			let a = UiHelper.getComponentsInChildren(this.avatar, BoneManager);
			for (e = a.length - 1; e >= 0; e--) a[e].setDisplacementFactor(a[e].displacementFactor)
		}
		showGemstone(t = !1) {
			this.clearGemstone();
			let e = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			this.gemstone = _G.poolManager.get(GModel, e), this.gemstone.setParent(this.room.gemstoneNode), this.gemstone.initPaint(), this.gemstone.initAnimator(), this.gemstone.playAnim(MODEL_ANIM.GEMSTONE_YUANDIAN, 0, !0), this.gemstone.setPosition(0, 0, 0), this.gemstone.setRotation(0, 180, 0), t || this.gemstone.callIfLoaded(() => {
				this.gemstone.sharedMaterial.playDissolveIn(1)
			})
		}
		clearPlayer() {
			this.sleepPlayer && (this.sleepPlayer.dispose(), this.sleepPlayer = null)
		}
		clearGemstone() {
			this.gemstone && (this.gemstone.dispose(), this.gemstone = null)
		}
		clearEffect() {
			this.chenShuiEffect && (_G.poolManager.put(this.chenShuiEffect), this.chenShuiEffect = null, _G.poolManager.put(this.tuoWeiEffect), this.tuoWeiEffect = null)
		}
		wakeup() {
			mgrGame.roleState = 3, this.room.playChuEffect(), this.gemstone && (this.gemstone.isLoaded ? this.gemstone.sharedMaterial.playDissolveOut(.5, 0, this.clearGemstone.bind(this)) : this.clearGemstone()), this.scheduleOnce(.5, () => {
				let t = new ResLoader;
				t.add(db.get_animation_db(MODEL_ANIM.XING_LAI).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_YUANDIAN).path, RES_TYPE.ANIMATIONCLIP), t.add(db.get_effect_db("121").res, RES_TYPE.PREFAB3D), t.add(db.get_effect_db("123").res, RES_TYPE.PREFAB3D), t.setLoadingCallback(this.onWakeupLoaded.bind(this)), t.loadAll()
			})
		}
		onWakeupLoaded() {
			this.avatar.stopAnimation(), this.avatar.baseBody.getAnimator().speed = 0, this.avatar.active = !0;
			let t = this.avatar.baseBody.findChild("Bip001");
			this.clearEffect();
			let e = _G.poolManager.get(Particle, "121");
			this.chenShuiEffect = e, e.setParent(this.room.root), e.followTarget(t), e.followScale(!0), e.play(), e = _G.poolManager.get(Particle, "123"), this.tuoWeiEffect = e, e.setParent(this.room.root), e.followTarget(t), e.play(), this.clearPlayer();
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.avatar.baseBody, MODEL_ANIM.XING_LAI).addTimeCallback(.25, () => {}).addTimeCallback(76 / 120, () => {
				this.room.switchToDay()
			}).addTimeCallback(1, () => {
				this.activeCol(), mgrGame.roleState = 2, this.avatar.baseBody.getAnimator().speed = 1, mgrOffline.offlineProfit > 0 && (PanelMain.offlineShowed = !0, mgrAlert.openPanelLoading(UI_NAME.PanelOffline)), this.playRoleAnim(), this.setUiMenuVisible(!0)
			}).play(), this.sleepPlayer = a, this.inactiveCol(.03)
		}
		updateMainQuest() {
			let t = BaseFacade.mQuest.getQuestDbByType(0);
			t.sort(sort_quest_db_by_order), this.clearMainQuestEffect(), this.gotoGuideId = null;
			for (let e = 0; e < t.length; e++) {
				let a = t[e];
				switch (BaseFacade.mQuest.query(a.id).state) {
					case QUEST_STATE.COMMITABLE:
						return this.mainQuestTitle.text = mgrI18n.getText(a.tlite), this.mainQuestTip.text = mgrI18n.getText("panelMain.3"), this.mainQuestTip.color = "#fffc18", this.curMainQuestDb = a, this.mainQuestRedTip.visible = !0, void this.playMainQuestAnim();
					case QUEST_STATE.UPDATABLE:
						return this.mainQuestTitle.text = mgrI18n.getText(a.tlite), this.mainQuestTip.text = mgrI18n.getText("panelMain.4"), this.mainQuestTip.color = "#cd0370", this.curMainQuestDb = a, this.mainQuestRedTip.visible = !1, this.playMainQuestAnim(), void this.checkMainQuestCanBeFinish()
				}
			}
			this.curMainQuestDb = null, cc.tween(this.buttonMainQuest.node, !0).to(.3, {
				x: 260
			}, cc.OPTION.SINE_IN).hide().start()
		}
		checkMainQuestCanBeFinish() {
			let t = this.curMainQuestDb.goals;
			for (let e = 0; e < t.length; e++) {
				switch (db.get_goal_db(t[e]).actionId) {
					case ACTION_ID.OPEN_BOX:
						if (!mgrMangHe.canGetItem()) return BaseFacade.mQuest.commit(this.curMainQuestDb.id), void this.updateMainQuest()
				}
			}
		}
		playMainQuestAnim() {
			this.mainQuestTween && cc.clearTween(this.buttonMainQuest.node), this.mainQuestTween = !0, cc.tween(this.buttonMainQuest.node).repeatForever(cc.tween().to(.1, {
				rotation: 5
			}).to(.2, {
				rotation: -5
			}).to(.2, {
				rotation: 5
			}).to(.2, {
				rotation: -5
			}).to(.1, {
				rotation: 0
			}).delay(3)).start()
		}
		clearMainQuestEffect() {
			this.removeEffect("135")
		}
		refreshMagic() {
			if (this.destroyed) return;
			this.magicCount += Timer.deltaTime;
			let t = this.magicCount / 2,
				e = Math.max(this.magicCount - 2, 0) / 2,
				a = Math.max(this.magicCount - 4, 0) / 2;
			this.barMask1.progress = t, this.barMask2.progress = e, this.barMask3.progress = a, a >= 1 && Laya.timer.clear(this, this.refreshMagic)
		}
		on_click_buttonDaily() {
			mgrAlert.openPanelLoading(UI_NAME.PanelQuest)
		}
		on_click_buttonBox() {
			mgrJumpPanel.jumpTo(JUMP_PANEL.MANG_HE)
		}
		on_click_buttonSuit() {
			mgrAlert.openPanelLoading(UI_NAME.PanelSuit)
		}
		on_click_buttonSign() {
			mgrAlert.openPanelLoading(UI_NAME.PanelSign)
		}
		on_click_buttonRank() {
			mgrAlert.openPanelLoading(UI_NAME.PanelRank)
		}
		on_click_buttonFree() {
			mgrPart.openPanelRoom(ROOM_TYPE.NORMAL, null, this.close.bind(this))
		}
		on_click_buttonMoreGame() {
			mgrAlert.openPanelLoading(UI_NAME.PanelMoreGame)
		}
		on_click_buttonUlMoreGame() {
			mgrSdk.openUlMoreGame()
		}
		on_click_buttonInstall() {
			mgrAlert.tryOpenInstall()
		}
		on_click_buttonPlay() {
			if (PanelMain.enterHuDongGame = !0, GameStatistics.statisOnStageStart(7505), _G.isGuiding) mgrAlert.openGameLoading(UI_NAME.PanelSkincare, null, this.close.bind(this));
			else if (0 != mgrGame.roleState) {
				switch (GameStatistics.statisCommonEventOnce(3031), this.gotoGuideId) {
					case GUD_EVENT.QUEST_GOTO_OUT:
						return void mgrAlert.openGameLoading(UI_NAME.PanelOutside, null, this.close.bind(this));
					case GUD_EVENT.QUEST_GOTO_IN:
						return void mgrAlert.openGameLoading(UI_NAME.PanelInside, null, this.close.bind(this));
					case GUD_EVENT.QUEST_GOTO_SKINCARE:
						return void mgrAlert.openGameLoading(UI_NAME.PanelSkincare, null, this.close.bind(this))
				}
				mgrSkincare.isXinQingFull ? mgrAlert.openGameLoading(UI_NAME.PanelInside, null, this.close.bind(this)) : mgrAlert.openGameLoading(UI_NAME.PanelSkincare, null, this.close.bind(this))
			} else this.wakeup()
		}
		on_click_buttonDream() {
			mgrAlert.openPanelLoading(UI_NAME.PanelDream)
		}
		on_click_buttonEntrust() {
			mgrAlert.openPanelLoading(UI_NAME.PanelPhone)
		}
		on_click_buttonShopLvup() {
			mgrAlert.openPanelLoading(UI_NAME.PanelShopLvup)
		}
		on_click_buttonCoin() {
			if (mgrCat.curCoinCount > 0) {
				let t = Laya.Point.TEMP.setTo(26, 26);
				this.buttonCoin.node.localToGlobal(t, !1);
				for (let e = 0; e < 6; e++) UiHelper.playBezierTo("res/icon/gold.png", t, mgrAlert.uiCoinPos, .8 + .05 * e, .45);
				mgrCat.getCoin(), this.updateCoin(), mgrSound.playTalk("yllsd_21"), PanelDialogCat.tryOpenPanel(0)
			} else mgrAlert.alertText(mgrI18n.getText("panelMain.8"))
		}
		on_click_buttonSetting() {
			mgrAlert.openPanelLoading(UI_NAME.PanelSetting)
		}
		on_click_buttonMainQuest() {
			if (this.curMainQuestDb)
				if (BaseFacade.mQuest.isCommitable(this.curMainQuestDb.id)) {
					let t = BaseFacade.mQuest.commit(this.curMainQuestDb.id);
					t && mgrAlert.alertItems(t)
				} else if (this.gotoGuideId = this.curMainQuestDb.guideId, this.gotoGuideId) {
				let t = this.getEffect("135");
				switch (t.setScale(1, 1, 1), this.gotoGuideId) {
					case GUD_EVENT.QUEST_GOTO_OUT:
					case GUD_EVENT.QUEST_GOTO_IN:
						t.align(this.buttonPlay.node, this.cameraEffect, 100, 10);
						break;
					case GUD_EVENT.QUEST_GOTO_MOHE:
						t.align(this.buttonBox.node, this.cameraEffect, 100, 10);
						break;
					case GUD_EVENT.QUEST_GOTO_DREAM:
						t.align(this.buttonDream.node, this.cameraEffect, 100, 10);
						break;
					case GUD_EVENT.QUEST_GOTO_WEITUO:
						t.align(this.buttonEntrust.node, this.cameraEffect, 70, 0);
						break;
					case GUD_EVENT.QUEST_GOTO_CAT_SHOP:
						t.align(this.buttonShopLvup.node, this.cameraEffect, 100, 10);
						break;
					case GUD_EVENT.QUEST_GOTO_SZZ:
						t.align(this.buttonChallenge.node, this.cameraEffect, 100, 10);
						break;
					case GUD_EVENT.QUEST_GOTO_SKINCARE:
						t.align(this.buttonPlay.node, this.cameraEffect, 100, 10);
						break;
					case GUD_EVENT.QUEST_GOTO_PVP:
						t.align(this.buttonChallenge.node, this.cameraEffect, 100, 10);
						break;
					case GUD_EVENT.QUEST_GOTO_SUIT:
						t.align(this.buttonSuit.node, this.cameraEffect, 100, 10);
						break;
					default:
						this.removeEffect("135")
				}
			}
		}
		on_click_buttonSwitchRole() {
			PanelContract.openPanel(this.close.bind(this), {
				bSwitch: !0
			})
		}
		on_click_buttonRoleTest() {
			mgrAlert.openPanelLoading(UI_NAME.PanelRoleTest, null, this.close.bind(this))
		}
		on_click_buttonMagic() {}
		on_click_buttonVideoRank() {
			GameStatistics.statisCommonEvent(9304), mgrAlert.openPanelLoading(UI_NAME.PanelRankVideo)
		}
		on_click_buttonDanceDraw() {
			mgrJumpPanel.jumpTo(JUMP_PANEL.DANCE_DRAW), GameStatistics.statisCommonEvent(2101)
		}
		on_click_buttonSettingBox() {
			this.buttonSettingBox.interactable = !1;
			let t = [this.buttonSetting.node, this.buttonSign.node],
				e = t.slice(),
				a = -30;
			t.forEach(function(t) {
				t.x = a, a -= 60
			});
			let i = 0;
			if (this.isSettingBoxOpen) {
				this.buttonSettingBox.node.loadImage("res/ui/pnl_main/arrow_left.png"), cc.tween(this.imageSettingBg).to(.4 / 6 * e.length, {
					scaleX: 0
				}).start();
				for (let t = e.length - 1; t >= 0; t--) {
					let a = e[t];
					a.scale(1, 1), cc.tween(a).delay(i).to(.08, {
						scaleX: 0,
						scaleY: 0
					}).call(() => {
						a.visible = !1
					}).start(), i += .08
				}
				this.isSettingBoxOpen = !1
			} else {
				this.buttonSettingBox.node.loadImage("res/ui/pnl_main/arrow_right.png"), cc.tween(this.imageSettingBg).to(.4 / 6 * e.length, {
					scaleX: 1 / 6 * e.length
				}).start();
				for (let t = 0; t < e.length; t++) {
					let a = e[t];
					a.scale(0, 0), a.visible = !0, cc.tween(a).delay(i).to(.08, {
						scaleX: 1,
						scaleY: 1
					}).start(), i += .08
				}
				this.isSettingBoxOpen = !0
			}
			Timer.callLater(i, () => {
				this.buttonSettingBox.interactable = !0
			}, this)
		}
		on_click_buttonCpTest() {
			GameStatistics.statisCommonEvent(2301), mgrAlert.openPanelLoading(UI_NAME.PanelCpTestPreview)
		}
		on_click_buttonSubscribe() {
			GameStatistics.statisCommonEvent(2505, 0), mgrSdk.addSubscribe([1])
		}
		on_click_buttonClassRoom() {
			mgrAlert.openPanelLoading(UI_NAME.PanelClassRoom)
		}
		on_click_buttonMoreGameBox() {
			mgrSdk.opentChannelMoreGameBox()
		}
		on_click_buttonChallenge() {
			mgrAlert.openPanelLoading(UI_NAME.PanelChallengePreview)
		}
		on_click_buttonHotActive() {
			mgrAlert.openPanelLoading(UI_NAME.PanelHotActivity)
		}
	}
	PanelMain.offlineShowed = !1, PanelMain.enterHuDongGame = !1;
	class sManicureAvatar {
		constructor() {
			this.SERIALIZE_VERSION = 1, this.SERIALIZE_FORMAT_TYPES = [MPartType.SHAPE, MPartType.VARNISH, MPartType.DECAL_BOTTOM, MPartType.DECAL_FRONT, MPartType.NAIL_DECORATION, MPartType.RING, MPartType.HAND_DECORATION, MPartType.WRIST_DECORATION, MPartType.BACKGROUND], this.setToDefault(), this._registerCmdHander()
		}
		_registerCmdHander() {
			let t = {
				CMD_AVATAR_PART_REMOVE: this._onCmdPartRemove.bind(this),
				CMD_AVATAR_PART_REPLACE: this._onCmdPartReplace.bind(this)
			};
			this.cmdHanders = t
		}
		onCmd(t, e) {
			let a = this.cmdHanders[t];
			a ? a(e) : console.log("[warn] sAvatar.onCmd handler !found! cmd.", t)
		}
		setToDefault() {
			let t = {},
				e = db.get_manicure_part_type_db_map();
			for (let a in e) {
				let i = e[a],
					s = {};
				if (0 != i.defaultId)
					for (let t = 1; t <= i.slotCount; t++) s[t] = {
						partId: i.defaultId
					};
				t[i.id] = s
			}
			this.allParts = t
		}
		getPartId(t, e) {
			let a = e || 1,
				i = this.allParts[t];
			if (!i) return null;
			let s = i[a];
			return s ? s.partId : null
		}
		isPartTypeUsed(t) {
			this.getUsedPartIds();
			let e = db.get_manicure_part_type_db(t),
				a = [t];
			a.push(e.subTypes);
			for (let t in a) {
				let e = a[t],
					i = this.allParts[e];
				if (!i) return !1;
				for (let t in i) {
					if (i[t].partId) return !0
				}
			}
			return !1
		}
		isPartUsed(t) {
			let e = this.getUsedPartIds();
			for (let a in e) {
				if (e[a] == t) return !0
			}
			return !1
		}
		isAllUsedPartIsDefault() {
			let t = this.getUsedPartIds(!0);
			for (let e in t) {
				let a = t[e],
					i = db.get_manicure_part_db(a);
				if (i && i.typeData && 0 != a && i.typeData.defaultId != a) return !1
			}
			return !0
		}
		getUsedPartIds(t) {
			let e = {};
			for (let t in this.allParts) {
				let a = this.allParts[t];
				for (let t in a) {
					let i = a[t];
					i.partId && (e[i.partId] = !0)
				}
			}
			let a = [];
			for (let t in e) {
				e[t];
				a.push(parseInt(t))
			}
			return a.sort(), a
		}
		getUsedParts() {
			return this.allParts
		}
		_onCmdPartRemove(t) {
			let e = t.partType,
				a = t.index,
				i = db.get_manicure_part_type_db(e),
				s = this.allParts[e];
			if (0 != i.defaultId) {
				s[a].partId = i.defaultId
			} else s[a] = {
				partId: null
			}
		}
		_onCmdPartReplace(t) {
			let e = t.partType,
				a = t.index,
				i = t.partId,
				s = this.allParts[e];
			if (!s) return void console.warn("sAvatar._onCmdPartReplace parts not found! partType = %s", e.tostring());
			let n = s[a];
			n || (n = {
				partId: null
			}, s[a] = n), n.partId = i
		}
		serializeToText() {
			let t = [this.SERIALIZE_VERSION, "|"],
				e = this.allParts;
			for (let a = 0; a < this.SERIALIZE_FORMAT_TYPES.length; a++) {
				let i = this.SERIALIZE_FORMAT_TYPES[a],
					s = db.get_manicure_part_type_db(i),
					n = e[i];
				for (let e = 0; e < s.slotCount; e++) {
					let a = n[e];
					a && (t[t.length] = a.partId), t[t.length] = "@"
				}
				0 < n.length - 1 && (t[t.length] = null), t[t.length] = "|"
			}
			return t[t.length - 1] = null, t.join("")
		}
		fillBySerializeText(t) {
			this.setToDefault();
			let e = t.split("|");
			if (e.length != this.SERIALIZE_FORMAT_TYPES.length + 1 || parseFloat(e[0]) != this.SERIALIZE_VERSION) return console.log("[warn] sAvatar:fillBySerializeText text for(letmat error!", t), this;
			for (let t = 0; t < this.SERIALIZE_FORMAT_TYPES.length; t++) {
				let a = this.SERIALIZE_FORMAT_TYPES[t],
					i = e[t + 1];
				if ("" != i) {
					let t = i.split("@");
					for (let e = 0; e < t.length; e++) {
						let i = t[e].split(",")[0];
						i && this.onCmd("CMD_AVATAR_PART_REPLACE", {
							partType: a,
							index: e,
							partId: i
						})
					}
				}
			}
			return this
		}
		fillByParts(t) {
			if (!t) return this;
			for (let e in t) {
				let a = parseInt(e),
					i = t[e];
				if (i)
					for (let t in i) this.onCmd("CMD_AVATAR_PART_REPLACE", {
						partType: a,
						index: parseInt(t),
						partId: i[t].partId
					})
			}
			return this
		}
		dump() {
			console.log("sAvatar.dump begin");
			let t = [],
				e = db.get_manicure_part_type_db_map();
			for (let a in e) {
				let i = e[a];
				t.push(i)
			}
			t = Tools.sortArrayByField(t, "id");
			for (let e in t) {
				let a = t[e],
					i = a.id,
					s = this.allParts[i];
				if (s || console.log("parts not found", i), s.length > 0) {
					let t = "";
					for (let e in s) {
						let a = s[e];
						if (a.partId) {
							let i = db.get_manicure_part_db(a.partId);
							t = t + ", " + String.format("[%d %d:%s]", e, a.partId, i.name)
						} else console.log("v.partId not found!")
					}
					console.log(String.format("  [%d:%s]: %s", i, a.name, t))
				}
			}
			console.log("sAvatar.dump")
		}
		_getRandomPartIdByPartType(t) {
			let e = [],
				a = db.get_manicure_part_db_map();
			for (let i in a) {
				let s = a[i];
				s.type == t && e.push(s.id)
			}
			return e.length <= 0 ? 0 : e[Mathf.random(e.length - 1)]
		}
		_debugGetRandomPartIdByPartType(t) {
			return this._getRandomPartIdByPartType(t)
		}
		_debugFillRandom() {
			this.setToDefault();
			let t = [];
			Mathf.random(100) <= 50 && t.push(MPartType.SHAPE), Mathf.random(100) <= 50 && t.push(MPartType.VARNISH), Mathf.random(100) <= 50 && t.push(MPartType.DECAL_BOTTOM), Mathf.random(100) <= 50 && t.push(MPartType.DECAL_FRONT), Mathf.random(100) <= 50 && t.push(MPartType.NAIL_DECORATION), Mathf.random(100) <= 50 && t.push(MPartType.RING), Mathf.random(100) <= 50 && t.push(MPartType.HAND_DECORATION), Mathf.random(100) <= 50 && t.push(MPartType.WRIST_DECORATION), Mathf.random(100) <= 50 && t.push(MPartType.BACKGROUND);
			for (let e in t) {
				let a = t[e],
					i = db.get_manicure_part_type_db(a);
				for (let t = 1; t <= i.slotCount; t++)
					if (!i.banSlotIndexes[t]) {
						let e = this._getRandomPartIdByPartType(a);
						0 != e && this.onCmd("CMD_AVATAR_PART_REPLACE", {
							partType: a,
							index: t,
							partId: e
						})
					}
			}
			return this
		}
	}
	class MaskClipper extends Laya.Sprite {
		constructor() {
			super();
			let t = new Laya.Sprite;
			t.graphics.clear(), this.mask = t, this.drawNode = t
		}
		reuse() {
			this.visible = !0
		}
		unuse() {
			this.visible = !1, cc.clearTween(this), this.removeSelf()
		}
		dispose() {
			this.destroy()
		}
		setMaskInverted(t) {}
		drawDotWithWorldPos(t, e, a = 10) {
			let i = this.globalToLocal(new Laya.Point(t, e));
			this.drawDot(i.x, i.y, a)
		}
		drawDot(t, e, a = 10) {
			this.drawNode.graphics.drawCircle(t, e, a, "#ffffff")
		}
		drawLineWithWorldSpace(t, e, a, i, s, n, o, r) {
			let l = this.globalToLocal(new Laya.Point(t, e)),
				c = this.globalToLocal(new Laya.Point(a, i));
			this.drawLine(l, c, s, n, o, r)
		}
		drawLine(t, e, a, i, s, n) {
			let o = Mathf.distance(t, e),
				r = 180 * Math.atan2(e.y - t.y, e.x - e.x) / Math.PI;
			n = n || 1;
			for (let e = s = s || 0; e <= o; e += n) {
				let s = 0,
					n = Mathf.calcPointOnArc(t.x, t.y, e, r),
					o = n[0],
					l = n[1];
				a && (s = 0 != i ? a + Mathf.random(-i, i) : a), this.drawDot(o, l, s)
			}
		}
		clear() {
			this.drawNode.graphics.clear()
		}
		putback() {
			_G.poolManager.put(this)
		}
	}
	class ManicureAvatar extends ViewBase {
		constructor(t) {
			super(t), this.resourceName = "res/prefab/ManicureAvatar.json", this._exportNodeInfo = {}, this.allParts = null, this.cusomtPartParents = null, this.cmdHanders = null, this.nodeShapeContainers = null, this.drawClipper = null, this.shapeClippers = [], this.drawShapeClippers = [], this.nodeRootContainer = null, this.shapeId = 0, this.cliper = null, this._SHAPE_PART_TYPES = {
				[MPartType.SHAPE]: !0,
				[MPartType.VARNISH]: !0,
				[MPartType.DECAL_BOTTOM]: !0,
				[MPartType.DECAL_FRONT]: !0,
				[MPartType.NAIL_DECORATION]: !0
			}, this._HAND_PART_TYPES = {
				[MPartType.HAND_DECORATION]: !0,
				[MPartType.WRIST_DECORATION]: !0
			}, this.buildUi()
		}
		onCreateComplete() {}
		dispose() {
			for (let t in this.allParts) {
				let e = this.allParts[t];
				for (let t in e) {
					let a = e[t];
					this._removeResNodes(a.nodes), this._removeResNodes(a.dstNodes), this._removeResNodes(a.hintNodes)
				}
			}
			this.allParts = null
		}
		buildUi() {
			this.allParts = {}, this.cusomtPartParents = {}, this._registerCmdHander()
		}
		_registerCmdHander() {
			let t = {
				CMD_AVATAR_DRAW_MODE_BEGIN: this._onCmdDrawModeBegin.bind(this),
				CMD_AVATAR_DRAW_MODE_CANCEL: this._onCmdDrawModeCancel.bind(this),
				CMD_AVATAR_DRAW_MODE_SUBMIT: this._onCmdDrawModeSubmit.bind(this),
				CMD_AVATAR_PART_REPLACE: this._onCmdPartReplace.bind(this),
				CMD_AVATAR_PART_REMOVE: this._onCmdPartRemove.bind(this),
				CMD_AVATAR_PART_HINT_SHOW: this._onCmdPartHintShow.bind(this),
				CMD_AVATAR_PART_HINT_HIDE: this._onCmdPartHintHide.bind(this)
			};
			this.cmdHanders = t
		}
		getPart(t, e) {
			let a = this.allParts[t];
			a || (a = {}, this.allParts[t] = a);
			let i = a[e];
			return i || (i = {}, a[e] = i), i
		}
		calcNearestIndex(t, e) {
			let a = this.resNode.globalToLocal(e);
			if (this._SHAPE_PART_TYPES[t]) {
				let t = 0,
					e = Number.POSITIVE_INFINITY;
				for (let i in this.nodeShapeContainers) {
					let s = this.nodeShapeContainers[i],
						n = {
							width: s.width,
							height: this.node.height
						},
						o = new Laya.Point(n.width / 2, n.height / 2),
						r = s.localToGlobal(o),
						l = this.resNode.globalToLocal(r),
						c = Mathf.distance(a, l);
					c < e && (t = parseInt(i), e = c)
				}
				return [t, e]
			}
			if (t == MPartType.RING) {
				let e = 0,
					i = Number.POSITIVE_INFINITY,
					s = Number.POSITIVE_INFINITY,
					n = db.get_manicure_part_type_db(t);
				for (let t = 1; t <= n.slotCount; t++) {
					let n = mgrManicure.RING_SCHEMATIC_LAYOUTS[t] || {},
						o = n.x || 0,
						r = n.y || 0,
						l = Mathf.distance(a, new Laya.Point(o, r)),
						c = this.nodeShapeContainers[t],
						h = {
							width: c.width,
							height: c.height
						},
						d = new Laya.Point(h.width / 2, h.height / 2),
						_ = c.localToGlobal(d),
						g = this.resNode.globalToLocal(_),
						u = Mathf.distance(a, g),
						m = null;
					(m = u < 100 ? (u + l) / 2 : l) < i && (e = t, i = m, s = l)
				}
				return [e, s]
			}
			if (this._HAND_PART_TYPES[t]) {
				let t = -180,
					e = 180,
					i = 0,
					s = -460,
					[n, o] = [a.x, a.y];
				return t <= n && n <= e && s <= o && o <= i ? [1, 0] : [null, null]
			}
			if (t == MPartType.PET_DECORATION) {
				let t = 200,
					e = 400,
					i = -200,
					s = -400,
					[n, o] = [a.x, a.y];
				return t <= n && n <= e && s <= o && o <= i ? [1, 0] : [null, null]
			}
			return [1, 0]
		}
		clacHitPartIndex(t, e, a) {
			let i = a || 0,
				[s, n] = this.calcNearestIndex(t, e);
			return s && n <= db.get_manicure_part_type_db(t).hitTestDistance + i ? s : null
		}
		_getDrawClipper() {
			let t = this.drawClipper;
			if (t) return t;
			let e = db.get_manicure_part_type_db(MPartType.VARNISH).orders[1];
			return t = new MaskClipper, this.resNode.addChild(t), t.setMaskInverted(!1), t.zOrder = e, this.drawClipper = t, this._initDrawShapeClippers(), t
		}
		_initDrawShapeClippers() {
			let t = this.context.structAvatar.getPartId(MPartType.SHAPE, 1);
			for (let e = 1; e <= 5; e++) {
				let a = this.getPart(MPartType.SHAPE, e).nodes[0],
					i = new Laya.Box;
				this.drawClipper.addChild(i), i.x = a.x, i.y = a.y, this.loadShapeSpriteFrame(t, e, t => {
					i.width = t.width, i.height = t.height, i.x -= t.width / 2, i.y -= t.height / 2;
					let e = new Laya.Sprite;
					e.graphics.drawImage(t, 0, 0), i.mask = e
				});
				let s = new Laya.Box;
				i.addChild(s), s.x = -i.x, s.y = -i.y, this.drawShapeClippers[e - 1] = s
			}
		}
		drawDot(t, e = 10) {
			let a = this.drawClipper;
			a && a.drawDotWithWorldPos(t.x, t.y, e)
		}
		drawLine(t, e, a = 10) {
			let i = this.drawClipper;
			i && i.drawLineWithWorldSpace(t.x, t.y, e.x, e.y, a, 0, 0, 4)
		}
		_removeResNodes(t) {
			if (t)
				for (let e in t) {
					let a = t[e];
					mgrManicure.removeResNode(a)
				}
		}
		_createResNodes(t, e) {
			let a = db.get_manicure_part_db(t),
				i = a.typeData,
				s = e,
				n = null,
				o = null,
				r = null,
				l = null;
			if (n = i.bUseShapeContainer ? this.nodeShapeContainers[e] : this.nodeRootContainer, i.bUseShapeResources) {
				let a = db.get_manicure_shape_db_map()[t];
				a && (o = a[e - 1].resources)
			}
			return i.bUseClipperParent && (r = this.shapeClippers[e - 1]), this.cusomtPartParents[a.type] && (r = this.cusomtPartParents[a.type]), i.bUseFirstLayout && (s = 1), l = 1 == i.bUseResourceIndexWithLayoutIndex, this._createResNodesWithArgs(t, s, n, o, r, l)
		}
		_createResNodesWithArgs(t, e, a, i, s, n) {
			let o = db.get_manicure_part_db(t),
				r = i || o.resources,
				l = s || this.resNode,
				c = [];
			for (let t = 0; t < r.length; t++) {
				let i = r[t],
					s = o.typeData.orders[t],
					h = mgrManicure.createResNode(i[0], i[1]);
				l.addChild(h), n && (e = t + 1, s = o.typeData.orders[0]);
				let d = o.layouts[e];
				if (d) {
					let t, e, i, n;
					h.zOrder = s + (d.order || 0);
					let [r, l] = [d.parentApx, d.parentApy];
					if (0 != r || 0 != l) {
						let i = {
								width: a.width,
								height: a.height
							},
							s = new Laya.Point(d.parentApx * i.width, Math.abs(d.parentApy - 1) * i.height),
							n = this.resNode.globalToLocal(a.localToGlobal(s, !0), !0);
						t = d.x + n.x, e = -d.y + n.y
					} else t = d.x, e = -d.y;
					i = d.scaleX, n = d.scaleY, o.typeData.bUseContainerNormalizeScale && (i *= a.normalizeScale, n *= a.normalizeScale), h.anchorX = d.apx, h.anchorY = Math.abs(d.apy - 1), h.pos(Math.round(t), Math.round(e)), h.scale(i, n), h.rotation = d.rotate + a.rotation
				} else h.zOrder = s;
				c[t] = h
			}
			let h = c[0];
			if (h && o.effectResources) {
				let t = [];
				for (let e in o.effectResources) {
					let a = o.effectResources[e],
						i = new Laya.Box;
					h.addChild(i);
					let s = mgrManicure.createResNode(a.resType, a.id);
					i.addChild(s), s.zOrder = a.order, t.push(s), s.pos(a.pos.x, a.pos.y), s.scale(a.scaleX, a.scaleY), s.rotation = a.rotate
				}
				h.effectNodes = t
			}
			return c
		}
		refreshAll() {
			if (!this.callable) return void this.safeCall(this.refreshAll);
			let t = this.context.structAvatar;
			this.refreshContainer();
			let e = this.getPart(MPartType.BODY, 1);
			if (!e.nodes) {
				let a = t.getPartId(MPartType.BODY);
				e.nodes = this._createResNodes(a, 1), e.partId = a
			}
			this.refreshShape(), this.refreshRing(), this.refreshHandDecoration(), this.refreshWristDecoration(), this.refreshBackground()
		}
		refreshContainer() {
			let t = this.context.structAvatar,
				e = new Laya.Box;
			this.resNode.addChild(e), this.nodeRootContainer = e;
			let a = t.getPartId(MPartType.SHAPE),
				i = db.get_manicure_part_container_db(a),
				s = {};
			for (let t in i.layouts) {
				let e = t,
					a = i.layouts[t],
					n = new Laya.Box;
				this.resNode.addChild(n), n.size(a.width, a.height), n.pivotX = a.apx * a.width, n.pivotY = Math.abs(a.apy - 1) * a.height, n.rotation = a.rotate, n.pos(a.x, -a.y), n.normalizeScale = a.normalizeScale, s[e] = n
			}
			this.nodeShapeContainers = s
		}
		refreshShape() {
			let t = this.context.structAvatar.getPartId(MPartType.SHAPE, 1);
			db.get_manicure_part_db(t);
			for (let t = 1; t <= 5; t++) {
				let e = [MPartType.VARNISH, MPartType.DECAL_FRONT, MPartType.DECAL_BOTTOM];
				for (let a = 0; a < e.length; a++) {
					let i = e[a],
						s = this.getPart(i, t);
					this._removeResNodes(s.nodes), s.nodes = null, s.partId = null, this._removeResNodes(s.dstNodes), s.dstNodes = null, s.dstPartId = null, this._removeResNodes(s.hintNodes), s.hintNodes = null
				}
			}
			this.drawClipper && (this.drawClipper.destroy(), this.drawClipper = null);
			for (let t = 0; t < this.shapeClippers.length; t++) {
				this.shapeClippers[t].destroy()
			}
			this.shapeClippers = [];
			for (let e = 1; e <= 5; e++) {
				let a = this.getPart(MPartType.SHAPE, e);
				this._removeResNodes(a.nodes), a.nodes = null, a.nodes = this._createResNodes(t, e), a.partId = t;
				let i = a.nodes[0],
					s = new Laya.Box;
				this.resNode.addChild(s), s.zOrder = i.zOrder, s.x = i.x, s.y = i.y, this.loadShapeSpriteFrame(t, e, t => {
					s.width = t.width, s.height = t.height, s.x -= t.width / 2, s.y -= t.height / 2;
					let e = new Laya.Sprite;
					e.graphics.drawImage(t, 0, 0), s.mask = e
				});
				let n = new Laya.Box;
				s.addChild(n), n.x = -s.x, n.y = -s.y, n.x = Math.round(n.x), n.y = Math.round(n.y), this.shapeClippers[e - 1] = n
			}
			this.refreshVarnish(), this.refreshDecal(), this.refreshNailDecoration()
		}
		loadShapeSpriteFrame(t, e, a) {
			db.get_manicure_part_db(t);
			let i = db.get_manicure_shape_db(t, e - 1).resources[0][1];
			mgrRes.loadRes(i, Laya.Loader.IMAGE, t => {
				t && a(t)
			})
		}
		refreshPartType(t) {
			let e = this.context.structAvatar,
				a = db.get_manicure_part_type_db(t);
			for (let i = 1; i <= a.slotCount; i++) {
				let a = this.getPart(t, i),
					s = e.getPartId(t, i);
				a.partId != s && (this._removeResNodes(a.nodes), a.nodes = null, a.partId = null), s && !a.nodes && (a.nodes = this._createResNodes(s, i), a.partId = s)
			}
		}
		refreshVarnish() {
			this.refreshPartType(MPartType.VARNISH)
		}
		refreshDecal() {
			this.refreshPartType(MPartType.DECAL_BOTTOM), this.refreshPartType(MPartType.DECAL_FRONT)
		}
		refreshNailDecoration() {
			this.refreshPartType(MPartType.NAIL_DECORATION)
		}
		refreshRing() {
			this.refreshPartType(MPartType.RING)
		}
		refreshHandDecoration() {
			this.refreshPartType(MPartType.HAND_DECORATION)
		}
		refreshWristDecoration() {
			this.refreshPartType(MPartType.WRIST_DECORATION)
		}
		refreshBackground() {
			this.refreshPartType(MPartType.BACKGROUND)
		}
		registerCustomPartParent(t, e) {
			return this.cusomtPartParents[t] = e, this
		}
		_onCmdPartReplace(t) {
			let e = t.partType,
				a = t.index,
				i = t.partId,
				s = t.worldPosition,
				n = db.get_manicure_part_type_db(e);
			if (e == MPartType.SHAPE) this.refreshAll();
			else if (n.bMoveAction && s) {
				let n = this.getPart(e, a);
				if (n.nodes) {
					for (let t in n.nodes) {
						let e = n.nodes[t];
						cc.clearTween(e), cc.tween(e).parallel(cc.tween().to(.3, {
							y: e.y + 50
						}, cc.OPTION.SINE_OUT), cc.tween().to(.3, cc.PROP.ALPHA0)).call(() => {
							e.destroy()
						}).start()
					}
					n.nodes = null
				}
				n.nodes = this._createResNodes(i, a), n.partId = i;
				for (let e = 0; e < n.nodes.length; e++) {
					const a = n.nodes[e];
					let i = a.parent.globalToLocal(s, !0),
						o = new Laya.Point(a.x, a.y),
						r = 0,
						l = a.rotation,
						c = 1,
						h = a.scaleX;
					a.pos(i.x, i.y), a.rotation = r, a.scale(c, c), cc.clearTween(a), cc.tween(a).parallel(cc.tween().to(.3, {
						x: o.x,
						y: o.y
					}), cc.tween().to(.3, {
						rotation: l
					}), cc.tween().to(.3, {
						scaleX: h,
						scaleY: h
					})).call(() => {
						if (!t.bUndo && 0 == e) {
							let t = this.resNode.localToGlobal(o);
							mgrAlert.playParticleEffect("196", t, 1, .5)
						}
					}).start()
				}
			} else {
				this.refreshPartType(e);
				let t = this.getPart(e, a);
				if (t.nodes && t.nodes.length > 0) {
					let e = t.nodes[0],
						a = e.parent.localToGlobal(new Laya.Point(e.x, e.y));
					mgrAlert.playParticleEffect("196", a, 1, .5)
				}
			}
		}
		_onCmdPartRemove(t) {
			let e = t.partType,
				a = t.index,
				i = db.get_manicure_part_type_db(e);
			if (e == MPartType.SHAPE) this.refreshAll();
			else if (!i.bMoveAction || t.bSkipMoveAction) this.refreshPartType(e);
			else {
				let t = this.getPart(e, a);
				if (t.nodes) {
					for (let e in t.nodes) {
						let a = t.nodes[e];
						cc.clearTween(a), cc.tween(a).parallel(cc.tween().to(.3, {
							y: a.y + 50
						}, cc.OPTION.SINE_OUT), cc.tween().to(.3, cc.PROP.ALPHA0)).call(() => {
							a.destroy()
						}).start()
					}
					t.nodes = null
				}
			}
		}
		_onCmdPartHintShow(t) {
			let e = t.partType,
				a = t.index,
				i = t.partId;
			this._onCmdPartHintHide(t);
			let s = this.getPart(e, a);
			if (s && !s.partId) {
				db.get_manicure_part_db(i).typeData;
				let t = this._createResNodes(i, a);
				s.hintNodes = t;
				for (let e in t) {
					let a = t[e];
					a.alpha = 0, cc.tween(a).repeatForever(cc.tween().to(.5, {
						alpha: 127 / 255
					}, cc.OPTION.SINE_IN_OUT).to(.5, {
						alpha: 127 / 255
					}, cc.OPTION.SINE_IN_OUT).start())
				}
			}
		}
		_onCmdPartHintHide(t) {
			let e = t.partType,
				a = t.index,
				i = this.getPart(e, a);
			i && i.hintNodes && (this._removeResNodes(i.hintNodes), i.hintNodes = null)
		}
		_onCmdDrawModeBegin(t) {
			let e = t.partType,
				a = t.index,
				i = t.dstPartId;
			this._getDrawClipper().clear();
			let s = this.getPart(e, a);
			s.dstNodes = this._createResNodesWithArgs(i, 1, this.nodeShapeContainers[a], null, this.drawShapeClippers[a - 1]), s.dstPartId = i
		}
		_onCmdDrawModeCancel(t) {
			let e = t.partType,
				a = t.index,
				i = this.getPart(e, a);
			i && (this._removeResNodes(i.dstNodes), i.dstNodes = null, i.dstPartId = null)
		}
		_onCmdDrawModeSubmit(t) {
			let e = t.partType,
				a = t.index;
			console.warn("_onCmdDrawModeSubmit", e, a);
			let i = this._getDrawClipper(),
				s = this.getPart(e, a);
			if (s) {
				if (s.dstNodes) {
					this._removeResNodes(s.nodes);
					for (let t in s.dstNodes) {
						let e = s.dstNodes[t];
						this.shapeClippers[a - 1].addChild(e)
					}
					s.nodes = s.dstNodes, s.partId = s.dstPartId, s.dstNodes = null, s.dstPartId = null
				}
				i.clear()
			}
		}
		onCmd(t, e) {
			let a = this.cmdHanders[t];
			a ? a(e) : console.log("[warn] vAvatar.onCmd handler not found! cmd:", t)
		}
	}
	class PanelManicure extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelManicure.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_nodeAvatar: "Laya.Box",
				cc_nodeIcon: "Laya.Sprite",
				cc_imageIcon: "Laya.Image",
				cc_imageBrush: "Laya.Image",
				cc_buttonOk: "UIButton",
				cc_nodeOperate: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.structAvatar = null, this.viewAvatar = null, this.curIndex = 0, this.showPartFlag = {}, this.startPos = new Laya.Point, this.curPos = new Laya.Vector2, this.bTouched = !1, this.bAction = !1, this.burshOffset = new Laya.Vector2(-30, -30), this.checkOffset = new Laya.Vector2(-40, -40)
		}
		buildUi() {
			this.nodeIcon.visible = !1, this.buttonOk.node.visible = !1;
			this.nodeAvatar.scale(.85, .85), this.nodeAvatar.y = -50 - _G.canvasHeight;
			let t = new sManicureAvatar;
			this.structAvatar = t, this.viewAvatar = new ManicureAvatar({
				structAvatar: t
			}), this.viewAvatar.create(), this.viewAvatar.callIfLoaded(() => {
				this.nodeAvatar.addChild(this.viewAvatar.resNode), this.viewAvatar.refreshAll(), cc.tween(this.nodeAvatar).to(.5, {
					y: -50
				}).call(() => {
					this.refreshUi(!0)
				}).start()
			}), UiHelper.registerTouchEvent(this.imageIcon, this.onTouchStart.bind(this), null, null), Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.onTouchMove.bind(this)), Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onTouchEnd.bind(this)), Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.onTouchEnd.bind(this))
		}
		dispose() {
			Laya.stage.offAllCaller(this), super.dispose()
		}
		refreshUi(t = !1) {
			let e = this.context.stageData;
			if (!e) return;
			if (this.curIndex >= e.partIds.length) return this.nodeIcon.visible = !1, this.buttonOk.node.visible = !0, UiHelper.playBreathe(this.buttonOk.node), void mgrAlert.playParticleEffect("194", {
				x: _G.canvasWidth / 2,
				y: _G.canvasHeight / 2
			}, 4, 2);
			let a = e.partIds[this.curIndex],
				i = db.get_manicure_part_db(a);
			this.curPartDb = i, this.nodeIcon.visible = !0, this.buttonOk.node.visible = !1, this.imageIcon.skin = i.icon, this.imageIcon.pos(this.nodeIcon.width / 2, this.nodeIcon.height / 2), this.imageIcon.visible = !0, this.imageBrush.pos(this.nodeIcon.width / 2, this.nodeIcon.height / 2), i.brushIcon ? (this.imageBrush.skin = i.brushIcon, this.showPartFlag = {}) : this.imageBrush.skin = i.icon, this.imageBrush.visible = !1, t && (this.nodeIcon.scale(0, 0), cc.tween(this.nodeIcon).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).call(() => {}).start())
		}
		nextAction(t) {
			GameStatistics.statisCommonEvent(2586 + this.curIndex, 0);
			let e = this.context.stageData.partIds[this.curIndex],
				a = db.get_manicure_part_db(e);
			if (a && !a.brushIcon)
				for (let i = 0; i < a.typeData.shopDisplaySlotIndexes.length; i++) {
					let s = a.typeData.shopDisplaySlotIndexes[i];
					this.structAvatar.onCmd("CMD_AVATAR_PART_REPLACE", {
						partType: a.type,
						index: s,
						partId: e
					}), this.viewAvatar.onCmd("CMD_AVATAR_PART_REPLACE", {
						partType: a.type,
						index: s,
						partId: e,
						worldPosition: t
					})
				}
			this.curIndex++, this.refreshUi()
		}
		showPartItem(t) {
			if (this.showPartFlag[t]) return;
			this.showPartFlag[t] = !0;
			let e = this.curPartDb,
				a = e.id;
			this.structAvatar.onCmd("CMD_AVATAR_PART_REPLACE", {
				partType: e.type,
				index: t,
				partId: a
			}), this.viewAvatar.onCmd("CMD_AVATAR_PART_REPLACE", {
				partType: e.type,
				index: t,
				partId: a
			});
			let i = this.viewAvatar.getPart(e.type, t).nodes;
			for (let t = 0; t < i.length; t++) i[t].alpha = 0, cc.tween(i[t], !0).to(.3, cc.PROP.ALPHA1).start()
		}
		onTouchStart() {
			if (this.bAction) return;
			this.bTouched = !0, this.startPos.x = Laya.stage.mouseX, this.startPos.y = Laya.stage.mouseY;
			let t = this.nodeIcon.globalToLocal(this.startPos, !0);
			t.x += this.burshOffset.x, t.y += this.burshOffset.y, this.curPartDb.brushIcon ? (this.imageBrush.visible = !0, this.imageIcon.visible = !1, this.imageBrush.pos(t.x, t.y)) : this.imageIcon.pos(t.x, t.y)
		}
		onTouchMove() {
			if (this.bAction) return;
			if (!this.bTouched) return;
			this.curPos.x = Laya.stage.mouseX, this.curPos.y = Laya.stage.mouseY;
			let t = this.nodeIcon.globalToLocal(this.curPos, !0);
			t.x += this.burshOffset.x, t.y += this.burshOffset.y, this.curPartDb.brushIcon ? (this.imageBrush.pos(t.x, t.y, !0), this.checkFinger() && this.onTouchEnd()) : this.imageIcon.pos(t.x, t.y, !0)
		}
		onTouchEnd() {
			this.bAction || this.bTouched && (this.bTouched = !1, this.curPartDb.brushIcon ? this.checkFinger() ? this.nextAction(UiHelper.getSelfGlobalPos(this.imageBrush)) : (this.bAction = !0, cc.tween(this.imageBrush).to(.3, {
				x: this.nodeIcon.width / 2,
				y: this.nodeIcon.height / 2
			}).call(() => {
				this.bAction = !1, this.imageIcon.visible = !0, this.imageBrush.visible = !1
			}).start()) : Mathf.distance(UiHelper.getSelfGlobalPos(this.nodeOperate), this.curPos) < 350 ? (this.imageIcon.visible = !1, this.nextAction(UiHelper.getSelfGlobalPos(this.imageIcon))) : (this.bAction = !0, cc.tween(this.imageIcon).to(.3, {
				x: this.nodeIcon.width / 2,
				y: this.nodeIcon.height / 2
			}).call(() => {
				this.bAction = !1
			}).start()))
		}
		checkFinger() {
			let t = this.curPartDb;
			if (t && t.brushIcon) {
				for (let e = 0; e < t.typeData.shopDisplaySlotIndexes.length; e++) {
					let a = t.typeData.shopDisplaySlotIndexes[e],
						i = this.viewAvatar.getPart(MPartType.SHAPE, a).nodes;
					if (i && i[0]) {
						let t = this.curPos.clone();
						t.x += this.checkOffset.x, t.y += this.checkOffset.y;
						let e = UiHelper.getSelfGlobalPos(i[0]);
						Mathf.distance(e, t) < 50 && this.showPartItem(a)
					}
				}
				for (let t = 1; t <= 5; t++)
					if (!this.showPartFlag[t]) return !1;
				return !0
			}
			return !1
		}
		on_click_buttonClose() {
			GameStatistics.statisCommonEvent(2586 + this.curIndex, 1), this.context && this.context.fOnCancel && this.context.fOnCancel(), this.close()
		}
		on_click_buttonOk() {
			GameStatistics.statisCommonEvent(2589, 0), mgrGame.setUsedManicureStageData(this.context.stageData), mgrAlert.openPanelLoading(UI_NAME.PanelManicureResult, {
				stageData: this.context.stageData
			}), _G.sendMsg("MANICURE_STAGE_FINISH"), this.close()
		}
	}
	class PanelManicurePreview extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelManicurePreview.json", this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_nodeTips: "Laya.Sprite",
				cc_labelTips: "Laya.Label",
				cc_buttonOk: "UIButton",
				cc_nodePreview: "Laya.Box",
				cc_spritePreviewMask: "Laya.Sprite",
				cc_nodePreviewAvatar: "Laya.Box",
				cc_topNode: "Laya.Sprite",
				cc_spriteBubble: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_bottomLeftNode: "Laya.Sprite",
				cc_bottomRightNode: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_layoutBtns: "UIHVLayout",
				cc_buttonAdvChange: "UIButton",
				cc_spriteChange: "Laya.Sprite",
				cc_buttonStart: "UIButton",
				cc_spriteStart: "Laya.Sprite"
			}, this.stageDataArr = [], this.bShowSuc = !1
		}
		addPreloadRes(t) {
			t.add("res/unity/Conventional/map_03.ls", RES_TYPE.PREFAB3D);
			let e = FileRecord.getData("MANICURE_STAGE_DATA");
			if (e) {
				let a = db.get_cp_npc(e.npcId);
				if (a) {
					t.addModel(db.get_model_db(a.bodyModelId).resPath), t.addModel(db.get_model_db(a.faceModelId).resPath), t.addModel(db.get_model_db(a.hairModelId).resPath);
					for (let e = 0; e < a.manicureBodyAnimIds.length; e++) t.addAnimationClip(db.get_animation_db(a.manicureBodyAnimIds[e]).path);
					for (let e = 0; e < a.manicureFaceAnimIds.length; e++) t.addAnimationClip(db.get_animation_db(a.manicureFaceAnimIds[e]).path)
				}
			}
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteChange, "pnl_manicure_05.png"), mgrI18n.trySetI18nImage(this.spriteStart, "pnl_manicure_06.png");
			let t = [],
				e = db.get_manicure_stage_db_map();
			for (let a in e) e[a] && t.push(e[a]);
			this.stageDataArr = t, this.stageData = FileRecord.getData("MANICURE_STAGE_DATA");
			let a = new Laya.Sprite;
			a.graphics.drawImage(this.spritePreviewMask.texture, 0, 0), this.spritePreviewMask.mask = a;
			let i = new sManicureAvatar;
			this.structAvatar = i;
			let s = new ManicureAvatar({
				structAvatar: i
			});
			s.create(), s.callIfLoaded(() => {
				this.nodePreviewAvatar.addChild(s.resNode), s.refreshAll(), Timer.callLoop(.5, () => {
					this.destroyed || s.refreshAll()
				}, this)
			}), this.viewAvatar = s;
			let n = mgrAdv.checkActive("change_manicure_stage");
			this.buttonAdvChange.node.visible = n, n && mgrAdv.statisVideoShow("change_manicure_stage"), this.layoutBtns.updateLayout(), this.nodeTips.visible = !1, this.hideBubble(!0), this.layoutBtns.node.visible = !1, this.topNode.y = -150, this.topLeftNode.x = -150, this.bottomNode.y = 400, this.playUiAnim(), this.room = new RoomInside, this.room.load(this.onSceneLoaded.bind(this)), this.registerMsg({
				MANICURE_STAGE_FINISH: this.onMsgManicureStageFinish.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg();
			let o = this.addEffect("192");
			o.play(), n && ((o = this.addEffect("193")).followTarget(this.buttonAdvChange.node, this.cameraEffect), o.play(), this.buttonAdvChange.node._effect = o), (o = this.addEffect("193")).followTarget(this.buttonStart.node, this.cameraEffect), o.play(), this.buttonStart.node._effect = o, mgrSdk.startRecordVideo(), GameStatistics.statisCommonEvent(2581), GameStatistics.statisOnStageStart(13006), this.context && this.context.fOnOpend && this.context.fOnOpend()
		}
		dispose() {
			this.stopProcMsg(), this.clearNpc(), this.avatar && (this.avatar.destroy(), this.avatar = null), this.room && (this.room.dispose(), this.room = null), GameStatistics.statisOnStageEnd(13006), super.dispose()
		}
		clearNpc() {
			this.hideBubble(), this.playerNpcShow && (this.playerNpcShow.dispose(), this.playerNpcShow = null), this.playerNpcIdle && (this.playerNpcIdle.dispose(), this.playerNpcIdle = null), this.playerNpcReady && (this.playerNpcReady.dispose(), this.playerNpcReady = null), this.npcBodyModel && (this.npcBodyModel.dispose(), this.npcBodyModel = null), this.npcFaceModel && (this.npcFaceModel.dispose(), this.npcFaceModel = null), this.npcHairModel && (this.npcHairModel.dispose(), this.npcHairModel = null)
		}
		playUiAnim(t = !1, e) {
			t ? (UiHelper.playMoveOut(this.topLeftNode, -150), cc.tween(this.bottomNode).to(.3, {
				y: 400
			}, cc.OPTION.BACK_IN).call(e).start()) : (UiHelper.playMoveIn(this.topLeftNode), cc.tween(this.topNode).to(.3, {
				y: 0
			}, cc.OPTION.BACK_OUT).call(() => {
				cc.tween(this.bottomNode).to(.3, {
					y: 0
				}, cc.OPTION.BACK_OUT).call(e).start()
			}).start())
		}
		onMsgManicureStageFinish() {
			this.showAvatar()
		}
		onMsgAdvShowSuc(t) {
			"change_manicure_stage" == t.advName && (GameStatistics.statisCommonEvent(2582 + this.stageData.id, 0), this.layoutBtns.node.visible = !1, this.clearNpc(), this.saveStageData(), this.resLoader.isLoaded ? this.createNpc() : this.bShowSuc = !0)
		}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToManicureNpc(), this.createNpc()
		}
		randomStage() {
			if (this.nextStageData) return;
			let t = [];
			for (let e = 0; e < this.stageDataArr.length; e++) this.stageDataArr[e].id != (this.stageData && this.stageData.id) && t.push(this.stageDataArr[e]);
			let e = t[Mathf.random(t.length) - 1];
			e && (this.nextStageData = e)
		}
		saveStageData() {
			this.stageData = this.nextStageData, FileRecord.setData("MANICURE_STAGE_DATA", this.nextStageData), this.nextStageData = null
		}
		createNpc() {
			let t = db.get_cp_npc(this.stageData.npcId);
			if (t) {
				if (GameStatistics.statisCommonEvent(2582 + this.stageData.id, 2), this.npcBodyModel = new GModel(t.bodyModelId), this.npcBodyModel.create(), this.npcBodyModel.initAnimator(), this.npcBodyModel.initPart(), this.npcBodyModel.setParent(this.room.root), this.npcBodyModel.callIfLoaded(() => {
						let e = this.npcBodyModel.findChild("toufa_guadian");
						this.npcFaceModel = new GModel(t.faceModelId), this.npcFaceModel.create(), this.npcFaceModel.initAnimator(), this.npcFaceModel.initPart(), this.npcFaceModel.setParent(e), this.npcFaceModel.setPosition(0, 0, 0), this.npcFaceModel.setRotation(0, 0, 0), this.npcFaceModel.callIfLoaded(() => {
							this.playerNpcIdle = new AnimatorFixedPlayer, this.playerNpcIdle.addModelAnim(this.npcBodyModel, t.manicureBodyAnimIds[0]), this.playerNpcIdle.addModelAnim(this.npcFaceModel, t.manicureFaceAnimIds[0]), this.playerNpcIdle.play()
						}), this.npcBodyModel.on("Exit", this, e => {
							e == t.manicureBodyAnimIds[0] && Mathf.random(100) <= 50 ? this.playerNpcShow ? this.playerNpcShow.play() : (this.playerNpcShow = new AnimatorFixedPlayer, this.playerNpcShow.addModelAnim(this.npcBodyModel, t.manicureBodyAnimIds[1]), this.playerNpcShow.addModelAnim(this.npcFaceModel, t.manicureFaceAnimIds[1]), this.playerNpcShow.addTimeCallback(1, () => {}), this.playerNpcShow.play()) : this.playerNpcIdle.play()
						}), this.npcHairModel = new GModel(t.hairModelId), this.npcHairModel.create(), this.npcHairModel.initPart(), this.npcHairModel.setParent(e)
					}), this.layoutBtns.node.visible = !0, this.structAvatar) {
					this.structAvatar.setToDefault();
					for (let t = 0; t < this.stageData.partIds.length; t++) {
						let e = this.stageData.partIds[t],
							a = db.get_manicure_part_db(e);
						if (a)
							for (let t = 0; t < a.typeData.shopDisplaySlotIndexes.length; t++) {
								let i = a.typeData.shopDisplaySlotIndexes[t];
								this.structAvatar.onCmd("CMD_AVATAR_PART_REPLACE", {
									partType: a.type,
									index: i,
									partId: e
								})
							}
					}
				}
				this.viewAvatar && this.viewAvatar.refreshAll()
			}
		}
		startLoad() {
			this.resLoader = new ResLoader;
			let t = this.nextStageData;
			if (t) {
				let e = db.get_cp_npc(t.npcId);
				if (e) {
					this.resLoader.addModel(db.get_model_db(e.bodyModelId).resPath), this.resLoader.addModel(db.get_model_db(e.faceModelId).resPath), this.resLoader.addModel(db.get_model_db(e.hairModelId).resPath);
					for (let t = 0; t < e.manicureBodyAnimIds.length; t++) this.resLoader.addAnimationClip(db.get_animation_db(e.manicureBodyAnimIds[t]).path);
					for (let t = 0; t < e.manicureFaceAnimIds.length; t++) this.resLoader.addAnimationClip(db.get_animation_db(e.manicureFaceAnimIds[t]).path)
				}
			}
			mgrAlert.openWait(this.resLoader, () => {
				this.bShowSuc && this.createNpc()
			})
		}
		showAvatar() {
			this.buttonAdvChange.node.visible = !1, this.buttonStart.node.visible = !1, this.buttonClose.node.visible = !1, this.nodeTips.visible = !0, this.hideBubble(!0), this.buttonAdvChange.node._effect && this.buttonAdvChange.node._effect.hide(), this.buttonStart.node._effect && this.buttonStart.node._effect.hide(), this.clearNpc(), this.room.moveToManicure(), this.avatar = new RoleAvatar, this.avatar.playAnimation(MODEL_ANIM.MAIN_MEIJIA_SHOW1, !0), this.room.root.addChild(this.avatar)
		}
		showBubble(t = !1) {
			t ? this.spriteBubble.scale(1, 1) : (cc.clearTween(this.spriteBubble), cc.tween(this.spriteBubble).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start())
		}
		hideBubble(t = !1) {
			t ? this.spriteBubble.scale(0, 0) : (cc.clearTween(this.spriteBubble), cc.tween(this.spriteBubble).to(.3, cc.PROP.SCALE0, cc.OPTION.BACK_IN).start())
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisCommonEvent(2582 + this.stageData.id, 3), this.close()
		}
		on_click_buttonAdvChange() {
			mgrAdv.statisVideoClick("change_manicure_stage"), mgrAdv.dispatchAdv("change_manicure_stage", {}, !0), this.bShowSuc = !1, this.randomStage(), this.startLoad()
		}
		on_click_buttonStart() {
			let t = db.get_cp_npc(this.stageData.npcId);
			t && (this.buttonAdvChange.interactable = !1, this.buttonStart.interactable = !1, this.nodePreview.visible = !1, this.playUiAnim(!0), this.playerNpcReady = new AnimatorFixedPlayer, this.playerNpcReady.addModelAnim(this.npcBodyModel, t.manicureBodyAnimIds[2]), this.playerNpcReady.addModelAnim(this.npcFaceModel, t.manicureFaceAnimIds[2]), this.playerNpcReady.play(), this.playerNpcReady.addTimeCallback(1, () => {
				GameStatistics.statisCommonEvent(2582 + this.stageData.id, 1), mgrAlert.openPanelLoading(UI_NAME.PanelManicure, {
					stageData: this.stageData,
					fOnCancel: () => {
						this.playUiAnim(!1, () => {
							this.buttonAdvChange.interactable = !0, this.buttonStart.interactable = !0
						}), this.nodePreview.visible = !0
					}
				})
			}))
		}
		on_click_buttonOk() {
			GameStatistics.statisCommonEvent(2591), this.buttonOk.interactable = !1, this.close()
		}
	}
	class PanelManicureResult extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelManicureResult.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_imageBg: "Laya.Image",
				cc_buttonSure: "UIButton",
				cc_nodeAvatar: "Laya.Box",
				cc_topLeftNode: "Laya.Sprite"
			}
		}
		addPreloadRes(t) {
			let e = db.get_manicure_part_db(9901);
			e && e.resources && e.resources[0][1] && t.addImage(e.resources[0][1]);
			let a = db.get_manicure_shape_db_map();
			for (let e in a) {
				let i = a[e];
				if (1004 == parseInt(e))
					for (let e = 0; e < i.length; e++) {
						let a = i[e];
						a && a.resources && (a.resources[0][1] && t.addImage(a.resources[0][1]), a.resources[1][1] && t.addImage(a.resources[1][1]))
					}
			}
		}
		buildUi() {
			this.imageBg.scale(.1, .1), cc.tween(this.imageBg).to(.5, cc.PROP.SCALE1).start();
			let t = this.context.stageData;
			if (!t) return;
			this.nodeAvatar.scale(.65, .65);
			let e = new sManicureAvatar;
			for (let a = 0; a < t.partIds.length; a++) {
				let i = t.partIds[a],
					s = db.get_manicure_part_db(i);
				if (s)
					for (let t = 0; t < s.typeData.shopDisplaySlotIndexes.length; t++) {
						let a = s.typeData.shopDisplaySlotIndexes[t];
						e.onCmd("CMD_AVATAR_PART_REPLACE", {
							partType: s.type,
							index: a,
							partId: i
						})
					}
			}
			let a = new ManicureAvatar({
				structAvatar: e
			});
			a.create(), a.callIfLoaded(() => {
				this.nodeAvatar.addChild(a.resNode), a.refreshAll()
			});
			let i = this.addEffect("197");
			i.followTarget(this.imageBg, this.cameraEffect, 0, 100), i.play()
		}
		on_click_buttonSure() {
			GameStatistics.statisCommonEvent(2590), cc.tween(this.imageBg).to(.5, cc.PROP.SCALE0).call(() => {
				this.close()
			}).start()
		}
	}
	class PanelMoreGame extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelMoreGame.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_leftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_scroll: "ReuseScrollList",
				cc_item: "Laya.Sprite"
			}
		}
		buildUi() {
			this.mask.alpha = 0, this.leftNode.x = -600, this.scroll.onItemCreate = (() => {
				let t = new GameItem;
				return t.createFromNode(UiHelper.cloneSprite(this.item)), t
			}), this.scroll.onItemChange = ((t, e) => {
				t.setGameInfo(this._list[e])
			}), this.registerMsg({
				[BASE_MSG.SDK_OPEN_JUMP_RESULT]: this.onMsgOpenJumpResult.bind(this)
			}), this.startProcMsg(), mgrSdk.openJump("list")
		}
		dispose() {
			this.stopProcMsg(), this.scroll && this.scroll.clearAllItems(), super.dispose()
		}
		onDialogOpenAnim(t) {
			cc.tween(this.mask).to(.3, cc.PROP.ALPHA1).start(), cc.tween(this.leftNode).to(.5, {
				x: 0
			}, cc.OPTION.SINE_OUT).call(t).start()
		}
		onDialogCloseAnim(t) {
			cc.tween(this.mask).to(.2, cc.PROP.ALPHA0).start(), cc.tween(this.leftNode).to(.3, {
				x: -600
			}, cc.OPTION.SINE_IN).call(t).start()
		}
		onMsgOpenJumpResult(t) {
			if ("list" == t.type) {
				let e = t.jumpInfo;
				this.fillData(e)
			}
		}
		fillData(t) {
			t && 0 != t.length ? (this._list = t, this.scroll.updateList(t.length), cc.clearTween(this.scroll), this._tween = null, this._tween = cc.tween(this.scroll).repeatForever(cc.tween().delay(.3).call(() => {
				this.destroyed || this.scroll.scrollToBottom(6, !1)
			}).delay(6.3).call(() => {
				this.destroyed || this.scroll.scrollToTop(6, !1)
			}).delay(6)), this._tween.start()) : this.hide()
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class GameItem extends ViewBase {
		onCreateComplete() {
			this.icon = this.getChildSprite("icon"), UiHelper.addScrollViewClick(this.icon, () => {
				this.data && mgrSdk.jumpOtherGame(this.data.index, "list")
			}, void 0, !0), this.resNode.alpha = 0, cc.tween(this.resNode).to(.2, cc.PROP.ALPHA1).start()
		}
		setGameInfo(t) {
			this.data = t, this.icon.loadImage(t.url)
		}
	}
	class PanelNativeAdv extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelNativeAdv.json", this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_buttonPnlBig: "UIButton",
				cc_buttonPnlSmall: "UIButton",
				cc_title: "Laya.Label",
				cc_desc: "Laya.Label",
				cc_icon: "Laya.Sprite",
				cc_buttonClick: "UIButton",
				cc_textBtn: "Laya.Label",
				cc_buttonClose: "UIButton"
			}, this.state = 0, this.bInited = !1
		}
		buildUi() {
			console.log("打开原生广告...");
			let t = this.context.userData;
			this.userData = t, this.advName = t.advName, this.maxWidth = this.icon.width, this.maxHeight = this.icon.height, this.fillIcon(this.context.nativeData), this.registerMsg({
				[BASE_MSG.NATIVE_ADV_LOADED]: this.onMsgNativeAdvLoaded.bind(this),
				[BASE_MSG.ADV_CLICK_SUC]: this.onMsgAdvClickSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose(), mgrAdv.closeAdv(this.advName)
		}
		onMsgNativeAdvLoaded(t) {
			t.userData.advName == this.advName && (this.userData = t.userData, this.loadFromData(t.nativeData))
		}
		onMsgAdvClickSuc(t) {
			console.log("--- > msg onMsgAdvClickSuc"), t.advName == this.advName && Timer.callLaterFrame(1, () => {
				this.close()
			}, this)
		}
		loadFromData(t) {
			this.show(), this.fillEmpty(), this.fillIcon(t)
		}
		initClickType() {
			if (!this.bInited) switch (this.bInited = !0, db.cop.native_insert_mode) {
				case 4:
					this.buttonPnlBig.node.visible = !1;
					break;
				case 3:
					this.buttonPnlBig.node.visible = !1, this.buttonPnlSmall.node.visible = !1, UiHelper.addClickEvent(this.mask, this.on_click_buttonClick.bind(this));
					break;
				case 2:
					this.buttonPnlSmall.node.visible = !1;
					break;
				case 0:
				case 1:
				default:
					this.buttonPnlBig.node.visible = !1, this.buttonPnlSmall.node.visible = !1
			}
		}
		canFillUi() {
			return !this.isDisposed && this.bInited
		}
		fillIcon(t) {
			if (this.initClickType(), 1 == this.state || !this.canFillUi()) return;
			if (!t) return console.log("PanelNativeAdv nativeData is nil"), void this.fillEmpty();
			this.icon.visible = !0;
			this.icon.loadImage(t.url, Laya.Handler.create(this.icon, () => {
				if (this.isDisposed) return;
				let t = this.icon.texture,
					e = Math.min(this.maxWidth / t.width, this.maxHeight / t.height),
					a = t.width * e,
					i = t.height * e;
				this.icon.size(a, i).pivot(a / 2, i / 2)
			}, null, !0)), this.title.text = t.title, this.desc.text = t.desc, this.textBtn.text = t.targetTitle, this.state = 1, console.log("PanelNativeAdv fill native icon")
		}
		fillEmpty() {
			this.initClickType(), 2 != this.state && this.canFillUi() && (this.icon.visible = !1, this.title.text = "", this.desc.text = "", this.textBtn.text = "", this.state = 2, console.log("PanelNativeAdv fill native empty"))
		}
		on_click_buttonPnlBig() {
			this.on_click_buttonClick()
		}
		on_click_buttonPnlSmall() {
			this.on_click_buttonClick()
		}
		on_click_buttonClick() {
			1 == this.state && mgrAdv.onNativeAdvClick(this.advName, this.userData)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelNativeBanner extends PanelBase {
		constructor() {
			super(...arguments), this.panelLayer = PANEL_LAYER.FUNCTION, this.panelStyle = 0, this.resourceName = "res/ui/PanelNativeBanner.json", this.bResetRootNode = !1, this._exportNodeInfo = {
				cc_buttonBg: "UIButton",
				cc_title: "Laya.Label",
				cc_desc: "Laya.Label",
				cc_icon: "Laya.Sprite",
				cc_click: "Laya.Image",
				cc_textBtn: "Laya.Label",
				cc_buttonClose: "UIButton"
			}, this.state = 0
		}
		buildUi() {
			console.log("打开原生baner..."), this.resNode.mouseThrough = !0;
			let t = this.context.userData;
			this.userData = t, this.advName = t.advName, this.fillEmpty(), this.hide(), this.registerMsg({
				[BASE_MSG.NATIVE_ADV_LOADED]: this.onMsgNativeAdvLoaded.bind(this),
				[BASE_MSG.ADV_CLICK_SUC]: this.onMsgAdvClickSuc.bind(this),
				[BASE_MSG.ADV_CLOSE_NATIVE_BANNER]: this.onMsgCloseBanner.bind(this)
			}), this.startProcMsg()
		}
		setContext(t) {
			super.setContext(t);
			let e = t.userData;
			this.userData = e, this.advName = e.advName
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		closePanelOnly() {
			super.close(), mgrAdv.closeNativeAdv(this.advName, !1)
		}
		close(t) {
			super.close(), mgrAdv.closeAdv(this.advName), mgrAdv.closeNativeAdv(this.advName, t)
		}
		onMsgNativeAdvLoaded(t) {
			t.userData.advName == this.advName && (this.userData = t.userData, this.loadFromData(t.nativeData))
		}
		onMsgAdvClickSuc(t) {
			console.log("--- > msg onMsgAdvClickSuc"), t.advName == this.advName && Timer.callLaterFrame(1, () => {
				this.close(!1)
			}, this)
		}
		onMsgCloseBanner() {
			this.closePanelOnly()
		}
		loadFromData(t) {
			this.show(), this.fillEmpty(), this.fillIcon(t)
		}
		canFillUi() {
			return !this.isDisposed
		}
		fillIcon(t) {
			if (1 != this.state && this.canFillUi()) {
				if (!t) return console.log("PanelNativeBanner nativeData is nil"), void this.fillEmpty();
				this.buttonBg.node.visible = !0, this.icon.visible = !0, this.icon.loadImage(t.url), this.title.text = t.title, this.desc.text = t.desc, this.textBtn.text = t.targetTitle, this.state = 1, console.log("PanelNativeBanner fill native icon")
			}
		}
		fillEmpty() {
			2 != this.state && this.canFillUi() && (this.buttonBg.node.visible = !1, this.icon.visible = !1, this.title.changeText(""), this.desc.changeText(""), this.textBtn.changeText(""), this.state = 2, console.log("PanelNativeBanner fill native empty"))
		}
		on_click_buttonBg() {
			1 == this.state && mgrAdv.onNativeAdvClick(this.advName, this.userData)
		}
		on_click_buttonClose() {
			this.close(!0)
		}
	}
	class PanelNotice extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelNotice.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Image",
				cc_bg: "Laya.Image",
				cc_btnOk: "UIButton"
			}, this._instOrBanner = new AdvInstOrBanner("enter_sprite_info", "")
		}
		buildUi() {}
		dispose() {
			this._instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this._instOrBanner.onFocus(t)
		}
		on_click_btnOk() {
			this.close()
		}
	}
	class PanelOffline extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelOffline.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_smallNode: "Laya.Sprite",
				cc_spriteTitle: "Laya.Sprite",
				cc_smallCount: "Laya.Label",
				cc_buttonGet: "UIButton",
				cc_bigNode: "Laya.Sprite",
				cc_spriteTlite2: "Laya.Sprite",
				cc_bigCount: "Laya.Label",
				cc_buttonAdv: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_offline", "banner_offline")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteTitle, "pnl_offline_02.png"), mgrI18n.trySetI18nImage(this.spriteTlite2, "pnl_offline_01.png");
			let t = mgrOffline.offlineProfit;
			this.smallCount.text = GameUtility.convertCoinString(t, !1), this.bigCount.text = GameUtility.convertCoinString(3 * t, !1), mgrAdv.getActive("offline_db") ? (mgrAdv.statisVideoShow("offline_db"), db.cop.b_adv_full_screen && UiHelper.addClickEvent(this.mask, this.onClickMask.bind(this), null, .5, !1), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()) : (this.bigNode.visible = !1, this.smallNode.y = -120)
		}
		dispose() {
			mgrGame.tryShowPanelFollow(), this.stopProcMsg(), this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			"offline_db" == t.advName && (this.getAward(!0), this.close())
		}
		onClickMask() {
			this.on_click_buttonAdv()
		}
		getAward(t) {
			let e = mgrOffline.tryGetOfflineProfit(t);
			e && mgrAlert.alertItems(e), _G.sendMsg("OFFLINE_AWARDED")
		}
		on_click_buttonGet() {
			this.getAward(!1), GameStatistics.statisCommonEvent(2506), this.close()
		}
		on_click_buttonAdv() {
			GameStatistics.statisCommonEvent(2507), mgrAdv.statisVideoClick("offline_db"), mgrAdv.dispatchAdv("offline_db", null, !0)
		}
		on_click_buttonClose() {
			GameStatistics.statisCommonEvent(2401), this.close()
		}
	}
	class HuDongPartItem extends ViewBase {
		constructor(t = {}) {
			super(t), this.resourceName = "res/prefab/HuDongPartItem.json", this._exportNodeInfo = {
				cc_lockNode: "Laya.Sprite",
				cc_icon: "Laya.Sprite",
				cc_tag1: "Laya.Sprite",
				cc_tag2: "Laya.Sprite",
				cc_stars: "UIHVLayout",
				cc_spriteCoin: "Laya.Sprite",
				cc_tipText: "Laya.Label",
				cc_buttonGet: "UIButton",
				cc_select: "Laya.Sprite",
				cc_adv: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this)), this.spriteCoin.visible = this.context.bOrder, this.registerMsg({
				UI_SELECT_ORDER_PART_ITEM: this.onMsgUiSelectOrderPartItem.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgUiSelectOrderPartItem(t) {
			this.select.visible = t == this.partId
		}
		onMsgAdvShowSuc(t) {
			"order_try" == t.advName && t.params == this.partId && (this.adv.visible = !1, this.partData.bAdv = !1, _G.sendMsg("UI_SELECT_ORDER_PART_ITEM", this))
		}
		setHuDongPart(t) {
			if (!this.callable) return this.safeCall(this.setHuDongPart, t);
			this.partId = t;
			let e = db.get_item_db(t);
			this.icon.loadImage(e.icon), this.select.visible = !1, this.adv.visible = !1, this.buttonGet.node.visible = !1, UiHelper.setStars(this.stars, e.quality, 5), this.tag1.visible = !1, this.tag2.visible = !1, BaseFacade.mItem.isOwned(t) ? (this.tipText.text = mgrI18n.getText("huDongPartItem.1"), this.lockNode.visible = !1) : (this.tipText.text = mgrI18n.getText("huDongPartItem.2"), this.lockNode.visible = !0), this.style = 0
		}
		setOrderPart(t, e, a) {
			if (!this.callable) return this.safeCall(this.setOrderPart, t, e, a);
			this.partData = t, this.partId = t.partId;
			let i = db.get_item_db(this.partId);
			this.icon.loadImage(i.icon), this.select.visible = a, this.adv.visible = t.bAdv, this.buttonGet.node.visible = !1, UiHelper.setStars(this.stars, i.quality, 5), this.tag1.visible = !1, this.tag2.visible = !1, this.tipText.text = DbExt.getTgPrice(i) + "", this.lockNode.visible = !1, this.style = 1
		}
		setPvpAwardPart(t) {
			if (!this.callable) return this.safeCall(this.setPvpAwardPart, t);
			this.partId = t;
			let e = db.get_item_db(t);
			if (this.icon.loadImage(e.icon), UiHelper.setStars(this.stars, e.quality, 5), UiHelper.loadTagIconWithPart(t, this.tag1, this.tag2), this.select.visible = !1, this.adv.visible = !1, BaseFacade.mItem.isOwned(t)) this.lockNode.visible = !1, this.buttonGet.node.visible = !1, this.tipText.text = mgrI18n.getText("huDongPartItem.1");
			else {
				mgrPvp.getPartFrom(t) ? (this.lockNode.visible = !0, this.buttonGet.node.visible = !1, this.tipText.text = mgrI18n.getText("huDongPartItem.2")) : (this.lockNode.visible = !0, this.buttonGet.node.visible = !0, this.tipText.text = "")
			}
			this.style = 2
		}
		onClick() {
			switch (this.style) {
				case 0:
					mgrAlert.openPanelLoading(UI_NAME.PanelPartInfo, {
						partId: this.partId
					});
					break;
				case 1:
					this.partData.bAdv ? (mgrAdv.statisVideoClick("order_try"), mgrAdv.dispatchAdv("order_try", this.partId, !0)) : _G.sendMsg("UI_SELECT_ORDER_PART_ITEM", this), GameStatistics.statisCommonEvent(3063);
					break;
				case 2:
					if (this.partId) {
						let t = mgrPvp.getPartFrom(this.partId);
						BaseFacade.mItem.isOwned(this.partId) ? mgrAlert.openPanelLoading(UI_NAME.PanelPartInfo, {
							partId: this.partId
						}) : t ? mgrAlert.alertDialog(`${t}${mgrI18n.getText("huDongPartItem.3")}`) : this.on_click_buttonGet()
					}
			}
		}
		getIconPos() {
			return UiHelper.getSelfGlobalPos(this.icon, new Laya.Point)
		}
		on_click_buttonGet() {
			if (this.partId) {
				mgrAlert.addAndAlert({
					itemId: this.partId,
					count: 1
				}, null), this.setPvpAwardPart(this.partId);
				let t = db.get_pvp_part_award_db(this.partId);
				t.statistics && GameStatistics.statisCommonEvent(t.statistics), mgrPvp.isAllPartsGetted && GameStatistics.statisCommonEvent(6022)
			}
		}
	}
	class PanelOrder extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelOrder.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteCardTop: "Laya.Sprite",
				cc_spriteCardCenter: "Laya.Sprite",
				cc_spriteCardBottom: "Laya.Sprite",
				cc_nodeInfo1: "Laya.Sprite",
				cc_name: "Laya.Label",
				cc_head: "Laya.Sprite",
				cc_moneyCount: "Laya.Label",
				cc_nodeInfo2: "Laya.Box",
				cc_sprite02: "Laya.Sprite",
				cc_parts: "UIHVLayout",
				cc_hearts: "UIHVLayout",
				cc_buttonOk: "UIButton",
				cc_buttonAdvChange: "UIButton",
				cc_bottomNode: "Laya.Sprite",
				cc_reuseScrollParts: "ReuseScrollList",
				cc_emptyText: "Laya.Label"
			}, this._instOrBanner = new AdvInstOrBanner("", ""), this.partItems = [], this.usedItem = []
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.sprite02, "pnl_order_02.png"), mgrI18n.trySetI18nImage(this.buttonOk.node, "pnl_order_03.png"), mgrI18n.trySetI18nImage(this.buttonAdvChange.node, "pnl_inside_01.png"), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_ORDER), this.order = this.context;
			let t = db.get_role_db(this.order.roleId);
			this.head.loadImage(t.head), this.name.text = mgrI18n.getText(t.tlite), this.reuseScrollParts.itemHeight = 160, this.reuseScrollParts.itemWidth = 127, this.reuseScrollParts.setVerticle(!1), this.reuseScrollParts.onItemCreate = function() {
				return new HuDongPartItem({
					bOrder: !0
				})
			}, this.reuseScrollParts.onItemChange = ((t, e) => {
				let a = this.curMatchParts[this.curSelectIdx];
				if (a) {
					let i = a[e];
					t.setOrderPart(i, this.order.parts[this.curSelectIdx].tag, this.usedItem[this.curSelectIdx] == i.partId)
				}
			}), this.bottomNode.y = 400, this.bottomNode.alpha = 0, this.bottomNode.visible = !1, UiHelper.setStars(this.hearts, 0, 5, !1), this.initAllMatchParts(), this.onSelectItem(0), this.playUiFadeIn(), this.registerMsg({
				UI_CLICK_ORDER_PART_ITEM: this.onMsgClickOrderPartItem.bind(this),
				UI_SELECT_ORDER_PART_ITEM: this.onMsgSelectOrderPartItem.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), _G.isGuiding && this.scheduleOnce(2, () => {
				let t = this.reuseScrollParts.getItem(0);
				t && (t.callIfLoaded(() => {
					mgrGuide.registerGuideNode(GUD_REG_NODE.PANELORDER_ITEM, t.node)
				}), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELORDER_BUTTONOK, this.buttonOk.node))
			}), this.buttonAdvChange.node.visible = !1, mgrInside.curOrders.length >= 2 && mgrAdv.checkActive("order_change") && (this.buttonAdvChange.node.visible = !0, mgrAdv.statisVideoShow("order_change"))
		}
		dispose() {
			this.stopProcMsg(), this._instOrBanner.dispose();
			for (let t = 0; t < this.partItems.length; t++) this.partItems[t].dispose();
			this.reuseScrollParts.clearAllItems(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this._instOrBanner.onFocus(t)
		}
		onOpenComplete() {
			_G.sendMsg("ORDRE_OPENED")
		}
		onMsgClickOrderPartItem(t) {
			this.onSelectItem(t.idx)
		}
		onMsgSelectOrderPartItem(t) {
			if (this.usedItem[this.curSelectIdx] == t.partId) {
				if (this.usedItem[this.curSelectIdx] = null, this.destroyed) return;
				return void this.updateState()
			}
			this.usedItem[this.curSelectIdx] = t.partId;
			let e = t.getIconPos(),
				a = this.getItem(this.curSelectIdx, null).getIconWorldPos();
			UiHelper.playItemScaleAndJump(t.partId, e, a, null, () => {
				this.destroyed || this.updateState()
			})
		}
		onMsgAdvShowSuc(t) {
			if ("order_change" == t.advName && t.params && null != t.params.nextIndex) {
				this.buttonAdvChange.node.visible = !1, this.close(!0);
				let e = mgrInside.curOrders[t.params.nextIndex];
				e && mgrPanel.openPanel(UI_NAME.PanelOrder, e)
			}
		}
		playUiFadeIn() {
			this.spriteCardTop.scaleY = 0, this.spriteCardBottom.scaleY = 0, this.nodeInfo1.scale(0, 0), this.nodeInfo2.alpha = 0, this.buttonAdvChange.node.x = -200, this.buttonOk.node.x = 200, cc.tween(this.spriteCardTop).to(.5, cc.PROP.SCALE1).call(() => {
				cc.tween(this.nodeInfo1).to(.5, cc.PROP.SCALE1).call(() => {
					cc.tween(this.buttonAdvChange.node).to(.5, {
						x: 0
					}).call(() => {
						this.showPartList()
					}).start(), cc.tween(this.buttonOk.node).to(.5, {
						x: 0
					}).start()
				}).start(), cc.tween(this.nodeInfo2).to(.5, cc.PROP.ALPHA1).start()
			}).start(), cc.tween(this.spriteCardBottom).to(.5, cc.PROP.SCALE1).start()
		}
		initAllMatchParts() {
			let t = [],
				e = mgrAdv.getActive("order_try");
			for (let a = 0; a < this.order.parts.length; a++) {
				let i = [];
				t.push(i);
				let s = this.order.parts[a],
					n = mItem.getAllItem(2, 1, s.partType),
					o = [];
				for (let t = 0; t < n.length; t++) {
					let e = n[t];
					db.get_item_db(e);
					!0 && (BaseFacade.mItem.isOwned(e) ? i.push({
						partId: e
					}) : o.push({
						partId: e,
						bAdv: !0
					}))
				}
				if (!_G.isGuiding && e) {
					let t = !1;
					for (let e = 0; e < 3; e++) {
						let e = Mathf.randomFromArray(o, !0);
						if (!e) break;
						i.unshift(e), t = !0
					}
					t && mgrAdv.statisVideoShow("order_try")
				}
			}
			this.allMatchParts = t
		}
		updateState() {
			let t = [];
			for (let e = 0; e < this.order.parts.length; e++) {
				let a = this.allMatchParts[e].slice();
				t.push(a);
				let i = this.order.parts[e];
				for (let t = a.length - 1; t >= 0; t--) this.isUsed(a[t].partId) && a.splice(t, 1);
				let s = this.getItem(e, i),
					n = this.usedItem[e];
				n ? s.fillPart(n, a.length > 0) : s.fillTypeOnly(i), s.setSelected(this.curSelectIdx == e)
			}
			this.curMatchParts = t;
			let e = this.getCostMoney(),
				a = parseInt(this.moneyCount.text || "0"),
				i = this.order.czDb.money - e;
			cc.tween(this.moneyCount, !0).then(cc.numberTo(.3, a, i)).start();
			let s = mgrInside.calcStar(this.order.czDb.money, e);
			UiHelper.changeStars(this.hearts, s, 5);
			let n = this.curMatchParts[this.curSelectIdx];
			n && n.length ? (this.reuseScrollParts.updateList(n.length), this.emptyText.visible = !1) : (this.reuseScrollParts.updateList(0), this.emptyText.visible = !0)
		}
		getItem(t, e) {
			let a = this.partItems[t];
			return a || ((a = new OrderPartItem).fillTypeOnly(e), a.setParent(this.parts), a.idx = t, this.partItems[t] = a), a
		}
		isUsed(t) {
			for (let e = 0; e < this.usedItem.length; e++)
				if (e != this.curSelectIdx && t == this.usedItem[e]) return !0;
			return !1
		}
		getCostMoney() {
			let t = 0;
			for (let e = 0; e < this.usedItem.length; e++) {
				let a = this.usedItem[e];
				a && (t += DbExt.getTgPrice(db.get_item_db(a)))
			}
			return t
		}
		onSelectItem(t) {
			this.curSelectIdx = t, this.updateState()
		}
		showPartList() {
			cc.tween(this.bottomNode, !0).show().to(.3, {
				y: 0,
				alpha: 1
			}, cc.OPTION.SINE_IN).start()
		}
		hidePartList() {
			cc.tween(this.bottomNode).to(.3, {
				y: 360,
				alpha: 0
			}, cc.OPTION.SINE_OUT).hide().start()
		}
		on_click_buttonOk() {
			let t = [];
			for (let e = 0; e < this.partItems.length; e++) {
				let a = this.partItems[e];
				a.partId && t.push({
					pos: a.getIconWorldPos(),
					itemId: a.partId
				})
			}
			this.hidePartList(), this.close();
			let e = this.order.czDb.money,
				a = this.getCostMoney(),
				i = mgrInside.calcStar(e, a);
			_G.sendMsg("ORDRE_FINISH", {
				star: i,
				order: this.order,
				items: t
			}), GameStatistics.statisCommonEvent(3064)
		}
		on_click_buttonAdvChange() {
			let t = mgrInside.curOrders;
			if (t.length >= 2) {
				let e = (t.indexOf(this.order) + 1) % t.length;
				mgrAdv.statisVideoClick("order_change"), mgrAdv.dispatchAdv("order_change", {
					nextIndex: e
				}, !0)
			} else _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelOrder.5"))
		}
	}
	class PanelOverNormal extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = ""
		}
		static openPanel(t) {
			let e = new ResLoader;
			e.add(db.get_animation_db(MODEL_ANIM.PTJS00).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_PTJS00).path, RES_TYPE.ANIMATIONCLIP);
			let a = Mathf.random(3);
			this.rndAnimId = "pt_jiesuan-ptjs0" + a, e.add(db.get_animation_db(this.rndAnimId).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db("face_pt_jiesuan-face_ptjs0" + a).path, RES_TYPE.ANIMATIONCLIP), e.add("res/ui/bg/over_bg.jpg", RES_TYPE.TEXTURE2D), mgrAlert.openWait(e, () => {
				mgrPanel.openPanelWithSingleton(PanelOverNormal, {
					onFinish: t
				})
			})
		}
		create(t) {
			t && t(!0);
			let e = new Laya.Sprite;
			e.size(_G.canvasWidth, _G.canvasHeight), this.createFromNode(e)
		}
		buildUi() {
			this.init3D()
		}
		dispose() {
			this.avatar && this.avatar.destroy(), super.dispose(), this.context && this.context.onFinish && this.context.onFinish()
		}
		init3D() {
			this.createScene3DBack(0, 60), this.camera.transform.localPosition = new Laya.Vector3(0, 1.45, .75), this.camera.transform.localRotationEuler = new Laya.Vector3(-3, 0, 0), this.avatar = new RoleAvatar(mgrPart.partsLevel), this.scene3DBack.addChild(this.avatar), this.bgPlan = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createPlane(2.16, 3.6, 10, 10)), this.bgPlan.transform.localPositionZ = -3, this.bgPlan.transform.localRotationEulerX = 90, this.camera.addChild(this.bgPlan);
			let t = mgrRes.tryLoadRes("res/ui/bg/over_bg.jpg");
			var e = new Laya.UnlitMaterial;
			e.albedoTexture = t, this.bgPlan.meshRenderer.sharedMaterial = e;
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.avatar.baseBody, PanelOverNormal.rndAnimId), a.simulate(.5), this.resNode.visible = !1, this.scheduleOnce(.1, () => {
				let t = UiHelper.screenShot(this.camera, _G.canvasWidth, _G.canvasHeight),
					e = 5 * mgrPart.photoWidth,
					a = 5 * mgrPart.photoHeight,
					i = Laya.Texture.create(t, (_G.canvasWidth - e) / 2, (_G.canvasHeight - a) / 2, e, a);
				mgrPart.setRolePhoto(i), this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelFriends)
			})
		}
	}
	class PanelOver extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelOver.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonNormal: "UIButton",
				cc_spriteNormal: "Laya.Sprite",
				cc_buttonSuper: "UIButton",
				cc_spriteButtonSuperAdFlag: "Laya.Sprite",
				cc_spriteSuperAd: "Laya.Sprite",
				cc_spriteRewardIcon: "Laya.Sprite",
				cc_labelRewardLabel: "Laya.Label",
				cc_spriteRewardLayout: "Laya.Sprite",
				cc_buttonRewardBox: "UIButton",
				cc_spriteRewardConfirm: "Laya.Sprite",
				cc_labelRewardHint: "Laya.Label",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_over", "banner_over"), this.rewardHit = !1, this.advFlag = !0, this.bManualClose = !1
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteNormal, "pnl_over_02.png"), mgrI18n.trySetI18nImage(this.spriteSuperAd, "pnl_over_04.png"), this.spriteRewardLayout.visible = !1, mgrAdv.getActive("weituo_add_score") ? (0 != db.cop.b_adv_reward_confirm && (this.spriteRewardLayout.visible = !0, this.advFlag = !1, this.rewardHit = Math.random() > .5, this.spriteRewardConfirm.visible = Math.random() > .5, this.rewardHit ? this.labelRewardHint.text = mgrI18n.getText("panelOver.3") : this.labelRewardHint.text = mgrI18n.getText("panelOver.4")), mgrAdv.statisVideoShow("weituo_add_score"), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()) : this.buttonSuper.node.setVisible(!1);
			let t = Mathf.randomEnable(db.cop.ad_flag_hide_ratios[4] || 0);
			this.spriteButtonSuperAdFlag.visible = !t
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), super.dispose(), this.bManualClose || _G.sendMsg("CLOSE_ROOM")
		}
		regGuide() {}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			if ("weituo_add_score" == t.advName) {
				this.context.fOnClick && this.context.fOnClick(!0), this.advFlag = !0;
				let t = mgrLevel.curLevelIdx;
				t > 0 && GameStatistics.statisCommonEvent(11e3 + t, 3), PanelPhoto.openPanel(this.close.bind(this))
			}
		}
		on_click_buttonNormal() {
			if (this.context.fOnClick && this.context.fOnClick(), 0 != db.cop.b_adv_reward_confirm && this.rewardHit != this.spriteRewardConfirm.visible && !this.advFlag) return void this.on_click_buttonSuper();
			GameStatistics.statisCommonEvent(5029, 0);
			let t = mgrLevel.curLevelIdx;
			t > 0 && GameStatistics.statisCommonEvent(11e3 + t, 2), PanelOverNormal.openPanel(this.close.bind(this))
		}
		on_click_buttonSuper() {
			GameStatistics.statisCommonEvent(5029, 1), mgrAdv.statisVideoClick("weituo_add_score"), mgrAdv.dispatchAdv("weituo_add_score", null, !0)
		}
		on_click_buttonRewardBox() {
			this.spriteRewardConfirm.visible = !this.spriteRewardConfirm.visible
		}
		on_click_buttonClose() {
			this.bManualClose = !0, this.close()
		}
	}
	class WidgetNativeAdv extends ViewBase {
		constructor(t, e, a) {
			super(), this.resourceName = "WidgetNativeAdv", this.title = null, this.icon = null, this.desc = null, this.btnClick = null, this.btnText = null, this.state = 0, this.advName = t, this.onLoadCallback = a, this.createFromNode(e)
		}
		onCreateComplete() {
			this.title = this.getChildText("title"), this.icon = this.getChildSprite("icon"), this.btnText = this.getChildText("btnClick/btnText"), this.desc = this.getChildText("desc"), UiHelper.addClickEvent(this.resNode, this.on_click_bg.bind(this));
			let t = this.getChild("btnClose");
			t && UiHelper.addClickEvent(t, this.on_click_btnClose.bind(this)), this.buildUi()
		}
		buildUi() {
			console.log("打开嵌入广告..."), this.hide(), this.registerMsg({
				[BASE_MSG.NATIVE_ADV_LOADED]: this.onMsgNativeAdvLoaded.bind(this),
				[BASE_MSG.ADV_CLICK_SUC]: this.onMsgAdvClickSuc.bind(this)
			}), this.startProcMsg(), this.advName && mgrAdv.dispatchAdv(this.advName)
		}
		dispose() {
			this.stopProcMsg(), super.dispose(), this.advName && mgrAdv.closeAdv(this.advName)
		}
		onMsgNativeAdvLoaded(t) {
			t.userData.advName == this.advName && (this.userData = t.userData, this.loadFromData(t.nativeData))
		}
		onMsgAdvClickSuc(t) {
			t.advName, this.advName
		}
		loadFromData(t) {
			console.log("WidgetNativeAdv.loadFromData"), this.show(), this.fillEmpty(), this.fillIcon(t), this.onLoadCallback && this.onLoadCallback(), this.onLoadCallback = null
		}
		canFillUi() {
			return !this.isDisposed
		}
		fillIcon(t) {
			if (1 != this.state && this.canFillUi()) {
				if (!t) return console.log("WidgetNativeAdv nativeData is nil"), void this.fillEmpty();
				this.icon.visible = !0, this.icon.loadImage(t.url), this.title.text = t.title, this.desc.text = t.desc, this.btnText.text = t.targetTitle, this.state = 1, console.log("WidgetNativeAdv fill native icon")
			}
		}
		fillEmpty() {
			2 != this.state && this.canFillUi() && (this.icon.visible = !1, this.title.text = "", this.desc.text = "", this.btnText.text = "", this.state = 2, console.log("WidgetNativeAdv fill native empty"))
		}
		on_click_btnClose() {
			this.dispose()
		}
		on_click_bg() {
			1 == this.state && mgrAdv.onNativeAdvClick(this.advName, this.userData)
		}
	}
	class PanelOverCommon extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelOverCommon.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_bgImage: "Laya.Image",
				cc_buttonFullScreenShare: "UIButton",
				cc_rankNode: "Laya.Sprite",
				cc_rank4: "Laya.Text",
				cc_myRank: "Laya.Text",
				cc_templateName: "Laya.Label",
				cc_templateScore: "Laya.Label",
				cc_descLabel: "Laya.Label",
				cc_spriteScore: "Laya.Sprite",
				cc_titleLabel: "Laya.Label",
				cc_spriteRole: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_myScore: "Laya.Label",
				cc_advNode: "Laya.Sprite",
				cc_btnNode: "Laya.Sprite",
				cc_buttonOk: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_over_common", "banner_over_common")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteScore, "pnl_skincare_01.png"), this.templateName.visible = !1, this.templateScore.visible = !1, this.rank4.font = GConfig.bmf_rank, this.myScore.font = GConfig.bmf_over, this.buttonFullScreenShare.node.visible = !1;
			this.spriteRole.loadImage(`res/icon_head/${{0:"1",1:"2",2:"7",3:"24",4:"9"}[mgrGame.contractIndex]||0}.png`);
			let t = this.context ? this.context.score : 100;
			if (this.myScore.text = t + "", this.titleLabel.text = mgrI18n.getText(`game_cnf4.${mgrOutside.getGameAwardCount(t)}`) || mgrI18n.getText("panelOverCommon.4"), null != this.context.xinQing) this.rankNode.visible = !1, this.descLabel.text = String.format(mgrI18n.getText("panelOverCommon.3"), this.context.xinQing + "");
			else {
				let e = 200;
				this.myRank.text = `${mgrI18n.getText("panelOverCommon.1")}${e/t*Mathf.random(10,20)|0}`;
				for (let a = 0; a < 4; a++)(e -= Mathf.random(1, 10)) < t && (e = t), this.createItem(a, mgrRank.getRandomName(), e);
				this.descLabel.visible = !1
			}
			this.nativeAdv = new WidgetNativeAdv("emb_over_common", this.advNode, () => {}), this.registerMsg({
				[BASE_MSG.SDK_SHARE_SUC]: this.onShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onShareSuc.bind(this)
			}), this.startProcMsg(), t >= 100 && mgrSound.playSound("yllsd_20")
		}
		dispose() {
			this.stopProcMsg(), this.nativeAdv && this.nativeAdv.dispose(), this.instOrBanner.dispose(), this.shareBtn && this.shareBtn.dispose(), super.dispose(), mgrGuide.sendMsgKey("COMM_OVER_CLOSE"), null != this.context.xinQing && PanelDialogCat.tryOpenPanel(1)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		regGuide() {}
		onShareSuc() {
			this.on_click_buttonOk()
		}
		createItem(t, e, a) {
			let i = this.bg.addChild(new Laya.Label);
			i.anchorX = .5, i.pos(this.templateName.x, this.templateName.y + 40 * t, !0), i.width = this.templateName.width, i.height = this.templateName.height, i.align = this.templateName.align, i.valign = this.templateName.valign, i.wordWrap = !0, i.fontSize = this.templateName.fontSize, i.color = this.templateName.color, i.text = e;
			let s = this.bg.addChild(new Laya.Text);
			s.pos(this.templateScore.x, this.templateScore.y + 40 * t, !0), s.fontSize = this.templateScore.fontSize, s.color = this.templateScore.color, s.width = this.templateScore.width, s.height = this.templateScore.height, s.align = this.templateScore.align, s.valign = this.templateScore.valign, s.wordWrap = !0, s.text = mgrI18n.getText("panelOverCommon.2") + a
		}
		on_click_buttonClose() {
			this.on_click_buttonOk()
		}
		on_click_buttonOk() {
			this.close(), null != this.context.xinQing && mgrGuide.sendMsgKey("SKINCARE_OVER"), this.context && this.context.items && mgrAlert.addAndAlertItems(this.context.items, 35)
		}
		on_click_buttonFullScreenShare() {}
	}
	class PanelOverRemedy extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelOverRemedy.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonSuper: "UIButton",
				cc_spriteButtonSuperAdFlag: "Laya.Sprite",
				cc_spriteSuper: "Laya.Sprite",
				cc_spriteRewardIcon: "Laya.Sprite",
				cc_labelRewardText: "Laya.Label",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteSuper, "pnl_over_03.png"), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg();
			let t = Mathf.randomEnable(db.cop.ad_flag_hide_ratios[4] || 0);
			this.spriteButtonSuperAdFlag.visible = !t
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			if ("weituo_add_score" == t.advName) {
				let t = mgrLevel.curLevelDb;
				mgrPart.partScoreResult.totalScore += 10, mgrPart.partScoreResult.suc = mgrPart.partScoreResult.totalScore >= t.score, this.context.fOnClick && this.context.fOnClick(), mgrLevel.endLevel(mgrPart.partScoreResult.suc), this.close()
			}
		}
		on_click_buttonSuper() {
			mgrAdv.dispatchAdv("weituo_add_score", null, !0)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelPartInfo extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelPartInfo.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Image",
				cc_bg: "Laya.Box",
				cc_bgImage: "Laya.Image",
				cc_icon: "Laya.Sprite",
				cc_stars: "UIHVLayout",
				cc_buttonClose: "UIButton",
				cc_advNode: "Laya.Sprite",
				cc_btnNode: "Laya.Sprite",
				cc_buttonOk: "UIButton",
				cc_buttonGet: "UIButton",
				cc_getLabel: "Laya.Label"
			}, this.instOrBanner = new AdvInstOrBanner("enter_part_info", "banner_part_info")
		}
		buildUi() {
			let t = this.context && this.context.partId;
			if (t) {
				let e = db.get_item_db(t);
				this.partDb = e, this.icon.loadImage(e.icon), UiHelper.setStars(this.stars, e.quality, 5), BaseFacade.mItem.isOwned(t) ? this.buttonGet.node.visible = !1 : (this.buttonOk.node.visible = !1, this.refreshButtonText())
			} else console.error("PanelPartInfo.buildUi 找不到partId"), this.close(!0);
			this.nativeAdv = new WidgetNativeAdv("emb_part_info", this.advNode, () => {
				this.bgImage.height = 550, this.btnNode.y = 110
			}), this.registerMsg({
				JOIN_LEVEL: this.close.bind(this)
			}), this.startProcMsg(), MoreGameBanner.setBannerVisible(!0)
		}
		dispose() {
			this.stopProcMsg(), this.nativeAdv && this.nativeAdv.dispose(), this.instOrBanner.dispose(), MoreGameBanner.setBannerVisible(!1), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		refreshButtonText() {
			this.jumpType = PartGetter.getPartJumpType(this.partDb.id);
			let t = mgrI18n.getText("panelPartInfo.1");
			switch (this.jumpType) {
				case 0:
					t = mgrI18n.getText("panelPartInfo.2");
					break;
				case 1:
					t = mgrI18n.getText("panelPartInfo.3");
					break;
				case 2:
					t = mgrI18n.getText("panelPartInfo.4");
					break;
				case 3:
					t = mgrI18n.getText("panelPartInfo.5");
					break;
				case 4:
					t = mgrI18n.getText("panelPartInfo.6");
					break;
				case 5:
					t = mgrI18n.getText("panelPartInfo.7");
					break;
				case 6:
					t = mgrI18n.getText("panelPartInfo.8");
					break;
				case 7:
					t = mgrI18n.getText("panelPartInfo.9");
					break;
				case 9:
					t = mgrAdv.checkActive("draw_dance") ? mgrI18n.getText("panelPartInfo.10") : mgrI18n.getText("panelPartInfo.11");
					break;
				case 10:
					t = mgrI18n.getText("panelPartInfo.12");
					break;
				case 11:
					t = mgrI18n.getText("panelPartInfo.13");
					break;
				case 12:
					t = mgrI18n.getText("panelPartInfo.14");
					break;
				case 13:
					t = mgrI18n.getText("panelPartInfo.15");
					break;
				case 14:
					t = mgrI18n.getText("panelPartInfo.16");
					break;
				case 8:
					t = mgrI18n.getText("panelPartInfo.11");
					break;
				case 15:
					t = mgrAdv.checkActive("open_class_egg") ? mgrI18n.getText("panelPartInfo.17") : mgrI18n.getText("panelPartInfo.11");
					break;
				case 16:
					t = mgrAdv.checkActive("get_shoe_color_egg") ? mgrI18n.getText("panelPartInfo.18") : mgrI18n.getText("panelPartInfo.11");
					break;
				case 17:
					t = mgrI18n.getText("panelPartInfo.19");
					break;
				default:
					t = mgrI18n.getText("panelPartInfo.20")
			}
			this.getLabel.text = t
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonGet() {
			switch (this.jumpType) {
				case 0:
					mgrJumpPanel.jumpTo(JUMP_PANEL.DREAM);
					break;
				case 1:
					mgrJumpPanel.jumpTo(JUMP_PANEL.MANG_HE);
					break;
				case 2:
					mgrJumpPanel.jumpTo(JUMP_PANEL.SZZ);
					break;
				case 3:
					mgrJumpPanel.jumpTo(JUMP_PANEL.PVP);
					break;
				case 4:
					mgrAlert.openPanelLoading(UI_NAME.PanelSign);
					break;
				case 5:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.21"));
					break;
				case 6:
					mgrAlert.openPanelLoading(UI_NAME.PanelPhone);
					break;
				case 7:
					mgrAlert.openPanelLoading(UI_NAME.PanelShopLvup);
					break;
				case 8:
					db.cop.isSupportRecordShare ? mgrAlert.openPanelLoading(UI_NAME.PanelVideoRankShare) : mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.22"));
					break;
				case 15:
					mgrAdv.checkActive("open_class_egg") ? mgrAlert.openPanelLoading(UI_NAME.PanelClassRoom, null, () => {
						mgrPanel.closeLayer(PANEL_LAYER.UI)
					}) : mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.22"));
					break;
				case 16:
					mgrAdv.checkActive("get_shoe_color_egg") ? mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, null, () => {
						mgrPanel.closeLayer(PANEL_LAYER.UI)
					}) : mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.22"));
					break;
				case 9:
					mgrAdv.checkActive("draw_dance") ? mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, null, () => {
						mgrPanel.closeLayer(PANEL_LAYER.UI)
					}) : mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.22"));
					break;
				case 10:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.23"));
					break;
				case 11:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.24"));
					break;
				case 12:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.25"));
					break;
				case 13:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.26"));
					break;
				case 14:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.27"));
					break;
				case 17:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.28"));
					break;
				default:
					mgrAlert.alertDialog(mgrI18n.getText("panelPartInfo.29"))
			}
		}
		on_click_buttonOk() {
			this.close()
		}
	}
	class mgrTalk extends _mgrBase {
		static onload() {
			console.log("下一步对话====")
		}
		static startTalk(t) {
			let e = db.get_talk_db(t);
			this._cmds = e.cmds, this._cmdIdx = 0, this._lastRoleId = null, this.talkTexts = [], e.awardItem ? this.awardItem = {
				itemId: e.awardItem,
				count: e.itemCount
			} : this.awardItem = null, this.isDone = !1, this.next()
		}
		static endTalk() {
			this.isDone || (this.isDone = !0, _G.sendMsg("TALK_FINISH", this.awardItem))
		}
		static gotoTalk(t) {
			this._cmds = db.get_talk_db(t).cmds, this._cmdIdx = 0, this.isDone = !1, this.next()
		}
		static next() {
			let t = this._cmds[this._cmdIdx++];
			if (console.log("下一步对话====", t), t) switch (t) {
				case "sound":
					mgrSound.playSound(this._cmds[this._cmdIdx++]), this.next();
					break;
				case "anim":
					_G.sendMsg("TALK_UPDATE_ANIM", this._cmds[this._cmdIdx++]), this.next();
					break;
				case "btn":
					let e = this._cmds[this._cmdIdx++].split(";"),
						a = this._cmds[this._cmdIdx++].split(";"),
						i = [{
							btnText: e[0],
							cmd: e[1]
						}, {
							btnText: a[0],
							cmd: a[1]
						}];
					_G.sendMsg("TALK_SHOW_BTN", [i]);
					break;
				case "talk":
					t = this._cmds[this._cmdIdx++];
				default:
					let s = t.split(";");
					this.talkTexts.push(this._createTalkTextItem(s[0], s[1], s[2])), _G.sendMsg("TALK_UPDATE_TEXT")
			} else this.endTalk()
		}
		static _createTalkTextItem(t, e, a) {
			e || (e = t, t = "", this._lastRoleId = "");
			let i = {
					bLeft: !0,
					roleId: t,
					text: e,
					anim: a
				},
				s = this.talkTexts[this.talkTexts.length - 1];
			return s && (this._lastRoleId == t ? i.bLeft = s.bLeft : (this._lastRoleId = t, s && (i.bLeft = !s.bLeft))), i
		}
		static getTalkResList(t, e = !1) {
			for (var a = db.get_talk_db(t), i = 0, s = Object.create(null); i < a.cmds.length;) {
				var n = a.cmds[i++];
				switch (n) {
					case "sound":
					case "anim":
						i++;
						break;
					case "btn":
						i += 2;
						break;
					case "talk":
						n = a.cmds[i++];
					default:
						var o = n.indexOf(";");
						if (o > 0) {
							var r = n.substring(0, o);
							s[db.get_role_db(r).image] = !0
						}
				}
			}
			return Object.keys(s)
		}
		static getTalkRoleId(t) {
			let e = db.get_talk_db(t),
				a = 0;
			for (; a < e.cmds.length;) {
				var i = e.cmds[a++];
				switch (i) {
					case "sound":
					case "anim":
						a++;
						break;
					case "btn":
						a += 2;
						break;
					case "talk":
						i = e.cmds[a++];
					default:
						var s = i.indexOf(";");
						if (s > 0) {
							var n = i.substring(0, s);
							if ("main" == n) continue;
							return n
						}
				}
			}
			return null
		}
		static getTextShowTime(t) {
			return Mathf.lerpFromInverseLerp(0, db.game_cnf.role_talk_delta, 0, 20, t.length)
		}
	}
	mgrTalk.isDone = !1;
	class PhoneItem extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/PhoneItem.json", this._exportNodeInfo = {
				cc_bg: "Laya.Sprite",
				cc_head: "Laya.Sprite",
				cc_title: "Laya.Label",
				cc_itemIcon: "Laya.Sprite",
				cc_itemCount: "Laya.Label",
				cc_spriteGetted: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {}
		setData(t) {
			if (!this.callable) return void this.safeCall(this.setData, t);
			let e = db.get_level_db(t);
			if (!e) return void console.warn(`关卡不存在 id = ${t}`);
			this.head.loadImage(db.get_role_db(e.roleId).head), this.title.text = e.title, this.itemIcon.loadImage(db.get_item_db(e.itemId).icon), this.itemCount.text = "*" + e.itemCount, this.spriteGetted.visible = !1, this.bg.loadImage("res/ui/pnl_phone/art_02.png"), Laya.UIUtils.gray(this.resNode, !1);
			let a = mgrLevel.getLastLevel();
			t < a ? (this.title.color = "#006AC3", mgrI18n.trySetI18nImage(this.spriteGetted, "pnl_main_33.png"), this.spriteGetted.visible = !0) : t == a ? (this.title.color = "#FE348B", this.bg.loadImage("res/ui/pnl_phone/art_01.png")) : t > a && (this.title.color = "#808080", Laya.UIUtils.gray(this.resNode, !0))
		}
	}
	class PanelPhone extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelPhone.json", this._exportNodeInfo = {
				cc_topLeftNode: "Laya.Sprite",
				cc_imageLevelBg: "Laya.Image",
				cc_weiTuoCount: "Laya.Label",
				cc_buttonClose: "UIButton",
				cc_dialogScroll: "ReuseScrollList",
				cc_buttonNo: "UIButton",
				cc_buttonYes: "UIButton",
				cc_costNode: "Laya.Sprite",
				cc_advNode: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_phone", "banner_phone")
		}
		buildUi() {
			mgrGuide.dispatchGuide(GUD_EVENT.ENTER_PHONE) || GameStatistics.statisCommonEvent(5027), mgrGame.tryOpenPanelRankVideoTips(5), GameStatistics.statisOnStageStart(7507), this.topLeftNode.y = -150, cc.tween(this.topLeftNode).to(.3, {
				y: 0
			}, cc.OPTION.BACK_OUT).start(), this.imageLevelBg.height = 770 + _G.canvasFitHeight - 1024, this.dialogScroll.height = this.imageLevelBg.height - 185;
			let t = this.imageLevelBg.y;
			this.imageLevelBg.y = t - 900, cc.tween(this.imageLevelBg).to(.4, {
				y: t
			}, cc.OPTION.BACK_OUT).start(), this.dialogScroll.onItemCreate = function() {
				return new PhoneItem
			}, this.dialogScroll.onItemChange = ((t, e) => {
				t.setData(e)
			});
			let e = mgrLevel.getLastLevel(),
				a = db.get_level_db_arr();
			this.dialogScroll.updateList(a.length, e, 0, !0), this.refreshWeiTuoCount(), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELPHONE_BUTTONYES, this.buttonYes.node, !0), 0 != db.cop.b_adv_full_screen && UiHelper.addClickEvent(this.resNode.getChildByName("bg"), this.onClickMask.bind(this), null, .5, !1), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.dialogScroll && this.dialogScroll.clearAllItems(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgShowSuc(t) {
			"weituo" == t.advName && (BaseFacade.mItem.addItem("1010", 1, null), this.on_click_buttonYes())
		}
		refreshWeiTuoCount() {
			let t = BaseFacade.mItem.getItemCount("1010");
			this.weiTuoCount.text = t + "", t <= 0 && mgrAdv.getActive("weituo") ? (this.advNode.visible = !0, this.costNode.visible = !1, mgrAdv.statisVideoShow("weituo")) : (this.advNode.visible = !1, this.costNode.visible = !0)
		}
		onClickMask() {
			console.log("QT_ phone _ mask  " + this.advNode.visible), this.advNode.visible && this.on_click_buttonYes()
		}
		on_click_buttonClose() {
			this.close(), GameStatistics.statisOnStageEnd(7507)
		}
		on_click_buttonNo() {
			this.on_click_buttonClose()
		}
		on_click_buttonYes() {
			if (BaseFacade.mItem.enoughItem("1010", 1)) {
				_G.isGuiding || GameStatistics.statisCommonEvent(5028, 0), this.buttonYes.interactable = !1, this.buttonNo.interactable = !1, this.buttonClose.interactable = !1;
				let t = mgrLevel.getLastLevel();
				t > 0 && GameStatistics.statisCommonEvent(11e3 + t, 0);
				let e = db.get_level_db(t);
				e.talkId ? cc.tween(this.costNode).by(.5, {
					scaleX: 1.2,
					scaleY: 1.2,
					y: -30
				}).to(.1, cc.PROP.ALPHA0).call(() => {
					let t = mgrLevel.getLastLevel();
					t > 0 && (GameStatistics.statisCommonEvent(11e3 + t, 1), GameStatistics.statisOnStageStart(12e3 + t));
					let e = db.get_level_db(t);
					mgrPart.openPanelRoom(ROOM_TYPE.LEVEL, e.parts.length ? e.parts : null, () => {
						_G.sendMsg("JOIN_LEVEL"), mgrTalk.endTalk(), this.close()
					}), mgrGuide.isGuiding || GameStatistics.statisCommonEvent(5030)
				}).start() : mgrPart.openPanelRoom(ROOM_TYPE.LEVEL, e.parts.length ? e.parts : null, () => {
					_G.sendMsg("JOIN_LEVEL"), mgrTalk.endTalk(), this.close()
				})
			} else mgrAdv.getActive("weituo") ? (GameStatistics.statisCommonEvent(5028, 1), mgrAdv.statisVideoClick("weituo"), mgrAdv.dispatchAdv("weituo", null, !0)) : mgrAlert.alertNotEnough("1010")
		}
	}
	class PanelPvp extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelPvp.json", this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_finishText: "Laya.Label",
				cc_infoNode: "Laya.Label",
				cc_jinJiText: "Laya.Label",
				cc_ticketCount: "Laya.Label",
				cc_buttonJoin: "UIButton",
				cc_buttonRank: "UIButton",
				cc_buttonRongYao: "UIButton",
				cc_buttonAward: "UIButton",
				cc_curLight: "Laya.Sprite",
				cc_topNode: "Laya.Sprite",
				cc_nodeName: "Laya.Sprite",
				cc_barMaskSec: "UIBarMask",
				cc_sec0: "Laya.Sprite",
				cc_sec1: "Laya.Sprite",
				cc_sec2: "Laya.Sprite",
				cc_sec3: "Laya.Sprite",
				cc_sec4: "Laya.Sprite",
				cc_buttonColorEggClock: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_buttonShuiJing: "UIButton",
				cc_shuiJingCount: "Laya.Label"
			}, this.instOrBanner = new AdvInstOrBanner("enter_pvp", "")
		}
		addPreloadRes(t) {
			mgrPvp.otherData || mgrPvp.randomPlayer(), mgrPart.addPartResList(mgrPvp.otherData.parts, t)
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonRank.node, "pnl_pvp_02.png"), mgrI18n.trySetI18nImage(this.buttonAward.node, "pnl_pvp_01.png"), mgrI18n.trySetI18nImage(this.buttonRongYao.node, "pnl_pvp_03.png"), mgrI18n.trySetI18nImage(this.nodeName, "pnl_pvp_06.png");
			let t = [];
			for (let e = 0; e < 9; e++) {
				let a = this.centerNode.addChild(new PvpItem);
				a.pos(e % 3 * 140 - 140, 144 * (e / 3 | 0) - 210), t.push(a)
			}
			this.pvpItems = t, this.refresh(), this.checkColorEgg(), this.registerMsg({
				PVP_FINISH: this.onMsgPvpFinish.bind(this),
				CLOSE_PVP: this.close.bind(this)
			}), this.startProcMsg(), _G.sendMsg("ENTER_PVP"), GameStatistics.statisOnStageStart(7504), this.awardTip = new UITip(this.buttonAward.node, function() {
				return mgrPvp.isPvpAwardCanReceive() ? 0 : -1
			}, 1)
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), super.dispose(), GameStatistics.statisOnStageEnd(7504), this.awardTip && this.awardTip.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgPvpFinish() {
			this.refresh()
		}
		refresh() {
			this.shuiJingCount.text = BaseFacade.mItem.getItemCount("1006") + "";
			let t = mgrPvp.curLevelStates;
			for (let e = 0; e < 9; e++) {
				let a = this.pvpItems[e];
				a.setData(e, t[e]), 1 == t[e] ? this.curLight.pos(a.x, a.y - 90) : 2 == t[e] && 0
			}
			let e = mgrPvp.calcRealDuamwei(mgrPvp.totalStar);
			if (e >= db.game_cnf.pvp_duanwei_names.length - 1) this.finishText.visible = !0, this.infoNode.visible = !1;
			else {
				this.finishText.visible = !1;
				mgrI18n.getText("game_cnf.2");
				this.jinJiText.text = mgrI18n.getText(`quest_db.${12+e}`)
			}
			for (let t = 0; t < 5; t++) this["sec" + t].getChildAt(0).visible = e >= t;
			this.barMaskSec.progress = e / 4, mgrPvp.curTicket <= 0 ? (this.ticketCount.visible = !1, this.buttonJoin.node.visible = !1) : this.ticketCount.text = `${mgrI18n.getText("panelPvp.5")} ${mgrPvp.curTicket} `, cc.clearTween(this.buttonJoin.node), UiHelper.playBreathe(this.buttonJoin.node)
		}
		checkColorEgg() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.HUAI_BIAO, EGGS_STEP.THIRD) || (this.buttonColorEggClock.node.visible = !1)
		}
		on_click_buttonJoin() {
			GameStatistics.statisCommonEventOnce(6003), mgrAlert.openPanelLoading(UI_NAME.PanelPvpSelect)
		}
		on_click_buttonRank() {
			mgrAlert.openPanelLoading(UI_NAME.PanelRank)
		}
		on_click_buttonRongYao() {
			mgrAlert.openPanelLoading(UI_NAME.PanelPvpRongYao)
		}
		on_click_buttonAward() {
			mgrPvp.openPanelPvpAward()
		}
		on_click_buttonClose() {
			mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_buttonShuiJing() {
			mgrAlert.alertDialog(mgrI18n.getText("panelPvp.6"))
		}
		on_click_buttonColorEggClock() {
			this.buttonColorEggClock.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggClock.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggClock.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.huai_biao)
		}
	}
	class PvpItem extends Laya.Sprite {
		constructor() {
			super(), this.size(106, 138).pivot(53, 69), this.faceSprite = this.addChild(new Laya.Sprite).pos(24, 32, !0), this.indexText = this.addChild(new Laya.Text), this.indexText.pos(9, 85), this.indexText.fontSize = 15, this.indexText.color = "#ff51ac", this.indexText.strokeColor = "#ffffff", this.indexText.stroke = 2, this.indexText.align = "center", this.indexText.width = 88
		}
		setData(t, e) {
			switch (this.index = t, this.indexText.text = String.format(mgrI18n.getText("panelPvp.7"), (t + 1).toString()), e) {
				case 1:
					this.loadImage("res/ui/pnl_pvp/stage_on.png"), this.faceSprite.loadImage("");
					break;
				case 2:
					this.loadImage("res/ui/pnl_pvp/stage_on.png"), this.faceSprite.loadImage("res/ui/pnl_pvp/face_win.png");
					break;
				case 3:
					this.loadImage("res/ui/pnl_pvp/stage_on.png"), this.faceSprite.loadImage("res/ui/pnl_pvp/face_lose.png");
					break;
				default:
					this.loadImage("res/ui/pnl_pvp/stage_off.png"), this.faceSprite.loadImage("")
			}
		}
	}
	class PanelPvpCard extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelPvpCard.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_spriteBg: "Laya.Sprite",
				cc_roleName: "Laya.Label",
				cc_level: "Laya.Label",
				cc_pvpArea: "Laya.Label",
				cc_buttonJoin: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_pvp_card")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteBg, "pnl_pvp_04.png"), console.log("PanelPvpCard多语言 名字？？？"), this.roleName.text = mgrRank.playerName
		}
		dispose() {
			this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		on_click_buttonJoin() {
			this.close(), mgrPvp.join(), mgrAlert.openGameLoading(UI_NAME.PanelPvp), GameStatistics.statisCommonEvent(6002)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelPvpDeclare extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelPvpDeclare.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_template: "Laya.Image",
				cc_scrollView: "ReuseScrollList"
			}
		}
		buildUi() {
			this.scrollView.onItemCreate = (() => {
				let t = new DeclareItem;
				return t.createFromNode(UiHelper.cloneSprite(this.template)), t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}), this.scrollView.onItemChange = ((t, e) => {
				let a = mgrI18n.getText("game_cnf.1")[e];
				t.setData(a, !!this.curSelectItem && this.curSelectItem.text == a)
			}), this.scrollView.updateList(db.game_cnf.pvp_texts.length), this.registerMsg({
				UI_CLICK_DECLARE_ITEM: this.onMsgClickDeclareItem.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.scrollView && this.scrollView.clearAllItems(), super.dispose()
		}
		onMsgClickDeclareItem(t) {
			this.curSelectItem || (this.curSelectItem = t, this.curSelectItem.setOn(), PanelPvpOverReady.openPanel({
				text: this.curSelectItem.text,
				onFinish: () => {
					this.close()
				}
			}))
		}
	}
	class DeclareItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "DeclareItem"
		}
		onCreateComplete() {
			this.textLabel = this.resNode.getChildAt(0), UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this), null, !0)
		}
		setData(t, e) {
			this.text = t, this.textLabel && (this.textLabel.text = t), e ? this.setOn() : this.setOff()
		}
		setOn() {
			this.resNode.skin = "res/ui/pnl_pvp/text_bg_off.png"
		}
		setOff() {
			this.resNode.skin = "res/ui/pnl_pvp/art_03.png"
		}
		onClick() {
			_G.sendMsg("UI_CLICK_DECLARE_ITEM", this), GameStatistics.statisCommonEvent(6006)
		}
	}
	class PanelPvpOver extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelPvpOver.json", this._exportNodeInfo = {
				cc_buttonFullScreenShare: "UIButton",
				cc_boxRight: "Laya.Box",
				cc_spriteMaskRight: "Laya.Sprite",
				cc_spriteRoleRight: "Laya.Sprite",
				cc_spriteMy: "Laya.Sprite",
				cc_roleNameRight: "Laya.Label",
				cc_scoreTextRight: "Laya.Label",
				cc_boxLeft: "Laya.Box",
				cc_spriteMaskLeft: "Laya.Sprite",
				cc_spriteRoleLeft: "Laya.Sprite",
				cc_spriteEnemy: "Laya.Sprite",
				cc_roleNameLeft: "Laya.Label",
				cc_scoreTextLeft: "Laya.Label",
				cc_topNode: "Laya.Sprite",
				cc_tag1: "Laya.Sprite",
				cc_tag2: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_buttonOk: "UIButton"
			}, this.parts = [], this.myScore = 0, this.isChecked = !1, this._bAward = !1
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteMy, "pnl_pvp_over_02.png"), mgrI18n.trySetI18nImage(this.spriteEnemy, "pnl_pvp_over_01.png"), this.pvpDb = mgrPvp.curLevelDb;
			let t = [];
			for (const e in mgrPvp.myParts) t.push(mgrPvp.myParts[e]);
			mgrPart.removeUnchoosePart(t), this.parts = t, this.curScore = 0 | this.pvpDb.score, this.buttonClose.node.visible = !0, this.buttonOk.node.visible = !0, this.buttonFullScreenShare.node.visible = !1, this.scoreTextLeft.font = GConfig.bmf_over, this.scoreTextLeft.text = "0";
			let e = new Laya.Sprite,
				a = new Laya.Point;
			UiHelper.local2local(this.spriteMaskLeft, this.spriteRoleLeft, a), e.graphics.drawImage(this.spriteMaskLeft.texture, a.x, a.y), this.spriteRoleLeft.mask = e;
			let i = this.context.otherTex;
			if (i) {
				let t = new Laya.Sprite;
				t.texture = i, this.spriteRoleLeft.addChild(t), t.pivot(t.width / 2, t.height / 2), t.pos(0, 0), t.scale(.6, .6)
			}
			this.roleNameLeft.text = mgrPvp.otherData.name, this.scoreTextRight.font = GConfig.bmf_over, this.scoreTextRight.text = "0";
			for (let t = 0; t < this.parts.length; t++) {
				let e = this.parts[t];
				this.updateProgress(e, !1)
			}
			let s = new Laya.Sprite,
				n = new Laya.Point;
			UiHelper.local2local(this.spriteMaskRight, this.spriteRoleRight, n), s.graphics.drawImage(this.spriteMaskRight.texture, n.x, n.y), this.spriteRoleRight.mask = s;
			let o = this.context.selfTex;
			if (o) {
				let t = new Laya.Sprite;
				t.texture = o, this.spriteRoleRight.addChild(t), t.pivot(t.width / 2, t.height / 2), t.pos(0, 0), t.scale(.6, .6)
			}
			this.roleNameRight.text = mgrRank.playerName, UiHelper.loadTagIconWithData(mgrPvp.curLevelDb, this.tag1, this.tag2), this.onMsgItemChange(null), this.init3D(), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				[BASE_MSG.ADV_SHOW_FAIL]: this.onMsgAdvShowFail.bind(this),
				[BASE_MSG.SDK_SHARE_SUC]: this.onShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onShareSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.shareBtn && this.shareBtn.dispose(), _G.sendMsg("PVP_FINISH"), super.dispose()
		}
		onMsgItemChange(t) {}
		onMsgAdvShowSuc(t) {
			"pvp_add_score" == t.advName && (BaseFacade.mItem.addItem("1006", 120, null), this.playFlyAdv())
		}
		onMsgAdvShowFail(t) {
			"pvp_add_score" == t.advName && this.checkResult()
		}
		onShareSuc() {
			Laya.timer.frameOnce(1, this, this.showOkButton)
		}
		init3D() {
			this.createScene3DBack(1, 30), this.camera.transform.localPosition = new Laya.Vector3(0, 1.35, 2.24), this.camera.transform.localRotationEuler = new Laya.Vector3(-3, 0, 0), this.playUiFadeIn()
		}
		playUiFadeIn() {
			this.boxLeft.x -= _G.canvasWidth, this.boxRight.x += _G.canvasWidth, this.scoreTextLeft.visible = !1, this.scoreTextRight.visible = !1, cc.tween(this.boxLeft).to(.3, {
				x: 0
			}, cc.OPTION.BACK_OUT).start(), cc.tween(this.boxRight).to(.3, {
				x: 0
			}, cc.OPTION.BACK_OUT).call(() => {
				this.scoreTextLeft.visible = !0, this.scoreTextRight.visible = !0, cc.tween(this.scoreTextLeft).then(cc.numberTo(1, 0, this.curScore)).start(), cc.tween(this.scoreTextRight).then(cc.numberTo(1, 0, this.myScore)).call(() => {
					this.onFlyFinish()
				}).start(), cc.tween(this.boxLeft).repeatForever(cc.tween().to(.3, {
					y: 5
				}).to(.6, {
					y: -5
				}).to(.3, {
					y: 0
				})).start(), cc.tween(this.boxRight).repeatForever(cc.tween().to(.3, {
					y: -5
				}).to(.6, {
					y: 5
				}).to(.3, {
					y: 0
				})).start()
			}).start()
		}
		updateProgress(t, e = !0) {
			if ("1006" == t) {
				BaseFacade.mItem.subItem("1006", 120, null);
				var a = 10
			} else if ("1004" == t) a = this.curScore;
			else {
				let e = db.get_item_db(t);
				a = mgrPart.partScoreResult.partsScore[e.gid]
			}
			e && cc.tween(this.scoreTextRight).then(cc.numberTo(.1, this.myScore, Math.max(this.myScore + a, 0))).start(), this.myScore = Mathf.clamp(this.myScore + a, 0, 1e4)
		}
		onFlyFinish() {
			if ((0 | this.curScore) > this.myScore) {
				BaseFacade.mItem.getItemCount("1006") >= 120 ? mgrAlert.alertDialog(mgrI18n.getText("panelPvpOver.2"), mgrI18n.getText("schoolYearbookItem.2"), this.playFlyShuiJing.bind(this), this.checkResult.bind(this)) : mgrAdv.checkActive("pvp_add_score") ? (mgrAdv.statisVideoShow("pvp_add_score"), mgrAlert.alertAdvDialog(mgrI18n.getText("panelPvpOver.3"), mgrI18n.getText("schoolYearbookItem.2"), () => {
					mgrAdv.statisVideoClick("pvp_add_score"), mgrAdv.dispatchAdv("pvp_add_score", null, !0)
				}, mgrI18n.getText("panelPvpOver.4"), this.checkResult.bind(this))) : this.checkResult()
			} else this.checkResult()
		}
		playFlyShuiJing() {}
		playFlyAdv() {
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2),
				e = UiHelper.getSelfGlobalPos(this.scoreTextRight, new Laya.Point);
			UiHelper.playBezierTo("res/icon/star.png", t, e, .8, .8, this.updateProgress.bind(this, "1004")), this.scheduleOnce(1, this.checkResult)
		}
		checkResult() {
			this.isChecked || (this.isChecked = !0, (0 | this.curScore) > this.myScore ? this.alertFail() : this.alertSuc())
		}
		alertSuc() {
			this._bAward = mgrPvp.finishPvp(!0), this.showCloseButton(), mgrSound.playSound("yllsd_22"), GameStatistics.statisCommonEvent(6007, 1);
			let t = FileRecord.getData("key_pvp_win_count") || 0;
			switch (t++, FileRecord.setData("key_pvp_win_count", t), t) {
				case 1:
					GameStatistics.statisCommonEvent(6011);
					break;
				case 2:
					GameStatistics.statisCommonEvent(6012);
					break;
				case 3:
					GameStatistics.statisCommonEvent(6013)
			}
		}
		alertFail() {
			mgrPvp.finishPvp(!1), this.showCloseButton(), mgrSound.playSound("yllsd_23"), GameStatistics.statisCommonEvent(6007, 2)
		}
		showCloseButton() {
			this.buttonClose.node.visible = !0, this.buttonOk.node.visible = !0, this.scheduleOnce(2.2, () => {
				let t = mgrPvp.allPvpPartAward,
					e = !1;
				for (let a = 0; a < t.length; a++) {
					let i = t[a],
						s = db.get_pvp_part_award_db(i);
					if (s && !BaseFacade.mItem.isOwned(i) && !mgrPvp.getPartFrom(s.partId)) {
						e = !0;
						break
					}
				}
				e && mgrPvp.openPanelPvpAward()
			})
		}
		showOkButton() {
			this.buttonFullScreenShare.node.visible = !1, this.buttonClose.node.visible = !1, this.buttonOk.node.scale(1, 1), this.buttonOk.node.visible = !0, this.shareFinger && this.shareFinger.hide()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonOk() {
			this.on_click_buttonClose()
		}
		on_click_buttonFullScreenShare() {}
	}
	class PvpRewardItem extends ViewBase {
		constructor(t = {}) {
			super(t), this.resourceName = "res/prefab/PvpRewardItem.json", this._exportNodeInfo = {
				cc_icon: "Laya.Sprite",
				cc_stars: "UIHVLayout",
				cc_owned: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this))
		}
		setData(t) {
			if (!this.callable) return void this.safeCall(this.setData, t);
			this.partId = t;
			let e = db.get_item_db(t);
			this.icon.loadImage(e.icon), UiHelper.setStars(this.stars, e.quality, 5);
			let a = BaseFacade.mItem.isOwned(t);
			this.owned.visible = a
		}
		onClick() {
			if (this.partId) {
				let t = mgrPvp.getPartFrom(this.partId);
				BaseFacade.mItem.isOwned(this.partId) ? mgrAlert.openPanelLoading(UI_NAME.PanelPartInfo, {
					partId: this.partId
				}) : null == t ? mgrAlert.alertDialog(mgrI18n.getText("huDongPartItem.3")) : mgrAlert.alertDialog(`${t}${mgrI18n.getText("huDongPartItem.3")} `)
			}
		}
	}
	class PanelPvpReward extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelPvpReward.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_spriteSuit: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_labelDesc: "Laya.Label",
				cc_barMaskReward: "UIBarMask",
				cc_spriteIconReward: "Laya.Sprite",
				cc_boxStars: "UIHVLayout",
				cc_labelState: "Laya.Label",
				cc_buttonReceive: "UIButton",
				cc_scrollPart: "ReuseScrollList"
			}, this._instOrBanner = new AdvInstOrBanner("enter_pvp_reward", "")
		}
		buildUi() {
			let t = new Laya.Sprite,
				e = new Laya.Point;
			UiHelper.local2local(this.spriteMaskBg, this.spriteSuit, e), t.graphics.drawImage(this.spriteMaskBg.texture, e.x, e.y), this.spriteSuit.mask = t, this.barMaskReward.style = UIBarMask.STYLE_HORIZON, this.awardTip = new UITip(this.buttonReceive.node, function() {
				return mgrPvp.isPvpAwardCanReceive() ? 0 : -1
			}), this.scrollPart.onItemCreate = function() {
				return new PvpRewardItem
			}, this.scrollPart.onItemChange = ((t, e) => {
				t.setData(mgrPvp.allPvpPartAward[e])
			}), this.fillData()
		}
		dispose() {
			this.scrollPart.clearAllItems(), this.awardTip && this.awardTip.dispose(), this._instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this._instOrBanner.onFocus(t)
		}
		fillData() {
			let t = mgrPvp.allPvpPartAward,
				e = null;
			for (let a = 0; a < t.length; a++) {
				let i = t[a],
					s = db.get_pvp_part_award_db(i);
				if (s && !BaseFacade.mItem.isOwned(i)) {
					e = s;
					break
				}
			}
			e || (e = db.get_pvp_part_award_db(t[t.length - 1])), this.curPartAwardData = e;
			let a = db.get_goal_db(e.goalId);
			this.labelDesc.text = mgrI18n.getText(a.tlite), this.barMaskReward.progress = BaseFacade.mGoal.getProgress(e.goalId);
			let i = db.get_item_db(e.partId);
			this.spriteIconReward.loadImage(i.icon), UiHelper.setStars(this.boxStars, i.quality, 5);
			let s = BaseFacade.mItem.isOwned(e.partId),
				n = !mgrPvp.getPartFrom(e.partId);
			this.buttonReceive.node.visible = !s && n, this.labelState.visible = s || !n, this.labelState.text = s ? mgrI18n.getText("panelPvpReward.1") : mgrI18n.getText("panelPvpReward.2"), this.scrollPart.updateList(mgrPvp.allPvpPartAward.length)
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonReceive() {
			if (this.curPartAwardData) {
				let t = mgrPvp.getPartFrom(this.curPartAwardData.partId);
				if (BaseFacade.mItem.isOwned(this.curPartAwardData.partId)) console.log("已领取");
				else if (t) console.log("未达成");
				else {
					mgrAlert.addAndAlert({
						itemId: this.curPartAwardData.partId,
						count: 1
					}, null), this.fillData();
					let t = db.get_pvp_part_award_db(this.curPartAwardData.partId);
					t.statistics && GameStatistics.statisCommonEvent(t.statistics), mgrPvp.isAllPartsGetted && GameStatistics.statisCommonEvent(6022)
				}
			}
		}
	}
	class PanelPvpRongYao extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelPvpRongYao.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bgNode: "Laya.Image",
				cc_template: "Laya.Sprite",
				cc_spriteUngetted: "Laya.Sprite",
				cc_scrollView: "ReuseScrollList",
				cc_topNode: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteUngetted, "pnl_pvp_07.png"), this.allQuest = BaseFacade.mQuest.getQuestByType(3), this.allQuest.sort(sort_quest_id_by_order), this.scrollView.onItemCreate = (() => {
				let t = new RongYaoItem;
				return t.createFromNode(UiHelper.cloneSprite(this.template)), t.setAlpha(0), t.runTween(cc.tween().to(.3, cc.PROP.ALPHA1)), t
			}), this.scrollView.onItemChange = ((t, e) => {
				t.setData(this.allQuest[e])
			}), this.scrollView.updateList(this.allQuest.length)
		}
		dispose() {
			this.scrollView && this.scrollView.clearAllItems(), super.dispose()
		}
		onDialogOpenAnim(t) {
			this.mask.alpha = 0, cc.tween(this.mask).to(.2, cc.PROP.ALPHA1).start(), this.bgNode.y = -1500, cc.tween(this.bgNode).to(.5, {
				y: -500
			}, cc.OPTION.BACK_OUT).call(t).start()
		}
		on_click_buttonClose() {
			this.buttonClose.interactable = !1, cc.tween(this.mask).to(.2, cc.PROP.ALPHA0).start(), cc.tween(this.bgNode).to(.5, {
				y: -1500
			}, cc.OPTION.BACK_IN).call(this.close.bind(this)).start()
		}
	}
	class RongYaoItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "RongYaoItem"
		}
		onCreateComplete() {
			this.icon = this.getChildImage("icon"), this.name = this.getChildLabel("name"), this.name.fontSize = 15, this.ungetted = this.getChildSprite("cc_spriteUngetted"), UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this))
		}
		setData(t) {
			this.questId = t;
			let e = db.get_quest_db(t);
			this.name.text = mgrI18n.getText(e.tlite), this.icon.skin = e.icon;
			let a = BaseFacade.mQuest.isCommitable(t);
			this.ungetted && (this.ungetted.visible = !a), this.icon.gray = !a
		}
		onClick() {
			let t = db.get_quest_db(this.questId),
				e = BaseFacade.mQuest.getDbValue(this.questId);
			switch (t.gid) {
				case 0:
					mgrAlert.alertDialog(String.format(mgrI18n.getText("panelPvpRongYao.3"), mgrI18n.getText(`game_cnf2.${e}`)));
					break;
				case 1:
					mgrAlert.alertDialog(String.format(mgrI18n.getText("panelPvpRongYao.4"), e.toString()));
					break;
				case 2:
					mgrAlert.alertDialog(String.format(mgrI18n.getText("panelPvpRongYao.5"), e.toString()))
			}
		}
	}
	class PanelPvpSelect extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelPvpSelect.json", this._exportNodeInfo = {
				cc_bg: "Laya.Box",
				cc_photoNode: "Laya.Sprite",
				cc_roleSprite: "Laya.Sprite",
				cc_buttonChange: "UIButton",
				cc_buttonStart: "UIButton",
				cc_leftTime: "Laya.Label",
				cc_nameNode: "Laya.Label",
				cc_roleName: "Laya.Label",
				cc_topNode: "Laya.Sprite",
				cc_tag1: "Laya.Sprite",
				cc_tag2: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_pvp_select", "")
		}
		buildUi() {
			if (this.init3D(), this.topNode.y = -150, this.topLeftNode.x = -150, UiHelper.loadTagIconWithData(mgrPvp.curLevelDb, this.tag1, this.tag2), mgrPvp.curFreeTicket > 0) {
				this.buttonStart.node.getChildAt(0).setVisible(!1);
				let t = this.buttonStart.node.getChildAt(1);
				t.x = 44, t.text = mgrI18n.getText("panelPvpSelect.4")
			} else mgrAdv.statisVideoShow("pvp_count"), 0 != db.cop.b_adv_full_screen && UiHelper.addClickEvent(this.resNode.getChildByName("ImageBg"), this.onClickMask.bind(this), null, .5, !1);
			this.update(), this.playUiAnim(), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.avatar && this.avatar.destroy(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		update() {
			let t = mgrPvp.nextChangeTime - Timer.time;
			t > 0 ? (this.leftTime.text = mgrI18n.getText("panelPvpSelect.3") + Tools.formatTime(t), this.buttonChange.node.visible = !1) : (this.leftTime.text = "", this.buttonChange.node.visible = !0)
		}
		onMsgAdvShowSuc(t) {
			"pvp_count" == t.advName && (BaseFacade.mItem.addItem("1011", 1, null), this.on_click_buttonStart())
		}
		onClickMask() {
			console.log("QT_ mask select"), this.on_click_buttonStart()
		}
		init3D() {
			this.createScene3DBack(1, 30), this.camera.transform.localPosition = new Laya.Vector3(.02, 1.57, 2.38), this.camera.transform.localRotationEuler = new Laya.Vector3(-7, 0, 0), mgrPvp.otherData || mgrPvp.randomPlayer(), this.avatar = new RoleAvatar(mgrPvp.otherData.parts), this.avatar.transform.localPosition = new Laya.Vector3(0, 0, 0), this.avatar.transform.localRotationEuler = new Laya.Vector3(0, 0, 0), this.scene3DBack.addChild(this.avatar), this.avatar.playAnimation("zbs-xuanze0" + Mathf.random(3), !0), this.roleSprite.loadImage(`res/ui/pnl_contract/role${mgrPvp.otherData.headIdx}.png`), this.roleName.text = mgrPvp.otherData.name
		}
		playUiAnim() {
			UiHelper.playScaleOnce(this.photoNode, 1), this.nameNode.x = 400, cc.tween(this.nameNode).delay(1.3).to(.4, {
				x: -53
			}, cc.OPTION.BACK_OUT).start(), this.buttonChange.node.alpha = 0, this.buttonStart.node.alpha = 0, this.leftTime.alpha = 0, cc.tween(this.buttonChange.node).delay(1.6).to(.2, cc.PROP.ALPHA1).start(), cc.tween(this.buttonStart.node).delay(1.6).to(.2, cc.PROP.ALPHA1).start(), cc.tween(this.leftTime).delay(1.6).to(.2, cc.PROP.ALPHA1).start(), cc.tween(this.topNode).to(.3, {
				y: 0
			}, cc.OPTION.BACK_OUT).start(), UiHelper.playMoveIn(this.topLeftNode)
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonChange() {
			0 == db.cop.b_adv_full_screen || 0 != mgrPvp.curFreeTicket ? mgrPvp.nextChangeTime <= Timer.time && (mgrPvp.nextChangeTime = Timer.time + 60, mgrPvp.randomPlayer(), this.avatar.setParts(mgrPvp.otherData.parts, !1, () => {
				this.destroyed || (this.avatar.playAnimation("zbs-xuanze0" + Mathf.random(3), !0), this.roleSprite.loadImage(`res/ui/pnl_contract/role${mgrPvp.otherData.headIdx}.png`), this.roleName.text = mgrPvp.otherData.name)
			})) : this.onClickMask()
		}
		on_click_buttonStart() {
			GameStatistics.statisCommonEventOnce(6004), mgrPvp.curFreeTicket > 0 ? mgrPart.openPanelRoom(ROOM_TYPE.PVP, null, this.close.bind(this)) : (mgrAdv.statisVideoClick("pvp_count"), mgrAdv.dispatchAdv("pvp_count", null, !0))
		}
	}
	class QuestItemDaily extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/QuestItemDaily.json", this._exportNodeInfo = {
				cc_bgOn: "Laya.Sprite",
				cc_icon: "Laya.Sprite",
				cc_desc: "Laya.Label",
				cc_value: "Laya.Label",
				cc_getted: "Laya.Sprite",
				cc_tip: "Laya.Sprite",
				cc_advNode: "Laya.Label",
				cc_spriteAdFlag: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			UiHelper.addClickEvent(this.resNode, this.onClick.bind(this), null, 1, !0), mgrI18n.trySetI18nText(this.advNode, "questItemDaily.1"), mgrI18n.trySetI18nImage(this.getted, "pnl_main_33.png"), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				MSG_I18N_REFRESH: this.refresh.bind(this)
			}), this.startProcMsg(), Mathf.randomEnable(db.cop.ad_flag_hide_ratios[3] || 0) ? (this.spriteAdFlag.visible = !1, this.advNode.x -= this.spriteAdFlag.width / 2) : this.spriteAdFlag.visible = !0
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"quest_finish" == t.advName && t.params == this.questId && (this.advNode.visible = !1, this.commitQuest(!0))
		}
		setData(t, e) {
			if (this.questId = t, !this.callable) return this.safeCall(this.setData, t, e);
			this.questId = t;
			let a = db.get_quest_db(t),
				i = BaseFacade.mQuest.query(t).state,
				s = BaseFacade.mQuest.getCurValue(t),
				n = BaseFacade.mQuest.getDbValue(t);
			this.bgOn.visible = !1, this.advNode.visible = e;
			let o = BaseFacade.mQuest.getAwardItems(t)[0],
				r = db.get_item_db(o.itemId);
			this.icon.loadImage(r.icon);
			let l = mgrI18n.getText(a.tlite1);
			switch (i) {
				case QUEST_STATE.UPDATABLE:
					this.desc.text = String.format(l, n), this.value.text = `${s}/${n}`, this.getted.visible = !1, this.tip.visible = !1;
					break;
				case QUEST_STATE.COMMITABLE:
					this.resNode.texture = this.bgOn.texture, this.desc.text = String.format(l, n), this.value.text = `${n}/${n}`, this.getted.visible = !1, this.tip.visible = !0, UiHelper.playTipRot(this.tip);
					break;
				case QUEST_STATE.FINISHED:
					this.resNode.texture = this.bgOn.texture, this.desc.text = String.format(l, n), this.value.text = `${n}/${n}`, this.getted.visible = !0, this.tip.visible = !1
			}
			console.log("文本====0", l, this.desc.text, a.desc)
		}
		refresh() {
			this.questId && this.setData(this.questId, this.advNode.visible)
		}
		commitQuest(t = !1) {
			let e = BaseFacade.mQuest.commit(this.questId, t);
			e && mgrAlert.alertItems(e)
		}
		onClick() {
			if (this.questId) {
				var t = db.get_quest_db(this.questId);
				switch (BaseFacade.mQuest.query(this.questId).state) {
					case QUEST_STATE.COMMITABLE:
						this.commitQuest();
						break;
					case QUEST_STATE.UPDATABLE:
						if (this.advNode.visible) mgrAdv.statisVideoClick("quest_finish"), mgrAdv.dispatchAdv("quest_finish", this.questId, !0);
						else {
							let e = BaseFacade.mQuest.getDbValue(this.questId),
								a = mgrI18n.getText(t.tlite1),
								i = mgrI18n.getText("questItemDaily.2");
							t.jump > 0 ? mgrAlert.alertDialog({
								desc: `${String.format(a,e)}，${i}`,
								confirmText: mgrI18n.getText("questItemDaily.3"),
								confirm: () => {
									_G.sendMsg("JUMP_PANEL", t.jump)
								},
								close: () => {}
							}) : mgrAlert.alertDialog(`${String.format(a,e)}，${i}`)
						}
						break;
					case QUEST_STATE.FINISHED:
						mgrAlert.alertDialog(mgrI18n.getText("questItemDaily.4"))
				}
			}
		}
	}
	const DAILY_POS = [
		[-120, -115],
		[120, -115],
		[-120, 115],
		[120, 115],
		[620, 115]
	];
	class PanelQuest extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelQuest.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_barMask: "UIBarMask",
				cc_itemNode: "Laya.Sprite",
				cc_giftLight: "Laya.Sprite",
				cc_buttonGift: "UIButton",
				cc_giftTip: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_quest", "banner_quest")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteBg, "pnl_quest_02.png"), this.initDailyList(), this.initTip(), this.refreshAward(), this.registerMsg({
				[BASE_MSG.QUEST_STATE_CHANGE]: this.onMsgQuestStateChange.bind(this),
				JUMP_PANEL: this.onMsgJumpPanel.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEvent(7001)
		}
		dispose() {
			if (this.stopProcMsg(), this.instOrBanner.dispose(), this.dailyItems) {
				for (let t = 0; t < this.dailyItems.length; t++) this.dailyItems[t].dispose();
				this.dailyItems = null
			}
			super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onOpenComplete() {
			super.onOpenComplete();
			let t = this.addEffect("117");
			t.setParent(this.scene3DEffect), t.align(this.itemNode, this.cameraEffect), t.play()
		}
		onMsgQuestStateChange(t) {
			switch (t.questDb.type) {
				case 8:
					this.refreshList()
			}
		}
		onMsgJumpPanel(t) {
			this.close()
		}
		initEffect() {}
		initTip() {
			this.giftTip.visible = !1, UiHelper.playTipRot(this.giftTip)
		}
		initDailyList() {
			let t, e = mgrDailyQuest.getCurQuests();
			if (mgrAdv.getActive("quest_finish")) {
				let a = [];
				for (let t = 0; t < e.length; t++) BaseFacade.mQuest.isUpdatable(e[t]) && a.push(e[t]);
				(t = Mathf.randomFromArray(a)) && mgrAdv.statisVideoShow("quest_finish")
			}
			if (!this.dailyItems) {
				this.dailyItems = [];
				for (var a = 0; a < e.length; a++) {
					let i = this.createDailyItem(a);
					i.setData(e[a], e[a] == t), this.dailyItems.push(i)
				}
			}
		}
		createDailyItem(t) {
			let e = new QuestItemDaily;
			e.setParent(this.itemNode);
			let a = Math.PI / 3 * t + Math.PI / 6;
			return e.setPosition(200 * Math.cos(a), 200 * Math.sin(a)), e
		}
		refreshList() {
			for (var t = 0; t < this.dailyItems.length; t++) this.dailyItems[t].refresh();
			this.refreshAward()
		}
		refreshAward() {
			mgrDailyQuest.getCompleteCount() >= db.game_cnf.daily_quest_count && (console.log("QT_QpanelQuest", "" + mgrDailyQuest.isDailyAward), mgrDailyQuest.isDailyAward ? (this.giftTip.visible = !1, cc.clearTween(this.giftLight)) : (this.giftTip.visible = !0, UiHelper.playRotCycle(this.buttonGift.node)))
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonGift() {
			mgrDailyQuest.getCompleteCount() >= db.game_cnf.daily_quest_count ? mgrDailyQuest.isDailyAward ? mgrAlert.alertDialog(mgrI18n.getText("panelQuest.1")) : (mgrAlert.openPanelLoading(UI_NAME.PanelQuestGift, () => {
				this.refreshAward()
			}), this.giftTip.visible = !1) : mgrAlert.alertDialog(String.format(mgrI18n.getText("panelQuest.2"), db.game_cnf.daily_quest_count.toString()))
		}
	}
	class PanelQuestGift extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelQuestGift.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_spriteBg: "Laya.Sprite",
				cc_awardCount: "Laya.Label",
				cc_buttonGet: "UIButton",
				cc_buttonAdvGet: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			mgrAdv.getActive("quest_db") ? (mgrAdv.statisVideoShow("quest_db"), this.buttonGet.node.visible = !1, UiHelper.playBreathe(this.buttonAdvGet.node)) : (this.buttonClose.node.visible = !1, this.buttonAdvGet.node.visible = !1, UiHelper.playBreathe(this.buttonGet.node)), mgrI18n.trySetI18nImage(this.spriteBg, "pnl_quest_01.png"), this.awardCount.text = `${db.game_cnf.daily_quest_dianmond_count}${mgrI18n.getText("panelQuestGift.1")}`, this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"quest_db" == t.advName && (this.close(), mgrDailyQuest.getDailyAward(!0))
		}
		on_click_buttonGet() {
			this.close(), mgrDailyQuest.getDailyAward(!1)
		}
		on_click_buttonAdvGet() {
			mgrAdv.statisVideoClick("quest_db"), mgrAdv.dispatchAdv("quest_db", null, !0)
		}
		on_click_buttonClose() {
			this.close(), mgrDailyQuest.getDailyAward(!1)
		}
	}
	class RankItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "res/prefab/RankItem.json", this._exportNodeInfo = {}
		}
		onCreateComplete() {
			this.name = this.resNode.getChildByName("name"), this.rank = this.resNode.getChildByName("rank"), this.desc = this.resNode.getChildByName("desc"), this.head = this.resNode.getChildByName("head"), UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this))
		}
		playAnim() {
			this.callable ? (this.resNode.alpha = 0, cc.tween(this.resNode).to(.2, cc.PROP.ALPHA1).start()) : this.safeCall(this.playAnim)
		}
		useBmf() {
			this.callable ? (this.rank.font = GConfig.bmf_rank, this.rank.scale(.9, .9, !0)) : this.safeCall(this.useBmf)
		}
		setData(t, e) {
			if (this.callable) {
				switch (this.rankData = t, this.rankType = e, this.rank && (this.rank.text = t.rank + ""), this.name.text = t.name, e) {
					case 0:
						this.desc.text = t.score + "";
						break;
					case 1:
					case 2:
						this.desc.text = "" + t.score
				}
				this.head && t.headUrl && this.head.loadImage(`res/icon_head/${t.headUrl}.png`)
			} else this.safeCall(this.setData, t, e)
		}
		setMyRank(t) {
			let e = mgrI18n.getText("rankItem.1");
			this.name.text = String.format(e, t)
		}
		randomParts() {
			let t = mgrRank.getRankPercent(this.rankType, this.rankData.rank);
			console.log("rank p:", t);
			let e = 0 | Mathf.lerp(0, 4, t),
				a = 0 | Mathf.lerp(0, 8, t);
			return mgrPvp.randomParts(e, a)
		}
		onClick() {
			if (this.rankData)
				if (this.rankData.selfFlag) {
					let t = mgrSzz.getMyParts() || mgrPart.partsWear,
						e = [];
					for (const a in t) {
						2 == db.get_item_db(t[a]).type && e.push(t[a])
					}
					mgrPart.openPanelSuitDetal(e)
				} else this.rankData.data1 || (this.rankData.data1 = this.randomParts()), mgrPart.openPanelSuitDetal(this.rankData.data1)
		}
	}
	class PanelRank extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelRank.json", this._exportNodeInfo = {
				cc_topLeftNode: "Laya.Sprite",
				cc_btnClose: "UIButton",
				cc_toggle2: "UIToggle",
				cc_text2: "Laya.Text",
				cc_text1: "Laya.Text",
				cc_toggle0: "UIToggle",
				cc_text3: "Laya.Text",
				cc_text4: "Laya.Text",
				cc_toggle1: "UIToggle",
				cc_text5: "Laya.Text",
				cc_text6: "Laya.Text",
				cc_rank1: "Laya.Sprite",
				cc_rank2: "Laya.Sprite",
				cc_rank3: "Laya.Sprite",
				cc_scroll: "ReuseScrollList",
				cc_myRankItem: "Laya.Image",
				cc_buttonHuDong: "UIButton",
				cc_text7: "Laya.Text"
			}, this.instOrBanner = new AdvInstOrBanner("enter_rank", "banner_rank")
		}
		buildUi() {
			this.text1.text = this.text2.text = mgrI18n.getText("panelRank.1"), this.text3.text = this.text4.text = mgrI18n.getText("panelRank.2"), this.text5.text = this.text6.text = mgrI18n.getText("panelRank.3"), this.text7.text = mgrI18n.getText("panelRank.4"), mgrI18n.trySetI18nImage(this.buttonHuDong.node, "pnl_rank_01.png"), GameStatistics.statisCommonEvent(7311), this._rank1 = new RankItem, this._rank2 = new RankItem, this._rank3 = new RankItem, this._rankMy = new RankItem, this._rank1.createFromNode(this.rank1), this._rank2.createFromNode(this.rank2), this._rank3.createFromNode(this.rank3), this._rankMy.createFromNode(this.myRankItem), this.playUiAnim(), this.scroll.onItemCreate = function() {
				let t = new RankItem;
				return t.useBmf(), t.create(), t.playAnim(), t
			}, this.scroll.onItemChange = ((t, e) => {
				let a = mgrRank.rankDatas[this._rankIdx][e];
				t.setData(a, this._rankIdx)
			}), this.registerMsg({
				RECEIVE_RANK_DATA: this.onMsgReceiveRankData.bind(this),
				RECEIVE_SELF_RANK_DATA: this.onMsgReceiveSelfRankData.bind(this),
				PART_JUMP_FINISH: this.onMsgPartJumpFinish.bind(this)
			}), this.startProcMsg();
			let t = this.context || 2;
			2 != t && this["toggle" + t].check(!0), this.scheduleOnce(.3, this.switchRank.bind(this, t))
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.scroll && this.scroll.clearAllItems(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgReceiveRankData() {
			this.fillRank(), this.fillHead()
		}
		onMsgReceiveSelfRankData() {
			this.fillSelfRank()
		}
		onMsgPartJumpFinish() {
			this.close(!0)
		}
		playUiAnim() {
			cc.tween(this._rank1.node).delay(.7).to(.5, {
				y: this._rank1.y,
				alpha: 1
			}, {
				easing: cc.Ease.backOut
			}).start(), cc.tween(this._rank2.node).delay(.4).to(.3, {
				x: this._rank2.x,
				alpha: 1
			}, {
				easing: cc.Ease.sineIn
			}).start(), cc.tween(this._rank3.node).delay(.2).to(.3, {
				x: this._rank3.x,
				alpha: 1
			}, {
				easing: cc.Ease.sineIn
			}).start(), this._rank1.y = -900, this._rank1.setAlpha(0), this._rank2.x = -564, this._rank2.setAlpha(0), this._rank3.x = 386, this._rank3.setAlpha(0)
		}
		switchRank(t) {
			this._rankIdx = t, 0 == mgrRank.rankDatas[this._rankIdx].length ? mgrRank.requestRankData(this._rankIdx) : (this.fillRank(), this.fillHead(), this.fillSelfRank())
		}
		fillRank() {
			if (0 == mgrRank.rankDatas[this._rankIdx].length) return void Logger.error("没有排行榜数据.");
			this.scroll.isAutoScrolling && this.scroll.stopAutoScroll();
			let t = mgrRank.rankDatas[this._rankIdx];
			this.scroll.updateList(t.length)
		}
		fillSelfRank() {
			let t = mgrRank.playerRankData[this._rankIdx];
			if (!t) return;
			this._rankMy.setMyRank(t.rank);
			let e = mgrRank.rankDatas[this._rankIdx];
			for (let a = 0; a < e.length; a++)
				if (e[a].uid == t.uid) {
					this.scheduleOnce(.6, () => {
						this.scroll.isAutoScrolling || this.scroll.centerTo(a, .5)
					});
					break
				}
		}
		fillHead() {
			let t = mgrRank.headRankData[this._rankIdx];
			t && (this._rank1.setData(t[0], this._rankIdx), this._rank2.setData(t[1], this._rankIdx), this._rank3.setData(t[2], this._rankIdx))
		}
		on_click_btnClose() {
			this.close()
		}
		on_click_toggle0() {
			this.switchRank(2)
		}
		on_click_toggle1() {
			this.switchRank(0)
		}
		on_click_toggle2() {
			this.switchRank(1)
		}
		on_click_buttonHuDong() {
			GameStatistics.statisCommonEvent(7312), mgrAlert.openPanelLoading(UI_NAME.PanelRankHuDong, this._rankIdx)
		}
	}
	class PanelRankHuDong extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelRankHuDong.json", this._exportNodeInfo = {
				cc_topLeftNode: "Laya.Sprite",
				cc_btnClose: "UIButton",
				cc_giftTip2: "Laya.Sprite",
				cc_text1: "Laya.Text",
				cc_topNode: "Laya.Sprite",
				cc_text2: "Laya.Text",
				cc_scoreLabel: "Laya.Text",
				cc_leftNode: "Laya.Sprite",
				cc_buttonScale: "UIButton",
				cc_scaleIcon: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_inputOption: "Laya.Image",
				cc_reuseScrollInput: "ReuseScrollList",
				cc_buttonSee: "UIButton",
				cc_buttonGift: "UIButton",
				cc_awardTip: "Laya.Sprite",
				cc_giftTip: "Laya.Sprite",
				cc_text4: "Laya.Text",
				cc_partList: "Laya.Image",
				cc_reuseScrollParts: "ReuseScrollList"
			}, this.bTween = !1
		}
		buildUi() {
			this.text1.text = mgrI18n.getText("panelRankHuDong.1"), this.text2.text = mgrI18n.getText("panelRankHuDong.2"), this.text4.text = mgrI18n.getText("panelRankHuDong.5"), this.initUi(), this.create3d(), this.initTouch(), this.registerMsg({
				UI_CLICK_BULLET_CHAT: this.onMsgClickBulletChat.bind(this),
				EGG_FINISH: this.onMsgEggFinish.bind(this),
				PART_JUMP_FINISH: this.onMsgPartJumpFinish.bind(this)
			}), this.startProcMsg(), this.showBulletChat()
		}
		dispose() {
			this.stopProcMsg(), this.bulletChatMaker && (this.bulletChatMaker.dispose(), this.bulletChatMaker = null), super.dispose()
		}
		update() {
			this.updateGiftState()
		}
		onMsgClickBulletChat(t) {
			this.closeOption(), this.bulletChatMaker && this.bulletChatMaker.setNext(t)
		}
		onMsgEggFinish() {}
		onMsgPartJumpFinish() {
			this.close(!0)
		}
		create3d() {
			this.createScene3DBack(1, 60), this.camera.transform.localPosition = new Laya.Vector3(.02, 1.35, 1.05), this.camera.transform.localRotationEuler = new Laya.Vector3(-8, 0, 0), this.avatar = new RoleAvatar(mgrPvp.rankParts), this.scene3DBack.addChild(this.avatar), this.avatar.playIdle()
		}
		initUi() {
			this.reuseScrollInput.itemHeight = 45, this.reuseScrollInput.itemWidth = 280, this.reuseScrollInput.setVerticle(!0), this.reuseScrollInput.onItemCreate = function() {
				return new HuDongTextItem
			}, this.reuseScrollInput.onItemChange = ((t, e) => {
				t.setData(db.game_cnf.bullet_chat_texts[e])
			}), this.reuseScrollInput.updateList(db.game_cnf.bullet_chat_texts.length), this.reuseScrollParts.itemHeight = 160, this.reuseScrollParts.itemWidth = 127, this.reuseScrollParts.setVerticle(!1), this.reuseScrollParts.onItemCreate = function() {
				return new HuDongPartItem
			}, this.reuseScrollParts.onItemChange = ((t, e) => {
				t.setHuDongPart(mgrPvp.rankParts[e])
			}), this.reuseScrollParts.updateList(mgrPvp.rankParts.length), this.inputOption.visible = !1, this.inputOption.scale(1, .3, !0), this.inputOption.y = 40, this.reuseScrollInput.node.alpha = 0, this.partList.alpha = 0, this.partList.scale(0, 0), this.partList.visible = !1, this.giftTip.scale(0, 0, !0).alpha = 0, this.giftTip.visible = !1, this.giftTip2.scale(0, 0, !0).alpha = 0, this.giftTip2.visible = !1, this.state = 0, this.scoreLabel.text = mgrRank._getMaxScore(this.context) + ""
		}
		initTouch() {
			let t = new Laya.Vector3(1, 1, 1),
				e = 0,
				a = function(t) {
					if (t && t.length > 1) {
						var e = t[0],
							a = t[1];
						return Mathf.distance2(e.stageX - a.stageX, e.stageY - a.stageY)
					}
					return 0
				};
			UiHelper.registerTouchEvent(this.resNode, t => {
				e = a(t.touches)
			}, i => {
				var s = a(i.touches);
				if (e && s) {
					let a = Mathf.clamp((s - e) / 600, -1, 1);
					a = Mathf.clamp(a + t.x, .5, 2), t.setValue(a, a, a), this.avatar.transform.localScale = t
				}
				e = s
			}, t => {
				e = 0
			})
		}
		openOption() {
			cc.tween(this.inputOption, !0).show().to(.3, {
				scaleY: 1,
				y: -184
			}, cc.OPTION.SINE_IN).start(), cc.tween(this.reuseScrollInput.node, !0).delay(.1).to(.2, cc.PROP.ALPHA1).start(), this.state = 1
		}
		closeOption() {
			cc.tween(this.reuseScrollInput.node, !0).to(.2, cc.PROP.ALPHA0).start(), cc.tween(this.inputOption, !0).delay(.1).to(.3, {
				scaleY: .3,
				y: 40
			}, cc.OPTION.SINE_OUT).hide().start(), this.state = 0
		}
		showBulletChat() {
			this.bulletChatMaker || (this.bulletChatMaker = new BulletChatMaker(1e3), this.topNode.addChild(this.bulletChatMaker.root)), this.bulletChatMaker.start()
		}
		updateGiftState() {
			let t = this.giftTip,
				e = t.visible;
			mgrRankHuDong.giftCount > 0 && mgrRankHuDong.nextGiftTime <= Timer.time ? (t.visible = !0, this.awardTip.visible = !0, this.bTween || (this.bTween = !0, UiHelper.playRotCycle(this.buttonGift.node))) : (t.visible = !1, this.awardTip.visible = !1, this.bTween = !1, cc.clearTween(this.buttonGift.node), this.buttonGift.node.rotation = 0, this.awardTip.visible = !1), e != t.visible && (t.visible ? cc.tween(this.giftTip2, !0).show().to(.3, cc.PROP.SCALE_ALPHA1, cc.OPTION.BACK_OUT).start() : cc.tween(this.giftTip2, !0).to(.3, cc.PROP.SCALE_ALPHA0).hide().start())
		}
		openPartList() {
			cc.tween(this.partList, !0).show().to(.3, cc.PROP.SCALE_ALPHA1, cc.OPTION.BACK_OUT).start(), this.state = 2
		}
		closePartList() {
			cc.tween(this.partList, !0).to(.3, cc.PROP.SCALE_ALPHA0, cc.OPTION.BACK_IN).hide().start(), this.state = 0
		}
		on_click_btnClose() {
			this.close()
		}
		on_click_buttonScale() {
			this.cameraEffect
		}
		on_click_buttonSee() {
			switch (this.state) {
				case 1:
					this.closeOption(), this.openPartList();
					break;
				case 2:
					this.closePartList();
					break;
				case 0:
					this.openPartList()
			}
		}
		on_click_buttonGift() {
			switch (this.state) {
				case 1:
					this.closeOption();
					break;
				case 2:
					this.closePartList()
			}
			mgrRankHuDong.giftCount > 0 && mgrRankHuDong.nextGiftTime <= Timer.time ? (mgrAlert.openPanelLoading(UI_NAME.PanelEgg), this.giftTip2.visible = !1) : mgrAlert.alertText(mgrI18n.getText("panelRankHuDong.6"))
		}
	}
	class HuDongTextItem extends ViewBase {
		constructor() {
			super(), this.create()
		}
		create() {
			let t = new Laya.Image;
			t.skin = "res/ui/pnl_rank/text_item_bg.png", t.size(280, 42), t.sizeGrid = "0,32,0,32", this.label = t.addChild(new Laya.Label), this.label.fontSize = 20, this.label.color = "#5697f0", this.label.anchorX = .5, this.label.pos(140, 11, !0), this.createFromNode(t)
		}
		onCreateComplete() {
			UiHelper.addClickEvent(this.resNode, this.onClick.bind(this), void 0, 1)
		}
		setData(t) {
			this.label.text = t
		}
		onClick() {
			_G.sendMsg("UI_CLICK_BULLET_CHAT", this.label.text)
		}
	}
	class BulletChatItem extends Laya.Sprite {
		constructor() {
			super(), this.bg = this.addChild(new Laya.Image("res/ui/pnl_rank/bullet_chat.png")), this.bg.sizeGrid = "0,26,0,26", this.bg.width = 240, this.label = this.addChild(new Laya.Label), this.label.fontSize = 20, this.label.color = "#ffffff", this.label.anchorX = .5, this.label.pos(120, 9, !0)
		}
		setText(t) {
			this.label.text = t
		}
	}
	class BulletChatMaker {
		constructor(t) {
			this.count = t, this.chatItems = [], this.root = new Laya.Sprite
		}
		dispose() {
			Laya.timer.clearAll(this), this.root.destroy()
		}
		start() {
			this.curCount = 0
		}
		setNext(t) {
			this.myText = t
		}
		createItem() {
			this.curCount++;
			let t = this.chatItems.pop();
			t ? t.visible = !0 : t = new BulletChatItem, this.myText ? (t.label.color = "#ffff00", t.bg.visible = !0, t.setText(this.myText), this.myText = null) : (t.label.color = BulletChatMaker.COLORS[Mathf.random(BulletChatMaker.COLORS.length) - 1], t.bg.visible = !1, t.setText(db.game_cnf.bullet_chat_texts[Mathf.random(db.game_cnf.bullet_chat_texts.length) - 1])), this.root.addChild(t);
			this.lastY ? this.lastY = (Mathf.random(50, 95) + this.lastY) % 240 : this.lastY = Mathf.random(240), t.pos(_G.canvasFitWidth / 2 + 50, 140 + this.lastY, !0);
			let e = Mathf.random(50, 90) / 10;
			cc.tween(t, !0).to(e, {
				x: -_G.canvasFitWidth / 2 - 290
			}).call(() => {
				this.chatItems.push(t), t.visible = !1
			}).start(), this.curCount >= this.count && Laya.timer.clearAll(this)
		}
	}
	BulletChatMaker.COLORS = ["#12ff00", "#ff33e5", "#3343c1", "#ffff00"];
	class RankVideoItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "res/prefab/RankVideoItem.json", this._exportNodeInfo = {
				cc_head: "Laya.Sprite",
				cc_rank: "Laya.Label",
				cc_name: "Laya.Label",
				cc_desc: "Laya.Label",
				cc_rank1: "Laya.Sprite",
				cc_rank2: "Laya.Sprite",
				cc_rank3: "Laya.Sprite"
			}
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this))
		}
		setData(t) {
			if (this.callable) {
				this.rankData = t, this.rank && (this.rank.text = String.format(mgrI18n.getText("rankItem.1"), t.rank));
				for (let e = 1; e <= 3; e++) {
					let a = this["rank" + e.toString()];
					a && (a.visible = t.rank == e)
				}
				if (this.name.text = t.nickName, t.score < 1e4 ? this.desc.text = t.score.toString() : this.desc.text = `${(t.score/1e4).toFixed(1)}w`, this.head && t.headUrl) {
					let e = window.tt;
					if (console.log("是否是头条渠道", !!e), e && e.createImage) {
						let a = e.createImage();
						a.src = t.headUrl, a.width = 300, a.height = 400, a.addEventListener("load", t => {
							if (console.log("录屏排行榜头像加载成功", t), t && t.target && t.target.data) {
								let e = t.target.data,
									a = new Laya.Texture2D(300, 400, 1);
								a.setPixels(e);
								let i = new Laya.Texture(a);
								this.head.texture = i
							}
						}), a.addEventListener("error", t => {
							console.log("录屏排行榜头像加载成功", t)
						})
					} else this.head.loadImage(t.headUrl, Laya.Handler.create(this, () => {
						this.head.pivot(this.head.width / 2, this.head.height / 2), this.head.pos(90, 114)
					}))
				}
			} else this.safeCall(this.setData, t)
		}
		onClick() {
			let t = this.rankData && this.rankData.videoId;
			t && (console.log("点击了录屏", this.rankData), mgrSdk.jumpToVideoView(t))
		}
	}
	const VIDEO_RANK_TAG_INDEX = {
		TAG_INDEX1: 4,
		TAG_INDEX2: 5
	};
	class PanelRankVideo extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelRankVideo.json", this.panelStyle = 0, this._exportNodeInfo = {
				cc_topNode: "Laya.Sprite",
				cc_toggle4: "UIToggle",
				cc_toggle5: "UIToggle",
				cc_btnTips: "UIButton",
				cc_inner: "Laya.Image",
				cc_scroll: "ReuseScrollList",
				cc_labelTips: "Laya.Label",
				cc_topLeftNode: "Laya.Sprite",
				cc_btnClose: "UIButton",
				cc_buttonFree: "UIButton",
				cc_labelMyRank: "Laya.Label"
			}, this.rankDatas = {}, this.selectedTagIndex = 0, this.myRank = {}, this.VIDEO_RANK_TAG_INDEX_TO_TAG = {}
		}
		buildUi() {
			this.inner.height = 750 + _G.canvasFitHeight - 1024, this.scroll.height = this.inner.height - 30, this.labelTips.y = this.inner.height / 2, this.VIDEO_RANK_TAG_INDEX_TO_TAG[VIDEO_RANK_TAG_INDEX.TAG_INDEX1] = db.cop.get_video_share_rank_tag || "", this.VIDEO_RANK_TAG_INDEX_TO_TAG[VIDEO_RANK_TAG_INDEX.TAG_INDEX2] = db.cop.get_video_share_rank_tag_active || "", this.scroll.onItemCreate = function() {
				let t = new RankVideoItem;
				return t.create(), t
			}, this.scroll.onItemChange = ((t, e) => {
				if (this.rankDatas && this.rankDatas[this.selectedTagIndex]) {
					let a = this.rankDatas[this.selectedTagIndex][e];
					t.setData(a)
				}
			}), this["toggle" + VIDEO_RANK_TAG_INDEX.TAG_INDEX1].check(!0), this.switchRank(VIDEO_RANK_TAG_INDEX.TAG_INDEX1), this.registerMsg({
				[BASE_MSG.SDK_GET_RANK_DATA_RESULT]: this.onMsgGetRankDataResult.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEvent(9306, 0), GameStatistics.statisOnStageStart(13003)
		}
		dispose() {
			this.stopProcMsg(), this.scroll && this.scroll.clearAllItems(), GameStatistics.statisOnStageEnd(13003), super.dispose()
		}
		onOpenComplete() {
			super.onOpenComplete(), mgrGame.tryOpenPanelRankVideoTips(6, this.close.bind(this))
		}
		onMsgGetRankDataResult(t) {
			let e = t;
			if (4 == e.rankType) {
				let t = e.list,
					a = [];
				if (Tools.forEachMap(t, (t, e) => {
						let i = JSON.parse(e);
						i && (i.rank = parseInt(t), a.push(i), i.selfFlag && (this.myRank[this.selectedTagIndex] = i.rank, this.refreshMyRank()))
					}), a.length <= 0) return this.labelTips.text = "暂时没有数据哦，快去发布视频吧！", void(this.labelTips.visible = !0);
				a.sort(sort_rank_by_rank), this.rankDatas[this.selectedTagIndex] = a, e.videoTag == this.VIDEO_RANK_TAG_INDEX_TO_TAG[this.selectedTagIndex] && this.fillRank()
			}
		}
		switchRank(t) {
			if (this.selectedTagIndex == t) return;
			this.selectedTagIndex = t;
			let e = this.rankDatas[t];
			this.refreshMyRank(), !e || e.length <= 0 ? (this.scroll && this.scroll.updateList(0), this.labelTips.text = "排行榜数据获取中...", this.labelTips.visible = !0, mgrSdk.getRankData(100, "", 1, 4, this.VIDEO_RANK_TAG_INDEX_TO_TAG[t])) : this.fillRank()
		}
		fillRank() {
			this.labelTips.visible = !1;
			let t = this.rankDatas[this.selectedTagIndex];
			this.scroll.isAutoScrolling && this.scroll.stopAutoScroll(), this.scroll.updateList(t.length)
		}
		refreshMyRank() {
			let t = this.myRank[this.selectedTagIndex];
			this.labelMyRank.text = t && t < 100 ? `我的排名：${t}` : "我的排名：100+"
		}
		on_click_btnClose() {
			this.close()
		}
		on_click_toggle4() {
			this.switchRank(VIDEO_RANK_TAG_INDEX.TAG_INDEX1)
		}
		on_click_toggle5() {
			this.switchRank(VIDEO_RANK_TAG_INDEX.TAG_INDEX2)
		}
		on_click_btnTips() {
			db.cop.get_rank_tip_url ? mgrAlert.openPanelLoading(UI_NAME.PanelVideoRankTipsRemote) : mgrAlert.openPanelLoading(UI_NAME.PanelVideoRankTips, {
				fOnClick: () => {
					this.close()
				}
			})
		}
		on_click_buttonFree() {
			GameStatistics.statisCommonEvent(9306, 1), mgrAlert.openPanelLoading(UI_NAME.PanelClassRoom, {}, this.close.bind(this))
		}
	}
	class PanelReconnectDialog extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelReconnectDialog.json", this.panelLayer = PANEL_LAYER.TOP, this.panelStyle = 0, this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_titleLabel: "Laya.Label",
				cc_descLabel: "Laya.Label",
				cc_buttonYes: "UIButton"
			}
		}
		buildUi() {}
		on_click_buttonYes() {
			this.close(), this.context && this.context.clickCallback && this.context.clickCallback()
		}
	}
	class PanelRoleLvup extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelRoleLvup.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_text1: "Laya.Text",
				cc_itemCount: "Laya.Text",
				cc_itemIcon: "Laya.Sprite",
				cc_text2: "Laya.Text",
				cc_text3: "Laya.Text",
				cc_perSecValue: "Laya.Label",
				cc_buttonOk: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_lvup", "banner_lvup")
		}
		buildUi() {
			this.text1.text = mgrI18n.getText("panelRoleLvup.2"), this.text2.text = mgrI18n.getText("panelRoleLvup.3"), this.text3.text = mgrI18n.getText("panelRoleLvup.4");
			let t = this.context;
			if (t) {
				this.itemCount.text = "*" + t.count;
				let e = db.get_item_db(t.itemId);
				this.itemIcon.loadImage(e.icon)
			}
			this.perSecValue.text = (60 * mgrOffline.offlinePerSecond | 0) + ""
		}
		dispose() {
			this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		on_click_buttonOk() {
			this.close(), this.context && mgrAlert.alertItems(this.context)
		}
	}
	class preDestinationItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "res/prefab/preDestinationItem.json", this._exportNodeInfo = {
				cc_imageBg: "Laya.Image",
				cc_textName: "Laya.Label",
				cc_spriteNeverTest: "Laya.Sprite"
			}
		}
		onCreateComplete() {
			mgrI18n.trySetI18nImage(this.spriteNeverTest, "pnl_contract_01.png")
		}
		refreshItem(t) {
			if (!this.callable) return this.safeCall(this.refreshItem, t);
			if (console.log("查看roleId", t), !t) return;
			let e = db.get_role_db(t),
				a = e.cardUrl;
			console.log("查看cardUrl", e), this.textName.text = mgrI18n.getText(e.tlite), this.imageBg.skin = a;
			let i = mgrRoleTest.checkIsTested(t);
			this.spriteNeverTest.visible = !i, this.imageBg.gray = !i
		}
	}
	class PanelRolePreDestination extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 2, this.resourceName = "res/ui/PanelRolePreDestination.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_scrollView: "ReuseScrollList",
				cc_buttonClose: "UIButton",
				cc_text1: "Laya.Text",
				cc_topLeftNode: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_role_pre", "banner_role_pre")
		}
		buildUi() {
			this.initUi()
		}
		dispose() {
			this.scrollView && this.scrollView.clearAllItems(), this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		initUi() {
			this.text1.text = mgrI18n.getText("panelRolePreDestination.1");
			let t = db.get_role_test_map(),
				e = {};
			for (let a in t) e[t[a].contractIdx] = !0;
			this.roleIds = [];
			let a = db.get_role_contract_db_map();
			for (let t in a) e[a[t].contractIdx] && this.roleIds.push(a[t].roleId);
			this.scrollView.onItemCreate = function() {
				let t = new preDestinationItem;
				return t.create(), t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}, this.scrollView.onItemChange = ((t, e) => {
				t.refreshItem(this.roleIds[e])
			}), this.scrollView.updateList(this.roleIds.length)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelRoleTestOver extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelRoleTestOver.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_nodeAll: "Laya.Box",
				cc_labelName: "Laya.Label",
				cc_spriteMaskBg: "Laya.Sprite",
				cc_spriteRole: "Laya.Sprite",
				cc_buttonOk: "UIButton",
				cc_buttonAdv: "UIButton",
				cc_buttonSwitch: "UIButton",
				cc_buttonCircle: "UIButton",
				cc_buttonBox: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.oldContractIdx = null, this.selectIndex = 0, this.ROLE_ID_TO_POS = {
				r1: {
					x: -10,
					y: 300
				},
				r2: {
					x: 0,
					y: 300
				},
				r7: {
					x: 80,
					y: 300
				},
				r24: {
					x: 0,
					y: 300
				},
				r9: {
					x: -80,
					y: 250
				},
				r25: {
					x: 0,
					y: 300
				},
				r26: {
					x: 30,
					y: 300
				},
				r3: {
					x: 57,
					y: 263
				},
				r27: {
					x: -4,
					y: 252
				}
			}, this.instOrBanner = new AdvInstOrBanner("enter_test_over", ""), this.loadState = 0
		}
		static getResLoader(t) {
			let e = new ResLoader;
			return e.add(db.get_animation_db(MODEL_ANIM.SHENTI_COME).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_COME).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI_LC).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHENTI_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_COME).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_IDLE).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_ZHANSHI).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_come).resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.come).resPath, RES_TYPE.PREFAB3D), e.add(db.get_model_db(db.MODEL_DB_ID.wawahe).resPath, RES_TYPE.PREFAB3D), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME01).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME02).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_COME03).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME01).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME02).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME03).path, RES_TYPE.ANIMATIONCLIP), (t && t.roleTestData || {}).contractIdx != mgrGame.contractIndex && (e.add(db.get_model_db(db.MODEL_DB_ID.shexiangji_jiechu).resPath, RES_TYPE.PREFAB3D), e.add(db.get_animation_db(MODEL_ANIM.WAWAHE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.GEMSTONE_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.SHENTI_JIECHU).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_JIECHU).path, RES_TYPE.ANIMATIONCLIP)), e.add("res/ui/PanelRoleTestOver.json", RES_TYPE.PREFAB2D), e
		}
		static openPanel(t, e = {}) {
			let a = this.getResLoader(e);
			mgrAlert.openWait(a, () => {
				mgrPanel.openPanelWithSingleton(UI_NAME.PanelRoleTestOver, e, t)
			})
		}
		buildUi() {
			this.buttonCircle.node.visible = !1, this.buttonOk.node.visible = !1, this.buttonBox.node.visible = !1;
			let t = this.context && this.context.roleTestData;
			if (!t) return;
			this.oldContractIdx = mgrGame.contractIndex, this.selectIndex = t.contractIdx;
			let e = db.get_role_contract_db(t.contractIdx),
				a = db.get_role_db(e.roleId);
			if (a) {
				this.labelName.text = mgrI18n.getText(a.tlite), this.spriteRole.loadImage(a.image);
				let t = this.ROLE_ID_TO_POS[e.roleId];
				this.spriteRole.pos(t.x, t.y)
			}
			let i = new Laya.Sprite,
				s = new Laya.Point;
			UiHelper.local2local(this.spriteMaskBg, this.spriteRole, s), i.graphics.drawImage(this.spriteMaskBg.texture, s.x, s.y), this.spriteRole.mask = i, this.oldParts = Tools.deepCopy(mgrPart.partsWear), this.selectIndex == mgrGame.contractIndex || mgrGame.isContractUnlock(this.selectIndex) ? (this.buttonAdv.node.visible = !1, this.buttonSwitch.node.visible = !0, this.buttonOk.node.visible = !1) : mgrAdv.checkActive("switch_role") ? (this.buttonAdv.node.visible = !0, this.buttonSwitch.node.visible = !1, this.buttonOk.node.visible = !1, mgrAdv.statisVideoShow("switch_role")) : (this.buttonAdv.node.visible = !1, this.buttonSwitch.node.visible = !1, this.buttonOk.node.visible = !0), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEvent(9303), GameStatistics.statisOnStageStart(13004)
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.clearWawahe(), this.clearOld(), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE), mgrGuide.unregisterGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX), GameStatistics.statisOnStageEnd(13004), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		clearWawahe() {
			this.wawahe && (this.wawahe.dispose(), this.wawahe = null)
		}
		clearOld() {
			this.oldAvatar && (this.oldAvatar.destroy(), this.oldAvatar = null), this.oldShexiangji && (this.oldShexiangji.dispose(), this.oldShexiangji = null), this.oldWawahe && (this.oldWawahe.dispose(), this.oldWawahe = null), this.oldGemstone && (_G.poolManager.put(this.oldGemstone), this.oldGemstone = null), this.oldRoom && (this.oldRoom.dispose(), this.oldRoom = null)
		}
		startLoad() {
			let t = new ResLoader;
			mgrPart.addPartResList(mgrPart.partsWear, t, !0), t.setLoadingCallback(this.onButtonAnimFinish.bind(this));
			let e = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			if (t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D), null != this.oldContractIdx && mgrGame.contractIndex != this.oldContractIdx) {
				let e = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
				t.add(db.get_model_db(e).resPath, RES_TYPE.PREFAB3D)
			}
			t.loadAll()
		}
		onButtonAnimFinish() {
			this.loadState++, 1 == this.loadState && (cc.tween(this.bg).to(.1, cc.PROP.ALPHA0).hide().start(), this.nodeAll.visible = !1, this.buttonClose.node.visible = !1, this.oldContractIdx == mgrGame.contractIndex ? (this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))) : (this.oldRoom = new RoomBath, this.oldRoom.load(this.onOldSceneLoaded.bind(this))))
		}
		onOldSceneLoaded() {
			this.addChild(this.oldRoom.scene), this.resNode.setChildIndex(this.oldRoom.scene, 0), this.oldRoom.changeToMain(), this.oldRoom.skybox.active = !0, this.oldRoom.camera.active = !1, this.oldRoom.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.oldRoom.mapNode.transform, "localScale", 3, 3, 3), this.oldAvatar = new RoleAvatar(this.oldParts), this.oldRoom.root.addChild(this.oldAvatar), this.oldWawahe = new GModel(db.MODEL_DB_ID.wawahe), this.oldWawahe.create(), this.oldWawahe.initAnimator(), this.oldWawahe.setParent(this.oldRoom.root), this.oldWawahe.hide(), this.oldShexiangji = new GModel(db.MODEL_DB_ID.shexiangji_jiechu), this.oldShexiangji.create(), this.oldShexiangji.setParent(this.oldRoom.root), this.oldShexiangji.callIfLoaded(() => {
				let t = this.oldShexiangji.findChild("camera");
				t.nearPlane = .01, t.fieldOfView = 60;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular
			});
			let t = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
			this.oldGemstone = _G.poolManager.get(GModel, t), this.oldGemstone.initAnimator(), this.oldGemstone.getAnimator().cullingMode = Laya.Animator.CULLINGMODE_ALWAYSANIMATE, this.oldGemstone.setParent(this.oldRoom.root);
			let e = new AnimatorFixedPlayer;
			e.addModelAnim(this.oldWawahe, MODEL_ANIM.WAWAHE_JIECHU), e.addModelAnim(this.oldShexiangji, MODEL_ANIM.SHEXIANGJI_JIECHU), e.addModelAnim(this.oldAvatar.baseBody, MODEL_ANIM.SHENTI_JIECHU), e.addModelAnim(this.oldAvatar.baseFace, MODEL_ANIM.FACE_JIECHU), e.addTimeCallback(110 / 30 / e.duration, () => {
				this.oldWawahe.show()
			}), e.addTimeCallback(.78, () => {
				this.onSwitchComplete(() => {
					this.clearOld(), e.dispose()
				})
			}), e.addTimeCallback(1, () => {}), e.play();
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.oldGemstone, MODEL_ANIM.GEMSTONE_JIECHU), a.addTimeCallback(80 / 30 / a.duration, () => {
				this.oldGemstone.hide()
			}), a.play()
		}
		onSwitchComplete(t) {
			UiHelper.playBlackFlash(1, () => {
				t(), this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))
			})
		}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.resNode.setChildIndex(this.room.scene, 0), this.room.changeToMain(), this.room.skybox.active = !0, this.room.camera.active = !1, this.room.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 3, 3, 3), this.wawahe = new GModel(db.MODEL_DB_ID.wawahe), this.wawahe.create(), this.wawahe.initAnimator(), this.wawahe.setParent(this.room.root), this.shexiangji = new GModel(db.MODEL_DB_ID.shexiangji_come), this.shexiangji.create(), this.shexiangji.setParent(this.room.root), this.shexiangji.callIfLoaded(() => {
				let t = this.shexiangji.findChild("camera");
				t.nearPlane = .01;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular, this.shexiangji_effect = this.shexiangji.findChild("e_wawahe_come"), this.shexiangji_effect && (this.shexiangji_effect.active = !1)
			});
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME01), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME01), t.addTimeCallback(1, () => {
				let t = new AnimatorFixedPlayer;
				t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME02), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME02), t.addTimeCallback(1, () => {
					this.buttonBox.node.visible = !0, mgrGuide.dispatchGuide(GUD_EVENT.START_CONTRACT), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONBOX, this.buttonBox.node)
				}), t.play()
			}), t.play()
		}
		playRoleAnim() {
			this.avatar = new RoleAvatar, this.room.root.addChild(this.avatar);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.avatar.baseBody, MODEL_ANIM.SHENTI_COME), t.addModelAnim(this.avatar.baseFace, MODEL_ANIM.FACE_COME), t.addTimeCallback(1, this.onRoleAnimFinish.bind(this)), t.play()
		}
		playGemstone() {
			let t = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			this.gemstone = _G.poolManager.get(GModel, t), this.gemstone.initAnimator(), this.gemstone.setParent(this.room.root), this.gemstone.setPosition(0, .05, 0), this.gemstone.playAnims(0, [MODEL_ANIM.GEMSTONE_COME, MODEL_ANIM.GEMSTONE_ZHANSHI], !0), this.gemstone.initPaint(), this.gemstone.callIfLoaded(() => {
				let t = this.gemstone.getChildAt(0);
				cc.tween(this).to(1.3, cc.PROP.EMPTY, {
					onUpdate(e, a) {
						t.transform.scale = t.transform.scale
					}
				}).start()
			})
		}
		onWawaheAnimFinish() {
			this.clearWawahe()
		}
		onRoleAnimFinish() {
			this.avatar.playAnimation(MODEL_ANIM.SHENTI_IDLE), this.buttonCircle.node.visible = !0, mgrGuide.registerGuideNode(GUD_REG_NODE.PANELCONTRACT_BUTTONCIRCLE, this.buttonCircle.node)
		}
		playGotoRoom() {
			this.shexiangji && (this.shexiangji.findChild("e_wawahe_come").active = !1, _G.isGuiding = !0, mgrPanel.openPanel(UI_NAME.PanelMain, {
				type: ROOM_TYPE.NORMAL,
				parts: null,
				data: {
					room: this.room,
					avatar: this.avatar,
					shexiangji: this.shexiangji,
					gemstone: this.gemstone
				},
				bSwitch: !0
			}, !1, () => {
				this.room.scene.removeSelf(), this.close()
			}))
		}
		onMsgAdvShowSuc(t) {
			"switch_role" == t.advName && (mgrGame.contractIndex = this.selectIndex, this.startLoad())
		}
		on_click_buttonOk() {
			mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_buttonAdv() {
			mgrAdv.statisVideoClick("switch_role"), mgrAdv.dispatchAdv("switch_role", {}, !0)
		}
		on_click_buttonSwitch() {
			this.selectIndex == mgrGame.contractIndex ? mgrAlert.alertDialog(mgrI18n.getText("panelContract.11"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				this.startLoad()
			}, () => {}) : mgrAlert.alertDialog(mgrI18n.getText("panelContract.12"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				mgrGame.contractIndex = this.selectIndex, this.startLoad()
			}, () => {})
		}
		on_click_buttonClose() {
			mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_buttonCircle() {
			this.shexiangji ? (this.buttonCircle.interactable = !1, cc.tween(this.buttonCircle.node, !0).to(.2, cc.PROP.ALPHA0).call(this.playGotoRoom.bind(this)).start()) : console.log("没有摄像机")
		}
		on_click_buttonBox() {
			this.buttonBox.node.visible = !1, this.shexiangji_effect && (this.shexiangji_effect.active = !0);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME03), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME03), t.addTimeCallback(3 / t.duration, this.playGemstone.bind(this)), t.addTimeCallback(1, this.onWawaheAnimFinish.bind(this)), t.play(), this.playRoleAnim()
		}
	}
	class medicineBottleItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "res/prefab/medicineBottleItem.json", this._exportNodeInfo = {
				cc_imageBg: "Laya.Image"
			}
		}
		onCreateComplete() {}
		refreshItem(t) {
			if (!this.callable) return this.safeCall(this.refreshItem, t);
			console.log("查看roleId", t);
			let e = db.get_role_test_color(t);
			if (!e) return;
			let a = e.icon;
			this.imageBg.skin = a
		}
	}
	class PanelRoleTest extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelRoleTest.json", this._exportNodeInfo = {
				cc_bg: "Laya.Image",
				cc_barMask: "UIBarMask",
				cc_nodePaticel6: "Laya.Box",
				cc_nodePaticel5: "Laya.Box",
				cc_nodePaticel4: "Laya.Box",
				cc_nodePaticel3: "Laya.Box",
				cc_nodePaticel2: "Laya.Box",
				cc_nodePaticel1: "Laya.Box",
				cc_needFill: "Laya.Sprite",
				cc_buttonAdv: "UIButton",
				cc_buttonOk: "UIButton",
				cc_button1: "UIButton",
				cc_label5: "Laya.Label",
				cc_button2: "UIButton",
				cc_label3: "Laya.Label",
				cc_button3: "UIButton",
				cc_label2: "Laya.Label",
				cc_button4: "UIButton",
				cc_label4: "Laya.Label",
				cc_button5: "UIButton",
				cc_label1: "Laya.Label",
				cc_buttonPreDestination: "UIButton",
				cc_spritePreDestinaTion: "Laya.Sprite",
				cc_boxTestNo: "Laya.Box",
				cc_spriteTestNo: "Laya.Sprite",
				cc_barMaskAnswer: "UIBarMask",
				cc_labelTestCount: "Laya.Label",
				cc_boxTestAd: "Laya.Box",
				cc_spriteTestAd: "Laya.Sprite",
				cc_buttonAdAnswer: "UIButton",
				cc_boxTestYes: "Laya.Box",
				cc_sptiteTestYes: "Laya.Sprite",
				cc_scrollView: "ReuseScrollList",
				cc_buttonColorEggMianJu: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.colorIdArr = [], this.spines = [], this.selectIndex = 0, this.instOrBanner = new AdvInstOrBanner("enter_role_test", ""), this.bAction = !1
		}
		addPreloadRes(t) {
			t.addModel(db.get_effect_db("150").res), t.addModel(db.get_effect_db("151").res), t.addModel(db.get_effect_db("152").res), t.addModel(db.get_effect_db("153").res), t.addModel(db.get_effect_db("154").res);
			for (let e = 1; e <= 5; e++) {
				let a = `ui_pingzi0${e}`;
				t.addBuffer(db.get_spine_db(a).skeletonData)
			}
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spritePreDestinaTion, "pnl_common_02.png"), mgrI18n.trySetI18nImage(this.spriteTestNo, "pnl_role_test_02.png"), mgrI18n.trySetI18nImage(this.spriteTestAd, "pnl_role_test_01.png"), mgrI18n.trySetI18nImage(this.sptiteTestYes, "pnl_role_test_02.png"), this.init3D(), this.refreshTestAnswerState(), this.checkColorEggMianJu();
			for (let t = 1; t <= 5; t++) {
				let e = this["button" + t.toString()],
					a = `ui_pingzi0${t}`,
					i = _G.poolManager.get(Spine, a);
				i.setParent(e.node), i.setPosition(e.node.width / 2, e.node.height), i.play("idle1"), i.setAlpha(0), i.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), this.spines.push(i);
				let s = this["label" + t.toString()],
					n = db.get_role_test_color(t - 1);
				s && n && (s.text = mgrI18n.getText(n.tlite), s.color = n.color)
			}
			this.barMask.style = UIBarMask.STYLE_VERTICAL, this.barMask.progress = 0, this.barMaskAnswer.style = UIBarMask.STYLE_HORIZON, this.refresBtns(), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEvent(9301), GameStatistics.statisOnStageStart(13004)
		}
		dispose() {
			this.stopProcMsg(), this.scrollView && this.scrollView.clearAllItems(), this.instOrBanner.dispose(), this.destroyed = !0;
			for (let t = 0; t < this.spines.length; t++) _G.poolManager.put(this.spines[t]);
			this.spines = null, GameStatistics.statisOnStageEnd(13004), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		refreshTestAnswerState() {
			if (this.boxTestAd.visible = !1, this.boxTestNo.visible = !1, this.boxTestYes.visible = !1, mgrRoleTest.getRecordTestAd(TEST_ROLE_ID)) this.boxTestYes.visible = !0;
			else {
				let t = mgrRoleTest.getRecordTestCount(TEST_ROLE_ID);
				t >= 3 ? (mgrAdv.statisVideoShow("role_test_answer"), this.boxTestAd.visible = !0) : (this.boxTestNo.visible = !0, this.barMaskAnswer.progress = t / 3, this.labelTestCount.text = `${t} / 3`)
			}
			if (this.boxTestYes.visible) {
				let t = db.get_role_test_answer("r27").answer;
				this.scrollView.onItemCreate = function() {
					let t = new medicineBottleItem;
					return t.create(), t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
				}, this.scrollView.onItemChange = ((e, a) => {
					e.refreshItem(t[a])
				}), this.scrollView.updateList(t.length)
			}
		}
		onMsgAdvShowSuc(t) {
			if ("role_test" == t.advName && t.params && t.params.roleTestData) {
				let e = t.params.roleTestData,
					a = e.contractIdx;
				for (let t = 0; t < ROLE_TEST_UNLOCK_CONTRACT_IDXS.length; t++) ROLE_TEST_UNLOCK_CONTRACT_IDXS[t] == a && mgrGame.contractUnlock(a);
				let i = db.get_role_contract_db(a);
				mgrRoleTest.markRoleTested(i.roleId), mgrRoleTest.addRecordTestCount(TEST_ROLE_ID), BaseFacade.mGoal.commit(ACTION_ID.ROLE_TEST, 1), this.buttonOk.node.visible = !1, this.buttonAdv.node.visible = !1, PanelRoleTestOver.openPanel(this.close.bind(this), {
					roleTestData: e
				}), PanelDialogCat.tryOpenPanel(4)
			} else "role_test_answer" == t.advName && (mgrRoleTest.addRecordAdTest(TEST_ROLE_ID), this.refreshTestAnswerState())
		}
		init3D() {
			this.createScene3DEffect()
		}
		clickBox(t) {
			if (this.bAction) return;
			if (this.colorIdArr.length >= 6) return;
			this.bAction = !0;
			let e = t;
			if (!db.get_role_test_color(e)) return;
			let a = this.spines[this.selectIndex];
			a && a.play("open", !1);
			let i = this["button" + (this.selectIndex + 1).toString()],
				s = this["nodePaticel" + (this.colorIdArr.length + 1).toString()],
				n = this.node2Camera(i.node),
				o = this.node2Camera(s),
				r = `${150+t}`;
			Timer.callLater(.3, () => {
				for (let t = 1; t <= 2; t++) {
					let t = this.getEffect(r);
					t.setWorldPosition(n), t.callIfLoaded(() => {
						let e = this,
							a = {
								x: t.resNode.transform.localPositionX,
								y: t.resNode.transform.localPositionY,
								pos: (e, a) => {
									t.resNode.transform.localPositionX = e, t.resNode.transform.localPositionY = a
								},
								get destroyed() {
									return e.destroyed
								}
							};
						cc.tween(a).then(cc.jumpTo(.5, o.x, o.y, -1 * Mathf.random(1, 2), 1)).start()
					}), t.play()
				}
			}, this), Timer.callLater(.8, () => {
				let t = this.spines[this.selectIndex];
				t && t.play("idle1"), this.colorIdArr.push(e), cc.tween(this.barMask, !0).to(.3, {
					progress: this.colorIdArr.length / 6
				}).start(), this.refresBtns(), this.bAction = !1
			}, this)
		}
		refresBtns() {
			this.needFill.visible = this.colorIdArr.length < 6;
			let t = 1 == db.cop.b_show_adv_cost;
			this.buttonOk.node.visible = this.colorIdArr.length >= 6 && t, this.buttonAdv.node.visible = this.colorIdArr.length >= 6 && !t, this.colorIdArr.length >= 6 && (GameStatistics.statisCommonEvent(9302), mgrAdv.statisVideoShow("role_test"))
		}
		checkColorEggMianJu() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.MIAN_JU, EGGS_STEP.THIRD) || (this.buttonColorEggMianJu.node.visible = !1)
		}
		on_click_buttonOk() {
			mgrAlert.openPanelLoading(UI_NAME.PanelAdvCostDialog, {
				desc: mgrI18n.getText("panelRoleTest.8"),
				costText: mgrI18n.getText("panelRoleTest.9"),
				advText: mgrI18n.getText("panelRoleTest.10"),
				fOnClickCost: () => {
					let t = mgrRoleTest.finishTest(this.colorIdArr);
					if (t)
						if (BaseFacade.mItem.subItem("1000", 300, null)) {
							GameStatistics.statisCommonEvent(2555, 1);
							let e = t.contractIdx;
							for (let t = 0; t < ROLE_TEST_UNLOCK_CONTRACT_IDXS.length; t++) ROLE_TEST_UNLOCK_CONTRACT_IDXS[t] == e && mgrGame.contractUnlock(e);
							let a = db.get_role_contract_db(e);
							mgrRoleTest.markRoleTested(a.roleId), mgrRoleTest.addRecordTestCount(TEST_ROLE_ID), BaseFacade.mGoal.commit(ACTION_ID.ROLE_TEST, 1), this.buttonOk.node.visible = !1, this.buttonAdv.node.visible = !1, PanelRoleTestOver.openPanel(this.close.bind(this), {
								roleTestData: t
							}), PanelDialogCat.tryOpenPanel(4)
						} else GameStatistics.statisCommonEvent(2555, 0), mgrAlert.alertNotEnough("1000");
					else _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "缘分测试失败，请退出后重新开始测试")
				},
				fOnClickAdv: this.on_click_buttonAdv.bind(this)
			})
		}
		on_click_buttonAdv() {
			let t = mgrRoleTest.finishTest(this.colorIdArr);
			t ? (mgrAdv.statisVideoClick("role_test"), mgrAdv.dispatchAdv("role_test", {
				roleTestData: t
			}, !0)) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, "缘分测试失败，请退出后重新开始测试")
		}
		on_click_buttonClose() {
			mgrGame.tryEnterMain(this.close.bind(this))
		}
		on_click_button1() {
			this.selectIndex = 0, this.clickBox(4)
		}
		on_click_button2() {
			this.selectIndex = 1, this.clickBox(2)
		}
		on_click_button3() {
			this.selectIndex = 2, this.clickBox(1)
		}
		on_click_button4() {
			this.selectIndex = 3, this.clickBox(3)
		}
		on_click_button5() {
			this.selectIndex = 4, this.clickBox(0)
		}
		on_click_buttonPreDestination() {
			mgrAlert.openPanelLoading(UI_NAME.PanelRolePreDestination)
		}
		on_click_buttonAdAnswer() {
			mgrAdv.statisVideoClick("role_test_answer"), mgrAdv.dispatchAdv("role_test_answer", {}, !0)
		}
		on_click_buttonColorEggMianJu() {
			this.buttonColorEggMianJu.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggMianJu.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggMianJu.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.mian_ju)
		}
	}
	class schoolYearbookItem extends ViewBase {
		constructor() {
			super(...arguments), this.resourceName = "res/prefab/schoolYearbookItem.json", this._exportNodeInfo = {
				cc_imageBg: "Laya.Image",
				cc_nodeIcon: "Laya.Sprite",
				cc_imageIcon: "Laya.Image",
				cc_imageLevel: "Laya.Sprite",
				cc_spriteNotUnlock: "Laya.Sprite",
				cc_labelState: "Laya.Label",
				cc_buttonUnlock: "UIButton",
				cc_buttonAdvFinishStand: "UIButton",
				cc_buttonAdvStudy: "UIButton"
			}
		}
		onCreateComplete() {}
		refreshItem(t) {
			if (!this.callable) return this.safeCall(this.refreshItem, t);
			this.roleId = t, this.refreshUi()
		}
		refreshUi() {
			this.callable || this.safeCall(this.refreshUi);
			let t = this.roleId,
				e = db.get_class_room_role_db(t);
			if (!e) return;
			let a = mgrClassRoom.getRoleState(t),
				i = e.iconUrl;
			this.imageIcon.skin = i;
			let s = a != CLASS_ROLE_STATE.LOCKED;
			this.spriteNotUnlock.visible = !s, this.imageIcon.gray = !s;
			let n = mgrClassRoom.getRoleLevel(t),
				o = db.get_class_room_level_db(n);
			this.imageLevel.visible = !1, o && o.icon && (this.imageLevel.visible = !0, mgrI18n.trySetI18nImage(this.imageLevel, "icon_class_level_02.png")), this.buttonUnlock.node.visible = !1, this.buttonAdvFinishStand.node.visible = !1, this.buttonAdvStudy.node.visible = !1;
			let r = "",
				l = "#ffffff";
			switch (a) {
				case CLASS_ROLE_STATE.LOCKED:
					r = mgrI18n.getText("schoolYearbookItem.8"), l = "#c35488", this.buttonUnlock.node.visible = !0;
					break;
				case CLASS_ROLE_STATE.WAIT:
					r = mgrI18n.getText("schoolYearbookItem.9"), l = "#0581b5", this.buttonAdvStudy.node.visible = !0;
					break;
				case CLASS_ROLE_STATE.STUDY:
					r = mgrI18n.getText("schoolYearbookItem.10"), l = "#0581b5";
					break;
				case CLASS_ROLE_STATE.STAND:
					r = mgrI18n.getText("schoolYearbookItem.4"), l = "#c35488", this.buttonAdvFinishStand.node.visible = !0;
					break;
				case CLASS_ROLE_STATE.FREE:
					r = mgrI18n.getText("schoolYearbookItem.9"), l = "#0581b5", this.buttonAdvStudy.node.visible = mgrAdv.checkActive("class_role_summon")
			}
			this.labelState.text = r, this.labelState.color = l
		}
		on_click_buttonUnlock() {
			let t = db.get_class_room_role_db(this.roleId);
			if (!t) return;
			switch (t.id) {
				case 1:
					GameStatistics.statisCommonEvent(2531, 0);
					break;
				case 3:
					GameStatistics.statisCommonEvent(2532, 0);
					break;
				case 4:
					GameStatistics.statisCommonEvent(2533, 0)
			}
			if (!t.unlockQuestId || BaseFacade.mQuest.isCommitable(t.unlockQuestId)) return void mgrAlert.openPanelLoading(UI_NAME.PanelClassReward, {
				roleId: t.id,
				bFromBook: !0
			});
			let e = db.get_quest_db(t.unlockQuestId);
			if (e.jump > 0) {
				let a = mgrI18n.getText(t.tlite2),
					i = mgrI18n.getText(e.tlite),
					s = String.format(mgrI18n.getText("schoolYearbookItem.1"), a) + i;
				mgrAlert.alertDialog(s, mgrI18n.getText("schoolYearbookItem.2"), () => {
					switch (t.id) {
						case 1:
							GameStatistics.statisCommonEvent(2531, 1);
							break;
						case 3:
							GameStatistics.statisCommonEvent(2532, 1);
							break;
						case 4:
							GameStatistics.statisCommonEvent(2533, 1)
					}
					_G.sendMsg("JUMP_PANEL", e.jump)
				}, () => {})
			}
		}
		on_click_buttonAdvFinishStand() {
			let t = db.get_class_room_role_db(this.roleId);
			t && (mgrAdv.statisVideoClick("class_role_leave"), mgrAdv.dispatchAdv("class_role_leave", {
				roleId: t.id
			}, !0))
		}
		on_click_buttonAdvStudy() {
			let t = db.get_class_room_role_db(this.roleId);
			if (!t) return;
			let e = mgrClassRoom.getRoleState(t.id);
			e == CLASS_ROLE_STATE.WAIT ? (mgrAdv.statisVideoClick("class_role_enter"), mgrAdv.dispatchAdv("class_role_enter", {}, !0)) : e == CLASS_ROLE_STATE.FREE && (mgrAdv.statisVideoClick("class_role_summon"), mgrAdv.dispatchAdv("class_role_summon", {
				roleId: t.id
			}, !0))
		}
	}
	class PanelSchoolYearbook extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelSchoolYearbook.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_spriteBg: "Laya.Sprite",
				cc_scrollView: "ReuseScrollList",
				cc_labelLeft: "Laya.Label",
				cc_labelRight: "Laya.Label",
				cc_buttonPre: "UIButton",
				cc_buttonNext: "UIButton",
				cc_buttonClose: "UIButton"
			}, this.roleIds = [], this.selectedIdx = 0, this.instOrBanner = new AdvInstOrBanner("", "banner_shool_year_book"), this.bNotFadeIn = !1
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteBg, "pnl_school_yearbook_03.png"), this.initUi(), this.registerMsg({
				JUMP_PANEL: this.onMsgJumpPanel.bind(this),
				CLASS_ROLE_LEVEL_CHANGE: this.onMsgClassRoleLevelChange.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.instOrBanner.dispose(), this.scrollView && this.scrollView.clearAllItems(), this.stopProcMsg(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgJumpPanel() {
			this.close()
		}
		onMsgClassRoleLevelChange() {
			this.bNotFadeIn = !0, this.selectIdx(this.selectedIdx)
		}
		initUi() {
			this.roleIds = [];
			let t = db.get_class_room_role_db_map();
			for (let e in t) {
				let a = t[e];
				a && this.roleIds.push(a.id)
			}
			this.scrollView.onItemCreate = function() {
				let t = new schoolYearbookItem;
				return t.create(), t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}, this.scrollView.onItemChange = ((t, e) => {
				t.refreshItem(this.roleIds[e])
			}), this.selectIdx(1), this.buttonPre.node.visible = !1, this.buttonNext.node.visible = !1, mgrAdv.checkActive("class_role_summon") && mgrAdv.statisVideoShow("class_role_summon"), Timer.callLoop(1, t => {
				this.destroyed ? t.stop() : this.scrollView && this.scrollView.foreachItems(t => {
					t && t.refreshUi()
				})
			}, this)
		}
		selectIdx(t) {
			this.selectedIdx = t, this.scrollView.updateList(this.roleIds.length);
			let e = 0;
			for (let t = 0; t < this.roleIds.length; t++) {
				let a = db.get_class_room_role_db(this.roleIds[t]);
				!a || a.unlockQuestId && !BaseFacade.mQuest.isCommitable(a.unlockQuestId) || e++
			}
			this.labelLeft.text = e.toString(), this.labelRight.text = this.roleIds.length.toString()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonPre() {
			1 != this.selectedIdx ? this.selectIdx(this.selectedIdx - 1) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelSchoolYearbook.1"))
		}
		on_click_buttonNext() {
			this.selectedIdx != Math.ceil(this.roleIds.length / 9) ? this.selectIdx(this.selectedIdx + 1) : _G.sendMsg(BASE_MSG.UI_SHOW_TIP, mgrI18n.getText("panelSchoolYearbook.2"))
		}
	}
	class PanelSetting extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelSetting.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_buttonDebug: "UIButton",
				cc_version: "Laya.Label",
				cc_btnMusic: "UIToggle",
				cc_spriteMusicoff: "Laya.Sprite",
				cc_spriteMusicOn: "Laya.Sprite",
				cc_btnSound: "UIToggle",
				cc_spriteSoundOff: "Laya.Sprite",
				cc_spriteSoundOn: "Laya.Sprite",
				cc_videoNode: "Laya.Sprite",
				cc_btnVideo: "UIToggle",
				cc_spriteVoidOff: "Laya.Sprite",
				cc_spriteVoidOn: "Laya.Sprite",
				cc_inputNode: "Laya.Sprite",
				cc_spriteInput: "Laya.TextInput",
				cc_buttonCdkey: "UIButton",
				cc_buttonLanguage: "UIButton"
			}, this._instOrBanner = new AdvInstOrBanner("", ""), this._debugCount = 0
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteMusicOn, "pnl_common_04.png"), mgrI18n.trySetI18nImage(this.spriteMusicoff, "pnl_common_03.png"), mgrI18n.trySetI18nImage(this.spriteSoundOn, "pnl_common_04.png"), mgrI18n.trySetI18nImage(this.spriteSoundOff, "pnl_common_03.png"), mgrI18n.trySetI18nImage(this.spriteVoidOn, "pnl_common_04.png"), mgrI18n.trySetI18nImage(this.spriteVoidOff, "pnl_common_03.png"), this.buttonDebug.clickDelta = 0, this.btnMusic.isChecked = mgrSound.musicEnabled, this.btnSound.isChecked = mgrSound.soundEnabled, this.btnVideo.isChecked = mgrSdk.isAutoRecordVideo, this.version.text = _G.GAME_VERSION, UiHelper.addUIToggleClick(this.btnMusic.node, t => {
				mgrSound.musicEnabled = t
			}, ""), UiHelper.addUIToggleClick(this.btnSound.node, t => {
				mgrSound.soundEnabled = t
			}, ""), UiHelper.addUIToggleClick(this.btnVideo.node, t => {
				mgrSdk.setAutoRecordVideo(t)
			}, ""), this.onMsgCopChange(), this.registerMsg({
				[BASE_MSG.SDK_COP_CHANGED]: this.onMsgCopChange.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this._instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this._instOrBanner.onFocus(t)
		}
		onMsgCopChange() {
			this.videoNode.setVisible(db.cop.isSupportRecordShare), this.inputNode.visible = !!mgrSdk.getSubCop("b_cdkey_enabled")
		}
		on_click_btnMusic() {}
		on_click_btnSound() {}
		on_click_btnVideo() {}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonDebug() {
			if (this._debugCount++, 20 == this._debugCount) {
				let t = debug_ui.create_input("", 10, 100, 100);
				this.addChild(t);
				let e = debug_ui.create_btn("OK", this, () => {
					~t.text.indexOf("ul_" + (new Date).getHours()) && (mgrAlert.openPanelLoading(DebugMain), this.close())
				});
				this.addChild(e).pos(10, 180, !0)
			}
		}
		on_click_buttonCdkey() {
			this.spriteInput.text && mgrSdk.sendCDK(this.spriteInput.text)
		}
		on_click_buttonLanguage() {
			mgrAlert.openPanelLoading(UI_NAME.PanelLanguageDialog)
		}
	}
	class PanelShoe extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelShoe.json", this._exportNodeInfo = {
				cc_nodeSpine: "Laya.Box",
				cc_spritePieces: "Laya.Sprite",
				cc_piece1: "Laya.Sprite",
				cc_piece2: "Laya.Sprite",
				cc_piece3: "Laya.Sprite",
				cc_piece4: "Laya.Sprite",
				cc_buttonContract: "UIButton",
				cc_spriteDialog: "Laya.Sprite",
				cc_textDialog: "Laya.Text",
				cc_nodeBtn: "Laya.Sprite",
				cc_buttonFind: "UIButton",
				cc_topCenterNode: "Laya.Box",
				cc_titleText1: "Laya.Text",
				cc_titleText2: "Laya.Text",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("", "banner_shoe")
		}
		buildUi() {
			this.textDialog.text = mgrI18n.getText("panelShoe.2"), this.titleText1.text = mgrI18n.getText("panelShoe.5"), this.titleText2.text = mgrI18n.getText("panelShoe.6");
			let t = _G.poolManager.get(Spine, db.SPINE_DB_ID.cartoon);
			this.spine = t, t.setParent(this.nodeSpine), t.play("idle", !1);
			let e = this.buttonClose.node.x;
			this.buttonClose.node.x -= 200, cc.tween(this.buttonClose.node).to(.3, {
				x: e
			}, cc.OPTION.BACK_OUT).start();
			let a = this.topCenterNode.y;
			this.topCenterNode.y -= 200, cc.tween(this.topCenterNode).to(.3, {
				y: a
			}, cc.OPTION.BACK_OUT).start(), this.nodeBtn.scaleY = 0;
			let i = this.spritePieces.x;
			this.spritePieces.x += 500, cc.tween(this.spritePieces).delay(5).to(.3, {
				x: i
			}, cc.OPTION.BACK_OUT).start(), cc.tween(this.nodeBtn).delay(5).to(.3, {
				scaleY: 1
			}).call(() => {
				UiHelper.playBreathe(this.buttonFind.node)
			}).start(), this.spriteDialog.scale(0, 0, !0), cc.tween(this.spriteDialog).delay(5).to(.4, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start();
			let s = !0;
			for (let t = 1; t <= 4; t++) mgrShoe.checkPieceUnlock(t - 1) ? this["piece" + t].visible = !1 : s = !1;
			this.spritePieces.visible = !s, mgrSdk.startRecordVideo(), GameStatistics.statisOnStageStart(13007), this.registerMsg({
				UNLOCK_SHOE_PIECES: this.onMsgUnlockShoePieces.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.spine && _G.poolManager.put(this.spine), GameStatistics.statisOnStageEnd(13007), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgUnlockShoePieces() {
			let t = !0;
			for (let e = 1; e <= 4; e++) mgrShoe.checkPieceUnlock(e - 1) ? this["piece" + e].visible = !1 : t = !1;
			this.spritePieces.visible = !t
		}
		on_click_buttonContract() {
			mgrAlert.alertDialog(mgrI18n.getText("panelShoe.7"))
		}
		on_click_buttonFind() {
			GameStatistics.statisCommonEvent(2603), mgrAlert.openPanelLoading(UI_NAME.PanelShoeSelect), UiHelper.playBreathe(this.buttonFind.node)
		}
		on_click_buttonClose() {
			mgrSdk.stopRecordVideo(), this.close()
		}
	}
	class ShoeColorEgg extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/ShoeColorEgg.json", this._exportNodeInfo = {
				cc_spriteEgg: "Laya.Image",
				cc_buttonGo: "UIButton",
				cc_buttonGet: "UIButton",
				cc_buttonAdvGet: "UIButton",
				cc_nodeDesc: "Laya.Sprite",
				cc_labelDesc: "Laya.Label",
				cc_nodeTime: "Laya.Sprite",
				cc_spriteBar: "UIBarMask",
				cc_labelTime: "Laya.Label",
				cc_nodeTip: "Laya.Sprite",
				cc_spriteTip: "Laya.Image"
			}, this.create()
		}
		onCreateComplete() {
			this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				[BASE_MSG.QUEST_STATE_CHANGE]: this.onMsgQuestState.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			Laya.timer.clear(this, this.updateTime), this.stopProcMsg(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"get_shoe_color_egg" == t.advName && t.params == this.questId && (GameStatistics.statisCommonEvent(2606 + parseInt(this.questId) - 6010, 1), mgrColorEggs.commit(this.questId, !0))
		}
		onMsgQuestState(t) {
			t.questDb.id == this.questId && this.fillData(this.questId)
		}
		fillData(t) {
			if (!this.callable) return this.safeCall(this.fillData, t);
			Laya.timer.clear(this, this.updateTime), this.questId = t, this.stepIdx = -1;
			let e = db.get_color_egg_db(t);
			switch (mgrColorEggs.getState(t)) {
				case EGGS_STATE.NEW:
					this.buttonGet.node.visible = !1, this.buttonGo.node.visible = !1, this.buttonAdvGet.node.visible = !1, this.nodeDesc.visible = !1, this.nodeTime.visible = !1, this.nodeTip.visible = !1;
					break;
				case EGGS_STATE.OPENED:
					let a = BaseFacade.mQuest.getCurValue(t);
					this.stepIdx = a, a < 3 ? (this.buttonGet.node.visible = !1, this.buttonGo.node.visible = !0, this.buttonAdvGet.node.visible = !1, this.nodeDesc.visible = !0, this.nodeTime.visible = !1, this.labelDesc.text = mgrI18n.getText(`${e.tlite}.${a+1}`), this.nodeTip.visible = !0, this.nodeTip.scale(0, 0, !0), this.spriteTip.skin = e.icon, cc.tween(this.nodeTip, !0).delay(Mathf.random(50, 60) / 100).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()) : (this.spriteEgg.skin = "res/ui/pnl_shoe_color_eggs/egg_opened.png", this.buttonGet.node.visible = !1, this.buttonGo.node.visible = !1, this.buttonAdvGet.node.visible = !0, this.nodeDesc.visible = !1, this.nodeTime.visible = !0, this.nodeTip.visible = !1, Laya.timer.loop(1e3, this, this.updateTime), this.updateTime());
					break;
				case EGGS_STATE.AWARD:
					this.spriteEgg.skin = "res/ui/pnl_shoe_color_eggs/egg_opened.png", this.buttonGet.node.visible = !0, this.buttonGo.node.visible = !1, this.buttonAdvGet.node.visible = !1, this.nodeDesc.visible = !1, this.nodeTime.visible = !1, this.nodeTip.visible = !1;
					break;
				case EGGS_STATE.FINISHED:
					this.spriteEgg.skin = "res/ui/pnl_shoe_color_eggs/egg_opened.png", this.buttonGet.node.visible = !1, this.buttonGo.node.visible = !1, this.buttonAdvGet.node.visible = !1, this.nodeDesc.visible = !1, this.nodeTime.visible = !1, this.nodeTip.visible = !1, this.spriteEgg.gray = !0
			}
		}
		updateTime() {
			let t = mgrColorEggs.getTotalTime(this.questId),
				e = mgrColorEggs.getLeftTime(this.questId);
			this.labelTime.text = Tools.formatSimpleTime(e) + mgrI18n.getText("shoeColorEgg.2"), this.spriteBar.progress = Mathf.clamp01(e / t), e <= 0 && Timer.callLater(.5, () => {
				this.fillData(this.questId)
			}, this)
		}
		on_click_buttonGo() {
			GameStatistics.statisCommonEvent(2606 + parseInt(this.questId) - 6010, 0), mgrColorEggs.tryJumpToColorEgg(this.questId, this.stepIdx)
		}
		on_click_buttonGet() {
			GameStatistics.statisCommonEvent(2606 + parseInt(this.questId) - 6010, 2), mgrColorEggs.commit(this.questId)
		}
		on_click_buttonAdvGet() {
			mgrAdv.statisVideoClick("get_shoe_color_egg"), mgrAdv.dispatchAdv("get_shoe_color_egg", this.questId, !0)
		}
	}
	class PanelShoeColorEggs extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelShoeColorEggs.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_nodeNpcEffect: "Laya.Box",
				cc_spriteTitle: "Laya.Sprite",
				cc_nodeEgg0: "Laya.Sprite",
				cc_nodeEgg1: "Laya.Sprite",
				cc_nodeEgg2: "Laya.Sprite",
				cc_buttonUnlockEggs: "UIButton",
				cc_eggsText: "Laya.Text",
				cc_btnOpen: "Laya.Sprite",
				cc_openText: "Laya.Text",
				cc_buttonClose: "UIButton"
			}, this.eggs = []
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.spriteTitle, "pnl_shoe_color_eggs_01.png"), this.eggsText.text = mgrI18n.getText("panelShoeColorEggs.4"), this.openText.text = mgrI18n.getText("panelShoeColorEggs.5"), mgrAdv.statisVideoShow("get_shoe_color_egg"), mgrColorEggs.isShoeColorEggEnable() ? this.buttonUnlockEggs.node.visible = !1 : UiHelper.playBreathe(this.btnOpen);
			let t = mgrColorEggs.getAllQuest(EGGS_TYPE.SHOE);
			for (let e = 0; e < t.length; e++) {
				let a = new ShoeColorEgg;
				a.setParent(this["nodeEgg" + e]), a.fillData(t[e]), this.eggs.push(a)
			}
			let e = this.addEffect("201");
			e.followTarget(this.nodeNpcEffect, this.cameraEffect), e.play()
		}
		dispose() {
			for (let t = 0; t < this.eggs.length; t++) this.eggs[t].dispose();
			super.dispose()
		}
		on_click_buttonUnlockEggs() {
			GameStatistics.statisCommonEvent(2605), this.buttonUnlockEggs.interactable = !1;
			let t = [COLOR_EGGS_QUEST.HUAI_BIAO, COLOR_EGGS_QUEST.MIAN_JU, COLOR_EGGS_QUEST.MAN_DUO_LA];
			for (let e = 0; e < t.length; e++) mgrColorEggs.accept(t[e]);
			cc.tween(this.buttonUnlockEggs.node).to(.4, cc.PROP.ALPHA0).hide().start();
			for (let t = 0; t < 3; t++) UiHelper.playRotShake(this["nodeEgg" + t], Mathf.random(40, 60) / 100)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelShoeColorEggTip extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelShoeColorEggTip.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_buttonGo: "UIButton",
				cc_nodeDesc: "Laya.Sprite",
				cc_nodeAnim: "Laya.Sprite",
				cc_spriteImage: "Laya.Image"
			}, this.btouch = !1
		}
		buildUi() {
			let t = this.context.questId,
				e = this.context.stepIdx,
				a = db.get_color_egg_db(t);
			this.spriteImage.skin = `res/texture/color_eggs/${a.colorEggImage[e-1]}.png`
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonGo() {
			if (this.context) {
				if (this.btouch) return;
				this.btouch = !0, mgrColorEggs.tryJumpToColorEgg(this.context.questId, this.context.stepIdx)
			}
		}
	}
	const ZORDER = {
		1: 10,
		0: 20,
		2: 30,
		3: 40,
		4: 50
	};
	class ShoeAvatar extends Laya.Sprite {
		constructor() {
			super(), this.curWearParts = {}, this.partViews = {}
		}
		setFoot(t, e) {
			let a = t.slice();
			a.unshift("100001"), this.setParts(0, a), this.setParts(4, e)
		}
		setSole(t) {
			this.setParts(1, t)
		}
		setVamp(t) {
			this.setParts(2, t)
		}
		setDecoration(t) {
			this.setParts(3, t)
		}
		setParts(t, e) {
			this.clearType(t);
			for (let a = 0; a < e.length; a++) this.addPart(t, e[a]);
			this.curWearParts[t] = e
		}
		clearType(t) {
			delete this.curWearParts[t];
			let e = this.partViews[t];
			if (e)
				for (let t = 0; t < e.length; t++) e[t].destroy();
			this.partViews[t] = []
		}
		addPart(t, e) {
			let a, i = db.get_shoe_part_db(e),
				s = db.get_shoe_config_data(e).layoutList,
				n = this.partViews[t];
			for (let e = 0; e < i.viewList.length; e++) {
				let r = i.viewList[e];
				if (!r) continue;
				r.endsWith(".png") ? ((a = new Laya.Image).anchorX = .5, a.anchorY = .5, a.skin = r) : a = new SpineNode(r), this.addChild(a);
				let l = s[e];
				a.pos(l.pos.x, l.pos.y, !0).scale(l.scl, l.scl, !0).rotation = l.rot;
				var o = i.zOrderList[e] || ZORDER[t] || 0;
				a.zOrder = o, n.push(a)
			}
		}
		playTrySucAnim(t) {
			let e = this.partViews[0].concat(this.partViews[4]);
			for (let i = 0; i < e.length; i++) {
				let s = e[i],
					n = s.y;
				s.y = n - 1e3;
				var a = cc.tween(s).to(1.5, {
					y: n
				}, cc.OPTION.SINE_IN_OUT);
				t && (a = a.call(t), t = null), a.start()
			}
		}
		playTryFailAnim(t) {
			let e = this.partViews[0].concat(this.partViews[4]);
			for (let i = 0; i < e.length; i++) {
				let s = e[i],
					n = s.y;
				s.y = n - 1e3;
				var a = cc.tween(s).to(1.5, {
					y: n - 250
				}, cc.OPTION.SINE_IN_OUT);
				t && (a = a.call(t), t = null), a.start()
			}
		}
	}
	class SimpleRichText extends Laya.Sprite {
		constructor() {
			super(...arguments), this.textPools = [], this.usingTexts = [], this._text = "", this.space = 0, this.lineHeight = 2, this.fontSize = 20, this.color = "#ffffff", this.strokeColor = "", this.stroke = 2, this.align = "left"
		}
		clearText() {
			return this._text = "", this.recoverAll(), this
		}
		setLineHeight(t) {
			return this.lineHeight = t, this
		}
		get text() {
			return this._text
		}
		set text(t) {
			this.setText(t)
		}
		setText(t) {
			return this._text = "", this.addText(t), this.build(), this
		}
		addText(t, e = !1) {
			return this._text += t, e && this.callLater(this.build), this
		}
		build() {
			this.buildText(this._text)
		}
		buildText(t) {
			this.recoverAll();
			let e = this._parseText(t);
			for (let t = 0; t < e.length; t++) {
				const a = e[t];
				let i = this._getTextFromPool();
				a.font && (i.font = a.font), i.fontSize = a.fontSize, a.color && (i.color = a.color), i.text = a.text, i.bold = a.bold, a.strokeColor ? (i.strokeColor = a.strokeColor, i.stroke = this.stroke) : i.stroke = 0, this.addChild(i), this.usingTexts.push(i)
			}
			Laya.timer.callLater(this, this._refreshLayout, [this.usingTexts, e])
		}
		_getTextFromPool() {
			return this.textPools.length > 0 ? this.textPools.shift() : new Laya.Text
		}
		recoverAll() {
			for (let t = 0; t < this.usingTexts.length; t++) {
				const e = this.usingTexts[t];
				e.removeSelf(), this.textPools.push(e)
			}
			this.usingTexts = []
		}
		_parseText(t) {
			let e = t.split(/<\/>/),
				a = [];
			for (let t = 0; t < e.length; t++) {
				const i = e[t];
				let s = /color:(\S{7})/gim,
					n = /font:([^>]+)/gim,
					o = /fontSize:([0-9]+)/gim,
					r = /bold:([0-1]+)/gim,
					l = /strokeColor:(\S+)/gim,
					c = /<.*>([\s\S]+)/gim.exec(i),
					h = s.exec(i),
					d = n.exec(i),
					_ = o.exec(i),
					g = r.exec(i),
					u = l.exec(i);
				if (!c) {
					1 == e.length && a.push({
						text: i,
						fontSize: this.fontSize,
						color: this.color,
						bold: !1
					});
					continue
				}
				let m = h ? h[1] : this.color,
					p = d && d[1],
					S = _ ? parseInt(_[1]) : this.fontSize,
					b = g && "1" == g[1],
					L = u ? u[1] : this.strokeColor;
				if (c[1].indexOf("\n") >= 0) {
					let t = c[1].split("\n");
					for (let e = 0; e < t.length; e++) a.push({
						text: t[e],
						font: p,
						fontSize: S,
						color: m,
						bold: b,
						strokeColor: L,
						newLine: e > 0
					})
				} else a.push({
					text: c[1],
					font: p,
					fontSize: S,
					color: m,
					bold: b,
					strokeColor: L
				})
			}
			return a
		}
		_refreshLayout(t, e) {
			if (0 == t.length) return;
			let a = this.width;
			a || (a = 1e6);
			let i = 0,
				s = 0,
				n = 0,
				o = 0,
				r = [0],
				l = [this.lineHeight];
			for (let c = 0; c < t.length; c++) {
				let h = t[c];
				(i += h.width + this.space) > a && c != n || e[c].newLine ? (s = l[o] + this.lineHeight, n = c, r.push(n), e[c].newLine = !1, o++, l.push(0), c--, i = 0) : l[o] = Math.max(l[o], s + h.height)
			}
			this._resetPosition(t, r, l)
		}
		_resetPosition(t, e, a) {
			for (let i = 0; i < e.length; i++) {
				let s = e[i + 1];
				s || (s = t.length), this._resetLinePostion(t, e[i], s, a[i])
			}
		}
		_resetLinePostion(t, e, a, i) {
			let s = 0;
			if ("center" == this.align) {
				let i = -this.space;
				for (let s = e; s < a; s++) i += t[s].width + this.space;
				s = -i / 2
			}
			for (let o = e; o < a; o++) {
				var n = t[o];
				n.pos(s, i, !0), n.pivotY = n.height, s += n.width + this.space
			}
		}
		onDestroy() {
			for (let t = this.textPools.length - 1; t >= 0; t--) this.textPools[t].destroy();
			for (let t = this.usingTexts.length - 1; t >= 0; t--) this.usingTexts[t].destroy();
			this.textPools.length = 0, this.usingTexts.length = 0, super.onDestroy()
		}
		static parseRich(t, e, a, i, s, n) {
			let o = "",
				r = t;
			for (;;) {
				let t = r.search(s),
					l = r.search(n);
				if (-1 == t) return o += `<color:${e[0]} fontSize:${i[0]} font: ${a[0]}>${r}</>`;
				if (-1 == l) return o += `<color:${e[1]} fontSize:${i[1]} font: ${a[1]}>${r}</>`;
				if (0 == l && t > 0) {
					let s = r.slice(0, t);
					o += `<color:${e[0]} fontSize:${i[0]} font: ${a[0]}>${s}</>`, r = r.substr(t, r.length)
				} else if (l > 0 && 0 == t) {
					let t = r.slice(0, l);
					o += `<color:${e[1]} fontSize:${i[1]} font: ${a[1]}>${t}</>`, r = r.substr(l, r.length)
				}
			}
		}
	}
	const ST_NONE = "None",
		EMPTY_FUN$1 = function() {};
	class SimpleFSM {
		constructor() {
			this._isSwitchingState = !1, this._currentStateName = ST_NONE, this._nextStateName = ST_NONE, this._states = {
				[ST_NONE]: {
					leave: EMPTY_FUN$1,
					execute: EMPTY_FUN$1,
					enter: EMPTY_FUN$1
				}
			}
		}
		registerState(t, e, a, i, s) {
			null != this._states[t] && console.warn("警告] FSMObject.registerState state override!", t), a = null == a ? EMPTY_FUN$1 : a.bind(e), i = null == i ? EMPTY_FUN$1 : i.bind(e), s = null == s ? EMPTY_FUN$1 : s.bind(e), this._states[t] = {
				enter: a,
				execute: i,
				leave: s
			}
		}
		removeState(t) {
			this._states[t] = null
		}
		update(t) {
			if (this._states) {
				if (this._nextStateName != this._currentStateName) {
					if (this._isSwitchingState = !0, this._states[this._currentStateName].leave(), this._isSwitchingState = !1, !this._states) return;
					if (this._lastStateName = this._currentStateName, this._currentStateName = this._nextStateName, this._states[this._currentStateName].enter(this._stateData), this._stateData = null, !this._states) return
				}
				this._currentStateName == this._nextStateName && this._states[this._currentStateName].execute(t)
			}
		}
		setNextState(t, e) {
			this._isSwitchingState ? console.warn(`FSM.setNextState [${this._nextStateName}] is busy.`) : this._states[t] ? (this._nextStateName = t, this._stateData = e) : console.warn(`FSM.setNextState [${t}] is not exist.`)
		}
		getState() {
			return this._currentStateName
		}
		getLastState() {
			return this._lastStateName
		}
		dispose() {
			this._states = null
		}
	}
	class PanelShoeSelect extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelShoeSelect.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_spriteStage: "Laya.Sprite",
				cc_anchorCenter: "Laya.Box",
				cc_textName1: "Laya.Text",
				cc_textName2: "Laya.Text",
				cc_templetePartItem: "Laya.Sprite",
				cc_nodeSelect: "Laya.Sprite",
				cc_nodeLayout: "Laya.Image",
				cc_layoutShoe: "UIHVLayout",
				cc_nodeInfo: "Laya.Image",
				cc_nodeTry: "Laya.Sprite",
				cc_buttonAdvTry: "UIButton",
				cc_advTryText: "Laya.Text",
				cc_buttonTry: "UIButton",
				cc_tryText: "Laya.Text",
				cc_labelTryPrice: "Laya.Label",
				cc_tipText: "Laya.Text",
				cc_nodeResult: "Laya.Sprite",
				cc_spriteResult: "Laya.Sprite",
				cc_labelResult: "Laya.Label",
				cc_nodeFailTip: "Laya.Sprite",
				cc_spriteOkHead: "Laya.Sprite",
				cc_textOkTip: "Laya.Text",
				cc_buttonFailConfirm: "UIButton",
				cc_failText: "Laya.Text",
				cc_buttonClose: "UIButton",
				cc_roleHead: "Laya.Sprite"
			}, this.selectResult = {}, this.shoePartItems = [], this.index = 0
		}
		buildUi() {
			this.advTryText.text = mgrI18n.getText("panelShoeSelect.1"), this.tryText.text = mgrI18n.getText("panelShoeSelect.2"), this.tipText.text = mgrI18n.getText("panelShoeSelect.3"), this.textOkTip.text = mgrI18n.getText("panelShoeSelect.6"), this.failText.text = mgrI18n.getText("panelAdvCostDialog.2"), this.textName1.text = mgrI18n.getText("panelShoe.5"), this.textName2.text = mgrI18n.getText("panelShoe.6"), this.shoeAvatar = new ShoeAvatar, this.anchorCenter.addChild(this.shoeAvatar), this.shoeAvatar.pos(100, -600, !0), this.infoRichText = new SimpleRichText, this.nodeInfo.addChild(this.infoRichText).pos(225, 12, !0), this.infoRichText.stroke = 2, this.infoRichText.strokeColor = "#ffffff", this.infoRichText.align = "center", this.infoRichText.fontSize = 11, this.roleHead.visible = !1, this.nodeSelect.__originY = this.nodeSelect.y, this.nodeSelect.y += 400, this.templetePartItem.visible = !1, this.nodeTry.visible = !1, this.nodeResult.visible = !1, this.nodeFailTip.visible = !1, this.fsm = new SimpleFSM, this.fsm.registerState(0, this, this.enterSelectShoe), this.fsm.registerState(1, this, this.enterTryShoe), this.fsm.registerState(2, this, this.enterTryShoeAnim), this.fsm.registerState(3, this, this.enterTryResult), this.fsm.setNextState(0), Timer.callLoopFrame(1, this.fsm.update.bind(this.fsm), this), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.spineLianZi && this.spineLianZi.dispose(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"try_shoe" == t.advName && (GameStatistics.statisCommonEvent(2614), this.fsm.setNextState(2))
		}
		setSuit() {
			let t = this.index;
			this.index = (t + 1) % 8;
			let e = db.get_shoe_suit_db(t + 1 + "");
			this.shoeAvatar.setSole(e.soleParts), this.shoeAvatar.setVamp(e.vampParts), this.shoeAvatar.setDecoration(e.decorationParts), this.shoeAvatar.setFoot(e.nailParts, e.skirtParts)
		}
		updateList() {
			for (let t = 0; t < this.shoePartItems.length; t++) this.shoePartItems[t].setData(this.curShoePartType, this.datas[this.curShoePartType][t]);
			switch (this.infoRichText.color = "#ff61dc", this.curShoePartType) {
				case 1:
					this.infoRichText.text = mgrI18n.getText("panelShoeSelect.7");
					break;
				case 2:
					this.infoRichText.text = mgrI18n.getText("panelShoeSelect.8");
					break;
				case 3:
					this.infoRichText.text = mgrI18n.getText("panelShoeSelect.9");
					break;
				case 0:
					this.infoRichText.text = mgrI18n.getText("panelShoeSelect.10")
			}
		}
		onClickPartItem(t) {
			let e = db.get_shoe_suit_db(t.suitId);
			switch (this.selectResult[this.curShoePartType] = t.suitId, this.curShoePartType) {
				case 0:
					GameStatistics.statisCommonEvent(2612, 0), this.roleHead.visible = !0, this.roleHead.loadImage(e.head);
					let a = new Laya.Point(this.roleHead.x, this.roleHead.y),
						i = UiHelper.local2local(t.resNode, this.roleHead.parent);
					this.roleHead.pos(i.x, i.y, !0), this.roleHead.__effect = _G.poolManager.get(Particle, "131"), this.roleHead.__effect.setScale(1.5, 1.5, 1.5), this.roleHead.__effect.setParent(_G.effectScene), this.roleHead.__effect.setLayer(1), this.roleHead.__effect.play(), this.roleHead.__effect.followTarget(this.roleHead, _G.effectCamera), UiHelper.playScaleAndJump(this.roleHead, a, 1, 1, 1, () => {
						this.roleHead.__effect && (_G.poolManager.put(this.roleHead.__effect), this.roleHead.__effect = null)
					}), this.loadShoeResAndflyItemTo(e.nailParts.concat(e.skirtParts), () => {
						this.curShoePartType = 1, this.updateList()
					});
					break;
				case 1:
					GameStatistics.statisCommonEvent(2609, 0), this.loadShoeResAndflyItemTo(e.soleParts, () => {
						this.shoeAvatar.setSole(e.soleParts), this.curShoePartType = 2, this.updateList()
					}, t, e.soleIcon);
					break;
				case 2:
					GameStatistics.statisCommonEvent(2610, 0), this.loadShoeResAndflyItemTo(e.vampParts, () => {
						this.shoeAvatar.setVamp(e.vampParts), this.curShoePartType = 3, this.updateList()
					}, t, e.vampIcon);
					break;
				case 3:
					GameStatistics.statisCommonEvent(2611, 0), this.loadShoeResAndflyItemTo(e.decorationParts, () => {
						this.nodeLayout.visible = !1, this.shoeAvatar.setDecoration(e.decorationParts), this.fsm.setNextState(1)
					}, t, e.decorationIcon)
			}
		}
		loadShoeResAndflyItemTo(t, e, a, i) {
			let s = this.nodeLayout.y,
				n = () => {
					e(), cc.tween(this.nodeLayout, !0).delay(.3).to(.3, {
						y: s
					}, cc.OPTION.SINE_OUT).start()
				};
			(() => {
				cc.tween(this.nodeLayout, !0).delay(.1).to(.3, {
					y: s + 200
				}, cc.OPTION.SINE_OUT).start()
			})(), mgrShoe.openWaitRes(t, () => {
				if (a && i) {
					let t = UiHelper.getSelfGlobalPos(a.resNode),
						e = UiHelper.getSelfGlobalPos(this.shoeAvatar);
					e.y += 650, e.x -= 100, UiHelper.playImageScaleAndJump(i, t, e, null, () => {
						n(), mgrAlert.playParticleEffect("195", e, 2, 1, 1.4)
					})
				} else Timer.callLater(.8, n, this)
			})
		}
		enterSelectShoe() {
			this.datas = mgrShoe.randomShoeSuits(), this.curShoePartType = 0;
			let t = this.datas[this.curShoePartType];
			this.templetePartItem.y = 0;
			for (let e = 0; e < t.length; e++) {
				let t = new ShoeSuitPartItem(this.onClickPartItem.bind(this));
				t.createFromNode(UiHelper.cloneSprite(this.templetePartItem)), t.setParent(this.layoutShoe), this.shoePartItems.push(t)
			}
			this.templetePartItem.visible = !1, this.nodeTry.alpha = 0, this.nodeTry.visible = !1, this.nodeResult.visible = !1, this.nodeFailTip.visible = !1, this.updateList(), cc.tween(this.nodeSelect, !0).delay(.3).to(.3, {
				y: this.nodeSelect.__originY
			}, cc.OPTION.SINE_OUT).start()
		}
		enterTryShoe() {
			cc.tween(this.nodeSelect).to(.3, cc.PROP.ALPHA0).hide().start(), cc.tween(this.nodeTry).show().to(.3, cc.PROP.ALPHA1).start(), mgrAdv.checkActive("try_shoe") ? (mgrAdv.statisVideoShow("try_shoe"), UiHelper.playBreathe(this.buttonAdvTry.node)) : (this.buttonAdvTry.node.visible = !1, this.buttonTry.node.x = 0)
		}
		enterTryShoeAnim() {
			this.buttonClose.node.visible = !1, this.nodeTry.visible = !1, cc.tween(this.nodeTry, !0).to(.3, cc.PROP.ALPHA0).hide().start(), mgrAlert.openResWait(db.get_spine_db(db.SPINE_DB_ID.ui_lianzi).skeletonData, RES_TYPE.BUFFER, () => {
				this.spineLianZi = new SpineNode(db.SPINE_DB_ID.ui_lianzi), this.spineLianZi.play("l1", !1), this.spineLianZi.setStopListener(this, () => {
					this.spineLianZi.play("l2", !1), Timer.callLater(.3, () => {
						let t = this.selectResult[0],
							e = this.selectResult[2] == t && this.selectResult[3] == t,
							a = db.get_shoe_suit_db(t);
						this.shoeAvatar.setFoot(a.nailParts, a.skirtParts), e ? this.shoeAvatar.playTrySucAnim(() => {
							this.fsm.setNextState(3, e)
						}) : this.shoeAvatar.playTryFailAnim(() => {
							this.fsm.setNextState(3, e)
						})
					}, this)
				}, !0)
			})
		}
		enterTryResult(t) {
			let e = db.get_shoe_suit_db(this.selectResult[0]),
				a = t ? "res/ui/pnl_shoe_select/img_yes.png" : "res/ui/pnl_shoe_select/img_no.png";
			this.spriteResult.loadImage(a), this.nodeResult.visible = !0, this.labelResult.alpha = 0, this.labelResult.text = t ? mgrI18n.getText("panelShoeSelect.4") : mgrI18n.getText("panelShoeSelect.5"), cc.tween(this.labelResult).to(.3, cc.PROP.ALPHA1).start(), UiHelper.playStampEffect(this.spriteResult, () => {
				if (GameStatistics.statisCommonEvent(2622, t ? 0 : 1), t) Timer.callLater(.3, () => {
					mgrSdk.stopRecordVideo(), mgrAlert.openPanelLoading(UI_NAME.PanelShoeSelectResult, t, this.close.bind(this))
				}, this);
				else {
					cc.tween(this.nodeResult).to(.1, cc.PROP.ALPHA0).start();
					let t = e.soleParts.concat(e.vampParts).concat(e.decorationParts);
					mgrShoe.openWaitRes(t, () => {
						let t = new ShoeAvatar;
						this.nodeFailTip.addChild(t), t.setSole(e.soleParts), t.setVamp(e.vampParts), t.setDecoration(e.decorationParts), t.pos(230, -30, !0).scale(.6, .6, !0), this.nodeFailTip.visible = !0, this.nodeFailTip.scale(0, 0, !0), this.spriteOkHead.loadImage(e.head), cc.tween(this.nodeFailTip).to(.4, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start()
					}), mgrSdk.stopRecordVideo()
				}
			}, .7)
		}
		on_click_buttonClose() {
			if (0 == this.fsm.getState()) switch (this.curShoePartType) {
				case 1:
					GameStatistics.statisCommonEvent(2609, 1);
					break;
				case 2:
					GameStatistics.statisCommonEvent(2610, 1);
					break;
				case 3:
					GameStatistics.statisCommonEvent(2611, 1);
					break;
				case 0:
					GameStatistics.statisCommonEvent(2612, 1)
			}
			this.close()
		}
		on_click_buttonAdvTry() {
			mgrAdv.statisVideoClick("try_shoe"), mgrAdv.dispatchAdv("try_shoe", null, !0)
		}
		on_click_buttonTry() {
			BaseFacade.mItem.subItem("1000", 300, 46) ? (GameStatistics.statisCommonEvent(2613), this.fsm.setNextState(2)) : mgrAlert.alertNotEnough("1000")
		}
		on_click_buttonFailConfirm() {
			mgrAlert.openPanelLoading(UI_NAME.PanelShoeSelectResult, !1, this.close.bind(this))
		}
	}
	class ShoeSuitPartItem extends ViewBase {
		onCreateComplete() {
			this.icon = this.getChild("icon"), UiHelper.addClickEvent(this.resNode, () => {
				this.context && this.context(this)
			})
		}
		setData(t, e) {
			let a = db.get_shoe_suit_db(e);
			switch (t) {
				case 1:
					this.icon.loadImage(a.soleIcon);
					break;
				case 2:
					this.icon.loadImage(a.vampIcon);
					break;
				case 3:
					this.icon.loadImage(a.decorationIcon);
					break;
				case 0:
					this.icon.loadImage(a.head);
					break;
				default:
					console.error("非法鞋子部件", t)
			}
			this.suitId = e
		}
	}
	class ContractAnim extends Laya.Sprite {
		constructor(t) {
			super(), this.oldContractIdx = null, this.bStart = !1, this.context = t
		}
		getResLoader() {
			let t = new ResLoader;
			if (t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHENTI_COME).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.FACE_COME).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.COME_ZHANSHI_LC).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_ZHANSHI_LC).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.FACE_ZHANSHI_LC).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHENTI_IDLE).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.FACE_IDLE).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.GEMSTONE_COME).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.GEMSTONE_IDLE).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.GEMSTONE_ZHANSHI).path), t.addModel(db.get_model_db(db.MODEL_DB_ID.shexiangji_come).resPath), t.addModel(db.get_model_db(db.MODEL_DB_ID.come).resPath), t.addModel(db.get_model_db(db.MODEL_DB_ID.wawahe).resPath), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.WAWAHE_COME01).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.WAWAHE_COME02).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.WAWAHE_COME03).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME01).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME02).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_COME03).path), mgrGame.contractIndex != this.context.nextContract) {
				t.addModel(db.get_model_db(db.MODEL_DB_ID.shexiangji_jiechu).resPath), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.WAWAHE_JIECHU).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHEXIANGJI_JIECHU).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.GEMSTONE_JIECHU).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.SHENTI_JIECHU).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.FACE_JIECHU).path);
				let e = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
				t.addModel(db.get_model_db(e).resPath)
			}
			let e = db.get_role_contract_db(this.context.nextContract).gemstoneModelId;
			return t.addModel(db.get_model_db(e).resPath), t
		}
		destroy() {
			mgrGuide.sendMsgKey("CLICK_CONTRACT_CIRCLE"), Laya.stage.offAllCaller(this), this.clearWawahe(), this.clearOld(), this.clickFinger && _G.poolManager.put(this.clickFinger), super.destroy(!0)
		}
		clearWawahe() {
			this.wawahe && (this.wawahe.dispose(), this.wawahe = null)
		}
		clearOld() {
			this.oldAvatar && (this.oldAvatar.destroy(), this.oldAvatar = null), this.oldShexiangji && (this.oldShexiangji.dispose(), this.oldShexiangji = null), this.oldWawahe && (this.oldWawahe.dispose(), this.oldWawahe = null), this.oldGemstone && (_G.poolManager.put(this.oldGemstone), this.oldGemstone = null), this.oldRoom && (this.oldRoom.dispose(), this.oldRoom = null)
		}
		startAnim() {
			if (this.bStart) return;
			this.bStart = !0;
			let t = this.getResLoader();
			this.oldContractIdx = mgrGame.contractIndex, mgrGame.contractIndex != this.context.nextContract && (this.oldParts = Tools.deepCopy(mgrPart.partsWear)), mgrGame.contractIndex = this.context.nextContract, mgrPart.addPartResList(mgrPart.partsWear, t, !0), mgrAlert.openWait(t, () => {
				_G.sendMsg("START_CONTRACT"), this.oldContractIdx == mgrGame.contractIndex ? (this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))) : (this.oldRoom = new RoomBath, this.oldRoom.load(this.onOldSceneLoaded.bind(this)))
			})
		}
		onOldSceneLoaded() {
			this.addChild(this.oldRoom.scene), this.oldRoom.changeToMain(), this.oldRoom.skybox.active = !0, this.oldRoom.camera.active = !1, this.oldRoom.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.oldRoom.mapNode.transform, "localScale", 3, 3, 3), this.oldAvatar = new RoleAvatar(this.oldParts), this.oldRoom.root.addChild(this.oldAvatar), this.oldWawahe = new GModel(db.MODEL_DB_ID.wawahe), this.oldWawahe.create(), this.oldWawahe.initAnimator(), this.oldWawahe.setParent(this.oldRoom.root), this.oldWawahe.hide(), this.oldShexiangji = new GModel(db.MODEL_DB_ID.shexiangji_jiechu), this.oldShexiangji.create(), this.oldShexiangji.setParent(this.oldRoom.root), this.oldShexiangji.callIfLoaded(() => {
				let t = this.oldShexiangji.findChild("camera");
				t.nearPlane = .01, t.fieldOfView = 60;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular
			});
			let t = db.get_role_contract_db(this.oldContractIdx).gemstoneModelId;
			this.oldGemstone = _G.poolManager.get(GModel, t), this.oldGemstone.initAnimator(), this.oldGemstone.getAnimator().cullingMode = Laya.Animator.CULLINGMODE_ALWAYSANIMATE, this.oldGemstone.setParent(this.oldRoom.root);
			let e = new AnimatorFixedPlayer;
			e.addModelAnim(this.oldWawahe, MODEL_ANIM.WAWAHE_JIECHU), e.addModelAnim(this.oldShexiangji, MODEL_ANIM.SHEXIANGJI_JIECHU), e.addModelAnim(this.oldAvatar.baseBody, MODEL_ANIM.SHENTI_JIECHU), e.addModelAnim(this.oldAvatar.baseFace, MODEL_ANIM.FACE_JIECHU), e.addTimeCallback(110 / 30 / e.duration, () => {
				this.oldWawahe.show()
			}), e.addTimeCallback(.78, () => {
				this.onSwitchComplete(() => {
					this.clearOld(), e.dispose()
				})
			}), e.addTimeCallback(1, () => {}), e.play();
			let a = new AnimatorFixedPlayer;
			a.addModelAnim(this.oldGemstone, MODEL_ANIM.GEMSTONE_JIECHU), a.addTimeCallback(80 / 30 / a.duration, () => {
				this.oldGemstone.hide()
			}), a.play()
		}
		onSwitchComplete(t) {
			UiHelper.playBlackFlash(1, () => {
				t(), this.room = new RoomBath, this.room.load(this.onSceneLoaded.bind(this))
			})
		}
		onSceneLoaded() {
			this.addChild(this.room.scene), this.room.changeToMain(), this.room.skybox.active = !0, this.room.camera.active = !1, this.room.mapNode.active = !1, UiHelper.setTransformVec3Prop(this.room.mapNode.transform, "localScale", 3, 3, 3), this.wawahe = new GModel(db.MODEL_DB_ID.wawahe), this.wawahe.create(), this.wawahe.initAnimator(), this.wawahe.setParent(this.room.root), this.shexiangji = new GModel(db.MODEL_DB_ID.shexiangji_come), this.shexiangji.create(), this.shexiangji.setParent(this.room.root), this.shexiangji.callIfLoaded(() => {
				let t = this.shexiangji.findChild("camera");
				t.nearPlane = .01;
				let e = t.addChild(new Laya.DirectionLight);
				e.transform.localRotationEuler = PanelBase3D.defaultLightEular, e.color = new Laya.Vector3(1, 1, 1), e.transform.localRotationEuler = PanelBase3D.defaultLightEular, this.shexiangji_effect = this.shexiangji.findChild("e_wawahe_come"), this.shexiangji_effect && (this.shexiangji_effect.active = !1)
			});
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME01), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME01), t.addTimeCallback(1, () => {
				let t = new AnimatorFixedPlayer;
				t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME02), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME02), t.addTimeCallback(1, () => {
					this.clickFinger = _G.poolManager.get(Particle, "135"), this.clickFinger.play(), this.clickFinger.setParent(mgrAlert.scene3dfont);
					let t = UiHelper.global2camera(new Laya.Vector2(_G.canvasWidth / 2 + 100, _G.canvasHeight / 2 - 50), mgrAlert.camerafont);
					this.clickFinger.setPosition(t), Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onTouchBox)
				}), t.play()
			}), t.play()
		}
		playRoleAnim() {
			this.avatar = new RoleAvatar, this.room.root.addChild(this.avatar);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.avatar.baseBody, MODEL_ANIM.SHENTI_COME), t.addModelAnim(this.avatar.baseFace, MODEL_ANIM.FACE_COME), t.addTimeCallback(1, this.onRoleAnimFinish.bind(this)), t.play()
		}
		playGemstone() {
			let t = db.get_role_contract_db(mgrGame.contractIndex).gemstoneModelId;
			this.gemstone = _G.poolManager.get(GModel, t), this.gemstone.initAnimator(), this.gemstone.setParent(this.room.root), this.gemstone.setPosition(0, .05, 0), this.gemstone.playAnims(0, [MODEL_ANIM.GEMSTONE_COME, MODEL_ANIM.GEMSTONE_ZHANSHI], !0), this.gemstone.initPaint(), this.gemstone.callIfLoaded(() => {
				let t = this.gemstone.getChildAt(0);
				cc.tween(this).to(1.3, cc.PROP.EMPTY, {
					onUpdate(e, a) {
						t.transform.scale = t.transform.scale
					}
				}).start()
			})
		}
		onWawaheAnimFinish() {
			this.clearWawahe()
		}
		onRoleAnimFinish() {
			this.avatar.playAnimation(MODEL_ANIM.SHENTI_IDLE), Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onTouchCircle), this.clickFinger.show(), this.clickFinger.play(), mgrGuide.dispatchGuide(GUD_EVENT.START_CONTRACT2)
		}
		playGotoRoom() {
			this.shexiangji && (this.shexiangji.findChild("e_wawahe_come").active = !1, mgrPanel.openPanel(UI_NAME.PanelMain, {
				data: {
					room: this.room,
					avatar: this.avatar,
					shexiangji: this.shexiangji,
					gemstone: this.gemstone
				},
				bSwitch: !0
			}, !1, () => {
				this.room.scene.removeSelf(), this.context.finishCallback && this.context.finishCallback()
			}))
		}
		checkTouch() {
			return Math.abs(Laya.stage.mouseX - _G.canvasWidth / 2) < 200 && Math.abs(Laya.stage.mouseY - _G.canvasHeight / 2 - 60) < 200
		}
		onTouchBox() {
			if (!this.checkTouch()) return;
			this.clickFinger.stop(), this.clickFinger.hide(), Laya.stage.offAllCaller(this), this.shexiangji_effect && (this.shexiangji_effect.active = !0);
			let t = new AnimatorFixedPlayer;
			t.addModelAnim(this.wawahe, MODEL_ANIM.WAWAHE_COME03), t.addModelAnim(this.shexiangji, MODEL_ANIM.SHEXIANGJI_COME03), t.addTimeCallback(3 / t.duration, this.playGemstone.bind(this)), t.addTimeCallback(1, this.onWawaheAnimFinish.bind(this)), t.play(), this.playRoleAnim()
		}
		onTouchCircle() {
			this.checkTouch() && (mgrGuide.sendMsgKey("CLICK_CONTRACT_CIRCLE"), Laya.stage.offAllCaller(this), this.clickFinger.stop(), this.clickFinger.hide(), this.playGotoRoom())
		}
	}
	class PanelShoeSelectResult extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelShoeSelectResult.json", this.panelStyle = 1, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_textName1: "Laya.Text",
				cc_textName2: "Laya.Text",
				cc_spriteRole: "Laya.Sprite",
				cc_spritePieces: "Laya.Sprite",
				cc_piece1: "Laya.Sprite",
				cc_piece2: "Laya.Sprite",
				cc_piece3: "Laya.Sprite",
				cc_piece4: "Laya.Sprite",
				cc_spriteDialog: "Laya.Sprite",
				cc_textDialog: "Laya.Label",
				cc_buttonContinue: "UIButton",
				cc_labelBtnContinue: "Laya.Label",
				cc_buttonContract: "UIButton",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			this.textName1.text = mgrI18n.getText("panelShoe.5"), this.textName2.text = mgrI18n.getText("panelShoe.6");
			let t = this.spriteRole.x;
			this.spriteRole.x = t - 350, cc.tween(this.spriteRole).to(.4, {
				x: t
			}, cc.OPTION.BACK_OUT).start(), t = this.spritePieces.x, this.spritePieces.x = t + 350, cc.tween(this.spritePieces).to(.4, {
				x: t
			}, cc.OPTION.BACK_OUT).start(), this.spriteDialog.scale(0, 0, !0), cc.tween(this.spriteDialog).delay(.4).to(.4, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), this.buttonContinue.node.visible = !1, this.buttonContract.node.visible = !1, UiHelper.playBreathe(this.buttonContract.node);
			for (let t = 1; t <= 4; t++) mgrShoe.checkPieceUnlock(t - 1) && (this["piece" + t].visible = !1);
			if (this.context) {
				let t = mgrShoe.randomAddPiece(); - 1 == t ? (this.labelBtnContinue.text = mgrI18n.getText("panelShoeSelectResult.4"), this.buttonContinue.node.visible = !0, this.buttonContract.node.visible = !0) : Timer.callLater(.6, this.playPieceAnim.bind(this, t), this), this.textDialog.text = mgrI18n.getText("panelShoeSelectResult.1")
			} else {
				let t = mgrShoe.checkPieceUnlock();
				this.labelBtnContinue.text = mgrI18n.getText("panelShoeSelectResult.3"), this.buttonContinue.node.x = t ? this.buttonContinue.node.x : 0, this.buttonContinue.node.visible = !0, this.buttonContract.node.visible = t, this.textDialog.text = mgrI18n.getText("panelShoeSelectResult.2")
			}
			mgrSdk.isVideoShareable && mgrAlert.openPanelLoading(UI_NAME.PanelShare, {
				shareIdx: 13,
				desc: "快让朋友们看看你选的水晶鞋吧！",
				descWithoutShare: "水晶鞋需要找到它的主人！"
			})
		}
		dispose() {
			this.contractAnim && this.contractAnim.destroy(), super.dispose()
		}
		playPieceAnim(t) {
			let e = this["piece" + (t + 1)];
			cc.tween(e).parallel(cc.tween().to(.4, cc.PROP.SCALE1_2), cc.tween().delay(.2).to(.2, cc.PROP.ALPHA0)).call(this.onPieceAnimFinish.bind(this)).start()
		}
		onPieceAnimFinish() {
			mgrShoe.checkPieceUnlock() ? (this.labelBtnContinue.text = mgrI18n.getText("panelShoeSelectResult.4"), this.playAllUnlockEffect(), this.buttonContinue.node.visible = !0, this.buttonContract.node.visible = !0) : (this.labelBtnContinue.text = mgrI18n.getText("panelShoeSelectResult.3"), this.buttonContinue.node.visible = !0, this.buttonContinue.node.x = 0, this.buttonContract.node.visible = !1)
		}
		playAllUnlockEffect() {}
		playContractAnim() {
			GameStatistics.statisCommonEvent(2621), this.contractAnim = new ContractAnim({
				nextContract: SHOE_UNLOCK_CONTRACT_IDX,
				finishCallback: this.onContractFinish.bind(this)
			}), this.resNode.addChild(this.contractAnim), this.contractAnim.startAnim(), this.buttonContinue.interactable = !1
		}
		onContractFinish() {
			this.contractAnim.destroy(), this.close()
		}
		on_click_buttonContinue() {
			mgrShoe.checkPieceUnlock() ? GameStatistics.statisCommonEvent(2616) : GameStatistics.statisCommonEvent(2615), this.close(), mgrAlert.openPanelLoading(UI_NAME.PanelShoeSelect)
		}
		on_click_buttonContract() {
			mgrShoe.checkPieceUnlock() && (this.buttonContract.interactable = !1, mgrGame.contractIndex == SHOE_UNLOCK_CONTRACT_IDX ? mgrAlert.alertDialog(mgrI18n.getText("panelContract.11"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				this.playContractAnim()
			}, () => {
				this.buttonContract.interactable = !0
			}) : mgrAlert.alertDialog(mgrI18n.getText("panelContract.12"), mgrI18n.getText("schoolYearbookItem.2"), () => {
				this.playContractAnim()
			}, () => {
				this.buttonContract.interactable = !0
			}))
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class ShopItemCurrency extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/ShopItemCurrency.json", this._exportNodeInfo = {
				cc_icon: "Laya.Image",
				cc_buttonAdv: "UIButton",
				cc_buttonBuy: "UIButton",
				cc_price: "Laya.Text",
				cc_count: "Laya.Label",
				cc_activeTip: "Laya.Label"
			}, this.create()
		}
		onCreateComplete() {}
		dispose() {
			super.dispose()
		}
		setPayId(t) {
			if (!this.callable) return this.safeCall(this.setPayId, t);
			this.payId = t;
			let e = db.get_pay_db(t);
			this.count.text = "*" + e.getCount, this.icon.skin = e.icon, BaseFacade.mPay.getActive(t) ? (1 == e.gid ? "1004" == e.costItemId ? (this.buttonAdv.node.visible = !0, this.buttonBuy.node.visible = !1, "1001" == e.getItemId && (e.getCount = mgrOffline.offlinePerSecond * db.game_cnf.free_coin_time | 0, this.count.text = e.getCount + "")) : (this.buttonAdv.node.visible = !1, this.buttonBuy.node.visible = !0, "1001" == e.getItemId && (e.getCount = mgrOffline.offlinePerSecond * db.game_cnf.diamond_coin_time | 0, this.count.text = e.getCount + ""), this.price.text = `${e.costCount}`) : (this.buttonAdv.node.visible = !1, this.buttonBuy.node.visible = !0, this.price.text = `${e.costCount}`), this.activeTip.visible = !1) : (this.buttonAdv.node.visible = !1, this.buttonBuy.node.visible = !1, this.activeTip.visible = !0)
		}
		on_click_buttonAdv() {
			mgrAdv.statisVideoClick("shop_item"), mgrAdv.dispatchAdv("shop_item", this.payId, !0)
		}
		on_click_buttonBuy() {
			this.activeTip.visible ? mgrAlert.alertDialog(mgrI18n.getText("shopItemCurrency.4")) : _G.sendMsg("UI_CLICK_SHOP_ITEM", this.payId)
		}
	}
	class ShopItemSpe extends ViewBase {
		constructor(t) {
			super(), this.resourceName = "res/prefab/ShopItemSpe.json", this._exportNodeInfo = {
				cc_bg: "Laya.Sprite",
				cc_icon: "Laya.Sprite",
				cc_stars: "UIHVLayout",
				cc_costIcon: "Laya.Sprite",
				cc_price: "Laya.Text",
				cc_tipText: "Laya.Text"
			}, this.offset = 0, this.offset = t, this.create()
		}
		onCreateComplete() {
			this.offset && (this.bg.x = 8.5, this.bg.scale(1.2, 1.2, !0)), this.bg.scale(.9, .9, !0), UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this))
		}
		setPayId(t) {
			if (!this.callable) return this.safeCall(this.setPayId, t);
			if (this.payId = t, !t) return;
			let e = db.get_pay_db(t);
			this.icon.loadImage(e.icon);
			let a = db.get_item_db(e.getItemId);
			UiHelper.setStars(this.stars, a.quality, 5), BaseFacade.mPay.getActive(t) ? (this.price.visible = !0, this.costIcon.visible = !0, this.tipText.visible = !1, this.costIcon.loadImage(db.get_item_db(e.costItemId).icon), this.price.text = `*${e.costCount}`) : (this.price.visible = !1, this.costIcon.visible = !1, this.tipText.visible = !0)
		}
		onClick() {
			this.payId && BaseFacade.mPay.getActive(this.payId) && _G.sendMsg("UI_CLICK_SHOP_ITEM", this.payId)
		}
	}
	class PanelShop extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelShop.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_bgImage: "Laya.Image",
				cc_spriteShop: "Laya.Sprite",
				cc_toggle1: "UIToggle",
				cc_toggle2: "UIToggle",
				cc_scrollView1: "ReuseScrollList",
				cc_scrollView2: "ReuseScrollList",
				cc_buttonClose: "UIButton",
				cc_advNode: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_shop", "banner_shop")
		}
		buildUi() {
			this.initUi(), mgrI18n.trySetI18nImage(this.spriteShop, "pnl_shop_02.png"), this.context && 2 == this.context.curToggle ? (this.on_click_toggle2(), this.toggle2.check(!0)) : (this.on_click_toggle1(), this.toggle1.check(!0)), this.registerMsg({
				UI_CLICK_SHOP_ITEM: this.onMsgClickShopItem.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEventOnce(7041), GameStatistics.statisCommonEvent(7201)
		}
		dispose() {
			this.stopProcMsg(), this.nativeAdv && this.nativeAdv.dispose(), this.scrollView1 && this.scrollView1.clearAllItems(), this.scrollView2 && this.scrollView2.clearAllItems(), this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgClickShopItem(t) {
			BaseFacade.mPay.buyGoods(t, (e, a) => {
				if (e) mgrAlert.alertItems(a), this.updateList();
				else {
					let e = db.get_pay_db(t);
					mgrAlert.alertNotEnough(e.costItemId)
				}
			}, 25)
		}
		onMsgAdvShowSuc(t) {
			"shop_item" == t.advName && BaseFacade.mPay.buyGoods(t.params, (t, e) => {
				t && (mgrAlert.alertItems(e), this.updateList())
			}, 26, !0)
		}
		initUi() {
			this.scrollView1.onItemCreate = function() {
				let t = new ShopItemCurrency;
				return t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}, this.scrollView1.onItemChange = ((t, e) => {
				t.setPayId(this.payIds[e])
			}), this.scrollView2.onItemCreate = function() {
				let t = new ShopItemSpe(0);
				return t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}, this.scrollView2.onItemChange = ((t, e) => {
				t.setPayId(this.payIds[e])
			}), this.nativeAdv = new WidgetNativeAdv("emb_shop", this.advNode, () => {
				this.bgImage.height = 830
			})
		}
		updateList() {
			1 == this.curToggle ? this.on_click_toggle1() : this.on_click_toggle2()
		}
		on_click_toggle1() {
			if (this.curToggle = 1, this.payIds = BaseFacade.mPay.getPays(1), mgrAdv.getActive("shop_item")) mgrAdv.statisVideoShow("shop_item");
			else
				for (let t = this.payIds.length - 1; t >= 0; t--) {
					"1004" == db.get_pay_db(this.payIds[t]).costItemId && this.payIds.splice(t, 1)
				}
			this.scrollView1.updateList(this.payIds.length), this.scrollView1.node.visible = !0, this.scrollView2.node.visible = !1
		}
		on_click_toggle2() {
			this.curToggle = 2, this.payIds = BaseFacade.mPay.getPays(2), this.scrollView2.updateList(this.payIds.length), this.scrollView2.node.visible = !0, this.scrollView1.node.visible = !1
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelShopLvup extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 0, this.resourceName = "res/ui/PanelShopLvup.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_spriteLiveShop: "Laya.Sprite",
				cc_scrollView1: "ReuseScrollList",
				cc_buttonClose: "UIButton",
				cc_barMaskExp: "UIBarMask",
				cc_barValue: "Laya.Label",
				cc_desc: "Laya.Label",
				cc_buttonLvup: "UIButton",
				cc_catLevel: "Laya.Label",
				cc_textTips: "Laya.Text"
			}, this.instOrBanner = new AdvInstOrBanner("enter_cat_shop", "banner_cat_shop")
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonLvup.node, "pnl_shop_01.png"), mgrI18n.trySetI18nImage(this.spriteLiveShop, "pnl_shop_03.png"), this.textTips.text = mgrI18n.getText("panelShopLvup.5"), this.scrollView1.onItemCreate = function() {
				let t = new ShopItemCurrency;
				return t.setAlpha(0), t.runTween(cc.tween().to(.2, cc.PROP.ALPHA1)), t
			}, this.scrollView1.onItemChange = ((t, e) => {
				t.setPayId(this.payIds[e])
			}), this.updateList(), this.updatelvState(!1), this.registerMsg({
				UI_CLICK_SHOP_ITEM: this.onMsgClickShopItem.bind(this),
				[BASE_MSG.UP_STATE_CHANGE]: this.onMsgUpStateChange.bind(this),
				[BASE_MSG.PAY_SUC]: this.onMsgPaySuc.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.scrollView1 && this.scrollView1.clearAllItems(), this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgClickShopItem(t) {
			BaseFacade.mPay.buyGoods(t, (e, a) => {
				if (e) BaseFacade.mGoal.commit(ACTION_ID.BUY_CAT_SHOP), GameStatistics.statisCommonEventOnce(7031), mgrAlert.alertItems(a, null, () => {
					let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2),
						e = this.barMaskExp.node.localToGlobal(new Laya.Point(this.barMaskExp.progressPosition, 0), !1);
					for (let a = 0; a < 3; a++) UiHelper.playBezierTo("res/icon/star.png", t, e, 1 + .05 * a, 1, () => {
						this.destroyed || this.updatelvState(!0)
					})
				}), mgrCat.addExp(), this.updateList();
				else {
					let e = db.get_pay_db(t);
					mgrAlert.alertNotEnough(e.costItemId)
				}
			}, 25)
		}
		onMsgUpStateChange(t) {
			"cat" == t.itemId && (this.updateList(), this.updatelvState(!1))
		}
		onMsgPaySuc() {
			this.updateList()
		}
		onMsgAdvShowSuc(t) {
			"shop_item" == t.advName && BaseFacade.mPay.buyGoods(t.params, (t, e) => {
				t && (BaseFacade.mGoal.commit(ACTION_ID.BUY_CAT_SHOP), mgrAlert.alertItems(e), this.updateList())
			}, 26, !0)
		}
		updateList() {
			this.payIds = mgrCat.getPays(), this.scrollView1.updateList(this.payIds.length)
		}
		updatelvState(t) {
			let e = mgrCat.catLevel;
			if (this.desc.text = `${mgrI18n.getText("panelShopLvup.1")}${e}`, mgrCat.isMax) t ? this.barMaskExp.progressTo(1) : this.barMaskExp.progress = 1, this.barValue.text = "", this.catLevel.text = mgrI18n.getText("panelShopLvup.2");
			else {
				let e = BaseFacade.mItem.getItemCount("cat_exp"),
					a = BaseFacade.mUp.getUpDb("cat");
				t ? this.barMaskExp.progressTo(e / a.reqCnt1) : this.barMaskExp.progress = e / a.reqCnt1, this.barValue.text = `${e}/${a.reqCnt1}`, this.catLevel.text = `${mgrI18n.getText("panelShopLvup.3")}${mgrCat.catLevel}`
			}
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonLvup() {
			mgrCat.isMax ? mgrAlert.alertDialog(mgrI18n.getText("panelShopLvup.4")) : mgrAlert.openPanelLoading(UI_NAME.PanelCatLvup)
		}
	}
	class PanelSign extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelSign.json", this.panelLayer = PANEL_LAYER.UI, this.panelStyle = 0, this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_roleSprite: "Laya.Sprite",
				cc_bgPnl: "Laya.Sprite",
				cc_line0: "Laya.Image",
				cc_item0: "Laya.Sprite",
				cc_line1: "Laya.Image",
				cc_item1: "Laya.Sprite",
				cc_line2: "Laya.Image",
				cc_item2: "Laya.Sprite",
				cc_line3: "Laya.Image",
				cc_item3: "Laya.Sprite",
				cc_line4: "Laya.Image",
				cc_item4: "Laya.Sprite",
				cc_spriteGetParent: "Laya.Sprite",
				cc_buttonGrayGet: "UIButton",
				cc_btnGrayGetText: "Laya.Label",
				cc_buttonGet: "UIButton",
				cc_btnGetText: "Laya.Label",
				cc_buttonAdv: "UIButton",
				cc_advText: "Laya.Text",
				cc_countDown: "Laya.Label",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_sign", "banner_sign"), this.signItems = [], this.isShowAdv = !1, this.smode = !1, this.grayBtnX = 0
		}
		buildUi() {
			this.btnGetText.text = mgrI18n.getText("panelOffline.1"), this.btnGrayGetText.text = mgrI18n.getText("panelSign.1"), this.advText.text = mgrI18n.getText("panelSign.3"), mgrI18n.trySetI18nImage(this.bgPnl, "pnl_sign_01.png");
			let t = mgrSign.getDailyItems();
			this.smode = 0 != db.cop.b_sign_delay_mode, console.log("QT_SIGNA", this.smode), this.smode || (this.spriteGetParent.scaleX = .8, this.spriteGetParent.scaleY = .8), this.grayBtnX = -130, this.buttonGrayGet.node.visible = !1;
			for (let e = 0; e < 5; e++) {
				let a = this["item" + e],
					i = new SignItem;
				this.signItems.push(i), i.createFromNode(a), i.fillItem(t[e][0], t[e][1])
			}
			this.updateItems(!0), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				[BASE_MSG.ADV_SHOW_FAIL]: this.onMsgAdvShowFail.bind(this),
				SIGN_REFRESH_ITEM: this.onMsgRefreshItem.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEvent(7301)
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.signItems && (this.signItems.forEach(function(t) {
				t.dispose()
			}), this.signItems = null), super.dispose(), mgrGame.tryOpenReview()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onDialogOpenAnim(t) {
			this.mask.alpha = 0, cc.tween(this.mask).to(.3, cc.PROP.ALPHA1).start(), this.roleSprite.x = -800, cc.tween(this.roleSprite).delay(.4).to(.4, {
				x: -192
			}, cc.OPTION.BACK_OUT).start();
			var e = [],
				a = [];
			for (let t = 0; t < 5; t++) e.push(this["line" + t].height), this["line" + t].height = 0, this["item" + t].scale(0, 0, !0), a.push(this["item" + t].y), this["item" + t].y = 0;
			var i = [.4, .5, .2, .6, 0];
			this.bgPnl.x = -1050, this.buttonGet.node.alpha = 0, this.buttonGet.node.scale(0, 0, !0), this.buttonAdv.node.scale(0, 0, !0), this.buttonGrayGet.node.scale(0, 0, !0), cc.tween(this.bgPnl).to(.4, {
				x: -384
			}, cc.OPTION.SINE_OUT).delay(.4).call(() => {
				for (let t = 0; t < 5; t++) {
					let s = Mathf.lerpFromInverseLerp(.2, .5, 0, 200, e[t]);
					cc.tween(this["line" + t]).delay(i[t]).to(s, {
						height: e[t]
					}, cc.OPTION.BACK_OUT).start();
					let n = this["item" + t];
					cc.tween(n).delay(i[t]).to(s, {
						scaleX: 1,
						scaleY: 1,
						y: a[t]
					}, cc.OPTION.BACK_OUT).call(() => {
						let t = new Laya.Point(40, 36);
						n.localToGlobal(t, !1);
						let e = this.addEffect("145"),
							a = new Laya.Vector3(t.x, t.y, 0);
						e.setPosition(this.global2camer(a, a)), e.play()
					}).start()
				}
			}).delay(1.2).call(() => {
				db.cop.b_adv_full_screen && UiHelper.addClickEvent(this.mask, this.onClickMask.bind(this), null, .5, !1), cc.tween(this.buttonGet.node).to(.3, cc.PROP.ALPHA1, cc.OPTION.BACK_OUT).start(), cc.tween(this.buttonGet.node).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), cc.tween(this.buttonGrayGet.node).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), cc.tween(this.buttonAdv.node).to(.3, cc.PROP.SCALE1, cc.OPTION.BACK_OUT).start(), t && t()
			}).start()
		}
		onOpenComplete() {
			super.onOpenComplete();
			let t = this.addEffect("118");
			t.align(this.bg, this.cameraEffect), t.play()
		}
		onMsgAdvShowSuc(t) {
			"sign_adv" == t.advName && (4 == mgrSign.signData.index ? mgrSign.getAward(!1) : mgrSign.getAward(!0), this.updateItems(!1))
		}
		onMsgAdvShowFail(t) {
			"sign_adv" == t.advName && (this.isShowAdv = !1)
		}
		onMsgRefreshItem() {
			this.updateItems(!1)
		}
		onClickMask() {
			console.log("QT_ sign mask  " + this.buttonAdv.node.visible), this.buttonAdv.node.visible && this.on_click_buttonAdv()
		}
		updateItems(t) {
			let e = mgrSign.signData.index,
				a = mgrSign.signData.nextTime;
			for (let t = 0; t < 5; t++) {
				let i = this.signItems[t];
				t == e ? a <= Timer.time ? i.fillCanGet() : i.fillCountDown(a - Timer.time) : t < e ? i.fillGetted() : i.fillEmpty()
			}
			let i = mgrAdv.getActive("sign_adv"),
				s = mgrSign.canGetAward();
			if (!this.smode) return this.countDown.text = "", this.buttonGrayGet.node.visible = !1, this.buttonAdv.node.x = 0, this.buttonGet.node.x = 0, this.buttonGet.gray = !1, this.buttonGrayGet.node.x = this.grayBtnX - 40, void(e > 4 ? (this.buttonGet.node.visible = !0, this.buttonAdv.node.visible = !1, this.buttonGet.gray = !0, this.btnGetText.text = mgrI18n.getText("panelSign.2"), this.spriteGetParent.scaleX = 1, this.spriteGetParent.scaleY = 1) : 4 == e ? (this.buttonAdv.node.visible = i, i ? (this.buttonGet.node.visible = !1, this.advText.text = mgrI18n.getText("panelSign.3"), mgrAdv.statisVideoShow("sign_adv")) : (this.buttonGet.node.visible = s, this.buttonGrayGet.node.visible = !s, !s && (this.btnGrayGetText.text = mgrI18n.getText("panelSign.1")), this.buttonGet.node.x = 0, this.buttonGrayGet.node.x = 0)) : i ? (this.buttonAdv.node.visible = !0, this.buttonAdv.node.x = -this.grayBtnX, this.advText.text = mgrI18n.getText("panelSign.3"), this.countDown.text = "", this.buttonGet.node.x = this.grayBtnX - 40, this.buttonGet.node.visible = s, this.buttonGrayGet.node.visible = !s, !s && (this.btnGrayGetText.text = mgrI18n.getText("panelSign.1")), mgrAdv.statisVideoShow("sign_adv")) : (this.buttonAdv.node.visible = !1, this.buttonGet.node.visible = s, this.buttonGet.node.x = 0, this.buttonGrayGet.node.visible = !s, this.buttonGrayGet.node.x = 0));
			cc.clearTween(this.buttonGet.node), this.buttonGet.node.scale(1, 1, !0), 4 == e ? s ? i ? (this.buttonGet.node.visible = !1, this.buttonAdv.node.visible = !0, this.advText.text = mgrI18n.getText("panelSign.3"), this.countDown.text = "", mgrAdv.statisVideoShow("sign_adv")) : (this.buttonGet.node.visible = !0, this.buttonAdv.node.visible = !1, UiHelper.playBreathe(this.buttonGet.node)) : i ? (this.buttonGet.node.visible = !1, this.buttonAdv.node.visible = !0, this.advText.text = mgrI18n.getText("panelSign.3"), this.countDown.text = "", mgrAdv.statisVideoShow("sign_adv")) : (this.buttonGet.node.visible = !0, this.buttonAdv.node.visible = !1) : e > 4 ? (this.buttonGet.node.visible = !0, this.buttonAdv.node.visible = !1, this.buttonGet.gray = !0, this.btnGetText.text = mgrI18n.getText("panelSign.2")) : i ? s && t ? (this.buttonAdv.node.visible = !0, this.buttonGet.node.visible = !1, this.advText.text = mgrI18n.getText("panelSign.4"), this.countDown.text = String.format(mgrI18n.getText("panelSign.5"), "3"), this.scheduleOnce(2, this.updateCountDown.bind(this, 3)), mgrAdv.statisVideoShow("sign_adv")) : s ? (this.buttonAdv.node.visible = !1, this.buttonGet.node.visible = !0, UiHelper.playBreathe(this.buttonGet.node)) : (this.buttonAdv.node.visible = !0, this.buttonGet.node.visible = !1, this.advText.text = mgrI18n.getText("panelSign.4"), this.countDown.text = "") : (this.buttonGet.node.visible = !0, this.buttonAdv.node.visible = !1)
		}
		updateCountDown(t) {
			if (t <= 0) return this.countDown.text = "", void this.updateItems(!1);
			this.countDown.text = String.format(mgrI18n.getText("panelSign.5"), t.toString()), this.isShowAdv ? this.scheduleOnce(1, this.updateCountDown.bind(this, t)) : this.scheduleOnce(1, this.updateCountDown.bind(this, t - 1))
		}
		on_click_buttonClose() {
			let t = mgrSign.signData.index;
			mgrSign.signData.nextTime <= Timer.time && GameStatistics.statisCommonEvent(2508, t), this.close()
		}
		on_click_buttonGet() {
			mgrSign.isTodayFinish ? mgrAlert.alertDialog(mgrI18n.getText("panelSign.6")) : mgrSign.canGetAward() ? (mgrSign.getAward(!1), this.updateItems(!1)) : mgrAlert.alertDialog(mgrI18n.getText("panelSign.7"))
		}
		on_click_buttonAdv() {
			mgrAdv.statisVideoClick("sign_adv"), mgrAdv.dispatchAdv("sign_adv") ? this.isShowAdv = !0 : mgrAlert.alertText(mgrI18n.getText("panelSign.8"))
		}
		on_click_buttonGrayGet() {}
	}
	PanelSign.autoAlert = !1;
	class SignItem extends ViewBase {
		constructor() {
			super(...arguments), this.leftTime = 0
		}
		onCreateComplete() {}
		fillGetted() {
			this.getChild("on").visible = !1, this.getChild("off").visible = !0, this.getChild("getted").visible = !0, mgrI18n.trySetI18nImage(this.getChild("getted"), "pnl_main_33.png"), this.getChild("time").visible = !1
		}
		fillCanGet() {
			this.getChild("on").visible = !0, this.getChild("off").visible = !1, this.getChild("getted").visible = !1, this.getChild("time").visible = !1
		}
		fillEmpty() {
			this.getChild("on").visible = !1, this.getChild("off").visible = !0, this.getChild("getted").visible = !1, this.getChildText("time").text = ""
		}
		fillCountDown(t) {
			this.getChild("on").visible = !1, this.getChild("off").visible = !0, this.getChild("getted").visible = !1, this.getChildText("time").text = Tools.formatTime(t), this.leftTime = t, this.schedule(.5, this.updateTime)
		}
		updateTime() {
			this.leftTime > 0 && (this.leftTime -= .5, this.leftTime <= 0 ? (this.fillCanGet(), this.unschedule(this.updateTime), _G.sendMsg("SIGN_REFRESH_ITEM")) : this.getChildText("time").text = Tools.formatTime(this.leftTime))
		}
		fillItem(t, e) {
			let a = this.getChildText("count"),
				i = this.getChildSprite("icon"),
				s = db.get_item_db(t);
			i && s && s.icon && i.loadImage(s.icon), 2 == s.type ? a.text = "" : a.text = "x" + e
		}
	}
	class PanelStory extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelStory.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_bgImage: "Laya.Image",
				cc_roleLeft: "Laya.Image",
				cc_roleRight: "Laya.Image",
				cc_dialogLeft: "Laya.Image",
				cc_clickArrowLeft: "Laya.Sprite",
				cc_nameLeft: "Laya.Label",
				cc_textLeft: "Laya.Text",
				cc_dialogRight: "Laya.Image",
				cc_arrowRight: "Laya.Sprite",
				cc_nameRight: "Laya.Label",
				cc_textRight: "Laya.Text",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.isTalking = !0
		}
		addPreloadRes(t) {
			let e = this.context,
				a = db.get_talk_db(e),
				i = mgrTalk.getTalkResList(e);
			t.add(i, RES_TYPE.IMAGE), mgrDream.WatchStory(e), a.bgImage && t.add(a.bgImage, RES_TYPE.IMAGE)
		}
		buildUi() {
			this.roleLeft.x = -600, this.roleRight.x = 600, this.dialogLeft.visible = !1, this.dialogRight.visible = !1;
			let t = this.context,
				e = db.get_talk_db(t);
			e.bgImage && (this.bgImage.skin = e.bgImage), this.registerMsg({
				TALK_UPDATE_TEXT: this.onMsgTalkUpdateText.bind(this),
				TALK_SHOW_BTN: this.onMsgTalkShowBtn.bind(this),
				TALK_FINISH: this.onMsgTalkFinish.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onDialogOpenAnim(t) {
			this.scheduleOnce(1, () => {
				t(), UiHelper.addClickEvent(this.resNode, this.onClickBg.bind(this));
				let e = this.context;
				mgrTalk.startTalk(e)
			})
		}
		onDialogCloseAnim(t) {
			this.resNode.offAll(), cc.tween(this.resNode).to(.3, cc.PROP.ALPHA0).call(t).start()
		}
		onMsgTalkUpdateText() {
			let t, e, a, i, s, n, o = mgrTalk.talkTexts,
				r = o[o.length - 1].bLeft;
			this.isTalking = !0, r ? (t = this.dialogLeft, e = this.dialogRight, a = this.textLeft, i = this.roleLeft, s = this.roleRight, n = this.nameLeft) : (t = this.dialogRight, e = this.dialogLeft, a = this.textRight, i = this.roleRight, s = this.roleLeft, n = this.nameRight), t.scale(.2, .2, !0).alpha = 0, cc.tween(t, !0).delay(.3).show().to(.3, cc.PROP.SCALE_ALPHA1, cc.OPTION.BACK_OUT).start(), cc.tween(e, !0).to(.3, {
				scaleX: .2,
				scaleY: .2,
				alpha: 0
			}, cc.OPTION.SINE_OUT).hide().start();
			let l = o[o.length - 1];
			if (a.text = l.text, l.roleId) {
				let t = db.get_role_db(l.roleId);
				i.skin = t.image, n.text = mgrI18n.getText(t.tlite)
			} else i.skin = null, n.text = "";
			cc.tween(i, !0).to(.3, {
				x: r ? -100 : 100
			}, cc.OPTION.BACK_OUT).start(), cc.tween(s, !0).to(.3, {
				x: r ? 600 : -600
			}, cc.OPTION.SINE_OUT).start(), s.parent.setChildIndex(s, 0)
		}
		onMsgTalkShowBtn(t) {
			console.error("没有按钮了")
		}
		onMsgTalkFinish(t) {
			this.close(), GameStatistics.statisCommonEvent(7103)
		}
		onTalkFinish() {
			this.isTalking = !1, mgrTalk.next()
		}
		onClickBg() {
			mgrTalk.isDone ? this.close() : this.isTalking && this.onTalkFinish()
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelSubscribe extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelSubscribe.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_item1: "Laya.Image",
				cc_itemAmount1: "Laya.Label",
				cc_item2: "Laya.Image",
				cc_itemAmount2: "Laya.Label",
				cc_buttonSub: "UIButton",
				cc_buttonThank: "UIButton",
				cc_labelRewarded: "Laya.Label"
			}
		}
		buildUi() {
			this.registerMsg({
				[BASE_MSG.MSG_ON_ADD_SUBSCRIBE_RESULT]: this.onMsgSdkAddSubscribeResult.bind(this)
			}), this.startProcMsg();
			let t = [
					["1000", 10],
					["1001", 2e3]
				],
				e = [this.item1, this.item2],
				a = [this.itemAmount1, this.itemAmount2];
			for (let i = 0; i < t.length; i++) {
				if (e[i]) {
					let a = db.get_item_db(t[i][0]).icon;
					e[i].loadImage(a)
				}
				a[i] && (a[i].text = "*" + t[i][1])
			}
			if (1 == FileRecord.getData("SUBSCRIBE_COUNT")) {
				this.labelRewarded.visible = !1, this.buttonSub.node.visible = !0, this.buttonThank.node.visible = !0, this.buttonClose.node.visible = !1;
				let t = db.cop.subscribe_close_delay_time || 0;
				if (t > 0 && (this.buttonThank.node.visible = !1, Timer.callLater(t, () => {
						this.destroyed || (this.buttonThank.node.visible = !0, this.buttonThank.node.alpha = 0, cc.tween(this.buttonThank.node).to(.3, cc.PROP.ALPHA1).start())
					}, this)), 0 != db.cop.b_subscribe_finger) {
					let t = this.addEffect("135");
					t.setScale(1, 1, 1), t.followTarget(this.buttonSub.node, this.cameraEffect, this.buttonSub.node.width / 2), t.play()
				}
			} else this.labelRewarded.visible = !0, this.buttonSub.node.visible = !1, this.buttonThank.node.visible = !1, this.buttonClose.node.visible = !0;
			GameStatistics.statisCommonEvent(2504)
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgSdkAddSubscribeResult() {
			this.close()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonSub() {
			GameStatistics.statisCommonEvent(2505, 0), mgrSdk.addSubscribe([1])
		}
		on_click_buttonThank() {
			this.close()
		}
	}
	class PanelSuit extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelSuit.json", this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_topNode: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_leftNode: "Laya.Sprite",
				cc_buttonLeft: "UIButton",
				cc_rightNode: "Laya.Sprite",
				cc_buttonRight: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_suit", ""), this.curGid = 0
		}
		buildUi() {
			GameStatistics.statisCommonEvent(7401), this.curSuitGroup = new SuitGroup, this.centerNode.addChild(this.curSuitGroup), this.curSuitGroup.setSuits(0), this.tempSuitGroup = new SuitGroup, this.centerNode.addChild(this.tempSuitGroup), this.tempSuitGroup.visible = !1, this.centerNode.y = -1100, cc.tween(this.centerNode).to(.5, {
				y: 0
			}, cc.OPTION.BACK_OUT).start(), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this),
				SUIT_UPDATE: this.onMsgSuitUpdate.bind(this)
			}), this.startProcMsg(), GameStatistics.statisCommonEventOnce(7051)
		}
		dispose() {
			this.instOrBanner.dispose(), this.stopProcMsg(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgItemChange(t) {
			2 == t.itemDb.type && 1 == t.itemDb.subType && this.curSuitGroup.refresh()
		}
		onMsgSuitUpdate() {
			this.curSuitGroup.refresh()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonLeft() {
			this.curGid = ((this.curGid + 1) % 5 + 5) % 5, this.tempSuitGroup.setSuits(this.curGid), this.tempSuitGroup.x = -600, cc.tween(this.curSuitGroup, !0).to(.45, {
				x: 600
			}, cc.OPTION.SINE_IN_OUT).hide().start(), cc.tween(this.tempSuitGroup, !0).show().to(.45, {
				x: 0
			}, cc.OPTION.SINE_IN_OUT).call(() => {
				[this.curSuitGroup, this.tempSuitGroup] = [this.tempSuitGroup, this.curSuitGroup]
			}).start(), GameStatistics.statisCommonEvent(7052)
		}
		on_click_buttonRight() {
			this.curGid = ((this.curGid - 1) % 5 + 5) % 5, this.tempSuitGroup.setSuits(this.curGid), this.tempSuitGroup.x = 600, cc.tween(this.curSuitGroup, !0).to(.45, {
				x: -600
			}, cc.OPTION.SINE_IN_OUT).hide().start(), cc.tween(this.tempSuitGroup, !0).show().to(.45, {
				x: 0
			}, cc.OPTION.SINE_IN_OUT).call(() => {
				[this.curSuitGroup, this.tempSuitGroup] = [this.tempSuitGroup, this.curSuitGroup]
			}).start(), GameStatistics.statisCommonEvent(7052)
		}
	}
	class SuitGroup extends Laya.Sprite {
		constructor() {
			super(), this.suitItems = [], this.size(521, 945).pivot(261, 473), this.title = this.addChild(new Laya.Sprite), this.title.x = 193;
			let t = this.addChild((new Laya.Sprite).loadImage("res/ui/pnl_suit/bar_bg.png")).pos(428, 68),
				e = t.addChild((new Laya.Sprite).loadImage("res/ui/pnl_suit/bar.png"));
			this.percentBar = e.addComponent(UIBarMask), this.percentBar.style = UIBarMask.STYLE_RADIAL, this.percentLabel = t.addChild(new Laya.Label), this.percentLabel.anchorX = .5, this.percentLabel.pos(32, 22), this.percentLabel.fontSize = 24, this.percentLabel.color = "#a33f9c", this.percentLabel.strokeColor = "#ffffff", this.percentLabel.stroke = 2
		}
		setSuits(t) {
			this.gid = t, this.loadImage(`res/ui/pnl_suit/bg${t}.png`);
			this.title.y = [95, 108, 76, 96, 96][t];
			let e = mgrSuit.getAllSuits(t);
			for (var a = 0; a < e.length; a++) {
				let t = this.suitItems[a];
				if (t) t.visible = !0;
				else {
					t = new SuitItem, this.suitItems.push(t), this.addChild(t);
					let e = 120 * (a % 3 - 1) + 260,
						i = 255 * (a / 3 | 0) + 355;
					t.pos(e, i, !0)
				}
				this.suitItems[a].setSuitId(e[a])
			}
			for (a = e.length; a < this.suitItems.length; a++) this.suitItems[a].visible = !1;
			this.refresh()
		}
		refresh() {
			let t = mgrSuit.getAllSuits(this.gid),
				e = 0,
				a = 0;
			for (var i = 0; i < t.length; i++) this.suitItems[i].refresh(), e += this.suitItems[i].hasCount, a += this.suitItems[i].totalCount;
			this.percentBar.progress = e / a, this.percentLabel.text = (e / a * 100 + .5 | 0) + "%"
		}
		onClick() {
			if (null != this.gid) {
				let t = new ResLoader;
				t.add("res/ui/PanelSuitList.json", RES_TYPE.PREFAB2D), t.add("res/prefab/SuitItem.json", RES_TYPE.PREFAB2D), mgrAlert.openWait(t, () => {
					mgrPanel.openPanelWithSingleton(UI_NAME.PanelSuitList, this.gid)
				})
			}
		}
	}
	class SuitItem extends Laya.Image {
		constructor() {
			super(), this.anchorX = .5, this.anchorY = 1, this.size(174, 249);
			let t = this.addChild(new Laya.Image);
			t.skin = "res/ui/pnl_suit/text_bg.png", t.centerX = 0, t.bottom = -2, this.countLabel = t.addChild(new SimpleRichText), this.countLabel.fontSize = 18, this.countLabel.color = "#ff8003", this.countLabel.strokeColor = "#ffffff", this.countLabel.pos(30, 4), this.tip = this.addChild(new Laya.Sprite).loadImage("res/ui/btns/tip.png").pos(110, 224), UiHelper.addClickEvent(this, this.onClick.bind(this))
		}
		setSuitId(t) {
			this.suitId = t;
			let e = db.get_suit_db(t);
			this.skin = e.icon
		}
		refresh() {
			let t = db.get_suit_db(this.suitId),
				e = mgrSuit.hasPartCount(this.suitId);
			this.hasCount = e, this.totalCount = t.parts.length, this.countLabel.text = `<>${e}/</><color:#00b415>${t.parts.length}</>`, this.hasCount >= this.totalCount ? mgrSuit.isSuitAwarded(this.suitId) ? this.tip.visible = !1 : (this.tip.visible = !0, UiHelper.playTipRot(this.tip)) : this.tip.visible = !1
		}
		onClick() {
			GameStatistics.statisCommonEvent(7053);
			let t = db.get_suit_db(this.suitId);
			t.fromSuitStatistics && GameStatistics.statisCommonEvent(t.fromSuitStatistics), mgrPart.openPanelSuitDetal(this.suitId)
		}
	}
	class PanelSuitAward extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelSuitAward.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_awardCount: "Laya.Label",
				cc_descLabel: "Laya.Label",
				cc_buttonClose: "UIButton",
				cc_buttonGet: "UIButton",
				cc_buttonAdvGet: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_suit_award", "banner_suit_award")
		}
		buildUi() {
			let t = this.context,
				e = db.get_suit_db(t);
			this.awardCount.text = e.diamondCount + "", mgrAdv.getActive("suit_award_db") ? (mgrAdv.statisVideoShow("suit_award_db"), this.buttonGet.node.visible = !1, this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()) : (this.buttonAdvGet.node.visible = !1, this.buttonClose.node.visible = !1)
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		onMsgAdvShowSuc(t) {
			"suit_award_db" == t.advName && this.getAward(!0)
		}
		getAward(t) {
			let e = this.context;
			mgrSuit.getSuitAward(e, t), this.close()
		}
		on_click_buttonClose() {
			this.getAward(!1)
		}
		on_click_buttonGet() {
			this.getAward(!1)
		}
		on_click_buttonAdvGet() {
			mgrAdv.statisVideoClick("suit_award_db"), mgrAdv.dispatchAdv("suit_award_db", null, !1)
		}
	}
	class PanelSuitDetail extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelSuitDetail.json", this._exportNodeInfo = {
				cc_bottomNode: "Laya.Sprite",
				cc_reuseScrollParts: "ReuseScrollList",
				cc_touchNode: "Laya.Image",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonAward: "UIButton",
				cc_awardCount: "Laya.Label",
				cc_awardTip: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.instOrBanner = new AdvInstOrBanner("enter_suit_detail", "")
		}
		addPreloadRes(t) {
			let e, a = this.context.suitIdOrParts,
				i = [];
			if (a instanceof Array) i = a.slice(), mgrPart.removeUnchoosePart(i);
			else if ("string" == typeof a) {
				i = db.get_suit_db(a).parts, e = a
			} else {
				for (const t in a) i.push(a[t]);
				mgrPart.removeUnchoosePart(i)
			}
			this.suitId = e, this.parts = i, t.addAnimationClip(db.get_animation_db(MODEL_ANIM.ZJZ).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.FACE_ZJZ).path), mgrPart.addPartResList(i, t, !0)
		}
		buildUi() {
			let t, e = this.suitId;
			if (e) {
				let a = db.get_suit_db(e);
				t = a.parts, !mgrSuit.hasSuit(e) || mgrSuit.isSuitAwarded(e) ? this.buttonAward.node.visible = !1 : (this.awardCount.text = a.diamondCount + "", UiHelper.playTipRot(this.awardTip))
			} else t = this.parts, this.buttonAward.node.visible = !1;
			let a = this.context.bPvpAward;
			this.init3D(t), this.reuseScrollParts.itemHeight = 160, this.reuseScrollParts.itemWidth = 127, this.reuseScrollParts.setVerticle(!1), this.reuseScrollParts.onItemCreate = function() {
				return new HuDongPartItem
			}, this.reuseScrollParts.onItemChange = a ? (e, a) => {
				e.setPvpAwardPart(t[a])
			} : (e, a) => {
				e.setHuDongPart(t[a])
			}, this.bottomNode.y = 400, this.bottomNode.alpha = 0, cc.tween(this.bottomNode).to(.5, {
				y: 0,
				alpha: 1
			}, cc.OPTION.SINE_IN).start(), this.reuseScrollParts.updateList(t.length), this.registerMsg({
				SUIT_UPDATE: this.onMsgSuitUpdate.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.reuseScrollParts && this.reuseScrollParts.clearAllItems(), this.avatar && (this.avatar.destroy(), this.avatar = null), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		initTouch() {
			new RoleOperate(this.touchNode, this.avatar)
		}
		onMsgSuitUpdate() {
			let t = this.suitId;
			t && mgrSuit.isSuitAwarded(t) && (this.buttonAward.node.visible = !1)
		}
		init3D(t) {
			this.createScene3DBack(1, 25), this.camera.transform.localPosition = new Laya.Vector3(.06, 1.25, 5.68), this.camera.transform.localRotationEuler = new Laya.Vector3(-6, 0, 0), this.avatar = new RoleAvatar(t), this.avatar.transform.localPosition = new Laya.Vector3(0, 0, 0), this.avatar.transform.localRotationEuler = new Laya.Vector3(0, 0, 0), this.scene3DBack.addChild(this.avatar), this.avatar.playJingZi(), this.avatar.on("Exit", this, t => {
				if (!this.destroyed) switch (t) {
					case MODEL_ANIM.ZJZ:
						this.avatar.playAnimation(MODEL_ANIM.MAIN_IDLE, !1, null, .3);
						break;
					case MODEL_ANIM.MAIN_IDLE:
						this.avatar.playJingZi()
				}
			}), this.initTouch()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonAward() {
			mgrAlert.openPanelLoading(UI_NAME.PanelSuitAward, this.suitId)
		}
	}
	class MouseInertiaCalculator {
		constructor() {
			this.mouseX = 0, this.mouseY = 0, this.isTouched = !1, this.deltaMoves = [], this.deltaTimes = [], this.startTouchPosition = new Laya.Vector2, this.lastTouchPosition = new Laya.Vector2, this.lastTouchTime = 0
		}
		onTouchStart(t, e) {
			this.mouseX = t, this.mouseY = e, this.isTouched = !0, this.lastTouchPosition.setTo(t, e), this.startTouchPosition.setTo(t, e);
			for (var a = this.deltaMoves.length - 1; a >= 0; a--) _G.pool.put(this.deltaMoves[a]);
			this.deltaMoves.length = 0, this.deltaTimes.length = 0, this.lastTouchTime = Timer.time
		}
		onTouchMove(t, e) {
			this.isTouched && (this.mouseX = t, this.mouseY = e, this._gatherTouchMove(t, e))
		}
		onTouchEnd(t, e) {
			this.isTouched && (this.mouseX = t, this.mouseY = e, this._gatherTouchMove(t, e), this.isTouched = !1)
		}
		get velocity() {
			let t = new Laya.Vector2(0, 0);
			return this.getVelocity(t), t
		}
		getVelocity(t) {
			var e = this.deltaMoves.length;
			if (0 == e) return;
			t.setTo(0, 0);
			let a = 0;
			for (var i = 0; i < e; i++) t.addSelf(this.deltaMoves[i]), a += this.deltaTimes[i];
			t.divSelf(a)
		}
		get totalDeltaX() {
			return this.lastTouchPosition.x - this.startTouchPosition.x
		}
		get totalDeltaY() {
			return this.lastTouchPosition.y - this.startTouchPosition.y
		}
		_gatherTouchMove(t, e) {
			let a = MouseInertiaCalculator.v2_helper;
			if (a.setValue(t, e), this.deltaMoves.length >= 5) {
				let t = this.deltaMoves.shift();
				this.deltaTimes.shift(), t.set(a).subSelf(this.lastTouchPosition), this.deltaMoves.push(t)
			} else {
				let t = _G.pool.get(Laya.Vector2);
				a.sub(this.lastTouchPosition, t), this.deltaMoves.push(t)
			}
			this.lastTouchPosition.set(a);
			let i = Timer.time;
			this.deltaTimes.push(i - this.lastTouchTime), this.lastTouchTime = i
		}
	}
	MouseInertiaCalculator.v2_helper = new Laya.Vector2;
	class SuitItem$1 extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/SuitItem.json", this._exportNodeInfo = {
				cc_suitSprite: "Laya.Image",
				cc_buttonAward: "UIButton",
				cc_awardIcon: "Laya.Sprite",
				cc_awardCount: "Laya.Label",
				cc_barMask: "UIBarMask",
				cc_barValue: "Laya.Label",
				cc_collectInfo: "Laya.Label"
			}, this.create()
		}
		onCreateComplete() {
			UiHelper.addScrollViewClick(this.resNode, this.onClick.bind(this)), this.registerMsg({
				[BASE_MSG.ITEM_CHANGE]: this.onMsgItemChange.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgItemChange(t) {
			2 == t.itemDb.type && 1 == t.itemDb.subType && this.refreshState()
		}
		setData(t) {
			if (!this.callable) return this.safeCall(this.setData, t);
			if (t == this.suitId) return;
			this.suitId = t;
			let e = db.get_suit_db(t);
			this.suitSprite.loadImage(e.image);
			let a = String.format(mgrI18n.getText("suitItem.1"), Mathf.random(1, 99).toString());
			this.collectInfo.text = a, this.refreshState()
		}
		refreshState() {
			let t = db.get_suit_db(this.suitId),
				e = mgrSuit.hasPartCount(this.suitId);
			this.barValue.text = `${e}/${t.parts.length}`, this.barMask.progress = e / t.parts.length, this.buttonAward.node.visible = !mgrSuit.isSuitAwarded(this.suitId), this.buttonAward.node.visible && (this.awardCount.text = "*" + t.diamondCount)
		}
		onClick() {
			mgrPart.openPanelSuitDetal(this.suitId)
		}
		on_click_buttonAward() {
			mgrSuit.hasSuit(this.suitId) ? (mgrSuit.getSuitAward(this.suitId, !1), this.buttonAward.interactable = !1, cc.tween(this.buttonAward.node).to(.1, cc.PROP.ALPHA0).hide().start()) : mgrAlert.alertDialog(mgrI18n.getText("panelSuitAward.2"))
		}
	}
	class PanelSuitList extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelSuitList.json", this._exportNodeInfo = {
				cc_centerNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton"
			}, this.inertia = new MouseInertiaCalculator, this.suitItems = [], this.fromOffset = 0, this.curOffset = 0, this.toOffset = 0
		}
		buildUi() {
			let t = mgrSuit.getAllSuits(this.context);
			this.suits = t;
			for (let t = 0; t < 4; t++) {
				let e = new SuitItem$1;
				e.setParent(this.centerNode), e.originPos = t, this.suitItems.push(e), e.setAlpha(0), e.runTween(cc.tween().delay(.15 * (3 - t)).to(.1, cc.PROP.ALPHA1))
			}
			this.updatePos(-4), cc.tween(this).to(.6, cc.PROP.EMPTY, {
				easing: cc.Ease.sineOut,
				onUpdate: (t, e) => {
					this.updatePos(Mathf.lerp(-4, 0, e))
				},
				onComplete: () => {
					UiHelper.registerTouchEvent(this.resNode, this.onTouchStart.bind(this), this.onTouchMove.bind(this), this.onTouchEnd.bind(this))
				}
			}).start()
		}
		onTouchStart() {
			this.inertia.onTouchStart(Laya.stage.mouseX, Laya.stage.mouseY), this.fromOffset = this.curOffset, cc.clearTween(this)
		}
		onTouchMove() {
			this.inertia.onTouchMove(Laya.stage.mouseX, Laya.stage.mouseY), this.inertia.isTouched && this.updatePos(this.fromOffset - this.inertia.totalDeltaX / 400)
		}
		onTouchEnd() {
			this.inertia.onTouchEnd(Laya.stage.mouseX, Laya.stage.mouseY), this.startScroll()
		}
		updatePos(t) {
			this.curOffset = t;
			let e = this.suits.length;
			var a;
			a = t > 0 ? t + .5 | 0 : t - .5 | 0;
			for (var i = 0; i < this.suitItems.length; i++) {
				var s = this.suitItems[i],
					n = s.originPos + t,
					o = n * Math.PI / 2,
					r = Math.sin(o),
					l = -Math.cos(o);
				s.setPosition(200 * r, 30 * l - 100);
				var c = Mathf.lerp(.6, 1, (l + 1) / 2);
				s.setScale(c, c), s.setZorder(c), n = ((n = n > 0 ? n + .5 | 0 : n - .5 | 0) % 4 + 4) % 4, s.setData(this.suits[((n - a) % e + e) % e])
			}
		}
		startScroll() {
			let t = this.inertia.velocity.x;
			t = Mathf.clamp(t, -4e3, 4e3);
			let e = Mathf.lerpFromInverseLerp(.1, 1, 1e3, 4e3, Math.abs(t)),
				a = .5 * t * e * e / 800;
			this.fromOffset = this.curOffset;
			let i = this.curOffset - a;
			this.toOffset = i < 0 ? i - .5 | 0 : i + .5 | 0, cc.tween(this, !0).to(e, cc.PROP.EMPTY, {
				easing: cc.Ease.quintOut,
				onUpdate: (t, e) => {
					this.updatePos(Mathf.lerp(this.fromOffset, this.toOffset, e))
				}
			}).start()
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelSuitSelect extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelSuitSelect.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_reuseScrollView: "ReuseScrollList",
				cc_text: "Laya.Text",
				cc_emptyLabel: "Laya.Text"
			}
		}
		buildUi() {
			this.reuseScrollView.setVerticle(!0), this.reuseScrollView.eachCount = 3, this.reuseScrollView.itemWidth = 154, this.reuseScrollView.itemHeight = 210, this.reuseScrollView.onItemCreate = function() {
				return new LingGanItem(!0)
			}, this.reuseScrollView.onItemChange = ((t, e) => {
				t.setData(mgrOutside.unusedSuits[e])
			}), mgrOutside.unusedSuits.length && (this.reuseScrollView.updateList(mgrOutside.unusedSuits.length), this.emptyLabel.visible = !1), this.registerMsg({
				UI_CLICK_LING_GAN_ITEM: this.onMsgClickLingGanItem.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), this.reuseScrollView && this.reuseScrollView.clearAllItems(), super.dispose()
		}
		onMsgClickLingGanItem() {
			Laya.timer.frameOnce(1, this, this.close)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelSzz extends PanelBase3D {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelSzz.json", this._exportNodeInfo = {
				cc_roleName: "Laya.Label",
				cc_buttonColorEggManDuoLa: "UIButton",
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_buttonRank: "UIButton",
				cc_bottomNode: "Laya.Sprite",
				cc_centerNode: "Laya.Sprite",
				cc_buttonJoin: "UIButton",
				cc_buttonSzzAward: "UIButton",
				cc_barMaskLike: "UIBarMask",
				cc_likeValue: "Laya.Label",
				cc_nodeBtn: "Laya.Sprite",
				cc_buttonYes1: "UIButton",
				cc_adv1: "Laya.Sprite",
				cc_buttonYes2: "UIButton",
				cc_adv2: "Laya.Sprite",
				cc_buttonYes3: "UIButton",
				cc_adv3: "Laya.Sprite",
				cc_likeCount: "Laya.Label",
				cc_likeTime: "Laya.Label",
				cc_textTips: "Laya.Text"
			}, this.instOrBanner = new AdvInstOrBanner("enter_szz", ""), this.isAnimating = !1, this.enterMainWhenClose = !0, this.lastRndAnim = 0, this.animIdx = 0, this.showFreeLike = !1
		}
		addPreloadRes(t) {
			t.addTexture2D("res/texture/sf_noise_clouds_01.png"), mgrPart.addPartResList(mgrPart.partsWear, t), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.ZBS_XI_HUAN).path), t.addAnimationClip(db.get_animation_db(MODEL_ANIM.ZBS_BU_XI_HUAN).path), t.addAnimationClip(db.get_animation_db("zbs-xuanze01").path), t.addAnimationClip(db.get_animation_db("zbs-xuanze02").path), t.addAnimationClip(db.get_animation_db("zbs-xuanze03").path), t.addModel(db.get_effect_db("113").res), mgrSzz.setLoadedParts(mgrPart.partsWear)
		}
		buildUi() {
			mgrI18n.trySetI18nImage(this.buttonRank.node, "pnl_main_20.png"), mgrI18n.trySetI18nImage(this.buttonJoin.node, "pnl_ssz_03.png"), mgrI18n.trySetI18nImage(this.buttonSzzAward.node, "pnl_ssz_04.png"), this.textTips.text = mgrI18n.getText("panelSzz.2"), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_SZZ), GameStatistics.statisOnStageStart(7503), this.topLeftNode.x = -150, UiHelper.playMoveIn(this.topLeftNode, 0, .3, 1);
			this.createScene3DBack(0, 30), this.camera.transform.localPosition = new Laya.Vector3(0, 1.35, 2.08), this.camera.transform.localRotationEuler = new Laya.Vector3(-1, 0, 0);
			let t = 1 * Math.tan(15 * Mathf.Deg2Rad) * 2,
				e = _G.canvasWidth / _G.canvasHeight * t;
			this.panel3d = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createPlane(e, t, 2, 2)), this.panel3d.transform.localPositionZ = -1, this.panel3d.transform.localRotationEulerX = 90, this.panel3d.active = !1, this.camera.addChild(this.panel3d), this.panelMat = new PaintMaterialTest, this.panelMat.renderMode = Laya.UnlitMaterial.RENDERMODE_ADDTIVE, this.panel3d.meshRenderer.sharedMaterial = this.panelMat;
			let a = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createPlane(2.16, 3, 10, 10));
			a.transform.localPositionY = 1.2, a.transform.localPositionZ = -2.4, a.transform.localRotationEulerX = 87, this.scene3DBack.addChild(a), mgrRes.loadRes("res/texture/mirror.png", RES_TYPE.TEXTURE2D, t => {
				if (this.destroyed) return;
				let e = new PaintMaterialTest;
				e.albedoTexture = t, a.meshRenderer.sharedMaterial = e
			}), this.animatorPlayer = new AnimatorFixedPlayer;
			let i = mgrSzz.getNextSzz();
			this.lastSzz = i, this.initTip(), this.refreshRole(i.parts, i.renqi, i.name, 1), 0 != db.cop.b_adv_full_screen && UiHelper.addClickEvent(this.resNode.getChildByName("bg"), this.onClickMask.bind(this), null, .5, !1), this.registerMsg({
				LOTTERY_SUC: this.onMsgLotterySuc.bind(this),
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this),
				JUMP_PANEL_BEFORE: this.onMsgJumpPanelBefore.bind(this)
			}), this.startProcMsg(), this.schedule(1, this.refreshLikeCount), this.checkColorEggManDuoLa(), this.playMenuIn(.5), this.scheduleOnce(1, () => {
				mgrGuide.registerGuideNode(GUD_REG_NODE.PANELSZZ_BUTTONYES, this.buttonYes2.node, !0), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELSZZ_BUTTONAWARD, this.buttonSzzAward.node, !0)
			})
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.lotteryTip && this.lotteryTip.dispose(), this.animatorPlayer.dispose(), this.clearTex(), this.avatar1 && (cc.clearTween(this.avatar1.transform), this.avatar1.destroy(), this.avatar1 = null), super.dispose(), this.enterMainWhenClose && mgrGame.tryEnterMain(), mgrGuide.unregisterGuideNode("PanelSzz.btnYes"), GameStatistics.statisOnStageEnd(7503)
		}
		clearTex() {
			this.texture2d && (this.texture2d.destroy(), this.texture2d = null)
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		regGuide() {}
		onMsgLotterySuc() {
			this.refreshLottery()
		}
		onMsgAdvShowSuc(t) {
			"free_like" == t.advName && (BaseFacade.mItem.addItem("1014", 1, null), t.params && t.params > 0 && this.clickLike(t.params))
		}
		onMsgJumpPanelBefore() {
			this.enterMainWhenClose = !1
		}
		onClickMask() {
			mgrAdv.getActive("free_like") && !this.isAnimating && 0 == BaseFacade.mItem.getItemCount("1014") ? (console.log("QT_ szz _ mask  " + !0), mgrAdv.statisVideoClick("free_like"), mgrAdv.dispatchAdv("free_like", 0)) : console.log("QT_ szz _ mask  " + !1)
		}
		initTip() {
			this.lotteryTip = new UITip(this.buttonSzzAward.node, function() {
				return mgrSzz.canLottery() ? 0 : -1
			})
		}
		enableAllYes() {
			this.buttonYes1.interactable = !0, this.buttonYes2.interactable = !0, this.buttonYes3.interactable = !0, cc.tween(this.nodeBtn, !0).to(.2, cc.PROP.ALPHA1).start()
		}
		disableAllYes() {
			this.buttonYes1.interactable = !1, this.buttonYes2.interactable = !1, this.buttonYes3.interactable = !1, cc.tween(this.nodeBtn, !0).to(.2, {
				alpha: .5
			}).start()
		}
		initRole(t) {
			this.avatar1 = new RoleAvatar(t), this.scene3DBack.addChild(this.avatar1), this.animIdx = (this.animIdx + Mathf.random(2)) % 3, this.avatar1.playAnimation("zbs-xuanze0" + (this.animIdx + 1))
		}
		refreshRole(t, e, a, i = 0) {
			this.avatar1 ? this.avatar1.setParts(t, !1, null, !0) : this.initRole(t), this.roleName.text = a, this.refreshLikeCount(), this.refreshLottery()
		}
		refreshLikeCount() {
			let t = BaseFacade.mItem.getItemCount("1014"),
				e = BaseFacade.mAutoIncreaseItem.getMaxCount("1014");
			if (this.likeCount.text = `${mgrI18n.getText("panelSzz.1")}   ${t}/${e}`, t >= e) this.likeTime.changeText("");
			else {
				let t = BaseFacade.mAutoIncreaseItem.getNextTime("1014") - Timer.time;
				this.likeTime.text = Tools.formatTime(t)
			}
			0 == t ? mgrAdv.getActive("free_like") ? (this.showFreeLike || (this.showFreeLike = !0, mgrAdv.statisVideoShow("free_like")), this.nodeBtn.visible = !0, this.setAdv(!0)) : this.nodeBtn.visible = !1 : (this.nodeBtn.visible = !0, this.setAdv(!1))
		}
		setAdv(t) {
			for (let e = 1; e <= 3; e++) this["adv" + e].visible = t
		}
		refreshLottery(t = !1) {
			this.lotteryTip.updateTip(), mgrSzz.canLottery() ? this._lotterBtnEffect || (this._lotterBtnEffect = !0, UiHelper.playRotCycle(this.buttonSzzAward.node)) : this._lotterBtnEffect && (this._lotterBtnEffect = !1, cc.clearTween(this.buttonSzzAward.node), this.buttonSzzAward.node.rotation = 0), t ? this.barMaskLike.progressTo(mgrSzz.likeCount / db.game_cnf.like_lottery_count) : this.barMaskLike.progress = mgrSzz.likeCount / db.game_cnf.like_lottery_count, this.likeValue.text = `${mgrSzz.likeCount}/${db.game_cnf.like_lottery_count}`
		}
		playLike(t) {
			if (this.avatar1) {
				switch (this.isAnimating = !0, this.disableAllYes(), t) {
					case 1:
						this.avatar1.playAnimation(MODEL_ANIM.ZBS_BU_XI_HUAN);
						break;
					case 2:
						this.avatar1.playAnimation(MODEL_ANIM.HUFU_ZANTONG1);
						break;
					case 3:
						this.avatar1.playAnimation(MODEL_ANIM.ZBS_XI_HUAN)
				}
				this.scheduleOnce(.4, function() {
					mgrAlert.playParticleEffect("130", new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2 + 50), 1, .5)
				}), this.scheduleOnce(1.5, () => {
					let t = mgrSzz.getNextSzz(this.lastSzz.parts);
					this.lastSzz = t, this.playRoleOut(t.parts, t.renqi, t.name, !0)
				})
			}
		}
		playRoleOut(t, e, a, i) {
			if (this.avatar1) {
				this.isAnimating = !0;
				let e = UiHelper.screenShot(this.camera, _G.canvasWidth, _G.canvasHeight);
				this.panelMat.albedoTexture = e, this.clearTex(), this.texture2d = e, this.panel3d.active = !0, this.avatar1.setParts(t, !1, null, !0), this.lastRndAnim = (this.lastRndAnim + Mathf.random(2)) % 3, this.avatar1.playAnimation("zbs-xuanze0" + (this.lastRndAnim + 1)), this.panelMat.playDissolveOutFromCenter(2, 0, () => {
					this.destroyed || (i && mgrSzz.randomLoad(), this.roleName.text = a, this.panel3d.active = !1, this.isAnimating = !1, this.enableAllYes())
				});
				let s = Laya.Point.TEMP.setTo(_G.canvasWidth / 2, _G.canvasHeight / 2);
				mgrAlert.playParticleEffect("113", s, 2, .5)
			}
		}
		playMenuIn(t = 0) {
			this.topLeftNode.x = -150, this.bottomNode.y = 380;
			var e = () => {
				cc.tween(this.topLeftNode).to(.4, {
					x: 0
				}, {
					easing: cc.Ease.sineIn
				}).start(), cc.tween(this.bottomNode).to(.4, {
					y: 0
				}, {
					easing: cc.Ease.sineIn
				}).start(), this.refreshLottery()
			};
			t ? Timer.callLater(t, e, this) : e()
		}
		clickLike(t) {
			if (!this.isAnimating)
				if (GameStatistics.statisCommonEvent(3012), BaseFacade.mItem.subItem("1014", 1, null)) {
					mgrSzz.addLike(), this.refreshLikeCount(), this.playLike(t);
					let e = UiHelper.getSelfGlobalPos(this["buttonYes" + t].node, new Laya.Point),
						a = this.barMaskLike.node.localToGlobal(new Laya.Point(this.barMaskLike.progressPosition, 0), !1);
					for (let t = 0; t < 3; t++) UiHelper.playBezierTo("res/icon/star.png", e, a, 1 + .05 * t, 1, () => {
						this.destroyed || this.refreshLottery(!0)
					})
				} else mgrAdv.statisVideoClick("free_like"), mgrAdv.dispatchAdv("free_like", t)
		}
		checkColorEggManDuoLa() {
			mgrColorEggs.isStepEnable(COLOR_EGGS_QUEST.MAN_DUO_LA, EGGS_STEP.FIRST) || (this.buttonColorEggManDuoLa.node.visible = !1)
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonRank() {
			mgrAlert.openPanelLoading(UI_NAME.PanelRank), GameStatistics.statisCommonEvent(7025)
		}
		on_click_buttonYes1() {
			this.clickLike(1)
		}
		on_click_buttonYes2() {
			this.clickLike(2)
		}
		on_click_buttonYes3() {
			this.clickLike(3)
		}
		on_click_buttonJoin() {
			GameStatistics.statisCommonEventOnce(7021), mgrPart.openPanelRoom(ROOM_TYPE.SZZ, mgrSzz.getMyParts(), () => {
				_G.sendMsg("JOIN_SZZ")
			})
		}
		on_click_buttonSzzAward() {
			GameStatistics.statisCommonEvent(3013), mgrAlert.openPanelLoading(UI_NAME.PanelLottery)
		}
		on_click_buttonColorEggManDuoLa() {
			this.buttonColorEggManDuoLa.interactable = !1;
			let t = new Laya.Point(_G.canvasWidth / 2, _G.canvasHeight / 2);
			this.buttonColorEggManDuoLa.node.parent.globalToLocal(t, !1), UiHelper.playColorEgg(this.buttonColorEggManDuoLa.node, t), BaseFacade.mGoal.commit(ACTION_ID.EGG_STEP, 1, ColorEggTargetId.man_du_la)
		}
	}
	class PanelSzzShow extends PanelBase3D {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelSzzShow.json", this._exportNodeInfo = {
				cc_topLeftNode: "Laya.Sprite",
				cc_buttonClose: "UIButton",
				cc_bottomNode: "Laya.Sprite",
				cc_buttonAnim1: "UIButton",
				cc_buttonAnim2: "UIButton",
				cc_buttonAnim3: "UIButton",
				cc_tipText: "Laya.Text"
			}, this.bianshenEffect = []
		}
		buildUi() {
			this.init3D(), this.tipText.text = mgrI18n.getText("panelSzzShow.2"), this.buttonClose.node.visible = !1;
			for (let t = 1; t <= 3; t++) {
				this["buttonAnim" + t].transition = UIButton.TRANSITION_NONE
			}
		}
		dispose() {
			for (let t = 0; t < this.bianshenEffect.length; t++) _G.poolManager.put(this.bianshenEffect[t]);
			this.avatar && this.avatar.destroy(), super.dispose()
		}
		init3D() {
			this.createScene3DBack(1, 60), this.camera.transform.localPosition = new Laya.Vector3(0, 1.35, 1.1), this.camera.transform.localRotationEuler = new Laya.Vector3(-3, 0, 0), this.avatar = new RoleAvatar(mgrSzz.getMyParts()), this.avatar.transform.localPosition = new Laya.Vector3(0, 0, 0), this.avatar.transform.localRotationEuler = new Laya.Vector3(0, 0, 0), this.scene3DBack.addChild(this.avatar), this.avatar.playIdle()
		}
		onSelect(t) {
			GameStatistics.statisCommonEvent(7023);
			for (let a = 1; a <= 3; a++) {
				var e = this["buttonAnim" + a];
				e.interactable = !1, t == a ? cc.tween(e.node.parent).to(.3, {
					x: 0,
					y: -327,
					scaleX: 1.2,
					scaleY: 1.2
				}).to(.2, cc.PROP.ALPHA0).start() : cc.tween(e.node.parent).to(.1, cc.PROP.SCALE_ALPHA0, cc.OPTION.BACK_IN).hide().start()
			}
			cc.tween(this.tipText).to(.2, cc.PROP.ALPHA0).hide().start(), this.playAnim(t)
		}
		playAnim(t) {
			let e = new ResLoader;
			e.add(db.get_animation_db(MODEL_ANIM.PTJS00).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db(MODEL_ANIM.FACE_PTJS00).path, RES_TYPE.ANIMATIONCLIP);
			let a = "pt_jiesuan-ptjs0" + t;
			e.add(db.get_animation_db(a).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_animation_db("face_pt_jiesuan-face_ptjs0" + t).path, RES_TYPE.ANIMATIONCLIP), e.add(db.get_effect_db("126").res, RES_TYPE.PREFAB3D), e.add(db.get_effect_db("127").res, RES_TYPE.PREFAB3D), mgrAlert.openWait(e, () => {
				var t;
				this.avatar.playAnimation(MODEL_ANIM.PTJS00, !1, a), this.avatar.once("Exit", this, this.onAnimFinished), (t = _G.poolManager.get(Particle, "126")).setParent(this.scene3DBack), t.play(), this.bianshenEffect.push(t), (t = _G.poolManager.get(Particle, "127")).setParent(this.scene3DBack), t.play(), this.bianshenEffect.push(t)
			})
		}
		onAnimFinished() {
			this.scheduleOnce(.1, () => {
				mgrAlert.openPanelLoading(UI_NAME.PanelJoinSuc, null, this.close.bind(this))
			})
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonAnim1() {
			this.onSelect(1)
		}
		on_click_buttonAnim2() {
			this.onSelect(2)
		}
		on_click_buttonAnim3() {
			this.onSelect(3)
		}
	}
	class TalkItem extends ViewBase {
		constructor() {
			super(), this.resourceName = "res/prefab/TalkItem.json", this._exportNodeInfo = {
				cc_leftPnl: "Laya.Sprite",
				cc_leftBg: "Laya.Image",
				cc_leftText: "Laya.Label",
				cc_leftHead: "Laya.Sprite",
				cc_rightPnl: "Laya.Sprite",
				cc_rightBg: "Laya.Image",
				cc_readed: "Laya.Label",
				cc_rightText: "Laya.Label",
				cc_rightHead: "Laya.Sprite"
			}, this.create()
		}
		onCreateComplete() {
			this.leftText.text = "", this.rightText.text = ""
		}
		setData(t, e, a, i) {
			if (!this.callable) return void this.safeCall(this.setData, t, e, a, i);
			this.leftPnl.visible = !1, this.rightPnl.visible = !1;
			let s = db.get_role_db(e),
				n = mgrTalk.getTextShowTime(a);
			t ? (this.leftText, this.leftBg, this.leftHead.loadImage(s.head), this.readed.visible = !1) : (this.rightText, this.rightBg, this.rightHead.loadImage(s.head), i ? (this.readed.visible = !1, cc.tween(this.readed).delay(n + .1).show()) : this.readed.visible = !0), i ? (this.resNode.alpha = 0, cc.tween(this.resNode).to(.2, cc.PROP.ALPHA1).start()) : (cc.clearTween(this.resNode), this.resNode.alpha = 1)
		}
	}
	class PanelTalk extends PanelBase {
		constructor() {
			super(...arguments), this.panelStyle = 1, this.resourceName = "res/ui/PanelTalk.json", this._exportNodeInfo = {
				cc_imageTalkBg: "Laya.Image",
				cc_titleName: "Laya.Label",
				cc_buttonClose: "UIButton",
				cc_spriteTalkBg: "Laya.Sprite",
				cc_dialogScroll: "ReuseScrollList",
				cc_buttonStart: "UIButton",
				cc_topNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite"
			}, this.instOrBanner = new AdvInstOrBanner("enter_talk", "banner_talk"), this.isTalking = !0
		}
		buildUi() {
			console.log("对话=====", this), mgrGuide.dispatchGuide(GUD_EVENT.ENTER_TALK), this.imageTalkBg.height = 770 + _G.canvasFitHeight - 1024, this.dialogScroll.height = this.imageTalkBg.height - 170, this.spriteTalkBg.height = this.imageTalkBg.height - 170, this.dialogScroll.onItemCreate = function() {
				return new TalkItem
			};
			let t = -1;
			this.dialogScroll.onItemChange = ((e, a) => {
				let i = mgrTalk.talkTexts[a];
				e.setData(i.bLeft, i.roleId, i.text, a > t), t = Math.max(t, a)
			}), mgrGuide.registerGuideNode(GUD_REG_NODE.PANELTALK_BUTTONSTART, this.buttonStart.node, !0), this.registerMsg({
				TALK_UPDATE_TEXT: this.onMsgTalkUpdateText.bind(this),
				TALK_SHOW_BTN: this.onMsgTalkShowBtn.bind(this),
				TALK_FINISH: this.onMsgTalkFinish.bind(this)
			}), this.startProcMsg();
			let e = db.get_level_db(mgrLevel.getLastLevel());
			this.titleName.text = mgrI18n.getText(db.get_role_db(e.roleId).tlite), mgrTalk.startTalk(e.talkId), this.buttonClose.node.visible = !_G.isGuiding, mgrGuide.sendMsgKey("FINISH_TALK")
		}
		dispose() {
			this.stopProcMsg(), this.instOrBanner.dispose(), this.dialogScroll && this.dialogScroll.clearAllItems(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this.instOrBanner.onFocus(t)
		}
		regGuide() {
			mgrGuide.sendMsgKey("PANEL_TALK_OPENED")
		}
		onMsgTalkUpdateText() {
			let t = mgrTalk.talkTexts;
			t[t.length - 1].bLeft;
			this.isTalking = !0, this.onTalkFinish()
		}
		onMsgTalkShowBtn(t) {
			console.error("没有按钮了")
		}
		onMsgTalkFinish(t) {
			this.onMsgTalkUpdateText();
			let e = mgrTalk.talkTexts;
			this.dialogScroll.updateList(e.length, e.length - 1, 1, !0)
		}
		onTalkFinish() {
			this.isTalking = !1, mgrTalk.next()
		}
		onClickBg() {
			if (mgrTalk.isDone) {
				let t = mgrLevel.getLastLevel();
				t > 0 && (GameStatistics.statisCommonEvent(11e3 + t, 1), GameStatistics.statisOnStageStart(12e3 + t));
				let e = db.get_level_db(t);
				mgrPart.openPanelRoom(ROOM_TYPE.LEVEL, e.parts.length ? e.parts : null, () => {
					_G.sendMsg("JOIN_LEVEL"), mgrTalk.endTalk(), this.close()
				}), mgrGuide.isGuiding || GameStatistics.statisCommonEvent(5030)
			} else this.isTalking && (this.unschedule(this.onTalkFinish), this.dialogScroll.updateList(mgrTalk.talkTexts.length, mgrTalk.talkTexts.length - 1, 0, !0), this.onTalkFinish())
		}
		on_click_buttonClose() {
			this.close(), GameStatistics.statisOnStageEnd(7507)
		}
		on_click_buttonStart() {
			this.onClickBg()
		}
	}
	const KEY_JUMP_GAME = "KEY_JUMP_GAME";
	class PanelTryGame extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelTryGame.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Image",
				cc_sprite: "Laya.Sprite",
				cc_btnClose: "UIButton",
				cc_scroll: "ReuseScrollList",
				cc_item: "Laya.Sprite"
			}, this._instOrBanner = new AdvInstOrBanner("", "")
		}
		buildUi() {
			this.scroll.onItemCreate = (() => {
				let t = new GameItem$1;
				return t.createFromNode(UiHelper.cloneSprite(this.item)), t
			}), this.scroll.onItemChange = ((t, e) => {
				t.setGameInfo(this._list[e])
			}), this.registerMsg({
				[BASE_MSG.SDK_OPEN_JUMP_RESULT]: this.onMsgOpenJumpResult.bind(this),
				[BASE_MSG.SDK_JUMP_GAME_REWARD]: this.onMsgJumpGameReward.bind(this)
			}), this.startProcMsg(), mgrSdk.openJump("reward"), mgrI18n.trySetI18nImage(this.sprite, "pnl_class_color_eggs_10.png")
		}
		dispose() {
			this.stopProcMsg(), this.scroll && this.scroll.clearAllItems(), this._instOrBanner.dispose(), super.dispose()
		}
		onFocus(t) {
			super.onFocus(t), this._instOrBanner.onFocus(t)
		}
		onMsgOpenJumpResult(t) {
			if ("reward" == t.type) {
				let e = t.jumpInfo;
				this.fillData(e)
			}
		}
		onMsgJumpGameReward(t) {
			this.close(!0)
		}
		fillData(t) {
			this._list = t, this.scroll.updateList(t.length)
		}
		on_click_btnClose() {
			this.close()
		}
	}
	class GameItem$1 extends ViewBase {
		onCreateComplete() {
			this.icon = this.getChildSprite("icon"), this.awardNode = this.getChildSprite("countBg"), this.count = this.awardNode.getChildByName("awardCount"), UiHelper.addScrollViewClick(this.icon, () => {
				this.data && mgrSdk.jumpOtherGame(this.data.index, "reward", this.data.index)
			}, void 0, !0), this.resNode.alpha = 0, cc.tween(this.resNode).to(.2, cc.PROP.ALPHA1).start()
		}
		setGameInfo(t) {
			this.data = t, this.icon.loadImage(t.url), t.rewards && t.rewards.length && (this.count.text = "*" + t.rewards[0][1]), this.awardNode.visible = !t.bReceived
		}
	}
	class PanelVideoRankShare extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelVideoRankShare.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_labelTips: "Laya.Label",
				cc_buttonClose: "UIButton",
				cc_buttonShare: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(7601, 0), this.registerMsg({
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onMsgVideoShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_FAIL]: this.onMsgVideoShareFail.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgVideoShareSuc() {
			GameStatistics.statisCommonEvent(7601, 2), this.close()
		}
		onMsgVideoShareFail() {
			GameStatistics.statisCommonEvent(7601, 3), this.close()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonShare() {
			mgrSdk.stopRecordVideo(), mgrSdk._videoRecordTime < mgrSdk.min_record_time ? mgrAlert.alertDialog("还没有可以分享的录屏哦，去神秘舞会看看吧！", "提示", () => {
				mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, {}, this.close.bind(this))
			}, () => {}) : (mgrSdk.shareVideo(), GameStatistics.statisCommonEvent(7601, 1))
		}
	}
	class PanelVideoRankTips extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelVideoRankTips.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_buttonShare: "UIButton"
			}
		}
		buildUi() {
			GameStatistics.statisCommonEvent(7602, 0), this.registerMsg({
				[BASE_MSG.SDK_VIDEO_SHARE_SUC]: this.onMsgVideoShareSuc.bind(this),
				[BASE_MSG.SDK_VIDEO_SHARE_FAIL]: this.onMsgVideoShareFail.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgVideoShareSuc() {
			GameStatistics.statisCommonEvent(7602, 2), this.close()
		}
		onMsgVideoShareFail() {
			GameStatistics.statisCommonEvent(7602, 3), this.close()
		}
		on_click_buttonClose() {
			this.close()
		}
		on_click_buttonShare() {
			mgrSdk.stopRecordVideo(), GameStatistics.statisCommonEvent(7602, 1), mgrSdk._videoRecordTime < mgrSdk.min_record_time ? mgrAlert.alertDialog("还没有可以分享的录屏哦，去神秘舞会看看吧！", "提示", () => {
				this.context && this.context.fOnClick && this.context.fOnClick(), mgrAlert.openPanelLoading(UI_NAME.PanelDancePreview, {}, this.close.bind(this))
			}, () => {}) : mgrSdk.shareVideo()
		}
	}
	class PanelVideoRankTipsRemote extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelVideoRankTipsRemote.json", this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_rankBg: "Laya.Image",
				cc_buttonClose: "UIButton"
			}
		}
		buildUi() {
			db.cop.get_rank_tip_url && this.rankBg.loadImage(db.cop.get_rank_tip_url)
		}
		on_click_buttonClose() {
			this.close()
		}
	}
	class PanelVideoShareReward extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelVideoShareReward.json", this.panelStyle = 0, this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_buttonClose: "UIButton",
				cc_buttonSure: "UIButton",
				cc_buttonSureAd: "UIButton"
			}, this.bReceivedNormalAward = !1
		}
		buildUi() {
			this.fillAd(), this.registerMsg({
				[BASE_MSG.ADV_SHOW_SUC]: this.onMsgAdvShowSuc.bind(this)
			}), this.startProcMsg()
		}
		dispose() {
			this.stopProcMsg(), super.dispose()
		}
		onMsgAdvShowSuc(t) {
			"share_part" == t.advName && (this.bReceivedNormalAward ? mgrGame.tryGetSharePartAward(!0) : (mgrGame.tryGetShareAward(), mgrGame.tryGetSharePartAward(!0)), this.close())
		}
		fillAd() {
			mgrGame.videoShareAwardCount <= 0 ? (this.buttonClose.node.visible = !1, this.buttonSure.node.visible = !0, this.buttonSureAd.node.visible = !1) : mgrGame.videoShareAwardCount >= 1 && mgrAdv.checkActive("share_part") ? (this.buttonClose.node.visible = !0, this.buttonSure.node.visible = !1, this.buttonSureAd.node.visible = !0, mgrAdv.statisVideoShow("share_part")) : (this.buttonClose.node.visible = !0, this.buttonSure.node.visible = !1, this.buttonSureAd.node.visible = !1)
		}
		on_click_buttonSure() {
			mgrGame.tryGetShareAward(), mgrGame.tryGetSharePartAward(), this.bReceivedNormalAward = !0, this.fillAd()
		}
		on_click_buttonClose() {
			this.bReceivedNormalAward || mgrGame.tryGetShareAward(), this.close()
		}
		on_click_buttonSureAd() {
			mgrAdv.statisVideoClick("share_part"), mgrAdv.dispatchAdv("share_part", {}, !0)
		}
	}
	class PanelWaitTime extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/PanelWaitTime.json", this.openAndCloseAnimEnabled = !0, this._exportNodeInfo = {
				cc_mask: "Laya.Sprite",
				cc_bg: "Laya.Box",
				cc_rotSprite: "Laya.Sprite"
			}
		}
		buildUi() {
			let t = this.context || 3;
			cc.tween(this.rotSprite).repeat(t, cc.tween().by(1, {
				rotation: 360
			})).call(this.close.bind(this, null)).start()
		}
	}
	class Temp extends PanelBase {
		constructor() {
			super(...arguments), this.resourceName = "res/ui/Temp.json", this._exportNodeInfo = {
				cc_topNode: "Laya.Sprite",
				cc_bottomNode: "Laya.Sprite",
				cc_topLeftNode: "Laya.Sprite"
			}
		}
		buildUi() {}
	}

	function requireModule(t) {
		switch (t) {
			case "PanelActiveClass":
				return PanelActiveClass;
			case "PanelActiveCp":
				return PanelActiveCp;
			case "PanelActiveCpTestPreview":
				return PanelActiveCpTestPreview;
			case "PanelActiveDance":
				return PanelActiveDance;
			case "PanelActiveDanceNew":
				return PanelActiveDanceNew;
			case "PanelActiveTest":
				return PanelActiveTest;
			case "PanelAdvCostDialog":
				return PanelAdvCostDialog;
			case "PanelAdvDialog":
				return PanelAdvDialog;
			case "PanelCat":
				return PanelCat;
			case "PanelCatLvup":
				return PanelCatLvup;
			case "PanelChallengePreview":
				return PanelChallengePreview;
			case "PanelClassColorEggs":
				return PanelClassColorEggs;
			case "PanelClassOutSide":
				return PanelClassOutSide;
			case "PanelClassReward":
				return PanelClassReward;
			case "PanelClassRoleDetail":
				return PanelClassRoleDetail;
			case "PanelClassRoleGet":
				return PanelClassRoleGet;
			case "PanelClassRoom":
				return PanelClassRoom;
			case "PanelClassStudenMatchingStageResult":
				return PanelClassStudenMatchingStageResult;
			case "PanelClassStudenMathStageResult":
				return PanelClassStudenMathStageResult;
			case "PanelClassStudenStageResult":
				return PanelClassStudenStageResult;
			case "PanelClassStudentMatchingStage":
				return PanelClassStudentMatchingStage;
			case "PanelClassStudentMathStage":
				return PanelClassStudentMathStage;
			case "PanelClassStudentStage":
				return PanelClassStudentStage;
			case "PanelClassTeacherChangeScore":
				return PanelClassTeacherChangeScore;
			case "PanelClassTeacherMatchingStage":
				return PanelClassTeacherMatchingStage;
			case "PanelClassTeacherMathStage":
				return PanelClassTeacherMathStage;
			case "PanelClassTeacherStage":
				return PanelClassTeacherStage;
			case "PanelCoinGift":
				return PanelCoinGift;
			case "PanelColorEggGet":
				return PanelColorEggGet;
			case "PanelContract":
				return PanelContract;
			case "PanelCpBooks":
				return PanelCpBooks;
			case "PanelCpTest":
				return PanelCpTest;
			case "PanelCpTestPreview":
				return PanelCpTestPreview;
			case "PanelDanceAnswer":
				return PanelDanceAnswer;
			case "PanelDanceDraw":
				return PanelDanceDraw;
			case "PanelDancePastRole":
				return PanelDancePastRole;
			case "PanelDancePreDestination":
				return PanelDancePreDestination;
			case "PanelDancePreview":
				return PanelDancePreview;
			case "PanelDanceRoleGet":
				return PanelDanceRoleGet;
			case "PanelDialog":
				return PanelDialog;
			case "PanelDiamondGift":
				return PanelDiamondGift;
			case "PanelDream":
				return PanelDream;
			case "PanelEgg":
				return PanelEgg;
			case "PanelFind":
				return PanelFind;
			case "PanelFishGame":
				return PanelFishGame;
			case "PanelFishGet":
				return PanelFishGet;
			case "PanelFishShow":
				return PanelFishShow;
			case "PanelFollow":
				return PanelFollow;
			case "PanelFriends":
				return PanelFriends;
			case "PanelGameLoading1":
				return PanelGameLoading1;
			case "PanelGuide":
				return PanelGuide;
			case "PanelHotActivity":
				return PanelHotActivity;
			case "PanelInside":
				return PanelInside;
			case "PanelInstall":
				return PanelInstall;
			case "PanelItemGet":
				return PanelItemGet;
			case "PanelJoinSuc":
				return PanelJoinSuc;
			case "PanelLanguageDialog":
				return PanelLanguageDialog;
			case "PanelLingGan":
				return PanelLingGan;
			case "PanelLoading":
				return PanelLoading;
			case "PanelLottery":
				return PanelLottery;
			case "PanelMain":
				return PanelMain;
			case "PanelMangHe":
				return PanelMangHe;
			case "PanelMangHeOpen":
				return PanelMangHeOpen;
			case "PanelManicure":
				return PanelManicure;
			case "PanelManicurePreview":
				return PanelManicurePreview;
			case "PanelManicureResult":
				return PanelManicureResult;
			case "PanelMoreGame":
				return PanelMoreGame;
			case "PanelNativeAdv":
				return PanelNativeAdv;
			case "PanelNativeBanner":
				return PanelNativeBanner;
			case "PanelNotice":
				return PanelNotice;
			case "PanelOffline":
				return PanelOffline;
			case "PanelOrder":
				return PanelOrder;
			case "PanelOutside":
				return PanelOutside;
			case "PanelOver":
				return PanelOver;
			case "PanelOverCommon":
				return PanelOverCommon;
			case "PanelOverRemedy":
				return PanelOverRemedy;
			case "PanelPartInfo":
				return PanelPartInfo;
			case "PanelPhone":
				return PanelPhone;
			case "PanelPhoto":
				return PanelPhoto;
			case "PanelPvp":
				return PanelPvp;
			case "PanelPvpCard":
				return PanelPvpCard;
			case "PanelPvpDeclare":
				return PanelPvpDeclare;
			case "PanelPvpOver":
				return PanelPvpOver;
			case "PanelPvpReward":
				return PanelPvpReward;
			case "PanelPvpRongYao":
				return PanelPvpRongYao;
			case "PanelPvpSelect":
				return PanelPvpSelect;
			case "PanelQuest":
				return PanelQuest;
			case "PanelQuestGift":
				return PanelQuestGift;
			case "PanelRank":
				return PanelRank;
			case "PanelRankHuDong":
				return PanelRankHuDong;
			case "PanelRankVideo":
				return PanelRankVideo;
			case "PanelReconnectDialog":
				return PanelReconnectDialog;
			case "PanelRoleLvup":
				return PanelRoleLvup;
			case "PanelRolePreDestination":
				return PanelRolePreDestination;
			case "PanelRoleTest":
				return PanelRoleTest;
			case "PanelRoleTestOver":
				return PanelRoleTestOver;
			case "PanelRoom":
				return PanelRoom;
			case "PanelSchoolYearbook":
				return PanelSchoolYearbook;
			case "PanelSetting":
				return PanelSetting;
			case "PanelShare":
				return PanelShare;
			case "PanelShoe":
				return PanelShoe;
			case "PanelShoeColorEggs":
				return PanelShoeColorEggs;
			case "PanelShoeColorEggTip":
				return PanelShoeColorEggTip;
			case "PanelShoeSelect":
				return PanelShoeSelect;
			case "PanelShoeSelectResult":
				return PanelShoeSelectResult;
			case "PanelShop":
				return PanelShop;
			case "PanelShopLvup":
				return PanelShopLvup;
			case "PanelSign":
				return PanelSign;
			case "PanelSkincare":
				return PanelSkincare;
			case "PanelStory":
				return PanelStory;
			case "PanelSubscribe":
				return PanelSubscribe;
			case "PanelSuit":
				return PanelSuit;
			case "PanelSuitAward":
				return PanelSuitAward;
			case "PanelSuitDetail":
				return PanelSuitDetail;
			case "PanelSuitList":
				return PanelSuitList;
			case "PanelSuitSelect":
				return PanelSuitSelect;
			case "PanelSzz":
				return PanelSzz;
			case "PanelSzzShow":
				return PanelSzzShow;
			case "PanelTalk":
				return PanelTalk;
			case "PanelTryGame":
				return PanelTryGame;
			case "PanelVideoRankShare":
				return PanelVideoRankShare;
			case "PanelVideoRankTips":
				return PanelVideoRankTips;
			case "PanelVideoRankTipsRemote":
				return PanelVideoRankTipsRemote;
			case "PanelVideoShareReward":
				return PanelVideoShareReward;
			case "PanelWaitTime":
				return PanelWaitTime;
			case "Temp":
				return Temp;
			default:
				return console.error("requireModule 找不到面板:", t), null
		}
	}
	class Start extends Laya.Script {
		constructor() {
			super(...arguments), this._loop = 0, this._time = 0
		}
		onAwake() {
			console.log("------------------------ start onAwake ------------------------"), Laya.MiniAdpter && (Laya.MiniAdpter.autoCacheFile = !0), Laya.MiniAdpter && (Laya.MiniAdpter.AutoCacheDownFile = !0), Logger.setLogLevel(3), Timer.initTime(), Laya.stage.on(Laya.Event.VISIBILITY_CHANGE, this, function() {
				Laya.stage.isVisibility ? (console.log("game.EVENT_SHOW"), Timer.updateTime(), _G.sendMsg(BASE_MSG.SYS_SHOW)) : (console.log("game.EVENT_HIDE"), _G.sendMsg(BASE_MSG.SYS_HIDE))
			}), __init_laya_ex__(), __init_vector2_ex__(), _G.requireModule = requireModule, TweenSystem.create()
		}
		onEnable() {
			console.log("------------------------ start onEnable ------------------------")
		}
		onStart() {
			console.log("------------------------ start onStart ------------------------"), Laya.loader.load("url_path.json", new Laya.Handler(this, t => {
				t.path && !Laya.Browser.onPC && (Laya.URL.basePath = t.path), mgrScene.runScene(SceneMain, PanelLoading)
			}))
		}
		onUpdate() {
			Timer.updateTime(), this._loop++;
			let t = Timer.time - this._time;
			t < .5 || (_G.FPS = this._loop / t | 0, this._loop = 0, this._time = Timer.time)
		}
		onDisable() {
			console.log("------------------------ start onDisable ------------------------")
		}
	}
	var Direction;
	! function(t) {
		t[t.Reverse = -1] = "Reverse", t[t.Toggle = 0] = "Toggle", t[t.Forward = 1] = "Forward"
	}(Direction || (Direction = {}));
	class UITweener extends Laya.Script {
		constructor() {
			super(), this.method = "Linear", this.style = "Once", this.ignoreTimeScale = !0, this.delay = 0, this.duration = 1, this.tweenGroup = 0, this.startFromFrom = !0, this.startFactor = 0, this.fixedUpdateDelta = !1, this.propName1 = "", this.propValue1 = 0, this.propName2 = "", this.propValue2 = 0, this.mStarted = !1, this.mStartTime = 0, this.mDuration = 0, this.mAmountPerDelta = 1e3, this.mFactor = 0
		}
		get amountPerDelta() {
			return this.mDuration != this.duration && (this.mDuration = this.duration, this.mAmountPerDelta = Math.abs(this.duration > 0 ? 1 / this.duration : 1e3) * Mathf.sign(this.mAmountPerDelta)), this.mAmountPerDelta
		}
		get direction() {
			return this.amountPerDelta < 0 ? Direction.Reverse : Direction.Forward
		}
		onAwake() {
			this.resetProp(), this.startFromFrom ? (this.mFactor = this.amountPerDelta < 0 ? 1 - this.startFactor : this.startFactor, this.Sample(this.mFactor, !1)) : this.UpdateValue(0)
		}
		onUpdate() {
			let t = Timer.deltaTime,
				e = this.ignoreTimeScale ? t : t * UITweener.timeScale;
			this.fixedUpdateDelta && (e = 1 / _G.gameFrameRate), this.UpdateValue(e)
		}
		resetProp() {
			let t = Object.create(null),
				e = Object.create(null);
			this.propName1 && (t[this.propName1] = this.owner[this.propName1], e[this.propName1] = this.propValue1), this.propName2 && (t[this.propName2] = this.owner[this.propName2], e[this.propName2] = this.propValue2), this._from = t, this._to = e
		}
		UpdateValue(t) {
			this.mStarted || (this.mStarted = !0, this.mStartTime = this.delay), this.mStartTime > 0 ? this.mStartTime -= t : (this.mFactor += this.amountPerDelta * t, "Loop" == this.style ? this.mFactor > 1 && (this.mFactor -= 0 | this.mFactor) : "PingPong" == this.style && (this.mFactor > 1 ? (this.mFactor = 1 - (this.mFactor - (0 | this.mFactor)), this.mAmountPerDelta = -this.mAmountPerDelta) : this.mFactor < 0 && (this.mFactor = -this.mFactor, this.mFactor -= 0 | this.mFactor, this.mAmountPerDelta = -this.mAmountPerDelta)), "Once" == this.style && (0 == this.duration || this.mFactor > 1 || this.mFactor < 0) ? (this.mFactor = Mathf.clamp01(this.mFactor), this.Sample(this.mFactor, !0), (0 == this.duration || 1 == this.mFactor && this.mAmountPerDelta > 0 || 0 == this.mFactor && this.mAmountPerDelta < 0) && (this.enabled = !1), this.OnFinished && this.OnFinished()) : this.Sample(this.mFactor, !1))
		}
		Sample(t, e) {
			let a = Mathf.clamp01(t);
			"Linear" == this.method || ("EaseIn" == this.method ? a = UITweener.EaseInLogic(a) : "EaseOut" == this.method ? a = UITweener.EaseOutLogic(a) : "EaseInOut" == this.method ? a = UITweener.EaseInOutLogic(a) : "BounceIn" == this.method ? a = UITweener.BounceLogic(a) : "BounceOut" == this.method ? a = 1 - UITweener.BounceLogic(1 - a) : "BounceOnce" == this.method && (a = UITweener.BounceOnceLogic(a))), this.updateProp(a, e)
		}
		updateProp(t, e) {
			let a = this.propName1;
			a && (this.owner[a] = Mathf.lerp(this._from[a], this._to[a], t));
			let i = this.propName2;
			i && (this.owner[i] = Mathf.lerp(this._from[i], this._to[i], t))
		}
		static EaseInLogic(t) {
			return 1 - Math.sin(.5 * Math.PI * (1 - t))
		}
		static EaseOutLogic(t) {
			return Math.sin(.5 * Math.PI * t)
		}
		static EaseInOutLogic(t) {
			let e = 2 * Math.PI;
			return t - Math.sin(t * e) / e
		}
		static BounceLogic(t) {
			return t < .363636 ? t *= 7.5685 * t : t = t < .727272 ? 7.5625 * (t -= .545454) * t + .75 : t < .90909 ? 7.5625 * (t -= .818181) * t + .9375 : 7.5625 * (t -= .9545454) * t + .984375, t
		}
		static BounceOnceLogic(t) {
			return t < .8 ? (t = Mathf.lerp(0, 1, Mathf.inverseLerp(0, .8, t)), Mathf.lerp(0, 1.2, this.EaseInLogic(t))) : (t = Mathf.lerp(0, 1, Mathf.inverseLerp(.8, 1, t)), Mathf.lerp(1.2, 1, this.EaseInLogic(t)))
		}
		PlayForward() {
			this.Play(!0)
		}
		PlayReverse() {
			this.Play(!1)
		}
		Play(t) {
			this.mAmountPerDelta = Math.abs(this.amountPerDelta), t || (this.mAmountPerDelta = -this.mAmountPerDelta), this.enabled = !0, this.UpdateValue(0)
		}
		ResetToBeginning() {
			this.mStarted = !1, this.mAmountPerDelta = Math.abs(this.amountPerDelta), this.mFactor = this.startFactor, this.Sample(this.mFactor, !1)
		}
		ResetToEnd() {
			this.mStarted = !1, this.mFactor = this.amountPerDelta < 0 ? 0 : 1, this.Sample(this.mFactor, !1)
		}
		Stop() {
			this.ResetToBeginning(), this.enabled = !1
		}
		Pause() {
			this.enabled = !1
		}
		Resume() {
			this.enabled = !0
		}
		ResetTo(t) {
			this.updateProp(t, !1)
		}
		Toggle() {
			this.mFactor > 0 ? this.mAmountPerDelta = -this.amountPerDelta : this.mAmountPerDelta = Math.abs(this.amountPerDelta), this.enabled = !0
		}
	}
	UITweener.timeScale = 1;
	class GameConfig {
		constructor() {}
		static init() {
			var t = Laya.ClassUtils.regClass;
			t("script/extensions/component/UIRoot.ts", UIRoot), t("Start.ts", Start), t("script/common/I18nComponent.ts", I18nComponent), t("script/extensions/component/UIHVLayout.ts", UIHVLayout), t("script/extensions/component/UIToggleGroup.ts", UIToggleGroup), t("script/extensions/component/UIToggle.ts", UIToggle), t("script/extensions/component/ReuseScrollList.ts", ReuseScrollList), t("script/extensions/tweener/UITweener.ts", UITweener), t("script/extensions/component/UIBarMask.ts", UIBarMask), t("script/extensions/component/UIDrag.ts", UIDrag), t("script/extensions/component/UIButton.ts", UIButton)
		}
	}
	GameConfig.width = 576, GameConfig.height = 1024, GameConfig.scaleMode = "fixedwidth", GameConfig.screenMode = "vertical", GameConfig.alignV = "middle", GameConfig.alignH = "center", GameConfig.startScene = "MainScene.scene", GameConfig.sceneRoot = "", GameConfig.debug = !1, GameConfig.stat = !1, GameConfig.physicsDebug = !1, GameConfig.exportSceneToJson = !0, GameConfig.init();
	class Main {
		constructor() {
			window.notCacheList = [], console.log("LayaGame Initing"), window.Laya3D ? Laya3D.init(GameConfig.width, GameConfig.height) : Laya.init(GameConfig.width, GameConfig.height, Laya.WebGL), Laya.Physics && Laya.Physics.enable(), Laya.DebugPanel && Laya.DebugPanel.enable(), Laya.stage.scaleMode = GameConfig.scaleMode, Laya.stage.screenMode = GameConfig.screenMode, Laya.stage.alignV = GameConfig.alignV, Laya.stage.alignH = GameConfig.alignH, Laya.URL.exportSceneToJson = GameConfig.exportSceneToJson, Laya.MiniAdpter && (Laya.MiniAdpter.autoCacheFile = !0), Laya.MiniAdpter && (Laya.MiniAdpter.AutoCacheDownFile = !0), Laya.QGMiniAdapter && (Laya.QGMiniAdapter.autoCacheFile = !0), Laya.QGMiniAdapter && (Laya.QGMiniAdapter.AutoCacheDownFile = !0), Laya.VVMiniAdapter && (Laya.VVMiniAdapter.autoCacheFile = !0), Laya.VVMiniAdapter && (Laya.VVMiniAdapter.AutoCacheDownFile = !0), Laya.BMiniAdapter && (Laya.BMiniAdapter.autoCacheFile = !0), Laya.BMiniAdapter && (Laya.BMiniAdapter.AutoCacheDownFile = !0), Laya.KGMiniAdapter && (Laya.KGMiniAdapter.autoCacheFile = !0), Laya.KGMiniAdapter && (Laya.KGMiniAdapter.AutoCacheDownFile = !0), (GameConfig.debug || "true" == Laya.Utils.getQueryString("debug")) && Laya.enableDebugPanel(), GameConfig.physicsDebug && Laya.PhysicsDebugDraw && Laya.PhysicsDebugDraw.enable(), GameConfig.stat && Laya.Stat.show(), Laya.alertGlobalError = !0, Laya.ResourceVersion.enable("version-1678e9771b.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION)
		}
		onVersionLoaded() {
			Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded))
		}
		onConfigLoaded() {
			GameConfig.startScene && Laya.Scene.open(GameConfig.startScene)
		}
	}
	new Main
}();